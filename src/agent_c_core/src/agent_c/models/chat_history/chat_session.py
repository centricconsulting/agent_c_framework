import uuid
import datetime
from pydantic import Field
from typing import Optional, Dict, Any, List
from agent_c.models.base import BaseModel
from agent_c.models.chat_history import MemoryMessage
from agent_c.models.chat_history.chat_memory import ChatMemory
from agent_c.util import MnemonicSlugs


class ChatSession(BaseModel):
    """
    Represents a session object with a unique identifier, metadata,
    and other attributes.

    Attributes
    ----------
    uuid : Optional[str]
        A unique identifier for the session.
        This is generated server-side and is not expected to be present on creation.
    created_at : str
        The timestamp when the session was created.
        Generated by the server.
    updated_at : str
        The timestamp when the session was last updated.
        Generated by the server.
    deleted_at : Optional[datetime]
        The timestamp when the session was deleted.
        Generated by the server.
    session_id : str
        The unique identifier of the session.
    metadata : Dict[str, Any]
        The metadata associated with the session.
    """

    uuid: Optional[str] = Field(default_factory=lambda: str(uuid.uuid4()))
    created_at: Optional[str] = Field(default_factory=lambda: datetime.datetime.now().isoformat())
    updated_at: Optional[str] = None
    deleted_at: Optional[str] = None
    session_id: str = Field(default_factory=lambda: MnemonicSlugs.generate_slug(3))
    user_id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = {}
    history: Optional[ChatMemory] = []

    _active_memory: Optional[ChatMemory] = None

    @property
    def messages(self) -> List[Dict[str, Any]]:
        if self._active_memory is None:
            return []

        return self._active_memory.messages

    @property
    def active_memory(self) -> ChatMemory:
        if self._active_memory is None:
            self._active_memory = ChatMemory()
            self.history.append(self._active_memory)

        return self._active_memory

    @active_memory.setter
    def active_memory(self, memory: ChatMemory):
        if not memory in self.history:
            self.history.append(memory)

        self._active_memory = memory

    async def add_message(self, msg: Dict[str, Any]):
        self.active_memory.messages.append(msg)

