from typing import Optional

from pydantic import ConfigDict, Field

from agent_c.models.events.session_event import SessionEvent

class RenderMediaEvent(SessionEvent):
    """
    Set when the agent or tool would like to render media to the user.
    - content_type is the MIME type of the media, e.g., "image/png", "video/mp4", "audio/mpeg", etc.
    - url is an optional URL to the media.  If provided, the client should use this URL to fetch the media.
    - name is an optional name for the media, e.g., "image.png", "video.mp4", etc.
    - content is an optional base64 encoded string of the media content.  If provided, the client should decode this string and render the media.
    - content_bytes is an optional bytes of the media content.

    This is primarily used by tools to display richer information to the users than agents are capable of.

    - The `foreign_content` field is used to indicate that the content is not directly from the agent or tool, but rather and outside source.
      - If `foreign_content` is True, the client should be cautious about rendering the content directly, as it may be untrusted.
      - If `foreign_content` is False, the content can be treated as trusted and not heavily sanitized.
        - The API expects the client to faithfully render the content as provided for internal content.
    """
    def __init__(self, **data):
        super().__init__(type = "render_media", **data)

    model_config = ConfigDict(populate_by_name=True)

    content_type: str = Field(..., alias="content-type", description="The MIME type of the media content, e.g., 'image/png', 'video/mp4', 'audio/mpeg', etc.")
    url: Optional[str] = Field(None, description="A URL to the media content, if available.")
    name: Optional[str] = Field(None, description="An optional name/file name for the media content, e.g., 'image.png', 'Sales Chart', etc.")
    content: Optional[str] = Field(None, description="A base64 encoded string of the media content, if available.")
    content_bytes: Optional[bytes] = Field(None, description="The raw bytes of the media content, if available.")
    sent_by_class: Optional[str] = Field(None, description="The toolset class that sent this content, if applicable.")
    sent_by_function: Optional[str] = Field(None, description="The tool function that sent this content, if applicable.")
    foreign_content: bool = Field(False, description="If True, the content was generated by a third party and should be treated as untrusted.")