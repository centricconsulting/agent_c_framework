import uuid
import yaml
from typing import Optional, List, Any
from pydantic import Field, ConfigDict
from agent_c.models.base import BaseModel
from agent_c.models.completion import CompletionParams


class PersonaFile(BaseModel):
    name: str = Field(..., description="Name of the persona file")
    model_id: str = Field(..., description="ID of the LLM model being used by the agent")
    agent_description: Optional[str] = Field(None, description="A description of the agent's purpose and capabilities")
    tools: List[str] = Field(default_factory=list, description="List of enabled toolset names the agent can use")
    agent_params: Optional[CompletionParams] = Field(None, description="Parameters for the interaction with the agent")
    prompt_metadata: Optional[dict[str, Any]] = Field(None, description="Metadata for the prompt, such as versioning or author information")
    persona: str = Field(..., description="Persona prompt of the persona defining the agent's behavior")
    uid: Optional[str] = Field(None, description="Unique ID  of the persona file, autogenerated if not provided")
    persona_file_version: Optional[int] = Field(1, description="Version of the persona file format")

    model_config = ConfigDict(
        protected_namespaces=(),
        json_schema_extra={
            "example": {
                "name": "Example Coding Assistant",
                "model_id": "claude-3-7-sonnet-latest",
                "agent_description": "This is just an example",
                "persona": "You are a helpful coding assistant.",
                 # Using ClaudeReasoningParams fields
                 "agent_params": {
                    "type": "claude_reasoning",
                    "budget_tokens": 20000,
                    "max_searches": 3,
                    "auth": { "api_key": "your_api_key" }
                },
                "tools": ["ThinkTools", "WorkspaceTools", "CssExplorerTools", "XmlExplorerTools"]
            }
        }
    )

    # YAML serialization methods
    def to_yaml(self) -> str:
        """Convert the persona file model to a YAML string.

        Returns:
            str: The model serialized as a YAML string.
        """
        data = self.model_dump(exclude_none=True, exclude={'uid'})
        return yaml.dump(data, default_flow_style=False, sort_keys=False)

    @classmethod
    def from_yaml(cls, yaml_str: str) -> 'PersonaFile':
        """Create a PersonaFile instance from a YAML string.

        Args:
            yaml_str (str): YAML string representing a PersonaFile.

        Returns:
            PersonaFile: An instance created from the YAML string.
        """
        data = yaml.safe_load(yaml_str)
        if 'uid' not in data:
            data['uid'] = str(uuid.uuid5(uuid.NAMESPACE_DNS, yaml_str))
        return cls.model_validate(data)