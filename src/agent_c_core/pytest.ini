[tool:pytest]
# Pytest configuration for Intelligent Message Management System

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --cov=src/agent_c
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=85

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    performance: Performance and benchmark tests
    stress: Stress tests for high-load scenarios
    migration: Migration testing for legacy compatibility
    slow: Tests that take more than 1 second to run
    concurrent: Tests that involve concurrent operations
    logging: Tests for structured logging integration
    tool_manipulation: Tests for tool manipulation API
    work_log: Tests for work log system
    translation: Tests for provider translation layer
    session: Tests for session management
    container: Tests for interaction container functionality

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pydantic.*

# Minimum Python version
minversion = 3.8

# Timeout for tests (in seconds)
timeout = 300

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto

# Test collection
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".tox",
    ".venv",
    "venv",
    "env"
]

# Log configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = src/agent_c
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
    setup.py
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml