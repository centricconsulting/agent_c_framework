from typing import Any

from agent_c.prompting.prompt_section import PromptSection


class DataframeToolsSection(PromptSection):
    def __init__(self, **data: Any):
        TEMPLATE = ("# Introduction "
                    "- The datatools family of toolsets allows you to work with Excel and CSV files via Pandas Dataframes. "
                    "- Take a step back and think about what you are trying to do.  Perform the operations needed before attempting to display the answers."
                    "- You will have an Examples section below for tips on how to use the tool. "
                    "- Tell me what your process is before proceeding. You are modifying an external dataframe that you cannot see directly. Filter and aggregate first, then display the results.\n"
                    "- Your tool instructions will tell you if you're modifying the original dataframe in memory or a deep copy of a dataframe. "
                    "Ensure you keep track of which one you are acting on. "
                    "- If you need to perform multiple sequential actions on the dataframe you will need to save the dataframe to cache after each step and "
                    "load the dataframe from cache before performing the next step."
                    "## Notes "
                    "- Do NOT use dataframe-display_records for filtering or aggregating data.  Instead, use the dataframe-agg, dataframe-groupby_and_agg, "
                    "and dataframe-filter toolsets."
                    "- dataframe-display_records is to only display the records in memory to the user - you may not use it for your operations. "
                    "It may only be used in direct response to a user asking to see the records.  It is not to be used for any other purpose. "
                    "- dataframe-agg is equivalent to calling dataframe.agg(aggregations)\n"
                    "- dataframe-groupby_and_agg is equivalent to calling dataframe.groupby(by).agg(aggregations)\n"
                    " This can be useful for finding aggregate values and filtering on them.  For example, if you had columns of "
                    " day and total bill, you can find get the days that had an average daily bill amount of greater than "
                    " 20 by using the dataframe-groupby_and_agg version of this dataframe.groupby(by).agg(aggregations) "
                    " the resultant query should be like .groupby('day').filter(lambda x : x['total_bill'].mean() > 20)"
                    "- dataframe-filter can be used to perform .query actions on a dataframe\n"
                    "## Examples "
                    "### Example 1"
                    "- **User** : 'What is the average of the first 5 rows' "
                    "- **Assistant Tool Action** uses tool dataframe-filter_rows with 'index<5' "
                    "- **Assistant Response**: '0.7727' "
                    "### Example 2 "
                    "- **User** : 'I want to group values by column A and for each value of column A' find the sum and mean of column B and standard deviation and the median for column C "
                    "- **Assistant Tool Action** uses tool with dataframe-groupby_and_agg  with groupby('A').agg({'B': ['sum', 'mean'],'C': ['std', 'median']}) "
                    "- **Assistant Response**: '{'columns':[['B','sum'],['B','mean'],['C','std'],['C','median']],'index':[1,2],'data':[[3,1.5,2.8284271247,3.0],[7,3.5,2.8284271247,11.0]]}' "
                    "### Example 3 "
                    "- **User** : 'I want to look at total and average sales for each store and department "
                    "- **Assistant Tool Action** uses tool dataframe-groupby_and_agg  with groupby(['Store','Department']).agg({'Sales': ['sum', 'mean']}).rename(columns={'sum': 'Total_Sales', 'mean': 'Average_Sales'}) "
                    "- **Assistant Response**: '{'columns':[['Sales','Total_Sales'],['Sales','Average_Sales']],'index':[['A','Clothing'],['A','Electronics'],['B','Clothing'],['B','Electronics']],'data':[[800,400.0],[1000,1000.0],[700,700.0],[2700,1350.0]]}' "
                    "### Example 4 "
                    "- **User** : I want to sum sales by month and year "
                    "- **Assistant Tool Action** uses tool dataframe-add_column with params: {'column_name': 'MMYY', 'column_value_or_expression': \"pd.to_datetime(df['date_column']).dt.strftime('%m%y')\", 'is_expression': True} "
                    "- **Assistant Tool Action** uses tool dataframe-groupby_and_agg  with groupby('MMYY').agg({'estimatedtotal': ['sum']}) "
                    "### Example 5 "
                    "- **User** : I want to count the number of new opportunities for the current month "
                    "- **Assistant Tool Action** uses tool dataframe-filter with createdon >= '2024-02-01' and createdon <= '2024-02-28' "
                    "- **Assistant Response**: There are 5 new opportunities for the current month "
                    "### Example 6 "
                    "- **User** : I want to filter the records for the current month "
                    "- **Assistant Tool Action** uses tool dataframe-filter with createdon >= '2024-02-01' and createdon <= '2024-02-28' "
                    "- **Assistant Response**: 'The records for the current month are: {record1, record2, record3, record4, record5}' "
                    "### Example 7 "
                    "- **User** : I want the new, open, won, lost statistics for the month "
                    "- **Assistant Tool Action** uses tool dataframe-filter with createdon >= '2024-02-01' and createdon <= '2024-02-28' "
                    "- **Assistant Response**: responds with key to dataframe in tool cache "
                    "- **Assistant Tool Action** uses dataframe-load_cached_dataframe and passing in datacache key "
                    "- **Assistant Tool Action** uses tool dataframe-groupby_and_agg  with groupby('statecode').agg({'opportunityid': 'count', 'estimatedvalue': ['sum', 'mean']}) "
                    )
        super().__init__(template=TEMPLATE, required=True, name="Working with Data Tools", render_section_header=True, **data)

