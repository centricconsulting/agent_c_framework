git:
  subcommands:
    status:  { flags: ["--porcelain", "-s", "-b", "--no-color"], timeout: 20 }
    log:     { flags: ["--oneline","--graph","--decorate","-n","-p", "--no-color"] }
    show:    { flags: ["--name-only","--stat","-p", "--no-color"] }
    diff:    { flags: ["--name-only","--stat","--cached","-p", "--no-color"] }
    add: { "flags": [ ] }
    restore: { "flags": [ "--staged" ] }
    reset: { "flags": [ "--hard", "--soft", "--mixed" ] }
    checkout: { "flags": [ "-b", "--" ] }
    switch: { "flags": [ "-c", "-" ] }  # not git -c; this is switch -c (create)
    branch: { "flags": [ "-a", "-vv", "-d", "-D" ] }
    stash: { "flags": [ "list", "push", "pop", "apply", "drop", "clear" ] }
    commit: { "flags": [ "-m", "--amend", "--no-verify" ] }
    rev-parse: { "flags": [ "--abbrev-ref", "--short", "HEAD", "--verify" ] }
    ls-files: { "flags": [ "--exclude-standard", "--others", "--cached" ] }
  deny_global_flags: ["-c","--exec-path","--help","-P"]
  safe_env:
    GIT_TERMINAL_PROMPT: "0"
    GIT_CONFIG_NOSYSTEM: "1"
    GIT_CONFIG_GLOBAL: "/dev/null"
    GIT_ALLOW_PROTOCOL: "https,file"
  env_overrides:
    # Token Optimizations
    GIT_PAGER: "cat"          # disable pager (no escape codes from 'less -R')
    CLICOLOR: "0"               # disable colorization
    TERM: "dumb"               # discourages color/TTY tricks
  default_timeout: 30

pytest:
  # PytestCommandValidator uses SAFE_FLAGS; this sets defaults/timeouts or env overrides
  flags: [ "-q","--maxfail","--disable-warnings","--color" ]
  default_timeout: 120
  env_overrides:
    PYTHONDONTWRITEBYTECODE: "1"
    PYTEST_ADDOPTS: "-q --color=no --maxfail=1" # quiet + no ANSI + stop early
    PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"         # avoids third-party plugin noise
    PYTHONWARNINGS: "ignore"                    # ignore depreciation warnings from test runs

# ---- OS basics ----
which:
  validator: os_basic
  flags: ["-a","--version"]
  default_timeout: 5

where:               # Windows equivalent of 'which'
  validator: os_basic
  flags: ["/r"]      # (optional) supports scanning a dir; consider omitting for safety
  default_timeout: 5

whoami:
  validator: os_basic
  flags: []          # (Windows 'whoami' has flags like /USER; add if needed)
  default_timeout: 5

echo:
  validator: os_basic
  flags: ["--help","-n","-e"]   # keep minimal; shell redirection is ignored under shell=False
  default_timeout: 5

# Windows uses find for inside of files, but *nix find is for filesystem searching.  Disabling for now.
#find:
#  validator: os_basic
#  flags: ["-name","-maxdepth","-type","-mtime","-not","-path","-print"]
#  deny_tokens: ["-exec","-ok","-delete","-fdelete","-execdir","-prune"]
#  default_timeout: 10

# On Windows you may prefer 'findstr' (text search) instead of 'find'
#findstr:
#  validator: os_basic
#  flags: ["/I","/N","/R","/S"]  # be careful with recursive /S
#  default_timeout: 10

# ---- Language-specific ----

node_common: &node_common
  validator: node
  flags: ["-v","--version","--help"]
  deny_global_flags: ["-e","--eval","-p","--print"]
  default_timeout: 5
  env_overrides:
    NODE_DISABLE_COLORS: "1"
    NO_COLOR: "1"
    FORCE_COLOR: "0"
node:    *node_common
nodejs:  *node_common

npm:
  validator: npm
  root_flags: ["-v","--version","--help"]
  subcommands:
      view:   { allowed_flags: ["--json"] }
      list:   { allowed_flags: ["--depth","--json"] }
      ping:   { allowed_flags: [] }
      outdated: { allowed_flags: [] }

      # Only allow "npm config get <key>"
      config:
        get_only: true
        allowed_flags: []       # keep empty; we gate on 'get'

      # --- Scripts (ALLOWLIST) ---
      run:
        allowed_scripts: ["build","test","lint","format","typecheck"]
        deny_args: true         # no extra args (incl. after --)

      # --- Safe, lockfile-based install ---
      ci:
        enabled: true
        require_no_packages: true
        require_flags: ["--ignore-scripts"]
        allowed_flags: ["--ignore-scripts","--no-audit","--no-fund","--prefer-offline","--cache"]

      install:
        enabled: false
        require_no_packages: true
        require_flags: ["--ignore-scripts"]
        allowed_flags: ["--ignore-scripts","--no-audit","--no-fund","--prefer-offline","--cache"]

  # keep ‘i’ denied unless you want it—the validator aliases it to 'install'
  deny_subcommands: ["exec","publish","update","audit","ci-info","token","login","adduser","whoami","pack","link","unlink"]

  default_timeout: 120
  env_overrides:
    NPM_CONFIG_COLOR: "false"       # npm itself: no color
    NPM_CONFIG_PROGRESS: "false"    # no progress bars
    NPM_CONFIG_LOGLEVEL: "warn"     # or "error" to be even quieter
    NO_COLOR: "1"                   # many tools respect this
    FORCE_COLOR: "0"                # chalk/colorette/etc. honor this
    NODE_DISABLE_COLORS: "1"        # belt-and-suspenders for some libs
    CI: "1"                         # many CLIs reduce interactivity/spinners
    NPM_CONFIG_FUND: "false"
    NPM_CONFIG_AUDIT: "false"
    NPM_CONFIG_UPDATE_NOTIFIER: "false"
    NPM_CONFIG_PREFIX: ".npm-prefix"
    NPM_CONFIG_CACHE: ".npm-cache"
    # ensure Windows can resolve .cmd if the parent env omitted it
    PATHEXT: ".COM;.EXE;.BAT;.CMD"

dotnet:
  validator: dotnet
  subcommands:
    --info: { flags: [ ] }
    --list-sdks: { flags: [ ] }
    --list-runtimes: { flags: [ ] }

    restore:
      flags: [ "--locked-mode","--configfile","--source","--verbosity","-v","--nologo" ]
      require_flags:
        --locked-mode: true
        --nologo: true
        --verbosity: [ "quiet","minimal" ]   # enforce locked dependency graph

    build:
      flags: [ "--configuration","-c","--no-restore","--nologo","--verbosity","-v" ]
      # If you want to *require* separate restore/build phases, uncomment:
      # require_flagsl: ["--no-restore"]
      require_flags:
        --nologo: true
        --verbosity: [ "quiet","minimal" ] # enforce quiet, no-logo builds

    test:
      flags: [ "--configuration","-c","--no-build","--nologo","--verbosity","-v","--filter" ]
      require_flags:
        --no-build: true
        --nologo: true
        --verbosity: [ "minimal","quiet" ]
        --logger: "console;verbosity=minimal"

  deny_subcommands: [ "run","publish","tool","new","pack","clean","nuget","workload" ]
  default_timeout: 300
  env_overrides:
    DOTNET_CLI_TELEMETRY_OPTOUT: "1"
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
    DOTNET_NOLOGO: "1"
    NUGET_PACKAGES: ".nuget/packages"
    # Generic no-color hints:
    CLICOLOR: "0"
    NO_COLOR: "1"
    TERM: "dumb"
    # Stable, English output (helps tokenization & parsing):
    DOTNET_CLI_UI_LANGUAGE: "en-US"