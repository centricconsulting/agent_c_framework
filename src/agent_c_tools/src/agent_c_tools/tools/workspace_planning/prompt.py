from typing import Any, Optional, cast

from agent_c.prompting.prompt_section import OldPromptSection, property_bag_item

class WorkspacePlanSection(OldPromptSection):

    def __init__(self, **data: Any):
        TEMPLATE = (
            "# Workspace Planning Tools (WSP) - Comprehensive Planning Guide\n\n"
            "The Workspace Planning Tools enable strategic project management through structured plans, hierarchical tasks, rich contextual information, and knowledge capture.\n\n"
            "\n## User Collaboration and Planning Rules\n"
            "- When directed to bring yourself up to speed you should:\n"
            "   - Check the `current_plan` key of the workspace metadata for the current plan ID.\n"
            "   - Use the Workspace Planning Tools to review the plan status and lessons learned for the current plan\n"
            "       - Your goal here is to understand the state of things and prepare to handle the next request from the user.\n"
            "\n## Plan execution Rules\n"
            "- Unless explicit direction otherwise is given you may only execute a single stpe at a time.\n"
            "- ALWAYS pause for verification before marking a task as complete.\n"
            "\n## Core Concepts\n\n"
            "### Plans\n"
            "- **Purpose**: Container for related work with clear objectives and success criteria\n"
            "- **Scope**: Should represent a cohesive project, feature, or major initiative\n"
            "- **Lifecycle**: Track from conception through completion and retrospective\n\n"
            
            "### Tasks\n"
            "- **Granularity**: Break work into actionable, testable units (typically 1-4 hours each)\n"
            "- **Hierarchy**: Use parent-child relationships to organize complex work\n"
            "- **Dependencies**: Consider task ordering and prerequisites\n"
            "- **Sequencing**: Use sequence numbers to control display order independent of priority\n"
            "- **Ownership**: Each task should have clear deliverables and acceptance criteria\n\n"
            
            "### Context Field - The Strategic Asset\n"
            "The context field is where you capture the \"why\" and \"how\" that makes tasks actionable:\n\n"
            "**Technical Context:**\n"
            "- Reference relevant design documents, specifications, or architectural decisions\n"
            "- Include code patterns, frameworks, or technologies involved\n"
            "- Note integration points, dependencies, or constraints\n"
            "- Link to related issues, PRs, or documentation\n\n"
            "**Business Context:**\n"
            "- Explain the business value or user impact\n"
            "- Reference requirements, user stories, or acceptance criteria\n"
            "- Note stakeholder concerns or success metrics\n\n"
            "**Implementation Context:**\n"
            "- Describe the approach, methodology, or strategy\n"
            "- Include key implementation details, gotchas, or considerations\n"
            "- Reference examples, templates, or similar work\n"
            "- Note testing strategies or validation approaches\n\n"
            "**Risk Context:**\n"
            "- Identify potential blockers, risks, or unknowns\n"
            "- Note fallback plans or alternative approaches\n"
            "- Include impact assessment and mitigation strategies\n\n"
            
            "## Path Format\n"
            "- Use UNC style path: `//[workspace]/[plan_id]`\n"
            "- Plan IDs should be descriptive: `//ui/api_migration_v2` not `//ui/plan1`\n"
            "- Example: `//project/user_authentication_overhaul`\n\n"
            
            "## Strategic Planning Workflow\n\n"
            "### 1. Plan Creation\n"
            "- **Title**: Clear, descriptive name that explains the objective\n"
            "- **Description**: Executive summary including scope, goals, and success criteria\n"
            "- **Research**: Review existing documentation, requirements, and constraints\n\n"
            
            "### 2. Work Breakdown Structure\n"
            "- **Phase Identification**: Group related work into logical phases\n"
            "- **Task Decomposition**: Break phases into specific, actionable tasks\n"
            "- **Sequence Planning**: Assign sequence numbers to control logical ordering\n"
            "- **Dependency Mapping**: Identify task prerequisites and sequencing\n"
            "- **Risk Assessment**: Identify high-risk or complex tasks early\n\n"
            
            "### 3. Context Enrichment\n"
            "For each task, populate context with:\n"
            "- **Reference Materials**: Link to specs, designs, examples, or documentation\n"
            "- **Technical Approach**: Describe methodology, patterns, or frameworks\n"
            "- **Acceptance Criteria**: Define \"done\" clearly and measurably\n"
            "- **Dependencies**: Note what must be completed first\n"
            "- **Risks/Blockers**: Identify potential issues and mitigation strategies\n\n"
            
            "### 4. Prioritization Strategy\n"
            "- **High Priority**: Critical path items, blockers, or foundation work\n"
            "- **Medium Priority**: Important but not blocking other work\n"
            "- **Low Priority**: Nice-to-have, cleanup, or documentation tasks\n\n"
            
            "### 5. Execution and Tracking\n"
            "- **Progress Updates**: Update context with implementation notes\n"
            "- **Task Completion**: Include a completion report when updating tasks to complete status\n"
            "- **Blocker Documentation**: Record issues and resolution approaches\n"
            "- **Scope Changes**: Update descriptions and context as requirements evolve\n\n"
            
            "### 6. Knowledge Capture\n"
            "- **Lessons Learned**: Capture insights, gotchas, and best practices\n"
            "- **Decision Rationale**: Document why certain approaches were chosen\n"
            "- **Future Considerations**: Note technical debt or follow-up work\n\n"
            
            "## Task Sequencing and Ordering\n\n"
            "### Sequence Numbers\n"
            "- **Purpose**: Control logical workflow order independent of priority\n"
            "- **Usage**: Assign sequence numbers (1, 2, 3...) to tasks that must appear in specific order\n"
            "- **Sorting**: Tasks sort by sequence first, then priority, then creation date\n"
            "- **Optional**: Tasks without sequence numbers appear after sequenced tasks\n\n"
            "### When to Use Sequences\n"
            "- **Workflow Phases**: Phase 1, Phase 2, Phase 3 should appear in order regardless of priority\n"
            "- **Dependencies**: When Task B logically follows Task A in documentation\n"
            "- **Process Steps**: Step-by-step procedures that must be followed in order\n"
            "- **Timeline**: When chronological order matters more than priority\n\n"
            "### Sequence Examples\n"
            "```\n"
            "# Create phases in logical order\n"
            "wsp_create_task plan_path=\"//api/migration\" title=\"Phase 1: Foundation\" sequence=1 priority=\"high\"\n"
            "wsp_create_task plan_path=\"//api/migration\" title=\"Phase 2: Core Services\" sequence=2 priority=\"medium\"\n"
            "wsp_create_task plan_path=\"//api/migration\" title=\"Phase 3: Integration\" sequence=3 priority=\"high\"\n"
            "wsp_create_task plan_path=\"//api/migration\" title=\"Phase 4: Testing\" sequence=4 priority=\"high\"\n\n"
            "# Result: Phases appear 1,2,3,4 regardless of priority differences\n"
            "```\n\n"
            "## Best Practices\n\n"
            "### Task Design\n"
            "- Make tasks specific and actionable (\"Update session API\" vs \"Fix API\")\n"
            "- Include verification steps (\"and add tests\" or \"validate with stakeholders\")\n"
            "- Size tasks appropriately (1-4 hours of focused work)\n"
            "- Use consistent naming conventions within a plan\n"
            "- Assign sequence numbers for logical workflow ordering (Phase 1: sequence=1, Phase 2: sequence=2)\n\n"
            
            "### Context Quality\n"
            "- Write context as if explaining to a future team member\n"
            "  - And they have anger management issues when faced with surprises\n"
            "- Include enough detail to restart work after interruption\n"
            "- Reference specific files, functions, or code sections when relevant\n"
            "- Update context as you learn more during implementation\n\n"
            
            "### Lessons Learned\n"
            "- Capture both technical and process insights\n"
            "- Include specific examples and code snippets when helpful\n"
            "- Note what didn't work as well as what did\n"
            "- Make lessons searchable and reusable for future projects\n\n"
            
            "## Example Context Entries\n\n"
            "**Good Context Example:**\n"
            "```\n"
            "Update session-api.js to use v2 endpoints per the migration guide\n"
            "(//api/docs/api_v2/migration_guide.md). Key changes:\n"
            "- Replace /api/v1/sessions with /api/v2/sessions\n"
            "- Update response handling for new pagination format\n"
            "- Add agent configuration methods per v2 spec\n"
            "- Ensure backward compatibility during transition\n"
            "Testing: Use existing test patterns from config-api.test.js\n"
            "Risk: Session creation flow is critical - test thoroughly\n"
            "```\n\n"
            
            "**Poor Context Example:**\n"
            "```\n"
            "Update the session API for v2\n"
            "```\n\n"
            
            "## Integration with Development Workflow\n"
            "- Use plans to track feature development from conception to deployment\n"
            "- Update task context with implementation discoveries\n"
            "- Capture lessons learned during code reviews and retrospectives\n"
            "- Use completed plans as project documentation and knowledge base\n"
        )
        super().__init__(template=TEMPLATE, required=True, name="Workspace Planning", render_section_header=True, **data)