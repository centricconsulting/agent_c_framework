/**
 * OpenAI ChatCompletionMessageParam TypeScript Definitions
 * 
 * This file contains comprehensive type definitions for OpenAI's Chat Completion
 * Message types, converted from the Python OpenAI SDK.
 * 
 * These types match the actual server data structures exactly.
 */

// Main Union Type
/**
 * Union type representing all possible message types that can be sent to the OpenAI Chat Completion API
 */
export type ChatCompletionMessageParam = 
  | ChatCompletionDeveloperMessageParam
  | ChatCompletionSystemMessageParam
  | ChatCompletionUserMessageParam
  | ChatCompletionAssistantMessageParam
  | ChatCompletionToolMessageParam
  | ChatCompletionFunctionMessageParam;

// Message Type Interfaces

/**
 * Developer message for providing instructions or context to the model
 * Similar to system messages but with potentially different handling
 */
export interface ChatCompletionDeveloperMessageParam {
  /** The role of the message author, must be "developer" */
  role: "developer";
  
  /** The contents of the developer message */
  content: string | ChatCompletionContentPartText[];
  
  /** An optional name for the participant. Helps differentiate between participants of the same role */
  name?: string;
}

/**
 * System message for providing high-level instructions or context to the model
 * Typically used to set the behavior or role of the assistant
 */
export interface ChatCompletionSystemMessageParam {
  /** The role of the message author, must be "system" */
  role: "system";
  
  /** The contents of the system message */
  content: string | ChatCompletionContentPartText[];
  
  /** An optional name for the participant. Helps differentiate between participants of the same role */
  name?: string;
}

/**
 * User message representing input from the end user
 * Supports rich content including text, images, audio, and files
 */
export interface ChatCompletionUserMessageParam {
  /** The role of the message author, must be "user" */
  role: "user";
  
  /** The contents of the user message - supports various content types */
  content: string | ChatCompletionContentPart[];
  
  /** An optional name for the participant. Helps differentiate between participants of the same role */
  name?: string;
}

/**
 * Assistant message representing a response from the AI model
 * Can include text content, tool calls, refusals, and audio responses
 */
export interface ChatCompletionAssistantMessageParam {
  /** The role of the message author, must be "assistant" */
  role: "assistant";
  
  /** 
   * The contents of the assistant message
   * Required unless tool_calls or function_call is specified
   */
  content?: string | ContentArrayOfContentPart[] | null;
  
  /** An optional name for the participant. Helps differentiate between participants of the same role */
  name?: string;
  
  /** The refusal message by the assistant */
  refusal?: string | null;
  
  /** The tool calls generated by the model, such as function calls */
  tool_calls?: ChatCompletionMessageToolCallUnion[];
  
  /** 
   * @deprecated Use tool_calls instead
   * The name and arguments of a function that should be called, as generated by the model 
   */
  function_call?: FunctionCall | null;
  
  /** Data about a previous audio response from the model */
  audio?: Audio | null;
}

/**
 * Tool message providing the result of a tool call back to the model
 * Must reference the specific tool call it's responding to
 */
export interface ChatCompletionToolMessageParam {
  /** The role of the message author, must be "tool" */
  role: "tool";
  
  /** The contents of the tool message */
  content: string | ChatCompletionContentPartText[];
  
  /** Tool call ID that this message is responding to */
  tool_call_id: string;
}

/**
 * Function message providing the result of a function call back to the model
 * @deprecated Use ChatCompletionToolMessageParam instead
 */
export interface ChatCompletionFunctionMessageParam {
  /** The role of the message author, must be "function" */
  role: "function";
  
  /** The contents of the function message */
  content: string | null;
  
  /** The name of the function to call */
  name: string;
}

// Content Part Types

/**
 * Union type for all possible content parts in user messages
 * Allows for rich multi-modal content
 */
export type ChatCompletionContentPart = 
  | ChatCompletionContentPartText
  | ChatCompletionContentPartImage
  | ChatCompletionContentPartInputAudio
  | ChatCompletionContentPartFile;

/**
 * Text content part for messages
 */
export interface ChatCompletionContentPartText {
  /** The type of the content part, must be "text" */
  type: "text";
  
  /** The text content */
  text: string;
}

/**
 * Image content part for messages
 */
export interface ChatCompletionContentPartImage {
  /** The type of the content part, must be "image_url" */
  type: "image_url";
  
  /** Image URL information */
  image_url: ImageURL;
}

export interface ImageURL {
  /** Either a URL of the image or the base64 encoded image data */
  url: string;
  
  /** 
   * Specifies the detail level of the image
   * Learn more: https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding
   */
  detail?: "auto" | "low" | "high";
}

/**
 * Input audio content part for messages
 */
export interface ChatCompletionContentPartInputAudio {
  /** The type of the content part, must be "input_audio" */
  type: "input_audio";
  
  /** Input audio information */
  input_audio: InputAudio;
}

export interface InputAudio {
  /** Base64 encoded audio data */
  data: string;
  
  /** The format of the encoded audio data */
  format: "wav" | "mp3";
}

/**
 * File content part for messages
 */
export interface ChatCompletionContentPartFile {
  /** The type of the content part, must be "file" */
  type: "file";
  
  /** File information */
  file: FileFile;
}

export interface FileFile {
  /** The base64 encoded file data, used when passing the file to the model as a string */
  file_data?: string;
  
  /** The ID of an uploaded file to use as input */
  file_id?: string;
  
  /** The name of the file, used when passing the file to the model as a string */
  filename?: string;
}

/**
 * Refusal content part for assistant messages
 */
export interface ChatCompletionContentPartRefusal {
  /** The type of the content part, must be "refusal" */
  type: "refusal";
  
  /** The refusal message generated by the model */
  refusal: string;
}

// Assistant Message Specific Types

/**
 * Union type for content parts that can appear in assistant messages
 */
export type ContentArrayOfContentPart = 
  | ChatCompletionContentPartText
  | ChatCompletionContentPartRefusal;

/**
 * Reference to a previous audio response from the model
 */
export interface Audio {
  /** Unique identifier for a previous audio response from the model */
  id: string;
}

/**
 * @deprecated Use tool_calls instead
 * Function call information generated by the model
 */
export interface FunctionCall {
  /** The name of the function to call */
  name: string;
  
  /** 
   * The arguments to call the function with, as generated by the model in JSON format
   * Note: The model may not always generate valid JSON. Validate before use.
   */
  arguments: string;
}

// Tool Call Types

/**
 * Union type for all possible tool call types
 */
export type ChatCompletionMessageToolCallUnion = 
  | ChatCompletionMessageFunctionToolCall
  | ChatCompletionMessageCustomToolCall;

/**
 * Function tool call generated by the model
 */
export interface ChatCompletionMessageFunctionToolCall {
  /** The ID of the tool call */
  id: string;
  
  /** The type of the tool, must be "function" */
  type: "function";
  
  /** The function that the model called */
  function: {
    /** The name of the function to call */
    name: string;
    
    /** 
     * The arguments to call the function with, as generated by the model in JSON format
     * Note: The model may not always generate valid JSON. Validate before use.
     */
    arguments: string;
  };
}

/**
 * Custom tool call generated by the model
 */
export interface ChatCompletionMessageCustomToolCall {
  /** The ID of the tool call */
  id: string;
  
  /** The type of the tool, must be "custom" */
  type: "custom";
  
  /** The custom tool that the model called */
  custom: {
    /** The name of the custom tool to call */
    name: string;
    
    /** The input for the custom tool call generated by the model */
    input: string;
  };
}

// Type guards for runtime type checking
export function isChatCompletionDeveloperMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionDeveloperMessageParam {
  return message.role === 'developer';
}

export function isChatCompletionSystemMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionSystemMessageParam {
  return message.role === 'system';
}

export function isChatCompletionUserMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionUserMessageParam {
  return message.role === 'user';
}

export function isChatCompletionAssistantMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionAssistantMessageParam {
  return message.role === 'assistant';
}

export function isChatCompletionToolMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionToolMessageParam {
  return message.role === 'tool';
}

export function isChatCompletionFunctionMessageParam(
  message: ChatCompletionMessageParam
): message is ChatCompletionFunctionMessageParam {
  return message.role === 'function';
}

// Content part type guards
export function isChatCompletionContentPartText(
  part: ChatCompletionContentPart | ContentArrayOfContentPart
): part is ChatCompletionContentPartText {
  return 'type' in part && part.type === 'text';
}

export function isChatCompletionContentPartImage(
  part: ChatCompletionContentPart
): part is ChatCompletionContentPartImage {
  return 'type' in part && part.type === 'image_url';
}

export function isChatCompletionContentPartInputAudio(
  part: ChatCompletionContentPart
): part is ChatCompletionContentPartInputAudio {
  return 'type' in part && part.type === 'input_audio';
}

export function isChatCompletionContentPartFile(
  part: ChatCompletionContentPart
): part is ChatCompletionContentPartFile {
  return 'type' in part && part.type === 'file';
}

export function isChatCompletionContentPartRefusal(
  part: ContentArrayOfContentPart
): part is ChatCompletionContentPartRefusal {
  return 'type' in part && part.type === 'refusal';
}

// Tool call type guards
export function isChatCompletionMessageFunctionToolCall(
  toolCall: ChatCompletionMessageToolCallUnion
): toolCall is ChatCompletionMessageFunctionToolCall {
  return toolCall.type === 'function';
}

export function isChatCompletionMessageCustomToolCall(
  toolCall: ChatCompletionMessageToolCallUnion
): toolCall is ChatCompletionMessageCustomToolCall {
  return toolCall.type === 'custom';
}