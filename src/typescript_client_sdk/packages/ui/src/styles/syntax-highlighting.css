/* Syntax Highlighting Styles for Code Blocks */
/* This file provides theme-aware syntax highlighting that works with both light and dark modes */

/* Import GitHub light theme as base */
@import 'highlight.js/styles/github.css';

/* Override background colors to use our theme system instead of fixed colors */
.hljs {
  background: transparent !important;
}

/* Ensure inline code remains inline and doesn't get highlight.js block styling */
:not(pre) > code {
  display: inline !important;
  background: transparent !important;
}

:not(pre) > code.hljs {
  display: inline !important;
  padding: 0 !important;
}

/* Code blocks should remain block */
pre > code {
  display: block !important;
}

/* Ensure pre elements use our theme background */
pre {
  background: transparent;
}

/* Dark mode overrides using system preference */
@media (prefers-color-scheme: dark) {
  /* Override light theme colors with dark theme colors */
  .hljs {
    color: #c9d1d9;
  }
  
  .hljs-doctag,
  .hljs-keyword,
  .hljs-meta .hljs-keyword,
  .hljs-template-tag,
  .hljs-template-variable,
  .hljs-type,
  .hljs-variable.language_ {
    color: #ff7b72;
  }
  
  .hljs-title,
  .hljs-title.class_,
  .hljs-title.class_.inherited__,
  .hljs-title.function_ {
    color: #d2a8ff;
  }
  
  .hljs-attr,
  .hljs-attribute,
  .hljs-literal,
  .hljs-meta,
  .hljs-number,
  .hljs-operator,
  .hljs-selector-attr,
  .hljs-selector-class,
  .hljs-selector-id,
  .hljs-variable {
    color: #79c0ff;
  }
  
  .hljs-meta .hljs-string,
  .hljs-regexp,
  .hljs-string {
    color: #a5d6ff;
  }
  
  .hljs-built_in,
  .hljs-symbol {
    color: #ffa657;
  }
  
  .hljs-code,
  .hljs-comment,
  .hljs-formula {
    color: #8b949e;
  }
  
  .hljs-name,
  .hljs-quote,
  .hljs-selector-pseudo,
  .hljs-selector-tag {
    color: #7ee787;
  }
  
  .hljs-subst {
    color: #c9d1d9;
  }
  
  .hljs-section {
    color: #1f6feb;
    font-weight: bold;
  }
  
  .hljs-bullet {
    color: #f2cc60;
  }
  
  .hljs-emphasis {
    color: #c9d1d9;
    font-style: italic;
  }
  
  .hljs-strong {
    color: #c9d1d9;
    font-weight: bold;
  }
  
  .hljs-addition {
    color: #aff5b4;
    background-color: #033a16;
  }
  
  .hljs-deletion {
    color: #ffdcd7;
    background-color: #67060c;
  }
}

/* Support for Tailwind's dark mode class strategy */
.dark .hljs {
  color: #c9d1d9;
}

.dark .hljs-doctag,
.dark .hljs-keyword,
.dark .hljs-meta .hljs-keyword,
.dark .hljs-template-tag,
.dark .hljs-template-variable,
.dark .hljs-type,
.dark .hljs-variable.language_ {
  color: #ff7b72;
}

.dark .hljs-title,
.dark .hljs-title.class_,
.dark .hljs-title.class_.inherited__,
.dark .hljs-title.function_ {
  color: #d2a8ff;
}

.dark .hljs-attr,
.dark .hljs-attribute,
.dark .hljs-literal,
.dark .hljs-meta,
.dark .hljs-number,
.dark .hljs-operator,
.dark .hljs-selector-attr,
.dark .hljs-selector-class,
.dark .hljs-selector-id,
.dark .hljs-variable {
  color: #79c0ff;
}

.dark .hljs-meta .hljs-string,
.dark .hljs-regexp,
.dark .hljs-string {
  color: #a5d6ff;
}

.dark .hljs-built_in,
.dark .hljs-symbol {
  color: #ffa657;
}

.dark .hljs-code,
.dark .hljs-comment,
.dark .hljs-formula {
  color: #8b949e;
}

.dark .hljs-name,
.dark .hljs-quote,
.dark .hljs-selector-pseudo,
.dark .hljs-selector-tag {
  color: #7ee787;
}

.dark .hljs-subst {
  color: #c9d1d9;
}

.dark .hljs-section {
  color: #1f6feb;
  font-weight: bold;
}

.dark .hljs-bullet {
  color: #f2cc60;
}

.dark .hljs-emphasis {
  color: #c9d1d9;
  font-style: italic;
}

.dark .hljs-strong {
  color: #c9d1d9;
  font-weight: bold;
}

.dark .hljs-addition {
  color: #aff5b4;
  background-color: #033a16;
}

.dark .hljs-deletion {
  color: #ffdcd7;
  background-color: #67060c;
}

.dark :not(pre) > code {
  background: transparent !important;
}
