"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-state@1.4.3";
exports.ids = ["vendor-chunks/prosemirror-state@1.4.3"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar prosemirrorModel = __webpack_require__(/*! prosemirror-model */ \"(rsc)/../../node_modules/.pnpm/prosemirror-model@1.25.3/node_modules/prosemirror-model/dist/index.cjs\");\n\nvar prosemirrorTransform = __webpack_require__(/*! prosemirror-transform */ \"(rsc)/../../node_modules/.pnpm/prosemirror-transform@1.10.4/node_modules/prosemirror-transform/dist/index.cjs\");\n\nvar classesById = Object.create(null);\n\nvar Selection = function () {\n  function Selection($anchor, $head, ranges) {\n    _classCallCheck(this, Selection);\n\n    this.$anchor = $anchor;\n    this.$head = $head;\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];\n  }\n\n  _createClass(Selection, [{\n    key: \"anchor\",\n    get: function get() {\n      return this.$anchor.pos;\n    }\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.$head.pos;\n    }\n  }, {\n    key: \"from\",\n    get: function get() {\n      return this.$from.pos;\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this.$to.pos;\n    }\n  }, {\n    key: \"$from\",\n    get: function get() {\n      return this.ranges[0].$from;\n    }\n  }, {\n    key: \"$to\",\n    get: function get() {\n      return this.ranges[0].$to;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      var ranges = this.ranges;\n\n      for (var i = 0; i < ranges.length; i++) {\n        if (ranges[i].$from.pos != ranges[i].$to.pos) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return this.$from.doc.slice(this.from, this.to, true);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n      var lastNode = content.content.lastChild,\n          lastParent = null;\n\n      for (var i = 0; i < content.openEnd; i++) {\n        lastParent = lastNode;\n        lastNode = lastNode.lastChild;\n      }\n\n      var mapFrom = tr.steps.length,\n          ranges = this.ranges;\n\n      for (var _i = 0; _i < ranges.length; _i++) {\n        var _ranges$_i = ranges[_i],\n            $from = _ranges$_i.$from,\n            $to = _ranges$_i.$to,\n            mapping = tr.mapping.slice(mapFrom);\n        tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), _i ? prosemirrorModel.Slice.empty : content);\n        if (_i == 0) selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);\n      }\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(tr, node) {\n      var mapFrom = tr.steps.length,\n          ranges = this.ranges;\n\n      for (var i = 0; i < ranges.length; i++) {\n        var _ranges$i = ranges[i],\n            $from = _ranges$i.$from,\n            $to = _ranges$i.$to,\n            mapping = tr.mapping.slice(mapFrom);\n        var from = mapping.map($from.pos),\n            to = mapping.map($to.pos);\n\n        if (i) {\n          tr.deleteRange(from, to);\n        } else {\n          tr.replaceRangeWith(from, to, node);\n          selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);\n        }\n      }\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return TextSelection.between(this.$anchor, this.$head).getBookmark();\n    }\n  }], [{\n    key: \"findFrom\",\n    value: function findFrom($pos, dir) {\n      var textOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);\n      if (inner) return inner;\n\n      for (var depth = $pos.depth - 1; depth >= 0; depth--) {\n        var found = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);\n        if (found) return found;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"near\",\n    value: function near($pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));\n    }\n  }, {\n    key: \"atStart\",\n    value: function atStart(doc) {\n      return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);\n    }\n  }, {\n    key: \"atEnd\",\n    value: function atEnd(doc) {\n      return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\");\n      var cls = classesById[json.type];\n      if (!cls) throw new RangeError(\"No selection type \".concat(json.type, \" defined\"));\n      return cls.fromJSON(doc, json);\n    }\n  }, {\n    key: \"jsonID\",\n    value: function jsonID(id, selectionClass) {\n      if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id);\n      classesById[id] = selectionClass;\n      selectionClass.prototype.jsonID = id;\n      return selectionClass;\n    }\n  }]);\n\n  return Selection;\n}();\n\nSelection.prototype.visible = true;\n\nvar SelectionRange = _createClass(function SelectionRange($from, $to) {\n  _classCallCheck(this, SelectionRange);\n\n  this.$from = $from;\n  this.$to = $to;\n});\n\nvar warnedAboutTextSelection = false;\n\nfunction checkTextSelection($pos) {\n  if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {\n    warnedAboutTextSelection = true;\n    console[\"warn\"](\"TextSelection endpoint not pointing into a node with inline content (\" + $pos.parent.type.name + \")\");\n  }\n}\n\nvar TextSelection = function (_Selection) {\n  _inherits(TextSelection, _Selection);\n\n  var _super = _createSuper(TextSelection);\n\n  function TextSelection($anchor) {\n    var $head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchor;\n\n    _classCallCheck(this, TextSelection);\n\n    checkTextSelection($anchor);\n    checkTextSelection($head);\n    return _super.call(this, $anchor, $head);\n  }\n\n  _createClass(TextSelection, [{\n    key: \"$cursor\",\n    get: function get() {\n      return this.$anchor.pos == this.$head.pos ? this.$head : null;\n    }\n  }, {\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var $head = doc.resolve(mapping.map(this.head));\n      if (!$head.parent.inlineContent) return Selection.near($head);\n      var $anchor = doc.resolve(mapping.map(this.anchor));\n      return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n\n      _get(_getPrototypeOf(TextSelection.prototype), \"replace\", this).call(this, tr, content);\n\n      if (content == prosemirrorModel.Slice.empty) {\n        var marks = this.$from.marksAcross(this.$to);\n        if (marks) tr.ensureMarks(marks);\n      }\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new TextBookmark(this.anchor, this.head);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"text\",\n        anchor: this.anchor,\n        head: this.head\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (typeof json.anchor != \"number\" || typeof json.head != \"number\") throw new RangeError(\"Invalid input for TextSelection.fromJSON\");\n      return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n    }\n  }, {\n    key: \"create\",\n    value: function create(doc, anchor) {\n      var head = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : anchor;\n      var $anchor = doc.resolve(anchor);\n      return new this($anchor, head == anchor ? $anchor : doc.resolve(head));\n    }\n  }, {\n    key: \"between\",\n    value: function between($anchor, $head, bias) {\n      var dPos = $anchor.pos - $head.pos;\n      if (!bias || dPos) bias = dPos >= 0 ? 1 : -1;\n\n      if (!$head.parent.inlineContent) {\n        var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);\n        if (found) $head = found.$head;else return Selection.near($head, bias);\n      }\n\n      if (!$anchor.parent.inlineContent) {\n        if (dPos == 0) {\n          $anchor = $head;\n        } else {\n          $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;\n          if ($anchor.pos < $head.pos != dPos < 0) $anchor = $head;\n        }\n      }\n\n      return new TextSelection($anchor, $head);\n    }\n  }]);\n\n  return TextSelection;\n}(Selection);\n\nSelection.jsonID(\"text\", TextSelection);\n\nvar TextBookmark = function () {\n  function TextBookmark(anchor, head) {\n    _classCallCheck(this, TextBookmark);\n\n    this.anchor = anchor;\n    this.head = head;\n  }\n\n  _createClass(TextBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));\n    }\n  }]);\n\n  return TextBookmark;\n}();\n\nvar NodeSelection = function (_Selection2) {\n  _inherits(NodeSelection, _Selection2);\n\n  var _super2 = _createSuper(NodeSelection);\n\n  function NodeSelection($pos) {\n    var _this;\n\n    _classCallCheck(this, NodeSelection);\n\n    var node = $pos.nodeAfter;\n    var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);\n    _this = _super2.call(this, $pos, $end);\n    _this.node = node;\n    return _this;\n  }\n\n  _createClass(NodeSelection, [{\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var _mapping$mapResult = mapping.mapResult(this.anchor),\n          deleted = _mapping$mapResult.deleted,\n          pos = _mapping$mapResult.pos;\n\n      var $pos = doc.resolve(pos);\n      if (deleted) return Selection.near($pos);\n      return new NodeSelection($pos);\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(this.node), 0, 0);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof NodeSelection && other.anchor == this.anchor;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"node\",\n        anchor: this.anchor\n      };\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new NodeBookmark(this.anchor);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (typeof json.anchor != \"number\") throw new RangeError(\"Invalid input for NodeSelection.fromJSON\");\n      return new NodeSelection(doc.resolve(json.anchor));\n    }\n  }, {\n    key: \"create\",\n    value: function create(doc, from) {\n      return new NodeSelection(doc.resolve(from));\n    }\n  }, {\n    key: \"isSelectable\",\n    value: function isSelectable(node) {\n      return !node.isText && node.type.spec.selectable !== false;\n    }\n  }]);\n\n  return NodeSelection;\n}(Selection);\n\nNodeSelection.prototype.visible = false;\nSelection.jsonID(\"node\", NodeSelection);\n\nvar NodeBookmark = function () {\n  function NodeBookmark(anchor) {\n    _classCallCheck(this, NodeBookmark);\n\n    this.anchor = anchor;\n  }\n\n  _createClass(NodeBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      var _mapping$mapResult2 = mapping.mapResult(this.anchor),\n          deleted = _mapping$mapResult2.deleted,\n          pos = _mapping$mapResult2.pos;\n\n      return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      var $pos = doc.resolve(this.anchor),\n          node = $pos.nodeAfter;\n      if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos);\n      return Selection.near($pos);\n    }\n  }]);\n\n  return NodeBookmark;\n}();\n\nvar AllSelection = function (_Selection3) {\n  _inherits(AllSelection, _Selection3);\n\n  var _super3 = _createSuper(AllSelection);\n\n  function AllSelection(doc) {\n    _classCallCheck(this, AllSelection);\n\n    return _super3.call(this, doc.resolve(0), doc.resolve(doc.content.size));\n  }\n\n  _createClass(AllSelection, [{\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n\n      if (content == prosemirrorModel.Slice.empty) {\n        tr[\"delete\"](0, tr.doc.content.size);\n        var sel = Selection.atStart(tr.doc);\n        if (!sel.eq(tr.selection)) tr.setSelection(sel);\n      } else {\n        _get(_getPrototypeOf(AllSelection.prototype), \"replace\", this).call(this, tr, content);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"all\"\n      };\n    }\n  }, {\n    key: \"map\",\n    value: function map(doc) {\n      return new AllSelection(doc);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof AllSelection;\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return AllBookmark;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc) {\n      return new AllSelection(doc);\n    }\n  }]);\n\n  return AllSelection;\n}(Selection);\n\nSelection.jsonID(\"all\", AllSelection);\nvar AllBookmark = {\n  map: function map() {\n    return this;\n  },\n  resolve: function resolve(doc) {\n    return new AllSelection(doc);\n  }\n};\n\nfunction findSelectionIn(doc, node, pos, index, dir) {\n  var text = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  if (node.inlineContent) return TextSelection.create(doc, pos);\n\n  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    var child = node.child(i);\n\n    if (!child.isAtom) {\n      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);\n      if (inner) return inner;\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));\n    }\n\n    pos += child.nodeSize * dir;\n  }\n\n  return null;\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n  if (last < startLen) return;\n  var step = tr.steps[last];\n  if (!(step instanceof prosemirrorTransform.ReplaceStep || step instanceof prosemirrorTransform.ReplaceAroundStep)) return;\n  var map = tr.mapping.maps[last],\n      end;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end == null) end = newTo;\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nvar UPDATED_SEL = 1,\n    UPDATED_MARKS = 2,\n    UPDATED_SCROLL = 4;\n\nvar Transaction = function (_prosemirrorTransform) {\n  _inherits(Transaction, _prosemirrorTransform);\n\n  var _super4 = _createSuper(Transaction);\n\n  function Transaction(state) {\n    var _this2;\n\n    _classCallCheck(this, Transaction);\n\n    _this2 = _super4.call(this, state.doc);\n    _this2.curSelectionFor = 0;\n    _this2.updated = 0;\n    _this2.meta = Object.create(null);\n    _this2.time = Date.now();\n    _this2.curSelection = state.selection;\n    _this2.storedMarks = state.storedMarks;\n    return _this2;\n  }\n\n  _createClass(Transaction, [{\n    key: \"selection\",\n    get: function get() {\n      if (this.curSelectionFor < this.steps.length) {\n        this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));\n        this.curSelectionFor = this.steps.length;\n      }\n\n      return this.curSelection;\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      if (selection.$from.doc != this.doc) throw new RangeError(\"Selection passed to setSelection must point at the current document\");\n      this.curSelection = selection;\n      this.curSelectionFor = this.steps.length;\n      this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;\n      this.storedMarks = null;\n      return this;\n    }\n  }, {\n    key: \"selectionSet\",\n    get: function get() {\n      return (this.updated & UPDATED_SEL) > 0;\n    }\n  }, {\n    key: \"setStoredMarks\",\n    value: function setStoredMarks(marks) {\n      this.storedMarks = marks;\n      this.updated |= UPDATED_MARKS;\n      return this;\n    }\n  }, {\n    key: \"ensureMarks\",\n    value: function ensureMarks(marks) {\n      if (!prosemirrorModel.Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks)) this.setStoredMarks(marks);\n      return this;\n    }\n  }, {\n    key: \"addStoredMark\",\n    value: function addStoredMark(mark) {\n      return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));\n    }\n  }, {\n    key: \"removeStoredMark\",\n    value: function removeStoredMark(mark) {\n      return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));\n    }\n  }, {\n    key: \"storedMarksSet\",\n    get: function get() {\n      return (this.updated & UPDATED_MARKS) > 0;\n    }\n  }, {\n    key: \"addStep\",\n    value: function addStep(step, doc) {\n      _get(_getPrototypeOf(Transaction.prototype), \"addStep\", this).call(this, step, doc);\n\n      this.updated = this.updated & ~UPDATED_MARKS;\n      this.storedMarks = null;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = time;\n      return this;\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(slice) {\n      this.selection.replace(this, slice);\n      return this;\n    }\n  }, {\n    key: \"replaceSelectionWith\",\n    value: function replaceSelectionWith(node) {\n      var inheritMarks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var selection = this.selection;\n      if (inheritMarks) node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || prosemirrorModel.Mark.none));\n      selection.replaceWith(this, node);\n      return this;\n    }\n  }, {\n    key: \"deleteSelection\",\n    value: function deleteSelection() {\n      this.selection.replace(this);\n      return this;\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(text, from, to) {\n      var schema = this.doc.type.schema;\n\n      if (from == null) {\n        if (!text) return this.deleteSelection();\n        return this.replaceSelectionWith(schema.text(text), true);\n      } else {\n        if (to == null) to = from;\n        to = to == null ? from : to;\n        if (!text) return this.deleteRange(from, to);\n        var marks = this.storedMarks;\n\n        if (!marks) {\n          var $from = this.doc.resolve(from);\n          marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));\n        }\n\n        this.replaceRangeWith(from, to, schema.text(text, marks));\n        if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to));\n        return this;\n      }\n    }\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(key, value) {\n      this.meta[typeof key == \"string\" ? key : key.key] = value;\n      return this;\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(key) {\n      return this.meta[typeof key == \"string\" ? key : key.key];\n    }\n  }, {\n    key: \"isGeneric\",\n    get: function get() {\n      for (var _ in this.meta) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView() {\n      this.updated |= UPDATED_SCROLL;\n      return this;\n    }\n  }, {\n    key: \"scrolledIntoView\",\n    get: function get() {\n      return (this.updated & UPDATED_SCROLL) > 0;\n    }\n  }]);\n\n  return Transaction;\n}(prosemirrorTransform.Transform);\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self);\n}\n\nvar FieldDesc = _createClass(function FieldDesc(name, desc, self) {\n  _classCallCheck(this, FieldDesc);\n\n  this.name = name;\n  this.init = bind(desc.init, self);\n  this.apply = bind(desc.apply, self);\n});\n\nvar baseFields = [new FieldDesc(\"doc\", {\n  init: function init(config) {\n    return config.doc || config.schema.topNodeType.createAndFill();\n  },\n  apply: function apply(tr) {\n    return tr.doc;\n  }\n}), new FieldDesc(\"selection\", {\n  init: function init(config, instance) {\n    return config.selection || Selection.atStart(instance.doc);\n  },\n  apply: function apply(tr) {\n    return tr.selection;\n  }\n}), new FieldDesc(\"storedMarks\", {\n  init: function init(config) {\n    return config.storedMarks || null;\n  },\n  apply: function apply(tr, _marks, _old, state) {\n    return state.selection.$cursor ? tr.storedMarks : null;\n  }\n}), new FieldDesc(\"scrollToSelection\", {\n  init: function init() {\n    return 0;\n  },\n  apply: function apply(tr, prev) {\n    return tr.scrolledIntoView ? prev + 1 : prev;\n  }\n})];\n\nvar Configuration = _createClass(function Configuration(schema, plugins) {\n  var _this3 = this;\n\n  _classCallCheck(this, Configuration);\n\n  this.schema = schema;\n  this.plugins = [];\n  this.pluginsByKey = Object.create(null);\n  this.fields = baseFields.slice();\n  if (plugins) plugins.forEach(function (plugin) {\n    if (_this3.pluginsByKey[plugin.key]) throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\");\n\n    _this3.plugins.push(plugin);\n\n    _this3.pluginsByKey[plugin.key] = plugin;\n    if (plugin.spec.state) _this3.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));\n  });\n});\n\nvar EditorState = function () {\n  function EditorState(config) {\n    _classCallCheck(this, EditorState);\n\n    this.config = config;\n  }\n\n  _createClass(EditorState, [{\n    key: \"schema\",\n    get: function get() {\n      return this.config.schema;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this.config.plugins;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(tr) {\n      return this.applyTransaction(tr).state;\n    }\n  }, {\n    key: \"filterTransaction\",\n    value: function filterTransaction(tr) {\n      var ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n      for (var i = 0; i < this.config.plugins.length; i++) {\n        if (i != ignore) {\n          var plugin = this.config.plugins[i];\n          if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this)) return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"applyTransaction\",\n    value: function applyTransaction(rootTr) {\n      if (!this.filterTransaction(rootTr)) return {\n        state: this,\n        transactions: []\n      };\n      var trs = [rootTr],\n          newState = this.applyInner(rootTr),\n          seen = null;\n\n      for (;;) {\n        var haveNew = false;\n\n        for (var i = 0; i < this.config.plugins.length; i++) {\n          var plugin = this.config.plugins[i];\n\n          if (plugin.spec.appendTransaction) {\n            var n = seen ? seen[i].n : 0,\n                oldState = seen ? seen[i].state : this;\n            var tr = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);\n\n            if (tr && newState.filterTransaction(tr, i)) {\n              tr.setMeta(\"appendedTransaction\", rootTr);\n\n              if (!seen) {\n                seen = [];\n\n                for (var j = 0; j < this.config.plugins.length; j++) {\n                  seen.push(j < i ? {\n                    state: newState,\n                    n: trs.length\n                  } : {\n                    state: this,\n                    n: 0\n                  });\n                }\n              }\n\n              trs.push(tr);\n              newState = newState.applyInner(tr);\n              haveNew = true;\n            }\n\n            if (seen) seen[i] = {\n              state: newState,\n              n: trs.length\n            };\n          }\n        }\n\n        if (!haveNew) return {\n          state: newState,\n          transactions: trs\n        };\n      }\n    }\n  }, {\n    key: \"applyInner\",\n    value: function applyInner(tr) {\n      if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\");\n      var newInstance = new EditorState(this.config),\n          fields = this.config.fields;\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);\n      }\n\n      return newInstance;\n    }\n  }, {\n    key: \"tr\",\n    get: function get() {\n      return new Transaction(this);\n    }\n  }, {\n    key: \"reconfigure\",\n    value: function reconfigure(config) {\n      var $config = new Configuration(this.schema, config.plugins);\n      var fields = $config.fields,\n          instance = new EditorState($config);\n\n      for (var i = 0; i < fields.length; i++) {\n        var name = fields[i].name;\n        instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);\n      }\n\n      return instance;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pluginFields) {\n      var result = {\n        doc: this.doc.toJSON(),\n        selection: this.selection.toJSON()\n      };\n      if (this.storedMarks) result.storedMarks = this.storedMarks.map(function (m) {\n        return m.toJSON();\n      });\n      if (pluginFields && _typeof(pluginFields) == 'object') for (var prop in pluginFields) {\n        if (prop == \"doc\" || prop == \"selection\") throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\");\n        var plugin = pluginFields[prop],\n            state = plugin.spec.state;\n        if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key]);\n      }\n      return result;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(config) {\n      var $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);\n      var instance = new EditorState($config);\n\n      for (var i = 0; i < $config.fields.length; i++) {\n        instance[$config.fields[i].name] = $config.fields[i].init(config, instance);\n      }\n\n      return instance;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(config, json, pluginFields) {\n      if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\");\n      if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\");\n      var $config = new Configuration(config.schema, config.plugins);\n      var instance = new EditorState($config);\n      $config.fields.forEach(function (field) {\n        if (field.name == \"doc\") {\n          instance.doc = prosemirrorModel.Node.fromJSON(config.schema, json.doc);\n        } else if (field.name == \"selection\") {\n          instance.selection = Selection.fromJSON(instance.doc, json.selection);\n        } else if (field.name == \"storedMarks\") {\n          if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);\n        } else {\n          if (pluginFields) for (var prop in pluginFields) {\n            var plugin = pluginFields[prop],\n                state = plugin.spec.state;\n\n            if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {\n              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);\n              return;\n            }\n          }\n          instance[field.name] = field.init(config, instance);\n        }\n      });\n      return instance;\n    }\n  }]);\n\n  return EditorState;\n}();\n\nfunction bindProps(obj, self, target) {\n  for (var prop in obj) {\n    var val = obj[prop];\n    if (val instanceof Function) val = val.bind(self);else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {});\n    target[prop] = val;\n  }\n\n  return target;\n}\n\nvar Plugin = function () {\n  function Plugin(spec) {\n    _classCallCheck(this, Plugin);\n\n    this.spec = spec;\n    this.props = {};\n    if (spec.props) bindProps(spec.props, this, this.props);\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\");\n  }\n\n  _createClass(Plugin, [{\n    key: \"getState\",\n    value: function getState(state) {\n      return state[this.key];\n    }\n  }]);\n\n  return Plugin;\n}();\n\nvar keys = Object.create(null);\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name];\n  keys[name] = 0;\n  return name + \"$\";\n}\n\nvar PluginKey = function () {\n  function PluginKey() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"key\";\n\n    _classCallCheck(this, PluginKey);\n\n    this.key = createKey(name);\n  }\n\n  _createClass(PluginKey, [{\n    key: \"get\",\n    value: function get(state) {\n      return state.config.pluginsByKey[this.key];\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(state) {\n      return state[this.key];\n    }\n  }]);\n\n  return PluginKey;\n}();\n\nexports.AllSelection = AllSelection;\nexports.EditorState = EditorState;\nexports.NodeSelection = NodeSelection;\nexports.Plugin = Plugin;\nexports.PluginKey = PluginKey;\nexports.Selection = Selection;\nexports.SelectionRange = SelectionRange;\nexports.TextSelection = TextSelection;\nexports.Transaction = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar prosemirrorModel = __webpack_require__(/*! prosemirror-model */ \"(ssr)/../../node_modules/.pnpm/prosemirror-model@1.25.3/node_modules/prosemirror-model/dist/index.cjs\");\n\nvar prosemirrorTransform = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/../../node_modules/.pnpm/prosemirror-transform@1.10.4/node_modules/prosemirror-transform/dist/index.cjs\");\n\nvar classesById = Object.create(null);\n\nvar Selection = function () {\n  function Selection($anchor, $head, ranges) {\n    _classCallCheck(this, Selection);\n\n    this.$anchor = $anchor;\n    this.$head = $head;\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];\n  }\n\n  _createClass(Selection, [{\n    key: \"anchor\",\n    get: function get() {\n      return this.$anchor.pos;\n    }\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.$head.pos;\n    }\n  }, {\n    key: \"from\",\n    get: function get() {\n      return this.$from.pos;\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this.$to.pos;\n    }\n  }, {\n    key: \"$from\",\n    get: function get() {\n      return this.ranges[0].$from;\n    }\n  }, {\n    key: \"$to\",\n    get: function get() {\n      return this.ranges[0].$to;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      var ranges = this.ranges;\n\n      for (var i = 0; i < ranges.length; i++) {\n        if (ranges[i].$from.pos != ranges[i].$to.pos) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return this.$from.doc.slice(this.from, this.to, true);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n      var lastNode = content.content.lastChild,\n          lastParent = null;\n\n      for (var i = 0; i < content.openEnd; i++) {\n        lastParent = lastNode;\n        lastNode = lastNode.lastChild;\n      }\n\n      var mapFrom = tr.steps.length,\n          ranges = this.ranges;\n\n      for (var _i = 0; _i < ranges.length; _i++) {\n        var _ranges$_i = ranges[_i],\n            $from = _ranges$_i.$from,\n            $to = _ranges$_i.$to,\n            mapping = tr.mapping.slice(mapFrom);\n        tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), _i ? prosemirrorModel.Slice.empty : content);\n        if (_i == 0) selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);\n      }\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(tr, node) {\n      var mapFrom = tr.steps.length,\n          ranges = this.ranges;\n\n      for (var i = 0; i < ranges.length; i++) {\n        var _ranges$i = ranges[i],\n            $from = _ranges$i.$from,\n            $to = _ranges$i.$to,\n            mapping = tr.mapping.slice(mapFrom);\n        var from = mapping.map($from.pos),\n            to = mapping.map($to.pos);\n\n        if (i) {\n          tr.deleteRange(from, to);\n        } else {\n          tr.replaceRangeWith(from, to, node);\n          selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);\n        }\n      }\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return TextSelection.between(this.$anchor, this.$head).getBookmark();\n    }\n  }], [{\n    key: \"findFrom\",\n    value: function findFrom($pos, dir) {\n      var textOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);\n      if (inner) return inner;\n\n      for (var depth = $pos.depth - 1; depth >= 0; depth--) {\n        var found = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);\n        if (found) return found;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"near\",\n    value: function near($pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));\n    }\n  }, {\n    key: \"atStart\",\n    value: function atStart(doc) {\n      return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);\n    }\n  }, {\n    key: \"atEnd\",\n    value: function atEnd(doc) {\n      return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\");\n      var cls = classesById[json.type];\n      if (!cls) throw new RangeError(\"No selection type \".concat(json.type, \" defined\"));\n      return cls.fromJSON(doc, json);\n    }\n  }, {\n    key: \"jsonID\",\n    value: function jsonID(id, selectionClass) {\n      if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id);\n      classesById[id] = selectionClass;\n      selectionClass.prototype.jsonID = id;\n      return selectionClass;\n    }\n  }]);\n\n  return Selection;\n}();\n\nSelection.prototype.visible = true;\n\nvar SelectionRange = _createClass(function SelectionRange($from, $to) {\n  _classCallCheck(this, SelectionRange);\n\n  this.$from = $from;\n  this.$to = $to;\n});\n\nvar warnedAboutTextSelection = false;\n\nfunction checkTextSelection($pos) {\n  if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {\n    warnedAboutTextSelection = true;\n    console[\"warn\"](\"TextSelection endpoint not pointing into a node with inline content (\" + $pos.parent.type.name + \")\");\n  }\n}\n\nvar TextSelection = function (_Selection) {\n  _inherits(TextSelection, _Selection);\n\n  var _super = _createSuper(TextSelection);\n\n  function TextSelection($anchor) {\n    var $head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $anchor;\n\n    _classCallCheck(this, TextSelection);\n\n    checkTextSelection($anchor);\n    checkTextSelection($head);\n    return _super.call(this, $anchor, $head);\n  }\n\n  _createClass(TextSelection, [{\n    key: \"$cursor\",\n    get: function get() {\n      return this.$anchor.pos == this.$head.pos ? this.$head : null;\n    }\n  }, {\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var $head = doc.resolve(mapping.map(this.head));\n      if (!$head.parent.inlineContent) return Selection.near($head);\n      var $anchor = doc.resolve(mapping.map(this.anchor));\n      return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n\n      _get(_getPrototypeOf(TextSelection.prototype), \"replace\", this).call(this, tr, content);\n\n      if (content == prosemirrorModel.Slice.empty) {\n        var marks = this.$from.marksAcross(this.$to);\n        if (marks) tr.ensureMarks(marks);\n      }\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new TextBookmark(this.anchor, this.head);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"text\",\n        anchor: this.anchor,\n        head: this.head\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (typeof json.anchor != \"number\" || typeof json.head != \"number\") throw new RangeError(\"Invalid input for TextSelection.fromJSON\");\n      return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n    }\n  }, {\n    key: \"create\",\n    value: function create(doc, anchor) {\n      var head = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : anchor;\n      var $anchor = doc.resolve(anchor);\n      return new this($anchor, head == anchor ? $anchor : doc.resolve(head));\n    }\n  }, {\n    key: \"between\",\n    value: function between($anchor, $head, bias) {\n      var dPos = $anchor.pos - $head.pos;\n      if (!bias || dPos) bias = dPos >= 0 ? 1 : -1;\n\n      if (!$head.parent.inlineContent) {\n        var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);\n        if (found) $head = found.$head;else return Selection.near($head, bias);\n      }\n\n      if (!$anchor.parent.inlineContent) {\n        if (dPos == 0) {\n          $anchor = $head;\n        } else {\n          $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;\n          if ($anchor.pos < $head.pos != dPos < 0) $anchor = $head;\n        }\n      }\n\n      return new TextSelection($anchor, $head);\n    }\n  }]);\n\n  return TextSelection;\n}(Selection);\n\nSelection.jsonID(\"text\", TextSelection);\n\nvar TextBookmark = function () {\n  function TextBookmark(anchor, head) {\n    _classCallCheck(this, TextBookmark);\n\n    this.anchor = anchor;\n    this.head = head;\n  }\n\n  _createClass(TextBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));\n    }\n  }]);\n\n  return TextBookmark;\n}();\n\nvar NodeSelection = function (_Selection2) {\n  _inherits(NodeSelection, _Selection2);\n\n  var _super2 = _createSuper(NodeSelection);\n\n  function NodeSelection($pos) {\n    var _this;\n\n    _classCallCheck(this, NodeSelection);\n\n    var node = $pos.nodeAfter;\n    var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);\n    _this = _super2.call(this, $pos, $end);\n    _this.node = node;\n    return _this;\n  }\n\n  _createClass(NodeSelection, [{\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var _mapping$mapResult = mapping.mapResult(this.anchor),\n          deleted = _mapping$mapResult.deleted,\n          pos = _mapping$mapResult.pos;\n\n      var $pos = doc.resolve(pos);\n      if (deleted) return Selection.near($pos);\n      return new NodeSelection($pos);\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(this.node), 0, 0);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof NodeSelection && other.anchor == this.anchor;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"node\",\n        anchor: this.anchor\n      };\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new NodeBookmark(this.anchor);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (typeof json.anchor != \"number\") throw new RangeError(\"Invalid input for NodeSelection.fromJSON\");\n      return new NodeSelection(doc.resolve(json.anchor));\n    }\n  }, {\n    key: \"create\",\n    value: function create(doc, from) {\n      return new NodeSelection(doc.resolve(from));\n    }\n  }, {\n    key: \"isSelectable\",\n    value: function isSelectable(node) {\n      return !node.isText && node.type.spec.selectable !== false;\n    }\n  }]);\n\n  return NodeSelection;\n}(Selection);\n\nNodeSelection.prototype.visible = false;\nSelection.jsonID(\"node\", NodeSelection);\n\nvar NodeBookmark = function () {\n  function NodeBookmark(anchor) {\n    _classCallCheck(this, NodeBookmark);\n\n    this.anchor = anchor;\n  }\n\n  _createClass(NodeBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      var _mapping$mapResult2 = mapping.mapResult(this.anchor),\n          deleted = _mapping$mapResult2.deleted,\n          pos = _mapping$mapResult2.pos;\n\n      return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      var $pos = doc.resolve(this.anchor),\n          node = $pos.nodeAfter;\n      if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos);\n      return Selection.near($pos);\n    }\n  }]);\n\n  return NodeBookmark;\n}();\n\nvar AllSelection = function (_Selection3) {\n  _inherits(AllSelection, _Selection3);\n\n  var _super3 = _createSuper(AllSelection);\n\n  function AllSelection(doc) {\n    _classCallCheck(this, AllSelection);\n\n    return _super3.call(this, doc.resolve(0), doc.resolve(doc.content.size));\n  }\n\n  _createClass(AllSelection, [{\n    key: \"replace\",\n    value: function replace(tr) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : prosemirrorModel.Slice.empty;\n\n      if (content == prosemirrorModel.Slice.empty) {\n        tr[\"delete\"](0, tr.doc.content.size);\n        var sel = Selection.atStart(tr.doc);\n        if (!sel.eq(tr.selection)) tr.setSelection(sel);\n      } else {\n        _get(_getPrototypeOf(AllSelection.prototype), \"replace\", this).call(this, tr, content);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"all\"\n      };\n    }\n  }, {\n    key: \"map\",\n    value: function map(doc) {\n      return new AllSelection(doc);\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof AllSelection;\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return AllBookmark;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc) {\n      return new AllSelection(doc);\n    }\n  }]);\n\n  return AllSelection;\n}(Selection);\n\nSelection.jsonID(\"all\", AllSelection);\nvar AllBookmark = {\n  map: function map() {\n    return this;\n  },\n  resolve: function resolve(doc) {\n    return new AllSelection(doc);\n  }\n};\n\nfunction findSelectionIn(doc, node, pos, index, dir) {\n  var text = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  if (node.inlineContent) return TextSelection.create(doc, pos);\n\n  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    var child = node.child(i);\n\n    if (!child.isAtom) {\n      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);\n      if (inner) return inner;\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));\n    }\n\n    pos += child.nodeSize * dir;\n  }\n\n  return null;\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n  if (last < startLen) return;\n  var step = tr.steps[last];\n  if (!(step instanceof prosemirrorTransform.ReplaceStep || step instanceof prosemirrorTransform.ReplaceAroundStep)) return;\n  var map = tr.mapping.maps[last],\n      end;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end == null) end = newTo;\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nvar UPDATED_SEL = 1,\n    UPDATED_MARKS = 2,\n    UPDATED_SCROLL = 4;\n\nvar Transaction = function (_prosemirrorTransform) {\n  _inherits(Transaction, _prosemirrorTransform);\n\n  var _super4 = _createSuper(Transaction);\n\n  function Transaction(state) {\n    var _this2;\n\n    _classCallCheck(this, Transaction);\n\n    _this2 = _super4.call(this, state.doc);\n    _this2.curSelectionFor = 0;\n    _this2.updated = 0;\n    _this2.meta = Object.create(null);\n    _this2.time = Date.now();\n    _this2.curSelection = state.selection;\n    _this2.storedMarks = state.storedMarks;\n    return _this2;\n  }\n\n  _createClass(Transaction, [{\n    key: \"selection\",\n    get: function get() {\n      if (this.curSelectionFor < this.steps.length) {\n        this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));\n        this.curSelectionFor = this.steps.length;\n      }\n\n      return this.curSelection;\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      if (selection.$from.doc != this.doc) throw new RangeError(\"Selection passed to setSelection must point at the current document\");\n      this.curSelection = selection;\n      this.curSelectionFor = this.steps.length;\n      this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;\n      this.storedMarks = null;\n      return this;\n    }\n  }, {\n    key: \"selectionSet\",\n    get: function get() {\n      return (this.updated & UPDATED_SEL) > 0;\n    }\n  }, {\n    key: \"setStoredMarks\",\n    value: function setStoredMarks(marks) {\n      this.storedMarks = marks;\n      this.updated |= UPDATED_MARKS;\n      return this;\n    }\n  }, {\n    key: \"ensureMarks\",\n    value: function ensureMarks(marks) {\n      if (!prosemirrorModel.Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks)) this.setStoredMarks(marks);\n      return this;\n    }\n  }, {\n    key: \"addStoredMark\",\n    value: function addStoredMark(mark) {\n      return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));\n    }\n  }, {\n    key: \"removeStoredMark\",\n    value: function removeStoredMark(mark) {\n      return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));\n    }\n  }, {\n    key: \"storedMarksSet\",\n    get: function get() {\n      return (this.updated & UPDATED_MARKS) > 0;\n    }\n  }, {\n    key: \"addStep\",\n    value: function addStep(step, doc) {\n      _get(_getPrototypeOf(Transaction.prototype), \"addStep\", this).call(this, step, doc);\n\n      this.updated = this.updated & ~UPDATED_MARKS;\n      this.storedMarks = null;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = time;\n      return this;\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(slice) {\n      this.selection.replace(this, slice);\n      return this;\n    }\n  }, {\n    key: \"replaceSelectionWith\",\n    value: function replaceSelectionWith(node) {\n      var inheritMarks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var selection = this.selection;\n      if (inheritMarks) node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || prosemirrorModel.Mark.none));\n      selection.replaceWith(this, node);\n      return this;\n    }\n  }, {\n    key: \"deleteSelection\",\n    value: function deleteSelection() {\n      this.selection.replace(this);\n      return this;\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(text, from, to) {\n      var schema = this.doc.type.schema;\n\n      if (from == null) {\n        if (!text) return this.deleteSelection();\n        return this.replaceSelectionWith(schema.text(text), true);\n      } else {\n        if (to == null) to = from;\n        to = to == null ? from : to;\n        if (!text) return this.deleteRange(from, to);\n        var marks = this.storedMarks;\n\n        if (!marks) {\n          var $from = this.doc.resolve(from);\n          marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));\n        }\n\n        this.replaceRangeWith(from, to, schema.text(text, marks));\n        if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to));\n        return this;\n      }\n    }\n  }, {\n    key: \"setMeta\",\n    value: function setMeta(key, value) {\n      this.meta[typeof key == \"string\" ? key : key.key] = value;\n      return this;\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(key) {\n      return this.meta[typeof key == \"string\" ? key : key.key];\n    }\n  }, {\n    key: \"isGeneric\",\n    get: function get() {\n      for (var _ in this.meta) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView() {\n      this.updated |= UPDATED_SCROLL;\n      return this;\n    }\n  }, {\n    key: \"scrolledIntoView\",\n    get: function get() {\n      return (this.updated & UPDATED_SCROLL) > 0;\n    }\n  }]);\n\n  return Transaction;\n}(prosemirrorTransform.Transform);\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self);\n}\n\nvar FieldDesc = _createClass(function FieldDesc(name, desc, self) {\n  _classCallCheck(this, FieldDesc);\n\n  this.name = name;\n  this.init = bind(desc.init, self);\n  this.apply = bind(desc.apply, self);\n});\n\nvar baseFields = [new FieldDesc(\"doc\", {\n  init: function init(config) {\n    return config.doc || config.schema.topNodeType.createAndFill();\n  },\n  apply: function apply(tr) {\n    return tr.doc;\n  }\n}), new FieldDesc(\"selection\", {\n  init: function init(config, instance) {\n    return config.selection || Selection.atStart(instance.doc);\n  },\n  apply: function apply(tr) {\n    return tr.selection;\n  }\n}), new FieldDesc(\"storedMarks\", {\n  init: function init(config) {\n    return config.storedMarks || null;\n  },\n  apply: function apply(tr, _marks, _old, state) {\n    return state.selection.$cursor ? tr.storedMarks : null;\n  }\n}), new FieldDesc(\"scrollToSelection\", {\n  init: function init() {\n    return 0;\n  },\n  apply: function apply(tr, prev) {\n    return tr.scrolledIntoView ? prev + 1 : prev;\n  }\n})];\n\nvar Configuration = _createClass(function Configuration(schema, plugins) {\n  var _this3 = this;\n\n  _classCallCheck(this, Configuration);\n\n  this.schema = schema;\n  this.plugins = [];\n  this.pluginsByKey = Object.create(null);\n  this.fields = baseFields.slice();\n  if (plugins) plugins.forEach(function (plugin) {\n    if (_this3.pluginsByKey[plugin.key]) throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\");\n\n    _this3.plugins.push(plugin);\n\n    _this3.pluginsByKey[plugin.key] = plugin;\n    if (plugin.spec.state) _this3.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));\n  });\n});\n\nvar EditorState = function () {\n  function EditorState(config) {\n    _classCallCheck(this, EditorState);\n\n    this.config = config;\n  }\n\n  _createClass(EditorState, [{\n    key: \"schema\",\n    get: function get() {\n      return this.config.schema;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this.config.plugins;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(tr) {\n      return this.applyTransaction(tr).state;\n    }\n  }, {\n    key: \"filterTransaction\",\n    value: function filterTransaction(tr) {\n      var ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n      for (var i = 0; i < this.config.plugins.length; i++) {\n        if (i != ignore) {\n          var plugin = this.config.plugins[i];\n          if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this)) return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"applyTransaction\",\n    value: function applyTransaction(rootTr) {\n      if (!this.filterTransaction(rootTr)) return {\n        state: this,\n        transactions: []\n      };\n      var trs = [rootTr],\n          newState = this.applyInner(rootTr),\n          seen = null;\n\n      for (;;) {\n        var haveNew = false;\n\n        for (var i = 0; i < this.config.plugins.length; i++) {\n          var plugin = this.config.plugins[i];\n\n          if (plugin.spec.appendTransaction) {\n            var n = seen ? seen[i].n : 0,\n                oldState = seen ? seen[i].state : this;\n            var tr = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);\n\n            if (tr && newState.filterTransaction(tr, i)) {\n              tr.setMeta(\"appendedTransaction\", rootTr);\n\n              if (!seen) {\n                seen = [];\n\n                for (var j = 0; j < this.config.plugins.length; j++) {\n                  seen.push(j < i ? {\n                    state: newState,\n                    n: trs.length\n                  } : {\n                    state: this,\n                    n: 0\n                  });\n                }\n              }\n\n              trs.push(tr);\n              newState = newState.applyInner(tr);\n              haveNew = true;\n            }\n\n            if (seen) seen[i] = {\n              state: newState,\n              n: trs.length\n            };\n          }\n        }\n\n        if (!haveNew) return {\n          state: newState,\n          transactions: trs\n        };\n      }\n    }\n  }, {\n    key: \"applyInner\",\n    value: function applyInner(tr) {\n      if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\");\n      var newInstance = new EditorState(this.config),\n          fields = this.config.fields;\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);\n      }\n\n      return newInstance;\n    }\n  }, {\n    key: \"tr\",\n    get: function get() {\n      return new Transaction(this);\n    }\n  }, {\n    key: \"reconfigure\",\n    value: function reconfigure(config) {\n      var $config = new Configuration(this.schema, config.plugins);\n      var fields = $config.fields,\n          instance = new EditorState($config);\n\n      for (var i = 0; i < fields.length; i++) {\n        var name = fields[i].name;\n        instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);\n      }\n\n      return instance;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(pluginFields) {\n      var result = {\n        doc: this.doc.toJSON(),\n        selection: this.selection.toJSON()\n      };\n      if (this.storedMarks) result.storedMarks = this.storedMarks.map(function (m) {\n        return m.toJSON();\n      });\n      if (pluginFields && _typeof(pluginFields) == 'object') for (var prop in pluginFields) {\n        if (prop == \"doc\" || prop == \"selection\") throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\");\n        var plugin = pluginFields[prop],\n            state = plugin.spec.state;\n        if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key]);\n      }\n      return result;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(config) {\n      var $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);\n      var instance = new EditorState($config);\n\n      for (var i = 0; i < $config.fields.length; i++) {\n        instance[$config.fields[i].name] = $config.fields[i].init(config, instance);\n      }\n\n      return instance;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(config, json, pluginFields) {\n      if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\");\n      if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\");\n      var $config = new Configuration(config.schema, config.plugins);\n      var instance = new EditorState($config);\n      $config.fields.forEach(function (field) {\n        if (field.name == \"doc\") {\n          instance.doc = prosemirrorModel.Node.fromJSON(config.schema, json.doc);\n        } else if (field.name == \"selection\") {\n          instance.selection = Selection.fromJSON(instance.doc, json.selection);\n        } else if (field.name == \"storedMarks\") {\n          if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);\n        } else {\n          if (pluginFields) for (var prop in pluginFields) {\n            var plugin = pluginFields[prop],\n                state = plugin.spec.state;\n\n            if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {\n              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);\n              return;\n            }\n          }\n          instance[field.name] = field.init(config, instance);\n        }\n      });\n      return instance;\n    }\n  }]);\n\n  return EditorState;\n}();\n\nfunction bindProps(obj, self, target) {\n  for (var prop in obj) {\n    var val = obj[prop];\n    if (val instanceof Function) val = val.bind(self);else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {});\n    target[prop] = val;\n  }\n\n  return target;\n}\n\nvar Plugin = function () {\n  function Plugin(spec) {\n    _classCallCheck(this, Plugin);\n\n    this.spec = spec;\n    this.props = {};\n    if (spec.props) bindProps(spec.props, this, this.props);\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\");\n  }\n\n  _createClass(Plugin, [{\n    key: \"getState\",\n    value: function getState(state) {\n      return state[this.key];\n    }\n  }]);\n\n  return Plugin;\n}();\n\nvar keys = Object.create(null);\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name];\n  keys[name] = 0;\n  return name + \"$\";\n}\n\nvar PluginKey = function () {\n  function PluginKey() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"key\";\n\n    _classCallCheck(this, PluginKey);\n\n    this.key = createKey(name);\n  }\n\n  _createClass(PluginKey, [{\n    key: \"get\",\n    value: function get(state) {\n      return state.config.pluginsByKey[this.key];\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(state) {\n      return state[this.key];\n    }\n  }]);\n\n  return PluginKey;\n}();\n\nexports.AllSelection = AllSelection;\nexports.EditorState = EditorState;\nexports.NodeSelection = NodeSelection;\nexports.Plugin = Plugin;\nexports.PluginKey = PluginKey;\nexports.Selection = Selection;\nexports.SelectionRange = SelectionRange;\nexports.TextSelection = TextSelection;\nexports.Transaction = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs\n");

/***/ })

};
;