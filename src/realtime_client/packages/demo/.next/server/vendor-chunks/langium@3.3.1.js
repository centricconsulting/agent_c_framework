"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langium@3.3.1";
exports.ids = ["vendor-chunks/langium@3.3.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultCoreModule: () => (/* binding */ createDefaultCoreModule),\n/* harmony export */   createDefaultSharedCoreModule: () => (/* binding */ createDefaultSharedCoreModule)\n/* harmony export */ });\n/* harmony import */ var _languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languages/grammar-config.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js\");\n/* harmony import */ var _parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parser/completion-parser-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js\");\n/* harmony import */ var _parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser/langium-parser-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js\");\n/* harmony import */ var _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parser/token-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js\");\n/* harmony import */ var _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/value-converter.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js\");\n/* harmony import */ var _references_linker_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./references/linker.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js\");\n/* harmony import */ var _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./references/name-provider.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js\");\n/* harmony import */ var _references_references_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./references/references.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js\");\n/* harmony import */ var _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./references/scope-computation.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js\");\n/* harmony import */ var _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./references/scope-provider.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js\");\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./serializer/json-serializer.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _service_registry_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./service-registry.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js\");\n/* harmony import */ var _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./validation/document-validator.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./validation/validation-registry.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./workspace/ast-descriptions.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js\");\n/* harmony import */ var _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./workspace/ast-node-locator.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js\");\n/* harmony import */ var _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./workspace/configuration.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js\");\n/* harmony import */ var _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./workspace/document-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./workspace/documents.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/* harmony import */ var _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./workspace/index-manager.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js\");\n/* harmony import */ var _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./workspace/workspace-manager.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js\");\n/* harmony import */ var _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parser/lexer.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js\");\n/* harmony import */ var _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documentation/documentation-provider.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js\");\n/* harmony import */ var _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documentation/comment-provider.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js\");\n/* harmony import */ var _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parser/langium-parser.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/async-parser.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js\");\n/* harmony import */ var _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./workspace/workspace-lock.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js\");\n/* harmony import */ var _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./serializer/hydrator.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nfunction createDefaultCoreModule(context) {\n    return {\n        documentation: {\n            CommentProvider: (services) => new _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__.DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__.JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__.DefaultAsyncParser(services),\n            GrammarConfig: (services) => (0,_languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__.createGrammarConfig)(services),\n            LangiumParser: (services) => (0,_parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__.createLangiumParser)(services),\n            CompletionParser: (services) => (0,_parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__.createCompletionParser)(services),\n            ValueConverter: () => new _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__.DefaultValueConverter(),\n            TokenBuilder: () => new _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__.DefaultTokenBuilder(),\n            Lexer: (services) => new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexer(services),\n            ParserErrorMessageProvider: () => new _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__.LangiumParserErrorMessageProvider(),\n            LexerErrorMessageProvider: () => new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexerErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__.DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new _references_linker_js__WEBPACK_IMPORTED_MODULE_12__.DefaultLinker(services),\n            NameProvider: () => new _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__.DefaultNameProvider(),\n            ScopeProvider: (services) => new _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__.DefaultScopeProvider(services),\n            ScopeComputation: (services) => new _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__.DefaultScopeComputation(services),\n            References: (services) => new _references_references_js__WEBPACK_IMPORTED_MODULE_16__.DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__.DefaultHydrator(services),\n            JsonSerializer: (services) => new _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__.DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__.DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__.ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nfunction createDefaultSharedCoreModule(context) {\n    return {\n        ServiceRegistry: (services) => new _service_registry_js__WEBPACK_IMPORTED_MODULE_21__.DefaultServiceRegistry(services),\n        workspace: {\n            LangiumDocuments: (services) => new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__.DefaultDocumentBuilder(services),\n            IndexManager: (services) => new _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__.DefaultIndexManager(services),\n            WorkspaceManager: (services) => new _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__.DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__.DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__.DefaultConfigurationProvider(services)\n        }\n    };\n}\n//# sourceMappingURL=default-module.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Module: () => (/* binding */ Module),\n/* harmony export */   eagerLoad: () => (/* binding */ eagerLoad),\n/* harmony export */   inject: () => (/* binding */ inject)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nvar Module;\n(function (Module) {\n    Module.merge = (m1, m2) => _merge(_merge({}, m1), m2);\n})(Module || (Module = {}));\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nfunction inject(module1, module2, module3, module4, module5, module6, module7, module8, module9) {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {});\n    return _inject(module);\n}\nconst isProxy = Symbol('isProxy');\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nfunction eagerLoad(item) {\n    if (item && item[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject(module, injector) {\n    const proxy = new Proxy({}, {\n        deleteProperty: () => false,\n        set: () => {\n            throw new Error('Cannot set property on injected service container');\n        },\n        get: (obj, prop) => {\n            if (prop === isProxy) {\n                return true;\n            }\n            else {\n                return _resolve(obj, prop, module, injector || proxy);\n            }\n        },\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\n    });\n    return proxy;\n}\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve(obj, prop, module, injector) {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', { cause: obj[prop] });\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    }\n    else if (prop in module) {\n        const value = module[prop];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        }\n        catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target, source) {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                }\n                else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n//# sourceMappingURL=dependency-injection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultCommentProvider: () => (/* binding */ DefaultCommentProvider)\n/* harmony export */ });\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serializer/json-serializer.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultCommentProvider {\n    constructor(services) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node) {\n        var _a;\n        if ((0,_serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__.isAstNodeWithComment)(node)) {\n            return node.$comment;\n        }\n        return (_a = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.findCommentNode)(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n    }\n}\n//# sourceMappingURL=comment-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vY29tbWVudC1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dFO0FBQ2hCO0FBQ2pEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0ZBQW9CO0FBQ2hDO0FBQ0E7QUFDQSxxQkFBcUIsb0VBQWU7QUFDcEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vY29tbWVudC1wcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBpc0FzdE5vZGVXaXRoQ29tbWVudCB9IGZyb20gJy4uL3NlcmlhbGl6ZXIvanNvbi1zZXJpYWxpemVyLmpzJztcbmltcG9ydCB7IGZpbmRDb21tZW50Tm9kZSB9IGZyb20gJy4uL3V0aWxzL2NzdC11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbW1lbnRQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5ncmFtbWFyQ29uZmlnID0gKCkgPT4gc2VydmljZXMucGFyc2VyLkdyYW1tYXJDb25maWc7XG4gICAgfVxuICAgIGdldENvbW1lbnQobm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChpc0FzdE5vZGVXaXRoQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuJGNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChfYSA9IGZpbmRDb21tZW50Tm9kZShub2RlLiRjc3ROb2RlLCB0aGlzLmdyYW1tYXJDb25maWcoKS5tdWx0aWxpbmVDb21tZW50UnVsZXMpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGV4dDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tZW50LXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSDocDocumentationProvider: () => (/* binding */ JSDocDocumentationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _jsdoc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsdoc.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass JSDocDocumentationProvider {\n    constructor(services) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    getDocumentation(node) {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.isJSDoc)(comment)) {\n            const parsedJSDoc = (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.parseJSDoc)(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n    documentationLinkRenderer(node, name, display) {\n        var _a;\n        const description = (_a = this.findNameInPrecomputedScopes(node, name)) !== null && _a !== void 0 ? _a : this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    documentationTagRenderer(_node, _tag) {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n    findNameInPrecomputedScopes(node, name) {\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n        return undefined;\n    }\n    findNameInGlobalScope(node, name) {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n//# sourceMappingURL=documentation-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vZG9jdW1lbnRhdGlvbi1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0g7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQU87QUFDOUIsZ0NBQWdDLHFEQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWMsS0FBSyxHQUFHLFVBQVUsR0FBRztBQUMxRix1QkFBdUIsUUFBUSxJQUFJLGVBQWU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0VBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvZG9jdW1lbnRhdGlvbi9kb2N1bWVudGF0aW9uLXByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIzIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IGlzSlNEb2MsIHBhcnNlSlNEb2MgfSBmcm9tICcuL2pzZG9jLmpzJztcbmV4cG9ydCBjbGFzcyBKU0RvY0RvY3VtZW50YXRpb25Qcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBzZXJ2aWNlcy5zaGFyZWQud29ya3NwYWNlLkluZGV4TWFuYWdlcjtcbiAgICAgICAgdGhpcy5jb21tZW50UHJvdmlkZXIgPSBzZXJ2aWNlcy5kb2N1bWVudGF0aW9uLkNvbW1lbnRQcm92aWRlcjtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnRhdGlvbihub2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbW1lbnQgPSB0aGlzLmNvbW1lbnRQcm92aWRlci5nZXRDb21tZW50KG5vZGUpO1xuICAgICAgICBpZiAoY29tbWVudCAmJiBpc0pTRG9jKGNvbW1lbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRKU0RvYyA9IHBhcnNlSlNEb2MoY29tbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkSlNEb2MudG9NYXJrZG93bih7XG4gICAgICAgICAgICAgICAgcmVuZGVyTGluazogKGxpbmssIGRpc3BsYXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRhdGlvbkxpbmtSZW5kZXJlcihub2RlLCBsaW5rLCBkaXNwbGF5KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlbmRlclRhZzogKHRhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudGF0aW9uVGFnUmVuZGVyZXIobm9kZSwgdGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkb2N1bWVudGF0aW9uTGlua1JlbmRlcmVyKG5vZGUsIG5hbWUsIGRpc3BsYXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IChfYSA9IHRoaXMuZmluZE5hbWVJblByZWNvbXB1dGVkU2NvcGVzKG5vZGUsIG5hbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmZpbmROYW1lSW5HbG9iYWxTY29wZShub2RlLCBuYW1lKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0aW9uICYmIGRlc2NyaXB0aW9uLm5hbWVTZWdtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZGVzY3JpcHRpb24ubmFtZVNlZ21lbnQucmFuZ2Uuc3RhcnQubGluZSArIDE7XG4gICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBkZXNjcmlwdGlvbi5uYW1lU2VnbWVudC5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxO1xuICAgICAgICAgICAgY29uc3QgdXJpID0gZGVzY3JpcHRpb24uZG9jdW1lbnRVcmkud2l0aCh7IGZyYWdtZW50OiBgTCR7bGluZX0sJHtjaGFyYWN0ZXJ9YCB9KTtcbiAgICAgICAgICAgIHJldHVybiBgWyR7ZGlzcGxheX1dKCR7dXJpLnRvU3RyaW5nKCl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50YXRpb25UYWdSZW5kZXJlcihfbm9kZSwgX3RhZykge1xuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgdGFnIHJlbmRlcmluZ1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmaW5kTmFtZUluUHJlY29tcHV0ZWRTY29wZXMobm9kZSwgbmFtZSkge1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KG5vZGUpO1xuICAgICAgICBjb25zdCBwcmVjb21wdXRlZCA9IGRvY3VtZW50LnByZWNvbXB1dGVkU2NvcGVzO1xuICAgICAgICBpZiAoIXByZWNvbXB1dGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbERlc2NyaXB0aW9ucyA9IHByZWNvbXB1dGVkLmdldChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGFsbERlc2NyaXB0aW9ucy5maW5kKGUgPT4gZS5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuJGNvbnRhaW5lcjtcbiAgICAgICAgfSB3aGlsZSAoY3VycmVudE5vZGUpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmaW5kTmFtZUluR2xvYmFsU2NvcGUobm9kZSwgbmFtZSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuaW5kZXhNYW5hZ2VyLmFsbEVsZW1lbnRzKCkuZmluZChlID0+IGUubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb2N1bWVudGF0aW9uLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJSDoc: () => (/* binding */ isJSDoc),\n/* harmony export */   parseJSDoc: () => (/* binding */ parseJSDoc)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/../../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\nfunction parseJSDoc(node, start, options) {\n    let opts;\n    let position;\n    if (typeof node === 'string') {\n        position = start;\n        opts = options;\n    }\n    else {\n        position = node.range.start;\n        opts = start;\n    }\n    if (!position) {\n        position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0);\n    }\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\nfunction isJSDoc(node, options) {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last));\n}\nfunction getLines(node) {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    }\n    else {\n        content = node.text;\n    }\n    const lines = content.split(_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.NEWLINE_REGEXP);\n    return lines;\n}\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\nfunction tokenize(context) {\n    var _a, _b, _c;\n    const tokens = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n        if (first && context.options.start) {\n            const match = (_a = context.options.start) === null || _a === void 0 ? void 0 : _a.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        else {\n            const match = (_b = context.options.line) === null || _b === void 0 ? void 0 : _b.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = (_c = context.options.end) === null || _c === void 0 ? void 0 : _c.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position)\n                });\n            }\n        }\n        else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index);\n                const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n        currentLine++;\n        currentCharacter = 0;\n    }\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n    return tokens;\n}\nfunction buildInlineTokens(tags, line, lineIndex, characterIndex) {\n    const tokens = [];\n    if (tags.length === 0) {\n        const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex);\n        const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n        });\n    }\n    else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, matchIndex + characterIndex))\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))\n                });\n            }\n            else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex))\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex + endContent.length))\n            });\n        }\n    }\n    return tokens;\n}\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\nfunction skipWhitespace(line, index) {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index;\n    }\n    else {\n        return line.length;\n    }\n}\nfunction lastCharacter(line) {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n// Parsing\nfunction parseJSDocComment(context) {\n    var _a, _b, _c, _d;\n    const startPosition = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPosition, startPosition));\n    }\n    const elements = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = (_b = (_a = elements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : startPosition;\n    const end = (_d = (_c = elements[elements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : startPosition;\n    return new JSDocCommentImpl(elements, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end));\n}\nfunction parseJSDocElement(context, last) {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    }\n    else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    }\n    else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\nfunction appendEmptyLine(token, element) {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        }\n        else {\n            element.content.inlines.push(line);\n        }\n    }\n}\nfunction parseJSDocText(context) {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(firstToken.range.start, lastToken.range.end));\n}\nfunction parseJSDocInline(context) {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    }\n    else {\n        return parseJSDocLine(context);\n    }\n}\nfunction parseJSDocTag(context, inline) {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(name, new JSDocTextImpl([docLine], docLine.range), inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, docLine.range.end));\n        }\n        else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(name, textDoc, inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, textDoc.range.end));\n        }\n    }\n    else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\nfunction parseJSDocLine(context) {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\nfunction normalizeOptions(options) {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\nfunction normalizeOption(option, start) {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        }\n        else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    }\n    else {\n        return option;\n    }\n}\nclass JSDocCommentImpl {\n    constructor(elements, range) {\n        this.elements = elements;\n        this.range = range;\n    }\n    getTag(name) {\n        return this.getAllTags().find(e => e.name === name);\n    }\n    getTags(name) {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n    getAllTags() {\n        return this.elements.filter((e) => 'name' in e);\n    }\n    toString() {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            }\n            else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n    toMarkdown(options) {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            }\n            else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\nclass JSDocTagImpl {\n    constructor(name, content, inline, range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n    toString() {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n    toMarkdown(options) {\n        var _a, _b;\n        return (_b = (_a = options === null || options === void 0 ? void 0 : options.renderTag) === null || _a === void 0 ? void 0 : _a.call(options, this)) !== null && _b !== void 0 ? _b : this.toMarkdownDefault(options);\n    }\n    toMarkdownDefault(options) {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options !== null && options !== void 0 ? options : {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if ((options === null || options === void 0 ? void 0 : options.tag) === 'italic' || (options === null || options === void 0 ? void 0 : options.tag) === undefined) {\n            marker = '*';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold') {\n            marker = '**';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n}\nfunction renderInlineTag(tag, content, options) {\n    var _a, _b;\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = (_b = (_a = options.renderLink) === null || _a === void 0 ? void 0 : _a.call(options, content, display)) !== null && _b !== void 0 ? _b : renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\nfunction renderLinkDefault(content, display) {\n    try {\n        _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(content, true);\n        return `[${display}](${content})`;\n    }\n    catch (_a) {\n        return content;\n    }\n}\nclass JSDocTextImpl {\n    constructor(lines, range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n    toString() {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n    toMarkdown(options) {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\nclass JSDocLineImpl {\n    constructor(text, range) {\n        this.text = text;\n        this.range = range;\n    }\n    toString() {\n        return this.text;\n    }\n    toMarkdown() {\n        return this.text;\n    }\n}\nfunction fillNewlines(text) {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    }\n    else {\n        return '\\n\\n';\n    }\n}\n//# sourceMappingURL=jsdoc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractElement: () => (/* binding */ AbstractElement),\n/* harmony export */   AbstractRule: () => (/* binding */ AbstractRule),\n/* harmony export */   AbstractType: () => (/* binding */ AbstractType),\n/* harmony export */   Action: () => (/* binding */ Action),\n/* harmony export */   Alternatives: () => (/* binding */ Alternatives),\n/* harmony export */   ArrayLiteral: () => (/* binding */ ArrayLiteral),\n/* harmony export */   ArrayType: () => (/* binding */ ArrayType),\n/* harmony export */   Assignment: () => (/* binding */ Assignment),\n/* harmony export */   BooleanLiteral: () => (/* binding */ BooleanLiteral),\n/* harmony export */   CharacterRange: () => (/* binding */ CharacterRange),\n/* harmony export */   Condition: () => (/* binding */ Condition),\n/* harmony export */   Conjunction: () => (/* binding */ Conjunction),\n/* harmony export */   CrossReference: () => (/* binding */ CrossReference),\n/* harmony export */   Disjunction: () => (/* binding */ Disjunction),\n/* harmony export */   EndOfFile: () => (/* binding */ EndOfFile),\n/* harmony export */   Grammar: () => (/* binding */ Grammar),\n/* harmony export */   GrammarImport: () => (/* binding */ GrammarImport),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   InferredType: () => (/* binding */ InferredType),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   Keyword: () => (/* binding */ Keyword),\n/* harmony export */   LangiumGrammarAstReflection: () => (/* binding */ LangiumGrammarAstReflection),\n/* harmony export */   LangiumGrammarTerminals: () => (/* binding */ LangiumGrammarTerminals),\n/* harmony export */   NamedArgument: () => (/* binding */ NamedArgument),\n/* harmony export */   NegatedToken: () => (/* binding */ NegatedToken),\n/* harmony export */   Negation: () => (/* binding */ Negation),\n/* harmony export */   NumberLiteral: () => (/* binding */ NumberLiteral),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   ParameterReference: () => (/* binding */ ParameterReference),\n/* harmony export */   ParserRule: () => (/* binding */ ParserRule),\n/* harmony export */   ReferenceType: () => (/* binding */ ReferenceType),\n/* harmony export */   RegexToken: () => (/* binding */ RegexToken),\n/* harmony export */   ReturnType: () => (/* binding */ ReturnType),\n/* harmony export */   RuleCall: () => (/* binding */ RuleCall),\n/* harmony export */   SimpleType: () => (/* binding */ SimpleType),\n/* harmony export */   StringLiteral: () => (/* binding */ StringLiteral),\n/* harmony export */   TerminalAlternatives: () => (/* binding */ TerminalAlternatives),\n/* harmony export */   TerminalGroup: () => (/* binding */ TerminalGroup),\n/* harmony export */   TerminalRule: () => (/* binding */ TerminalRule),\n/* harmony export */   TerminalRuleCall: () => (/* binding */ TerminalRuleCall),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   TypeAttribute: () => (/* binding */ TypeAttribute),\n/* harmony export */   TypeDefinition: () => (/* binding */ TypeDefinition),\n/* harmony export */   UnionType: () => (/* binding */ UnionType),\n/* harmony export */   UnorderedGroup: () => (/* binding */ UnorderedGroup),\n/* harmony export */   UntilToken: () => (/* binding */ UntilToken),\n/* harmony export */   ValueLiteral: () => (/* binding */ ValueLiteral),\n/* harmony export */   Wildcard: () => (/* binding */ Wildcard),\n/* harmony export */   isAbstractElement: () => (/* binding */ isAbstractElement),\n/* harmony export */   isAbstractRule: () => (/* binding */ isAbstractRule),\n/* harmony export */   isAbstractType: () => (/* binding */ isAbstractType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isAlternatives: () => (/* binding */ isAlternatives),\n/* harmony export */   isArrayLiteral: () => (/* binding */ isArrayLiteral),\n/* harmony export */   isArrayType: () => (/* binding */ isArrayType),\n/* harmony export */   isAssignment: () => (/* binding */ isAssignment),\n/* harmony export */   isBooleanLiteral: () => (/* binding */ isBooleanLiteral),\n/* harmony export */   isCharacterRange: () => (/* binding */ isCharacterRange),\n/* harmony export */   isCondition: () => (/* binding */ isCondition),\n/* harmony export */   isConjunction: () => (/* binding */ isConjunction),\n/* harmony export */   isCrossReference: () => (/* binding */ isCrossReference),\n/* harmony export */   isDisjunction: () => (/* binding */ isDisjunction),\n/* harmony export */   isEndOfFile: () => (/* binding */ isEndOfFile),\n/* harmony export */   isFeatureName: () => (/* binding */ isFeatureName),\n/* harmony export */   isGrammar: () => (/* binding */ isGrammar),\n/* harmony export */   isGrammarImport: () => (/* binding */ isGrammarImport),\n/* harmony export */   isGroup: () => (/* binding */ isGroup),\n/* harmony export */   isInferredType: () => (/* binding */ isInferredType),\n/* harmony export */   isInterface: () => (/* binding */ isInterface),\n/* harmony export */   isKeyword: () => (/* binding */ isKeyword),\n/* harmony export */   isNamedArgument: () => (/* binding */ isNamedArgument),\n/* harmony export */   isNegatedToken: () => (/* binding */ isNegatedToken),\n/* harmony export */   isNegation: () => (/* binding */ isNegation),\n/* harmony export */   isNumberLiteral: () => (/* binding */ isNumberLiteral),\n/* harmony export */   isParameter: () => (/* binding */ isParameter),\n/* harmony export */   isParameterReference: () => (/* binding */ isParameterReference),\n/* harmony export */   isParserRule: () => (/* binding */ isParserRule),\n/* harmony export */   isPrimitiveType: () => (/* binding */ isPrimitiveType),\n/* harmony export */   isReferenceType: () => (/* binding */ isReferenceType),\n/* harmony export */   isRegexToken: () => (/* binding */ isRegexToken),\n/* harmony export */   isReturnType: () => (/* binding */ isReturnType),\n/* harmony export */   isRuleCall: () => (/* binding */ isRuleCall),\n/* harmony export */   isSimpleType: () => (/* binding */ isSimpleType),\n/* harmony export */   isStringLiteral: () => (/* binding */ isStringLiteral),\n/* harmony export */   isTerminalAlternatives: () => (/* binding */ isTerminalAlternatives),\n/* harmony export */   isTerminalGroup: () => (/* binding */ isTerminalGroup),\n/* harmony export */   isTerminalRule: () => (/* binding */ isTerminalRule),\n/* harmony export */   isTerminalRuleCall: () => (/* binding */ isTerminalRuleCall),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isTypeAttribute: () => (/* binding */ isTypeAttribute),\n/* harmony export */   isTypeDefinition: () => (/* binding */ isTypeDefinition),\n/* harmony export */   isUnionType: () => (/* binding */ isUnionType),\n/* harmony export */   isUnorderedGroup: () => (/* binding */ isUnorderedGroup),\n/* harmony export */   isUntilToken: () => (/* binding */ isUntilToken),\n/* harmony export */   isValueLiteral: () => (/* binding */ isValueLiteral),\n/* harmony export */   isWildcard: () => (/* binding */ isWildcard),\n/* harmony export */   reflection: () => (/* binding */ reflection)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/******************************************************************************\n * This file was generated by langium-cli 3.3.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\n\nconst LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\nconst AbstractRule = 'AbstractRule';\nfunction isAbstractRule(item) {\n    return reflection.isInstance(item, AbstractRule);\n}\nconst AbstractType = 'AbstractType';\nfunction isAbstractType(item) {\n    return reflection.isInstance(item, AbstractType);\n}\nconst Condition = 'Condition';\nfunction isCondition(item) {\n    return reflection.isInstance(item, Condition);\n}\nfunction isFeatureName(item) {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\nfunction isPrimitiveType(item) {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\nconst TypeDefinition = 'TypeDefinition';\nfunction isTypeDefinition(item) {\n    return reflection.isInstance(item, TypeDefinition);\n}\nconst ValueLiteral = 'ValueLiteral';\nfunction isValueLiteral(item) {\n    return reflection.isInstance(item, ValueLiteral);\n}\nconst AbstractElement = 'AbstractElement';\nfunction isAbstractElement(item) {\n    return reflection.isInstance(item, AbstractElement);\n}\nconst ArrayLiteral = 'ArrayLiteral';\nfunction isArrayLiteral(item) {\n    return reflection.isInstance(item, ArrayLiteral);\n}\nconst ArrayType = 'ArrayType';\nfunction isArrayType(item) {\n    return reflection.isInstance(item, ArrayType);\n}\nconst BooleanLiteral = 'BooleanLiteral';\nfunction isBooleanLiteral(item) {\n    return reflection.isInstance(item, BooleanLiteral);\n}\nconst Conjunction = 'Conjunction';\nfunction isConjunction(item) {\n    return reflection.isInstance(item, Conjunction);\n}\nconst Disjunction = 'Disjunction';\nfunction isDisjunction(item) {\n    return reflection.isInstance(item, Disjunction);\n}\nconst Grammar = 'Grammar';\nfunction isGrammar(item) {\n    return reflection.isInstance(item, Grammar);\n}\nconst GrammarImport = 'GrammarImport';\nfunction isGrammarImport(item) {\n    return reflection.isInstance(item, GrammarImport);\n}\nconst InferredType = 'InferredType';\nfunction isInferredType(item) {\n    return reflection.isInstance(item, InferredType);\n}\nconst Interface = 'Interface';\nfunction isInterface(item) {\n    return reflection.isInstance(item, Interface);\n}\nconst NamedArgument = 'NamedArgument';\nfunction isNamedArgument(item) {\n    return reflection.isInstance(item, NamedArgument);\n}\nconst Negation = 'Negation';\nfunction isNegation(item) {\n    return reflection.isInstance(item, Negation);\n}\nconst NumberLiteral = 'NumberLiteral';\nfunction isNumberLiteral(item) {\n    return reflection.isInstance(item, NumberLiteral);\n}\nconst Parameter = 'Parameter';\nfunction isParameter(item) {\n    return reflection.isInstance(item, Parameter);\n}\nconst ParameterReference = 'ParameterReference';\nfunction isParameterReference(item) {\n    return reflection.isInstance(item, ParameterReference);\n}\nconst ParserRule = 'ParserRule';\nfunction isParserRule(item) {\n    return reflection.isInstance(item, ParserRule);\n}\nconst ReferenceType = 'ReferenceType';\nfunction isReferenceType(item) {\n    return reflection.isInstance(item, ReferenceType);\n}\nconst ReturnType = 'ReturnType';\nfunction isReturnType(item) {\n    return reflection.isInstance(item, ReturnType);\n}\nconst SimpleType = 'SimpleType';\nfunction isSimpleType(item) {\n    return reflection.isInstance(item, SimpleType);\n}\nconst StringLiteral = 'StringLiteral';\nfunction isStringLiteral(item) {\n    return reflection.isInstance(item, StringLiteral);\n}\nconst TerminalRule = 'TerminalRule';\nfunction isTerminalRule(item) {\n    return reflection.isInstance(item, TerminalRule);\n}\nconst Type = 'Type';\nfunction isType(item) {\n    return reflection.isInstance(item, Type);\n}\nconst TypeAttribute = 'TypeAttribute';\nfunction isTypeAttribute(item) {\n    return reflection.isInstance(item, TypeAttribute);\n}\nconst UnionType = 'UnionType';\nfunction isUnionType(item) {\n    return reflection.isInstance(item, UnionType);\n}\nconst Action = 'Action';\nfunction isAction(item) {\n    return reflection.isInstance(item, Action);\n}\nconst Alternatives = 'Alternatives';\nfunction isAlternatives(item) {\n    return reflection.isInstance(item, Alternatives);\n}\nconst Assignment = 'Assignment';\nfunction isAssignment(item) {\n    return reflection.isInstance(item, Assignment);\n}\nconst CharacterRange = 'CharacterRange';\nfunction isCharacterRange(item) {\n    return reflection.isInstance(item, CharacterRange);\n}\nconst CrossReference = 'CrossReference';\nfunction isCrossReference(item) {\n    return reflection.isInstance(item, CrossReference);\n}\nconst EndOfFile = 'EndOfFile';\nfunction isEndOfFile(item) {\n    return reflection.isInstance(item, EndOfFile);\n}\nconst Group = 'Group';\nfunction isGroup(item) {\n    return reflection.isInstance(item, Group);\n}\nconst Keyword = 'Keyword';\nfunction isKeyword(item) {\n    return reflection.isInstance(item, Keyword);\n}\nconst NegatedToken = 'NegatedToken';\nfunction isNegatedToken(item) {\n    return reflection.isInstance(item, NegatedToken);\n}\nconst RegexToken = 'RegexToken';\nfunction isRegexToken(item) {\n    return reflection.isInstance(item, RegexToken);\n}\nconst RuleCall = 'RuleCall';\nfunction isRuleCall(item) {\n    return reflection.isInstance(item, RuleCall);\n}\nconst TerminalAlternatives = 'TerminalAlternatives';\nfunction isTerminalAlternatives(item) {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\nconst TerminalGroup = 'TerminalGroup';\nfunction isTerminalGroup(item) {\n    return reflection.isInstance(item, TerminalGroup);\n}\nconst TerminalRuleCall = 'TerminalRuleCall';\nfunction isTerminalRuleCall(item) {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\nconst UnorderedGroup = 'UnorderedGroup';\nfunction isUnorderedGroup(item) {\n    return reflection.isInstance(item, UnorderedGroup);\n}\nconst UntilToken = 'UntilToken';\nfunction isUntilToken(item) {\n    return reflection.isInstance(item, UntilToken);\n}\nconst Wildcard = 'Wildcard';\nfunction isWildcard(item) {\n    return reflection.isInstance(item, Wildcard);\n}\nclass LangiumGrammarAstReflection extends _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.AbstractAstReflection {\n    getAllTypes() {\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\n    }\n    computeIsSubtype(subtype, supertype) {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    getReferenceType(refInfo) {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n    getTypeMetaData(type) {\n        switch (type) {\n            case AbstractElement: {\n                return {\n                    name: AbstractElement,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case ArrayLiteral: {\n                return {\n                    name: ArrayLiteral,\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case ArrayType: {\n                return {\n                    name: ArrayType,\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case BooleanLiteral: {\n                return {\n                    name: BooleanLiteral,\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case Conjunction: {\n                return {\n                    name: Conjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Disjunction: {\n                return {\n                    name: Disjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Grammar: {\n                return {\n                    name: Grammar,\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case GrammarImport: {\n                return {\n                    name: GrammarImport,\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case InferredType: {\n                return {\n                    name: InferredType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case Interface: {\n                return {\n                    name: Interface,\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case NamedArgument: {\n                return {\n                    name: NamedArgument,\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Negation: {\n                return {\n                    name: Negation,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NumberLiteral: {\n                return {\n                    name: NumberLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Parameter: {\n                return {\n                    name: Parameter,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case ParameterReference: {\n                return {\n                    name: ParameterReference,\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case ParserRule: {\n                return {\n                    name: ParserRule,\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case ReferenceType: {\n                return {\n                    name: ReferenceType,\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case ReturnType: {\n                return {\n                    name: ReturnType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case SimpleType: {\n                return {\n                    name: SimpleType,\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case StringLiteral: {\n                return {\n                    name: StringLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case TerminalRule: {\n                return {\n                    name: TerminalRule,\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Type: {\n                return {\n                    name: Type,\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case TypeAttribute: {\n                return {\n                    name: TypeAttribute,\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case UnionType: {\n                return {\n                    name: UnionType,\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case Action: {\n                return {\n                    name: Action,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Alternatives: {\n                return {\n                    name: Alternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Assignment: {\n                return {\n                    name: Assignment,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case CharacterRange: {\n                return {\n                    name: CharacterRange,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case CrossReference: {\n                return {\n                    name: CrossReference,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case EndOfFile: {\n                return {\n                    name: EndOfFile,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Group: {\n                return {\n                    name: Group,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Keyword: {\n                return {\n                    name: Keyword,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NegatedToken: {\n                return {\n                    name: NegatedToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case RegexToken: {\n                return {\n                    name: RegexToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case RuleCall: {\n                return {\n                    name: RuleCall,\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case TerminalAlternatives: {\n                return {\n                    name: TerminalAlternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalGroup: {\n                return {\n                    name: TerminalGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalRuleCall: {\n                return {\n                    name: TerminalRuleCall,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case UnorderedGroup: {\n                return {\n                    name: UnorderedGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case UntilToken: {\n                return {\n                    name: UntilToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case Wildcard: {\n                return {\n                    name: Wildcard,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\nconst reflection = new LangiumGrammarAstReflection();\n//# sourceMappingURL=ast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGrammarConfig: () => (/* binding */ createGrammarConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nfunction createGrammarConfig(services) {\n    const rules = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if ((0,_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule)(rule) && (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.isCommentTerminal)(rule) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isMultilineComment)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.terminalRegex)(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__.DefaultNameRegexp\n    };\n}\n//# sourceMappingURL=grammar-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2xhbmd1YWdlcy9ncmFtbWFyLWNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEQ7QUFDbUI7QUFDZjtBQUNWO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlFQUFjLFVBQVUsMEVBQWlCLFVBQVUsMEVBQWtCLENBQUMsc0VBQWE7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrRUFBaUI7QUFDckM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2xhbmd1YWdlcy9ncmFtbWFyLWNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBEZWZhdWx0TmFtZVJlZ2V4cCB9IGZyb20gJy4uL3V0aWxzL2NzdC11dGlscy5qcyc7XG5pbXBvcnQgeyBpc0NvbW1lbnRUZXJtaW5hbCwgdGVybWluYWxSZWdleCB9IGZyb20gJy4uL3V0aWxzL2dyYW1tYXItdXRpbHMuanMnO1xuaW1wb3J0IHsgaXNNdWx0aWxpbmVDb21tZW50IH0gZnJvbSAnLi4vdXRpbHMvcmVnZXhwLXV0aWxzLmpzJztcbmltcG9ydCB7IGlzVGVybWluYWxSdWxlIH0gZnJvbSAnLi9nZW5lcmF0ZWQvYXN0LmpzJztcbi8qKlxuICogQ3JlYXRlIHRoZSBkZWZhdWx0IGdyYW1tYXIgY29uZmlndXJhdGlvbiAodXNlZCBieSBgY3JlYXRlRGVmYXVsdE1vZHVsZWApLiBUaGlzIGNhbiBiZSBvdmVycmlkZGVuIGluIGFcbiAqIGxhbmd1YWdlLXNwZWNpZmljIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdyYW1tYXJDb25maWcoc2VydmljZXMpIHtcbiAgICBjb25zdCBydWxlcyA9IFtdO1xuICAgIGNvbnN0IGdyYW1tYXIgPSBzZXJ2aWNlcy5HcmFtbWFyO1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiBncmFtbWFyLnJ1bGVzKSB7XG4gICAgICAgIGlmIChpc1Rlcm1pbmFsUnVsZShydWxlKSAmJiBpc0NvbW1lbnRUZXJtaW5hbChydWxlKSAmJiBpc011bHRpbGluZUNvbW1lbnQodGVybWluYWxSZWdleChydWxlKSkpIHtcbiAgICAgICAgICAgIHJ1bGVzLnB1c2gocnVsZS5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtdWx0aWxpbmVDb21tZW50UnVsZXM6IHJ1bGVzLFxuICAgICAgICBuYW1lUmVnZXhwOiBEZWZhdWx0TmFtZVJlZ2V4cFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFtbWFyLWNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractThreadedAsyncParser: () => (/* binding */ AbstractThreadedAsyncParser),\n/* harmony export */   DefaultAsyncParser: () => (/* binding */ DefaultAsyncParser),\n/* harmony export */   ParserWorker: () => (/* binding */ ParserWorker)\n/* harmony export */ });\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\n *\n * @remarks\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nclass DefaultAsyncParser {\n    constructor(services) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n    parse(text, _cancelToken) {\n        return Promise.resolve(this.syncParser.parse(text));\n    }\n}\nclass AbstractThreadedAsyncParser {\n    constructor(services) {\n        /**\n         * The thread count determines how many threads are used to parse files in parallel.\n         * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n         */\n        this.threadCount = 8;\n        /**\n         * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n         * The default value is 200(ms).\n         */\n        this.terminationDelay = 200;\n        this.workerPool = [];\n        this.queue = [];\n        this.hydrator = services.serializer.Hydrator;\n    }\n    initializeWorkers() {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n    async parse(text, cancelToken) {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        let timeout;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n    terminateWorker(worker) {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n    async acquireParserWorker(cancelToken) {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n}\nclass ParserWorker {\n    get ready() {\n        return this._ready;\n    }\n    get onReady() {\n        return this.onReadyEmitter.event;\n    }\n    constructor(sendMessage, onMessage, onError, terminate) {\n        this.onReadyEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this._ready = true;\n        this._parsing = false;\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n    terminate() {\n        this.deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        this._terminate();\n    }\n    lock() {\n        this._ready = false;\n    }\n    unlock() {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n    parse(text) {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n//# sourceMappingURL=async-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCompletionParser: () => (/* binding */ createCompletionParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nfunction createCompletionParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumCompletionParser(services);\n    (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n//# sourceMappingURL=completion-parser-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9jb21wbGV0aW9uLXBhcnNlci1idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEQ7QUFDTjtBQUNqRDtBQUNQO0FBQ0E7QUFDQSx1QkFBdUIsdUVBQXVCO0FBQzlDLElBQUkscUVBQVk7QUFDaEI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL2NvbXBsZXRpb24tcGFyc2VyLWJ1aWxkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjIgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgTGFuZ2l1bUNvbXBsZXRpb25QYXJzZXIgfSBmcm9tICcuL2xhbmdpdW0tcGFyc2VyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVBhcnNlciB9IGZyb20gJy4vcGFyc2VyLWJ1aWxkZXItYmFzZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGlvblBhcnNlcihzZXJ2aWNlcykge1xuICAgIGNvbnN0IGdyYW1tYXIgPSBzZXJ2aWNlcy5HcmFtbWFyO1xuICAgIGNvbnN0IGxleGVyID0gc2VydmljZXMucGFyc2VyLkxleGVyO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBMYW5naXVtQ29tcGxldGlvblBhcnNlcihzZXJ2aWNlcyk7XG4gICAgY3JlYXRlUGFyc2VyKGdyYW1tYXIsIHBhcnNlciwgbGV4ZXIuZGVmaW5pdGlvbik7XG4gICAgcGFyc2VyLmZpbmFsaXplKCk7XG4gICAgcmV0dXJuIHBhcnNlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb24tcGFyc2VyLWJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractCstNode: () => (/* binding */ AbstractCstNode),\n/* harmony export */   CompositeCstNodeImpl: () => (/* binding */ CompositeCstNodeImpl),\n/* harmony export */   CstNodeBuilder: () => (/* binding */ CstNodeBuilder),\n/* harmony export */   LeafCstNodeImpl: () => (/* binding */ LeafCstNodeImpl),\n/* harmony export */   RootCstNodeImpl: () => (/* binding */ RootCstNodeImpl)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/../../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass CstNodeBuilder {\n    constructor() {\n        this.nodeStack = [];\n    }\n    get current() {\n        var _a;\n        return (_a = this.nodeStack[this.nodeStack.length - 1]) !== null && _a !== void 0 ? _a : this.rootNode;\n    }\n    buildRootNode(input) {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n    buildCompositeNode(feature) {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n    buildLeafNode(token, feature) {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, !feature);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n    removeNode(node) {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n    addHiddenNodes(tokens) {\n        const nodes = [];\n        for (const token of tokens) {\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, true);\n            leafNode.root = this.rootNode;\n            nodes.push(leafNode);\n        }\n        let current = this.current;\n        let added = false;\n        // If we are within a composite node, we add the hidden nodes to the content\n        if (current.content.length > 0) {\n            current.content.push(...nodes);\n            return;\n        }\n        // Otherwise we are at a newly created node\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\n        while (current.container) {\n            const index = current.container.content.indexOf(current);\n            if (index > 0) {\n                // Add the hidden nodes before the current node\n                current.container.content.splice(index, 0, ...nodes);\n                added = true;\n                break;\n            }\n            current = current.container;\n        }\n        // If we arrive at the root node, we add the hidden nodes at the beginning\n        // This is the case if the hidden nodes are the first nodes in the tree\n        if (!added) {\n            this.rootNode.content.unshift(...nodes);\n        }\n    }\n    construct(item) {\n        const current = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if ((node === null || node === void 0 ? void 0 : node.content.length) === 0) {\n            this.removeNode(node);\n        }\n    }\n}\nclass AbstractCstNode {\n    /** @deprecated use `container` instead. */\n    get parent() {\n        return this.container;\n    }\n    /** @deprecated use `grammarSource` instead. */\n    get feature() {\n        return this.grammarSource;\n    }\n    get hidden() {\n        return false;\n    }\n    get astNode() {\n        var _a, _b;\n        const node = typeof ((_a = this._astNode) === null || _a === void 0 ? void 0 : _a.$type) === 'string' ? this._astNode : (_b = this.container) === null || _b === void 0 ? void 0 : _b.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n    set astNode(value) {\n        this._astNode = value;\n    }\n    /** @deprecated use `astNode` instead. */\n    get element() {\n        return this.astNode;\n    }\n    get text() {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\nclass LeafCstNodeImpl extends AbstractCstNode {\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return this._length;\n    }\n    get end() {\n        return this._offset + this._length;\n    }\n    get hidden() {\n        return this._hidden;\n    }\n    get tokenType() {\n        return this._tokenType;\n    }\n    get range() {\n        return this._range;\n    }\n    constructor(offset, length, range, tokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\nclass CompositeCstNodeImpl extends AbstractCstNode {\n    constructor() {\n        super(...arguments);\n        this.content = new CstNodeContainer(this);\n    }\n    /** @deprecated use `content` instead. */\n    get children() {\n        return this.content;\n    }\n    get offset() {\n        var _a, _b;\n        return (_b = (_a = this.firstNonHiddenNode) === null || _a === void 0 ? void 0 : _a.offset) !== null && _b !== void 0 ? _b : 0;\n    }\n    get length() {\n        return this.end - this.offset;\n    }\n    get end() {\n        var _a, _b;\n        return (_b = (_a = this.lastNonHiddenNode) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;\n    }\n    get range() {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        }\n        else {\n            return { start: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0), end: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0) };\n        }\n    }\n    get firstNonHiddenNode() {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n    get lastNonHiddenNode() {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\nclass CstNodeContainer extends Array {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n    push(...items) {\n        this.addParents(items);\n        return super.push(...items);\n    }\n    unshift(...items) {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n    splice(start, count, ...items) {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n    addParents(items) {\n        for (const item of items) {\n            item.container = this.parent;\n        }\n    }\n}\nclass RootCstNodeImpl extends CompositeCstNodeImpl {\n    get text() {\n        return this._text.substring(this.offset, this.end);\n    }\n    get fullText() {\n        return this._text;\n    }\n    constructor(input) {\n        super();\n        this._text = '';\n        this._text = input !== null && input !== void 0 ? input : '';\n    }\n}\n//# sourceMappingURL=cst-node-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLangiumParser: () => (/* binding */ createLangiumParser),\n/* harmony export */   prepareLangiumParser: () => (/* binding */ prepareLangiumParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nfunction createLangiumParser(services) {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nfunction prepareLangiumParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumParser(services);\n    return (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n}\n//# sourceMappingURL=langium-parser-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sYW5naXVtLXBhcnNlci1idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0k7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSx1QkFBdUIsNkRBQWE7QUFDcEMsV0FBVyxxRUFBWTtBQUN2QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sYW5naXVtLXBhcnNlci1idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IExhbmdpdW1QYXJzZXIgfSBmcm9tICcuL2xhbmdpdW0tcGFyc2VyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVBhcnNlciB9IGZyb20gJy4vcGFyc2VyLWJ1aWxkZXItYmFzZS5qcyc7XG4vKipcbiAqIENyZWF0ZSBhbmQgZmluYWxpemUgYSBMYW5naXVtIHBhcnNlci4gVGhlIHBhcnNlciBydWxlcyBhcmUgZGVyaXZlZCBmcm9tIHRoZSBncmFtbWFyLCB3aGljaCBpc1xuICogYXZhaWxhYmxlIGF0IGBzZXJ2aWNlcy5HcmFtbWFyYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxhbmdpdW1QYXJzZXIoc2VydmljZXMpIHtcbiAgICBjb25zdCBwYXJzZXIgPSBwcmVwYXJlTGFuZ2l1bVBhcnNlcihzZXJ2aWNlcyk7XG4gICAgcGFyc2VyLmZpbmFsaXplKCk7XG4gICAgcmV0dXJuIHBhcnNlcjtcbn1cbi8qKlxuICogQ3JlYXRlIGEgTGFuZ2l1bSBwYXJzZXIgd2l0aG91dCBmaW5hbGl6aW5nIGl0LiBUaGlzIGlzIHVzZWQgdG8gZXh0cmFjdCBtb3JlIGRldGFpbGVkIGVycm9yXG4gKiBpbmZvcm1hdGlvbiB3aGVuIHRoZSBwYXJzZXIgaXMgaW5pdGlhbGx5IHZhbGlkYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVMYW5naXVtUGFyc2VyKHNlcnZpY2VzKSB7XG4gICAgY29uc3QgZ3JhbW1hciA9IHNlcnZpY2VzLkdyYW1tYXI7XG4gICAgY29uc3QgbGV4ZXIgPSBzZXJ2aWNlcy5wYXJzZXIuTGV4ZXI7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IExhbmdpdW1QYXJzZXIoc2VydmljZXMpO1xuICAgIHJldHVybiBjcmVhdGVQYXJzZXIoZ3JhbW1hciwgcGFyc2VyLCBsZXhlci5kZWZpbml0aW9uKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmdpdW0tcGFyc2VyLWJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractLangiumParser: () => (/* binding */ AbstractLangiumParser),\n/* harmony export */   AbstractParserErrorMessageProvider: () => (/* binding */ AbstractParserErrorMessageProvider),\n/* harmony export */   DatatypeSymbol: () => (/* binding */ DatatypeSymbol),\n/* harmony export */   LangiumCompletionParser: () => (/* binding */ LangiumCompletionParser),\n/* harmony export */   LangiumParser: () => (/* binding */ LangiumParser),\n/* harmony export */   LangiumParserErrorMessageProvider: () => (/* binding */ LangiumParserErrorMessageProvider)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chevrotain-allstar */ \"(ssr)/../../node_modules/.pnpm/chevrotain-allstar@0.3.1_chevrotain@11.0.3/node_modules/chevrotain-allstar/lib/index.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-node-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nconst DatatypeSymbol = Symbol('Datatype');\nfunction isDataTypeNode(node) {\n    return node.$type === DatatypeSymbol;\n}\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name) => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\nclass AbstractLangiumParser {\n    constructor(services) {\n        this._unorderedGroups = new Map();\n        this.allRules = new Map();\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.wrapper = new ChevrotainWrapper(tokens, Object.assign(Object.assign({}, services.parser.ParserConfig), { skipValidations: production, errorMessageProvider: services.parser.ParserErrorMessageProvider }));\n    }\n    alternatives(idx, choices) {\n        this.wrapper.wrapOr(idx, choices);\n    }\n    optional(idx, callback) {\n        this.wrapper.wrapOption(idx, callback);\n    }\n    many(idx, callback) {\n        this.wrapper.wrapMany(idx, callback);\n    }\n    atLeastOne(idx, callback) {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n    getRule(name) {\n        return this.allRules.get(name);\n    }\n    isRecording() {\n        return this.wrapper.IS_RECORDING;\n    }\n    get unorderedGroups() {\n        return this._unorderedGroups;\n    }\n    getRuleStack() {\n        return this.wrapper.RULE_STACK;\n    }\n    finalize() {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\nclass LangiumParser extends AbstractLangiumParser {\n    get current() {\n        return this.stack[this.stack.length - 1];\n    }\n    constructor(services) {\n        super(services);\n        this.nodeBuilder = new _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__.CstNodeBuilder();\n        this.stack = [];\n        this.assignmentMap = new Map();\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n    rule(rule, impl) {\n        const type = this.computeRuleType(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    computeRuleType(rule) {\n        if (rule.fragment) {\n            return undefined;\n        }\n        else if ((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.isDataTypeRule)(rule)) {\n            return DatatypeSymbol;\n        }\n        else {\n            const explicit = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.getExplicitRuleType)(rule);\n            return explicit !== null && explicit !== void 0 ? explicit : rule.name;\n        }\n    }\n    parse(input, options = {}) {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\n        if (!ruleMethod) {\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\n        }\n        const result = ruleMethod.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        this.lexerResult = undefined;\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            lexerReport: lexerResult.report,\n            parserErrors: this.wrapper.errors\n        };\n    }\n    startImplementation($type, implementation) {\n        return (args) => {\n            // Only create a new AST node in case the calling rule is not a fragment rule\n            const createNode = !this.isRecording() && $type !== undefined;\n            if (createNode) {\n                const node = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result;\n            try {\n                result = implementation(args);\n            }\n            catch (err) {\n                result = undefined;\n            }\n            if (result === undefined && createNode) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n    extractHiddenTokens(token) {\n        const hiddenTokens = this.lexerResult.hidden;\n        if (!hiddenTokens.length) {\n            return [];\n        }\n        const offset = token.startOffset;\n        for (let i = 0; i < hiddenTokens.length; i++) {\n            const token = hiddenTokens[i];\n            if (token.startOffset > offset) {\n                return hiddenTokens.splice(0, i);\n            }\n        }\n        return hiddenTokens.splice(0, hiddenTokens.length);\n    }\n    consume(idx, tokenType, feature) {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const hiddenTokens = this.extractHiddenTokens(token);\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            }\n            else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    isValidToken(token) {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        let cstNode;\n        if (!this.isRecording() && !fragment) {\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\n            // This is intended, as fragment rules only enrich the current AST node\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n    performSubruleAssignment(result, feature, cstNode) {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        }\n        else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            }\n            else if (typeof result === 'object' && result) {\n                const object = this.assignWithoutOverride(result, current);\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n    action($type, action) {\n        if (!this.isRecording()) {\n            let last = this.current;\n            if (action.feature && action.operator) {\n                last = this.construct();\n                this.nodeBuilder.removeNode(last.$cstNode);\n                const node = this.nodeBuilder.buildCompositeNode(action);\n                node.content.push(last.$cstNode);\n                const newItem = { $type };\n                this.stack.push(newItem);\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n            else {\n                last.$type = $type;\n            }\n        }\n    }\n    construct() {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.linkContentToContainer)(obj);\n        this.nodeBuilder.construct(obj);\n        this.stack.pop();\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        }\n        else {\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.assignMandatoryProperties)(this.astReflection, obj);\n        }\n        return obj;\n    }\n    getAssignment(feature) {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getContainerOfType)(feature, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isCrossReference)(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature);\n    }\n    assign(operator, feature, value, cstNode, isCrossRef) {\n        const obj = this.current;\n        let item;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        }\n        else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n    assignWithoutOverride(target, source) {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            }\n            else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        // The target was parsed from a unassigned subrule\n        // After the subrule construction, it received a cst node\n        // This CST node will later be overriden by the cst node builder\n        // To prevent references to stale AST nodes in the CST,\n        // we need to remove the reference here\n        const targetCstNode = target.$cstNode;\n        if (targetCstNode) {\n            targetCstNode.astNode = undefined;\n            target.$cstNode = undefined;\n        }\n        return target;\n    }\n    get definitionErrors() {\n        return this.wrapper.definitionErrors;\n    }\n}\nclass AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n    buildNotAllInputParsedMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n    buildNoViableAltMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n    buildEarlyExitMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n}\nclass LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage({ expected, actual }) {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n    buildNotAllInputParsedMessage({ firstRedundant }) {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\nclass LangiumCompletionParser extends AbstractLangiumParser {\n    constructor() {\n        super(...arguments);\n        this.tokens = [];\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    action() {\n        // NOOP\n    }\n    construct() {\n        // NOOP\n        return undefined;\n    }\n    parse(input) {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n    rule(rule, impl) {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    resetState() {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    startImplementation(implementation) {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            }\n            finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n    removeUnexpectedElements() {\n        this.elementStack.splice(this.stackSize);\n    }\n    keepStackSize() {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n    resetStackSize(size) {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n    consume(idx, tokenType, feature) {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n    before(element) {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n    after(element) {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n    get currIdx() {\n        return this.wrapper.currIdx;\n    }\n}\nconst defaultConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends chevrotain__WEBPACK_IMPORTED_MODULE_0__.EmbeddedActionsParser {\n    constructor(tokens, config) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, Object.assign(Object.assign(Object.assign({}, defaultConfig), { lookaheadStrategy: useDefaultLookahead\n                ? new chevrotain__WEBPACK_IMPORTED_MODULE_0__.LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__.LLStarLookaheadStrategy({\n                    // If validations are skipped, don't log the lookahead warnings\n                    logging: config.skipValidations ? () => { } : undefined\n                }) }), config));\n    }\n    get IS_RECORDING() {\n        return this.RECORDING_PHASE;\n    }\n    DEFINE_RULE(name, impl) {\n        return this.RULE(name, impl);\n    }\n    wrapSelfAnalysis() {\n        this.performSelfAnalysis();\n    }\n    wrapConsume(idx, tokenType) {\n        return this.consume(idx, tokenType);\n    }\n    wrapSubrule(idx, rule, args) {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n    wrapOr(idx, choices) {\n        this.or(idx, choices);\n    }\n    wrapOption(idx, callback) {\n        this.option(idx, callback);\n    }\n    wrapMany(idx, callback) {\n        this.many(idx, callback);\n    }\n    wrapAtLeastOne(idx, callback) {\n        this.atLeastOne(idx, callback);\n    }\n}\n//# sourceMappingURL=langium-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TOKENIZE_OPTIONS: () => (/* binding */ DEFAULT_TOKENIZE_OPTIONS),\n/* harmony export */   DefaultLexer: () => (/* binding */ DefaultLexer),\n/* harmony export */   DefaultLexerErrorMessageProvider: () => (/* binding */ DefaultLexerErrorMessageProvider),\n/* harmony export */   isIMultiModeLexerDefinition: () => (/* binding */ isIMultiModeLexerDefinition),\n/* harmony export */   isTokenTypeArray: () => (/* binding */ isTokenTypeArray),\n/* harmony export */   isTokenTypeDictionary: () => (/* binding */ isTokenTypeDictionary)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nclass DefaultLexerErrorMessageProvider {\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\n    }\n    buildUnableToPopLexerModeMessage(token) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\n    }\n}\nconst DEFAULT_TOKENIZE_OPTIONS = { mode: 'full' };\nclass DefaultLexer {\n    constructor(services) {\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\n        this.tokenBuilder = services.parser.TokenBuilder;\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.chevrotainLexer = new chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer(lexerTokens, {\n            positionTracking: 'full',\n            skipValidations: production,\n            errorMessageProvider: this.errorMessageProvider\n        });\n    }\n    get definition() {\n        return this.tokenTypes;\n    }\n    tokenize(text, _options = DEFAULT_TOKENIZE_OPTIONS) {\n        var _a, _b, _c;\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: (_a = chevrotainResult.groups.hidden) !== null && _a !== void 0 ? _a : [],\n            report: (_c = (_b = this.tokenBuilder).flushLexingReport) === null || _c === void 0 ? void 0 : _c.call(_b, text)\n        };\n    }\n    toTokenTypeDictionary(buildTokens) {\n        if (isTokenTypeDictionary(buildTokens))\n            return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nfunction isTokenTypeArray(tokenVocabulary) {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nfunction isIMultiModeLexerDefinition(tokenVocabulary) {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nfunction isTokenTypeDictionary(tokenVocabulary) {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n//# sourceMappingURL=lexer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sZXhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpRjtBQUMxRTtBQUNQO0FBQ0EsZUFBZSxpRUFBeUI7QUFDeEM7QUFDQTtBQUNBLGVBQWUsaUVBQXlCO0FBQ3hDO0FBQ0E7QUFDTyxtQ0FBbUM7QUFDbkM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw2Q0FBZTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sZXhlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBMZXhlciBhcyBDaGV2cm90YWluTGV4ZXIsIGRlZmF1bHRMZXhlckVycm9yUHJvdmlkZXIgfSBmcm9tICdjaGV2cm90YWluJztcbmV4cG9ydCBjbGFzcyBEZWZhdWx0TGV4ZXJFcnJvck1lc3NhZ2VQcm92aWRlciB7XG4gICAgYnVpbGRVbmV4cGVjdGVkQ2hhcmFjdGVyc01lc3NhZ2UoZnVsbFRleHQsIHN0YXJ0T2Zmc2V0LCBsZW5ndGgsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZGVmYXVsdExleGVyRXJyb3JQcm92aWRlci5idWlsZFVuZXhwZWN0ZWRDaGFyYWN0ZXJzTWVzc2FnZShmdWxsVGV4dCwgc3RhcnRPZmZzZXQsIGxlbmd0aCwgbGluZSwgY29sdW1uKTtcbiAgICB9XG4gICAgYnVpbGRVbmFibGVUb1BvcExleGVyTW9kZU1lc3NhZ2UodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMZXhlckVycm9yUHJvdmlkZXIuYnVpbGRVbmFibGVUb1BvcExleGVyTW9kZU1lc3NhZ2UodG9rZW4pO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RPS0VOSVpFX09QVElPTlMgPSB7IG1vZGU6ICdmdWxsJyB9O1xuZXhwb3J0IGNsYXNzIERlZmF1bHRMZXhlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2VQcm92aWRlciA9IHNlcnZpY2VzLnBhcnNlci5MZXhlckVycm9yTWVzc2FnZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLnRva2VuQnVpbGRlciA9IHNlcnZpY2VzLnBhcnNlci5Ub2tlbkJ1aWxkZXI7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHRoaXMudG9rZW5CdWlsZGVyLmJ1aWxkVG9rZW5zKHNlcnZpY2VzLkdyYW1tYXIsIHtcbiAgICAgICAgICAgIGNhc2VJbnNlbnNpdGl2ZTogc2VydmljZXMuTGFuZ3VhZ2VNZXRhRGF0YS5jYXNlSW5zZW5zaXRpdmVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9rZW5UeXBlcyA9IHRoaXMudG9Ub2tlblR5cGVEaWN0aW9uYXJ5KHRva2Vucyk7XG4gICAgICAgIGNvbnN0IGxleGVyVG9rZW5zID0gaXNUb2tlblR5cGVEaWN0aW9uYXJ5KHRva2VucykgPyBPYmplY3QudmFsdWVzKHRva2VucykgOiB0b2tlbnM7XG4gICAgICAgIGNvbnN0IHByb2R1Y3Rpb24gPSBzZXJ2aWNlcy5MYW5ndWFnZU1ldGFEYXRhLm1vZGUgPT09ICdwcm9kdWN0aW9uJztcbiAgICAgICAgdGhpcy5jaGV2cm90YWluTGV4ZXIgPSBuZXcgQ2hldnJvdGFpbkxleGVyKGxleGVyVG9rZW5zLCB7XG4gICAgICAgICAgICBwb3NpdGlvblRyYWNraW5nOiAnZnVsbCcsXG4gICAgICAgICAgICBza2lwVmFsaWRhdGlvbnM6IHByb2R1Y3Rpb24sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VQcm92aWRlcjogdGhpcy5lcnJvck1lc3NhZ2VQcm92aWRlclxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuVHlwZXM7XG4gICAgfVxuICAgIHRva2VuaXplKHRleHQsIF9vcHRpb25zID0gREVGQVVMVF9UT0tFTklaRV9PUFRJT05TKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBjaGV2cm90YWluUmVzdWx0ID0gdGhpcy5jaGV2cm90YWluTGV4ZXIudG9rZW5pemUodGV4dCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2tlbnM6IGNoZXZyb3RhaW5SZXN1bHQudG9rZW5zLFxuICAgICAgICAgICAgZXJyb3JzOiBjaGV2cm90YWluUmVzdWx0LmVycm9ycyxcbiAgICAgICAgICAgIGhpZGRlbjogKF9hID0gY2hldnJvdGFpblJlc3VsdC5ncm91cHMuaGlkZGVuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSxcbiAgICAgICAgICAgIHJlcG9ydDogKF9jID0gKF9iID0gdGhpcy50b2tlbkJ1aWxkZXIpLmZsdXNoTGV4aW5nUmVwb3J0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYiwgdGV4dClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdG9Ub2tlblR5cGVEaWN0aW9uYXJ5KGJ1aWxkVG9rZW5zKSB7XG4gICAgICAgIGlmIChpc1Rva2VuVHlwZURpY3Rpb25hcnkoYnVpbGRUb2tlbnMpKVxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkVG9rZW5zO1xuICAgICAgICBjb25zdCB0b2tlbnMgPSBpc0lNdWx0aU1vZGVMZXhlckRlZmluaXRpb24oYnVpbGRUb2tlbnMpID8gT2JqZWN0LnZhbHVlcyhidWlsZFRva2Vucy5tb2RlcykuZmxhdCgpIDogYnVpbGRUb2tlbnM7XG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiByZXNbdG9rZW4ubmFtZV0gPSB0b2tlbik7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gVG9rZW5Wb2NhYnVsYXJ5IGlzIFRva2VuVHlwZSBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlblR5cGVBcnJheSh0b2tlblZvY2FidWxhcnkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0b2tlblZvY2FidWxhcnkpICYmICh0b2tlblZvY2FidWxhcnkubGVuZ3RoID09PSAwIHx8ICduYW1lJyBpbiB0b2tlblZvY2FidWxhcnlbMF0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gVG9rZW5Wb2NhYnVsYXJ5IGlzIElNdWx0aU1vZGVMZXhlckRlZmluaXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSU11bHRpTW9kZUxleGVyRGVmaW5pdGlvbih0b2tlblZvY2FidWxhcnkpIHtcbiAgICByZXR1cm4gdG9rZW5Wb2NhYnVsYXJ5ICYmICdtb2RlcycgaW4gdG9rZW5Wb2NhYnVsYXJ5ICYmICdkZWZhdWx0TW9kZScgaW4gdG9rZW5Wb2NhYnVsYXJ5O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgY2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gVG9rZW5Wb2NhYnVsYXJ5IGlzIFRva2VuVHlwZURpY3Rpb25hcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVG9rZW5UeXBlRGljdGlvbmFyeSh0b2tlblZvY2FidWxhcnkpIHtcbiAgICByZXR1cm4gIWlzVG9rZW5UeXBlQXJyYXkodG9rZW5Wb2NhYnVsYXJ5KSAmJiAhaXNJTXVsdGlNb2RlTGV4ZXJEZWZpbml0aW9uKHRva2VuVm9jYWJ1bGFyeSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZXhlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nfunction createParser(grammar, parser, tokens) {\n    const parserContext = {\n        parser,\n        tokens,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\nfunction buildRules(parserContext, grammar) {\n    const reachable = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAllReachableRules)(grammar, false);\n    const parserRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(grammar.rules).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\n    }\n}\nfunction buildElement(ctx, element, ignoreGuard = false) {\n    let method;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(element)) {\n        method = buildKeyword(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAction)(element)) {\n        method = buildAction(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAssignment)(element)) {\n        method = buildElement(ctx, element.terminal);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isCrossReference)(element)) {\n        method = buildCrossReference(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(element)) {\n        method = buildRuleCall(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(element)) {\n        method = buildAlternatives(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        method = buildGroup(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isEndOfFile)(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, chevrotain__WEBPACK_IMPORTED_MODULE_0__.EOF, element);\n    }\n    else {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\nfunction buildAction(ctx, action) {\n    const actionType = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(action);\n    return () => ctx.parser.action(actionType, action);\n}\nfunction buildRuleCall(ctx, ruleCall) {\n    const rule = ruleCall.rule.ref;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(rule)) {\n        const idx = ctx.subrule++;\n        const fragment = rule.fragment;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    }\n    else if (!rule) {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\n    }\n    else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(rule);\n    }\n}\nfunction buildRuleCallPredicate(rule, namedArgs) {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\nfunction buildPredicate(condition) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isDisjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isConjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isNegation)(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParameterReference)(condition)) {\n        const name = condition.parameter.ref.name;\n        return (args) => args !== undefined && args[name] === true;\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isBooleanLiteral)(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(condition);\n}\nfunction buildAlternatives(ctx, alternatives) {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    }\n    else {\n        const methods = [];\n        for (const element of alternatives.elements) {\n            const predicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\nfunction buildUnorderedGroup(ctx, group) {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods = [];\n    for (const element of group.elements) {\n        const predicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n    const orIdx = ctx.or++;\n    const idFunc = (groupIdx, lParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key);\n                if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        }\n        else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\nfunction buildGroup(ctx, group) {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\nfunction getGuardCondition(element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\nfunction buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.findNameAssignment)(crossRef.type.ref);\n        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(terminal.rule.ref)) {\n        // The terminal is a data type rule here. Everything else will result in a validation error.\n        const rule = terminal.rule.ref;\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\nfunction buildKeyword(ctx, keyword) {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\nfunction wrap(ctx, guard, method, cardinality) {\n    const gate = guard && buildPredicate(guard);\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return method;\n        }\n    }\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    }\n    else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(cardinality);\n    }\n}\nfunction getRule(ctx, element) {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.parser.getRule(name);\n    if (!rule)\n        throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\nfunction getRuleName(ctx, element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(element)) {\n        return element.name;\n    }\n    else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element);\n    }\n    else {\n        let item = element;\n        let parent = item.$container;\n        let ruleName = element.$type;\n        while (!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(parent)) {\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(parent)) {\n                const index = parent.elements.indexOf(item);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container;\n        }\n        const rule = parent;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\nfunction getToken(ctx, name) {\n    const token = ctx.tokens[name];\n    if (!token)\n        throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n//# sourceMappingURL=parser-builder-base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTokenBuilder: () => (/* binding */ DefaultTokenBuilder)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultTokenBuilder {\n    constructor() {\n        /**\n         * The list of diagnostics stored during the lexing process of a single text.\n         */\n        this.diagnostics = [];\n    }\n    buildTokens(grammar, options) {\n        const reachableRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAllReachableRules)(grammar, false));\n        const terminalTokens = this.buildTerminalTokens(reachableRules);\n        const tokens = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(pattern)) {\n                tokens.unshift(terminalToken);\n            }\n            else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flushLexingReport(text) {\n        return { diagnostics: this.popDiagnostics() };\n    }\n    popDiagnostics() {\n        const diagnostics = [...this.diagnostics];\n        this.diagnostics = [];\n        return diagnostics;\n    }\n    buildTerminalTokens(rules) {\n        return rules.filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n    buildTerminalToken(terminal) {\n        const regex = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.terminalRegex)(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n        };\n        if (typeof pattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(regex) ? chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n    requiresCustomPattern(regex) {\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\n            // Unicode and dotall regexes are not supported by Chevrotain.\n            return true;\n        }\n        else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    regexPatternFunction(regex) {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n    buildKeywordTokens(rules, terminalTokens, options) {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isParserRule)\n            .flatMap(rule => (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.streamAllContents)(rule).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));\n    }\n    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\n        const tokenType = {\n            name: keyword.value,\n            PATTERN: keywordPattern,\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n        if (typeof keywordPattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        return tokenType;\n    }\n    buildKeywordPattern(keyword, caseInsensitive) {\n        return caseInsensitive ?\n            new RegExp((0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCaseInsensitivePattern)(keyword.value)) :\n            keyword.value;\n    }\n    findLongerAlt(keyword, terminalTokens) {\n        return terminalTokens.reduce((longerAlts, token) => {\n            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;\n            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.partialMatches)('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n//# sourceMappingURL=token-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultValueConverter: () => (/* binding */ DefaultValueConverter),\n/* harmony export */   ValueConverter: () => (/* binding */ ValueConverter)\n/* harmony export */ });\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultValueConverter {\n    convert(input, cstNode) {\n        let feature = cstNode.grammarSource;\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCrossReference)(feature)) {\n            feature = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCrossReferenceTerminal)(feature);\n        }\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall)(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    runConverter(rule, input, cstNode) {\n        var _a;\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch ((_a = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRuleType)(rule)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\nvar ValueConverter;\n(function (ValueConverter) {\n    function convertString(input) {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            }\n            else {\n                result += c;\n            }\n        }\n        return result;\n    }\n    ValueConverter.convertString = convertString;\n    function convertEscapeCharacter(char) {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n    function convertID(input) {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        }\n        else {\n            return input;\n        }\n    }\n    ValueConverter.convertID = convertID;\n    function convertInt(input) {\n        return parseInt(input);\n    }\n    ValueConverter.convertInt = convertInt;\n    function convertBigint(input) {\n        return BigInt(input);\n    }\n    ValueConverter.convertBigint = convertBigint;\n    function convertDate(input) {\n        return new Date(input);\n    }\n    ValueConverter.convertDate = convertDate;\n    function convertNumber(input) {\n        return Number(input);\n    }\n    ValueConverter.convertNumber = convertNumber;\n    function convertBoolean(input) {\n        return input.toLowerCase() === 'true';\n    }\n    ValueConverter.convertBoolean = convertBoolean;\n})(ValueConverter || (ValueConverter = {}));\n//# sourceMappingURL=value-converter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci92YWx1ZS1jb252ZXJ0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkU7QUFDTTtBQUM1RTtBQUNQO0FBQ0E7QUFDQSxZQUFZLDZFQUFnQjtBQUM1QixzQkFBc0Isa0ZBQXlCO0FBQy9DO0FBQ0EsWUFBWSx1RUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvRUFBVztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QyIsInNvdXJjZXMiOlsiL1VzZXJzL0Vib290aC9hZ2VudF9jX2ZyYW1ld29yay9zcmMvcmVhbHRpbWVfY2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9wYXJzZXIvdmFsdWUtY29udmVydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGlzQ3Jvc3NSZWZlcmVuY2UsIGlzUnVsZUNhbGwgfSBmcm9tICcuLi9sYW5ndWFnZXMvZ2VuZXJhdGVkL2FzdC5qcyc7XG5pbXBvcnQgeyBnZXRDcm9zc1JlZmVyZW5jZVRlcm1pbmFsLCBnZXRSdWxlVHlwZSB9IGZyb20gJy4uL3V0aWxzL2dyYW1tYXItdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRWYWx1ZUNvbnZlcnRlciB7XG4gICAgY29udmVydChpbnB1dCwgY3N0Tm9kZSkge1xuICAgICAgICBsZXQgZmVhdHVyZSA9IGNzdE5vZGUuZ3JhbW1hclNvdXJjZTtcbiAgICAgICAgaWYgKGlzQ3Jvc3NSZWZlcmVuY2UoZmVhdHVyZSkpIHtcbiAgICAgICAgICAgIGZlYXR1cmUgPSBnZXRDcm9zc1JlZmVyZW5jZVRlcm1pbmFsKGZlYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1J1bGVDYWxsKGZlYXR1cmUpKSB7XG4gICAgICAgICAgICBjb25zdCBydWxlID0gZmVhdHVyZS5ydWxlLnJlZjtcbiAgICAgICAgICAgIGlmICghcnVsZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBjc3Qgbm9kZSB3YXMgbm90IHBhcnNlZCBieSBhIHJ1bGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydW5Db252ZXJ0ZXIocnVsZSwgaW5wdXQsIGNzdE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHJ1bkNvbnZlcnRlcihydWxlLCBpbnB1dCwgY3N0Tm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN3aXRjaCAocnVsZS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ0lOVCc6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0SW50KGlucHV0KTtcbiAgICAgICAgICAgIGNhc2UgJ1NUUklORyc6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0U3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgIGNhc2UgJ0lEJzogcmV0dXJuIFZhbHVlQ29udmVydGVyLmNvbnZlcnRJRChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICgoX2EgPSBnZXRSdWxlVHlwZShydWxlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0TnVtYmVyKGlucHV0KTtcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gVmFsdWVDb252ZXJ0ZXIuY29udmVydEJvb2xlYW4oaW5wdXQpO1xuICAgICAgICAgICAgY2FzZSAnYmlnaW50JzogcmV0dXJuIFZhbHVlQ29udmVydGVyLmNvbnZlcnRCaWdpbnQoaW5wdXQpO1xuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0RGF0ZShpbnB1dCk7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgdmFyIFZhbHVlQ29udmVydGVyO1xuKGZ1bmN0aW9uIChWYWx1ZUNvbnZlcnRlcikge1xuICAgIGZ1bmN0aW9uIGNvbnZlcnRTdHJpbmcoaW5wdXQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGlucHV0Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGlucHV0LmNoYXJBdChpKTtcbiAgICAgICAgICAgIGlmIChjID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjMSA9IGlucHV0LmNoYXJBdCgrK2kpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBjb252ZXJ0RXNjYXBlQ2hhcmFjdGVyKGMxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnRTdHJpbmcgPSBjb252ZXJ0U3RyaW5nO1xuICAgIGZ1bmN0aW9uIGNvbnZlcnRFc2NhcGVDaGFyYWN0ZXIoY2hhcikge1xuICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ2InOiByZXR1cm4gJ1xcYic7XG4gICAgICAgICAgICBjYXNlICdmJzogcmV0dXJuICdcXGYnO1xuICAgICAgICAgICAgY2FzZSAnbic6IHJldHVybiAnXFxuJztcbiAgICAgICAgICAgIGNhc2UgJ3InOiByZXR1cm4gJ1xccic7XG4gICAgICAgICAgICBjYXNlICd0JzogcmV0dXJuICdcXHQnO1xuICAgICAgICAgICAgY2FzZSAndic6IHJldHVybiAnXFx2JztcbiAgICAgICAgICAgIGNhc2UgJzAnOiByZXR1cm4gJ1xcMCc7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gY2hhcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjb252ZXJ0SUQoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJBdCgwKSA9PT0gJ14nKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnRJRCA9IGNvbnZlcnRJRDtcbiAgICBmdW5jdGlvbiBjb252ZXJ0SW50KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCk7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnRJbnQgPSBjb252ZXJ0SW50O1xuICAgIGZ1bmN0aW9uIGNvbnZlcnRCaWdpbnQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludChpbnB1dCk7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnRCaWdpbnQgPSBjb252ZXJ0QmlnaW50O1xuICAgIGZ1bmN0aW9uIGNvbnZlcnREYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShpbnB1dCk7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnREYXRlID0gY29udmVydERhdGU7XG4gICAgZnVuY3Rpb24gY29udmVydE51bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKGlucHV0KTtcbiAgICB9XG4gICAgVmFsdWVDb252ZXJ0ZXIuY29udmVydE51bWJlciA9IGNvbnZlcnROdW1iZXI7XG4gICAgZnVuY3Rpb24gY29udmVydEJvb2xlYW4oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgICB9XG4gICAgVmFsdWVDb252ZXJ0ZXIuY29udmVydEJvb2xlYW4gPSBjb252ZXJ0Qm9vbGVhbjtcbn0pKFZhbHVlQ29udmVydGVyIHx8IChWYWx1ZUNvbnZlcnRlciA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWx1ZS1jb252ZXJ0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLinker: () => (/* binding */ DefaultLinker)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../workspace/documents.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nconst ref_resolving = Symbol('ref_resolving');\nclass DefaultLinker {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n    async link(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(document.parseResult.value)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamReferences)(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n    doLink(refInfo, document) {\n        var _a;\n        const ref = refInfo.reference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            ref._ref = ref_resolving;\n            try {\n                const description = this.getCandidate(refInfo);\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                    ref._ref = description;\n                }\n                else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);\n                    }\n                    else {\n                        // Try to load the target AST node later using the already provided description\n                        ref._ref = undefined;\n                    }\n                }\n            }\n            catch (err) {\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\n                const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n                ref._ref = Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}` });\n            }\n            // Add the reference to the document's array of references\n            // Only add if the reference has been not been resolved earlier\n            // Otherwise we end up with duplicates\n            // See also implementation of `buildReference`\n            document.references.push(ref);\n        }\n    }\n    unlink(document) {\n        for (const ref of document.references) {\n            delete ref._ref;\n            delete ref._nodeDescription;\n        }\n        document.references = [];\n    }\n    getCandidate(refInfo) {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);\n    }\n    buildReference(node, property, refNode, refText) {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference = {\n            $refNode: refNode,\n            $refText: refText,\n            get ref() {\n                var _a;\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                }\n                else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNodeDescription)(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                }\n                else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    this._ref = ref_resolving;\n                    const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(node).$document;\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return this._ref = undefined;\n                    }\n                    this._ref = (_a = refData.node) !== null && _a !== void 0 ? _a : refData.error;\n                    this._nodeDescription = refData.descr;\n                    document === null || document === void 0 ? void 0 : document.references.push(this);\n                }\n                else if (this._ref === ref_resolving) {\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\n                }\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n    getLinkedNode(refInfo) {\n        var _a;\n        try {\n            const description = this.getCandidate(refInfo);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error: this.createLinkingError(refInfo, description)\n                };\n            }\n        }\n        catch (err) {\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\n            const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n            return {\n                error: Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}` })\n            };\n        }\n    }\n    loadAstNode(nodeDescription) {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n    createLinkingError(refInfo, targetDescription) {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(refInfo.container).$document;\n        if (document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return Object.assign(Object.assign({}, refInfo), { message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`, targetDescription });\n    }\n}\n//# sourceMappingURL=linker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameProvider: () => (/* binding */ DefaultNameProvider),\n/* harmony export */   isNamed: () => (/* binding */ isNamed)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nfunction isNamed(node) {\n    return typeof node.name === 'string';\n}\nclass DefaultNameProvider {\n    getName(node) {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n    getNameNode(node) {\n        return (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findNodeForProperty)(node.$cstNode, 'name');\n    }\n}\n//# sourceMappingURL=name-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvbmFtZS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dFO0FBQ3pEO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRFQUFtQjtBQUNsQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9uYW1lLXByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGZpbmROb2RlRm9yUHJvcGVydHkgfSBmcm9tICcuLi91dGlscy9ncmFtbWFyLXV0aWxzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkKG5vZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgY2xhc3MgRGVmYXVsdE5hbWVQcm92aWRlciB7XG4gICAgZ2V0TmFtZShub2RlKSB7XG4gICAgICAgIGlmIChpc05hbWVkKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldE5hbWVOb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmROb2RlRm9yUHJvcGVydHkobm9kZS4kY3N0Tm9kZSwgJ25hbWUnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1lLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultReferences: () => (/* binding */ DefaultReferences)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultReferences {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    findDeclaration(sourceCstNode) {\n        if (sourceCstNode) {\n            const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findAssignment)(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = nodeElem[assignment.feature];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(reference)) {\n                    return reference.ref;\n                }\n                else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.isChildNode)(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n    findDeclarationNode(sourceCstNode) {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;\n        }\n        return undefined;\n    }\n    findReferences(targetNode, options) {\n        const refs = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(refs);\n    }\n    getReferenceToSelf(targetNode) {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDocument)(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.toDocumentSegment)(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=references.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvcmVmZXJlbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUNYO0FBQ0k7QUFDbUI7QUFDM0I7QUFDSztBQUMxQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHVFQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0REFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0REFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxnRUFBVztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQseURBQVE7QUFDcEU7QUFDQTtBQUNBLGVBQWUsd0RBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0VBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHNFQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0Vib290aC9hZ2VudF9jX2ZyYW1ld29yay9zcmMvcmVhbHRpbWVfY2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9yZWZlcmVuY2VzL3JlZmVyZW5jZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgZmluZEFzc2lnbm1lbnQgfSBmcm9tICcuLi91dGlscy9ncmFtbWFyLXV0aWxzLmpzJztcbmltcG9ydCB7IGlzUmVmZXJlbmNlIH0gZnJvbSAnLi4vc3ludGF4LXRyZWUuanMnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgaXNDaGlsZE5vZGUsIHRvRG9jdW1lbnRTZWdtZW50IH0gZnJvbSAnLi4vdXRpbHMvY3N0LXV0aWxzLmpzJztcbmltcG9ydCB7IHN0cmVhbSB9IGZyb20gJy4uL3V0aWxzL3N0cmVhbS5qcyc7XG5pbXBvcnQgeyBVcmlVdGlscyB9IGZyb20gJy4uL3V0aWxzL3VyaS11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFJlZmVyZW5jZXMge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMubmFtZVByb3ZpZGVyID0gc2VydmljZXMucmVmZXJlbmNlcy5OYW1lUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSBzZXJ2aWNlcy5zaGFyZWQud29ya3NwYWNlLkluZGV4TWFuYWdlcjtcbiAgICAgICAgdGhpcy5ub2RlTG9jYXRvciA9IHNlcnZpY2VzLndvcmtzcGFjZS5Bc3ROb2RlTG9jYXRvcjtcbiAgICB9XG4gICAgZmluZERlY2xhcmF0aW9uKHNvdXJjZUNzdE5vZGUpIHtcbiAgICAgICAgaWYgKHNvdXJjZUNzdE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGFzc2lnbm1lbnQgPSBmaW5kQXNzaWdubWVudChzb3VyY2VDc3ROb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVFbGVtID0gc291cmNlQ3N0Tm9kZS5hc3ROb2RlO1xuICAgICAgICAgICAgaWYgKGFzc2lnbm1lbnQgJiYgbm9kZUVsZW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2UgPSBub2RlRWxlbVthc3NpZ25tZW50LmZlYXR1cmVdO1xuICAgICAgICAgICAgICAgIGlmIChpc1JlZmVyZW5jZShyZWZlcmVuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2UucmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWZlcmVuY2UocmVmKSAmJiByZWYuJHJlZk5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiByZWYuJHJlZk5vZGUub2Zmc2V0IDw9IHNvdXJjZUNzdE5vZGUub2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmVmLiRyZWZOb2RlLmVuZCA+PSBzb3VyY2VDc3ROb2RlLmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWYucmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGVFbGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZU5vZGUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lTm9kZShub2RlRWxlbSk7XG4gICAgICAgICAgICAgICAgLy8gT25seSByZXR1cm4gdGhlIHRhcmdldGVkIG5vZGUgaW4gY2FzZSB0aGUgdGFyZ2V0ZWQgY3N0IG5vZGUgaXMgdGhlIG5hbWUgbm9kZSBvciBwYXJ0IG9mIGl0XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVOb2RlICYmIChuYW1lTm9kZSA9PT0gc291cmNlQ3N0Tm9kZSB8fCBpc0NoaWxkTm9kZShzb3VyY2VDc3ROb2RlLCBuYW1lTm9kZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlRWxlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZmluZERlY2xhcmF0aW9uTm9kZShzb3VyY2VDc3ROb2RlKSB7XG4gICAgICAgIGNvbnN0IGFzdE5vZGUgPSB0aGlzLmZpbmREZWNsYXJhdGlvbihzb3VyY2VDc3ROb2RlKTtcbiAgICAgICAgaWYgKGFzdE5vZGUgPT09IG51bGwgfHwgYXN0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXN0Tm9kZS4kY3N0Tm9kZSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMubmFtZVByb3ZpZGVyLmdldE5hbWVOb2RlKGFzdE5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldE5vZGUgIT09IG51bGwgJiYgdGFyZ2V0Tm9kZSAhPT0gdm9pZCAwID8gdGFyZ2V0Tm9kZSA6IGFzdE5vZGUuJGNzdE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZmluZFJlZmVyZW5jZXModGFyZ2V0Tm9kZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCByZWZzID0gW107XG4gICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVEZWNsYXJhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcmVmID0gdGhpcy5nZXRSZWZlcmVuY2VUb1NlbGYodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluZGV4UmVmZXJlbmNlcyA9IHRoaXMuaW5kZXguZmluZEFsbFJlZmVyZW5jZXModGFyZ2V0Tm9kZSwgdGhpcy5ub2RlTG9jYXRvci5nZXRBc3ROb2RlUGF0aCh0YXJnZXROb2RlKSk7XG4gICAgICAgIGlmIChvcHRpb25zLmRvY3VtZW50VXJpKSB7XG4gICAgICAgICAgICBpbmRleFJlZmVyZW5jZXMgPSBpbmRleFJlZmVyZW5jZXMuZmlsdGVyKHJlZiA9PiBVcmlVdGlscy5lcXVhbHMocmVmLnNvdXJjZVVyaSwgb3B0aW9ucy5kb2N1bWVudFVyaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJlZnMucHVzaCguLi5pbmRleFJlZmVyZW5jZXMpO1xuICAgICAgICByZXR1cm4gc3RyZWFtKHJlZnMpO1xuICAgIH1cbiAgICBnZXRSZWZlcmVuY2VUb1NlbGYodGFyZ2V0Tm9kZSkge1xuICAgICAgICBjb25zdCBuYW1lTm9kZSA9IHRoaXMubmFtZVByb3ZpZGVyLmdldE5hbWVOb2RlKHRhcmdldE5vZGUpO1xuICAgICAgICBpZiAobmFtZU5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IGdldERvY3VtZW50KHRhcmdldE5vZGUpO1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMubm9kZUxvY2F0b3IuZ2V0QXN0Tm9kZVBhdGgodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNvdXJjZVVyaTogZG9jLnVyaSxcbiAgICAgICAgICAgICAgICBzb3VyY2VQYXRoOiBwYXRoLFxuICAgICAgICAgICAgICAgIHRhcmdldFVyaTogZG9jLnVyaSxcbiAgICAgICAgICAgICAgICB0YXJnZXRQYXRoOiBwYXRoLFxuICAgICAgICAgICAgICAgIHNlZ21lbnQ6IHRvRG9jdW1lbnRTZWdtZW50KG5hbWVOb2RlKSxcbiAgICAgICAgICAgICAgICBsb2NhbDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZmVyZW5jZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeComputation: () => (/* binding */ DefaultScopeComputation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nclass DefaultScopeComputation {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n    async computeExports(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCancelled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode, document, children = _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamContents, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const exports = [];\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    exportNode(node, exports, document) {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n    async computeLocalScopes(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const rootNode = document.parseResult.value;\n        const scopes = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__.MultiMap();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rootNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    processNode(node, document, scopes) {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n}\n//# sourceMappingURL=scope-computation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtY29tcHV0YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZEO0FBQ2E7QUFDdkI7QUFDVztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxxRUFBaUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhDQUE4QyxlQUFlLDBCQUEwQjtBQUN2RyxzRkFBc0YsZUFBZTtBQUNyRywrQ0FBK0Msa0JBQWtCO0FBQ2pFO0FBQ0EscUVBQXFFLDBCQUEwQjtBQUMvRjtBQUNBLCtDQUErQyxrQkFBa0IscUNBQXFDLGdCQUFnQiwyRkFBMkYsaUJBQWlCO0FBQ2xPO0FBQ0E7QUFDQSwyQkFBMkIsOENBQThDO0FBQ3pFO0FBQ0EsaUVBQWlFLCtEQUFjLGdCQUFnQixxRUFBaUI7QUFDaEg7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBFQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELHFFQUFpQjtBQUN0RTtBQUNBLDJCQUEyQiwyREFBUTtBQUNuQztBQUNBLDJCQUEyQixzRUFBaUI7QUFDNUMsa0JBQWtCLDBFQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtY29tcHV0YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEtMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlbiB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBzdHJlYW1BbGxDb250ZW50cywgc3RyZWFtQ29udGVudHMgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgTXVsdGlNYXAgfSBmcm9tICcuLi91dGlscy9jb2xsZWN0aW9ucy5qcyc7XG5pbXBvcnQgeyBpbnRlcnJ1cHRBbmRDaGVjayB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UtdXRpbHMuanMnO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBzY29wZSBjb21wdXRhdGlvbiBjcmVhdGVzIGFuZCBjb2xsZWN0ZXMgZGVzY3JpcHRpb25zIG9mIHRoZSBBU1Qgbm9kZXMgdG8gYmUgZXhwb3J0ZWQgaW50byB0aGVcbiAqIF9nbG9iYWxfIHNjb3BlIGZyb20gdGhlIGdpdmVuIGRvY3VtZW50LiBCeSBkZWZhdWx0IHRob3NlIGFyZSB0aGUgZG9jdW1lbnQncyByb290IEFTVCBub2RlIGFuZCBpdHMgZGlyZWN0bHlcbiAqIGNvbnRhaW5lZCBjaGlsZCBub2Rlcy5cbiAqXG4gKiBCZXNpZGVzLCBpdCBnYXRoZXJzIGFsbCBBU1Qgbm9kZXMgdGhhdCBoYXZlIGEgbmFtZSAoYWNjb3JkaW5nIHRvIHRoZSBgTmFtZVByb3ZpZGVyYCBzZXJ2aWNlKSBhbmQgaW5jbHVkZXMgdGhlbVxuICogaW4gdGhlIGxvY2FsIHNjb3BlIG9mIHRoZWlyIHBhcnRpY3VsYXIgY29udGFpbmVyIG5vZGVzLiBBcyBhIHJlc3VsdCwgZm9yIGV2ZXJ5IGNyb3NzLXJlZmVyZW5jZSBpbiB0aGUgQVNULFxuICogdGFyZ2V0IGVsZW1lbnRzIGZyb20gdGhlIHNhbWUgbGV2ZWwgKHNpYmxpbmdzKSBhbmQgZnVydGhlciB1cCB0b3dhcmRzIHRoZSByb290IChwYXJlbnRzIGFuZCBzaWJsaW5ncyBvZiBwYXJlbnRzKVxuICogYXJlIHZpc2libGUuIEVsZW1lbnRzIGJlaW5nIG5lc3RlZCBpbnNpZGUgbG93ZXIgbGV2ZWxzIChjaGlsZHJlbiwgY2hpbGRyZW4gb2Ygc2libGluZ3MgYW5kIHBhcmVudHMnIHNpYmxpbmdzKVxuICogYXJlIF9pbnZpc2libGVfIGJ5IGRlZmF1bHQsIGJ1dCB0aGF0IGNhbiBiZSBjaGFuZ2VkIGJ5IGN1c3RvbWl6aW5nIHRoaXMgc2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRTY29wZUNvbXB1dGF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9ucyA9IHNlcnZpY2VzLndvcmtzcGFjZS5Bc3ROb2RlRGVzY3JpcHRpb25Qcm92aWRlcjtcbiAgICB9XG4gICAgYXN5bmMgY29tcHV0ZUV4cG9ydHMoZG9jdW1lbnQsIGNhbmNlbFRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlRXhwb3J0c0Zvck5vZGUoZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWUsIGRvY3VtZW50LCB1bmRlZmluZWQsIGNhbmNlbFRva2VuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB7QGxpbmsgQXN0Tm9kZURlc2NyaXB0aW9uIEFzdE5vZGVEZXNjcmlwdGlvbnN9IGZvciB0aGUgZ2l2ZW4ge0BsaW5rIEFzdE5vZGUgcGFyZW50Tm9kZX0gYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBUaGUgbGlzdCBvZiBjaGlsZHJlbiB0byBiZSBjb25zaWRlcmVkIGlzIGRldGVybWluZWQgYnkgdGhlIGZ1bmN0aW9uIHBhcmFtZXRlciB7QGxpbmsgY2hpbGRyZW59LlxuICAgICAqIEJ5IGRlZmF1bHQgb25seSB0aGUgZGlyZWN0IGNoaWxkcmVuIG9mIHtAbGluayBwYXJlbnROb2RlfSBhcmUgdmlzaXRlZCwgbmVzdGVkIG5vZGVzIGFyZSBub3QgZXhwb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyZW50Tm9kZSBBU1Qgbm9kZSB0byBiZSBleHBvcnRlZCwgaS5lLiwgb2Ygd2hpY2ggYW4ge0BsaW5rIEFzdE5vZGVEZXNjcmlwdGlvbn0gc2hhbGwgYmUgYWRkZWQgdG8gdGhlIHJldHVybmVkIGxpc3QuXG4gICAgICogQHBhcmFtIGRvY3VtZW50IFRoZSBkb2N1bWVudCBjb250YWluaW5nIHRoZSBBU1Qgbm9kZSB0byBiZSBleHBvcnRlZC5cbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gQSBmdW5jdGlvbiBjYWxsZWQgd2l0aCB7QGxpbmsgcGFyZW50Tm9kZX0gYXMgc2luZ2xlIGFyZ3VtZW50IGFuZCByZXR1cm5pbmcgYW4ge0BsaW5rIEl0ZXJhYmxlfSBzdXBwbHlpbmcgdGhlIGNoaWxkcmVuIHRvIGJlIHZpc2l0ZWQsIHdoaWNoIG11c3QgYmUgZGlyZWN0bHkgb3IgdHJhbnNpdGl2ZWx5IGNvbnRhaW5lZCBpbiB7QGxpbmsgcGFyZW50Tm9kZX0uXG4gICAgICogQHBhcmFtIGNhbmNlbFRva2VuIEluZGljYXRlcyB3aGVuIHRvIGNhbmNlbCB0aGUgY3VycmVudCBvcGVyYXRpb24uXG4gICAgICogQHRocm93cyBgT3BlcmF0aW9uQ2FuY2VsbGVkYCBpZiBhIHVzZXIgYWN0aW9uIG9jY3VycyBkdXJpbmcgZXhlY3V0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgbGlzdCBvZiB7QGxpbmsgQXN0Tm9kZURlc2NyaXB0aW9uIEFzdE5vZGVEZXNjcmlwdGlvbnN9IHRvIGJlIHB1Ymxpc2hlZCB0byBpbmRleC5cbiAgICAgKi9cbiAgICBhc3luYyBjb21wdXRlRXhwb3J0c0Zvck5vZGUocGFyZW50Tm9kZSwgZG9jdW1lbnQsIGNoaWxkcmVuID0gc3RyZWFtQ29udGVudHMsIGNhbmNlbFRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICBjb25zdCBleHBvcnRzID0gW107XG4gICAgICAgIHRoaXMuZXhwb3J0Tm9kZShwYXJlbnROb2RlLCBleHBvcnRzLCBkb2N1bWVudCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGlsZHJlbihwYXJlbnROb2RlKSkge1xuICAgICAgICAgICAgYXdhaXQgaW50ZXJydXB0QW5kQ2hlY2soY2FuY2VsVG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5leHBvcnROb2RlKG5vZGUsIGV4cG9ydHMsIGRvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwb3J0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgc2luZ2xlIG5vZGUgdG8gdGhlIGxpc3Qgb2YgZXhwb3J0cyBpZiBpdCBoYXMgYSBuYW1lLiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgaG93XG4gICAgICogc3ltYm9scyBhcmUgZXhwb3J0ZWQsIGUuZy4gYnkgbW9kaWZ5aW5nIHRoZWlyIGV4cG9ydGVkIG5hbWUuXG4gICAgICovXG4gICAgZXhwb3J0Tm9kZShub2RlLCBleHBvcnRzLCBkb2N1bWVudCkge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZShub2RlKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGV4cG9ydHMucHVzaCh0aGlzLmRlc2NyaXB0aW9ucy5jcmVhdGVEZXNjcmlwdGlvbihub2RlLCBuYW1lLCBkb2N1bWVudCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNvbXB1dGVMb2NhbFNjb3Blcyhkb2N1bWVudCwgY2FuY2VsVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWU7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBNdWx0aU1hcCgpO1xuICAgICAgICAvLyBIZXJlIHdlIG5hdmlnYXRlIHRoZSBmdWxsIEFTVCAtIGxvY2FsIHNjb3BlcyBzaGFsbCBiZSBhdmFpbGFibGUgaW4gdGhlIHdob2xlIGRvY3VtZW50XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBzdHJlYW1BbGxDb250ZW50cyhyb290Tm9kZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IGludGVycnVwdEFuZENoZWNrKGNhbmNlbFRva2VuKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc05vZGUobm9kZSwgZG9jdW1lbnQsIHNjb3Blcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjb3BlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyBhIHNpbmdsZSBub2RlIGR1cmluZyBzY29wZXMgY29tcHV0YXRpb24uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG1ha2VzIHRoZSBub2RlIHZpc2libGVcbiAgICAgKiBpbiB0aGUgc3VidHJlZSBvZiBpdHMgY29udGFpbmVyIChpZiB0aGUgbm9kZSBoYXMgYSBuYW1lKS4gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIHRoaXMsXG4gICAgICogZS5nLiBieSBpbmNyZWFzaW5nIHRoZSB2aXNpYmlsaXR5IHRvIGEgaGlnaGVyIGxldmVsIGluIHRoZSBBU1QuXG4gICAgICovXG4gICAgcHJvY2Vzc05vZGUobm9kZSwgZG9jdW1lbnQsIHNjb3Blcykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub2RlLiRjb250YWluZXI7XG4gICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lKG5vZGUpO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBzY29wZXMuYWRkKGNvbnRhaW5lciwgdGhpcy5kZXNjcmlwdGlvbnMuY3JlYXRlRGVzY3JpcHRpb24obm9kZSwgbmFtZSwgZG9jdW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjb3BlLWNvbXB1dGF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js":
/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeProvider: () => (/* binding */ DefaultScopeProvider)\n/* harmony export */ });\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\nclass DefaultScopeProvider {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.WorkspaceCache(services.shared);\n    }\n    getScope(context) {\n        const scopes = [];\n        const referenceType = this.reflection.getReferenceType(context);\n        const precomputed = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(allDescriptions).filter(desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n        let result = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    createScope(elements, outerScope, options) {\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements), outerScope, options);\n    }\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    createScopeForNodes(elements, outerScope, options) {\n        const s = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope(s, outerScope, options);\n    }\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    getGlobalScope(referenceType, _context) {\n        return this.globalScopeCache.get(referenceType, () => new _scope_js__WEBPACK_IMPORTED_MODULE_3__.MapScope(this.indexManager.allElements(referenceType)));\n    }\n}\n//# sourceMappingURL=scope-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21EO0FBQ0M7QUFDUjtBQUNTO0FBQzlDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw2REFBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnRUFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdEQUFNO0FBQ3RDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQVcsQ0FBQyx3REFBTTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0RBQU07QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxtQkFBbUIsa0RBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSwrQ0FBUTtBQUMxRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9zY29wZS1wcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMS0yMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IE1hcFNjb3BlLCBTdHJlYW1TY29wZSB9IGZyb20gJy4vc2NvcGUuanMnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgc3RyZWFtIH0gZnJvbSAnLi4vdXRpbHMvc3RyZWFtLmpzJztcbmltcG9ydCB7IFdvcmtzcGFjZUNhY2hlIH0gZnJvbSAnLi4vdXRpbHMvY2FjaGluZy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFNjb3BlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMucmVmbGVjdGlvbiA9IHNlcnZpY2VzLnNoYXJlZC5Bc3RSZWZsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9ucyA9IHNlcnZpY2VzLndvcmtzcGFjZS5Bc3ROb2RlRGVzY3JpcHRpb25Qcm92aWRlcjtcbiAgICAgICAgdGhpcy5pbmRleE1hbmFnZXIgPSBzZXJ2aWNlcy5zaGFyZWQud29ya3NwYWNlLkluZGV4TWFuYWdlcjtcbiAgICAgICAgdGhpcy5nbG9iYWxTY29wZUNhY2hlID0gbmV3IFdvcmtzcGFjZUNhY2hlKHNlcnZpY2VzLnNoYXJlZCk7XG4gICAgfVxuICAgIGdldFNjb3BlKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gW107XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVR5cGUgPSB0aGlzLnJlZmxlY3Rpb24uZ2V0UmVmZXJlbmNlVHlwZShjb250ZXh0KTtcbiAgICAgICAgY29uc3QgcHJlY29tcHV0ZWQgPSBnZXREb2N1bWVudChjb250ZXh0LmNvbnRhaW5lcikucHJlY29tcHV0ZWRTY29wZXM7XG4gICAgICAgIGlmIChwcmVjb21wdXRlZCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gY29udGV4dC5jb250YWluZXI7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsRGVzY3JpcHRpb25zID0gcHJlY29tcHV0ZWQuZ2V0KGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsRGVzY3JpcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVzLnB1c2goc3RyZWFtKGFsbERlc2NyaXB0aW9ucykuZmlsdGVyKGRlc2MgPT4gdGhpcy5yZWZsZWN0aW9uLmlzU3VidHlwZShkZXNjLnR5cGUsIHJlZmVyZW5jZVR5cGUpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuJGNvbnRhaW5lcjtcbiAgICAgICAgICAgIH0gd2hpbGUgKGN1cnJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5nZXRHbG9iYWxTY29wZShyZWZlcmVuY2VUeXBlLCBjb250ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNjb3Blcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5jcmVhdGVTY29wZShzY29wZXNbaV0sIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2NvcGUgZm9yIHRoZSBnaXZlbiBjb2xsZWN0aW9uIG9mIEFTVCBub2RlIGRlc2NyaXB0aW9ucy5cbiAgICAgKi9cbiAgICBjcmVhdGVTY29wZShlbGVtZW50cywgb3V0ZXJTY29wZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbVNjb3BlKHN0cmVhbShlbGVtZW50cyksIG91dGVyU2NvcGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzY29wZSBmb3IgdGhlIGdpdmVuIGNvbGxlY3Rpb24gb2YgQVNUIG5vZGVzLCB3aGljaCBuZWVkIHRvIGJlIHRyYW5zZm9ybWVkIGludG8gcmVzcGVjdGl2ZVxuICAgICAqIGRlc2NyaXB0aW9ucyBmaXJzdC4gVGhpcyBpcyBkb25lIHVzaW5nIHRoZSBgTmFtZVByb3ZpZGVyYCBhbmQgYEFzdE5vZGVEZXNjcmlwdGlvblByb3ZpZGVyYCBzZXJ2aWNlcy5cbiAgICAgKi9cbiAgICBjcmVhdGVTY29wZUZvck5vZGVzKGVsZW1lbnRzLCBvdXRlclNjb3BlLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHMgPSBzdHJlYW0oZWxlbWVudHMpLm1hcChlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lKGUpO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvbnMuY3JlYXRlRGVzY3JpcHRpb24oZSwgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KS5ub25OdWxsYWJsZSgpO1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbVNjb3BlKHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBnbG9iYWwgc2NvcGUgZmlsdGVyZWQgZm9yIHRoZSBnaXZlbiByZWZlcmVuY2UgdHlwZS5cbiAgICAgKi9cbiAgICBnZXRHbG9iYWxTY29wZShyZWZlcmVuY2VUeXBlLCBfY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxTY29wZUNhY2hlLmdldChyZWZlcmVuY2VUeXBlLCAoKSA9PiBuZXcgTWFwU2NvcGUodGhpcy5pbmRleE1hbmFnZXIuYWxsRWxlbWVudHMocmVmZXJlbmNlVHlwZSkpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_SCOPE: () => (/* binding */ EMPTY_SCOPE),\n/* harmony export */   MapScope: () => (/* binding */ MapScope),\n/* harmony export */   StreamScope: () => (/* binding */ StreamScope)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nclass StreamScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n    }\n    getAllElements() {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        }\n        else {\n            return this.elements;\n        }\n    }\n    getElement(name) {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\nclass MapScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = new Map();\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n    getElement(name) {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n    getAllElements() {\n        let elementStream = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n}\nconst EMPTY_SCOPE = {\n    getElement() {\n        return undefined;\n    },\n    getAllElements() {\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STREAM;\n    }\n};\n//# sourceMappingURL=scope.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0RBQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZSwwREFBWTtBQUMzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9zY29wZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBFTVBUWV9TVFJFQU0sIHN0cmVhbSB9IGZyb20gJy4uL3V0aWxzL3N0cmVhbS5qcyc7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHNjb3BlIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIGEgYFN0cmVhbWAuIEl0IGhhcyBhbiBvcHRpb25hbCBfb3V0ZXIgc2NvcGVfIGRlc2NyaWJpbmdcbiAqIHRoZSBuZXh0IGxldmVsIG9mIGVsZW1lbnRzLCB3aGljaCBhcmUgcXVlcmllZCB3aGVuIGEgdGFyZ2V0IGVsZW1lbnQgaXMgbm90IGZvdW5kIGluIHRoZSBzdHJlYW0gcHJvdmlkZWRcbiAqIHRvIHRoaXMgc2NvcGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJlYW1TY29wZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICAgIHRoaXMub3V0ZXJTY29wZSA9IG91dGVyU2NvcGU7XG4gICAgICAgIHRoaXMuY2FzZUluc2Vuc2l0aXZlID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhc2VJbnNlbnNpdGl2ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgfVxuICAgIGdldEFsbEVsZW1lbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy5jb25jYXQodGhpcy5vdXRlclNjb3BlLmdldEFsbEVsZW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RWxlbWVudChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsID0gdGhpcy5jYXNlSW5zZW5zaXRpdmVcbiAgICAgICAgICAgID8gdGhpcy5lbGVtZW50cy5maW5kKGUgPT4gZS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIDogdGhpcy5lbGVtZW50cy5maW5kKGUgPT4gZS5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgaWYgKGxvY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3V0ZXJTY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0ZXJTY29wZS5nZXRFbGVtZW50KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1hcFNjb3BlIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50cywgb3V0ZXJTY29wZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY2FzZUluc2Vuc2l0aXZlID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhc2VJbnNlbnNpdGl2ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY2FzZUluc2Vuc2l0aXZlXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50Lm5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIDogZWxlbWVudC5uYW1lO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZXQobmFtZSwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRlclNjb3BlID0gb3V0ZXJTY29wZTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IHRoaXMuY2FzZUluc2Vuc2l0aXZlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDogbmFtZTtcbiAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzLmVsZW1lbnRzLmdldChsb2NhbE5hbWUpO1xuICAgICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vdXRlclNjb3BlLmdldEVsZW1lbnQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0QWxsRWxlbWVudHMoKSB7XG4gICAgICAgIGxldCBlbGVtZW50U3RyZWFtID0gc3RyZWFtKHRoaXMuZWxlbWVudHMudmFsdWVzKCkpO1xuICAgICAgICBpZiAodGhpcy5vdXRlclNjb3BlKSB7XG4gICAgICAgICAgICBlbGVtZW50U3RyZWFtID0gZWxlbWVudFN0cmVhbS5jb25jYXQodGhpcy5vdXRlclNjb3BlLmdldEFsbEVsZW1lbnRzKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50U3RyZWFtO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBFTVBUWV9TQ09QRSA9IHtcbiAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgZ2V0QWxsRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiBFTVBUWV9TVFJFQU07XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjb3BlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultHydrator: () => (/* binding */ DefaultHydrator)\n/* harmony export */ });\n/* harmony import */ var _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/cst-node-builder.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultHydrator {\n    constructor(services) {\n        this.grammarElementIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.tokenTypeIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n    dehydrate(result) {\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            parserErrors: result.parserErrors.map(e => (Object.assign(Object.assign({}, e), { message: e.message }))),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n    dehydrateLexerReport(lexerReport) {\n        // By default, lexer reports are serializable\n        return lexerReport;\n    }\n    createDehyrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    dehydrateAstNode(node, context) {\n        const obj = context.astNodes.get(node);\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            }\n            else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n    dehydrateReference(reference, context) {\n        const obj = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n    dehydrateCstNode(node, context) {\n        const cstNode = context.cstNodes.get(node);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isRootCstNode)(node)) {\n            cstNode.fullText = node.fullText;\n        }\n        else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLeafCstNode)(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n    hydrate(result) {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context)\n        };\n    }\n    createHydrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)) {\n            astNodes.set(astNode, {});\n        }\n        let root;\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)) {\n                let cst;\n                if ('fullText' in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.RootCstNodeImpl(cstNode.fullText);\n                    root = cst;\n                }\n                else if ('content' in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.CompositeCstNodeImpl();\n                }\n                else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    hydrateAstNode(node, context) {\n        const astNode = context.astNodes.get(node);\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            }\n            else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n    setParent(node, parent) {\n        node.$container = parent;\n        return node;\n    }\n    hydrateReference(reference, node, name, context) {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode), reference.$refText);\n    }\n    hydrateCstNode(cstNode, context, num = 0) {\n        const cstNodeObj = context.cstNodes.get(cstNode);\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n    hydrateCstLeafNode(cstNode) {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.LeafCstNodeImpl(offset, length, {\n            start: {\n                line: startLine,\n                character: startColumn\n            },\n            end: {\n                line: endLine,\n                character: endColumn\n            }\n        }, tokenType, hidden);\n        return node;\n    }\n    getTokenType(name) {\n        return this.lexer.definition[name];\n    }\n    getGrammarElementId(node) {\n        if (!node) {\n            return undefined;\n        }\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n    getGrammarElement(id) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        return element;\n    }\n    createGrammarElementIdMap() {\n        let id = 0;\n        for (const element of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(this.grammar)) {\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__.isAbstractElement)(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n}\n//# sourceMappingURL=hydrator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultJsonSerializer: () => (/* binding */ DefaultJsonSerializer),\n/* harmony export */   isAstNodeWithComment: () => (/* binding */ isAstNodeWithComment)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\nfunction isAstNodeWithComment(node) {\n    return typeof node.$comment === 'string';\n}\nfunction isIntermediateReference(obj) {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\nclass DefaultJsonSerializer {\n    constructor(services) {\n        /** The set of AstNode properties to be ignored by the serializer. */\n        this.ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    serialize(node, options) {\n        const serializeOptions = options !== null && options !== void 0 ? options : {};\n        const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;\n        const defaultReplacer = (key, value) => this.replacer(key, value, serializeOptions);\n        const replacer = specificReplacer ? (key, value) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n        try {\n            this.currentDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n            return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);\n        }\n        finally {\n            this.currentDocument = undefined;\n        }\n    }\n    deserialize(content, options) {\n        const deserializeOptions = options !== null && options !== void 0 ? options : {};\n        const root = JSON.parse(content);\n        this.linkNode(root, root, deserializeOptions);\n        return root;\n    }\n    replacer(key, value, { refText, sourceText, textRegions, comments, uriConverter }) {\n        var _a, _b, _c, _d;\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    }\n                    else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                };\n            }\n            else {\n                return {\n                    $error: (_b = (_a = value.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'Could not resolve reference',\n                    $refText\n                };\n            }\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(value)) {\n            let astNode = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));\n                if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = (_c = this.currentDocument) === null || _c === void 0 ? void 0 : _c.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                astNode.$sourceText = (_d = value.$cstNode) === null || _d === void 0 ? void 0 : _d.text;\n            }\n            if (comments) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    astNode.$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode !== null && astNode !== void 0 ? astNode : value;\n        }\n        else {\n            return value;\n        }\n    }\n    addAstNodeRegionWithAssignmentsTo(node) {\n        const createDocumentSegment = cstNode => ({\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        });\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments = textRegion.assignments = {};\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.findNodesForProperty)(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n            return node;\n        }\n        return undefined;\n    }\n    linkNode(node, root, options, container, containerProperty, containerIndex) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(element)) {\n                        this.linkNode(element, root, options, node, propertyName, index);\n                    }\n                }\n            }\n            else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(item)) {\n                this.linkNode(item, root, options, node, propertyName);\n            }\n        }\n        const mutable = node;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n    reviveReference(container, property, root, reference, options) {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText !== null && refText !== void 0 ? refText : '',\n                    ref\n                };\n            }\n            else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref = {\n                $refText: refText !== null && refText !== void 0 ? refText : ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        }\n        else {\n            return undefined;\n        }\n    }\n    getRefNode(root, uri, uriConverter) {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        }\n        catch (err) {\n            return String(err);\n        }\n    }\n}\n//# sourceMappingURL=json-serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultServiceRegistry: () => (/* binding */ DefaultServiceRegistry)\n/* harmony export */ });\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nclass DefaultServiceRegistry {\n    /**\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\n     */\n    get map() {\n        return this.fileExtensionMap;\n    }\n    constructor(services) {\n        this.languageIdMap = new Map();\n        this.fileExtensionMap = new Map();\n        this.textDocuments = services === null || services === void 0 ? void 0 : services.workspace.TextDocuments;\n    }\n    register(language) {\n        const data = language.LanguageMetaData;\n        for (const ext of data.fileExtensions) {\n            if (this.fileExtensionMap.has(ext)) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\n            }\n            this.fileExtensionMap.set(ext, language);\n        }\n        this.languageIdMap.set(data.languageId, language);\n        if (this.languageIdMap.size === 1) {\n            this.singleton = language;\n        }\n        else {\n            this.singleton = undefined;\n        }\n    }\n    getServices(uri) {\n        var _a, _b;\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.languageIdMap.size === 0) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const languageId = (_b = (_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(uri)) === null || _b === void 0 ? void 0 : _b.languageId;\n        if (languageId !== undefined) {\n            const services = this.languageIdMap.get(languageId);\n            if (services) {\n                return services;\n            }\n        }\n        const ext = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__.UriUtils.extname(uri);\n        const services = this.fileExtensionMap.get(ext);\n        if (!services) {\n            if (languageId) {\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\n            }\n            else {\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n            }\n        }\n        return services;\n    }\n    hasServices(uri) {\n        try {\n            this.getServices(uri);\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    get all() {\n        return Array.from(this.languageIdMap.values());\n    }\n}\n//# sourceMappingURL=service-registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3NlcnZpY2UtcmVnaXN0cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELEtBQUssd0RBQXdELGdCQUFnQjtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlEQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGdHQUFnRyxJQUFJLGtCQUFrQixXQUFXO0FBQ2pJO0FBQ0E7QUFDQSxnR0FBZ0csSUFBSTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvc2VydmljZS1yZWdpc3RyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBVcmlVdGlscyB9IGZyb20gJy4vdXRpbHMvdXJpLXV0aWxzLmpzJztcbi8qKlxuICogR2VuZXJpYyByZWdpc3RyeSBmb3IgTGFuZ2l1bSBzZXJ2aWNlcywgYnV0IGNhcGFibGUgb2YgYmVpbmcgdXNlZCB3aXRoIGV4dGVuZGluZyBzZXJ2aWNlIHNldHMgYXMgd2VsbCAoc3VjaCBhcyB0aGUgbHNwLWNvbXBsZXRlIExhbmdpdW1Db3JlU2VydmljZXMgc2V0KVxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNlcnZpY2VSZWdpc3RyeSB7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBuZXcgYGZpbGVFeHRlbnNpb25NYXBgIChvciBgbGFuZ3VhZ2VJZE1hcGApIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0IG1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUV4dGVuc2lvbk1hcDtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5sYW5ndWFnZUlkTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb25NYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMudGV4dERvY3VtZW50cyA9IHNlcnZpY2VzID09PSBudWxsIHx8IHNlcnZpY2VzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXJ2aWNlcy53b3Jrc3BhY2UuVGV4dERvY3VtZW50cztcbiAgICB9XG4gICAgcmVnaXN0ZXIobGFuZ3VhZ2UpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGxhbmd1YWdlLkxhbmd1YWdlTWV0YURhdGE7XG4gICAgICAgIGZvciAoY29uc3QgZXh0IG9mIGRhdGEuZmlsZUV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVFeHRlbnNpb25NYXAuaGFzKGV4dCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoZSBmaWxlIGV4dGVuc2lvbiAke2V4dH0gaXMgdXNlZCBieSBtdWx0aXBsZSBsYW5ndWFnZXMuIEl0IGlzIG5vdyBhc3NpZ25lZCB0byAnJHtkYXRhLmxhbmd1YWdlSWR9Jy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlsZUV4dGVuc2lvbk1hcC5zZXQoZXh0LCBsYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYW5ndWFnZUlkTWFwLnNldChkYXRhLmxhbmd1YWdlSWQsIGxhbmd1YWdlKTtcbiAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VJZE1hcC5zaXplID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZXRvbiA9IGxhbmd1YWdlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaW5nbGV0b24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0U2VydmljZXModXJpKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLnNpbmdsZXRvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGV0b247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VJZE1hcC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzZXJ2aWNlIHJlZ2lzdHJ5IGlzIGVtcHR5LiBVc2UgYHJlZ2lzdGVyYCB0byByZWdpc3RlciB0aGUgc2VydmljZXMgb2YgYSBsYW5ndWFnZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYW5ndWFnZUlkID0gKF9iID0gKF9hID0gdGhpcy50ZXh0RG9jdW1lbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0KHVyaSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sYW5ndWFnZUlkO1xuICAgICAgICBpZiAobGFuZ3VhZ2VJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlcyA9IHRoaXMubGFuZ3VhZ2VJZE1hcC5nZXQobGFuZ3VhZ2VJZCk7XG4gICAgICAgICAgICBpZiAoc2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ID0gVXJpVXRpbHMuZXh0bmFtZSh1cmkpO1xuICAgICAgICBjb25zdCBzZXJ2aWNlcyA9IHRoaXMuZmlsZUV4dGVuc2lvbk1hcC5nZXQoZXh0KTtcbiAgICAgICAgaWYgKCFzZXJ2aWNlcykge1xuICAgICAgICAgICAgaWYgKGxhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzZXJ2aWNlIHJlZ2lzdHJ5IGNvbnRhaW5zIG5vIHNlcnZpY2VzIGZvciB0aGUgZXh0ZW5zaW9uICcke2V4dH0nIGZvciBsYW5ndWFnZSAnJHtsYW5ndWFnZUlkfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzZXJ2aWNlIHJlZ2lzdHJ5IGNvbnRhaW5zIG5vIHNlcnZpY2VzIGZvciB0aGUgZXh0ZW5zaW9uICcke2V4dH0nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXJ2aWNlcztcbiAgICB9XG4gICAgaGFzU2VydmljZXModXJpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmdldFNlcnZpY2VzKHVyaSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYWxsKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmxhbmd1YWdlSWRNYXAudmFsdWVzKCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2UtcmVnaXN0cnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractAstReflection: () => (/* binding */ AbstractAstReflection),\n/* harmony export */   isAstNode: () => (/* binding */ isAstNode),\n/* harmony export */   isAstNodeDescription: () => (/* binding */ isAstNodeDescription),\n/* harmony export */   isCompositeCstNode: () => (/* binding */ isCompositeCstNode),\n/* harmony export */   isLeafCstNode: () => (/* binding */ isLeafCstNode),\n/* harmony export */   isLinkingError: () => (/* binding */ isLinkingError),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isRootCstNode: () => (/* binding */ isRootCstNode)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nfunction isAstNode(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$type === 'string';\n}\nfunction isReference(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$refText === 'string';\n}\nfunction isAstNodeDescription(obj) {\n    return typeof obj === 'object' && obj !== null\n        && typeof obj.name === 'string'\n        && typeof obj.type === 'string'\n        && typeof obj.path === 'string';\n}\nfunction isLinkingError(obj) {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode(obj.container)\n        && isReference(obj.reference)\n        && typeof obj.message === 'string';\n}\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nclass AbstractAstReflection {\n    constructor() {\n        this.subtypes = {};\n        this.allSubtypes = {};\n    }\n    isInstance(node, type) {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n    isSubtype(subtype, supertype) {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n    getAllSubTypes(type) {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        }\n        else {\n            const allTypes = this.getAllTypes();\n            const types = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\nfunction isCompositeCstNode(node) {\n    return typeof node === 'object' && node !== null && Array.isArray(node.content);\n}\nfunction isLeafCstNode(node) {\n    return typeof node === 'object' && node !== null && typeof node.tokenType === 'object';\n}\nfunction isRootCstNode(node) {\n    return isCompositeCstNode(node) && typeof node.fullText === 'string';\n}\n//# sourceMappingURL=syntax-tree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3N5bnRheC10cmVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHFCQUFxQjtBQUMzRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3N5bnRheC10cmVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FzdE5vZGUob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqLiR0eXBlID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZmVyZW5jZShvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmouJHJlZlRleHQgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXN0Tm9kZURlc2NyaXB0aW9uKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGxcbiAgICAgICAgJiYgdHlwZW9mIG9iai5uYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2Ygb2JqLnR5cGUgPT09ICdzdHJpbmcnXG4gICAgICAgICYmIHR5cGVvZiBvYmoucGF0aCA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMaW5raW5nRXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbFxuICAgICAgICAmJiBpc0FzdE5vZGUob2JqLmNvbnRhaW5lcilcbiAgICAgICAgJiYgaXNSZWZlcmVuY2Uob2JqLnJlZmVyZW5jZSlcbiAgICAgICAgJiYgdHlwZW9mIG9iai5tZXNzYWdlID09PSAnc3RyaW5nJztcbn1cbi8qKlxuICogQW4gYWJzdHJhY3QgaW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBBc3RSZWZsZWN0aW9ufSBpbnRlcmZhY2UuXG4gKiBTZXJ2ZXMgdG8gY2FjaGUgc3VidHlwZSBjb21wdXRhdGlvbiByZXN1bHRzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgdGhyb3VnaG91dCBkaWZmZXJlbnQgcGFydHMgb2YgTGFuZ2l1bS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFic3RyYWN0QXN0UmVmbGVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3VidHlwZXMgPSB7fTtcbiAgICAgICAgdGhpcy5hbGxTdWJ0eXBlcyA9IHt9O1xuICAgIH1cbiAgICBpc0luc3RhbmNlKG5vZGUsIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGlzQXN0Tm9kZShub2RlKSAmJiB0aGlzLmlzU3VidHlwZShub2RlLiR0eXBlLCB0eXBlKTtcbiAgICB9XG4gICAgaXNTdWJ0eXBlKHN1YnR5cGUsIHN1cGVydHlwZSkge1xuICAgICAgICBpZiAoc3VidHlwZSA9PT0gc3VwZXJ0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmVzdGVkID0gdGhpcy5zdWJ0eXBlc1tzdWJ0eXBlXTtcbiAgICAgICAgaWYgKCFuZXN0ZWQpIHtcbiAgICAgICAgICAgIG5lc3RlZCA9IHRoaXMuc3VidHlwZXNbc3VidHlwZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGlzdGluZyA9IG5lc3RlZFtzdXBlcnR5cGVdO1xuICAgICAgICBpZiAoZXhpc3RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb21wdXRlSXNTdWJ0eXBlKHN1YnR5cGUsIHN1cGVydHlwZSk7XG4gICAgICAgICAgICBuZXN0ZWRbc3VwZXJ0eXBlXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0QWxsU3ViVHlwZXModHlwZSkge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuYWxsU3VidHlwZXNbdHlwZV07XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYWxsVHlwZXMgPSB0aGlzLmdldEFsbFR5cGVzKCk7XG4gICAgICAgICAgICBjb25zdCB0eXBlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwb3NzaWJsZVN1YlR5cGUgb2YgYWxsVHlwZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1N1YnR5cGUocG9zc2libGVTdWJUeXBlLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKHBvc3NpYmxlU3ViVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbGxTdWJ0eXBlc1t0eXBlXSA9IHR5cGVzO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9zaXRlQ3N0Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkobm9kZS5jb250ZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xlYWZDc3ROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGUgIT09IG51bGwgJiYgdHlwZW9mIG5vZGUudG9rZW5UeXBlID09PSAnb2JqZWN0Jztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Jvb3RDc3ROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gaXNDb21wb3NpdGVDc3ROb2RlKG5vZGUpICYmIHR5cGVvZiBub2RlLmZ1bGxUZXh0ID09PSAnc3RyaW5nJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bnRheC10cmVlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignMandatoryProperties: () => (/* binding */ assignMandatoryProperties),\n/* harmony export */   copyAstNode: () => (/* binding */ copyAstNode),\n/* harmony export */   findLocalReferences: () => (/* binding */ findLocalReferences),\n/* harmony export */   findRootNode: () => (/* binding */ findRootNode),\n/* harmony export */   getContainerOfType: () => (/* binding */ getContainerOfType),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   hasContainerOfType: () => (/* binding */ hasContainerOfType),\n/* harmony export */   linkContentToContainer: () => (/* binding */ linkContentToContainer),\n/* harmony export */   streamAllContents: () => (/* binding */ streamAllContents),\n/* harmony export */   streamAst: () => (/* binding */ streamAst),\n/* harmony export */   streamContents: () => (/* binding */ streamContents),\n/* harmony export */   streamReferences: () => (/* binding */ streamReferences)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nfunction linkContentToContainer(node) {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(item)) {\n                        item.$container = node;\n                        item.$containerProperty = name;\n                        item.$containerIndex = index;\n                    }\n                });\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                value.$container = node;\n                value.$containerProperty = name;\n            }\n        }\n    }\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nfunction getContainerOfType(node, typePredicate) {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nfunction hasContainerOfType(node, predicate) {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nfunction getDocument(node) {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result;\n}\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nfunction findRootNode(node) {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nfunction streamContents(node, options) {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options === null || options === void 0 ? void 0 : options.range;\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nfunction streamAllContents(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, node => streamContents(node, options));\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nfunction streamAst(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, () => []);\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\nfunction isAstNodeInRange(astNode, range) {\n    var _a;\n    if (!range) {\n        return true;\n    }\n    const nodeRange = (_a = astNode.$cstNode) === null || _a === void 0 ? void 0 : _a.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.inRange)(nodeRange, range);\n}\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nfunction streamReferences(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nfunction findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {\n    const refs = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)(refs);\n}\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nfunction assignMandatoryProperties(reflection, node) {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\nfunction copyDefaultValue(propertyType) {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    }\n    else {\n        return propertyType;\n    }\n}\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nfunction copyAstNode(node, buildReference) {\n    const copy = { $type: node.$type };\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                copy[name] = buildReference(copy, name, value.$refNode, value.$refText);\n            }\n            else if (Array.isArray(value)) {\n                const copiedArray = [];\n                for (const element of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                        copiedArray.push(buildReference(copy, name, element.$refNode, element.$refText));\n                    }\n                    else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            }\n            else {\n                copy[name] = value;\n            }\n        }\n    }\n    linkContentToContainer(copy);\n    return copy;\n}\n//# sourceMappingURL=ast-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextCache: () => (/* binding */ ContextCache),\n/* harmony export */   DisposableCache: () => (/* binding */ DisposableCache),\n/* harmony export */   DocumentCache: () => (/* binding */ DocumentCache),\n/* harmony export */   SimpleCache: () => (/* binding */ SimpleCache),\n/* harmony export */   WorkspaceCache: () => (/* binding */ WorkspaceCache)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass DisposableCache {\n    constructor() {\n        this.toDispose = [];\n        this.isDisposed = false;\n    }\n    onDispose(disposable) {\n        this.toDispose.push(disposable);\n    }\n    dispose() {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n}\nclass SimpleCache extends DisposableCache {\n    constructor() {\n        super(...arguments);\n        this.cache = new Map();\n    }\n    has(key) {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n    set(key, value) {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n    get(key, provider) {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(key) {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\nclass ContextCache extends DisposableCache {\n    constructor(converter) {\n        super();\n        this.cache = new Map();\n        this.converter = converter !== null && converter !== void 0 ? converter : (value => value);\n    }\n    has(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n    set(contextKey, key, value) {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n    get(contextKey, key, provider) {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n    clear(contextKey) {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        }\n        else {\n            this.cache.clear();\n        }\n    }\n    cacheForContext(contextKey) {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nclass DocumentCache extends ContextCache {\n    /**\n     * Creates a new document cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     *\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\n     * which triggers on all documents that have been affected by this change, assuming that the\n     * state is `DocumentState.Linked` or a later state.\n     */\n    constructor(sharedServices, state) {\n        super(uri => uri.toString());\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\n                this.clear(document.uri.toString());\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                for (const uri of deleted) { // react only on deleted documents\n                    this.clear(uri);\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\n                for (const uri of allUris) {\n                    this.clear(uri);\n                }\n            }));\n        }\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\n */\nclass WorkspaceCache extends SimpleCache {\n    /**\n     * Creates a new workspace cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     */\n    constructor(sharedServices, state) {\n        super();\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\n                this.clear();\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                if (deleted.length > 0) { // react only on deleted documents\n                    this.clear();\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n                this.clear();\n            }));\n        }\n    }\n}\n//# sourceMappingURL=caching.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2NhY2hpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvY2FjaGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50b0Rpc3Bvc2UgPSBbXTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIG9uRGlzcG9zZShkaXNwb3NhYmxlKSB7XG4gICAgICAgIHRoaXMudG9EaXNwb3NlLnB1c2goZGlzcG9zYWJsZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50b0Rpc3Bvc2UuZm9yRWFjaChkaXNwb3NhYmxlID0+IGRpc3Bvc2FibGUuZGlzcG9zZSgpKTtcbiAgICB9XG4gICAgdGhyb3dJZkRpc3Bvc2VkKCkge1xuICAgICAgICBpZiAodGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgY2FjaGUgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNpbXBsZUNhY2hlIGV4dGVuZHMgRGlzcG9zYWJsZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGdldChrZXksIHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwcm92aWRlcigpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbnRleHRDYWNoZSBleHRlbmRzIERpc3Bvc2FibGVDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoY29udmVydGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29udmVydGVyID0gY29udmVydGVyICE9PSBudWxsICYmIGNvbnZlcnRlciAhPT0gdm9pZCAwID8gY29udmVydGVyIDogKHZhbHVlID0+IHZhbHVlKTtcbiAgICB9XG4gICAgaGFzKGNvbnRleHRLZXksIGtleSkge1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZUZvckNvbnRleHQoY29udGV4dEtleSkuaGFzKGtleSk7XG4gICAgfVxuICAgIHNldChjb250ZXh0S2V5LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIHRoaXMuY2FjaGVGb3JDb250ZXh0KGNvbnRleHRLZXkpLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0KGNvbnRleHRLZXksIGtleSwgcHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgY29uc3QgY29udGV4dENhY2hlID0gdGhpcy5jYWNoZUZvckNvbnRleHQoY29udGV4dEtleSk7XG4gICAgICAgIGlmIChjb250ZXh0Q2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0Q2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGNvbnRleHRDYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShjb250ZXh0S2V5LCBrZXkpIHtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVGb3JDb250ZXh0KGNvbnRleHRLZXkpLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBjbGVhcihjb250ZXh0S2V5KSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgIGlmIChjb250ZXh0S2V5KSB7XG4gICAgICAgICAgICBjb25zdCBtYXBLZXkgPSB0aGlzLmNvbnZlcnRlcihjb250ZXh0S2V5KTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKG1hcEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FjaGVGb3JDb250ZXh0KGNvbnRleHRLZXkpIHtcbiAgICAgICAgY29uc3QgbWFwS2V5ID0gdGhpcy5jb252ZXJ0ZXIoY29udGV4dEtleSk7XG4gICAgICAgIGxldCBkb2N1bWVudENhY2hlID0gdGhpcy5jYWNoZS5nZXQobWFwS2V5KTtcbiAgICAgICAgaWYgKCFkb2N1bWVudENhY2hlKSB7XG4gICAgICAgICAgICBkb2N1bWVudENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQobWFwS2V5LCBkb2N1bWVudENhY2hlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnRDYWNoZTtcbiAgICB9XG59XG4vKipcbiAqIEV2ZXJ5IGtleS92YWx1ZSBwYWlyIGluIHRoaXMgY2FjaGUgaXMgc2NvcGVkIHRvIGEgZG9jdW1lbnQuXG4gKiBJZiB0aGlzIGRvY3VtZW50IGlzIGNoYW5nZWQgb3IgZGVsZXRlZCwgYWxsIGFzc29jaWF0ZWQga2V5L3ZhbHVlIHBhaXJzIGFyZSBkZWxldGVkLlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRDYWNoZSBleHRlbmRzIENvbnRleHRDYWNoZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBkb2N1bWVudCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaGFyZWRTZXJ2aWNlcyBTZXJ2aWNlIGNvbnRhaW5lciBpbnN0YW5jZSB0byBob29rIGludG8gZG9jdW1lbnQgbGlmZWN5Y2xlIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gc3RhdGUgT3B0aW9uYWwgZG9jdW1lbnQgc3RhdGUgb24gd2hpY2ggdGhlIGNhY2hlIHNob3VsZCBldmljdC5cbiAgICAgKiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjYWNoZSB3aWxsIGV2aWN0IG9uIGBEb2N1bWVudEJ1aWxkZXIjb25VcGRhdGVgLlxuICAgICAqICpEZWxldGVkKiBkb2N1bWVudHMgYXJlIGNvbnNpZGVyZWQgaW4gYm90aCBjYXNlcy5cbiAgICAgKlxuICAgICAqIFByb3ZpZGluZyBhIHN0YXRlIGhlcmUgd2lsbCB1c2UgYERvY3VtZW50QnVpbGRlciNvbkRvY3VtZW50UGhhc2VgIGluc3RlYWQsXG4gICAgICogd2hpY2ggdHJpZ2dlcnMgb24gYWxsIGRvY3VtZW50cyB0aGF0IGhhdmUgYmVlbiBhZmZlY3RlZCBieSB0aGlzIGNoYW5nZSwgYXNzdW1pbmcgdGhhdCB0aGVcbiAgICAgKiBzdGF0ZSBpcyBgRG9jdW1lbnRTdGF0ZS5MaW5rZWRgIG9yIGEgbGF0ZXIgc3RhdGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2hhcmVkU2VydmljZXMsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKHVyaSA9PiB1cmkudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uRG9jdW1lbnRQaGFzZShzdGF0ZSwgZG9jdW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoZG9jdW1lbnQudXJpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uVXBkYXRlKChfY2hhbmdlZCwgZGVsZXRlZCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdXJpIG9mIGRlbGV0ZWQpIHsgLy8gcmVhY3Qgb25seSBvbiBkZWxldGVkIGRvY3VtZW50c1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKHVyaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uVXBkYXRlKChjaGFuZ2VkLCBkZWxldGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsVXJpcyA9IGNoYW5nZWQuY29uY2F0KGRlbGV0ZWQpOyAvLyByZWFjdCBvbiBib3RoIGNoYW5nZWQgYW5kIGRlbGV0ZWQgZG9jdW1lbnRzXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB1cmkgb2YgYWxsVXJpcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKHVyaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBFdmVyeSBrZXkvdmFsdWUgcGFpciBpbiB0aGlzIGNhY2hlIGlzIHNjb3BlZCB0byB0aGUgd2hvbGUgd29ya3NwYWNlLlxuICogSWYgYW55IGRvY3VtZW50IGluIHRoZSB3b3Jrc3BhY2UgaXMgYWRkZWQsIGNoYW5nZWQgb3IgZGVsZXRlZCwgdGhlIHdob2xlIGNhY2hlIGlzIGV2aWN0ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBXb3Jrc3BhY2VDYWNoZSBleHRlbmRzIFNpbXBsZUNhY2hlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHdvcmtzcGFjZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaGFyZWRTZXJ2aWNlcyBTZXJ2aWNlIGNvbnRhaW5lciBpbnN0YW5jZSB0byBob29rIGludG8gZG9jdW1lbnQgbGlmZWN5Y2xlIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gc3RhdGUgT3B0aW9uYWwgZG9jdW1lbnQgc3RhdGUgb24gd2hpY2ggdGhlIGNhY2hlIHNob3VsZCBldmljdC5cbiAgICAgKiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjYWNoZSB3aWxsIGV2aWN0IG9uIGBEb2N1bWVudEJ1aWxkZXIjb25VcGRhdGVgLlxuICAgICAqICpEZWxldGVkKiBkb2N1bWVudHMgYXJlIGNvbnNpZGVyZWQgaW4gYm90aCBjYXNlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzaGFyZWRTZXJ2aWNlcywgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnRvRGlzcG9zZS5wdXNoKHNoYXJlZFNlcnZpY2VzLndvcmtzcGFjZS5Eb2N1bWVudEJ1aWxkZXIub25CdWlsZFBoYXNlKHN0YXRlLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uVXBkYXRlKChfY2hhbmdlZCwgZGVsZXRlZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkZWxldGVkLmxlbmd0aCA+IDApIHsgLy8gcmVhY3Qgb25seSBvbiBkZWxldGVkIGRvY3VtZW50c1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b0Rpc3Bvc2UucHVzaChzaGFyZWRTZXJ2aWNlcy53b3Jrc3BhY2UuRG9jdW1lbnRCdWlsZGVyLm9uVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BiMap: () => (/* binding */ BiMap),\n/* harmony export */   MultiMap: () => (/* binding */ MultiMap)\n/* harmony export */ });\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nclass MultiMap {\n    constructor(elements) {\n        this.map = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n    /**\n     * The total number of values in the multimap.\n     */\n    get size() {\n        return _stream_js__WEBPACK_IMPORTED_MODULE_0__.Reduction.sum((0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).map(a => a.length));\n    }\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear() {\n        this.map.clear();\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key, value) {\n        if (value === undefined) {\n            return this.map.delete(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    }\n                    else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key) {\n        var _a;\n        return (_a = this.map.get(key)) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key, value) {\n        if (value === undefined) {\n            return this.map.has(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key, value) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(value);\n        }\n        else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key, values) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(...values);\n        }\n        else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn) {\n        this.map.forEach((array, key) => array.forEach(value => callbackfn(value, key, this)));\n    }\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator]() {\n        return this.entries().iterator();\n    }\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value]));\n    }\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.keys());\n    }\n    /**\n     * Returns a stream of values in the map.\n     */\n    values() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).flat();\n    }\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries());\n    }\n}\nclass BiMap {\n    get size() {\n        return this.map.size;\n    }\n    constructor(elements) {\n        this.map = new Map();\n        this.inverse = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this.map.clear();\n        this.inverse.clear();\n    }\n    set(key, value) {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n    get(key) {\n        return this.map.get(key);\n    }\n    getKey(value) {\n        return this.inverse.get(value);\n    }\n    delete(key) {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameRegexp: () => (/* binding */ DefaultNameRegexp),\n/* harmony export */   RangeComparison: () => (/* binding */ RangeComparison),\n/* harmony export */   compareRange: () => (/* binding */ compareRange),\n/* harmony export */   findCommentNode: () => (/* binding */ findCommentNode),\n/* harmony export */   findDeclarationNodeAtOffset: () => (/* binding */ findDeclarationNodeAtOffset),\n/* harmony export */   findLeafNodeAtOffset: () => (/* binding */ findLeafNodeAtOffset),\n/* harmony export */   findLeafNodeBeforeOffset: () => (/* binding */ findLeafNodeBeforeOffset),\n/* harmony export */   flattenCst: () => (/* binding */ flattenCst),\n/* harmony export */   getInteriorNodes: () => (/* binding */ getInteriorNodes),\n/* harmony export */   getNextNode: () => (/* binding */ getNextNode),\n/* harmony export */   getPreviousNode: () => (/* binding */ getPreviousNode),\n/* harmony export */   getStartlineNode: () => (/* binding */ getStartlineNode),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isChildNode: () => (/* binding */ isChildNode),\n/* harmony export */   isCommentNode: () => (/* binding */ isCommentNode),\n/* harmony export */   streamCst: () => (/* binding */ streamCst),\n/* harmony export */   toDocumentSegment: () => (/* binding */ toDocumentSegment),\n/* harmony export */   tokenToRange: () => (/* binding */ tokenToRange)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nfunction streamCst(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_0__.TreeStreamImpl(node, element => {\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(element)) {\n            return element.content;\n        }\n        else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nfunction flattenCst(node) {\n    return streamCst(node).filter(_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode);\n}\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nfunction isChildNode(child, parent) {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction tokenToRange(token) {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn - 1,\n            line: token.startLine - 1\n        },\n        end: {\n            character: token.endColumn, // endColumn uses the correct index\n            line: token.endLine - 1\n        }\n    };\n}\nfunction toDocumentSegment(node) {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\nvar RangeComparison;\n(function (RangeComparison) {\n    RangeComparison[RangeComparison[\"Before\"] = 0] = \"Before\";\n    RangeComparison[RangeComparison[\"After\"] = 1] = \"After\";\n    RangeComparison[RangeComparison[\"OverlapFront\"] = 2] = \"OverlapFront\";\n    RangeComparison[RangeComparison[\"OverlapBack\"] = 3] = \"OverlapBack\";\n    RangeComparison[RangeComparison[\"Inside\"] = 4] = \"Inside\";\n    RangeComparison[RangeComparison[\"Outside\"] = 5] = \"Outside\";\n})(RangeComparison || (RangeComparison = {}));\nfunction compareRange(range, to) {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\n        return RangeComparison.Before;\n    }\n    else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    }\n    else if (startInside) {\n        return RangeComparison.OverlapBack;\n    }\n    else if (endInside) {\n        return RangeComparison.OverlapFront;\n    }\n    else {\n        return RangeComparison.Outside;\n    }\n}\nfunction inRange(range, to) {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nconst DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nfunction findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = DefaultNameRegexp) {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\nfunction findCommentNode(cstNode, commentNames) {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isRootCstNode)(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction isCommentNode(cstNode, commentNames) {\n    return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nfunction findLeafNodeAtOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    }\n    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nfunction findLeafNodeBeforeOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    }\n    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\nfunction binarySearch(node, offset, closest) {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode = undefined;\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        }\n        else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n    return closestNode;\n}\nfunction getPreviousNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getNextNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getStartlineNode(node) {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index !== null && index !== void 0 ? index : parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        }\n        else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\nfunction getInteriorNodes(start, end) {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\nfunction getCommonParent(a, b) {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        }\n        else {\n            break;\n        }\n    }\n    return current;\n}\nfunction getParentChain(node) {\n    const chain = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n//# sourceMappingURL=cst-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2NzdC11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUY7QUFDeEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGVBQWUsc0RBQWM7QUFDN0IsWUFBWSxtRUFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSSxtQkFBbUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtDQUFrQywwREFBYTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEM7QUFDcEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVUsR0FBRztBQUNiO0FBQ08sa0NBQWtDLEVBQUU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhEQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLDhEQUFhO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhLG1FQUFrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLDhEQUFhO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhLG1FQUFrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0Q0FBNEM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2NzdC11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBpc0NvbXBvc2l0ZUNzdE5vZGUsIGlzTGVhZkNzdE5vZGUsIGlzUm9vdENzdE5vZGUgfSBmcm9tICcuLi9zeW50YXgtdHJlZS5qcyc7XG5pbXBvcnQgeyBUcmVlU3RyZWFtSW1wbCB9IGZyb20gJy4vc3RyZWFtLmpzJztcbi8qKlxuICogQ3JlYXRlIGEgc3RyZWFtIG9mIGFsbCBDU1Qgbm9kZXMgdGhhdCBhcmUgZGlyZWN0bHkgYW5kIGluZGlyZWN0bHkgY29udGFpbmVkIGluIHRoZSBnaXZlbiByb290IG5vZGUsXG4gKiBpbmNsdWRpbmcgdGhlIHJvb3Qgbm9kZSBpdHNlbGYuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJlYW1Dc3Qobm9kZSkge1xuICAgIHJldHVybiBuZXcgVHJlZVN0cmVhbUltcGwobm9kZSwgZWxlbWVudCA9PiB7XG4gICAgICAgIGlmIChpc0NvbXBvc2l0ZUNzdE5vZGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9LCB7IGluY2x1ZGVSb290OiB0cnVlIH0pO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBzdHJlYW0gb2YgYWxsIGxlYWYgbm9kZXMgdGhhdCBhcmUgZGlyZWN0bHkgYW5kIGluZGlyZWN0bHkgY29udGFpbmVkIGluIHRoZSBnaXZlbiByb290IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuQ3N0KG5vZGUpIHtcbiAgICByZXR1cm4gc3RyZWFtQ3N0KG5vZGUpLmZpbHRlcihpc0xlYWZDc3ROb2RlKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgY3N0IG5vZGUgaXMgYSBjaGlsZCBvZiB0aGUgc3BlY2lmaWVkIHBhcmVudCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDaGlsZE5vZGUoY2hpbGQsIHBhcmVudCkge1xuICAgIHdoaWxlIChjaGlsZC5jb250YWluZXIpIHtcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5jb250YWluZXI7XG4gICAgICAgIGlmIChjaGlsZCA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9rZW5Ub1JhbmdlKHRva2VuKSB7XG4gICAgLy8gQ2hldnJvdGFpbiB1c2VzIDEtYmFzZWQgaW5kaWNlcyBldmVyeXdoZXJlXG4gICAgLy8gU28gd2Ugc3VidHJhY3QgMSBmcm9tIGV2ZXJ5IHZhbHVlIHRvIGFsaWduIHdpdGggdGhlIExTUFxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICBjaGFyYWN0ZXI6IHRva2VuLnN0YXJ0Q29sdW1uIC0gMSxcbiAgICAgICAgICAgIGxpbmU6IHRva2VuLnN0YXJ0TGluZSAtIDFcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICBjaGFyYWN0ZXI6IHRva2VuLmVuZENvbHVtbiwgLy8gZW5kQ29sdW1uIHVzZXMgdGhlIGNvcnJlY3QgaW5kZXhcbiAgICAgICAgICAgIGxpbmU6IHRva2VuLmVuZExpbmUgLSAxXG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvRG9jdW1lbnRTZWdtZW50KG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgeyBvZmZzZXQsIGVuZCwgcmFuZ2UgfSA9IG5vZGU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmFuZ2UsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZW5kLFxuICAgICAgICBsZW5ndGg6IGVuZCAtIG9mZnNldFxuICAgIH07XG59XG5leHBvcnQgdmFyIFJhbmdlQ29tcGFyaXNvbjtcbihmdW5jdGlvbiAoUmFuZ2VDb21wYXJpc29uKSB7XG4gICAgUmFuZ2VDb21wYXJpc29uW1JhbmdlQ29tcGFyaXNvbltcIkJlZm9yZVwiXSA9IDBdID0gXCJCZWZvcmVcIjtcbiAgICBSYW5nZUNvbXBhcmlzb25bUmFuZ2VDb21wYXJpc29uW1wiQWZ0ZXJcIl0gPSAxXSA9IFwiQWZ0ZXJcIjtcbiAgICBSYW5nZUNvbXBhcmlzb25bUmFuZ2VDb21wYXJpc29uW1wiT3ZlcmxhcEZyb250XCJdID0gMl0gPSBcIk92ZXJsYXBGcm9udFwiO1xuICAgIFJhbmdlQ29tcGFyaXNvbltSYW5nZUNvbXBhcmlzb25bXCJPdmVybGFwQmFja1wiXSA9IDNdID0gXCJPdmVybGFwQmFja1wiO1xuICAgIFJhbmdlQ29tcGFyaXNvbltSYW5nZUNvbXBhcmlzb25bXCJJbnNpZGVcIl0gPSA0XSA9IFwiSW5zaWRlXCI7XG4gICAgUmFuZ2VDb21wYXJpc29uW1JhbmdlQ29tcGFyaXNvbltcIk91dHNpZGVcIl0gPSA1XSA9IFwiT3V0c2lkZVwiO1xufSkoUmFuZ2VDb21wYXJpc29uIHx8IChSYW5nZUNvbXBhcmlzb24gPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVSYW5nZShyYW5nZSwgdG8pIHtcbiAgICBpZiAocmFuZ2UuZW5kLmxpbmUgPCB0by5zdGFydC5saW5lIHx8IChyYW5nZS5lbmQubGluZSA9PT0gdG8uc3RhcnQubGluZSAmJiByYW5nZS5lbmQuY2hhcmFjdGVyIDw9IHRvLnN0YXJ0LmNoYXJhY3RlcikpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlQ29tcGFyaXNvbi5CZWZvcmU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJhbmdlLnN0YXJ0LmxpbmUgPiB0by5lbmQubGluZSB8fCAocmFuZ2Uuc3RhcnQubGluZSA9PT0gdG8uZW5kLmxpbmUgJiYgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyID49IHRvLmVuZC5jaGFyYWN0ZXIpKSB7XG4gICAgICAgIHJldHVybiBSYW5nZUNvbXBhcmlzb24uQWZ0ZXI7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0SW5zaWRlID0gcmFuZ2Uuc3RhcnQubGluZSA+IHRvLnN0YXJ0LmxpbmUgfHwgKHJhbmdlLnN0YXJ0LmxpbmUgPT09IHRvLnN0YXJ0LmxpbmUgJiYgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyID49IHRvLnN0YXJ0LmNoYXJhY3Rlcik7XG4gICAgY29uc3QgZW5kSW5zaWRlID0gcmFuZ2UuZW5kLmxpbmUgPCB0by5lbmQubGluZSB8fCAocmFuZ2UuZW5kLmxpbmUgPT09IHRvLmVuZC5saW5lICYmIHJhbmdlLmVuZC5jaGFyYWN0ZXIgPD0gdG8uZW5kLmNoYXJhY3Rlcik7XG4gICAgaWYgKHN0YXJ0SW5zaWRlICYmIGVuZEluc2lkZSkge1xuICAgICAgICByZXR1cm4gUmFuZ2VDb21wYXJpc29uLkluc2lkZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlQ29tcGFyaXNvbi5PdmVybGFwQmFjaztcbiAgICB9XG4gICAgZWxzZSBpZiAoZW5kSW5zaWRlKSB7XG4gICAgICAgIHJldHVybiBSYW5nZUNvbXBhcmlzb24uT3ZlcmxhcEZyb250O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlQ29tcGFyaXNvbi5PdXRzaWRlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpblJhbmdlKHJhbmdlLCB0bykge1xuICAgIGNvbnN0IGNvbXBhcmlzb24gPSBjb21wYXJlUmFuZ2UocmFuZ2UsIHRvKTtcbiAgICByZXR1cm4gY29tcGFyaXNvbiA+IFJhbmdlQ29tcGFyaXNvbi5BZnRlcjtcbn1cbi8vIFRoZSBcXHB7TH0gcmVnZXggbWF0Y2hlcyBhbnkgdW5pY29kZSBsZXR0ZXIgY2hhcmFjdGVyLCBpLmUuIGNoYXJhY3RlcnMgZnJvbSBub24tZW5nbGlzaCBhbHBoYWJldHNcbi8vIFRvZ2V0aGVyIHdpdGggXFx3IGl0IG1hdGNoZXMgYW55IGtpbmQgb2YgY2hhcmFjdGVyIHdoaWNoIGNhbiBjb21tb25seSBhcHBlYXIgaW4gSURzXG5leHBvcnQgY29uc3QgRGVmYXVsdE5hbWVSZWdleHAgPSAvXltcXHdcXHB7TH1dJC91O1xuLyoqXG4gKiBQZXJmb3JtcyBgZmluZExlYWZOb2RlQXRPZmZzZXRgIHdpdGggYSBtaW5vciBkaWZmZXJlbmNlOiBXaGVuIGVuY291bnRlcmluZyBhIGNoYXJhY3RlciB0aGF0IG1hdGNoZXMgdGhlIGBuYW1lUmVnZXhwYCBhcmd1bWVudCxcbiAqIGl0IHdpbGwgaW5zdGVhZCByZXR1cm4gdGhlIGxlYWYgbm9kZSBhdCB0aGUgYG9mZnNldCAtIDFgIHBvc2l0aW9uLlxuICpcbiAqIEZvciBMU1Agc2VydmljZXMsIHVzZXJzIGV4cGVjdCB0aGF0IHRoZSBkZWNsYXJhdGlvbiBvZiBhbiBlbGVtZW50IGlzIGF2YWlsYWJsZSBpZiB0aGUgY3Vyc29yIGlzIGRpcmVjdGx5IGFmdGVyIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZERlY2xhcmF0aW9uTm9kZUF0T2Zmc2V0KGNzdE5vZGUsIG9mZnNldCwgbmFtZVJlZ2V4cCA9IERlZmF1bHROYW1lUmVnZXhwKSB7XG4gICAgaWYgKGNzdE5vZGUpIHtcbiAgICAgICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsT2Zmc2V0ID0gb2Zmc2V0IC0gY3N0Tm9kZS5vZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCB0ZXh0QXRPZmZzZXQgPSBjc3ROb2RlLnRleHQuY2hhckF0KGxvY2FsT2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICghbmFtZVJlZ2V4cC50ZXN0KHRleHRBdE9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmluZExlYWZOb2RlQXRPZmZzZXQoY3N0Tm9kZSwgb2Zmc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUoY3N0Tm9kZSwgY29tbWVudE5hbWVzKSB7XG4gICAgaWYgKGNzdE5vZGUpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXMgPSBnZXRQcmV2aW91c05vZGUoY3N0Tm9kZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChwcmV2aW91cyAmJiBpc0NvbW1lbnROb2RlKHByZXZpb3VzLCBjb21tZW50TmFtZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUm9vdENzdE5vZGUoY3N0Tm9kZSkpIHtcbiAgICAgICAgICAgIC8vIEdvIGZyb20gdGhlIGZpcnN0IG5vbi1oaWRkZW4gbm9kZSB0aHJvdWdoIGFsbCBub2RlcyBpbiByZXZlcnNlIG9yZGVyXG4gICAgICAgICAgICAvLyBXZSBkbyB0aGlzIHRvIGZpbmQgdGhlIGNvbW1lbnQgbm9kZSB3aGljaCBkaXJlY3RseSBwcmVjZWRlcyB0aGUgcm9vdCBub2RlXG4gICAgICAgICAgICBjb25zdCBlbmRJbmRleCA9IGNzdE5vZGUuY29udGVudC5maW5kSW5kZXgoZSA9PiAhZS5oaWRkZW4pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGVuZEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNzdE5vZGUuY29udGVudFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21tZW50Tm9kZShjaGlsZCwgY29tbWVudE5hbWVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb21tZW50Tm9kZShjc3ROb2RlLCBjb21tZW50TmFtZXMpIHtcbiAgICByZXR1cm4gaXNMZWFmQ3N0Tm9kZShjc3ROb2RlKSAmJiBjb21tZW50TmFtZXMuaW5jbHVkZXMoY3N0Tm9kZS50b2tlblR5cGUubmFtZSk7XG59XG4vKipcbiAqIEZpbmRzIHRoZSBsZWFmIENTVCBub2RlIGF0IHRoZSBzcGVjaWZpZWQgMC1iYXNlZCBzdHJpbmcgb2Zmc2V0LlxuICogTm90ZSB0aGF0IHRoZSBnaXZlbiBvZmZzZXQgd2lsbCBiZSB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSByZXR1cm5lZCBsZWFmIG5vZGUuXG4gKlxuICogSWYgdGhlIG9mZnNldCBkb2VzIG5vdCBwb2ludCB0byBhIENTVCBub2RlIChidXQganVzdCB3aGl0ZSBzcGFjZSksIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgLlxuICpcbiAqIEBwYXJhbSBub2RlIFRoZSBDU1Qgbm9kZSB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSBvZmZzZXQgVGhlIHNwZWNpZmllZCBvZmZzZXQuXG4gKiBAcmV0dXJucyBUaGUgQ1NUIG5vZGUgYXQgdGhlIHNwZWNpZmllZCBvZmZzZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGVhZk5vZGVBdE9mZnNldChub2RlLCBvZmZzZXQpIHtcbiAgICBpZiAoaXNMZWFmQ3N0Tm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDb21wb3NpdGVDc3ROb2RlKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdCA9IGJpbmFyeVNlYXJjaChub2RlLCBvZmZzZXQsIGZhbHNlKTtcbiAgICAgICAgaWYgKHNlYXJjaFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRMZWFmTm9kZUF0T2Zmc2V0KHNlYXJjaFJlc3VsdCwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBGaW5kcyB0aGUgbGVhZiBDU1Qgbm9kZSBhdCB0aGUgc3BlY2lmaWVkIDAtYmFzZWQgc3RyaW5nIG9mZnNldC5cbiAqIElmIG5vIENTVCBub2RlIGV4aXN0cyBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLCBpdCB3aWxsIHJldHVybiB0aGUgbGVhZiBub2RlIGJlZm9yZSBpdC5cbiAqXG4gKiBJZiB0aGVyZSBpcyBubyBsZWFmIG5vZGUgYmVmb3JlIHRoZSBzcGVjaWZpZWQgb2Zmc2V0LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVybiBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBUaGUgQ1NUIG5vZGUgdG8gc2VhcmNoIHRocm91Z2guXG4gKiBAcGFyYW0gb2Zmc2V0IFRoZSBzcGVjaWZpZWQgb2Zmc2V0LlxuICogQHJldHVybnMgVGhlIENTVCBub2RlIGNsb3Nlc3QgdG8gdGhlIHNwZWNpZmllZCBvZmZzZXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGVhZk5vZGVCZWZvcmVPZmZzZXQobm9kZSwgb2Zmc2V0KSB7XG4gICAgaWYgKGlzTGVhZkNzdE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ29tcG9zaXRlQ3N0Tm9kZShub2RlKSkge1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSBiaW5hcnlTZWFyY2gobm9kZSwgb2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgaWYgKHNlYXJjaFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRMZWFmTm9kZUJlZm9yZU9mZnNldChzZWFyY2hSZXN1bHQsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChub2RlLCBvZmZzZXQsIGNsb3Nlc3QpIHtcbiAgICBsZXQgbGVmdCA9IDA7XG4gICAgbGV0IHJpZ2h0ID0gbm9kZS5jb250ZW50Lmxlbmd0aCAtIDE7XG4gICAgbGV0IGNsb3Nlc3ROb2RlID0gdW5kZWZpbmVkO1xuICAgIHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1pZGRsZSA9IE1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcbiAgICAgICAgY29uc3QgbWlkZGxlTm9kZSA9IG5vZGUuY29udGVudFttaWRkbGVdO1xuICAgICAgICBpZiAobWlkZGxlTm9kZS5vZmZzZXQgPD0gb2Zmc2V0ICYmIG1pZGRsZU5vZGUuZW5kID4gb2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyBGb3VuZCBhbiBleGFjdCBtYXRjaFxuICAgICAgICAgICAgcmV0dXJuIG1pZGRsZU5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pZGRsZU5vZGUuZW5kIDw9IG9mZnNldCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjbG9zZXN0IG5vZGUgKGxlc3MgdGhhbiBvZmZzZXQpIGFuZCBtb3ZlIHRvIHRoZSByaWdodCBoYWxmXG4gICAgICAgICAgICBjbG9zZXN0Tm9kZSA9IGNsb3Nlc3QgPyBtaWRkbGVOb2RlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGVmdCA9IG1pZGRsZSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBsZWZ0IGhhbGZcbiAgICAgICAgICAgIHJpZ2h0ID0gbWlkZGxlIC0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xvc2VzdE5vZGU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldmlvdXNOb2RlKG5vZGUsIGhpZGRlbiA9IHRydWUpIHtcbiAgICB3aGlsZSAobm9kZS5jb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5jb250YWluZXI7XG4gICAgICAgIGxldCBpbmRleCA9IHBhcmVudC5jb250ZW50LmluZGV4T2Yobm9kZSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHBhcmVudC5jb250ZW50W2luZGV4XTtcbiAgICAgICAgICAgIGlmIChoaWRkZW4gfHwgIXByZXZpb3VzLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHROb2RlKG5vZGUsIGhpZGRlbiA9IHRydWUpIHtcbiAgICB3aGlsZSAobm9kZS5jb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5jb250YWluZXI7XG4gICAgICAgIGxldCBpbmRleCA9IHBhcmVudC5jb250ZW50LmluZGV4T2Yobm9kZSk7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBwYXJlbnQuY29udGVudC5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsYXN0KSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHBhcmVudC5jb250ZW50W2luZGV4XTtcbiAgICAgICAgICAgIGlmIChoaWRkZW4gfHwgIW5leHQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydGxpbmVOb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZS5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGNvbnN0IGxpbmUgPSBub2RlLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgbGV0IGxhc3QgPSBub2RlO1xuICAgIGxldCBpbmRleDtcbiAgICB3aGlsZSAobm9kZS5jb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5jb250YWluZXI7XG4gICAgICAgIGNvbnN0IHNlbGZJbmRleCA9IGluZGV4ICE9PSBudWxsICYmIGluZGV4ICE9PSB2b2lkIDAgPyBpbmRleCA6IHBhcmVudC5jb250ZW50LmluZGV4T2Yobm9kZSk7XG4gICAgICAgIGlmIChzZWxmSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgICAgICBpbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gc2VsZkluZGV4IC0gMTtcbiAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQuY29udGVudFtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUucmFuZ2Uuc3RhcnQubGluZSAhPT0gbGluZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdCA9IG5vZGU7XG4gICAgfVxuICAgIHJldHVybiBsYXN0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVyaW9yTm9kZXMoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGNvbW1vblBhcmVudCA9IGdldENvbW1vblBhcmVudChzdGFydCwgZW5kKTtcbiAgICBpZiAoIWNvbW1vblBhcmVudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBjb21tb25QYXJlbnQucGFyZW50LmNvbnRlbnQuc2xpY2UoY29tbW9uUGFyZW50LmEgKyAxLCBjb21tb25QYXJlbnQuYik7XG59XG5mdW5jdGlvbiBnZXRDb21tb25QYXJlbnQoYSwgYikge1xuICAgIGNvbnN0IGFQYXJlbnRzID0gZ2V0UGFyZW50Q2hhaW4oYSk7XG4gICAgY29uc3QgYlBhcmVudHMgPSBnZXRQYXJlbnRDaGFpbihiKTtcbiAgICBsZXQgY3VycmVudDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFQYXJlbnRzLmxlbmd0aCAmJiBpIDwgYlBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYVBhcmVudCA9IGFQYXJlbnRzW2ldO1xuICAgICAgICBjb25zdCBiUGFyZW50ID0gYlBhcmVudHNbaV07XG4gICAgICAgIGlmIChhUGFyZW50LnBhcmVudCA9PT0gYlBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSB7XG4gICAgICAgICAgICAgICAgcGFyZW50OiBhUGFyZW50LnBhcmVudCxcbiAgICAgICAgICAgICAgICBhOiBhUGFyZW50LmluZGV4LFxuICAgICAgICAgICAgICAgIGI6IGJQYXJlbnQuaW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudENoYWluKG5vZGUpIHtcbiAgICBjb25zdCBjaGFpbiA9IFtdO1xuICAgIHdoaWxlIChub2RlLmNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBub2RlLmNvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnQuY29udGVudC5pbmRleE9mKG5vZGUpO1xuICAgICAgICBjaGFpbi5wdXNoKHtcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gY2hhaW4ucmV2ZXJzZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3N0LXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nvar Disposable;\n(function (Disposable) {\n    function create(callback) {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (Disposable = {}));\n//# sourceMappingURL=disposable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Rpc3Bvc2FibGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZGlzcG9zYWJsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgdmFyIERpc3Bvc2FibGU7XG4oZnVuY3Rpb24gKERpc3Bvc2FibGUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGFzeW5jICgpID0+IGF3YWl0IGNhbGxiYWNrKClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRGlzcG9zYWJsZS5jcmVhdGUgPSBjcmVhdGU7XG59KShEaXNwb3NhYmxlIHx8IChEaXNwb3NhYmxlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3Bvc2FibGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorWithLocation: () => (/* binding */ ErrorWithLocation),\n/* harmony export */   assertUnreachable: () => (/* binding */ assertUnreachable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass ErrorWithLocation extends Error {\n    constructor(node, message) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\nfunction assertUnreachable(_) {\n    throw new Error('Error! The input value was not handled.');\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esd0JBQXdCLFNBQVMsS0FBSyxzQkFBc0IsR0FBRywyQkFBMkI7QUFDMUY7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgRXJyb3JXaXRoTG9jYXRpb24gZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iobm9kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcihub2RlID8gYCR7bWVzc2FnZX0gYXQgJHtub2RlLnJhbmdlLnN0YXJ0LmxpbmV9OiR7bm9kZS5yYW5nZS5zdGFydC5jaGFyYWN0ZXJ9YCA6IG1lc3NhZ2UpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRVbnJlYWNoYWJsZShfKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciEgVGhlIGlucHV0IHZhbHVlIHdhcyBub3QgaGFuZGxlZC4nKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadGrammarFromJson: () => (/* binding */ loadGrammarFromJson)\n/* harmony export */ });\n/* harmony import */ var _default_module_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../default-module.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js\");\n/* harmony import */ var _dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dependency-injection.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../workspace/file-system-provider.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js\");\n/* harmony import */ var _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nconst minimalGrammarModule = {\n    Grammar: () => undefined,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\nconst minimalSharedGrammarModule = {\n    AstReflection: () => new _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n    const shared = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultSharedCoreModule)(_workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__.EmptyFileSystem), minimalSharedGrammarModule);\n    const grammar = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultCoreModule)({ shared }), minimalGrammarModule);\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nfunction loadGrammarFromJson(json) {\n    var _a;\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json);\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__.URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : 'grammar'}.langium`));\n    return astNode;\n}\n//# sourceMappingURL=grammar-loader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2dyYW1tYXItbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEY7QUFDMUM7QUFDQztBQUNrQjtBQUNsQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZCQUE2QixvRkFBK0I7QUFDNUQ7QUFDQTtBQUNBLG1CQUFtQixnRUFBTSxDQUFDLGlGQUE2QixDQUFDLCtFQUFlO0FBQ3ZFLG9CQUFvQixnRUFBTSxDQUFDLDJFQUF1QixHQUFHLFFBQVE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSw4Q0FBRyxtQkFBbUIsK0RBQStEO0FBQzdKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0Vib290aC9hZ2VudF9jX2ZyYW1ld29yay9zcmMvcmVhbHRpbWVfY2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy9ncmFtbWFyLWxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBjcmVhdGVEZWZhdWx0Q29yZU1vZHVsZSwgY3JlYXRlRGVmYXVsdFNoYXJlZENvcmVNb2R1bGUgfSBmcm9tICcuLi9kZWZhdWx0LW1vZHVsZS5qcyc7XG5pbXBvcnQgeyBpbmplY3QgfSBmcm9tICcuLi9kZXBlbmRlbmN5LWluamVjdGlvbi5qcyc7XG5pbXBvcnQgKiBhcyBhc3QgZnJvbSAnLi4vbGFuZ3VhZ2VzL2dlbmVyYXRlZC9hc3QuanMnO1xuaW1wb3J0IHsgRW1wdHlGaWxlU3lzdGVtIH0gZnJvbSAnLi4vd29ya3NwYWNlL2ZpbGUtc3lzdGVtLXByb3ZpZGVyLmpzJztcbmltcG9ydCB7IFVSSSB9IGZyb20gJy4vdXJpLXV0aWxzLmpzJztcbmNvbnN0IG1pbmltYWxHcmFtbWFyTW9kdWxlID0ge1xuICAgIEdyYW1tYXI6ICgpID0+IHVuZGVmaW5lZCxcbiAgICBMYW5ndWFnZU1ldGFEYXRhOiAoKSA9PiAoe1xuICAgICAgICBjYXNlSW5zZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgICBmaWxlRXh0ZW5zaW9uczogWycubGFuZ2l1bSddLFxuICAgICAgICBsYW5ndWFnZUlkOiAnbGFuZ2l1bSdcbiAgICB9KVxufTtcbmNvbnN0IG1pbmltYWxTaGFyZWRHcmFtbWFyTW9kdWxlID0ge1xuICAgIEFzdFJlZmxlY3Rpb246ICgpID0+IG5ldyBhc3QuTGFuZ2l1bUdyYW1tYXJBc3RSZWZsZWN0aW9uKClcbn07XG5mdW5jdGlvbiBjcmVhdGVNaW5pbWFsR3JhbW1hclNlcnZpY2VzKCkge1xuICAgIGNvbnN0IHNoYXJlZCA9IGluamVjdChjcmVhdGVEZWZhdWx0U2hhcmVkQ29yZU1vZHVsZShFbXB0eUZpbGVTeXN0ZW0pLCBtaW5pbWFsU2hhcmVkR3JhbW1hck1vZHVsZSk7XG4gICAgY29uc3QgZ3JhbW1hciA9IGluamVjdChjcmVhdGVEZWZhdWx0Q29yZU1vZHVsZSh7IHNoYXJlZCB9KSwgbWluaW1hbEdyYW1tYXJNb2R1bGUpO1xuICAgIHNoYXJlZC5TZXJ2aWNlUmVnaXN0cnkucmVnaXN0ZXIoZ3JhbW1hcik7XG4gICAgcmV0dXJuIGdyYW1tYXI7XG59XG4vKipcbiAqIExvYWQgYSBMYW5naXVtIGdyYW1tYXIgZm9yIHlvdXIgbGFuZ3VhZ2UgZnJvbSBhIEpTT04gc3RyaW5nLiBUaGlzIGlzIHVzZWQgYnkgc2V2ZXJhbCBzZXJ2aWNlcyxcbiAqIG1vc3Qgbm90YWJseSB0aGUgcGFyc2VyIGJ1aWxkZXIgd2hpY2ggaW50ZXJwcmV0cyB0aGUgZ3JhbW1hciB0byBjcmVhdGUgYSBwYXJzZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkR3JhbW1hckZyb21Kc29uKGpzb24pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc2VydmljZXMgPSBjcmVhdGVNaW5pbWFsR3JhbW1hclNlcnZpY2VzKCk7XG4gICAgY29uc3QgYXN0Tm9kZSA9IHNlcnZpY2VzLnNlcmlhbGl6ZXIuSnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoanNvbik7XG4gICAgc2VydmljZXMuc2hhcmVkLndvcmtzcGFjZS5MYW5naXVtRG9jdW1lbnRGYWN0b3J5LmZyb21Nb2RlbChhc3ROb2RlLCBVUkkucGFyc2UoYG1lbW9yeTovLyR7KF9hID0gYXN0Tm9kZS5uYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnZ3JhbW1hcid9LmxhbmdpdW1gKSk7XG4gICAgcmV0dXJuIGFzdE5vZGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFtbWFyLWxvYWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAssignment: () => (/* binding */ findAssignment),\n/* harmony export */   findNameAssignment: () => (/* binding */ findNameAssignment),\n/* harmony export */   findNodeForKeyword: () => (/* binding */ findNodeForKeyword),\n/* harmony export */   findNodeForProperty: () => (/* binding */ findNodeForProperty),\n/* harmony export */   findNodesForKeyword: () => (/* binding */ findNodesForKeyword),\n/* harmony export */   findNodesForKeywordInternal: () => (/* binding */ findNodesForKeywordInternal),\n/* harmony export */   findNodesForProperty: () => (/* binding */ findNodesForProperty),\n/* harmony export */   getActionAtElement: () => (/* binding */ getActionAtElement),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getAllReachableRules: () => (/* binding */ getAllReachableRules),\n/* harmony export */   getCrossReferenceTerminal: () => (/* binding */ getCrossReferenceTerminal),\n/* harmony export */   getEntryRule: () => (/* binding */ getEntryRule),\n/* harmony export */   getExplicitRuleType: () => (/* binding */ getExplicitRuleType),\n/* harmony export */   getHiddenRules: () => (/* binding */ getHiddenRules),\n/* harmony export */   getRuleType: () => (/* binding */ getRuleType),\n/* harmony export */   getRuleTypeName: () => (/* binding */ getRuleTypeName),\n/* harmony export */   getTypeName: () => (/* binding */ getTypeName),\n/* harmony export */   isArrayCardinality: () => (/* binding */ isArrayCardinality),\n/* harmony export */   isArrayOperator: () => (/* binding */ isArrayOperator),\n/* harmony export */   isCommentTerminal: () => (/* binding */ isCommentTerminal),\n/* harmony export */   isDataType: () => (/* binding */ isDataType),\n/* harmony export */   isDataTypeRule: () => (/* binding */ isDataTypeRule),\n/* harmony export */   isOptionalCardinality: () => (/* binding */ isOptionalCardinality),\n/* harmony export */   terminalRegex: () => (/* binding */ terminalRegex)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regexp-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nfunction getEntryRule(grammar) {\n    return grammar.rules.find(e => _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(e) && e.entry);\n}\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nfunction getHiddenRules(grammar) {\n    return grammar.rules.filter((e) => _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(e) && e.hidden);\n}\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nfunction getAllReachableRules(grammar, allTerminals) {\n    const ruleNames = new Set();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n    const topMostRules = [entryRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n    const rules = new Set();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\nfunction ruleDfs(rule, visitedSet, allTerminals) {\n    visitedSet.add(rule.name);\n    (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule).forEach(node => {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) || (allTerminals && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nfunction getCrossReferenceTerminal(crossRef) {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    }\n    else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;\n    }\n    return undefined;\n}\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nfunction isCommentTerminal(terminalRule) {\n    return terminalRule.hidden && !(0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isWhitespace)(terminalRegex(terminalRule));\n}\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nfunction findNodesForProperty(node, property) {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nfunction findNodeForProperty(node, property, index) {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForPropertyInternal(node, property, element, first) {\n    if (!first) {\n        const nodeFeature = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nfunction findNodesForKeyword(node, keyword) {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n}\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nfunction findNodeForKeyword(node, keyword, index) {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForKeywordInternal(node, keyword, element) {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamCst)(node).iterator();\n    let result;\n    const keywordNodes = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            }\n            else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nfunction findAssignment(cstNode) {\n    var _a;\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === ((_a = cstNode.container) === null || _a === void 0 ? void 0 : _a.astNode)) {\n        const assignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(cstNode.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nfunction findNameAssignment(type) {\n    let startNode = type;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        }\n        else {\n            (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_5__.assertUnreachable)(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\nfunction findNameAssignmentInternal(type, startNode, cache) {\n    var _a;\n    // the cache is only required to prevent infinite loops\n    function go(node, refType) {\n        let childAssignment = undefined;\n        const parentAssignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(startNode)) {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(node) && ((_a = node.typeRef) === null || _a === void 0 ? void 0 : _a.ref)) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\nfunction getActionAtElement(element) {\n    const parent = element.$container;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(item)) {\n                return item;\n            }\n            else {\n                const action = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(elements[i]).find(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction isOptionalCardinality(cardinality, element) {\n    return cardinality === '?' || cardinality === '*' || (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(element) && Boolean(element.guardCondition));\n}\nfunction isArrayCardinality(cardinality) {\n    return cardinality === '*' || cardinality === '+';\n}\nfunction isArrayOperator(operator) {\n    return operator === '+=';\n}\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nfunction isDataTypeRule(rule) {\n    return isDataTypeRuleInternal(rule, new Set());\n}\nfunction isDataTypeRuleInternal(rule, visited) {\n    if (visited.has(rule)) {\n        return true;\n    }\n    else {\n        visited.add(rule);\n    }\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule)) {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node)) {\n            return false;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\nfunction isDataType(type) {\n    return isDataTypeInternal(type.type, new Set());\n}\nfunction isDataTypeInternal(type, visited) {\n    if (visited.has(type)) {\n        return true;\n    }\n    else {\n        visited.add(type);\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isArrayType(type)) {\n        return false;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReferenceType(type)) {\n        return false;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        }\n        else if (type.stringType !== undefined) {\n            return true;\n        }\n        else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nfunction getExplicitRuleType(rule) {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    }\n    else if (rule.dataType) {\n        return rule.dataType;\n    }\n    else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if (refType) {\n            // check if we need to check Action as return type\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(refType)) {\n                return refType.name;\n            }\n            else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(refType) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\nfunction getTypeName(type) {\n    var _a;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReturnType(type)) {\n        return type.name;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\nfunction getActionType(action) {\n    var _a;\n    if (action.inferredType) {\n        return action.inferredType.name;\n    }\n    else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n/**\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\n * For data type rules, the name of the rule is returned,\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\n * @param rule the given rule\n * @returns the name of the AST node type of the rule\n */\nfunction getRuleTypeName(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\n/**\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\n * For data type rules, the name of the declared return type of the rule is returned (if any),\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\n * @param rule the given rule\n * @returns the name of the type of the produced values of the rule at runtime\n */\nfunction getRuleType(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\nfunction terminalRegex(terminalRule) {\n    const flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\nfunction abstractElementToRegex(element, flags) {\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else {\n        throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);\n    }\n}\nfunction terminalAlternativesToRegex(alternatives) {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\nfunction terminalGroupToRegex(group) {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\nfunction untilTokenToRegex(until) {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\nfunction negateTokenToRegex(negate) {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\nfunction characterRangeToRegex(range) {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\nfunction keywordToRegex(keyword) {\n    return (0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExp)(keyword.value);\n}\nfunction withCardinality(regex, options) {\n    var _a;\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${(_a = options.lookahead) !== null && _a !== void 0 ? _a : ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n//# sourceMappingURL=grammar-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred),\n/* harmony export */   OperationCancelled: () => (/* binding */ OperationCancelled),\n/* harmony export */   delayNextTick: () => (/* binding */ delayNextTick),\n/* harmony export */   interruptAndCheck: () => (/* binding */ interruptAndCheck),\n/* harmony export */   isOperationCancelled: () => (/* binding */ isOperationCancelled),\n/* harmony export */   setInterruptionPeriod: () => (/* binding */ setInterruptionPeriod),\n/* harmony export */   startCancelableOperation: () => (/* binding */ startCancelableOperation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nfunction delayNextTick() {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        }\n        else {\n            setImmediate(resolve);\n        }\n    });\n}\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nfunction startCancelableOperation() {\n    lastTick = performance.now();\n    return new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n}\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nfunction setInterruptionPeriod(period) {\n    globalInterruptionPeriod = period;\n}\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nconst OperationCancelled = Symbol('OperationCancelled');\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nfunction isOperationCancelled(err) {\n    return err === OperationCancelled;\n}\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nasync function interruptAndCheck(token) {\n    if (token === _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = performance.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n        // prevent calling delayNextTick every iteration of loop\n        // where delayNextTick takes up the majority or all of the\n        // globalInterruptionPeriod itself\n        lastTick = performance.now();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (arg) => {\n                resolve(arg);\n                return this;\n            };\n            this.reject = (err) => {\n                reject(err);\n                return this;\n            };\n        });\n    }\n}\n//# sourceMappingURL=promise-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3Byb21pc2UtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGVBQWUsMkVBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixxRUFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3Byb21pc2UtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uVG9rZW4sIENhbmNlbGxhdGlvblRva2VuU291cmNlIH0gZnJvbSAnLi4vdXRpbHMvY2FuY2VsbGF0aW9uLmpzJztcbi8qKlxuICogRGVsYXlzIHRoZSBleGVjdXRpb24gb2YgdGhlIGN1cnJlbnQgY29kZSB0byB0aGUgbmV4dCB0aWNrIG9mIHRoZSBldmVudCBsb29wLlxuICogRG9uJ3QgY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseSBpbiBhIHRpZ2h0IGxvb3AgdG8gcHJldmVudCB0b28gbWFueSBwcm9taXNlcyBmcm9tIGJlaW5nIGNyZWF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxheU5leHRUaWNrKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgLy8gSW4gY2FzZSB3ZSBhcmUgcnVubmluZyBpbiBhIG5vbi1ub2RlIGVudmlyb25tZW50LCBgc2V0SW1tZWRpYXRlYCBpc24ndCBhdmFpbGFibGUuXG4gICAgICAgIC8vIFVzaW5nIGBzZXRUaW1lb3V0YCBvZiB0aGUgYnJvd3NlciBBUEkgYWNjb21wbGlzaGVzIHRoZSBzYW1lIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHJlc29sdmUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5sZXQgbGFzdFRpY2sgPSAwO1xubGV0IGdsb2JhbEludGVycnVwdGlvblBlcmlvZCA9IDEwO1xuLyoqXG4gKiBSZXNldCB0aGUgZ2xvYmFsIGludGVycnVwdGlvbiBwZXJpb2QgYW5kIGNyZWF0ZSBhIGNhbmNlbGxhdGlvbiB0b2tlbiBzb3VyY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydENhbmNlbGFibGVPcGVyYXRpb24oKSB7XG4gICAgbGFzdFRpY2sgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZXR1cm4gbmV3IENhbmNlbGxhdGlvblRva2VuU291cmNlKCk7XG59XG4vKipcbiAqIENoYW5nZSB0aGUgcGVyaW9kIGR1cmF0aW9uIGZvciBgaW50ZXJydXB0QW5kQ2hlY2tgIHRvIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgMTBtcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEludGVycnVwdGlvblBlcmlvZChwZXJpb2QpIHtcbiAgICBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QgPSBwZXJpb2Q7XG59XG4vKipcbiAqIFRoaXMgc3ltYm9sIG1heSBiZSB0aHJvd24gaW4gYW4gYXN5bmNocm9ub3VzIGNvbnRleHQgYnkgYW55IExhbmdpdW0gc2VydmljZSB0aGF0IHJlY2VpdmVzXG4gKiBhIGBDYW5jZWxsYXRpb25Ub2tlbmAuIFRoaXMgbWVhbnMgdGhhdCB0aGUgcHJvbWlzZSByZXR1cm5lZCBieSBzdWNoIGEgc2VydmljZSBpcyByZWplY3RlZCB3aXRoXG4gKiB0aGlzIHN5bWJvbCBhcyByZWplY3Rpb24gcmVhc29uLlxuICovXG5leHBvcnQgY29uc3QgT3BlcmF0aW9uQ2FuY2VsbGVkID0gU3ltYm9sKCdPcGVyYXRpb25DYW5jZWxsZWQnKTtcbi8qKlxuICogVXNlIHRoaXMgaW4gYSBgY2F0Y2hgIGJsb2NrIHRvIGNoZWNrIHdoZXRoZXIgdGhlIHRocm93biBvYmplY3QgaW5kaWNhdGVzIHRoYXQgdGhlIG9wZXJhdGlvblxuICogaGFzIGJlZW4gY2FuY2VsbGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGVyYXRpb25DYW5jZWxsZWQoZXJyKSB7XG4gICAgcmV0dXJuIGVyciA9PT0gT3BlcmF0aW9uQ2FuY2VsbGVkO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgdHdvIHRoaW5nczpcbiAqICAxLiBDaGVjayB0aGUgZWxhcHNlZCB0aW1lIHNpbmNlIHRoZSBsYXN0IGNhbGwgdG8gdGhpcyBmdW5jdGlvbiBvciB0byBgc3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uYC4gSWYgdGhlIHByZWRlZmluZWRcbiAqICAgICBwZXJpb2QgKGNvbmZpZ3VyZWQgd2l0aCBgc2V0SW50ZXJydXB0aW9uUGVyaW9kYCkgaXMgZXhjZWVkZWQsIGV4ZWN1dGlvbiBpcyBkZWxheWVkIHdpdGggYGRlbGF5TmV4dFRpY2tgLlxuICogIDIuIElmIHRoZSBwcmVkZWZpbmVkIHBlcmlvZCBpcyBub3QgbWV0IHlldCBvciBleGVjdXRpb24gaXMgcmVzdW1lZCBhZnRlciBhbiBpbnRlcnJ1cHRpb24sIHRoZSBnaXZlbiBjYW5jZWxsYXRpb25cbiAqICAgICB0b2tlbiBpcyBjaGVja2VkLCBhbmQgaWYgY2FuY2VsbGF0aW9uIGlzIHJlcXVlc3RlZCwgYE9wZXJhdGlvbkNhbmNlbGVkYCBpcyB0aHJvd24uXG4gKlxuICogQWxsIHNlcnZpY2VzIGluIExhbmdpdW0gdGhhdCByZWNlaXZlIGEgYENhbmNlbGxhdGlvblRva2VuYCBtYXkgcG90ZW50aWFsbHkgY2FsbCB0aGlzIGZ1bmN0aW9uLCBzbyB0aGVcbiAqIGBDYW5jZWxsYXRpb25Ub2tlbmAgbXVzdCBiZSBjYXVnaHQgKHdpdGggYW4gYGFzeW5jYCB0cnktY2F0Y2ggYmxvY2sgb3IgYSBgY2F0Y2hgIGNhbGxiYWNrIGF0dGFjaGVkIHRvXG4gKiB0aGUgcHJvbWlzZSkgdG8gYXZvaWQgdGhhdCBldmVudCBiZWluZyBleHBvc2VkIGFzIGFuIGVycm9yLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW50ZXJydXB0QW5kQ2hlY2sodG9rZW4pIHtcbiAgICBpZiAodG9rZW4gPT09IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgLy8gRWFybHkgZXhpdCBpbiBjYXNlIGNhbmNlbGxhdGlvbiB3YXMgZGlzYWJsZWQgYnkgdGhlIGNhbGxlclxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBpZiAoY3VycmVudCAtIGxhc3RUaWNrID49IGdsb2JhbEludGVycnVwdGlvblBlcmlvZCkge1xuICAgICAgICBsYXN0VGljayA9IGN1cnJlbnQ7XG4gICAgICAgIGF3YWl0IGRlbGF5TmV4dFRpY2soKTtcbiAgICAgICAgLy8gcHJldmVudCBjYWxsaW5nIGRlbGF5TmV4dFRpY2sgZXZlcnkgaXRlcmF0aW9uIG9mIGxvb3BcbiAgICAgICAgLy8gd2hlcmUgZGVsYXlOZXh0VGljayB0YWtlcyB1cCB0aGUgbWFqb3JpdHkgb3IgYWxsIG9mIHRoZVxuICAgICAgICAvLyBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QgaXRzZWxmXG4gICAgICAgIGxhc3RUaWNrID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfVxuICAgIGlmICh0b2tlbi5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCkge1xuICAgICAgICB0aHJvdyBPcGVyYXRpb25DYW5jZWxsZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBTaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIGRlZmVycmVkIHBhdHRlcm4uXG4gKiBBbiBvYmplY3QgdGhhdCBleHBvc2VzIGEgcHJvbWlzZSBhbmQgZnVuY3Rpb25zIHRvIHJlc29sdmUgYW5kIHJlamVjdCBpdC5cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gKGFyZykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXJnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NEWLINE_REGEXP: () => (/* binding */ NEWLINE_REGEXP),\n/* harmony export */   escapeRegExp: () => (/* binding */ escapeRegExp),\n/* harmony export */   getCaseInsensitivePattern: () => (/* binding */ getCaseInsensitivePattern),\n/* harmony export */   getTerminalParts: () => (/* binding */ getTerminalParts),\n/* harmony export */   isMultilineComment: () => (/* binding */ isMultilineComment),\n/* harmony export */   isWhitespace: () => (/* binding */ isWhitespace),\n/* harmony export */   partialMatches: () => (/* binding */ partialMatches),\n/* harmony export */   partialRegExp: () => (/* binding */ partialRegExp),\n/* harmony export */   whitespaceCharacters: () => (/* binding */ whitespaceCharacters)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/../../node_modules/.pnpm/@chevrotain+regexp-to-ast@11.0.3/node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nconst NEWLINE_REGEXP = /\\r?\\n/gm;\nconst regexpParser = new _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.RegExpParser();\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n    constructor() {\n        super(...arguments);\n        this.isStarting = true;\n        this.endRegexpStack = [];\n        this.multiline = false;\n    }\n    get endRegex() {\n        return this.endRegexpStack.join('');\n    }\n    reset(regex) {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n    visitGroup(node) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n    visitCharacter(node) {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n    visitSet(node) {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n    visitChildren(node) {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\nconst visitor = new TerminalRegExpVisitor();\nfunction getTerminalParts(regexp) {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    }\n    catch (_a) {\n        return [];\n    }\n}\nfunction isMultilineComment(regexp) {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n */\nconst whitespaceCharacters = ('\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\nfunction isWhitespace(value) {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\n}\nfunction escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction getCaseInsensitivePattern(keyword) {\n    return Array.prototype.map.call(keyword, letter => /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join('');\n}\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nfunction partialMatches(regex, input) {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nfunction partialRegExp(regex) {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n    function process() {\n        let result = '', tmp;\n        function appendRaw(nbChars) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n        function appendOptional(nbChars) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                }\n                                else {\n                                    appendOptional(6);\n                                }\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    }\n                    else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n        return result;\n    }\n    return new RegExp(process(), regex.flags);\n}\n//# sourceMappingURL=regexp-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3JlZ2V4cC11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0RTtBQUNyRTtBQUNQLHlCQUF5QixtRUFBWTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx3RUFBaUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUCxtQ0FBbUM7QUFDbkM7QUFDTztBQUNQLCtFQUErRSxxQkFBcUIsRUFBRSxxQkFBcUI7QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQsb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsNkJBQTZCLFVBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3JlZ2V4cC11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBSZWdFeHBQYXJzZXIsIEJhc2VSZWdFeHBWaXNpdG9yIH0gZnJvbSAnQGNoZXZyb3RhaW4vcmVnZXhwLXRvLWFzdCc7XG5leHBvcnQgY29uc3QgTkVXTElORV9SRUdFWFAgPSAvXFxyP1xcbi9nbTtcbmNvbnN0IHJlZ2V4cFBhcnNlciA9IG5ldyBSZWdFeHBQYXJzZXIoKTtcbi8qKlxuICogVGhpcyBjbGFzcyBpcyBpbiBjaGFyZ2Ugb2YgaGV1cmlzdGljYWxseSBpZGVudGlmeWluZyBzdGFydC9lbmQgdG9rZW5zIG9mIHRlcm1pbmFscy5cbiAqXG4gKiBUaGUgd2F5IHRoaXMgd29ya3MgaXMgYnkgZG9pbmcgdGhlIGZvbGxvd2luZzpcbiAqIDEuIFRyYXZlcnNlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gaW4gdGhlIFwic3RhcnQgc3RhdGVcIlxuICogMi4gQWRkIGFueSBlbmNvdW50ZXJlZCBzZXRzL3NpbmdsZSBjaGFyYWN0ZXJzIHRvIHRoZSBcInN0YXJ0IHJlZ2V4cFwiXG4gKiAzLiBPbmNlIHdlIGVuY291bnRlciBhbnkgdmFyaWFibGUtbGVuZ3RoIGNvbnRlbnQgKGkuZS4gd2l0aCBxdWFudGlmaWVycyBzdWNoIGFzICsvPy8qKSwgd2UgZW50ZXIgdGhlIFwiZW5kIHN0YXRlXCJcbiAqIDQuIEluIHRoZSBlbmQgc3RhdGUsIGFueSBzZXRzL3NpbmdsZSBjaGFyYWN0ZXJzIGFyZSBhZGRlZCB0byBhbiBcImVuZCBzdGFja1wiLlxuICogNS4gSWYgd2UgcmUtZW5jb3VudGVyIGFueSB2YXJpYWJsZS1sZW5ndGggY29udGVudCB3ZSByZXNldCB0aGUgZW5kIHN0YWNrXG4gKiA2LiBXZSBjb250aW51ZSB2aXNpdGluZyB0aGUgcmVnZXggdW50aWwgdGhlIGVuZCwgcmVzZXRpbmcgdGhlIGVuZCBzdGFjayBhbmQgcmVidWlsZGluZyBpdCBhcyBuZWNlc3NhcnlcbiAqXG4gKiBBZnRlciB0cmF2ZXJzaW5nIGEgcmVndWxhciBleHByZXNzaW9uIHRoZSBgc3RhcnRSZWdleHAvZW5kUmVnZXhwYCBwcm9wZXJ0aWVzIGFsbG93IGFjY2VzcyB0byB0aGUgc3RvcmVkIHN0YXJ0L2VuZCBvZiB0aGUgdGVybWluYWxcbiAqL1xuY2xhc3MgVGVybWluYWxSZWdFeHBWaXNpdG9yIGV4dGVuZHMgQmFzZVJlZ0V4cFZpc2l0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlzU3RhcnRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmVuZFJlZ2V4cFN0YWNrID0gW107XG4gICAgICAgIHRoaXMubXVsdGlsaW5lID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBlbmRSZWdleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kUmVnZXhwU3RhY2suam9pbignJyk7XG4gICAgfVxuICAgIHJlc2V0KHJlZ2V4KSB7XG4gICAgICAgIHRoaXMubXVsdGlsaW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVnZXggPSByZWdleDtcbiAgICAgICAgdGhpcy5zdGFydFJlZ2V4cCA9ICcnO1xuICAgICAgICB0aGlzLmlzU3RhcnRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmVuZFJlZ2V4cFN0YWNrID0gW107XG4gICAgfVxuICAgIHZpc2l0R3JvdXAobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5xdWFudGlmaWVyKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RhcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmVnZXhwU3RhY2sgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2aXNpdENoYXJhY3Rlcihub2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG5vZGUudmFsdWUpO1xuICAgICAgICBpZiAoIXRoaXMubXVsdGlsaW5lICYmIGNoYXIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpbGluZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUucXVhbnRpZmllcikge1xuICAgICAgICAgICAgdGhpcy5pc1N0YXJ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVuZFJlZ2V4cFN0YWNrID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlc2NhcGVkQ2hhciA9IGVzY2FwZVJlZ0V4cChjaGFyKTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmVnZXhwU3RhY2sucHVzaChlc2NhcGVkQ2hhcik7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0YXJ0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFJlZ2V4cCArPSBlc2NhcGVkQ2hhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2aXNpdFNldChub2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNldCA9IHRoaXMucmVnZXguc3Vic3RyaW5nKG5vZGUubG9jLmJlZ2luLCBub2RlLmxvYy5lbmQpO1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHNldCk7XG4gICAgICAgICAgICB0aGlzLm11bHRpbGluZSA9IEJvb2xlYW4oJ1xcbicubWF0Y2gocmVnZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5xdWFudGlmaWVyKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RhcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmVnZXhwU3RhY2sgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHNldCA9IHRoaXMucmVnZXguc3Vic3RyaW5nKG5vZGUubG9jLmJlZ2luLCBub2RlLmxvYy5lbmQpO1xuICAgICAgICAgICAgdGhpcy5lbmRSZWdleHBTdGFjay5wdXNoKHNldCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0YXJ0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFJlZ2V4cCArPSBzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmlzaXRDaGlsZHJlbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdHcm91cCcpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBjaGlsZHJlbiBvZiBncm91cHMgd2l0aCBxdWFudGlmaWVyICgrLyovPylcbiAgICAgICAgICAgIC8vIFRoZXNlIGdyb3VwcyBhcmUgdW5yZWxhdGVkIHRvIHN0YXJ0L2VuZCB0b2tlbnMgb2YgdGVybWluYWxzXG4gICAgICAgICAgICBjb25zdCBncm91cCA9IG5vZGU7XG4gICAgICAgICAgICBpZiAoZ3JvdXAucXVhbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlci52aXNpdENoaWxkcmVuKG5vZGUpO1xuICAgIH1cbn1cbmNvbnN0IHZpc2l0b3IgPSBuZXcgVGVybWluYWxSZWdFeHBWaXNpdG9yKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVybWluYWxQYXJ0cyhyZWdleHApIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHJlZ2V4cCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlZ2V4cCA9IHJlZ2V4cC5zb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVnZXhwID0gYC8ke3JlZ2V4cH0vYDtcbiAgICAgICAgY29uc3QgcGF0dGVybiA9IHJlZ2V4cFBhcnNlci5wYXR0ZXJuKHJlZ2V4cCk7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYWx0ZXJuYXRpdmUgb2YgcGF0dGVybi52YWx1ZS52YWx1ZSkge1xuICAgICAgICAgICAgdmlzaXRvci5yZXNldChyZWdleHApO1xuICAgICAgICAgICAgdmlzaXRvci52aXNpdChhbHRlcm5hdGl2ZSk7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydDogdmlzaXRvci5zdGFydFJlZ2V4cCxcbiAgICAgICAgICAgICAgICBlbmQ6IHZpc2l0b3IuZW5kUmVnZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0cztcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aWxpbmVDb21tZW50KHJlZ2V4cCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVnZXhwID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChyZWdleHApO1xuICAgICAgICB9XG4gICAgICAgIHJlZ2V4cCA9IHJlZ2V4cC50b1N0cmluZygpO1xuICAgICAgICB2aXNpdG9yLnJlc2V0KHJlZ2V4cCk7XG4gICAgICAgIC8vIFBhcnNpbmcgdGhlIHBhdHRlcm4gbWlnaHQgZmFpbCAoc2luY2UgaXQncyB1c2VyIGNvZGUpXG4gICAgICAgIHZpc2l0b3IudmlzaXQocmVnZXhwUGFyc2VyLnBhdHRlcm4ocmVnZXhwKSk7XG4gICAgICAgIHJldHVybiB2aXNpdG9yLm11bHRpbGluZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgc2V0IG9mIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSBieSB0aGUgJ1xccycgUmVnRXhwIGNoYXJhY3RlciBjbGFzcy5cbiAqIFRha2VuIGZyb20gW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX2V4cHJlc3Npb25zL0NoYXJhY3Rlcl9jbGFzc2VzKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHdoaXRlc3BhY2VDaGFyYWN0ZXJzID0gKCdcXGZcXG5cXHJcXHRcXHZcXHUwMDIwXFx1MDBhMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwNycgK1xuICAgICdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDI4XFx1MjAyOVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdWZlZmYnKS5zcGxpdCgnJyk7XG5leHBvcnQgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKHZhbHVlKSB7XG4gICAgY29uc3QgcmVnZXhwID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBSZWdFeHAodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHdoaXRlc3BhY2VDaGFyYWN0ZXJzLnNvbWUoKHdzKSA9PiByZWdleHAudGVzdCh3cykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENhc2VJbnNlbnNpdGl2ZVBhdHRlcm4oa2V5d29yZCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoa2V5d29yZCwgbGV0dGVyID0+IC9cXHcvLnRlc3QobGV0dGVyKSA/IGBbJHtsZXR0ZXIudG9Mb3dlckNhc2UoKX0ke2xldHRlci50b1VwcGVyQ2FzZSgpfV1gIDogZXNjYXBlUmVnRXhwKGxldHRlcikpLmpvaW4oJycpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIGlucHV0IGhhcyBhIHBhcnRpYWwgbWF0Y2ggd2l0aCB0aGUgc3BlY2lmaWVkIHJlZ2V4LlxuICogQHBhcmFtIHJlZ2V4IFRoZSByZWdleCB0byBwYXJ0aWFsbHkgbWF0Y2ggYWdhaW5zdFxuICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBzdHJpbmdcbiAqIEByZXR1cm5zIFdoZXRoZXIgYW55IG1hdGNoIGV4aXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpYWxNYXRjaGVzKHJlZ2V4LCBpbnB1dCkge1xuICAgIGNvbnN0IHBhcnRpYWwgPSBwYXJ0aWFsUmVnRXhwKHJlZ2V4KTtcbiAgICBjb25zdCBtYXRjaCA9IGlucHV0Lm1hdGNoKHBhcnRpYWwpO1xuICAgIHJldHVybiAhIW1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA+IDA7XG59XG4vKipcbiAqIEJ1aWxkcyBhIHBhcnRpYWwgcmVnZXggZnJvbSB0aGUgaW5wdXQgcmVnZXguIEEgcGFydGlhbCByZWdleCBpcyBhYmxlIHRvIG1hdGNoIGluY29tcGxldGUgaW5wdXQgc3RyaW5ncy4gRS5nLlxuICogYSBwYXJ0aWFsIHJlZ2V4IGNvbnN0cnVjdGVkIGZyb20gYC9hYi9gIGlzIGFibGUgdG8gbWF0Y2ggdGhlIHN0cmluZyBgYWAgd2l0aG91dCBuZWVkaW5nIGEgZm9sbG93aW5nIGBiYCBjaGFyYWN0ZXIuIEhvd2V2ZXIgaXQgd29uJ3QgbWF0Y2ggYGJgIGFsb25lLlxuICogQHBhcmFtIHJlZ2V4IFRoZSBpbnB1dCByZWdleCB0byBiZSBjb252ZXJ0ZWQuXG4gKiBAcmV0dXJucyBBIHBhcnRpYWwgcmVnZXggY29uc3RydWN0ZWQgZnJvbSB0aGUgaW5wdXQgcmVnZXguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWFsUmVnRXhwKHJlZ2V4KSB7XG4gICAgaWYgKHR5cGVvZiByZWdleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4KTtcbiAgICB9XG4gICAgY29uc3QgcmUgPSByZWdleCwgc291cmNlID0gcmVnZXguc291cmNlO1xuICAgIGxldCBpID0gMDtcbiAgICBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gJycsIHRtcDtcbiAgICAgICAgZnVuY3Rpb24gYXBwZW5kUmF3KG5iQ2hhcnMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzb3VyY2Uuc3Vic3RyKGksIG5iQ2hhcnMpO1xuICAgICAgICAgICAgaSArPSBuYkNoYXJzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZE9wdGlvbmFsKG5iQ2hhcnMpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnKD86JyArIHNvdXJjZS5zdWJzdHIoaSwgbmJDaGFycykgKyAnfCQpJztcbiAgICAgICAgICAgIGkgKz0gbmJDaGFycztcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaSA8IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc291cmNlW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc291cmNlW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kT3B0aW9uYWwoMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbCg0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZS51bmljb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbaSArIDJdID09PSAneycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZE9wdGlvbmFsKHNvdXJjZS5pbmRleE9mKCd9JywgaSkgLSBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbCg2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kT3B0aW9uYWwoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmUudW5pY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbChzb3VyY2UuaW5kZXhPZignfScsIGkpIC0gaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kT3B0aW9uYWwoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kT3B0aW9uYWwoc291cmNlLmluZGV4T2YoJz4nLCBpKSAtIGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kT3B0aW9uYWwoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IC9cXFsoPzpcXFxcLnwuKSo/XFxdL2c7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sYXN0SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICB0bXAgPSB0bXAuZXhlYyhzb3VyY2UpIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbCh0bXBbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnXic6XG4gICAgICAgICAgICAgICAgY2FzZSAnJCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFJhdygxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IC9cXHtcXGQrLD9cXGQqXFx9L2c7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5sYXN0SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICB0bXAgPSB0bXAuZXhlYyhzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG1wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRSYXcodG1wWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbCgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZVtpICsgMV0gPT09ICc/Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzb3VyY2VbaSArIDJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnKD86JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJvY2VzcygpICsgJ3wkKSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyg/PSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHByb2Nlc3MoKSArICcpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc291cmNlLnN1YnN0cih0bXAsIGkgLSB0bXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzb3VyY2VbaSArIDNdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc291cmNlLnN1YnN0cih0bXAsIGkgLSB0bXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRSYXcoc291cmNlLmluZGV4T2YoJz4nLCBpKSAtIGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJvY2VzcygpICsgJ3wkKSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRSYXcoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJvY2VzcygpICsgJ3wkKSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnKSc6XG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRPcHRpb25hbCgxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocHJvY2VzcygpLCByZWdleC5mbGFncyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdleHAtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DONE_RESULT: () => (/* binding */ DONE_RESULT),\n/* harmony export */   EMPTY_STREAM: () => (/* binding */ EMPTY_STREAM),\n/* harmony export */   Reduction: () => (/* binding */ Reduction),\n/* harmony export */   StreamImpl: () => (/* binding */ StreamImpl),\n/* harmony export */   TreeStreamImpl: () => (/* binding */ TreeStreamImpl),\n/* harmony export */   stream: () => (/* binding */ stream)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nclass StreamImpl {\n    constructor(startFn, nextFn) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator();\n    }\n    isEmpty() {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n    count() {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n    toArray() {\n        const result = [];\n        const iterator = this.iterator();\n        let next;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap(keyFn, valueFn) {\n        const entryStream = this.map(element => [\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n    toString() {\n        return this.join();\n    }\n    concat(other) {\n        return new StreamImpl(() => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }), state => {\n            let result;\n            if (!state.firstDone) {\n                do {\n                    result = this.nextFn(state.first);\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                state.firstDone = true;\n            }\n            do {\n                result = state.iterator.next();\n                if (!result.done) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    join(separator = ',') {\n        const iterator = this.iterator();\n        let value = '';\n        let result;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n    indexOf(searchElement, fromIndex = 0) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    every(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n    some(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    forEach(callbackfn) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n    map(callbackfn) {\n        return new StreamImpl(this.startFn, (state) => {\n            const { done, value } = this.nextFn(state);\n            if (done) {\n                return DONE_RESULT;\n            }\n            else {\n                return { done: false, value: callbackfn(value) };\n            }\n        });\n    }\n    filter(predicate) {\n        return new StreamImpl(this.startFn, state => {\n            let result;\n            do {\n                result = this.nextFn(state);\n                if (!result.done && predicate(result.value)) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    nonNullable() {\n        return this.filter(e => e !== undefined && e !== null);\n    }\n    reduce(callbackfn, initialValue) {\n        const iterator = this.iterator();\n        let previousValue = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            }\n            else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n    reduceRight(callbackfn, initialValue) {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n    recursiveReduce(iterator, callbackfn, initialValue) {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n    find(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n    findIndex(predicate) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    includes(searchElement) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    flatMap(callbackfn) {\n        return new StreamImpl(() => ({ this: this.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = this.nextFn(state.this);\n                if (!done) {\n                    const mapped = callbackfn(value);\n                    if (isIterable(mapped)) {\n                        state.iterator = mapped[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: mapped };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    flat(depth) {\n        if (depth === undefined) {\n            depth = 1;\n        }\n        if (depth <= 0) {\n            return this;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) : this;\n        return new StreamImpl(() => ({ this: stream.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = stream.nextFn(state.this);\n                if (!done) {\n                    if (isIterable(value)) {\n                        state.iterator = value[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: value };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    head() {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n    tail(skipCount = 1) {\n        return new StreamImpl(() => {\n            const state = this.startFn();\n            for (let i = 0; i < skipCount; i++) {\n                const next = this.nextFn(state);\n                if (next.done) {\n                    return state;\n                }\n            }\n            return state;\n        }, this.nextFn);\n    }\n    limit(maxSize) {\n        return new StreamImpl(() => ({ size: 0, state: this.startFn() }), state => {\n            state.size++;\n            if (state.size > maxSize) {\n                return DONE_RESULT;\n            }\n            return this.nextFn(state.state);\n        });\n    }\n    distinct(by) {\n        return new StreamImpl(() => ({ set: new Set(), internalState: this.startFn() }), state => {\n            let result;\n            do {\n                result = this.nextFn(state.internalState);\n                if (!result.done) {\n                    const value = by ? by(result.value) : result.value;\n                    if (!state.set.has(value)) {\n                        state.set.add(value);\n                        return result;\n                    }\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    exclude(other, key) {\n        const otherKeySet = new Set();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\nfunction toString(item) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof item.toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return item.toString();\n    }\n    return Object.prototype.toString.call(item);\n}\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst EMPTY_STREAM = new StreamImpl(() => undefined, () => DONE_RESULT);\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nconst DONE_RESULT = Object.freeze({ done: true, value: undefined });\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nfunction stream(...collections) {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl(() => collection[Symbol.iterator](), (iterator) => iterator.next());\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl(() => ({ index: 0 }), (state) => {\n                if (state.index < collection.length) {\n                    return { done: false, value: collection[state.index++] };\n                }\n                else {\n                    return DONE_RESULT;\n                }\n            });\n        }\n    }\n    if (collections.length > 1) {\n        return new StreamImpl(() => ({ collIndex: 0, arrIndex: 0 }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (!next.done) {\n                        return next;\n                    }\n                    state.iterator = undefined;\n                }\n                if (state.array) {\n                    if (state.arrIndex < state.array.length) {\n                        return { done: false, value: state.array[state.arrIndex++] };\n                    }\n                    state.array = undefined;\n                    state.arrIndex = 0;\n                }\n                if (state.collIndex < collections.length) {\n                    const collection = collections[state.collIndex++];\n                    if (isIterable(collection)) {\n                        state.iterator = collection[Symbol.iterator]();\n                    }\n                    else if (collection && typeof collection.length === 'number') {\n                        state.array = collection;\n                    }\n                }\n            } while (state.iterator || state.array || state.collIndex < collections.length);\n            return DONE_RESULT;\n        });\n    }\n    return EMPTY_STREAM;\n}\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nclass TreeStreamImpl extends StreamImpl {\n    constructor(root, children, options) {\n        super(() => ({\n            iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n            pruned: false\n        }), state => {\n            if (state.pruned) {\n                state.iterators.pop();\n                state.pruned = false;\n            }\n            while (state.iterators.length > 0) {\n                const iterator = state.iterators[state.iterators.length - 1];\n                const next = iterator.next();\n                if (next.done) {\n                    state.iterators.pop();\n                }\n                else {\n                    state.iterators.push(children(next.value)[Symbol.iterator]());\n                    return next;\n                }\n            }\n            return DONE_RESULT;\n        });\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nvar Reduction;\n(function (Reduction) {\n    /**\n     * Compute the sum of a number stream.\n     */\n    function sum(stream) {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n    Reduction.sum = sum;\n    /**\n     * Compute the product of a number stream.\n     */\n    function product(stream) {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n    Reduction.product = product;\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function min(stream) {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n    Reduction.min = min;\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function max(stream) {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n    Reduction.max = max;\n})(Reduction || (Reduction = {}));\n//# sourceMappingURL=stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* reexport safe */ vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI),\n/* harmony export */   UriUtils: () => (/* binding */ UriUtils)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nvar UriUtils;\n(function (UriUtils) {\n    UriUtils.basename = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.basename;\n    UriUtils.dirname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.dirname;\n    UriUtils.extname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.extname;\n    UriUtils.joinPath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.joinPath;\n    UriUtils.resolvePath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.resolvePath;\n    function equals(a, b) {\n        return (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString());\n    }\n    UriUtils.equals = equals;\n    function relative(from, to) {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n    UriUtils.relative = relative;\n    function normalize(uri) {\n        return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uri.toString()).toString();\n    }\n    UriUtils.normalize = normalize;\n})(UriUtils || (UriUtils = {}));\n//# sourceMappingURL=uri-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3VyaS11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dDO0FBQ3pCO0FBQ1I7QUFDUDtBQUNBLHdCQUF3Qiw2Q0FBSztBQUM3Qix1QkFBdUIsNkNBQUs7QUFDNUIsdUJBQXVCLDZDQUFLO0FBQzVCLHdCQUF3Qiw2Q0FBSztBQUM3QiwyQkFBMkIsNkNBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkNBQUc7QUFDbEI7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3VyaS11dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBVUkksIFV0aWxzIH0gZnJvbSAndnNjb2RlLXVyaSc7XG5leHBvcnQgeyBVUkkgfTtcbmV4cG9ydCB2YXIgVXJpVXRpbHM7XG4oZnVuY3Rpb24gKFVyaVV0aWxzKSB7XG4gICAgVXJpVXRpbHMuYmFzZW5hbWUgPSBVdGlscy5iYXNlbmFtZTtcbiAgICBVcmlVdGlscy5kaXJuYW1lID0gVXRpbHMuZGlybmFtZTtcbiAgICBVcmlVdGlscy5leHRuYW1lID0gVXRpbHMuZXh0bmFtZTtcbiAgICBVcmlVdGlscy5qb2luUGF0aCA9IFV0aWxzLmpvaW5QYXRoO1xuICAgIFVyaVV0aWxzLnJlc29sdmVQYXRoID0gVXRpbHMucmVzb2x2ZVBhdGg7XG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhID09PSBudWxsIHx8IGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGEudG9TdHJpbmcoKSkgPT09IChiID09PSBudWxsIHx8IGIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIFVyaVV0aWxzLmVxdWFscyA9IGVxdWFscztcbiAgICBmdW5jdGlvbiByZWxhdGl2ZShmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBmcm9tUGF0aCA9IHR5cGVvZiBmcm9tID09PSAnc3RyaW5nJyA/IGZyb20gOiBmcm9tLnBhdGg7XG4gICAgICAgIGNvbnN0IHRvUGF0aCA9IHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IHRvLnBhdGg7XG4gICAgICAgIGNvbnN0IGZyb21QYXJ0cyA9IGZyb21QYXRoLnNwbGl0KCcvJykuZmlsdGVyKGUgPT4gZS5sZW5ndGggPiAwKTtcbiAgICAgICAgY29uc3QgdG9QYXJ0cyA9IHRvUGF0aC5zcGxpdCgnLycpLmZpbHRlcihlID0+IGUubGVuZ3RoID4gMCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYWNrUGFydCA9ICcuLi8nLnJlcGVhdChmcm9tUGFydHMubGVuZ3RoIC0gaSk7XG4gICAgICAgIGNvbnN0IHRvUGFydCA9IHRvUGFydHMuc2xpY2UoaSkuam9pbignLycpO1xuICAgICAgICByZXR1cm4gYmFja1BhcnQgKyB0b1BhcnQ7XG4gICAgfVxuICAgIFVyaVV0aWxzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHVyaSkge1xuICAgICAgICByZXR1cm4gVVJJLnBhcnNlKHVyaS50b1N0cmluZygpKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBVcmlVdGlscy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG59KShVcmlVdGlscyB8fCAoVXJpVXRpbHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentValidator: () => (/* binding */ DefaultDocumentValidator),\n/* harmony export */   DocumentValidator: () => (/* binding */ DocumentValidator),\n/* harmony export */   getDiagnosticRange: () => (/* binding */ getDiagnosticRange),\n/* harmony export */   toDiagnosticData: () => (/* binding */ toDiagnosticData),\n/* harmony export */   toDiagnosticSeverity: () => (/* binding */ toDiagnosticSeverity)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validation-registry.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultDocumentValidator {\n    constructor(services) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n    async validateDocument(document, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const parseResult = document.parseResult;\n        const diagnostics = [];\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError; })) {\n                return diagnostics;\n            }\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError; })) {\n                return diagnostics;\n            }\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError; })) {\n                return diagnostics;\n            }\n        }\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        }\n        catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        return diagnostics;\n    }\n    processLexingErrors(parseResult, diagnostics, _options) {\n        var _a, _b, _c;\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...(_b = (_a = parseResult.lexerReport) === null || _a === void 0 ? void 0 : _a.diagnostics) !== null && _b !== void 0 ? _b : []];\n        for (const lexerDiagnostic of lexerDiagnostics) {\n            const severity = (_c = lexerDiagnostic.severity) !== null && _c !== void 0 ? _c : 'error';\n            const diagnostic = {\n                severity: toDiagnosticSeverity(severity),\n                range: {\n                    start: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column - 1\n                    },\n                    end: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column + lexerDiagnostic.length - 1\n                    }\n                },\n                message: lexerDiagnostic.message,\n                data: toDiagnosticData(severity),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n    processParsingErrors(parseResult, diagnostics, _options) {\n        for (const parserError of parseResult.parserErrors) {\n            let range = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = parserError.previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position = { line: token.endLine - 1, character: token.endColumn };\n                        range = { start: position, end: position };\n                    }\n                    else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position = { line: 0, character: 0 };\n                        range = { start: position, end: position };\n                    }\n                }\n            }\n            else {\n                range = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.tokenToRange)(parserError.token);\n            }\n            if (range) {\n                const diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n    processLinkingErrors(document, diagnostics, _options) {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    }\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n    async validateAst(rootNode, options, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const validationItems = [];\n        const acceptor = (severity, message, info) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\n        return validationItems;\n    }\n    async validateAstBefore(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksBefore = this.validationRegistry.checksBefore;\n        for (const checkBefore of checksBefore) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkBefore(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    async validateAstNodes(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        await Promise.all((0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamAst)(rootNode).map(async (node) => {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n    }\n    async validateAstAfter(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksAfter = this.validationRegistry.checksAfter;\n        for (const checkAfter of checksAfter) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkAfter(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    toDiagnostic(severity, message, info) {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n    getSource() {\n        return this.metadata.languageId;\n    }\n}\nfunction getDiagnosticRange(info) {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode;\n    if (typeof info.property === 'string') {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForProperty)(info.node.$cstNode, info.property, info.index);\n    }\n    else if (typeof info.keyword === 'string') {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForKeyword)(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode !== null && cstNode !== void 0 ? cstNode : (cstNode = info.node.$cstNode);\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n/**\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\n *\n * @param severity The lexing diagnostic severity\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\n */\nfunction toDiagnosticSeverity(severity) {\n    switch (severity) {\n        case 'error':\n            return 1;\n        case 'warning':\n            return 2;\n        case 'info':\n            return 3;\n        case 'hint':\n            return 4;\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nfunction toDiagnosticData(severity) {\n    switch (severity) {\n        case 'error':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingError);\n        case 'warning':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingWarning);\n        case 'info':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingInfo);\n        case 'hint':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingHint);\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nvar DocumentValidator;\n(function (DocumentValidator) {\n    DocumentValidator.LexingError = 'lexing-error';\n    DocumentValidator.LexingWarning = 'lexing-warning';\n    DocumentValidator.LexingInfo = 'lexing-info';\n    DocumentValidator.LexingHint = 'lexing-hint';\n    DocumentValidator.ParsingError = 'parsing-error';\n    DocumentValidator.LinkingError = 'linking-error';\n})(DocumentValidator || (DocumentValidator = {}));\n//# sourceMappingURL=document-validator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationCategory: () => (/* binding */ ValidationCategory),\n/* harmony export */   ValidationRegistry: () => (/* binding */ ValidationRegistry),\n/* harmony export */   diagnosticData: () => (/* binding */ diagnosticData)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nfunction diagnosticData(code) {\n    return { code };\n}\nvar ValidationCategory;\n(function (ValidationCategory) {\n    ValidationCategory.all = ['fast', 'slow', 'built-in'];\n})(ValidationCategory || (ValidationCategory = {}));\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nclass ValidationRegistry {\n    constructor(services) {\n        this.entries = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.entriesBefore = [];\n        this.entriesAfter = [];\n        this.reflection = services.shared.AstReflection;\n    }\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register(checksRecord, thisObj = this, category = 'fast') {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch;\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            }\n            else if (typeof callbacks === 'function') {\n                const entry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n            else {\n                (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.assertUnreachable)(callbacks);\n            }\n        }\n    }\n    wrapValidationException(check, thisObj) {\n        return async (node, accept, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\n        };\n    }\n    async handleException(functionality, messageContext, accept, node) {\n        try {\n            await functionality();\n        }\n        catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error(`${messageContext}:`, err);\n            if (err instanceof Error && err.stack) {\n                console.error(err.stack);\n            }\n            const messageDetails = err instanceof Error ? err.message : String(err);\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\n        }\n    }\n    addEntry(type, entry) {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n    getChecks(type, categories) {\n        let checks = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n    /**\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map for mapping names to nodes could be established.\n     * During the usual checks on the nodes, they are put into this map with their name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerBeforeDocument(checkBefore, thisObj = this) {\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\n    }\n    /**\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map with all the collected nodes and their names is checked\n     * and validation hints are created for all nodes with the same name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerAfterDocument(checkAfter, thisObj = this) {\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\n    }\n    wrapPreparationException(check, messageContext, thisObj) {\n        return async (rootNode, accept, categories, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\n        };\n    }\n    get checksBefore() {\n        return this.entriesBefore;\n    }\n    get checksAfter() {\n        return this.entriesAfter;\n    }\n}\n//# sourceMappingURL=validation-registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeDescriptionProvider: () => (/* binding */ DefaultAstNodeDescriptionProvider),\n/* harmony export */   DefaultReferenceDescriptionProvider: () => (/* binding */ DefaultReferenceDescriptionProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultAstNodeDescriptionProvider {\n    constructor(services) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n    createDescription(node, name, document) {\n        const doc = document !== null && document !== void 0 ? document : (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n        name !== null && name !== void 0 ? name : (name = this.nameProvider.getName(node));\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment;\n        const nameSegmentGetter = () => { var _a; return nameNodeSegment !== null && nameNodeSegment !== void 0 ? nameNodeSegment : (nameNodeSegment = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)((_a = this.nameProvider.getNameNode(node)) !== null && _a !== void 0 ? _a : node.$cstNode)); };\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(node.$cstNode),\n            type: node.$type,\n            documentUri: doc.uri,\n            path\n        };\n    }\n}\nclass DefaultReferenceDescriptionProvider {\n    constructor(services) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    async createDescriptions(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        const descr = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamAst)(rootNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamReferences)(astNode).filter(refInfo => !(0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__.isLinkingError)(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n    createDescription(refInfo) {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(refCstNode),\n            local: _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__.UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n}\n//# sourceMappingURL=ast-descriptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9hc3QtZGVzY3JpcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2RDtBQUNWO0FBQzhCO0FBQ3ZCO0FBQ0k7QUFDYjtBQUMxQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZ0VBQVc7QUFDckY7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLE1BQU07QUFDbEQ7QUFDQTtBQUNBLDBDQUEwQyxRQUFRLHFHQUFxRyxzRUFBaUI7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiw4QkFBOEIsc0VBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscURBQXFELHFFQUFpQjtBQUN0RTtBQUNBO0FBQ0EsOEJBQThCLDhEQUFTO0FBQ3ZDLGtCQUFrQiwwRUFBaUI7QUFDbkMsWUFBWSxxRUFBZ0IsNkJBQTZCLCtEQUFjO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdFQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0VBQWlCO0FBQ3RDLG1CQUFtQix5REFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0Vib290aC9hZ2VudF9jX2ZyYW1ld29yay9zcmMvcmVhbHRpbWVfY2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi93b3Jrc3BhY2UvYXN0LWRlc2NyaXB0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlbiB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBpc0xpbmtpbmdFcnJvciB9IGZyb20gJy4uL3N5bnRheC10cmVlLmpzJztcbmltcG9ydCB7IGdldERvY3VtZW50LCBzdHJlYW1Bc3QsIHN0cmVhbVJlZmVyZW5jZXMgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgdG9Eb2N1bWVudFNlZ21lbnQgfSBmcm9tICcuLi91dGlscy9jc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgaW50ZXJydXB0QW5kQ2hlY2sgfSBmcm9tICcuLi91dGlscy9wcm9taXNlLXV0aWxzLmpzJztcbmltcG9ydCB7IFVyaVV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvdXJpLXV0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBEZWZhdWx0QXN0Tm9kZURlc2NyaXB0aW9uUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuYXN0Tm9kZUxvY2F0b3IgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuQXN0Tm9kZUxvY2F0b3I7XG4gICAgICAgIHRoaXMubmFtZVByb3ZpZGVyID0gc2VydmljZXMucmVmZXJlbmNlcy5OYW1lUHJvdmlkZXI7XG4gICAgfVxuICAgIGNyZWF0ZURlc2NyaXB0aW9uKG5vZGUsIG5hbWUsIGRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGRvY3VtZW50ICE9PSBudWxsICYmIGRvY3VtZW50ICE9PSB2b2lkIDAgPyBkb2N1bWVudCA6IGdldERvY3VtZW50KG5vZGUpO1xuICAgICAgICBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiAobmFtZSA9IHRoaXMubmFtZVByb3ZpZGVyLmdldE5hbWUobm9kZSkpO1xuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5hc3ROb2RlTG9jYXRvci5nZXRBc3ROb2RlUGF0aChub2RlKTtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vZGUgYXQgcGF0aCAke3BhdGh9IGhhcyBubyBuYW1lLmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuYW1lTm9kZVNlZ21lbnQ7XG4gICAgICAgIGNvbnN0IG5hbWVTZWdtZW50R2V0dGVyID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiBuYW1lTm9kZVNlZ21lbnQgIT09IG51bGwgJiYgbmFtZU5vZGVTZWdtZW50ICE9PSB2b2lkIDAgPyBuYW1lTm9kZVNlZ21lbnQgOiAobmFtZU5vZGVTZWdtZW50ID0gdG9Eb2N1bWVudFNlZ21lbnQoKF9hID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZU5vZGUobm9kZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5vZGUuJGNzdE5vZGUpKTsgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZ2V0IG5hbWVTZWdtZW50KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lU2VnbWVudEdldHRlcigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlbGVjdGlvblNlZ21lbnQ6IHRvRG9jdW1lbnRTZWdtZW50KG5vZGUuJGNzdE5vZGUpLFxuICAgICAgICAgICAgdHlwZTogbm9kZS4kdHlwZSxcbiAgICAgICAgICAgIGRvY3VtZW50VXJpOiBkb2MudXJpLFxuICAgICAgICAgICAgcGF0aFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEZWZhdWx0UmVmZXJlbmNlRGVzY3JpcHRpb25Qcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5ub2RlTG9jYXRvciA9IHNlcnZpY2VzLndvcmtzcGFjZS5Bc3ROb2RlTG9jYXRvcjtcbiAgICB9XG4gICAgYXN5bmMgY3JlYXRlRGVzY3JpcHRpb25zKGRvY3VtZW50LCBjYW5jZWxUb2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgY29uc3QgZGVzY3IgPSBbXTtcbiAgICAgICAgY29uc3Qgcm9vdE5vZGUgPSBkb2N1bWVudC5wYXJzZVJlc3VsdC52YWx1ZTtcbiAgICAgICAgZm9yIChjb25zdCBhc3ROb2RlIG9mIHN0cmVhbUFzdChyb290Tm9kZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IGludGVycnVwdEFuZENoZWNrKGNhbmNlbFRva2VuKTtcbiAgICAgICAgICAgIHN0cmVhbVJlZmVyZW5jZXMoYXN0Tm9kZSkuZmlsdGVyKHJlZkluZm8gPT4gIWlzTGlua2luZ0Vycm9yKHJlZkluZm8pKS5mb3JFYWNoKHJlZkluZm8gPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IENvbnNpZGVyIGxvZ2dpbmcgYSB3YXJuaW5nIG9yIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIERvY3VtZW50U3RhdGUgaXMgPCB0aGFuIExpbmtlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5jcmVhdGVEZXNjcmlwdGlvbihyZWZJbmZvKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3IucHVzaChkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc2NyO1xuICAgIH1cbiAgICBjcmVhdGVEZXNjcmlwdGlvbihyZWZJbmZvKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGVEZXNjciA9IHJlZkluZm8ucmVmZXJlbmNlLiRub2RlRGVzY3JpcHRpb247XG4gICAgICAgIGNvbnN0IHJlZkNzdE5vZGUgPSByZWZJbmZvLnJlZmVyZW5jZS4kcmVmTm9kZTtcbiAgICAgICAgaWYgKCF0YXJnZXROb2RlRGVzY3IgfHwgIXJlZkNzdE5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZG9jVXJpID0gZ2V0RG9jdW1lbnQocmVmSW5mby5jb250YWluZXIpLnVyaTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNvdXJjZVVyaTogZG9jVXJpLFxuICAgICAgICAgICAgc291cmNlUGF0aDogdGhpcy5ub2RlTG9jYXRvci5nZXRBc3ROb2RlUGF0aChyZWZJbmZvLmNvbnRhaW5lciksXG4gICAgICAgICAgICB0YXJnZXRVcmk6IHRhcmdldE5vZGVEZXNjci5kb2N1bWVudFVyaSxcbiAgICAgICAgICAgIHRhcmdldFBhdGg6IHRhcmdldE5vZGVEZXNjci5wYXRoLFxuICAgICAgICAgICAgc2VnbWVudDogdG9Eb2N1bWVudFNlZ21lbnQocmVmQ3N0Tm9kZSksXG4gICAgICAgICAgICBsb2NhbDogVXJpVXRpbHMuZXF1YWxzKHRhcmdldE5vZGVEZXNjci5kb2N1bWVudFVyaSwgZG9jVXJpKVxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzdC1kZXNjcmlwdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeLocator: () => (/* binding */ DefaultAstNodeLocator)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass DefaultAstNodeLocator {\n    constructor() {\n        this.segmentSeparator = '/';\n        this.indexSeparator = '@';\n    }\n    getAstNodePath(node) {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n    getPathSegment({ $containerProperty, $containerIndex }) {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n    getAstNode(node, path) {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = previousValue[property];\n                return array === null || array === void 0 ? void 0 : array[arrayIndex];\n            }\n            return previousValue[currentValue];\n        }, node);\n    }\n}\n//# sourceMappingURL=ast-node-locator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9hc3Qtbm9kZS1sb2NhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQ0FBcUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvRWJvb3RoL2FnZW50X2NfZnJhbWV3b3JrL3NyYy9yZWFsdGltZV9jbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9hc3Qtbm9kZS1sb2NhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0QXN0Tm9kZUxvY2F0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNlZ21lbnRTZXBhcmF0b3IgPSAnLyc7XG4gICAgICAgIHRoaXMuaW5kZXhTZXBhcmF0b3IgPSAnQCc7XG4gICAgfVxuICAgIGdldEFzdE5vZGVQYXRoKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUuJGNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUGF0aCA9IHRoaXMuZ2V0QXN0Tm9kZVBhdGgobm9kZS4kY29udGFpbmVyKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1NlZ21lbnQgPSB0aGlzLmdldFBhdGhTZWdtZW50KG5vZGUpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZVBhdGggPSBjb250YWluZXJQYXRoICsgdGhpcy5zZWdtZW50U2VwYXJhdG9yICsgbmV3U2VnbWVudDtcbiAgICAgICAgICAgIHJldHVybiBub2RlUGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGdldFBhdGhTZWdtZW50KHsgJGNvbnRhaW5lclByb3BlcnR5LCAkY29udGFpbmVySW5kZXggfSkge1xuICAgICAgICBpZiAoISRjb250YWluZXJQcm9wZXJ0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyAnJGNvbnRhaW5lclByb3BlcnR5JyBpbiBBU1Qgbm9kZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRjb250YWluZXJJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGNvbnRhaW5lclByb3BlcnR5ICsgdGhpcy5pbmRleFNlcGFyYXRvciArICRjb250YWluZXJJbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGNvbnRhaW5lclByb3BlcnR5O1xuICAgIH1cbiAgICBnZXRBc3ROb2RlKG5vZGUsIHBhdGgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KHRoaXMuc2VnbWVudFNlcGFyYXRvcik7XG4gICAgICAgIHJldHVybiBzZWdtZW50cy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwcmV2aW91c1ZhbHVlIHx8IGN1cnJlbnRWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5SW5kZXggPSBjdXJyZW50VmFsdWUuaW5kZXhPZih0aGlzLmluZGV4U2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eUluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gY3VycmVudFZhbHVlLnN1YnN0cmluZygwLCBwcm9wZXJ0eUluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUluZGV4ID0gcGFyc2VJbnQoY3VycmVudFZhbHVlLnN1YnN0cmluZyhwcm9wZXJ0eUluZGV4ICsgMSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gcHJldmlvdXNWYWx1ZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5ID09PSBudWxsIHx8IGFycmF5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcnJheVthcnJheUluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlW2N1cnJlbnRWYWx1ZV07XG4gICAgICAgIH0sIG5vZGUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzdC1ub2RlLWxvY2F0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultConfigurationProvider: () => (/* binding */ DefaultConfigurationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Base configuration provider for building up other configuration providers\n */\nclass DefaultConfigurationProvider {\n    constructor(services) {\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.settings = {};\n        this.workspaceConfig = false;\n        this.onConfigurationSectionUpdateEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a, _b;\n        this.workspaceConfig = (_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : false;\n    }\n    async initialized(params) {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => ({\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                }));\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change) {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            const configuration = change.settings[section];\n            this.updateSectionConfiguration(section, configuration);\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\n        });\n    }\n    updateSectionConfiguration(section, configuration) {\n        this.settings[section] = configuration;\n    }\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language, configuration) {\n        await this.ready;\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n    toSectionName(languageId) {\n        return `${languageId}`;\n    }\n    get onConfigurationSectionUpdate() {\n        return this.onConfigurationSectionUpdateEmitter.event;\n    }\n}\n//# sourceMappingURL=configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9jb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEM7QUFDUztBQUNyRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMEJBQTBCLDZEQUFRO0FBQ2xDO0FBQ0E7QUFDQSx1REFBdUQsb0RBQU87QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCO0FBQ3BGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2NvbmZpZ3VyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjIgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL3V0aWxzL2V2ZW50LmpzJztcbmltcG9ydCB7IERlZmVycmVkIH0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzZS11dGlscy5qcyc7XG4vKipcbiAqIEJhc2UgY29uZmlndXJhdGlvbiBwcm92aWRlciBmb3IgYnVpbGRpbmcgdXAgb3RoZXIgY29uZmlndXJhdGlvbiBwcm92aWRlcnNcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRDb25maWd1cmF0aW9uUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuX3JlYWR5ID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2VDb25maWcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNvbmZpZ3VyYXRpb25TZWN0aW9uVXBkYXRlRW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc2VydmljZVJlZ2lzdHJ5ID0gc2VydmljZXMuU2VydmljZVJlZ2lzdHJ5O1xuICAgIH1cbiAgICBnZXQgcmVhZHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkeS5wcm9taXNlO1xuICAgIH1cbiAgICBpbml0aWFsaXplKHBhcmFtcykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLndvcmtzcGFjZUNvbmZpZyA9IChfYiA9IChfYSA9IHBhcmFtcy5jYXBhYmlsaXRpZXMud29ya3NwYWNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlndXJhdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIGluaXRpYWxpemVkKHBhcmFtcykge1xuICAgICAgICBpZiAodGhpcy53b3Jrc3BhY2VDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMucmVnaXN0ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXJhbXMucmVnaXN0ZXIoLi4uKSBpcyBhIGZ1bmN0aW9uIHRvIGJlIHByb3ZpZGVkIGJ5IHRoZSBjYWxsaW5nIGxhbmd1YWdlIHNlcnZlciBmb3IgdGhlIHNha2Ugb2ZcbiAgICAgICAgICAgICAgICAvLyAgZGVjb3VwbGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gdGhlIGNvbmNyZXRlIExTUCBpbXBsZW1lbnRhdGlvbnMsIHNwZWNpZmljYWxseSB0aGUgTFNQIENvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICBjb25zdCBsYW5ndWFnZXMgPSB0aGlzLnNlcnZpY2VSZWdpc3RyeS5hbGw7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnJlZ2lzdGVyKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTGlzdGVuIHRvIGNvbmZpZ3VyYXRpb24gY2hhbmdlcyBmb3IgYWxsIGxhbmd1YWdlc1xuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uOiBsYW5ndWFnZXMubWFwKGxhbmcgPT4gdGhpcy50b1NlY3Rpb25OYW1lKGxhbmcuTGFuZ3VhZ2VNZXRhRGF0YS5sYW5ndWFnZUlkKSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMuZmV0Y2hDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyYW1zLmZldGNoQ29uZmlndXJhdGlvbiguLi4pIGlzIGEgZnVuY3Rpb24gdG8gYmUgcHJvdmlkZWQgYnkgdGhlIGNhbGxpbmcgbGFuZ3VhZ2Ugc2VydmVyIGZvciB0aGUgc2FrZSBvZlxuICAgICAgICAgICAgICAgIC8vICBkZWNvdXBsaW5nIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSB0aGUgY29uY3JldGUgTFNQIGltcGxlbWVudGF0aW9ucywgc3BlY2lmaWNhbGx5IHRoZSBMU1AgQ29ubmVjdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZ1RvVXBkYXRlID0gdGhpcy5zZXJ2aWNlUmVnaXN0cnkuYWxsLm1hcChsYW5nID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZldGNoIHRoZSBjb25maWd1cmF0aW9uIGNoYW5nZXMgZm9yIGFsbCBsYW5ndWFnZXNcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbjogdGhpcy50b1NlY3Rpb25OYW1lKGxhbmcuTGFuZ3VhZ2VNZXRhRGF0YS5sYW5ndWFnZUlkKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAvLyBnZXQgd29ya3NwYWNlIGNvbmZpZ3VyYXRpb25zIChkZWZhdWx0IHNjb3BlIFVSSSlcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWdzID0gYXdhaXQgcGFyYW1zLmZldGNoQ29uZmlndXJhdGlvbihjb25maWdUb1VwZGF0ZSk7XG4gICAgICAgICAgICAgICAgY29uZmlnVG9VcGRhdGUuZm9yRWFjaCgoY29uZiwgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2VjdGlvbkNvbmZpZ3VyYXRpb24oY29uZi5zZWN0aW9uLCBjb25maWdzW2lkeF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlYWR5LnJlc29sdmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFVwZGF0ZXMgdGhlIGNhY2hlZCBjb25maWd1cmF0aW9ucyB1c2luZyB0aGUgYGNoYW5nZWAgbm90aWZpY2F0aW9uIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhbmdlIFRoZSBwYXJhbWV0ZXJzIG9mIGEgY2hhbmdlIGNvbmZpZ3VyYXRpb24gbm90aWZpY2F0aW9uLlxuICAgICAqIGBzZXR0aW5nc2AgcHJvcGVydHkgb2YgdGhlIGNoYW5nZSBvYmplY3QgY291bGQgYmUgZXhwcmVzc2VkIGFzIGBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBhbnk+PmBcbiAgICAgKi9cbiAgICB1cGRhdGVDb25maWd1cmF0aW9uKGNoYW5nZSkge1xuICAgICAgICBpZiAoIWNoYW5nZS5zZXR0aW5ncykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5rZXlzKGNoYW5nZS5zZXR0aW5ncykuZm9yRWFjaChzZWN0aW9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBjaGFuZ2Uuc2V0dGluZ3Nbc2VjdGlvbl07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlY3Rpb25Db25maWd1cmF0aW9uKHNlY3Rpb24sIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5vbkNvbmZpZ3VyYXRpb25TZWN0aW9uVXBkYXRlRW1pdHRlci5maXJlKHsgc2VjdGlvbiwgY29uZmlndXJhdGlvbiB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZVNlY3Rpb25Db25maWd1cmF0aW9uKHNlY3Rpb24sIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgdGhpcy5zZXR0aW5nc1tzZWN0aW9uXSA9IGNvbmZpZ3VyYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICogUmV0dXJucyBhIGNvbmZpZ3VyYXRpb24gdmFsdWUgc3RvcmVkIGZvciB0aGUgZ2l2ZW4gbGFuZ3VhZ2UuXG4gICAgKlxuICAgICogQHBhcmFtIGxhbmd1YWdlIFRoZSBsYW5ndWFnZSBpZFxuICAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb24gQ29uZmlndXJhdGlvbiBuYW1lXG4gICAgKi9cbiAgICBhc3luYyBnZXRDb25maWd1cmF0aW9uKGxhbmd1YWdlLCBjb25maWd1cmF0aW9uKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVhZHk7XG4gICAgICAgIGNvbnN0IHNlY3Rpb25OYW1lID0gdGhpcy50b1NlY3Rpb25OYW1lKGxhbmd1YWdlKTtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Nbc2VjdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1tzZWN0aW9uTmFtZV1bY29uZmlndXJhdGlvbl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TZWN0aW9uTmFtZShsYW5ndWFnZUlkKSB7XG4gICAgICAgIHJldHVybiBgJHtsYW5ndWFnZUlkfWA7XG4gICAgfVxuICAgIGdldCBvbkNvbmZpZ3VyYXRpb25TZWN0aW9uVXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbmZpZ3VyYXRpb25TZWN0aW9uVXBkYXRlRW1pdHRlci5ldmVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWd1cmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentBuilder: () => (/* binding */ DefaultDocumentBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/disposable.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validation/validation-registry.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _documents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\n\nclass DefaultDocumentBuilder {\n    constructor(services) {\n        this.updateBuildOptions = {\n            // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n            validation: {\n                categories: ['built-in', 'fast']\n            }\n        };\n        this.updateListeners = [];\n        this.buildPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.documentPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.buildState = new Map();\n        this.documentBuildWaiters = new Map();\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    async build(documents, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        var _a, _b;\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                }\n                else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = (_a = buildState === null || buildState === void 0 ? void 0 : buildState.result) === null || _a === void 0 ? void 0 : _a.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = (_b = options.validation.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: Object.assign(Object.assign({}, options.validation), { categories })\n                                },\n                                result: buildState.result\n                            });\n                            document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            }\n            else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n    async update(changed, deleted, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            linker.unlink(doc);\n            doc.state = Math.min(doc.state, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes);\n            doc.diagnostics = undefined;\n        });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n        // Collect and sort all documents that we should rebuild\n        const rebuildDocuments = this.sortDocuments(this.langiumDocuments.all\n            .filter(doc => {\n            var _a;\n            // This includes those that were reported as changed and those that we selected for relinking\n            return doc.state < _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !((_a = this.buildState.get(doc.uri.toString())) === null || _a === void 0 ? void 0 : _a.completed);\n        })\n            .toArray());\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n    async emitUpdate(changed, deleted) {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n    /**\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\n     *\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\n     * in files that are currently not opened in the editor.\n     */\n    sortDocuments(documents) {\n        let left = 0;\n        let right = documents.length - 1;\n        while (left < right) {\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\n                left++;\n            }\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\n                right--;\n            }\n            if (left < right) {\n                [documents[left], documents[right]] = [documents[right], documents[left]];\n            }\n        }\n        return documents;\n    }\n    hasTextDocument(doc) {\n        var _a;\n        return Boolean((_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(doc.uri));\n    }\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    shouldRelink(document, changedUris) {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n    onUpdate(callback) {\n        this.updateListeners.push(callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     *\n     * @param documents The documents to build.\n     * @param options the {@link BuildOptions} to use.\n     * @param cancelToken A cancellation token that can be used to cancel the build.\n     * @returns A promise that resolves when the build is done.\n     */\n    async buildDocuments(documents, options, cancelToken) {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Parsed, cancelToken, doc => this.langiumDocumentFactory.update(doc, cancelToken));\n        // 1. Index content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedContent, cancelToken, doc => this.indexManager.updateContent(doc, cancelToken));\n        // 2. Compute scopes\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes, cancelToken, async (doc) => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences, cancelToken, doc => this.indexManager.updateReferences(doc, cancelToken));\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated, cancelToken, doc => this.validate(doc, cancelToken));\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n    /**\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\n     *\n     * @param documents collection of documents to be built\n     * @param options the {@link BuildOptions} to use\n     */\n    prepareBuild(documents, options) {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state === null || state === void 0 ? void 0 : state.result\n                });\n            }\n        }\n    }\n    /**\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\n     *\n     * @param documents The array of documents to process.\n     * @param targetState The target {@link DocumentState} to bring the documents to.\n     * @param cancelToken A token that can be used to cancel the operation.\n     * @param callback A function to be called for each document.\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\n     */\n    async runCancelable(documents, targetState, cancelToken, callback) {\n        const filtered = documents.filter(doc => doc.state < targetState);\n        for (const document of filtered) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await callback(document);\n            document.state = targetState;\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\n        }\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\n        // For example, this happens in case the cancellation triggers between the processing of two documents\n        // Or files that were picked up during the workspace initialization\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n    onBuildPhase(targetState, callback) {\n        this.buildPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n    onDocumentPhase(targetState, callback) {\n        this.documentPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            this.documentPhaseListeners.delete(targetState, callback);\n        });\n    }\n    waitUntil(state, uriOrToken, cancelToken) {\n        let uri = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        }\n        else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken !== null && cancelToken !== void 0 ? cancelToken : (cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None);\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        }\n        else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document === null || document === void 0 ? void 0 : document.uri);\n                }\n                else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n            });\n        });\n    }\n    async notifyDocumentPhase(document, state, cancelToken) {\n        const listeners = this.documentPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            try {\n                await listener(document, cancelToken);\n            }\n            catch (err) {\n                // Ignore cancellation errors\n                // We want to finish the listeners before throwing\n                if (!(0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.isOperationCancelled)(err)) {\n                    throw err;\n                }\n            }\n        }\n    }\n    async notifyBuildPhase(documents, state, cancelToken) {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    shouldValidate(document) {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    async validate(document, cancelToken) {\n        var _a, _b;\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        }\n        else {\n            document.diagnostics = diagnostics;\n        }\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            (_a = state.result) !== null && _a !== void 0 ? _a : (state.result = {});\n            const newCategories = (_b = options === null || options === void 0 ? void 0 : options.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            }\n            else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n    getBuildOptions(document) {\n        var _a, _b;\n        return (_b = (_a = this.buildState.get(document.uri.toString())) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};\n    }\n}\n//# sourceMappingURL=document-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLangiumDocumentFactory: () => (/* binding */ DefaultLangiumDocumentFactory),\n/* harmony export */   DefaultLangiumDocuments: () => (/* binding */ DefaultLangiumDocuments),\n/* harmony export */   DocumentState: () => (/* binding */ DocumentState),\n/* harmony export */   TextDocument: () => (/* reexport safe */ vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/../../node_modules/.pnpm/vscode-languageserver-textdocument@1.0.12/node_modules/vscode-languageserver-textdocument/lib/esm/main.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\n\n\n\n\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nvar DocumentState;\n(function (DocumentState) {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    DocumentState[DocumentState[\"Changed\"] = 0] = \"Changed\";\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    DocumentState[DocumentState[\"Parsed\"] = 1] = \"Parsed\";\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    DocumentState[DocumentState[\"IndexedContent\"] = 2] = \"IndexedContent\";\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    DocumentState[DocumentState[\"ComputedScopes\"] = 3] = \"ComputedScopes\";\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    DocumentState[DocumentState[\"Linked\"] = 4] = \"Linked\";\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    DocumentState[DocumentState[\"IndexedReferences\"] = 5] = \"IndexedReferences\";\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    DocumentState[DocumentState[\"Validated\"] = 6] = \"Validated\";\n})(DocumentState || (DocumentState = {}));\nclass DefaultLangiumDocumentFactory {\n    constructor(services) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n    async fromUri(uri, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync(uri, content, cancellationToken);\n    }\n    fromTextDocument(textDocument, uri, token) {\n        uri = uri !== null && uri !== void 0 ? uri : _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(textDocument.uri);\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, textDocument, token);\n        }\n        else {\n            return this.create(uri, textDocument, token);\n        }\n    }\n    fromString(text, uri, token) {\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, text, token);\n        }\n        else {\n            return this.create(uri, text, token);\n        }\n    }\n    fromModel(model, uri) {\n        return this.create(uri, { $model: model });\n    }\n    create(uri, content, options) {\n        if (typeof content === 'string') {\n            const parseResult = this.parse(uri, content, options);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument(parseResult, uri);\n        }\n        else {\n            const parseResult = this.parse(uri, content.getText(), options);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    async createAsync(uri, content, cancelToken) {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync(uri, content, cancelToken);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else {\n            const parseResult = await this.parseAsync(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    createLangiumDocument(parseResult, uri, textDocument, text) {\n        let document;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        parseResult.value.$document = document;\n        return document;\n    }\n    async update(document, cancellationToken) {\n        var _a, _b;\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = (_a = document.parseResult.value.$cstNode) === null || _a === void 0 ? void 0 : _a.root.fullText;\n        const textDocument = (_b = this.textDocuments) === null || _b === void 0 ? void 0 : _b.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n        if (textDocument) {\n            Object.defineProperty(document, 'textDocument', {\n                value: textDocument\n            });\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(document, 'textDocument', {\n                get: textDocumentGetter\n            });\n        }\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            document.parseResult.value.$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n    parse(uri, text, options) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse(text, options);\n    }\n    parseAsync(uri, text, cancellationToken) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse(text, cancellationToken);\n    }\n    createTextDocumentGetter(uri, text) {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc = undefined;\n        return () => {\n            return textDoc !== null && textDoc !== void 0 ? textDoc : (textDoc = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : ''));\n        };\n    }\n}\nclass DefaultLangiumDocuments {\n    constructor(services) {\n        this.documentMap = new Map();\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get all() {\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.documentMap.values());\n    }\n    addDocument(document) {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n    getDocument(uri) {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n    async getOrCreateDocument(uri, cancellationToken) {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n    createDocument(uri, text, cancellationToken) {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        }\n        else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n    hasDocument(uri) {\n        return this.documentMap.has(uri.toString());\n    }\n    invalidateDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\n            linker.unlink(langiumDoc);\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n    deleteDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n//# sourceMappingURL=documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmptyFileSystem: () => (/* binding */ EmptyFileSystem),\n/* harmony export */   EmptyFileSystemProvider: () => (/* binding */ EmptyFileSystemProvider)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass EmptyFileSystemProvider {\n    readFile() {\n        throw new Error('No file system is available.');\n    }\n    async readDirectory() {\n        return [];\n    }\n}\nconst EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n//# sourceMappingURL=file-system-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2ZpbGUtc3lzdGVtLXByb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmV4cG9ydCBjbGFzcyBFbXB0eUZpbGVTeXN0ZW1Qcm92aWRlciB7XG4gICAgcmVhZEZpbGUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZmlsZSBzeXN0ZW0gaXMgYXZhaWxhYmxlLicpO1xuICAgIH1cbiAgICBhc3luYyByZWFkRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEVtcHR5RmlsZVN5c3RlbSA9IHtcbiAgICBmaWxlU3lzdGVtUHJvdmlkZXI6ICgpID0+IG5ldyBFbXB0eUZpbGVTeXN0ZW1Qcm92aWRlcigpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1zeXN0ZW0tcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIndexManager: () => (/* binding */ DefaultIndexManager)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nclass DefaultIndexManager {\n    constructor(services) {\n        /**\n         * The symbol index stores all `AstNodeDescription` items exported by a document.\n         * The key used in this map is the string representation of the specific document URI.\n         */\n        this.symbolIndex = new Map();\n        /**\n         * This is a cache for the `allElements()` method.\n         * It caches the descriptions from `symbolIndex` grouped by types.\n         */\n        this.symbolByTypeIndex = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.ContextCache();\n        /**\n         * This index keeps track of all `ReferenceDescription` items exported by a document.\n         * This is used to compute which elements are affected by a document change\n         * and for finding references to an AST node.\n         */\n        this.referenceIndex = new Map();\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n    findAllReferences(targetNode, astNodePath) {\n        const targetDocUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(targetNode).uri;\n        const result = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (_utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(result);\n    }\n    allElements(nodeType, uris) {\n        let documentUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n    getFileDescriptions(uri, nodeType) {\n        var _a;\n        if (!nodeType) {\n            return (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            var _a;\n            const allFileDescriptions = (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n    remove(uri) {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n    async updateContent(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n    async updateReferences(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n    isAffected(document, changedUris) {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n}\n//# sourceMappingURL=index-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9pbmRleC1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDRDtBQUNVO0FBQ2pCO0FBQ0s7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywyREFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGdFQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5REFBUTtBQUM1QjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxlQUFlLHdEQUFNO0FBQ3JCO0FBQ0E7QUFDQSwyQkFBMkIsd0RBQU07QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxxRUFBaUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHFFQUFpQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL0Vib290aC9hZ2VudF9jX2ZyYW1ld29yay9zcmMvcmVhbHRpbWVfY2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi93b3Jrc3BhY2UvaW5kZXgtbWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3V0aWxzL2FzdC11dGlscy5qcyc7XG5pbXBvcnQgeyBDb250ZXh0Q2FjaGUgfSBmcm9tICcuLi91dGlscy9jYWNoaW5nLmpzJztcbmltcG9ydCB7IENhbmNlbGxhdGlvblRva2VuIH0gZnJvbSAnLi4vdXRpbHMvY2FuY2VsbGF0aW9uLmpzJztcbmltcG9ydCB7IHN0cmVhbSB9IGZyb20gJy4uL3V0aWxzL3N0cmVhbS5qcyc7XG5pbXBvcnQgeyBVcmlVdGlscyB9IGZyb20gJy4uL3V0aWxzL3VyaS11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdEluZGV4TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzeW1ib2wgaW5kZXggc3RvcmVzIGFsbCBgQXN0Tm9kZURlc2NyaXB0aW9uYCBpdGVtcyBleHBvcnRlZCBieSBhIGRvY3VtZW50LlxuICAgICAgICAgKiBUaGUga2V5IHVzZWQgaW4gdGhpcyBtYXAgaXMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgc3BlY2lmaWMgZG9jdW1lbnQgVVJJLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zeW1ib2xJbmRleCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXMgYSBjYWNoZSBmb3IgdGhlIGBhbGxFbGVtZW50cygpYCBtZXRob2QuXG4gICAgICAgICAqIEl0IGNhY2hlcyB0aGUgZGVzY3JpcHRpb25zIGZyb20gYHN5bWJvbEluZGV4YCBncm91cGVkIGJ5IHR5cGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zeW1ib2xCeVR5cGVJbmRleCA9IG5ldyBDb250ZXh0Q2FjaGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaW5kZXgga2VlcHMgdHJhY2sgb2YgYWxsIGBSZWZlcmVuY2VEZXNjcmlwdGlvbmAgaXRlbXMgZXhwb3J0ZWQgYnkgYSBkb2N1bWVudC5cbiAgICAgICAgICogVGhpcyBpcyB1c2VkIHRvIGNvbXB1dGUgd2hpY2ggZWxlbWVudHMgYXJlIGFmZmVjdGVkIGJ5IGEgZG9jdW1lbnQgY2hhbmdlXG4gICAgICAgICAqIGFuZCBmb3IgZmluZGluZyByZWZlcmVuY2VzIHRvIGFuIEFTVCBub2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWZlcmVuY2VJbmRleCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kb2N1bWVudHMgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuTGFuZ2l1bURvY3VtZW50cztcbiAgICAgICAgdGhpcy5zZXJ2aWNlUmVnaXN0cnkgPSBzZXJ2aWNlcy5TZXJ2aWNlUmVnaXN0cnk7XG4gICAgICAgIHRoaXMuYXN0UmVmbGVjdGlvbiA9IHNlcnZpY2VzLkFzdFJlZmxlY3Rpb247XG4gICAgfVxuICAgIGZpbmRBbGxSZWZlcmVuY2VzKHRhcmdldE5vZGUsIGFzdE5vZGVQYXRoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldERvY1VyaSA9IGdldERvY3VtZW50KHRhcmdldE5vZGUpLnVyaTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHRoaXMucmVmZXJlbmNlSW5kZXguZm9yRWFjaChkb2NSZWZzID0+IHtcbiAgICAgICAgICAgIGRvY1JlZnMuZm9yRWFjaChyZWZEZXNjciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFVyaVV0aWxzLmVxdWFscyhyZWZEZXNjci50YXJnZXRVcmksIHRhcmdldERvY1VyaSkgJiYgcmVmRGVzY3IudGFyZ2V0UGF0aCA9PT0gYXN0Tm9kZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVmRGVzY3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbShyZXN1bHQpO1xuICAgIH1cbiAgICBhbGxFbGVtZW50cyhub2RlVHlwZSwgdXJpcykge1xuICAgICAgICBsZXQgZG9jdW1lbnRVcmlzID0gc3RyZWFtKHRoaXMuc3ltYm9sSW5kZXgua2V5cygpKTtcbiAgICAgICAgaWYgKHVyaXMpIHtcbiAgICAgICAgICAgIGRvY3VtZW50VXJpcyA9IGRvY3VtZW50VXJpcy5maWx0ZXIodXJpID0+ICF1cmlzIHx8IHVyaXMuaGFzKHVyaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2N1bWVudFVyaXNcbiAgICAgICAgICAgIC5tYXAodXJpID0+IHRoaXMuZ2V0RmlsZURlc2NyaXB0aW9ucyh1cmksIG5vZGVUeXBlKSlcbiAgICAgICAgICAgIC5mbGF0KCk7XG4gICAgfVxuICAgIGdldEZpbGVEZXNjcmlwdGlvbnModXJpLCBub2RlVHlwZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghbm9kZVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnN5bWJvbEluZGV4LmdldCh1cmkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSB0aGlzLnN5bWJvbEJ5VHlwZUluZGV4LmdldCh1cmksIG5vZGVUeXBlLCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBhbGxGaWxlRGVzY3JpcHRpb25zID0gKF9hID0gdGhpcy5zeW1ib2xJbmRleC5nZXQodXJpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgICAgICByZXR1cm4gYWxsRmlsZURlc2NyaXB0aW9ucy5maWx0ZXIoZSA9PiB0aGlzLmFzdFJlZmxlY3Rpb24uaXNTdWJ0eXBlKGUudHlwZSwgbm9kZVR5cGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbnM7XG4gICAgfVxuICAgIHJlbW92ZSh1cmkpIHtcbiAgICAgICAgY29uc3QgdXJpU3RyaW5nID0gdXJpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuc3ltYm9sSW5kZXguZGVsZXRlKHVyaVN0cmluZyk7XG4gICAgICAgIHRoaXMuc3ltYm9sQnlUeXBlSW5kZXguY2xlYXIodXJpU3RyaW5nKTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VJbmRleC5kZWxldGUodXJpU3RyaW5nKTtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlQ29udGVudChkb2N1bWVudCwgY2FuY2VsVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5zZXJ2aWNlUmVnaXN0cnkuZ2V0U2VydmljZXMoZG9jdW1lbnQudXJpKTtcbiAgICAgICAgY29uc3QgZXhwb3J0cyA9IGF3YWl0IHNlcnZpY2VzLnJlZmVyZW5jZXMuU2NvcGVDb21wdXRhdGlvbi5jb21wdXRlRXhwb3J0cyhkb2N1bWVudCwgY2FuY2VsVG9rZW4pO1xuICAgICAgICBjb25zdCB1cmkgPSBkb2N1bWVudC51cmkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5zeW1ib2xJbmRleC5zZXQodXJpLCBleHBvcnRzKTtcbiAgICAgICAgdGhpcy5zeW1ib2xCeVR5cGVJbmRleC5jbGVhcih1cmkpO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVSZWZlcmVuY2VzKGRvY3VtZW50LCBjYW5jZWxUb2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgY29uc3Qgc2VydmljZXMgPSB0aGlzLnNlcnZpY2VSZWdpc3RyeS5nZXRTZXJ2aWNlcyhkb2N1bWVudC51cmkpO1xuICAgICAgICBjb25zdCBpbmRleERhdGEgPSBhd2FpdCBzZXJ2aWNlcy53b3Jrc3BhY2UuUmVmZXJlbmNlRGVzY3JpcHRpb25Qcm92aWRlci5jcmVhdGVEZXNjcmlwdGlvbnMoZG9jdW1lbnQsIGNhbmNlbFRva2VuKTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VJbmRleC5zZXQoZG9jdW1lbnQudXJpLnRvU3RyaW5nKCksIGluZGV4RGF0YSk7XG4gICAgfVxuICAgIGlzQWZmZWN0ZWQoZG9jdW1lbnQsIGNoYW5nZWRVcmlzKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZXMgPSB0aGlzLnJlZmVyZW5jZUluZGV4LmdldChkb2N1bWVudC51cmkudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmICghcmVmZXJlbmNlcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWZlcmVuY2VzLnNvbWUocmVmID0+ICFyZWYubG9jYWwgJiYgY2hhbmdlZFVyaXMuaGFzKHJlZi50YXJnZXRVcmkudG9TdHJpbmcoKSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LW1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceLock: () => (/* binding */ DefaultWorkspaceLock)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultWorkspaceLock {\n    constructor() {\n        this.previousTokenSource = new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n        this.writeQueue = [];\n        this.readQueue = [];\n        this.done = true;\n    }\n    write(action) {\n        this.cancelWrite();\n        const tokenSource = (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.startCancelableOperation)();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n    read(action) {\n        return this.enqueue(this.readQueue, action);\n    }\n    enqueue(queue, action, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.Deferred();\n        const entry = {\n            action,\n            deferred,\n            cancellationToken\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise;\n    }\n    async performNextOperation() {\n        if (!this.done) {\n            return;\n        }\n        const entries = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift());\n        }\n        else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        }\n        else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            }\n            catch (err) {\n                if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                }\n                else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n    cancelWrite() {\n        this.previousTokenSource.cancel();\n    }\n}\n//# sourceMappingURL=workspace-lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS93b3Jrc3BhY2UtbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NGO0FBQ2U7QUFDOUY7QUFDUDtBQUNBLHVDQUF1QywyRUFBdUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MscUVBQWlCO0FBQ2hFLDZCQUE2Qiw2REFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHFDQUFxQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkVBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9FYm9vdGgvYWdlbnRfY19mcmFtZXdvcmsvc3JjL3JlYWx0aW1lX2NsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL3dvcmtzcGFjZS1sb2NrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIzIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IENhbmNlbGxhdGlvblRva2VuLCBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCwgaXNPcGVyYXRpb25DYW5jZWxsZWQsIHN0YXJ0Q2FuY2VsYWJsZU9wZXJhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UtdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRXb3Jrc3BhY2VMb2NrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Rva2VuU291cmNlID0gbmV3IENhbmNlbGxhdGlvblRva2VuU291cmNlKCk7XG4gICAgICAgIHRoaXMud3JpdGVRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLnJlYWRRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgIH1cbiAgICB3cml0ZShhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jYW5jZWxXcml0ZSgpO1xuICAgICAgICBjb25zdCB0b2tlblNvdXJjZSA9IHN0YXJ0Q2FuY2VsYWJsZU9wZXJhdGlvbigpO1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW5Tb3VyY2UgPSB0b2tlblNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5xdWV1ZSh0aGlzLndyaXRlUXVldWUsIGFjdGlvbiwgdG9rZW5Tb3VyY2UudG9rZW4pO1xuICAgIH1cbiAgICByZWFkKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnF1ZXVlKHRoaXMucmVhZFF1ZXVlLCBhY3Rpb24pO1xuICAgIH1cbiAgICBlbnF1ZXVlKHF1ZXVlLCBhY3Rpb24sIGNhbmNlbGxhdGlvblRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGRlZmVycmVkLFxuICAgICAgICAgICAgY2FuY2VsbGF0aW9uVG9rZW5cbiAgICAgICAgfTtcbiAgICAgICAgcXVldWUucHVzaChlbnRyeSk7XG4gICAgICAgIHRoaXMucGVyZm9ybU5leHRPcGVyYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGFzeW5jIHBlcmZvcm1OZXh0T3BlcmF0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMud3JpdGVRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBKdXN0IHBlcmZvcm0gdGhlIG5leHQgd3JpdGUgYWN0aW9uXG4gICAgICAgICAgICBlbnRyaWVzLnB1c2godGhpcy53cml0ZVF1ZXVlLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucmVhZFF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEVtcHR5IHRoZSByZWFkIHF1ZXVlIGFuZCBwZXJmb3JtIGFsbCBhY3Rpb25zIGluIHBhcmFsbGVsXG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goLi4udGhpcy5yZWFkUXVldWUuc3BsaWNlKDAsIHRoaXMucmVhZFF1ZXVlLmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChlbnRyaWVzLm1hcChhc3luYyAoeyBhY3Rpb24sIGRlZmVycmVkLCBjYW5jZWxsYXRpb25Ub2tlbiB9KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYWN0aW9uIHRvIHRoZSBuZXh0IGV2ZW50IGxvb3AgdGljayB2aWEgYFByb21pc2UucmVzb2x2ZSgpYFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gYWN0aW9uKGNhbmNlbGxhdGlvblRva2VuKSk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChpc09wZXJhdGlvbkNhbmNlbGxlZChlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvcGVyYXRpb24gd2FzIGNhbmNlbGxlZCwgd2UgZG9uJ3Qgd2FudCB0byByZWplY3QgdGhlIHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIHRoaXMucGVyZm9ybU5leHRPcGVyYXRpb24oKTtcbiAgICB9XG4gICAgY2FuY2VsV3JpdGUoKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNUb2tlblNvdXJjZS5jYW5jZWwoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3Jrc3BhY2UtbG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceManager: () => (/* binding */ DefaultWorkspaceManager)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\nclass DefaultWorkspaceManager {\n    constructor(services) {\n        this.initialBuildOptions = {};\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    get workspaceFolders() {\n        return this.folders;\n    }\n    initialize(params) {\n        var _a;\n        this.folders = (_a = params.workspaceFolders) !== null && _a !== void 0 ? _a : undefined;\n    }\n    initialized(_params) {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => { var _a; return this.initializeWorkspace((_a = this.folders) !== null && _a !== void 0 ? _a : [], token); });\n    }\n    async initializeWorkspace(folders, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.interruptAndCheck)(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    async performStartup(folders) {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents = [];\n        const collector = (document) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(folders.map(wf => [wf, this.getRootFolder(wf)])\n            .map(async (entry) => this.traverseFolder(...entry, fileExtensions, collector)));\n        this._ready.resolve();\n        return documents;\n    }\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    loadAdditionalDocuments(_folders, _collector) {\n        return Promise.resolve();\n    }\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    getRootFolder(workspaceFolder) {\n        return _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(workspaceFolder.uri);\n    }\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    async traverseFolder(workspaceFolder, folderPath, fileExtensions, collector) {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async (entry) => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                }\n                else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    includeEntry(_workspaceFolder, entry, fileExtensions) {\n        const name = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        }\n        else if (entry.isFile) {\n            const extname = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=workspace-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js\n");

/***/ })

};
;