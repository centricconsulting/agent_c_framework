"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-schema-list@1.5.1";
exports.ids = ["vendor-chunks/prosemirror-schema-list@1.5.1"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar prosemirrorTransform = __webpack_require__(/*! prosemirror-transform */ \"(rsc)/../../node_modules/.pnpm/prosemirror-transform@1.10.4/node_modules/prosemirror-transform/dist/index.cjs\");\nvar prosemirrorModel = __webpack_require__(/*! prosemirror-model */ \"(rsc)/../../node_modules/.pnpm/prosemirror-model@1.25.3/node_modules/prosemirror-model/dist/index.cjs\");\nvar prosemirrorState = __webpack_require__(/*! prosemirror-state */ \"(rsc)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs\");\nvar olDOM = [\"ol\", 0],\n  ulDOM = [\"ul\", 0],\n  liDOM = [\"li\", 0];\nvar orderedList = {\n  attrs: {\n    order: {\n      \"default\": 1,\n      validate: \"number\"\n    }\n  },\n  parseDOM: [{\n    tag: \"ol\",\n    getAttrs: function getAttrs(dom) {\n      return {\n        order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1\n      };\n    }\n  }],\n  toDOM: function toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {\n      start: node.attrs.order\n    }, 0];\n  }\n};\nvar bulletList = {\n  parseDOM: [{\n    tag: \"ul\"\n  }],\n  toDOM: function toDOM() {\n    return ulDOM;\n  }\n};\nvar listItem = {\n  parseDOM: [{\n    tag: \"li\"\n  }],\n  toDOM: function toDOM() {\n    return liDOM;\n  },\n  defining: true\n};\nfunction add(obj, props) {\n  var copy = {};\n  for (var prop in obj) copy[prop] = obj[prop];\n  for (var _prop in props) copy[_prop] = props[_prop];\n  return copy;\n}\nfunction addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {\n      content: \"list_item+\",\n      group: listGroup\n    }),\n    bullet_list: add(bulletList, {\n      content: \"list_item+\",\n      group: listGroup\n    }),\n    list_item: add(listItem, {\n      content: itemContent\n    })\n  });\n}\nfunction wrapInList(listType) {\n  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (state, dispatch) {\n    var _state$selection = state.selection,\n      $from = _state$selection.$from,\n      $to = _state$selection.$to;\n    var range = $from.blockRange($to);\n    if (!range) return false;\n    var tr = dispatch ? state.tr : null;\n    if (!wrapRangeInList(tr, range, listType, attrs)) return false;\n    if (dispatch) dispatch(tr.scrollIntoView());\n    return true;\n  };\n}\nfunction wrapRangeInList(tr, range, listType) {\n  var attrs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var doJoin = false,\n    outerRange = range,\n    doc = range.$from.doc;\n  if (range.depth >= 2 && range.$from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n    if (range.$from.index(range.depth - 1) == 0) return false;\n    var $insert = doc.resolve(range.start - 2);\n    outerRange = new prosemirrorModel.NodeRange($insert, $insert, range.depth);\n    if (range.endIndex < range.parent.childCount) range = new prosemirrorModel.NodeRange(range.$from, doc.resolve(range.$to.end(range.depth)), range.depth);\n    doJoin = true;\n  }\n  var wrap = prosemirrorTransform.findWrapping(outerRange, listType, attrs, range);\n  if (!wrap) return false;\n  if (tr) doWrapInList(tr, range, wrap, doJoin, listType);\n  return true;\n}\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  var content = prosemirrorModel.Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--) content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));\n  var found = 0;\n  for (var _i = 0; _i < wrappers.length; _i++) if (wrappers[_i].type == listType) found = _i + 1;\n  var splitDepth = wrappers.length - found;\n  var splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0),\n    parent = range.parent;\n  for (var _i2 = range.startIndex, e = range.endIndex, first = true; _i2 < e; _i2++, first = false) {\n    if (!first && prosemirrorTransform.canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth);\n      splitPos += 2 * splitDepth;\n    }\n    splitPos += parent.child(_i2).nodeSize;\n  }\n  return tr;\n}\nfunction splitListItem(itemType, itemAttrs) {\n  return function (state, dispatch) {\n    var _state$selection2 = state.selection,\n      $from = _state$selection2.$from,\n      $to = _state$selection2.$to,\n      node = _state$selection2.node;\n    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) return false;\n    var grandParent = $from.node(-1);\n    if (grandParent.type != itemType) return false;\n    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n      if ($from.depth == 3 || $from.node(-3).type != itemType || $from.index(-2) != $from.node(-2).childCount - 1) return false;\n      if (dispatch) {\n        var wrap = prosemirrorModel.Fragment.empty;\n        var depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n        for (var d = $from.depth - depthBefore; d >= $from.depth - 3; d--) wrap = prosemirrorModel.Fragment.from($from.node(d).copy(wrap));\n        var depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n        wrap = wrap.append(prosemirrorModel.Fragment.from(itemType.createAndFill()));\n        var start = $from.before($from.depth - (depthBefore - 1));\n        var _tr = state.tr.replace(start, $from.after(-depthAfter), new prosemirrorModel.Slice(wrap, 4 - depthBefore, 0));\n        var sel = -1;\n        _tr.doc.nodesBetween(start, _tr.doc.content.size, function (node, pos) {\n          if (sel > -1) return false;\n          if (node.isTextblock && node.content.size == 0) sel = pos + 1;\n        });\n        if (sel > -1) _tr.setSelection(prosemirrorState.Selection.near(_tr.doc.resolve(sel)));\n        dispatch(_tr.scrollIntoView());\n      }\n      return true;\n    }\n    var nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    var tr = state.tr[\"delete\"]($from.pos, $to.pos);\n    var types = nextType ? [itemAttrs ? {\n      type: itemType,\n      attrs: itemAttrs\n    } : null, {\n      type: nextType\n    }] : undefined;\n    if (!prosemirrorTransform.canSplit(tr.doc, $from.pos, 2, types)) return false;\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView());\n    return true;\n  };\n}\nfunction splitListItemKeepMarks(itemType, itemAttrs) {\n  var split = splitListItem(itemType, itemAttrs);\n  return function (state, dispatch) {\n    return split(state, dispatch && function (tr) {\n      var marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n      if (marks) tr.ensureMarks(marks);\n      dispatch(tr);\n    });\n  };\n}\nfunction liftListItem(itemType) {\n  return function (state, dispatch) {\n    var _state$selection3 = state.selection,\n      $from = _state$selection3.$from,\n      $to = _state$selection3.$to;\n    var range = $from.blockRange($to, function (node) {\n      return node.childCount > 0 && node.firstChild.type == itemType;\n    });\n    if (!range) return false;\n    if (!dispatch) return true;\n    if ($from.node(range.depth - 1).type == itemType) return liftToOuterList(state, dispatch, itemType, range);else return liftOutOfList(state, dispatch, range);\n  };\n}\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  var tr = state.tr,\n    end = range.end,\n    endOfList = range.$to.end(range.depth);\n  if (end < endOfList) {\n    tr.step(new prosemirrorTransform.ReplaceAroundStep(end - 1, endOfList, end, endOfList, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n    range = new prosemirrorModel.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n  }\n  var target = prosemirrorTransform.liftTarget(range);\n  if (target == null) return false;\n  tr.lift(range, target);\n  var $after = tr.doc.resolve(tr.mapping.map(end, -1) - 1);\n  if (prosemirrorTransform.canJoin(tr.doc, $after.pos) && $after.nodeBefore.type == $after.nodeAfter.type) tr.join($after.pos);\n  dispatch(tr.scrollIntoView());\n  return true;\n}\nfunction liftOutOfList(state, dispatch, range) {\n  var tr = state.tr,\n    list = range.parent;\n  for (var pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize;\n    tr[\"delete\"](pos - 1, pos + 1);\n  }\n  var $start = tr.doc.resolve(range.start),\n    item = $start.nodeAfter;\n  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize) return false;\n  var atStart = range.startIndex == 0,\n    atEnd = range.endIndex == list.childCount;\n  var parent = $start.node(-1),\n    indexBefore = $start.index(-1);\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list)))) return false;\n  var start = $start.pos,\n    end = start + item.nodeSize;\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new prosemirrorModel.Slice((atStart ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))).append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n  dispatch(tr.scrollIntoView());\n  return true;\n}\nfunction sinkListItem(itemType) {\n  return function (state, dispatch) {\n    var _state$selection4 = state.selection,\n      $from = _state$selection4.$from,\n      $to = _state$selection4.$to;\n    var range = $from.blockRange($to, function (node) {\n      return node.childCount > 0 && node.firstChild.type == itemType;\n    });\n    if (!range) return false;\n    var startIndex = range.startIndex;\n    if (startIndex == 0) return false;\n    var parent = range.parent,\n      nodeBefore = parent.child(startIndex - 1);\n    if (nodeBefore.type != itemType) return false;\n    if (dispatch) {\n      var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n      var inner = prosemirrorModel.Fragment.from(nestedBefore ? itemType.create() : null);\n      var slice = new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, prosemirrorModel.Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);\n      var before = range.start,\n        after = range.end;\n      dispatch(state.tr.step(new prosemirrorTransform.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true)).scrollIntoView());\n    }\n    return true;\n  };\n}\nexports.addListNodes = addListNodes;\nexports.bulletList = bulletList;\nexports.liftListItem = liftListItem;\nexports.listItem = listItem;\nexports.orderedList = orderedList;\nexports.sinkListItem = sinkListItem;\nexports.splitListItem = splitListItem;\nexports.splitListItemKeepMarks = splitListItemKeepMarks;\nexports.wrapInList = wrapInList;\nexports.wrapRangeInList = wrapRangeInList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar prosemirrorTransform = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/../../node_modules/.pnpm/prosemirror-transform@1.10.4/node_modules/prosemirror-transform/dist/index.cjs\");\nvar prosemirrorModel = __webpack_require__(/*! prosemirror-model */ \"(ssr)/../../node_modules/.pnpm/prosemirror-model@1.25.3/node_modules/prosemirror-model/dist/index.cjs\");\nvar prosemirrorState = __webpack_require__(/*! prosemirror-state */ \"(ssr)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs\");\nvar olDOM = [\"ol\", 0],\n  ulDOM = [\"ul\", 0],\n  liDOM = [\"li\", 0];\nvar orderedList = {\n  attrs: {\n    order: {\n      \"default\": 1,\n      validate: \"number\"\n    }\n  },\n  parseDOM: [{\n    tag: \"ol\",\n    getAttrs: function getAttrs(dom) {\n      return {\n        order: dom.hasAttribute(\"start\") ? +dom.getAttribute(\"start\") : 1\n      };\n    }\n  }],\n  toDOM: function toDOM(node) {\n    return node.attrs.order == 1 ? olDOM : [\"ol\", {\n      start: node.attrs.order\n    }, 0];\n  }\n};\nvar bulletList = {\n  parseDOM: [{\n    tag: \"ul\"\n  }],\n  toDOM: function toDOM() {\n    return ulDOM;\n  }\n};\nvar listItem = {\n  parseDOM: [{\n    tag: \"li\"\n  }],\n  toDOM: function toDOM() {\n    return liDOM;\n  },\n  defining: true\n};\nfunction add(obj, props) {\n  var copy = {};\n  for (var prop in obj) copy[prop] = obj[prop];\n  for (var _prop in props) copy[_prop] = props[_prop];\n  return copy;\n}\nfunction addListNodes(nodes, itemContent, listGroup) {\n  return nodes.append({\n    ordered_list: add(orderedList, {\n      content: \"list_item+\",\n      group: listGroup\n    }),\n    bullet_list: add(bulletList, {\n      content: \"list_item+\",\n      group: listGroup\n    }),\n    list_item: add(listItem, {\n      content: itemContent\n    })\n  });\n}\nfunction wrapInList(listType) {\n  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (state, dispatch) {\n    var _state$selection = state.selection,\n      $from = _state$selection.$from,\n      $to = _state$selection.$to;\n    var range = $from.blockRange($to);\n    if (!range) return false;\n    var tr = dispatch ? state.tr : null;\n    if (!wrapRangeInList(tr, range, listType, attrs)) return false;\n    if (dispatch) dispatch(tr.scrollIntoView());\n    return true;\n  };\n}\nfunction wrapRangeInList(tr, range, listType) {\n  var attrs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var doJoin = false,\n    outerRange = range,\n    doc = range.$from.doc;\n  if (range.depth >= 2 && range.$from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {\n    if (range.$from.index(range.depth - 1) == 0) return false;\n    var $insert = doc.resolve(range.start - 2);\n    outerRange = new prosemirrorModel.NodeRange($insert, $insert, range.depth);\n    if (range.endIndex < range.parent.childCount) range = new prosemirrorModel.NodeRange(range.$from, doc.resolve(range.$to.end(range.depth)), range.depth);\n    doJoin = true;\n  }\n  var wrap = prosemirrorTransform.findWrapping(outerRange, listType, attrs, range);\n  if (!wrap) return false;\n  if (tr) doWrapInList(tr, range, wrap, doJoin, listType);\n  return true;\n}\nfunction doWrapInList(tr, range, wrappers, joinBefore, listType) {\n  var content = prosemirrorModel.Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--) content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));\n  var found = 0;\n  for (var _i = 0; _i < wrappers.length; _i++) if (wrappers[_i].type == listType) found = _i + 1;\n  var splitDepth = wrappers.length - found;\n  var splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0),\n    parent = range.parent;\n  for (var _i2 = range.startIndex, e = range.endIndex, first = true; _i2 < e; _i2++, first = false) {\n    if (!first && prosemirrorTransform.canSplit(tr.doc, splitPos, splitDepth)) {\n      tr.split(splitPos, splitDepth);\n      splitPos += 2 * splitDepth;\n    }\n    splitPos += parent.child(_i2).nodeSize;\n  }\n  return tr;\n}\nfunction splitListItem(itemType, itemAttrs) {\n  return function (state, dispatch) {\n    var _state$selection2 = state.selection,\n      $from = _state$selection2.$from,\n      $to = _state$selection2.$to,\n      node = _state$selection2.node;\n    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) return false;\n    var grandParent = $from.node(-1);\n    if (grandParent.type != itemType) return false;\n    if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {\n      if ($from.depth == 3 || $from.node(-3).type != itemType || $from.index(-2) != $from.node(-2).childCount - 1) return false;\n      if (dispatch) {\n        var wrap = prosemirrorModel.Fragment.empty;\n        var depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n        for (var d = $from.depth - depthBefore; d >= $from.depth - 3; d--) wrap = prosemirrorModel.Fragment.from($from.node(d).copy(wrap));\n        var depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n        wrap = wrap.append(prosemirrorModel.Fragment.from(itemType.createAndFill()));\n        var start = $from.before($from.depth - (depthBefore - 1));\n        var _tr = state.tr.replace(start, $from.after(-depthAfter), new prosemirrorModel.Slice(wrap, 4 - depthBefore, 0));\n        var sel = -1;\n        _tr.doc.nodesBetween(start, _tr.doc.content.size, function (node, pos) {\n          if (sel > -1) return false;\n          if (node.isTextblock && node.content.size == 0) sel = pos + 1;\n        });\n        if (sel > -1) _tr.setSelection(prosemirrorState.Selection.near(_tr.doc.resolve(sel)));\n        dispatch(_tr.scrollIntoView());\n      }\n      return true;\n    }\n    var nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    var tr = state.tr[\"delete\"]($from.pos, $to.pos);\n    var types = nextType ? [itemAttrs ? {\n      type: itemType,\n      attrs: itemAttrs\n    } : null, {\n      type: nextType\n    }] : undefined;\n    if (!prosemirrorTransform.canSplit(tr.doc, $from.pos, 2, types)) return false;\n    if (dispatch) dispatch(tr.split($from.pos, 2, types).scrollIntoView());\n    return true;\n  };\n}\nfunction splitListItemKeepMarks(itemType, itemAttrs) {\n  var split = splitListItem(itemType, itemAttrs);\n  return function (state, dispatch) {\n    return split(state, dispatch && function (tr) {\n      var marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n      if (marks) tr.ensureMarks(marks);\n      dispatch(tr);\n    });\n  };\n}\nfunction liftListItem(itemType) {\n  return function (state, dispatch) {\n    var _state$selection3 = state.selection,\n      $from = _state$selection3.$from,\n      $to = _state$selection3.$to;\n    var range = $from.blockRange($to, function (node) {\n      return node.childCount > 0 && node.firstChild.type == itemType;\n    });\n    if (!range) return false;\n    if (!dispatch) return true;\n    if ($from.node(range.depth - 1).type == itemType) return liftToOuterList(state, dispatch, itemType, range);else return liftOutOfList(state, dispatch, range);\n  };\n}\nfunction liftToOuterList(state, dispatch, itemType, range) {\n  var tr = state.tr,\n    end = range.end,\n    endOfList = range.$to.end(range.depth);\n  if (end < endOfList) {\n    tr.step(new prosemirrorTransform.ReplaceAroundStep(end - 1, endOfList, end, endOfList, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));\n    range = new prosemirrorModel.NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);\n  }\n  var target = prosemirrorTransform.liftTarget(range);\n  if (target == null) return false;\n  tr.lift(range, target);\n  var $after = tr.doc.resolve(tr.mapping.map(end, -1) - 1);\n  if (prosemirrorTransform.canJoin(tr.doc, $after.pos) && $after.nodeBefore.type == $after.nodeAfter.type) tr.join($after.pos);\n  dispatch(tr.scrollIntoView());\n  return true;\n}\nfunction liftOutOfList(state, dispatch, range) {\n  var tr = state.tr,\n    list = range.parent;\n  for (var pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {\n    pos -= list.child(i).nodeSize;\n    tr[\"delete\"](pos - 1, pos + 1);\n  }\n  var $start = tr.doc.resolve(range.start),\n    item = $start.nodeAfter;\n  if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize) return false;\n  var atStart = range.startIndex == 0,\n    atEnd = range.endIndex == list.childCount;\n  var parent = $start.node(-1),\n    indexBefore = $start.index(-1);\n  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list)))) return false;\n  var start = $start.pos,\n    end = start + item.nodeSize;\n  tr.step(new prosemirrorTransform.ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new prosemirrorModel.Slice((atStart ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))).append(atEnd ? prosemirrorModel.Fragment.empty : prosemirrorModel.Fragment.from(list.copy(prosemirrorModel.Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));\n  dispatch(tr.scrollIntoView());\n  return true;\n}\nfunction sinkListItem(itemType) {\n  return function (state, dispatch) {\n    var _state$selection4 = state.selection,\n      $from = _state$selection4.$from,\n      $to = _state$selection4.$to;\n    var range = $from.blockRange($to, function (node) {\n      return node.childCount > 0 && node.firstChild.type == itemType;\n    });\n    if (!range) return false;\n    var startIndex = range.startIndex;\n    if (startIndex == 0) return false;\n    var parent = range.parent,\n      nodeBefore = parent.child(startIndex - 1);\n    if (nodeBefore.type != itemType) return false;\n    if (dispatch) {\n      var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;\n      var inner = prosemirrorModel.Fragment.from(nestedBefore ? itemType.create() : null);\n      var slice = new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(itemType.create(null, prosemirrorModel.Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);\n      var before = range.start,\n        after = range.end;\n      dispatch(state.tr.step(new prosemirrorTransform.ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true)).scrollIntoView());\n    }\n    return true;\n  };\n}\nexports.addListNodes = addListNodes;\nexports.bulletList = bulletList;\nexports.liftListItem = liftListItem;\nexports.listItem = listItem;\nexports.orderedList = orderedList;\nexports.sinkListItem = sinkListItem;\nexports.splitListItem = splitListItem;\nexports.splitListItemKeepMarks = splitListItemKeepMarks;\nexports.wrapInList = wrapInList;\nexports.wrapRangeInList = wrapRangeInList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/prosemirror-schema-list@1.5.1/node_modules/prosemirror-schema-list/dist/index.cjs\n");

/***/ })

};
;