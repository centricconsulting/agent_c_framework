"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-gapcursor@1.3.2";
exports.ids = ["vendor-chunks/prosemirror-gapcursor@1.3.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/prosemirror-gapcursor@1.3.2/node_modules/prosemirror-gapcursor/dist/index.cjs":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/prosemirror-gapcursor@1.3.2/node_modules/prosemirror-gapcursor/dist/index.cjs ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar prosemirrorKeymap = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/../../node_modules/.pnpm/prosemirror-keymap@1.2.3/node_modules/prosemirror-keymap/dist/index.cjs\");\n\nvar prosemirrorState = __webpack_require__(/*! prosemirror-state */ \"(ssr)/../../node_modules/.pnpm/prosemirror-state@1.4.3/node_modules/prosemirror-state/dist/index.cjs\");\n\nvar prosemirrorModel = __webpack_require__(/*! prosemirror-model */ \"(ssr)/../../node_modules/.pnpm/prosemirror-model@1.25.3/node_modules/prosemirror-model/dist/index.cjs\");\n\nvar prosemirrorView = __webpack_require__(/*! prosemirror-view */ \"(ssr)/../../node_modules/.pnpm/prosemirror-view@1.41.0/node_modules/prosemirror-view/dist/index.cjs\");\n\nvar GapCursor = function (_prosemirrorState$Sel) {\n  _inherits(GapCursor, _prosemirrorState$Sel);\n\n  var _super = _createSuper(GapCursor);\n\n  function GapCursor($pos) {\n    _classCallCheck(this, GapCursor);\n\n    return _super.call(this, $pos, $pos);\n  }\n\n  _createClass(GapCursor, [{\n    key: \"map\",\n    value: function map(doc, mapping) {\n      var $pos = doc.resolve(mapping.map(this.head));\n      return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirrorState.Selection.near($pos);\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return prosemirrorModel.Slice.empty;\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return other instanceof GapCursor && other.head == this.head;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: \"gapcursor\",\n        pos: this.head\n      };\n    }\n  }, {\n    key: \"getBookmark\",\n    value: function getBookmark() {\n      return new GapBookmark(this.anchor);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(doc, json) {\n      if (typeof json.pos != \"number\") throw new RangeError(\"Invalid input for GapCursor.fromJSON\");\n      return new GapCursor(doc.resolve(json.pos));\n    }\n  }, {\n    key: \"valid\",\n    value: function valid($pos) {\n      var parent = $pos.parent;\n      if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos)) return false;\n      var override = parent.type.spec.allowGapCursor;\n      if (override != null) return override;\n      var deflt = parent.contentMatchAt($pos.index()).defaultType;\n      return deflt && deflt.isTextblock;\n    }\n  }, {\n    key: \"findGapCursorFrom\",\n    value: function findGapCursorFrom($pos, dir) {\n      var mustMove = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      search: for (;;) {\n        if (!mustMove && GapCursor.valid($pos)) return $pos;\n        var pos = $pos.pos,\n            next = null;\n\n        for (var d = $pos.depth;; d--) {\n          var parent = $pos.node(d);\n\n          if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {\n            next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);\n            break;\n          } else if (d == 0) {\n            return null;\n          }\n\n          pos += dir;\n          var $cur = $pos.doc.resolve(pos);\n          if (GapCursor.valid($cur)) return $cur;\n        }\n\n        for (;;) {\n          var inside = dir > 0 ? next.firstChild : next.lastChild;\n\n          if (!inside) {\n            if (next.isAtom && !next.isText && !prosemirrorState.NodeSelection.isSelectable(next)) {\n              $pos = $pos.doc.resolve(pos + next.nodeSize * dir);\n              mustMove = false;\n              continue search;\n            }\n\n            break;\n          }\n\n          next = inside;\n          pos += dir;\n\n          var _$cur = $pos.doc.resolve(pos);\n\n          if (GapCursor.valid(_$cur)) return _$cur;\n        }\n\n        return null;\n      }\n    }\n  }]);\n\n  return GapCursor;\n}(prosemirrorState.Selection);\n\nGapCursor.prototype.visible = false;\nGapCursor.findFrom = GapCursor.findGapCursorFrom;\nprosemirrorState.Selection.jsonID(\"gapcursor\", GapCursor);\n\nvar GapBookmark = function () {\n  function GapBookmark(pos) {\n    _classCallCheck(this, GapBookmark);\n\n    this.pos = pos;\n  }\n\n  _createClass(GapBookmark, [{\n    key: \"map\",\n    value: function map(mapping) {\n      return new GapBookmark(mapping.map(this.pos));\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(doc) {\n      var $pos = doc.resolve(this.pos);\n      return GapCursor.valid($pos) ? new GapCursor($pos) : prosemirrorState.Selection.near($pos);\n    }\n  }]);\n\n  return GapBookmark;\n}();\n\nfunction closedBefore($pos) {\n  for (var d = $pos.depth; d >= 0; d--) {\n    var index = $pos.index(d),\n        parent = $pos.node(d);\n\n    if (index == 0) {\n      if (parent.type.spec.isolating) return true;\n      continue;\n    }\n\n    for (var before = parent.child(index - 1);; before = before.lastChild) {\n      if (before.childCount == 0 && !before.inlineContent || before.isAtom || before.type.spec.isolating) return true;\n      if (before.inlineContent) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction closedAfter($pos) {\n  for (var d = $pos.depth; d >= 0; d--) {\n    var index = $pos.indexAfter(d),\n        parent = $pos.node(d);\n\n    if (index == parent.childCount) {\n      if (parent.type.spec.isolating) return true;\n      continue;\n    }\n\n    for (var after = parent.child(index);; after = after.firstChild) {\n      if (after.childCount == 0 && !after.inlineContent || after.isAtom || after.type.spec.isolating) return true;\n      if (after.inlineContent) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction gapCursor() {\n  return new prosemirrorState.Plugin({\n    props: {\n      decorations: drawGapCursor,\n      createSelectionBetween: function createSelectionBetween(_view, $anchor, $head) {\n        return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;\n      },\n      handleClick: handleClick,\n      handleKeyDown: handleKeyDown,\n      handleDOMEvents: {\n        beforeinput: beforeinput\n      }\n    }\n  });\n}\n\nvar handleKeyDown = prosemirrorKeymap.keydownHandler({\n  \"ArrowLeft\": arrow(\"horiz\", -1),\n  \"ArrowRight\": arrow(\"horiz\", 1),\n  \"ArrowUp\": arrow(\"vert\", -1),\n  \"ArrowDown\": arrow(\"vert\", 1)\n});\n\nfunction arrow(axis, dir) {\n  var dirStr = axis == \"vert\" ? dir > 0 ? \"down\" : \"up\" : dir > 0 ? \"right\" : \"left\";\n  return function (state, dispatch, view) {\n    var sel = state.selection;\n    var $start = dir > 0 ? sel.$to : sel.$from,\n        mustMove = sel.empty;\n\n    if (sel instanceof prosemirrorState.TextSelection) {\n      if (!view.endOfTextblock(dirStr) || $start.depth == 0) return false;\n      mustMove = false;\n      $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());\n    }\n\n    var $found = GapCursor.findGapCursorFrom($start, dir, mustMove);\n    if (!$found) return false;\n    if (dispatch) dispatch(state.tr.setSelection(new GapCursor($found)));\n    return true;\n  };\n}\n\nfunction handleClick(view, pos, event) {\n  if (!view || !view.editable) return false;\n  var $pos = view.state.doc.resolve(pos);\n  if (!GapCursor.valid($pos)) return false;\n  var clickPos = view.posAtCoords({\n    left: event.clientX,\n    top: event.clientY\n  });\n  if (clickPos && clickPos.inside > -1 && prosemirrorState.NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside))) return false;\n  view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));\n  return true;\n}\n\nfunction beforeinput(view, event) {\n  if (event.inputType != \"insertCompositionText\" || !(view.state.selection instanceof GapCursor)) return false;\n  var $from = view.state.selection.$from;\n  var insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);\n  if (!insert) return false;\n  var frag = prosemirrorModel.Fragment.empty;\n\n  for (var i = insert.length - 1; i >= 0; i--) {\n    frag = prosemirrorModel.Fragment.from(insert[i].createAndFill(null, frag));\n  }\n\n  var tr = view.state.tr.replace($from.pos, $from.pos, new prosemirrorModel.Slice(frag, 0, 0));\n  tr.setSelection(prosemirrorState.TextSelection.near(tr.doc.resolve($from.pos + 1)));\n  view.dispatch(tr);\n  return false;\n}\n\nfunction drawGapCursor(state) {\n  if (!(state.selection instanceof GapCursor)) return null;\n  var node = document.createElement(\"div\");\n  node.className = \"ProseMirror-gapcursor\";\n  return prosemirrorView.DecorationSet.create(state.doc, [prosemirrorView.Decoration.widget(state.selection.head, node, {\n    key: \"gapcursor\"\n  })]);\n}\n\nexports.GapCursor = GapCursor;\nexports.gapCursor = gapCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/prosemirror-gapcursor@1.3.2/node_modules/prosemirror-gapcursor/dist/index.cjs\n");

/***/ })

};
;