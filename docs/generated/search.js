window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "agent_c_demo", "modulename": "agent_c_demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting", "modulename": "agent_c_demo.prompting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots", "modulename": "agent_c_demo.prompting.one_shots", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion", "modulename": "agent_c_demo.prompting.one_shots.extractiion", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core.CoreExtractionSection", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "qualname": "CoreExtractionSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core.CoreExtractionSection.__init__", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "qualname": "CoreExtractionSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core.CoreExtractionSection.model_config", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "qualname": "CoreExtractionSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core.CoreExtractionSection.model_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "qualname": "CoreExtractionSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.core.CoreExtractionSection.model_computed_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.core", "qualname": "CoreExtractionSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form.FormExtractionSection", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "qualname": "FormExtractionSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form.FormExtractionSection.__init__", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "qualname": "FormExtractionSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form.FormExtractionSection.model_config", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "qualname": "FormExtractionSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form.FormExtractionSection.model_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "qualname": "FormExtractionSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.form.FormExtractionSection.model_computed_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.form", "qualname": "FormExtractionSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints.ExtractionHintsSection", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "qualname": "ExtractionHintsSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints.ExtractionHintsSection.__init__", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "qualname": "ExtractionHintsSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints.ExtractionHintsSection.model_config", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "qualname": "ExtractionHintsSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints.ExtractionHintsSection.model_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "qualname": "ExtractionHintsSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.hints.ExtractionHintsSection.model_computed_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.hints", "qualname": "ExtractionHintsSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing.PricingExtractionSection", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "qualname": "PricingExtractionSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing.PricingExtractionSection.__init__", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "qualname": "PricingExtractionSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing.PricingExtractionSection.model_config", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "qualname": "PricingExtractionSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing.PricingExtractionSection.model_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "qualname": "PricingExtractionSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.pricing.PricingExtractionSection.model_computed_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.pricing", "qualname": "PricingExtractionSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular.TabularExtractionSection", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "qualname": "TabularExtractionSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular.TabularExtractionSection.__init__", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "qualname": "TabularExtractionSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular.TabularExtractionSection.model_config", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "qualname": "TabularExtractionSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular.TabularExtractionSection.model_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "qualname": "TabularExtractionSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.prompting.one_shots.extractiion.tabular.TabularExtractionSection.model_computed_fields", "modulename": "agent_c_demo.prompting.one_shots.extractiion.tabular", "qualname": "TabularExtractionSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.tools", "modulename": "agent_c_demo.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool", "modulename": "agent_c_demo.tools.agent_as_tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool.AgentsAsTools", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "qualname": "AgentsAsTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool.AgentsAsTools.__init__", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "qualname": "AgentsAsTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool.AgentsAsTools.agent", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "qualname": "AgentsAsTools.agent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool.AgentsAsTools.initialize_agent", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "qualname": "AgentsAsTools.initialize_agent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.tool.AgentsAsTools.perform_task", "modulename": "agent_c_demo.tools.agent_as_tool.tool", "qualname": "AgentsAsTools.perform_task", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util", "modulename": "agent_c_demo.tools.agent_as_tool.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.__init__", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">session_manager</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">session_manager</span><span class=\"o\">.</span><span class=\"n\">ChatSessionManager</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;openai&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gpt-4o&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">agent_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">additional_toolsets</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.ESSENTIAL_TOOLS", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.ESSENTIAL_TOOLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;MemoryTools&#x27;, &#x27;WorkspaceTools&#x27;, &#x27;UserPreferencesTools&#x27;]"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.logger", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.debug_event", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.debug_event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.backend", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.backend", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.model_name", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.agent", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.agent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.agent_output_format", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.agent_output_format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.user_id", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.user_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.user_prefs", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.user_prefs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.user_preferences.preferences.base.UserPreference]"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.session_manager", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.session_manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.agent_key", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.agent_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.persona_prompt", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.persona_prompt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.current_chat_log", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.current_chat_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[Dict]]"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.tool_chest", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.tool_chest", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c.toolsets.tool_chest.ToolChest]"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.tool_cache_dir", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.tool_cache_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.tool_cache", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.tool_cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.additional_toolsets", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.additional_toolsets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.selected_tools", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.selected_tools", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.output_tool_arguments", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.output_tool_arguments", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.workspaces", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.workspaces", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.initialize", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.initialize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.send_message", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.send_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.question_response", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.question_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.modified_payload", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.modified_payload", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.agent_as_tool.util.simplified_agent.SimplifiedAgent.align_tool_calls", "modulename": "agent_c_demo.tools.agent_as_tool.util.simplified_agent", "qualname": "SimplifiedAgent.align_tool_calls", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.database_query", "modulename": "agent_c_demo.tools.database_query", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.database_query.tool", "modulename": "agent_c_demo.tools.database_query.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.__init__", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.DEMO_DB_NAME", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.DEMO_DB_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;demo_agent_data.db&#x27;"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.DATA_FOLDER", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.DATA_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;data_demo&#x27;"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.ALLOWED_FUNCTIONS", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.ALLOWED_FUNCTIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;TRIM&#x27;, &#x27;REPLACE&#x27;, &#x27;RTRIM&#x27;, &#x27;LTRIM&#x27;, &#x27;TYPEOF&#x27;, &#x27;LENGTH&#x27;, &#x27;MAX&#x27;, &#x27;INSTR&#x27;, &#x27;ROUND&#x27;, &#x27;LOWER&#x27;, &#x27;AVG&#x27;, &#x27;TOTAL&#x27;, &#x27;MIN&#x27;, &#x27;SUM&#x27;, &#x27;RANDOM&#x27;, &#x27;ABS&#x27;, &#x27;UPPER&#x27;, &#x27;COUNT&#x27;, &#x27;GROUP_CONCAT&#x27;}"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.workspace_tool", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.db_path", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.db_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.dataframe_tool", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.dataframe_tool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.execute_query", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.execute_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.get_tables", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.get_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.database_query.tool.DatabaseQueryTools.get_table_schema", "modulename": "agent_c_demo.tools.database_query.tool", "qualname": "DatabaseQueryTools.get_table_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.demo_one_shot", "modulename": "agent_c_demo.tools.demo_one_shot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool.OneShotTool", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "qualname": "OneShotTool", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool.OneShotTool.__init__", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "qualname": "OneShotTool.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool.OneShotTool.workspace_tool", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "qualname": "OneShotTool.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool.OneShotTool.gpt_agent", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "qualname": "OneShotTool.gpt_agent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.agents.gpt.GPTChatAgentRuntime"}, {"fullname": "agent_c_demo.tools.demo_one_shot.tool.OneShotTool.perform_one_shot", "modulename": "agent_c_demo.tools.demo_one_shot.tool", "qualname": "OneShotTool.perform_one_shot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics", "modulename": "agent_c_demo.tools.dynamics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.prompt", "modulename": "agent_c_demo.tools.dynamics.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.prompt.DynamicsCRMPrompt", "modulename": "agent_c_demo.tools.dynamics.prompt", "qualname": "DynamicsCRMPrompt", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.tools.dynamics.prompt.DynamicsCRMPrompt.__init__", "modulename": "agent_c_demo.tools.dynamics.prompt", "qualname": "DynamicsCRMPrompt.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.dynamics.prompt.DynamicsCRMPrompt.model_config", "modulename": "agent_c_demo.tools.dynamics.prompt", "qualname": "DynamicsCRMPrompt.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.tools.dynamics.prompt.DynamicsCRMPrompt.model_fields", "modulename": "agent_c_demo.tools.dynamics.prompt", "qualname": "DynamicsCRMPrompt.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.tools.dynamics.prompt.DynamicsCRMPrompt.model_computed_fields", "modulename": "agent_c_demo.tools.dynamics.prompt", "qualname": "DynamicsCRMPrompt.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.tools.dynamics.tool", "modulename": "agent_c_demo.tools.dynamics.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.__init__", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.base_url", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.client_id", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.client_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.dynamics_scope", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.dynamics_scope", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.redirect_uri", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.redirect_uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.token_endpoint", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.token_endpoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.access_token", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.access_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.user_id", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.user_pw", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.user_pw", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.workspace_tool", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.dynamics_object", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.dynamics_object", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.section", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.ENTITY_CLEAN_FIELDS", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.ENTITY_CLEAN_FIELDS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.logger", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.clean_html_xml", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.clean_html_xml", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"s1\">&#39;html.parser&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.get_entities", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.get_entities", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.force_login", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.force_login", "kind": "function", "doc": "<p>force re-login on dynamics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.dynamics_user_id", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.dynamics_user_id", "kind": "function", "doc": "<p>Get the whoami Dyanmics ID, if not available, re-authorize</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.tool.DynamicsTools.create_entity", "modulename": "agent_c_demo.tools.dynamics.tool", "qualname": "DynamicsTools.create_entity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util", "modulename": "agent_c_demo.tools.dynamics.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.auth_flow", "modulename": "agent_c_demo.tools.dynamics.util.auth_flow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.auth_flow.generate_code_verifier", "modulename": "agent_c_demo.tools.dynamics.util.auth_flow", "qualname": "generate_code_verifier", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.auth_flow.generate_code_challenge", "modulename": "agent_c_demo.tools.dynamics.util.auth_flow", "qualname": "generate_code_challenge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code_verifier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.auth_flow.get_oauth_token", "modulename": "agent_c_demo.tools.dynamics.util.auth_flow", "qualname": "get_oauth_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client_type</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.InvalidODataQueryError", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "InvalidODataQueryError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.__init__", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.base_url", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.base_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.client_id", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.client_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.dynamics_scope", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.dynamics_scope", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.redirect_uri", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.redirect_uri", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.token_endpoint", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.token_endpoint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.access_token", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.access_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.token_expiration", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.token_expiration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.user_id", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.user_pw", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.user_pw", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.whoami_id", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.whoami_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.common_lookups", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.common_lookups", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.ENTITY_MAP", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.ENTITY_MAP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.DEFAULT_FIELDS", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.DEFAULT_FIELDS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.fixed_field_list_return", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.fixed_field_list_return", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.token_file", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.token_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.logger", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.save_token_to_file", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.save_token_to_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.load_token_from_file", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.load_token_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.convert_dates_to_iso_format", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.convert_dates_to_iso_format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">entity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.modify_query_params", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.modify_query_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.fetch_common_lookups", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.fetch_common_lookups", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.resolve_guids", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.resolve_guids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity_type</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.add_web_client_url_to_dataset", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.add_web_client_url_to_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity_type</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.clean_date_fields", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.clean_date_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.get_web_client_url", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.get_web_client_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity_type</span>, </span><span class=\"param\"><span class=\"n\">entity_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.one_time_lookups", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.one_time_lookups", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.authorize_dynamics", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.authorize_dynamics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.process_response_data", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.process_response_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity_type</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">is_retrieve_multiple</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.generate_query_params", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.generate_query_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity_type</span>,</span><span class=\"param\">\t<span class=\"n\">user_query_params</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">additional_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">additional_expand</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.get_entities", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.get_entities", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">entity_type</span>,</span><span class=\"param\">\t<span class=\"n\">entity_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">query_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">additional_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">additional_expand</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_api.DynamicsAPI.create_entity", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_api", "qualname": "DynamicsAPI.create_entity", "kind": "function", "doc": "<p>Create a new entity in Dynamics CRM.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity_type</strong>:  The type of entity to create (e.g., 'accounts', 'contacts')</li>\n<li><strong>entity_data</strong>:  A dictionary containing the data for the new entity</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The created entity data if successful, None otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity_type</span>, </span><span class=\"param\"><span class=\"n\">entity_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary.ENTITY_MAP", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "qualname": "ENTITY_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;accounts&#x27;: {&#x27;singular&#x27;: &#x27;account&#x27;, &#x27;id_field&#x27;: &#x27;accountid&#x27;}, &#x27;leads&#x27;: {&#x27;singular&#x27;: &#x27;lead&#x27;, &#x27;id_field&#x27;: &#x27;leadid&#x27;}, &#x27;opportunities&#x27;: {&#x27;singular&#x27;: &#x27;opportunity&#x27;, &#x27;id_field&#x27;: &#x27;opportunityid&#x27;}, &#x27;contacts&#x27;: {&#x27;singular&#x27;: &#x27;contact&#x27;, &#x27;id_field&#x27;: &#x27;contactid&#x27;}, &#x27;annotations&#x27;: {&#x27;singular&#x27;: &#x27;annotation&#x27;, &#x27;id_field&#x27;: &#x27;annotationid&#x27;}, &#x27;appointments&#x27;: {&#x27;singular&#x27;: &#x27;appointment&#x27;, &#x27;id_field&#x27;: &#x27;activityid&#x27;}, &#x27;tasks&#x27;: {&#x27;singular&#x27;: &#x27;task&#x27;, &#x27;id_field&#x27;: &#x27;activityid&#x27;}, &#x27;emails&#x27;: {&#x27;singular&#x27;: &#x27;email&#x27;, &#x27;id_field&#x27;: &#x27;activityid&#x27;}, &#x27;posts&#x27;: {&#x27;singular&#x27;: &#x27;post&#x27;, &#x27;id_field&#x27;: &#x27;postid&#x27;}, &#x27;phonecalls&#x27;: {&#x27;singular&#x27;: &#x27;phonecall&#x27;, &#x27;id_field&#x27;: &#x27;activityid&#x27;}, &#x27;cen_serviceofferingcapabilitieses&#x27;: {&#x27;singular&#x27;: &#x27;cen_serviceofferingcapabilities&#x27;, &#x27;id_field&#x27;: &#x27;cen_serviceofferingcapabilitiesid&#x27;}, &#x27;businessunits&#x27;: {&#x27;singular&#x27;: &#x27;businessunit&#x27;, &#x27;id_field&#x27;: &#x27;businessunitid&#x27;}, &#x27;cen_industryverticalsubs&#x27;: {&#x27;singular&#x27;: &#x27;cen_industryverticalsub&#x27;, &#x27;id_field&#x27;: &#x27;cen_industryverticalsubid&#x27;}, &#x27;cen_industryverticals&#x27;: {&#x27;singular&#x27;: &#x27;cen_industryvertical&#x27;, &#x27;id_field&#x27;: &#x27;cen_industryverticalid&#x27;}, &#x27;whoami&#x27;: {&#x27;singular&#x27;: &#x27;whoami&#x27;, &#x27;id_field&#x27;: &#x27;UserId&#x27;}}"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary.GUID_STRING_TO_ENTITY_RESOLUTION_MAP", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "qualname": "GUID_STRING_TO_ENTITY_RESOLUTION_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;opportunities&#x27;: {&#x27;_owningbusinessunit_value&#x27;: &#x27;businessunits&#x27;, &#x27;_cen_serviceofferingcapabiity1_value&#x27;: &#x27;cen_serviceofferingcapabilitieses&#x27;, &#x27;_cen_serviceofferingcapability2_value&#x27;: &#x27;cen_serviceofferingcapabilitieses&#x27;, &#x27;_cen_serviceofferingcapability3_value&#x27;: &#x27;cen_serviceofferingcapabilitieses&#x27;, &#x27;_cen_centricindustryvertical_value&#x27;: &#x27;cen_industryverticals&#x27;}, &#x27;leads&#x27;: {&#x27;_owningbusinessunit_value&#x27;: &#x27;businessunits&#x27;}, &#x27;accounts&#x27;: {&#x27;_owningbusinessunit_value&#x27;: &#x27;businessunits&#x27;}}"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary.LOOKUPS_ID_TO_COMMON_NAME_MAPPING", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "qualname": "LOOKUPS_ID_TO_COMMON_NAME_MAPPING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;businessunits&#x27;: {&#x27;id_field&#x27;: &#x27;businessunitid&#x27;, &#x27;name_field&#x27;: &#x27;name&#x27;}, &#x27;cen_serviceofferingcapabilitieses&#x27;: {&#x27;id_field&#x27;: &#x27;cen_serviceofferingcapabilitiesid&#x27;, &#x27;name_field&#x27;: &#x27;cen_name&#x27;}, &#x27;cen_industryverticals&#x27;: {&#x27;id_field&#x27;: &#x27;cen_industryverticalid&#x27;, &#x27;name_field&#x27;: &#x27;cen_name&#x27;}}"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary.COMMON_DATE_FIELDS", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "qualname": "COMMON_DATE_FIELDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;createdon&#x27;, &#x27;modifiedon&#x27;, &#x27;scheduledstart&#x27;, &#x27;scheduledend&#x27;, &#x27;estimatedclosedate&#x27;, &#x27;actualclosedate&#x27;]"}, {"fullname": "agent_c_demo.tools.dynamics.util.dynamics_dictionary.DEFAULT_FIELDS", "modulename": "agent_c_demo.tools.dynamics.util.dynamics_dictionary", "qualname": "DEFAULT_FIELDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;accounts&#x27;: {&#x27;select&#x27;: [&#x27;accountid&#x27;, &#x27;name&#x27;, &#x27;telephone1&#x27;, &#x27;emailaddress1&#x27;, &#x27;websiteurl&#x27;, &#x27;address1_composite&#x27;, &#x27;revenue&#x27;, &#x27;numberofemployees&#x27;, &#x27;industrycode&#x27;, &#x27;createdon&#x27;, &#x27;modifiedon&#x27;, &#x27;statecode&#x27;, &#x27;statuscode&#x27;, &#x27;_owningbusinessunit_value&#x27;, &#x27;_owninguser_value&#x27;, &#x27;_primarycontactid_value&#x27;, &#x27;_cen_centricindustryvertical_value&#x27;, &#x27;numberofemployees&#x27;], &#x27;expand&#x27;: {&#x27;primarycontactid&#x27;: [&#x27;contactid&#x27;, &#x27;fullname&#x27;, &#x27;emailaddress1&#x27;, &#x27;telephone1&#x27;], &#x27;ownerid&#x27;: [&#x27;*&#x27;], &#x27;parentaccountid&#x27;: [&#x27;accountid&#x27;, &#x27;name&#x27;]}}, &#x27;leads&#x27;: {&#x27;select&#x27;: [&#x27;leadid&#x27;, &#x27;fullname&#x27;, &#x27;companyname&#x27;, &#x27;jobtitle&#x27;, &#x27;emailaddress1&#x27;, &#x27;telephone1&#x27;, &#x27;mobilephone&#x27;, &#x27;address1_composite&#x27;, &#x27;leadsourcecode&#x27;, &#x27;industrycode&#x27;, &#x27;revenue&#x27;, &#x27;numberofemployees&#x27;, &#x27;createdon&#x27;, &#x27;modifiedon&#x27;, &#x27;statecode&#x27;, &#x27;statuscode&#x27;, &#x27;cen_ai&#x27;, &#x27;estimatedamount&#x27;, &#x27;cen_customerpain&#x27;, &#x27;revenue&#x27;, &#x27;_owningbusinessunit_value&#x27;], &#x27;expand&#x27;: {&#x27;ownerid&#x27;: [&#x27;*&#x27;], &#x27;parentaccountid&#x27;: [&#x27;accountid&#x27;, &#x27;name&#x27;], &#x27;parentcontactid&#x27;: [&#x27;contactid&#x27;, &#x27;fullname&#x27;, &#x27;emailaddress1&#x27;]}}, &#x27;opportunities&#x27;: {&#x27;select&#x27;: [&#x27;opportunityid&#x27;, &#x27;name&#x27;, &#x27;description&#x27;, &#x27;estimatedvalue&#x27;, &#x27;estimatedclosedate&#x27;, &#x27;actualvalue&#x27;, &#x27;actualclosedate&#x27;, &#x27;stepname&#x27;, &#x27;opportunityratingcode&#x27;, &#x27;pricelevelid&#x27;, &#x27;closeprobability&#x27;, &#x27;createdon&#x27;, &#x27;modifiedon&#x27;, &#x27;statecode&#x27;, &#x27;statuscode&#x27;, &#x27;proposedsolution&#x27;, &#x27;cen_projectflag&#x27;, &#x27;cen_opportunitystage&#x27;, &#x27;cen_weightedrevenue&#x27;, &#x27;cen_weightedrevenue_base&#x27;, &#x27;closeprobability&#x27;, &#x27;_cen_serviceofferingcapabiity1_value&#x27;, &#x27;_cen_serviceofferingcapability2_value&#x27;, &#x27;_cen_serviceofferingcapability3_value&#x27;, &#x27;cen_opportunitystagepercentage&#x27;, &#x27;_cen_centricivcapability_value&#x27;, &#x27;_cen_solutionpartner_value&#x27;, &#x27;cen_ai&#x27;, &#x27;cen_customerpain&#x27;, &#x27;customerpainpoints&#x27;, &#x27;cen_centricswinprobability&#x27;, &#x27;_owningbusinessunit_value&#x27;, &#x27;_cen_centricindustryvertical_value&#x27;, &#x27;cen_highrisk&#x27;, &#x27;budgetamount&#x27;], &#x27;expand&#x27;: {&#x27;parentaccountid&#x27;: [&#x27;accountid&#x27;, &#x27;name&#x27;], &#x27;parentcontactid&#x27;: [&#x27;contactid&#x27;, &#x27;fullname&#x27;, &#x27;emailaddress1&#x27;], &#x27;ownerid&#x27;: [&#x27;*&#x27;]}}, &#x27;contacts&#x27;: {&#x27;select&#x27;: [&#x27;contactid&#x27;, &#x27;fullname&#x27;, &#x27;firstname&#x27;, &#x27;lastname&#x27;, &#x27;emailaddress1&#x27;, &#x27;telephone1&#x27;, &#x27;mobilephone&#x27;, &#x27;jobtitle&#x27;, &#x27;department&#x27;, &#x27;address1_composite&#x27;, &#x27;birthdate&#x27;, &#x27;anniversary&#x27;, &#x27;gendercode&#x27;, &#x27;createdon&#x27;, &#x27;modifiedon&#x27;, &#x27;statecode&#x27;, &#x27;statuscode&#x27;], &#x27;expand&#x27;: {&#x27;parentcustomerid&#x27;: [&#x27;accountid&#x27;, &#x27;name&#x27;], &#x27;ownerid&#x27;: [&#x27;systemuserid&#x27;, &#x27;fullname&#x27;, &#x27;internalemailaddress&#x27;]}}, &#x27;annotations&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;appointments&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;tasks&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;emails&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;posts&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;phonecalls&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;cen_serviceofferingcapabilitieses&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;businessunits&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;cen_industryverticalsubs&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;cen_industryverticals&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}, &#x27;cen_serviceofferings&#x27;: {&#x27;select&#x27;: [&#x27;*&#x27;]}}"}, {"fullname": "agent_c_demo.tools.dynamics.util.odata_validator", "modulename": "agent_c_demo.tools.dynamics.util.odata_validator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.dynamics.util.odata_validator.validate_odata_query", "modulename": "agent_c_demo.tools.dynamics.util.odata_validator", "qualname": "validate_odata_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.extraction", "modulename": "agent_c_demo.tools.extraction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.email", "modulename": "agent_c_demo.tools.extraction.email", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.email.tool", "modulename": "agent_c_demo.tools.extraction.email.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent.__init__", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent.workspace_tool", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent.eml_loader", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent.eml_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent.extract_email", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent.extract_email", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.extraction.email.tool.EmailExtractionAgent.process_email_folder", "modulename": "agent_c_demo.tools.extraction.email.tool", "qualname": "EmailExtractionAgent.process_email_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.extraction.tool", "modulename": "agent_c_demo.tools.extraction.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.tool.EXTRACTION_TYPES", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "EXTRACTION_TYPES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.List[agent_c.prompting.prompt_section.OldPromptSection]]", "default_value": "{&#x27;table&#x27;: [CoreExtractionSection(name=&#x27;Core Instructions&#x27;, template=&#x27;We have many files with the same sort of information presented in different ways your job is to assist us in this process by extracting the key data from each tile.\\n- You will be provided with the file contents via the user message inside a code block, along with a URI and a segment ID.\\n- As these files are rather large and consume many output tokens, you will be provided the data in chunks identified by their segment ID.\\n- The files will contain a mix of extractable data and other information.\\n\\n- Fill empty text columns with the prior value\\nAdditional instructions below will instruct you what to look for in the file data.\\n&#x27;, render_section_header=False, required=True), TabularExtractionSection(name=&#x27;Core Instructions&#x27;, template=&quot;The document which contained a mix of text and tabular data, We need to extract the tabular data\\nIF the column names have not been provided as part of the user you will need to determine them from the data.Convert any column names into a snake_case string to ensure compatibility\\nYour json object should be have a name that that uses the segment ID, like `segment_1`.  It should contain the following attributes:\\n- `src`identifying the URI for the file the data came from if provided by the user message. Use &#x27;unknown&#x27; if not provided.\\n- `table_columns` The list of columns as a CSV string\\n- `data_rows` the data from the table rows as an array of CSV strings.\\n&quot;, render_section_header=False, required=True)], &#x27;form&#x27;: [CoreExtractionSection(name=&#x27;Core Instructions&#x27;, template=&#x27;We have many files with the same sort of information presented in different ways your job is to assist us in this process by extracting the key data from each tile.\\n- You will be provided with the file contents via the user message inside a code block, along with a URI and a segment ID.\\n- As these files are rather large and consume many output tokens, you will be provided the data in chunks identified by their segment ID.\\n- The files will contain a mix of extractable data and other information.\\n\\n- Fill empty text columns with the prior value\\nAdditional instructions below will instruct you what to look for in the file data.\\n&#x27;, render_section_header=False, required=True), FormExtractionSection(name=&#x27;File Content Information&#x27;, template=&#x27;The user message contains the contents of A PDF form. Extract all form fields and their values as an array of JSON objects.\\n&#x27;, render_section_header=True, required=True)], &#x27;price_list&#x27;: [CoreExtractionSection(name=&#x27;Core Instructions&#x27;, template=&#x27;We have many files with the same sort of information presented in different ways your job is to assist us in this process by extracting the key data from each tile.\\n- You will be provided with the file contents via the user message inside a code block, along with a URI and a segment ID.\\n- As these files are rather large and consume many output tokens, you will be provided the data in chunks identified by their segment ID.\\n- The files will contain a mix of extractable data and other information.\\n\\n- Fill empty text columns with the prior value\\nAdditional instructions below will instruct you what to look for in the file data.\\n&#x27;, render_section_header=False, required=True), PricingExtractionSection(name=&#x27;Core Instructions&#x27;, template=&quot;The document which contained a mix of text and tabular data, We need to extract the tabular data\\nThe data in these tables will be pricing information from several different vendors.\\nIF the column names have not been provided as part of the user you will need to determine them from the data.Convert any column names into a snake_case string to ensure compatibility\\nYour json object should be have a name that that uses the segment ID, like `segment_1`.  It should contain the following attributes:\\n- `src` Identifying the URI for the file the data came from if provided by the user message. Use &#x27;unknown&#x27; if not provided.\\n- `table_columns` The list of columns as a CSV string\\n- `data_rows` The data from the table rows as an array of CSV strings.\\n\\n### Additional Instructions\\nUse the following guidelines to assist you in this process:\\n- `minimum_order_quantity` is often abbreviated MOQ\\n- Many different currencies can be present in these files, so make sure to note the currency type in the JSON object. Assume USD if not specified.\\n&quot;, render_section_header=False, required=True)]}"}, {"fullname": "agent_c_demo.tools.extraction.tool.BASF_HINT", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "BASF_HINT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&quot;BASF files have multi line column headers that don&#x27;t convert properly.\\nThe actual columns (in snake case) are: article, article_no, packaging, price_q1, delta, price_q2, scale, price_2, scale_2, price_3, scale_3, pallet_volume, vol_com_q2_22\\n&quot;"}, {"fullname": "agent_c_demo.tools.extraction.tool.CSV_HINT", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "CSV_HINT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;This data is in CSV format\\n&#x27;"}, {"fullname": "agent_c_demo.tools.extraction.tool.EXCEL_HINT", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "EXCEL_HINT", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;This data is an export Excel data in CSV format with identifying breaks between sheets.\\n- Fill empty text columns with the prior value&#x27;"}, {"fullname": "agent_c_demo.tools.extraction.tool.ExtractionTools", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "ExtractionTools", "kind": "class", "doc": "<p>A class to encapsulate data extraction toolsets.</p>\n\n<p>Attributes:\n    workspace_tool (WorkspaceTools): A tool to interact with workspaces.\n    agent (Type[GPTChatAgentRuntime]): The GPT chat agent class used for extraction.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.extraction.tool.ExtractionTools.__init__", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "ExtractionTools.__init__", "kind": "function", "doc": "<p>Initializes the ExtractionTools with a workspace tool and assigns the GPTChatAgentRuntime.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Keyword arguments for the Toolset initialization.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.extraction.tool.ExtractionTools.model_name", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "ExtractionTools.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.extraction.tool.ExtractionTools.extract_text_pdfplumber", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "ExtractionTools.extract_text_pdfplumber", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.extraction.tool.ExtractionTools.extract_data", "modulename": "agent_c_demo.tools.extraction.tool", "qualname": "ExtractionTools.extract_data", "kind": "function", "doc": "<p>Extracts data from a document based on the provided extraction type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.faiss", "modulename": "agent_c_demo.tools.faiss", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool", "modulename": "agent_c_demo.tools.faiss.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.__init__", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.loaded_index_name", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.loaded_index_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.db", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.db", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.faiss_location", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.faiss_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.embeddings", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.embeddings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.logger", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.load_faiss", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.load_faiss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.embed_to_faiss", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.embed_to_faiss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.temp_html_segmenter", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.temp_html_segmenter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.search_for_docs", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.search_for_docs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.faiss.tool.FAISSVectorStore.remove", "modulename": "agent_c_demo.tools.faiss.tool", "qualname": "FAISSVectorStore.remove", "kind": "function", "doc": "<p>Function to remove documents from the vectorstore.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>docstore_ids : Optional[List[str]]\n    The list of docstore ids to remove. If None, all documents are removed.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>n_removed : int\n    The number of documents removed.\nn_total : int\n    The total number of documents in the vectorstore.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If there are duplicate ids in the list of ids to remove.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">docstore_ids</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.feedback", "modulename": "agent_c_demo.tools.feedback", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.feedback.prompt", "modulename": "agent_c_demo.tools.feedback.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.feedback.prompt.FeedbackSection", "modulename": "agent_c_demo.tools.feedback.prompt", "qualname": "FeedbackSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.tools.feedback.prompt.FeedbackSection.__init__", "modulename": "agent_c_demo.tools.feedback.prompt", "qualname": "FeedbackSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.feedback.prompt.FeedbackSection.model_config", "modulename": "agent_c_demo.tools.feedback.prompt", "qualname": "FeedbackSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.tools.feedback.prompt.FeedbackSection.model_fields", "modulename": "agent_c_demo.tools.feedback.prompt", "qualname": "FeedbackSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.tools.feedback.prompt.FeedbackSection.model_computed_fields", "modulename": "agent_c_demo.tools.feedback.prompt", "qualname": "FeedbackSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.tools.feedback.tool", "modulename": "agent_c_demo.tools.feedback.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.feedback.tool.FeedbackTools", "modulename": "agent_c_demo.tools.feedback.tool", "qualname": "FeedbackTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.feedback.tool.FeedbackTools.__init__", "modulename": "agent_c_demo.tools.feedback.tool", "qualname": "FeedbackTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.feedback.tool.FeedbackTools.save_user_feedback", "modulename": "agent_c_demo.tools.feedback.tool", "qualname": "FeedbackTools.save_user_feedback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.feedback.tool.FeedbackTools.get_user_feedback", "modulename": "agent_c_demo.tools.feedback.tool", "qualname": "FeedbackTools.get_user_feedback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.linked_in", "modulename": "agent_c_demo.tools.linked_in", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.linked_in.tool", "modulename": "agent_c_demo.tools.linked_in.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.linked_in.tool.LinkedInTools", "modulename": "agent_c_demo.tools.linked_in.tool", "qualname": "LinkedInTools", "kind": "class", "doc": "<p>LinkedInTools provides an interface for the agent to interact with LinkedIn profiles.</p>\n\n<p>This is a DEMO tool that was slapped together in minutes then made \"not a complete hack\" via AI assist.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.linked_in.tool.LinkedInTools.__init__", "modulename": "agent_c_demo.tools.linked_in.tool", "qualname": "LinkedInTools.__init__", "kind": "function", "doc": "<p>Initializes LinkedInTools by setting up a Linkedin instance with the\nenvironment credentials and initializing a cache to store profile information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Keyword arguments forwarded to Toolset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.linked_in.tool.LinkedInTools.logger", "modulename": "agent_c_demo.tools.linked_in.tool", "qualname": "LinkedInTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.linked_in.tool.LinkedInTools.linkedin", "modulename": "agent_c_demo.tools.linked_in.tool", "qualname": "LinkedInTools.linkedin", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[linkedin_api.linkedin.Linkedin]"}, {"fullname": "agent_c_demo.tools.linked_in.tool.LinkedInTools.get_profile", "modulename": "agent_c_demo.tools.linked_in.tool", "qualname": "LinkedInTools.get_profile", "kind": "function", "doc": "<p>Asynchronously fetches a LinkedIn profile by name and caches it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Contains 'profile_name', the name of the LinkedIn profile to fetch.\nIf 'profile_name' starts with 'CURRENT_USER', fetches the profile for the current user.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A JSON string representation of the LinkedIn profile data or an error message.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool", "modulename": "agent_c_demo.tools.o1_agent_as_tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.__init__", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.client", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.messages", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Dict[str, str]]"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.model", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.logger", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.initialize_client", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.initialize_client", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.chat", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.chat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.o1_agent_as_tool.tool.O1AgentAsTool.clear_history", "modulename": "agent_c_demo.tools.o1_agent_as_tool.tool", "qualname": "O1AgentAsTool.clear_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis", "modulename": "agent_c_demo.tools.stock_analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool", "modulename": "agent_c_demo.tools.stock_analysis.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.__init__", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ticker</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span>,</span><span class=\"param\">\t<span class=\"n\">sma</span>,</span><span class=\"param\">\t<span class=\"n\">ema</span>,</span><span class=\"param\">\t<span class=\"n\">bollinger_bands</span>,</span><span class=\"param\">\t<span class=\"n\">cumulative_return</span>,</span><span class=\"param\">\t<span class=\"n\">dividend_yield</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">news_headlines</span>,</span><span class=\"param\">\t<span class=\"n\">recommendations</span>,</span><span class=\"param\">\t<span class=\"n\">upgrades_downgrades</span>,</span><span class=\"param\">\t<span class=\"n\">balance_sheet</span>,</span><span class=\"param\">\t<span class=\"n\">earnings</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.ticker", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.ticker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.start_date", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.start_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.end_date", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.end_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.sma", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.sma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.ema", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.ema", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.bollinger_bands", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.bollinger_bands", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.cumulative_return", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.cumulative_return", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.dividend_yield", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.dividend_yield", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.beta", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.news_headlines", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.news_headlines", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.recommendations", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.recommendations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.upgrades_downgrades", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.upgrades_downgrades", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.balance_sheet", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.balance_sheet", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.earnings", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.earnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.tolist", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.tolist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.Ticker.to_json", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "Ticker.to_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.__init__", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.ticker_objects", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.ticker_objects", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.logger", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_stock_data", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_stock_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ticker</span>, </span><span class=\"param\"><span class=\"n\">start_date</span>, </span><span class=\"param\"><span class=\"n\">end_date</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_sma", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_sma", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_ema", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_ema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_bollinger_bands", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_bollinger_bands", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">window</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">num_std_dev</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_cumulative_return", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_cumulative_return", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_dividend_yield", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_dividend_yield", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_beta", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_beta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">market_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.calculate_balance_sheet", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.calculate_balance_sheet", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_earnings", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_earnings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.perform_stock_analysis", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.perform_stock_analysis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_gainer_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_gainer_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_loser_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_loser_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_undervalued_growth_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_undervalued_growth_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_technology_growth_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_technology_growth_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_most_traded_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_most_traded_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_undervalued_large_cap_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_undervalued_large_cap_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_aggressive_small_cap_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_aggressive_small_cap_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_current_hot_penny_stocks", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_current_hot_penny_stocks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.tool.StockAnalysisTools.get_latest_news_for_stock", "modulename": "agent_c_demo.tools.stock_analysis.tool", "qualname": "StockAnalysisTools.get_latest_news_for_stock", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.stock_analysis.util", "modulename": "agent_c_demo.tools.stock_analysis.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util", "modulename": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util.request", "modulename": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util", "qualname": "request", "kind": "function", "doc": "<p>Helper to make requests from a url.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;get&#39;</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util.get_df", "modulename": "agent_c_demo.tools.stock_analysis.util.yahoo_web_util", "qualname": "get_df", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.weather", "modulename": "agent_c_demo.tools.weather", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.weather.tool", "modulename": "agent_c_demo.tools.weather.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.weather.tool.WeatherTools", "modulename": "agent_c_demo.tools.weather.tool", "qualname": "WeatherTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.weather.tool.WeatherTools.__init__", "modulename": "agent_c_demo.tools.weather.tool", "qualname": "WeatherTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.weather.tool.WeatherTools.get_current_weather", "modulename": "agent_c_demo.tools.weather.tool", "qualname": "WeatherTools.get_current_weather", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.youtube_transcript", "modulename": "agent_c_demo.tools.youtube_transcript", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt.YouTubeToolPrompt", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "qualname": "YouTubeToolPrompt", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt.YouTubeToolPrompt.__init__", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "qualname": "YouTubeToolPrompt.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt.YouTubeToolPrompt.model_config", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "qualname": "YouTubeToolPrompt.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt.YouTubeToolPrompt.model_fields", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "qualname": "YouTubeToolPrompt.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_demo.tools.youtube_transcript.prompt.YouTubeToolPrompt.model_computed_fields", "modulename": "agent_c_demo.tools.youtube_transcript.prompt", "qualname": "YouTubeToolPrompt.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError", "kind": "class", "doc": "<p>Custom exception for format-related errors in transcript data.</p>\n", "bases": "builtins.Exception"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError.__init__", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">original_error</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError.original_error", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError.original_error", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError.stack_trace", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError.stack_trace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError.logger", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YouTubeTranscriptFormatError.log_error", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YouTubeTranscriptFormatError.log_error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.__init__", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.section", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.workspace", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.workspace", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace]"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.transcript_api", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.transcript_api", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.logger", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.retrieve_and_save_transcript", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.retrieve_and_save_transcript", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">video_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_demo.tools.youtube_transcript.tool.YoutubeTools.only_save_transcript", "modulename": "agent_c_demo.tools.youtube_transcript.tool", "qualname": "YoutubeTools.only_save_transcript", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">video_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_extraction", "modulename": "agent_c_extraction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors", "modulename": "agent_c_extraction.extractors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors.base_extractor", "modulename": "agent_c_extraction.extractors.base_extractor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor", "kind": "class", "doc": "<p>Base class for extracting structured content from a PDF file.</p>\n\n<p>Attributes:\n    output_model: The model where the extracted data will be stored.\n    pdf_file (PDFFileModel): The PDF file to extract data from.\n    progress_callback (Callable[[str, int], None]): A callback function to track\n        the extraction progress. It takes two arguments: a string with the current\n        stage of the operation and an integer for the percentage of progress.\n    model_name (str): The name of the model for OpenAI API requests (default: gpt-4o-2024-08-06).\n    prompt (str): The prompt to provide to the OpenAI model.</p>\n"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.__init__", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.__init__", "kind": "function", "doc": "<p>Initializes a new BaseExtractor instance.</p>\n\n<p>Args:\n    pdf_file (PDFFileModel): The PDF file to extract data from.\n    progress_callback (Callable[[str, int], None]): A callback function to monitor the progress.\n    output_model: The model to store the extracted data.\n    prompt (str): The prompt to provide to the OpenAI model.\n    model_name (str, optional): The OpenAI model name to use. Defaults to 'gpt-4o-2024-08-06'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.extractor_registry", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.extractor_registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[agent_c_extraction.models.bounding_box_type.BoundingBoxType, typing.Type[agent_c_extraction.extractors.base_extractor.BaseExtractor]]", "default_value": "{&lt;BoundingBoxType.legend: &#x27;legend&#x27;&gt;: &lt;class &#x27;agent_c_extraction.extractors.legend_table_extrator.LegendTableExtractor&#x27;&gt;}"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.register", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">extractor_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">base_extractor</span><span class=\"o\">.</span><span class=\"n\">BaseExtractor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bb_type</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_type</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.extractor_for_bb_type", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.extractor_for_bb_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">bb_type</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_type</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxType</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">extractors</span><span class=\"o\">.</span><span class=\"n\">base_extractor</span><span class=\"o\">.</span><span class=\"n\">BaseExtractor</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.output_model", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.output_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.pdf_file", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.pdf_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_extraction.models.pdf_file_model.PDFFileModel"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.model_name", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.prompt", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.prompt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.client", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openai.AsyncOpenAI"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.max_ai_calls", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.max_ai_calls", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.keep_images", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.keep_images", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.include_titles", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.include_titles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.one_shot", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.one_shot", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.pending_oneshots", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.pending_oneshots", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.completed_oneshots", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.completed_oneshots", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.validate_output_model", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.validate_output_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">attempt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">model_inst</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;bool&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;built-in function any&gt;):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.on_oneshot_completed", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.on_oneshot_completed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">oneshot</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">one_shots</span><span class=\"o\">.</span><span class=\"n\">structured</span><span class=\"o\">.</span><span class=\"n\">StructuredOneshot</span>,</span><span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.load_prompt", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.load_prompt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.progress_callback", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.progress_callback", "kind": "function", "doc": "<p>Calls the progress callback function with the current stage, message, and progress.</p>\n\n<p>Args:\n    stage (str): The current stage of the operation.\n    message (str): The message to display.\n    progress (int): The percentage of progress.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.extract_legend", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.extract_legend", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bounding_box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"o\">.</span><span class=\"n\">LegendTable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.slice_table", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.slice_table", "kind": "function", "doc": "<p>Slices a table region defined by bounding boxes into smaller slices\ncontaining both the header and a certain number of rows.</p>\n\n<p>Args:\n    bounding_box (BoundingBoxModel): The bounding box representing the table.\n    vis_rows_per_slice (int, optional): Number of visible rows per slice. Defaults to 1.</p>\n\n<p>Raises:\n    ValueError: If the bounding box doesn't contain a table header.</p>\n\n<p>Returns:\n    List[Image.Image]: A list of images containing sliced parts of the table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bounding_box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">vis_rows_per_slice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.one_shot_completed", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.one_shot_completed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.get_legend_hint", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.get_legend_hint", "kind": "function", "doc": "<p>Generate a hint for the user based on the legend information.</p>\n\n<p>Args:\n    legend_info (LegendTable): The legend information extracted from the table.</p>\n\n<p>Returns:\n    str: A hint for the user based on the legend information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">legend_info</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"o\">.</span><span class=\"n\">LegendTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.extractors.base_extractor.BaseExtractor.extract", "modulename": "agent_c_extraction.extractors.base_extractor", "qualname": "BaseExtractor.extract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">vis_rows_per_slice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_extraction.extractors.legend_table_extrator", "modulename": "agent_c_extraction.extractors.legend_table_extrator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.extractors.legend_table_extrator.LegendTableExtractor", "modulename": "agent_c_extraction.extractors.legend_table_extrator", "qualname": "LegendTableExtractor", "kind": "class", "doc": "<p>Base class for extracting structured content from a PDF file.</p>\n\n<p>Attributes:\n    output_model: The model where the extracted data will be stored.\n    pdf_file (PDFFileModel): The PDF file to extract data from.\n    progress_callback (Callable[[str, int], None]): A callback function to track\n        the extraction progress. It takes two arguments: a string with the current\n        stage of the operation and an integer for the percentage of progress.\n    model_name (str): The name of the model for OpenAI API requests (default: gpt-4o-2024-08-06).\n    prompt (str): The prompt to provide to the OpenAI model.</p>\n", "bases": "agent_c_extraction.extractors.base_extractor.BaseExtractor"}, {"fullname": "agent_c_extraction.extractors.legend_table_extrator.LegendTableExtractor.__init__", "modulename": "agent_c_extraction.extractors.legend_table_extrator", "qualname": "LegendTableExtractor.__init__", "kind": "function", "doc": "<p>Initializes a new BaseExtractor instance.</p>\n\n<p>Args:\n    pdf_file (PDFFileModel): The PDF file to extract data from.\n    progress_callback (Callable[[str, int], None]): A callback function to monitor the progress.\n    output_model: The model to store the extracted data.\n    prompt (str): The prompt to provide to the OpenAI model.\n    model_name (str, optional): The OpenAI model name to use. Defaults to 'gpt-4o-2024-08-06'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_extraction.extractors.legend_table_extrator.LegendTableExtractor.extract", "modulename": "agent_c_extraction.extractors.legend_table_extrator", "qualname": "LegendTableExtractor.extract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">vis_rows_per_slice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"o\">.</span><span class=\"n\">LegendTable</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_extraction.models", "modulename": "agent_c_extraction.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.bounding_box_model", "modulename": "agent_c_extraction.models.bounding_box_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel", "kind": "class", "doc": "<p>Base class for Pydantic models with observable fields.</p>\n\n<p>Attributes:\n    _batch_active (bool): Internal flag used to determine if a batch operation is active.\n    _observable (Observable): Observable object for handling event-based notifications.</p>\n", "bases": "agent_c.models.observable.ObservableModel"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.page_no", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.page_no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.x1", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.x1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.y1", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.y1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.x2", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.x2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.y2", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.y2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.label", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.box_type", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.box_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.agent_c_extraction.src.agent_c_extraction.models.bounding_box_type.BoundingBoxType"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.sub_boxes", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.sub_boxes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[agent_c_extraction.models.bounding_box_model.BoundingBoxModel]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.parent", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.parent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_extraction.models.bounding_box_model.BoundingBoxModel]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.extracted_table", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.extracted_table", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_extraction.models.output.extracted_table.ExtractedTable]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.extracted_tables", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.extracted_tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[agent_c_extraction.models.output.extracted_table.ExtractedTable]]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.id_map", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.id_map", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, agent_c_extraction.models.bounding_box_model.BoundingBoxModel]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.uuid", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.uuid", "kind": "variable", "doc": "<p>This property generates a UUID based on the bounding box properties.\nThis allows us to map saved data back to the correct bounding box unless something important has changed about the box</p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.uuids", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.uuids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.sub_boxes_of_type", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.sub_boxes_of_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">box_type</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_type</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.tuple_coords", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.tuple_coords", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.enclose", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.enclose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.set", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.pad", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.pad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.extend", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.extend", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.model_config", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;, &#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.model_fields", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;page_no&#x27;: FieldInfo(annotation=int, required=True), &#x27;x1&#x27;: FieldInfo(annotation=float, required=False, default=0.0, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;y1&#x27;: FieldInfo(annotation=float, required=False, default=0.0, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;x2&#x27;: FieldInfo(annotation=float, required=False, default=0.0, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;y2&#x27;: FieldInfo(annotation=float, required=False, default=0.0, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;label&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;Bounding Box&#x27;, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;box_type&#x27;: FieldInfo(annotation=BoundingBoxType, required=False, default=&lt;BoundingBoxType.bbox: &#x27;bbox&#x27;&gt;, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;sub_boxes&#x27;: FieldInfo(annotation=list[str], required=False, default=[]), &#x27;parent&#x27;: FieldInfo(annotation=Union[BoundingBoxModel, NoneType], required=False, default=None)}"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.model_computed_fields", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.bounding_box_model.BoundingBoxModel.model_post_init", "modulename": "agent_c_extraction.models.bounding_box_model", "qualname": "BoundingBoxModel.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.bounding_box_type", "modulename": "agent_c_extraction.models.bounding_box_type", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.bbox", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.bbox", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.bbox: &#x27;bbox&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.legend", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.legend", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.legend: &#x27;legend&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.table_title", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.table_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.table_title: &#x27;table_title&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.table_header", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.table_header", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.table_header: &#x27;table_header&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.table", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.table", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.table: &#x27;table&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.table_row", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.table_row", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.table_row: &#x27;table_row&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.page_footer", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.page_footer", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.page_footer: &#x27;page_footer&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.bounding_box_type.BoundingBoxType.page_header", "modulename": "agent_c_extraction.models.bounding_box_type", "qualname": "BoundingBoxType.page_header", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BoundingBoxType.page_header: &#x27;page_header&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.found_table", "modulename": "agent_c_extraction.models.found_table", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.Config", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.Config.arbitrary_types_allowed", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p>Allow arbitrary types. This is needed for the File type. Default is True.\nSee <a href=\"https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed\">https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed</a></p>\n", "default_value": "True"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.page_no", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.page_no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.table", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.table", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pdfplumber.table.Table"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.page", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.page", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pdfplumber.page.Page"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.model_config", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.model_fields", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;page_no&#x27;: FieldInfo(annotation=int, required=True), &#x27;table&#x27;: FieldInfo(annotation=Table, required=True), &#x27;page&#x27;: FieldInfo(annotation=Page, required=True)}"}, {"fullname": "agent_c_extraction.models.found_table.FoundTableModel.model_computed_fields", "modulename": "agent_c_extraction.models.found_table", "qualname": "FoundTableModel.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output", "modulename": "agent_c_extraction.models.output", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "agent_c_extraction.models.output.extracted_table.ExtractedTable"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable.entries", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable.entries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_extraction.models.output.legend.LegendEntry]"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable.from_legend_table", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable.from_legend_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">legend_table</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"o\">.</span><span class=\"n\">LegendTable</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">opts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable.model_config", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable.model_fields", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;table_type&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The type of the extracted table, used for deserialization.&#x27;), &#x27;title&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;legend&#x27;: FieldInfo(annotation=Union[LegendTable, NoneType], required=False, default=None), &#x27;box_uuid&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;image_inputs&#x27;: FieldInfo(annotation=Union[list[ImageInput], NoneType], required=False, default=None), &#x27;table_annotations&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=False, default=None), &#x27;entries&#x27;: FieldInfo(annotation=List[LegendEntry], required=True)}"}, {"fullname": "agent_c_extraction.models.output.extracted_legend_table.ExtractedLegendTable.model_computed_fields", "modulename": "agent_c_extraction.models.output.extracted_legend_table", "qualname": "ExtractedLegendTable.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table", "modulename": "agent_c_extraction.models.output.extracted_table", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation.field_name", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation.field_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation.note", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation.note", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation.model_config", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation.model_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;field_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;note&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.FieldAnnotation.model_computed_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "FieldAnnotation.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.field_annotations", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.field_annotations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[agent_c_extraction.models.output.extracted_table.FieldAnnotation]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.get_display_for", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.get_display_for", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"o\">.</span><span class=\"n\">LegendTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.notes", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.notes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.model_config", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.model_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;field_annotations&#x27;: FieldInfo(annotation=list[FieldAnnotation], required=True)}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTableRow.model_computed_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTableRow.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.__init__", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span></span>)</span>"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.table_type", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.table_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.title", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.legend", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_extraction.models.output.legend.LegendTable]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.box_uuid", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.box_uuid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.image_inputs", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.image_inputs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[agent_c.models.image_input.ImageInput]]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.table_annotations", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.table_annotations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[str]]"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.get_subclass_for_type", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.get_subclass_for_type", "kind": "function", "doc": "<p>Find the correct subclass based on the type name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">extracted_table</span><span class=\"o\">.</span><span class=\"n\">ExtractedTable</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.model_config", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.model_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;table_type&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The type of the extracted table, used for deserialization.&#x27;), &#x27;title&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;legend&#x27;: FieldInfo(annotation=Union[LegendTable, NoneType], required=False, default=None), &#x27;box_uuid&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;image_inputs&#x27;: FieldInfo(annotation=Union[list[ImageInput], NoneType], required=False, default=None), &#x27;table_annotations&#x27;: FieldInfo(annotation=Union[list[str], NoneType], required=False, default=None)}"}, {"fullname": "agent_c_extraction.models.output.extracted_table.ExtractedTable.model_computed_fields", "modulename": "agent_c_extraction.models.output.extracted_table", "qualname": "ExtractedTable.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.legend", "modulename": "agent_c_extraction.models.output.legend", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.legend.EntryType", "modulename": "agent_c_extraction.models.output.legend", "qualname": "EntryType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "agent_c_extraction.models.output.legend.EntryType.symbol", "modulename": "agent_c_extraction.models.output.legend", "qualname": "EntryType.symbol", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntryType.symbol: &#x27;symbol&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.EntryType.color", "modulename": "agent_c_extraction.models.output.legend", "qualname": "EntryType.color", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntryType.color: &#x27;color&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.EntryType.other", "modulename": "agent_c_extraction.models.output.legend", "qualname": "EntryType.other", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EntryType.other: &#x27;other&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.AnnotationLevel", "modulename": "agent_c_extraction.models.output.legend", "qualname": "AnnotationLevel", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "agent_c_extraction.models.output.legend.AnnotationLevel.single_value", "modulename": "agent_c_extraction.models.output.legend", "qualname": "AnnotationLevel.single_value", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationLevel.single_value: &#x27;single value&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.AnnotationLevel.full_table", "modulename": "agent_c_extraction.models.output.legend", "qualname": "AnnotationLevel.full_table", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationLevel.full_table: &#x27;full table&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.AnnotationLevel.row", "modulename": "agent_c_extraction.models.output.legend", "qualname": "AnnotationLevel.row", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationLevel.row: &#x27;row&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.AnnotationLevel.column", "modulename": "agent_c_extraction.models.output.legend", "qualname": "AnnotationLevel.column", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationLevel.column: &#x27;column&#x27;&gt;"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.entry_type", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.entry_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_extraction.models.output.legend.EntryType"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.applies_to", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.applies_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_extraction.models.output.legend.AnnotationLevel"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.description", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.meaning", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.meaning", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.Config", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.Config.use_enum_values", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.Config.use_enum_values", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.Config.json_encoders", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.Config.json_encoders", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;enum &#x27;EntryType&#x27;&gt;: &lt;function LegendEntry.Config.&lt;lambda&gt;&gt;, &lt;enum &#x27;AnnotationLevel&#x27;&gt;: &lt;function LegendEntry.Config.&lt;lambda&gt;&gt;}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.option_help_text_for_model", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.option_help_text_for_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.model_config", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;json_encoders&#x27;: {&lt;enum &#x27;EntryType&#x27;&gt;: &lt;function LegendEntry.Config.&lt;lambda&gt;&gt;, &lt;enum &#x27;AnnotationLevel&#x27;&gt;: &lt;function LegendEntry.Config.&lt;lambda&gt;&gt;}, &#x27;use_enum_values&#x27;: True}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.model_fields", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;entry_type&#x27;: FieldInfo(annotation=EntryType, required=True), &#x27;applies_to&#x27;: FieldInfo(annotation=AnnotationLevel, required=True), &#x27;description&#x27;: FieldInfo(annotation=str, required=True), &#x27;meaning&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendEntry.model_computed_fields", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendEntry.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/models/\">https://docs.pydantic.dev/2.9/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of the class variables defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The synthesized <code>__init__</code> [<code>Signature</code>][inspect.Signature] of the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.entries", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.entries", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_extraction.models.output.legend.LegendEntry]"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.get_annotation_meaning", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.get_annotation_meaning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">annotation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.option_help_text_for_model", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.option_help_text_for_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.model_config", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.model_fields", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;entries&#x27;: FieldInfo(annotation=List[LegendEntry], required=True)}"}, {"fullname": "agent_c_extraction.models.output.legend.LegendTable.model_computed_fields", "modulename": "agent_c_extraction.models.output.legend", "qualname": "LegendTable.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.models.pdf_file_model", "modulename": "agent_c_extraction.models.pdf_file_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel", "kind": "class", "doc": "<p>Model for a PDF file, containing metadata and the parsed PDF object.</p>\n", "bases": "agent_c.models.observable.ObservableModel"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.source_filename", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.source_filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.pdf", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.pdf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pdfplumber.pdf.PDF"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.image_resolution", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.image_resolution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.bounding_boxes", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.bounding_boxes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[agent_c_extraction.models.bounding_box_model.BoundingBoxModel]"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.add_bounding_box", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.add_bounding_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bbox</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.Config", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.Config.arbitrary_types_allowed", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p>Allow arbitrary types. This is needed for the File type. Default is True.\nSee <a href=\"https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed\">https://pydantic-docs.helpmanual.io/usage/types/#arbitrary-types-allowed</a></p>\n", "default_value": "True"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.model_config", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;, &#x27;arbitrary_types_allowed&#x27;: True}"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.model_fields", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;source_filename&#x27;: FieldInfo(annotation=str, required=True), &#x27;pdf&#x27;: FieldInfo(annotation=PDF, required=True), &#x27;image_resolution&#x27;: FieldInfo(annotation=int, required=False, default=300, json_schema_extra={&#x27;observable&#x27;: True}), &#x27;bounding_boxes&#x27;: FieldInfo(annotation=list[BoundingBoxModel], required=False, default_factory=list, json_schema_extra={&#x27;observable&#x27;: True})}"}, {"fullname": "agent_c_extraction.models.pdf_file_model.PDFFileModel.model_computed_fields", "modulename": "agent_c_extraction.models.pdf_file_model", "qualname": "PDFFileModel.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_extraction.table_scanners", "modulename": "agent_c_extraction.table_scanners", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base", "modulename": "agent_c_extraction.table_scanners.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableLayout", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableLayout", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "agent_c_extraction.table_scanners.base.TableLayout.single", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableLayout.single", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TableLayout.single: 1&gt;"}, {"fullname": "agent_c_extraction.table_scanners.base.TableLayout.horiz", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableLayout.horiz", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TableLayout.horiz: 2&gt;"}, {"fullname": "agent_c_extraction.table_scanners.base.TableLayout.vert", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableLayout.vert", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TableLayout.vert: 3&gt;"}, {"fullname": "agent_c_extraction.table_scanners.base.TableLayout.unknown", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableLayout.unknown", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TableLayout.unknown: 4&gt;"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.__init__", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pdf</span><span class=\"p\">:</span> <span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">PDF</span>,</span><span class=\"param\">\t<span class=\"n\">progress_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.pdf", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.pdf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.progress_callback", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.progress_callback", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.spr_key", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.spr_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.dd_key", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.dd_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.ds_key", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.ds_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.have_legends_under_tables", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.have_legends_under_tables", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.max_distance_for_legend", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.max_distance_for_legend", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.max_distance_for_title", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.max_distance_for_title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.max_distance_for_footer", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.max_distance_for_footer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.add_sub_boxes_for_found_tables", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.add_sub_boxes_for_found_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tbl_page_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.determine_table_layout", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.determine_table_layout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">Page</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">table_scanners</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">TableLayout</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.locate_box_below", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.locate_box_below", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.locate_side_boxes", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.locate_side_boxes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.locate_legend_for_box", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.locate_legend_for_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">box_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">table_scanners</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">TableLayout</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.bb_for_elements_within", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.bb_for_elements_within", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">box_type</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_type</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxType</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.locate_titles_for_box", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.locate_titles_for_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">box_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">table_scanners</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">TableLayout</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.locate_footers_for_page", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.locate_footers_for_page", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">Page</span>,</span><span class=\"param\">\t<span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.is_footer_text", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.is_footer_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.add_sub_boxes_for_page_tables", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.add_sub_boxes_for_page_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">boxes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.scan", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.scan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_settings</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.bounding_box_for_elements", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.bounding_box_for_elements", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.find_elements_within", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.find_elements_within", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">page_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.table_scanners.base.TableScannerBase.bbox_for_elements_within", "modulename": "agent_c_extraction.table_scanners.base", "qualname": "TableScannerBase.bbox_for_elements_within", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">page_no</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">x2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util", "modulename": "agent_c_extraction.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.util.pdf_image_helper", "modulename": "agent_c_extraction.util.pdf_image_helper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.stack_page_images", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.stack_page_images", "kind": "function", "doc": "<p>Stack a list of pdfplumber.page.PageImage objects vertically.</p>\n\n<p>Args:\n    page_images (List): List of pdfplumber.page.PageImage objects.</p>\n\n<p>Returns:\n    Image.Image: A combined image stacked vertically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">page_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">PageImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.stack_pil_images", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.stack_pil_images", "kind": "function", "doc": "<p>Stack a list of PIL.Image.Image objects vertically.</p>\n\n<p>Args:\n    pil_images (List): List of PIL.Image.Image objects.</p>\n\n<p>Returns:\n    Image.Image: A combined image stacked vertically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">pil_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.image_input_for_region", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.image_input_for_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">pdf_file</span>,</span><span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">image_input</span><span class=\"o\">.</span><span class=\"n\">ImageInput</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.page_image_for_region", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.page_image_for_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">pdf_file</span>,</span><span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">PageImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.pil_image_for_region", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.pil_image_for_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">pdf_file</span>,</span><span class=\"param\">\t<span class=\"n\">box</span><span class=\"p\">:</span> <span class=\"n\">agent_c_extraction</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">bounding_box_model</span><span class=\"o\">.</span><span class=\"n\">BoundingBoxModel</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;PIL.Image&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;D:</span><span class=\"se\">\\\\</span><span class=\"s1\">source</span><span class=\"se\">\\\\</span><span class=\"s1\">agent_c</span><span class=\"se\">\\\\</span><span class=\"s1\">.venv</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">PIL</span><span class=\"se\">\\\\</span><span class=\"s1\">Image.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_extraction.util.pdf_image_helper.PDFimageHelper.h_slice_image", "modulename": "agent_c_extraction.util.pdf_image_helper", "qualname": "PDFimageHelper.h_slice_image", "kind": "function", "doc": "<p>Slices the given Pillow image horizontally into <code>num_slices</code> equal parts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong>:  The input Pillow Image object.</li>\n<li><strong>num_slices</strong>:  The number of equal horizontal slices to create.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of Pillow Image objects representing the slices.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If <code>num_slices</code> is less than 1 or greater than the image height.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>,</span><span class=\"param\">\t<span class=\"n\">num_slices</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;PIL.Image&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;D:</span><span class=\"se\">\\\\</span><span class=\"s1\">source</span><span class=\"se\">\\\\</span><span class=\"s1\">agent_c</span><span class=\"se\">\\\\</span><span class=\"s1\">.venv</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">PIL</span><span class=\"se\">\\\\</span><span class=\"s1\">Image.py&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag", "modulename": "agent_c_rag", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders", "modulename": "agent_c_rag.loaders", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.centric_docx", "modulename": "agent_c_rag.loaders.centric_docx", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.centric_docx.STYLE_TO_ELEMENT_MAPPING", "modulename": "agent_c_rag.loaders.centric_docx", "qualname": "STYLE_TO_ELEMENT_MAPPING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Caption&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Caption&#x27;&gt;, &#x27;Heading 1&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading1&#x27;&gt;, &#x27;Heading 2&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading2&#x27;&gt;, &#x27;Heading 3&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading3&#x27;&gt;, &#x27;Heading 4&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading4&#x27;&gt;, &#x27;Heading 5&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading5&#x27;&gt;, &#x27;Heading 6&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading6&#x27;&gt;, &#x27;Heading 7&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading7&#x27;&gt;, &#x27;Heading 8&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading8&#x27;&gt;, &#x27;Heading 9&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Heading9&#x27;&gt;, &#x27;Intense Quote&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Quote&#x27;&gt;, &#x27;List&#x27;: &lt;class &#x27;unstructured.documents.elements.ListItem&#x27;&gt;, &#x27;List 2&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListItem2&#x27;&gt;, &#x27;List 3&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListItem3&#x27;&gt;, &#x27;List Bullet&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListBullet&#x27;&gt;, &#x27;List Bullet 2&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListBullet2&#x27;&gt;, &#x27;List Bullet 3&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListBullet3&#x27;&gt;, &#x27;List Continue&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListContinue&#x27;&gt;, &#x27;List Continue 2&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListContinue2&#x27;&gt;, &#x27;List Continue 3&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListContinue3&#x27;&gt;, &#x27;List Number&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListNumber&#x27;&gt;, &#x27;List Number 2&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListNumber2&#x27;&gt;, &#x27;List Number 3&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListNumber3&#x27;&gt;, &#x27;List Paragraph&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.ListParagraph&#x27;&gt;, &#x27;Macro Text&#x27;: &lt;class &#x27;unstructured.documents.elements.Text&#x27;&gt;, &#x27;No Spacing&#x27;: &lt;class &#x27;unstructured.documents.elements.Text&#x27;&gt;, &#x27;Quote&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Quote&#x27;&gt;, &#x27;Subtitle&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.Subtitle&#x27;&gt;, &#x27;TOCHeading&#x27;: &lt;class &#x27;agent_c_rag.segmentation.centric_elements.TOCHeading&#x27;&gt;, &#x27;Title&#x27;: &lt;class &#x27;unstructured.documents.elements.Title&#x27;&gt;}"}, {"fullname": "agent_c_rag.loaders.centric_docx.partition_docx", "modulename": "agent_c_rag.loaders.centric_docx", "qualname": "partition_docx", "kind": "function", "doc": "<p>Partitions Microsoft Word Documents in .docx format into its document elements.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filename\n    A string defining the target filename path.\nfile\n    A file-like object using \"rb\" mode --> open(filename, \"rb\").\nmetadata_filename\n    The filename to use for the metadata. Relevant because partition_doc converts the\n    document to .docx before partition. We want the original source filename in the\n    metadata.</p>\n\n<pre><code>include_metadata:\n        Determines whether or not metadata is included in the metadata\n            attribute on the elements in the output.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">SpooledTemporaryFile</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_page_breaks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_metadata</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">unstructured</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">Element</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.centric_docx.fix_bullets", "modulename": "agent_c_rag.loaders.centric_docx", "qualname": "fix_bullets", "kind": "function", "doc": "<p>Cleans unicode bullets from a section of text.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>\u25cf  This is an excellent point! -> This is an excellent point!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.centric_docx.convert_and_partition_docx", "modulename": "agent_c_rag.loaders.centric_docx", "qualname": "convert_and_partition_docx", "kind": "function", "doc": "<p>Converts a document to DOCX and then partitions it using partition_html. Works with\nany file format support by pandoc.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>source_format\n    The format of the source document, .e.g. odt\nfilename\n    A string defining the target filename path.\nfile\n    A file-like object using \"rb\" mode --> open(filename, \"rb\").\ninclude_metadata\n    Determines whether or not metadata is included in the metadata attribute on the\n    elements in the output.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">IO</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_metadata</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">unstructured</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">Element</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.centric_docx.convert_ms_office_table_to_md", "modulename": "agent_c_rag.loaders.centric_docx", "qualname": "convert_ms_office_table_to_md", "kind": "function", "doc": "<p>Convert a table object from a Word document to an HTML table string using the tabulate library.</p>\n\n<p>Args:\n    table (Table): A Table object.\n    as_html (bool): Whether to return the table as an HTML string (True) or a\n        plain text string (False)</p>\n\n<p>Returns:\n    str: An table string representation of the input table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">docx</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">Table</span>, </span><span class=\"param\"><span class=\"n\">as_html</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader", "modulename": "agent_c_rag.loaders.document_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader", "kind": "class", "doc": "<p>Helper class to call the appropriate element loader for a given file extension.</p>\n\n<p>Most file extensions get loaded via the LangChain UnstructuredFileLoader class.</p>\n\n<p>Word documents and PowerPoint files each have their own loaders that address flaws\nin the LangChain and other text conversion tools for these formats.</p>\n"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.extension_to_loader_map", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.extension_to_loader_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;.csv&#x27;: &#x27;unstructured&#x27;, &#x27;.doc&#x27;: &#x27;word_doc&#x27;, &#x27;.docx&#x27;: &#x27;word_doc&#x27;, &#x27;.eml&#x27;: &#x27;unstructured&#x27;, &#x27;.enex&#x27;: &#x27;evernote&#x27;, &#x27;.html&#x27;: &#x27;unstructured&#x27;, &#x27;.json&#x27;: &#x27;unstructured&#x27;, &#x27;.md&#x27;: &#x27;unstructured&#x27;, &#x27;.odt&#x27;: &#x27;open_document&#x27;, &#x27;.pdf&#x27;: &#x27;pdf&#x27;, &#x27;.rtf&#x27;: &#x27;unstructured&#x27;, &#x27;.tsv&#x27;: &#x27;unstructured&#x27;, &#x27;.txt&#x27;: &#x27;unstructured&#x27;, &#x27;.xls&#x27;: &#x27;excel&#x27;, &#x27;.xlsx&#x27;: &#x27;excel&#x27;, &#x27;.xml&#x27;: &#x27;unstructured&#x27;}"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_word_doc", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_word_doc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_pdf", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">skip_regexes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_evernote", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_evernote", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_open_document", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_open_document", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_unstructured", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_unstructured", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_excel", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_excel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.DocumentLoader.load_document", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "DocumentLoader.load_document", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">langchain_core</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Document</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.document_loader.main", "modulename": "agent_c_rag.loaders.document_loader", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.eml_loader", "modulename": "agent_c_rag.loaders.eml_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader", "kind": "class", "doc": "<p>A class for loading and processing .eml files.</p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.__init__", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loader</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">loaders</span><span class=\"o\">.</span><span class=\"n\">pdf_form_loader</span><span class=\"o\">.</span><span class=\"n\">PDFFormLoader</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.form_loader", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.form_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.doc_loader", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.doc_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.min_image_short_size", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.min_image_short_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.min_image_long_size", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.min_image_long_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.augment_email_data", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.augment_email_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">email_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.extract_email_data", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.extract_email_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">eml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.extract_image", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.extract_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image_bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.contains_any_phrase", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.contains_any_phrase", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_string</span>, </span><span class=\"param\"><span class=\"n\">phrases</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.process_eml_files", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.process_eml_files", "kind": "function", "doc": "<p>Processes all .eml files in the input folder and extracts their data to the output folder.</p>\n\n<p>Args:\n    input_folder (str): The path to the input folder containing .eml files.\n    output_folder (str): The path to the output folder where extracted data will be saved.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.loaders.eml_loader.EmlLoader.flatten_email", "modulename": "agent_c_rag.loaders.eml_loader", "qualname": "EmlLoader.flatten_email", "kind": "function", "doc": "<p>Flatten the email structure by appending the body text and attachments from nested messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader", "modulename": "agent_c_rag.loaders.pdf_form_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader", "kind": "class", "doc": "<p>A class to load and process PDF forms, allowing for text extraction with specific filtering based on regular expressions.</p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.__init__", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.__init__", "kind": "function", "doc": "<p>Initializes the PDFFormLoader with optional regex patterns and density settings for text extraction.</p>\n\n<p>Args:\n    stop_regexes (list): A list of regex patterns to stop processing when matched.\n    skip_regexes (list): A list of regex patterns to skip lines when matched.\n    x_density (float): The horizontal density of text extraction.\n    y_density (float): The vertical density of text extraction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.x_density", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.x_density", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.y_density", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.y_density", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.stop_regexes", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.stop_regexes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.skip_regexes", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.skip_regexes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.pdf_form_loader.PDFFormLoader.extract_content_pages", "modulename": "agent_c_rag.loaders.pdf_form_loader", "qualname": "PDFFormLoader.extract_content_pages", "kind": "function", "doc": "<p>Extracts content from the given PDF file or path, applying regex filters.</p>\n\n<p>Args:\n    path_or_file_like (str or bytes): The PDF file path or bytes object.\n    stop_on_first_match (bool): Whether to stop processing when the first stop regex is matched.</p>\n\n<p>Returns:\n    List[str]: A list of processed text from each page.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path_or_file_like</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">stop_on_first_match</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader", "modulename": "agent_c_rag.loaders.simple_document_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader", "kind": "class", "doc": "<p>A class for loading documents of various formats into a list of strings or a single string.\nThis is distinct from the DocumentLoad that produce a list of Elements, indented for loading documents to\nbe stored in a vector store.</p>\n\n<p>This class is intended cases where you just want to load the text from a document, without any further processing.\nfor example if you're going to summarize it.</p>\n\n<p>This will eventually be a subclass of DocumentLoader, that just rolls up the Elements as text but I'm leaving it\nintact for now, as the way it loads PDFs is different from the way the DocumentLoader does it and I need to make\nsure the DocumentLoader way will work with the tabular extraction process.</p>\n"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.extension_to_loader_map", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.extension_to_loader_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;.pdf&#x27;: &#x27;pdf&#x27;, &#x27;.csv&#x27;: &#x27;text&#x27;, &#x27;.txt&#x27;: &#x27;text&#x27;, &#x27;.xls&#x27;: &#x27;excel&#x27;, &#x27;.xlsx&#x27;: &#x27;excel&#x27;, &#x27;.docx&#x27;: &#x27;docx&#x27;, &#x27;.xml&#x27;: &#x27;unstructured&#x27;}"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.load_pdf", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.load_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path_or_bytes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.extract_images_from_pdf", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.extract_images_from_pdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_path_or_file</span>, </span><span class=\"param\"><span class=\"n\">base_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.load_text", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.load_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.load_docx", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.load_docx", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_like</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.load_excel", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.load_excel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.simple_document_loader.SimpleDocumentLoader.load_document", "modulename": "agent_c_rag.loaders.simple_document_loader", "qualname": "SimpleDocumentLoader.load_document", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_path_or_bytes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.loaders.structured_word_loader", "modulename": "agent_c_rag.loaders.structured_word_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.loaders.structured_word_loader.StructuredWordDocumentLoader", "modulename": "agent_c_rag.loaders.structured_word_loader", "qualname": "StructuredWordDocumentLoader", "kind": "class", "doc": "<p>Loader that uses unstructured to load word documents while preserving strcuture.</p>\n", "bases": "langchain_community.document_loaders.unstructured.UnstructuredFileLoader"}, {"fullname": "agent_c_rag.loaders.structured_word_loader.main", "modulename": "agent_c_rag.loaders.structured_word_loader", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation", "modulename": "agent_c_rag.segmentation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.centric_elements", "modulename": "agent_c_rag.segmentation.centric_elements", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading1", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading1", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading1.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading1.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading1&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading2", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading2", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading2.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading2.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading2&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading3", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading3", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading3.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading3.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading3&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading4", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading4", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading4.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading4.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading4&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading5", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading5", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading5.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading5.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading5&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading6", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading6", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading6.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading6.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading6&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading7", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading7", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading7.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading7.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading7&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading8", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading8", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading8.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading8.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading8&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading9", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading9", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading9.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading9.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading9&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading10", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading10", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Heading10.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Heading10.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Heading10&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListItem2", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListItem2", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListItem2.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListItem2.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListItem2&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListItem3", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListItem3", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListItem3.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListItem3.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListItem3&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Caption", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Caption", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Caption.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Caption.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Caption&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Quote", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Quote", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Quote.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Quote.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Quote&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListContinue&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue2", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue2", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue2.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue2.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListContinue2&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue3", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue3", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListContinue3.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListContinue3.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListContinue3&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListNumber&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber2", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber2", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber2.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber2.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListNumber2&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber3", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber3", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber3.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber3.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListNumber3&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber4", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber4", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListNumber4.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListNumber4.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListNumber4&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TOCHeading", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TOCHeading", "kind": "class", "doc": "<p>Base element for capturing free text from within document.</p>\n", "bases": "Heading"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TOCHeading.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TOCHeading.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TOCHeading&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Subtitle", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Subtitle", "kind": "class", "doc": "<p>A text element for capturing titles.</p>\n", "bases": "unstructured.documents.elements.Title"}, {"fullname": "agent_c_rag.segmentation.centric_elements.Subtitle.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "Subtitle.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Subtitle&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListParagraph", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListParagraph", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListParagraph.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListParagraph.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListParagraph&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListBullet&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet2", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet2", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet2.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet2.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListBullet2&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet3", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet3", "kind": "class", "doc": "<p>ListItem is a NarrativeText element that is part of a list.</p>\n", "bases": "unstructured.documents.elements.ListItem"}, {"fullname": "agent_c_rag.segmentation.centric_elements.ListBullet3.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "ListBullet3.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ListBullet3&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableHeader", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableHeader", "kind": "class", "doc": "<p>An element for capturing Table headers.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableHeader.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableHeader.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TableHeader&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableRow", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableRow", "kind": "class", "doc": "<p>An element for capturing Table Rows.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableRow.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableRow.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TableRow&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableSeparator", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableSeparator", "kind": "class", "doc": "<p>An element for capturing Table separators.</p>\n", "bases": "unstructured.documents.elements.Text"}, {"fullname": "agent_c_rag.segmentation.centric_elements.TableSeparator.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "TableSeparator.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TableSeparator&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable", "kind": "class", "doc": "<p>An element for capturing Table separators.</p>\n", "bases": "unstructured.documents.elements.Element"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.__init__", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">centric_elements</span><span class=\"o\">.</span><span class=\"n\">TableHeader</span>,</span><span class=\"param\">\t<span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">centric_elements</span><span class=\"o\">.</span><span class=\"n\">TableSeparator</span>,</span><span class=\"param\">\t<span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">centric_elements</span><span class=\"o\">.</span><span class=\"n\">TableRow</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">element_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coordinates</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coordinate_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">unstructured</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">coordinates</span><span class=\"o\">.</span><span class=\"n\">CoordinateSystem</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">unstructured</span><span class=\"o\">.</span><span class=\"n\">documents</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">ElementMetadata</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.category", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.category", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;CentricTable&#x27;"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.header", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.header", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.separator", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.separator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.rows", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.rows", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.text", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.to_dict", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.to_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.centric_elements.CentricTable.apply", "modulename": "agent_c_rag.segmentation.centric_elements", "qualname": "CentricTable.apply", "kind": "function", "doc": "<p>Applies a cleaning brick to the text element. The function that's passed in\nshould take a string as input and produce a string as output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">cleaners</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.context", "modulename": "agent_c_rag.segmentation.context", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter", "modulename": "agent_c_rag.segmentation.context.context_formatter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter", "modulename": "agent_c_rag.segmentation.context.context_formatter", "qualname": "ContextFormatter", "kind": "class", "doc": "<p>Base class for formatters that transforms a collection of TextSegment models into a string.</p>\n\n<p>The formatted string is used as context information for stuffing into the prompt of an LLM.</p>\n\n<p>Args:\n    segments (List[SegmentModel]): list of segments to process\n    **kwargs: keyword arguments\n        token_limit (int): the limit for the number of tokens. Default is 0(no limit).\n        model_name (str): the name of the model to use. Default is 'gpt-4'.</p>\n"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter.__init__", "modulename": "agent_c_rag.segmentation.context.context_formatter", "qualname": "ContextFormatter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter.token_limit", "modulename": "agent_c_rag.segmentation.context.context_formatter", "qualname": "ContextFormatter.token_limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter.token_counter", "modulename": "agent_c_rag.segmentation.context.context_formatter", "qualname": "ContextFormatter.token_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter.format_segments", "modulename": "agent_c_rag.segmentation.context.context_formatter", "qualname": "ContextFormatter.format_segments", "kind": "function", "doc": "<p>Generates a formatted string of the input segments.</p>\n\n<p>The method is to be implemented in any class inheriting from StuffingFormatter.</p>\n\n<p>Returns:\n    str: the formatted string</p>\n\n<p>Raises:\n    NotImplementedError: If the method is not implemented</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segments</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">agent_context</span><span class=\"o\">.</span><span class=\"n\">AgentContextModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.context.models", "modulename": "agent_c_rag.segmentation.context.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel", "kind": "class", "doc": "<p>Stuffing Response Model Class\nSimple model to hold a basic stuffing response.</p>\n\n<p>Attributes:\n    text: A string containing the formatted text for stuffing into the prompt\n    token_count: An int with the number of tokens in the text.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel.text", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel.text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel.token_count", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel.token_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel.model_config", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel.model_fields", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;text&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;token_count&#x27;: FieldInfo(annotation=int, required=False, default=0)}"}, {"fullname": "agent_c_rag.segmentation.context.models.agent_context.AgentContextModel.model_computed_fields", "modulename": "agent_c_rag.segmentation.context.models.agent_context", "qualname": "AgentContextModel.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.context.source_chrono", "modulename": "agent_c_rag.segmentation.context.source_chrono", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.context.source_chrono.SourceChronoFormatter", "modulename": "agent_c_rag.segmentation.context.source_chrono", "qualname": "SourceChronoFormatter", "kind": "class", "doc": "<p>Base class for formatters that transforms a collection of TextSegment models into a string.</p>\n\n<p>The formatted string is used as context information for stuffing into the prompt of an LLM.</p>\n\n<p>Args:\n    segments (List[SegmentModel]): list of segments to process\n    **kwargs: keyword arguments\n        token_limit (int): the limit for the number of tokens. Default is 0(no limit).\n        model_name (str): the name of the model to use. Default is 'gpt-4'.</p>\n", "bases": "agent_c_rag.segmentation.context.context_formatter.ContextFormatter"}, {"fullname": "agent_c_rag.segmentation.context.source_chrono.SourceChronoFormatter.__init__", "modulename": "agent_c_rag.segmentation.context.source_chrono", "qualname": "SourceChronoFormatter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.context.source_chrono.SourceChronoFormatter.format_segments", "modulename": "agent_c_rag.segmentation.context.source_chrono", "qualname": "SourceChronoFormatter.format_segments", "kind": "function", "doc": "<p>Generates a formatted string of the input segments.</p>\n\n<p>The method is to be implemented in any class inheriting from StuffingFormatter.</p>\n\n<p>Returns:\n    str: the formatted string</p>\n\n<p>Raises:\n    NotImplementedError: If the method is not implemented</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">agent_context</span><span class=\"o\">.</span><span class=\"n\">AgentContextModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.context.source_chrono.SourceChronoFormatter.reduce_segments", "modulename": "agent_c_rag.segmentation.context.source_chrono", "qualname": "SourceChronoFormatter.reduce_segments", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">segments</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segment_repo", "modulename": "agent_c_rag.segmentation.segment_repo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.__init__", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.__init__", "kind": "function", "doc": "<p>Initialize the SegmentRepo class.</p>\n\n<p>Args:\n    weaviate_client (weaviate.client.Client): The Weaviate client object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">weaviate_client</span><span class=\"p\">:</span> <span class=\"n\">weaviate</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">WeaviateClient</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.weaviate_client", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.weaviate_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": weaviate.client.WeaviateClient"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.logger", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.batch_load_segments", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.batch_load_segments", "kind": "function", "doc": "<p>Batch load segments into a collection.</p>\n\n<p>Args:\n    collection (str): The name of the collection to load segments into.\n    segments (List[TextSegment]): A list of TextSegment objects to be loaded into the collection.\n    rate_limit (int, optional): The rate limit for the batch load in requests per minute. Default is 5000.\nReturns:\n    List[dict]: A list of failed objects information dictionaries.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">segments</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rate_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.model_context_for_query", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.model_context_for_query", "kind": "function", "doc": "<p>Query the vector store to find relevant documents, then convert them into a stuffing string.</p>\n\n<p>Args:\n    query (str): The text to find relevant documents for.\n    **kwargs: Additional keyword arguments.</p>\n\n<p>Kwargs:\n    search_type (string, optional): Must be one of ['similarity', 'hybrid'].  Default is similarity. only siularity is supported. right now\n    token_limit (int, optional): Limit the text to this token limit.\n                                 If zero all relevant docs will be included.\n                                 If non-zero the least relevant docs will be excluded as needed to fit under the limit.\n    formatter (string, optional): The context formatter to use.\n    model_name (str, optional): The model name used for determining token counts when generating the stuffing text.\n    transform_options (VectorTransformOptionsModel, optional): The options to use when optimizing the query.\n    result_limit (int, optional): The maximum number of relevant segments to return.\n    min_relevance (float, optional): The minimum relevance score for returned documents, ranging from 0.0 to 1.0.</p>\n\n<p>Returns:\n    str: A string suitable for stuffing into a prompt</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">agent_context</span><span class=\"o\">.</span><span class=\"n\">AgentContextModel</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.similarity_search", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.similarity_search", "kind": "function", "doc": "<p>Perform a similarity search.</p>\n\n<p>Args:\n    text (str): The query text.\n    **kwargs (Dict[str, Any]): Additional keyword arguments.</p>\n\n<p>Kwargs:\n    search_distance (float, optional): The search distance.</p>\n\n<pre><code>embedded_query (str, optional): An embedding object representing the user query\n\nauto_cut (int, optional): Autocut takes a positive integer parameter N, looks at the score of each result,\n                          and stops returning results after the Nth \"drop\" in score.\n                          Because hybrid combines a vector search with a keyword (BM25F) search,\n                          their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nwhere_clause (dict, optional): A dict containing a Weaviate where clause.\n</code></pre>\n\n<p>Returns:\n    List[SegmentModel]: List of segment models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.similarity_search_async", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.similarity_search_async", "kind": "function", "doc": "<p>Perform a similarity search asynchronously.</p>\n\n<p>Args:\n    query (str): The query text.\n    **kwargs (Dict[str, Any]): Additional keyword arguments.</p>\n\n<p>Kwargs:\n    search_distance (float, optional): The search distance.</p>\n\n<pre><code>embedded_query (str, optional): An embedding object representing the user query\n\nauto_cut (int, optional): Autocut takes a positive integer parameter N, looks at the score of each result,\n                          and stops returning results after the Nth \"drop\" in score.\n                          Because hybrid combines a vector search with a keyword (BM25F) search,\n                          their scores/distances cannot be directly compared, so the cut points may not be intuitive.\n\nwhere_clause (dict, optional): A dict containing a Weaviate where clause.\n</code></pre>\n\n<p>Returns:\n    List[SegmentModel]: List of segment models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.segmentation.segment_repo.SegmentRepo.create_collection", "modulename": "agent_c_rag.segmentation.segment_repo", "qualname": "SegmentRepo.create_collection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters", "modulename": "agent_c_rag.segmentation.segmenters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter", "kind": "class", "doc": "<p>A base class for classes that segment content based on elements</p>\n\n<p>...</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>chunk_size : int\n    the target size of the segment in tokens.\ntoken_counter : TokenCounter\n    a TokenCounter object for counting the tokens in the text</p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>segment_elements(elements: List, citation: Dict) -> List:\n    Segments the given elements (not implemented)</p>\n"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter.__init__", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter.__init__", "kind": "function", "doc": "<p>Constructs all the necessary attributes for the ElementSegmenter object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<pre><code>chunk_size : int, optional\n    target size in tokens for the segment, defaults to 500\ntoke_counter : TokenCounter\n    a TokenCounter object for counting the tokens in the text\nvec_transformer : A VectorTextTransformer, optional\n    defaults to the normal VectorTextTransformer with default options\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter.chunk_size", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter.chunk_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter.token_counter", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter.token_counter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.util.token_counter.TokenCounter"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter.vec_transformer", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter.vec_transformer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer"}, {"fullname": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter.segment_elements", "modulename": "agent_c_rag.segmentation.segmenters.element_segmenter", "qualname": "ElementSegmenter.segment_elements", "kind": "function", "doc": "<p>Segments the given elements (not implemented).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"n\">List</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.line", "modulename": "agent_c_rag.segmentation.segmenters.line", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segmenters.line.segment_lines", "modulename": "agent_c_rag.segmentation.segmenters.line", "qualname": "segment_lines", "kind": "function", "doc": "<p>Segments a given context into chunks based on the maximum token count.</p>\n\n<p>Args:\n    context_lines (str): The context to be segmented.\n    context_source (str): Identifies the source of this context being segmented\n    chunk_size (int): The maximum size of a chunk in tokens.\n    line_overlap (int): The number of lines to overlap between chunks.\n    counter (TokenCounter): A token counter to use for counting tokens, if not given TokenCounter.counter is used.</p>\n\n<p>Returns:\n    List[str]: A list of segmented text chunks.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tcontext_lines: [&lt;class &#x27;str&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">context_source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">line_overlap</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">counter</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">token_counter</span><span class=\"o\">.</span><span class=\"n\">TokenCounter</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">simple_segment</span><span class=\"o\">.</span><span class=\"n\">Segment</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter", "kind": "class", "doc": "<p>A base class for classes that segment content based on elements</p>\n\n<p>...</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>chunk_size : int\n    the target size of the segment in tokens.\ntoken_counter : TokenCounter\n    a TokenCounter object for counting the tokens in the text</p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>segment_elements(elements: List, citation: Dict) -> List:\n    Segments the given elements (not implemented)</p>\n", "bases": "agent_c_rag.segmentation.segmenters.element_segmenter.ElementSegmenter"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter.__init__", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter.__init__", "kind": "function", "doc": "<p>Constructs all the necessary attributes for the ElementSegmenter object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<pre><code>chunk_size : int, optional\n    target size in tokens for the segment, defaults to 500\ntoke_counter : TokenCounter\n    a TokenCounter object for counting the tokens in the text\nvec_transformer : A VectorTextTransformer, optional\n    defaults to the normal VectorTextTransformer with default options\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter.handle_special_segments", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter.handle_special_segments", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">current_segment</span>,</span><span class=\"param\">\t<span class=\"n\">special_segments</span>,</span><span class=\"param\">\t<span class=\"n\">result</span>,</span><span class=\"param\">\t<span class=\"n\">table_elements</span>,</span><span class=\"param\">\t<span class=\"n\">list_elements</span>,</span><span class=\"param\">\t<span class=\"n\">prior_element</span>,</span><span class=\"param\">\t<span class=\"n\">seq</span>,</span><span class=\"param\">\t<span class=\"n\">citation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter.handle_text_segment", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter.handle_text_segment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text_element</span>,</span><span class=\"param\">\t<span class=\"n\">cur_segment</span><span class=\"p\">:</span> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">text_segment</span><span class=\"o\">.</span><span class=\"n\">TextSegment</span>,</span><span class=\"param\">\t<span class=\"n\">seq</span>,</span><span class=\"param\">\t<span class=\"n\">citation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter.is_header_or_title", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter.is_header_or_title", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">element</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.StructuredParagraphSegmenter.segment_elements", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "StructuredParagraphSegmenter.segment_elements", "kind": "function", "doc": "<p>Segments the given elements (not implemented).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">elements</span>, </span><span class=\"param\"><span class=\"n\">citation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.segmenters.structured_paragrah.main", "modulename": "agent_c_rag.segmentation.segmenters.structured_paragrah", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.simple_segment", "modulename": "agent_c_rag.segmentation.simple_segment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment", "kind": "class", "doc": "<p>A class representing a segment of text, its associated token count, and a unique identifier.</p>\n\n<p>Attributes:\n    id (str): The unique identifier for the segment.\n    content (str): The content of the text segment.\n    token_count (int): The number of tokens in the text segment.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.__init__", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.id", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.content", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.token_count", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.token_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.source_name", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.source_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.sequence", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.sequence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.model_config", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.model_fields", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;content&#x27;: FieldInfo(annotation=str, required=True), &#x27;token_count&#x27;: FieldInfo(annotation=int, required=True), &#x27;source_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;sequence&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "agent_c_rag.segmentation.simple_segment.Segment.model_computed_fields", "modulename": "agent_c_rag.segmentation.simple_segment", "qualname": "Segment.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.text_segment", "modulename": "agent_c_rag.segmentation.text_segment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment", "kind": "class", "doc": "<p>A base class for segments which will be stored in and searched for in Weaviate.  It covers the basic fields that one would expect to find in a segment.\nAs well as a few fields that allow for filtering and searching based on categories and keywords.</p>\n\n<p>This uses a strategy of indexing far simpler content for search and retrieving more complex content for presentation to the model.</p>\n", "bases": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.append_content", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.append_content", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">content_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.distance", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.from_weaviate_response_object", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.from_weaviate_response_object", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.from_weaviate_response", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.from_weaviate_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.model_config", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.model_fields", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;uuid&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;created&#x27;: FieldInfo(annotation=str, required=False, default_factory=&lt;lambda&gt;, description=&#x27;timestamp&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.DATE: &#x27;date&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;content&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The content of the segment to be displayed to the model&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: False, &#x27;indexSearchable&#x27;: False, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;index_content&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The content of the segment to be indexed for search&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: False, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;sequence&#x27;: FieldInfo(annotation=int, required=True, description=&#x27;The sequence number of the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.INT: &#x27;int&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;token_count&#x27;: FieldInfo(annotation=int, required=True, description=&#x27;The number of tokens in the content property&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.INT: &#x27;int&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: False, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;citation&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The citation of the segment, should be a URI/filename or other unique human readable ID for the model to cite.&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;categories&#x27;: FieldInfo(annotation=List[str], required=False, default=[], description=&#x27;One or more categories for the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT_ARRAY: &#x27;text[]&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;keywords&#x27;: FieldInfo(annotation=List[str], required=False, default=[], description=&#x27;One or more keywords for the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT_ARRAY: &#x27;text[]&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;parent_segment&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;A UUID pointing to a larger, parent segment.&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.UUID: &#x27;uuid&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}})}"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.model_computed_fields", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.text_segment.TextSegment.model_post_init", "modulename": "agent_c_rag.segmentation.text_segment", "qualname": "TextSegment.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer", "kind": "class", "doc": "<p>Allows the \"cleaning\" of text in preparation for vectorization</p>\n"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.__init__", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">agent_c_rag</span><span class=\"o\">.</span><span class=\"n\">segmentation</span><span class=\"o\">.</span><span class=\"n\">vector_transform_options_model</span><span class=\"o\">.</span><span class=\"n\">VectorTransformOptionsModel</span> <span class=\"o\">=</span> <span class=\"n\">VectorTransformOptionsModel</span><span class=\"p\">(</span><span class=\"n\">make_lower</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_punct</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_unicode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">remove_markdown</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">strip_stop_words</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">lemmatize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;en_core_web_sm&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.make_lower", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.make_lower", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.remove_punct", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.remove_punct", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.remove_newlines", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.remove_newlines", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.remove_unicode", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.remove_unicode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.remove_markdown", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.remove_markdown", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.lemmatize", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.lemmatize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.strip_stop_words", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.strip_stop_words", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.language", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.language", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.vector_text_transformer.VectorTextTransformer.transform_text", "modulename": "agent_c_rag.segmentation.vector_text_transformer", "qualname": "VectorTextTransformer.transform_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel", "kind": "class", "doc": "<p>A Pydantic model for configuring the transformation of text prior to vectorization.</p>\n\n<p>Attributes:</p>\n\n<ul>\n<li>make_lower (bool): If True, transforms all text to lowercase. Default is True. Configurable via\nthe 'VT_MAKE_LOWER' environment variable.</li>\n<li>remove_punct (bool): If True, removes all punctuation. Default is True. Configurable via\nthe 'VT_REMOVE_PUNCT' environment variable.</li>\n<li>remove_newlines (bool): If True, removes all newlines. Default is True. Configurable via\nthe 'VT_REMOVE_NEWLINES' environment variable.</li>\n<li>remove_unicode (bool): If True, removes all unicode characters. Default is False. Configurable via\nthe 'VT_REMOVE_UNICODE' environment variable.</li>\n<li>remove_markdown (bool): If True, removes all markdown syntax. Default is True. Configurable via\nthe 'VT_REMOVE_MARKDOWN' environment variable.</li>\n<li>strip_stop_words (bool): If True, removes all stop words. Default is True. Configurable via\nthe 'VT_STRIP_STOP_WORDS' environment variable.</li>\n<li>lemmatize (bool): If True, performs word lemmatization. Default is False. Configurable via\nthe 'VT_LEMMATIZE' environment variable.</li>\n<li>language (str): Specifies the language to be used in the process. Default is 'en_core_web_sm'. Configurable via\nthe 'VT_LANGUAGE' environment variable.</li>\n</ul>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.make_lower", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.make_lower", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.remove_punct", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.remove_punct", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.remove_newlines", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.remove_newlines", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.remove_unicode", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.remove_unicode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.remove_markdown", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.remove_markdown", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.strip_stop_words", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.strip_stop_words", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.lemmatize", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.lemmatize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.language", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.language", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.model_config", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.model_fields", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;make_lower&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;remove_punct&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;remove_newlines&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;remove_unicode&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;remove_markdown&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;strip_stop_words&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;lemmatize&#x27;: FieldInfo(annotation=bool, required=False, default_factory=&lt;lambda&gt;), &#x27;language&#x27;: FieldInfo(annotation=str, required=False, default_factory=&lt;lambda&gt;)}"}, {"fullname": "agent_c_rag.segmentation.vector_transform_options_model.VectorTransformOptionsModel.model_computed_fields", "modulename": "agent_c_rag.segmentation.vector_transform_options_model", "qualname": "VectorTransformOptionsModel.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.weaviate", "modulename": "agent_c_rag.segmentation.weaviate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection", "kind": "class", "doc": "<p>This is a model of the Weaviate collection schema from: <a href=\"https://weaviate.io/developers/weaviate/config-refs/schema\">https://weaviate.io/developers/weaviate/config-refs/schema</a></p>\n\n<p>Set the item_model to a model that contains WeaviateProperty fields to define the properties of the collection.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.item_model", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.item_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.name", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.description", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.generative_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.generative_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._GenerativeConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.inverted_index_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.inverted_index_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._InvertedIndexConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.multi_tenancy_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.multi_tenancy_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._MultiTenancyConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.references", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[weaviate.collections.classes.config._ReferencePropertyBase]]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.replication_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.replication_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._ReplicationConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.reranker_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.reranker_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._RerankerConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.sharding_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.sharding_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config._ShardingConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.vector_index_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.vector_index_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[weaviate.collections.classes.config_vector_index._VectorIndexConfigCreate]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.vectorizer_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.vectorizer_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[weaviate.collections.classes.config_vectorizers._VectorizerConfigCreate, List[weaviate.collections.classes.config_named_vectors._NamedVectorConfigCreate], NoneType]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.data_model_properties", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.data_model_properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.data_model_references", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.data_model_references", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.skip_argument_validation", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.skip_argument_validation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.properties", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[dict]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.model_dump", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.model_dump", "kind": "function", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump\">https://docs.pydantic.dev/2.9/concepts/serialization/#modelmodel_dump</a></p>\n\n<p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>\n\n<p>Args:\n    mode: The mode in which <code>to_python</code> should run.\n        If mode is 'json', the output will only contain JSON serializable types.\n        If mode is 'python', the output may contain non-JSON-serializable Python objects.\n    include: A set of fields to include in the output.\n    exclude: A set of fields to exclude from the output.\n    context: Additional context to pass to the serializer.\n    by_alias: Whether to use the field's alias in the dictionary key if defined.\n    exclude_unset: Whether to exclude fields that have not been explicitly set.\n    exclude_defaults: Whether to exclude fields that are set to their default value.\n    exclude_none: Whether to exclude fields that have a value of <code>None</code>.\n    round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n    warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,\n        \"error\" raises a [<code>PydanticSerializationError</code>][pydantic_core.PydanticSerializationError].\n    serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p>\n\n<p>Returns:\n    A dictionary representation of the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.create_collection", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.create_collection", "kind": "function", "doc": "<p>Create the collection in Weaviate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">collections</span></span><span class=\"return-annotation\">) -> <span class=\"n\">weaviate</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Properties</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">References</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.collection_exists", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.collection_exists", "kind": "function", "doc": "<p>Check if the collection exists in Weaviate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collections</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.delete_collection", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.delete_collection", "kind": "function", "doc": "<p>Delete the collection in Weaviate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">collections</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.get_collection", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.get_collection", "kind": "function", "doc": "<p>Get the collection in Weaviate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">collections</span>,</span><span class=\"param\">\t<span class=\"n\">data_model_properties</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Properties</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_model_references</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">References</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_argument_validation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">weaviate</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">sync</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Properties</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">References</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.model_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.model_fields", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;item_model&#x27;: FieldInfo(annotation=Any, required=True, description=&#x27;The model of the items in the collection.&#x27;), &#x27;name&#x27;: FieldInfo(annotation=str, required=True, description=&quot;The name of the collection. i.e. &#x27;Question&#x27;&quot;), &#x27;description&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;, description=&#x27;A description of the collection for your reference.&#x27;), &#x27;generative_config&#x27;: FieldInfo(annotation=Union[_GenerativeConfigCreate, NoneType], required=False, default=None), &#x27;inverted_index_config&#x27;: FieldInfo(annotation=Union[_InvertedIndexConfigCreate, NoneType], required=False, default=None), &#x27;multi_tenancy_config&#x27;: FieldInfo(annotation=Union[_MultiTenancyConfigCreate, NoneType], required=False, default=None), &#x27;references&#x27;: FieldInfo(annotation=Union[List[_ReferencePropertyBase], NoneType], required=False, default=None), &#x27;replication_config&#x27;: FieldInfo(annotation=Union[_ReplicationConfigCreate, NoneType], required=False, default=None), &#x27;reranker_config&#x27;: FieldInfo(annotation=Union[_RerankerConfigCreate, NoneType], required=False, default=None), &#x27;sharding_config&#x27;: FieldInfo(annotation=Union[_ShardingConfigCreate, NoneType], required=False, default=None), &#x27;vector_index_config&#x27;: FieldInfo(annotation=Union[_VectorIndexConfigCreate, NoneType], required=False, default=None), &#x27;vectorizer_config&#x27;: FieldInfo(annotation=Union[_VectorizerConfigCreate, List[_NamedVectorConfigCreate], NoneType], required=False, default=None), &#x27;data_model_properties&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;data_model_references&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;skip_argument_validation&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_collection.WeaviateCollection.model_computed_fields", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_collection", "qualname": "WeaviateCollection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_property", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_property", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_property.WeaviateProperty", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_property", "qualname": "WeaviateProperty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">weaviate</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">DataType</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">module_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nested_properties</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">index_filterable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">index_searchable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment", "kind": "class", "doc": "<p>A base class for segments which will be stored in and searched for in Weaviate.  It covers the basic fields that one would expect to find in a segment.\nAs well as a few fields that allow for filtering and searching based on categories and keywords.</p>\n\n<p>This uses a strategy of indexing far simpler content for search and retrieving more complex content for presentation to the model.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.uuid", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.uuid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.created", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.created", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.content", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.index_content", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.index_content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.sequence", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.sequence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.token_count", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.token_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.citation", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.citation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.categories", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.categories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.keywords", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.keywords", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.parent_segment", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.parent_segment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.as_weaviate_object", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.as_weaviate_object", "kind": "function", "doc": "<p>Returns a dictionary representation of the segment suitable for storing in Weaviate.</p>\n\n<p>Returns:\n    dict: A dictionary representing the segment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.model_config", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.model_fields", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;uuid&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;created&#x27;: FieldInfo(annotation=str, required=False, default_factory=&lt;lambda&gt;, description=&#x27;timestamp&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.DATE: &#x27;date&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;content&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The content of the segment to be displayed to the model&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: False, &#x27;indexSearchable&#x27;: False, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;index_content&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The content of the segment to be indexed for search&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: False, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;sequence&#x27;: FieldInfo(annotation=int, required=True, description=&#x27;The sequence number of the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.INT: &#x27;int&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;token_count&#x27;: FieldInfo(annotation=int, required=True, description=&#x27;The number of tokens in the content property&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.INT: &#x27;int&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: False, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}}), &#x27;citation&#x27;: FieldInfo(annotation=str, required=True, description=&#x27;The citation of the segment, should be a URI/filename or other unique human readable ID for the model to cite.&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT: &#x27;text&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;categories&#x27;: FieldInfo(annotation=List[str], required=False, default=[], description=&#x27;One or more categories for the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT_ARRAY: &#x27;text[]&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;keywords&#x27;: FieldInfo(annotation=List[str], required=False, default=[], description=&#x27;One or more keywords for the segment&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.TEXT_ARRAY: &#x27;text[]&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: False, &#x27;vectorizePropertyName&#x27;: True}}}}), &#x27;parent_segment&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None, description=&#x27;A UUID pointing to a larger, parent segment.&#x27;, json_schema_extra={&#x27;weaviate&#x27;: {&#x27;dataType&#x27;: [&lt;DataType.UUID: &#x27;uuid&#x27;&gt;], &#x27;indexFilterable&#x27;: True, &#x27;indexSearchable&#x27;: True, &#x27;moduleConfig&#x27;: {&#x27;text2vec-openai&#x27;: {&#x27;skip&#x27;: True, &#x27;vectorizePropertyName&#x27;: False}}}})}"}, {"fullname": "agent_c_rag.segmentation.weaviate.weaviate_segment.WeaviateSegment.model_computed_fields", "modulename": "agent_c_rag.segmentation.weaviate.weaviate_segment", "qualname": "WeaviateSegment.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_rag.tools", "modulename": "agent_c_rag.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.kb", "modulename": "agent_c_rag.tools.kb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.kb.tool", "modulename": "agent_c_rag.tools.kb.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.__init__", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.logger", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.collection_name", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.collection_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.tool_chest", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.tool_chest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.agent", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.agent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c.agents.base.AgentRuntime]"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.messages", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[dict[str, Any]]"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.sections", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.sections", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c.prompting.basic_sections.persona.PersonaSection]"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.post_init", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.post_init", "kind": "function", "doc": "<p>Optional post-initialization method that can be used for additional setup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.tools.kb.tool.KnowledgebaseTools.query_knowledgebase", "modulename": "agent_c_rag.tools.kb.tool", "qualname": "KnowledgebaseTools.query_knowledgebase", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.tools.session_files", "modulename": "agent_c_rag.tools.session_files", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.manager", "modulename": "agent_c_rag.tools.session_files.manager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.__init__", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.session_manager", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.session_manager", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.chat.session_manager.ChatSessionManager"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.session_files", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.session_files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.session_id", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.session_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.collection_name", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.collection_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.tool_cache", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.tool_cache", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.toolsets.tool_cache.ToolCache"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.doc_loader", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.doc_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_rag.loaders.document_loader.DocumentLoader"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.logger", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.segment_repo", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.segment_repo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_rag.segmentation.segment_repo.SegmentRepo"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.ui_file_list", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.ui_file_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.add_paths", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.add_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.ui_file_list_changed", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.ui_file_list_changed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.tools.session_files.manager.SessionFileManager.index_file", "modulename": "agent_c_rag.tools.session_files.manager", "qualname": "SessionFileManager.index_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.tools.session_files.tool", "modulename": "agent_c_rag.tools.session_files.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.__init__", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.logger", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.collection_name", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.collection_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.tool_chest", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.tool_chest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.agent", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.agent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c.agents.base.AgentRuntime]"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.messages", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[dict[str, Any]]"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.sections", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.sections", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c.prompting.basic_sections.persona.PersonaSection]"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.post_init", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.post_init", "kind": "function", "doc": "<p>Optional post-initialization method that can be used for additional setup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.tools.session_files.tool.SessionFilesTools.query_session_files", "modulename": "agent_c_rag.tools.session_files.tool", "qualname": "SessionFilesTools.query_session_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.tools.weaviate", "modulename": "agent_c_rag.tools.weaviate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.weaviate.tool", "modulename": "agent_c_rag.tools.weaviate.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools", "kind": "class", "doc": "<p>Toolset for interacting with a Weaviate client for performing various operations.</p>\n\n<p>Attributes:\n    logger (logging.Logger): Logger for logging messages.\n    client (weaviate.WeaviateClient): Weaviate client instance for database operations.\n    collection_name (str): Name of the collection to perform the search on.\n    repo (SegmentRepo): Repository for segmentation operations.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.__init__", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.__init__", "kind": "function", "doc": "<p>Initialize the WeaviateTools instance.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments. Expected keys are:\n        client (weaviate.WeaviateClient): Weaviate client instance.\n        collection_name (str): Name of the collection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.logger", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.client", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": weaviate.client.WeaviateClient"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.collection_name", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.collection_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.repo", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.repo", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_rag.segmentation.segment_repo.SegmentRepo"}, {"fullname": "agent_c_rag.tools.weaviate.tool.WeaviateTools.near_text", "modulename": "agent_c_rag.tools.weaviate.tool", "qualname": "WeaviateTools.near_text", "kind": "function", "doc": "<p>Perform near_text search on a Weaviate collection.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments. Expected keys are:\n        text (str): The text for the similarity search.\n        result_limit (int, optional): Limit on the number of results. Default is 500.\n        offset (int, optional): Offset for the results, for pagination. Default is 0.\n        token_limit (int, optional): Token limit for the context. Default is 5000.</p>\n\n<p>Returns:\n    str: The response from the Centric Knowledge Base.\n         In case of an error, returns the error message in JSON format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_rag.util", "modulename": "agent_c_rag.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.util.pdf_image_helper", "modulename": "agent_c_rag.util.pdf_image_helper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.util.pdf_image_helper.PDFimageHelper", "modulename": "agent_c_rag.util.pdf_image_helper", "qualname": "PDFimageHelper", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.util.pdf_image_helper.PDFimageHelper.stack_page_images", "modulename": "agent_c_rag.util.pdf_image_helper", "qualname": "PDFimageHelper.stack_page_images", "kind": "function", "doc": "<p>Stack a list of pdfplumber.page.PageImage objects vertically.</p>\n\n<p>Args:\n    page_images (List): List of pdfplumber.page.PageImage objects.</p>\n\n<p>Returns:\n    Image.Image: A combined image stacked vertically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">page_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pdfplumber</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">PageImage</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.util.pdf_image_helper.PDFimageHelper.stack_pil_images", "modulename": "agent_c_rag.util.pdf_image_helper", "qualname": "PDFimageHelper.stack_pil_images", "kind": "function", "doc": "<p>Stack a list of PIL.Image.Image objects vertically.</p>\n\n<p>Args:\n    pil_images (List): List of PIL.Image.Image objects.</p>\n\n<p>Returns:\n    Image.Image: A combined image stacked vertically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">pil_images</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.util.pdf_image_helper.PDFimageHelper.h_slice_image", "modulename": "agent_c_rag.util.pdf_image_helper", "qualname": "PDFimageHelper.h_slice_image", "kind": "function", "doc": "<p>Slices the given Pillow image horizontally into <code>num_slices</code> equal parts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong>:  The input Pillow Image object.</li>\n<li><strong>num_slices</strong>:  The number of equal horizontal slices to create.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of Pillow Image objects representing the slices.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If <code>num_slices</code> is less than 1 or greater than the image height.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">Image</span>,</span><span class=\"param\">\t<span class=\"n\">num_slices</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;PIL.Image&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;D:</span><span class=\"se\">\\\\</span><span class=\"s1\">source</span><span class=\"se\">\\\\</span><span class=\"s1\">agent_c</span><span class=\"se\">\\\\</span><span class=\"s1\">.venv</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">PIL</span><span class=\"se\">\\\\</span><span class=\"s1\">Image.py&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.util.tesseract", "modulename": "agent_c_rag.util.tesseract", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_rag.util.tesseract.extract_text_from_image", "modulename": "agent_c_rag.util.tesseract", "qualname": "extract_text_from_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_rag.util.tesseract.extract_text_from_image_file", "modulename": "agent_c_rag.util.tesseract", "qualname": "extract_text_from_image_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_or_file_like</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps", "modulename": "agent_c_reference_apps", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli", "modulename": "agent_c_reference_apps.agent_c_cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.NEW_SESSION_WELCOME", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "NEW_SESSION_WELCOME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;New here?  Ask me about my toolsets.&#x27;"}, {"fullname": "agent_c_reference_apps.agent_c_cli.OLD_SESSION_WELCOME", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "OLD_SESSION_WELCOME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;[bold]Welcome back![/] Remember, I have toolsets available feel free to ask me about them.&#x27;"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat", "kind": "class", "doc": "<p>A reference app that implements a chat interface with a centric_one_shot.ChatAgent.</p>\n\n<p>Zep is used as a chat session manager to track chat history. Visit <a href=\"https://www.getzep.com/\">https://www.getzep.com/</a> and grab their docker\ncompose file to set it up. This uses streaming responses from the agent.</p>\n\n<p>Note:</p>\n\n<ul>\n<li>The console outputs Markdown. If you're seeing garbled output, you need a better shell.</li>\n<li>Tested on *nix terminals and Windows Terminal Preview on Windows.</li>\n</ul>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.__init__", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.logger", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.user_id", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.user_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.session_id", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.session_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.audio_cues", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.audio_cues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.cmd_handler", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.cmd_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.chat_ui", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.chat_ui", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.user_prefs", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.user_prefs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.user_preferences.preferences.base.UserPreference]"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.can_use_tools", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.can_use_tools", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.run", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.run", "kind": "function", "doc": "<p>Initializes the console and starts the input loop to interact with the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.chat_callback", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.chat_callback", "kind": "function", "doc": "<p>Called by the ChatAgent and toolsets to notify us of events as they happen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">chat_event</span><span class=\"o\">.</span><span class=\"n\">ChatEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.agent_c_cli.CLIChat.show_output_mode_hint", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "CLIChat.show_output_mode_hint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.agent_c_cli.main", "modulename": "agent_c_reference_apps.agent_c_cli", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.agent_c_gradio", "modulename": "agent_c_reference_apps.agent_c_gradio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.agent_c_gradio.main", "modulename": "agent_c_reference_apps.agent_c_gradio", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.example_file_import", "modulename": "agent_c_reference_apps.example_file_import", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.__init__", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">weaviate</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">WeaviateClient</span>, </span><span class=\"param\"><span class=\"n\">collection_name</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.client", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.collection_name", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.collection_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.collection", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.collection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.loader", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.repo", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.repo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.collection_object", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.collection_object", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.create_collection", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.create_collection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.load_files", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.load_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.example_file_import.SimpleIndexer.load_file", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "SimpleIndexer.load_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">500</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.example_file_import.main", "modulename": "agent_c_reference_apps.example_file_import", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui", "modulename": "agent_c_reference_apps.ui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.LINE_SEPARATOR", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "LINE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.markdown.Markdown", "default_value": "&lt;rich.markdown.Markdown object&gt;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ASSISTANT_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ASSISTANT_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold gold1]Assistant[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.USER_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "USER_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold dark_magenta]You[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.OPI_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "OPI_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold aquamarine1 u]Open Interpreter[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.SYSTEM_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "SYSTEM_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold orange1 u]System[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.EXT_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "EXT_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold aquamarine1 u]Extraction[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.DALLE_LABEL", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "DALLE_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[bold green_yellow u]DALL-E-3 Image Generation Tool[/]&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.SESSION_HELP", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "SESSION_HELP", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;[italic]Use this with [bold]--session[/bold] to resume[/].&#x27;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.EXIT_INFO", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "EXIT_INFO", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&quot;    Send &#x27;[italic gold1]!exit[/]&#x27; to exit without saving or &#x27;[italic gold1]!!!![/]&#x27; to save and exit&quot;"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ROLE_LINE_STYLES", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ROLE_LINE_STYLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;user&#x27;: {&#x27;label&#x27;: &#x27;[bold dark_magenta]You[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold gold1&#x27;}, &#x27;assistant&#x27;: {&#x27;label&#x27;: &#x27;[bold gold1]Assistant[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold dark_magenta&#x27;}, &#x27;opi&#x27;: {&#x27;label&#x27;: &#x27;[bold aquamarine1 u]Open Interpreter[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold aquamarine1&#x27;}, &#x27;extraction&#x27;: {&#x27;label&#x27;: &#x27;[bold aquamarine1 u]Extraction[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold aquamarine1&#x27;}, &#x27;dalle3&#x27;: {&#x27;label&#x27;: &#x27;[bold green_yellow u]DALL-E-3 Image Generation Tool[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold hot_pink2&#x27;}, &#x27;system&#x27;: {&#x27;label&#x27;: &#x27;[bold orange1 u]System[/]&#x27;, &#x27;line_style&#x27;: &#x27;bold orange1&#x27;}}"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.OUTPUT_TOOL_ARGS", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "OUTPUT_TOOL_ARGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.__init__", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.system", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.system", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.audio_cues", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.audio_cues", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_reference_apps.util.audio_cues.AudioCues"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.tts_roles", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.tts_roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.transcriber", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.transcriber", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber]"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.tts_engine", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.tts_engine", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs]"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.debug_event", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.debug_event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.rich_console", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.rich_console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.token_renderer", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.token_renderer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.key_bindings", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.key_bindings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.prompt_session", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.prompt_session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.last_role", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.last_role", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.temp_dir", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.temp_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tempfile.TemporaryDirectory"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.transcript_queue", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.transcript_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.print_session_info", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.print_session_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">session_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.start_role_message", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.start_role_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">role</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.system_message", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.system_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.fake_role_message", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.fake_role_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">role</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.show_session_info", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.show_session_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zep_cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.get_user_input", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.get_user_input", "kind": "function", "doc": "<p>Prompt the user for input or retrieve speech-to-text input from a output_queue.</p>\n\n<p>Returns:\n    str: The user input as a string or the processed speech-to-text input.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, typing.Optional[agent_c_vision.cv2.cv2_frame.CV2Frame]):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.render_media", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.render_media", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">opts</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">chat_event</span><span class=\"o\">.</span><span class=\"n\">RenderMedia</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.console_chat_ui.ConsoleChatUI.chat_event", "modulename": "agent_c_reference_apps.ui.console_chat_ui", "qualname": "ConsoleChatUI.chat_event", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">chat_event</span><span class=\"o\">.</span><span class=\"n\">ChatEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui", "modulename": "agent_c_reference_apps.ui.gradio_ui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.ENHANCED_DEBUG_INFO", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "ENHANCED_DEBUG_INFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.ESSENTIAL_TOOLS", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "ESSENTIAL_TOOLS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;MemoryTools&#x27;, &#x27;WorkspaceTools&#x27;, &#x27;UserPreferencesTools&#x27;, &#x27;VoiceTools&#x27;]"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.get_available_tools", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "get_available_tools", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat", "kind": "class", "doc": "<p>A reference app that implements a chat interface with a centric_one_shot.ChatAgent.</p>\n\n<p>Zep is used as a chat session manager to track chat history. Visit <a href=\"https://www.getzep.com/\">https://www.getzep.com/</a> and grab their docker\ncompose file to set it up. This uses streaming responses from the agent.</p>\n\n<p>Note:</p>\n\n<ul>\n<li>The console outputs Markdown. If you're seeing garbled output, you need a better shell.</li>\n<li>Tested on *nix terminals and Windows Terminal Preview on Windows.</li>\n</ul>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.__init__", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.available_tools", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.available_tools", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.selected_tools", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.selected_tools", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.temperature", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.temperature", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.known_personas", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.known_personas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.custom_persona_text", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.custom_persona_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.agent_key", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.agent_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.logger", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.user_id", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.user_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.session_id", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.session_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.audio_cues", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.audio_cues", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.output_queue", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.output_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": asyncio.queues.Queue"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.token_renderer", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.token_renderer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.tool_note", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.tool_note", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.debug_response", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.debug_response", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.debug_info", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.debug_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.partial_output", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.partial_output", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.tool_names", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.tool_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.user_message", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.user_message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.image_inputs", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.image_inputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.last_role", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.last_role", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.tts_roles", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.tts_roles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.cmd_handler", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.cmd_handler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.user_prefs", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.user_prefs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.user_preferences.preferences.base.UserPreference]"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.can_use_tools", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.can_use_tools", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.load_persona", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.load_persona", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">agent_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.load_svg", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.load_svg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">svg_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.banner", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.banner", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.add_user_input", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.add_user_input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">history</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.load_new_persona", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.load_new_persona", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">agent_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.update_persona_prompt", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.update_persona_prompt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">persona_text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.set_temperature", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.set_temperature", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">temperature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.new_session", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.new_session", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.update_selected_tools", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.update_selected_tools", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">selected_optional_tools</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.handle_gradio_input", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.handle_gradio_input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">history</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncGenerator</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.display_debug_info", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.display_debug_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.open_browser_after_delay", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.open_browser_after_delay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">delay</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.reinit_agent", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.reinit_agent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.run", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.run", "kind": "function", "doc": "<p>Initializes the console and starts the input loop to interact with the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.get_tool_note", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.get_tool_note", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui.GradioChat.chat_callback", "modulename": "agent_c_reference_apps.ui.gradio_ui", "qualname": "GradioChat.chat_callback", "kind": "function", "doc": "<p>Called by the ChatAgent and toolsets to notify us of events as they happen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">chat_event</span><span class=\"o\">.</span><span class=\"n\">ChatEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format.logger", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger agent_c_reference_apps.ui.gradio_ui_utils.response_format (WARNING)&gt;"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format.system_prompt", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "qualname": "system_prompt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format.question_response", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "qualname": "question_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format.align_tool_calls", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "qualname": "align_tool_calls", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.gradio_ui_utils.response_format.combine_debug_info", "modulename": "agent_c_reference_apps.ui.gradio_ui_utils.response_format", "qualname": "combine_debug_info", "kind": "function", "doc": "<p>Combine multiple pieces of debug information into a single list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">info_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.markdown_render", "modulename": "agent_c_reference_apps.ui.markdown_render", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MARKDOWN_CODE_BLOCK", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MARKDOWN_CODE_BLOCK", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;```&#x27;"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.CODE_BLOCK_REGEX", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "CODE_BLOCK_REGEX", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(.*?)(```.*?```)(.*)&#x27;"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.__init__", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.rich_console", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.rich_console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.pending_codeblock", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.pending_codeblock", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.prior_token", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.prior_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.chat_message_buffer", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.chat_message_buffer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.current_line", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.current_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.render_token", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.render_token", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.ui.markdown_render.MarkdownTokenRenderer.flush", "modulename": "agent_c_reference_apps.ui.markdown_render", "qualname": "MarkdownTokenRenderer.flush", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.util", "modulename": "agent_c_reference_apps.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.audio_cues", "modulename": "agent_c_reference_apps.util.audio_cues", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues.__init__", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues.directory", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues.directory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues.sounds", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues.sounds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues.load_sounds", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues.load_sounds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.util.audio_cues.AudioCues.play_sound", "modulename": "agent_c_reference_apps.util.audio_cues", "qualname": "AudioCues.play_sound", "kind": "function", "doc": "<p>Play a sound in a separate thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sound_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_reference_apps.util.chat_commands", "modulename": "agent_c_reference_apps.util.chat_commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.Command", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "Command", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "agent_c_reference_apps.util.chat_commands.Command.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "Command.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ChangeOutputFormatCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ChangeOutputFormatCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ChangeOutputFormatCommand.__init__", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ChangeOutputFormatCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">format</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ChangeOutputFormatCommand.format", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ChangeOutputFormatCommand.format", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ChangeOutputFormatCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ChangeOutputFormatCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ExitCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ExitCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.ExitCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "ExitCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.SaveSessionCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "SaveSessionCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.SaveSessionCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "SaveSessionCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.KeepSessionCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "KeepSessionCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.KeepSessionCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "KeepSessionCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.CompactCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "CompactCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.CompactCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "CompactCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.NewSessionCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "NewSessionCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.NewSessionCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "NewSessionCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.OpenInterpreterCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "OpenInterpreterCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.OpenInterpreterCommand.__init__", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "OpenInterpreterCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.util.chat_commands.OpenInterpreterCommand.message", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "OpenInterpreterCommand.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.OpenInterpreterCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "OpenInterpreterCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.UnrecognizedCommand", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "UnrecognizedCommand", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Command"}, {"fullname": "agent_c_reference_apps.util.chat_commands.UnrecognizedCommand.__init__", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "UnrecognizedCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "agent_c_reference_apps.util.chat_commands.UnrecognizedCommand.message", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "UnrecognizedCommand.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.UnrecognizedCommand.execute", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "UnrecognizedCommand.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_reference_apps.util.chat_commands.CommandHandler", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "CommandHandler", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.CommandHandler.commands", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "CommandHandler.commands", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_reference_apps.util.chat_commands.CommandHandler.handle_command", "modulename": "agent_c_reference_apps.util.chat_commands", "qualname": "CommandHandler.handle_command", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_message</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools", "modulename": "agent_c_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools", "modulename": "agent_c_tools.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.agent_memory", "modulename": "agent_c_tools.tools.agent_memory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt", "modulename": "agent_c_tools.tools.agent_memory.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.__init__", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.session_manager", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.session_manager", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.chat.session_manager.ChatSessionManager"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.session_kvps", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.session_kvps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.model_config", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.model_fields", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;session_manager&#x27;: FieldInfo(annotation=ChatSessionManager, required=True)}"}, {"fullname": "agent_c_tools.tools.agent_memory.prompt.MemorySection.model_computed_fields", "modulename": "agent_c_tools.tools.agent_memory.prompt", "qualname": "MemorySection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.agent_memory.tool", "modulename": "agent_c_tools.tools.agent_memory.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.agent_memory.tool.MemoryTools", "modulename": "agent_c_tools.tools.agent_memory.tool", "qualname": "MemoryTools", "kind": "class", "doc": "<p>MemoryTools is a class that extends ZepDependentToolset to provide methods\nfor storing and clearing metadata associated with the current user/session.</p>\n\n<p>This simple tool unlocks a LOT of capabilities, the model can store complex information\nusing nothing more than this tool and some model instructions.  This is a tool you'll likely want\nto supply your own version of the <code>OldPromptSection</code> to provide better model instructions.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.agent_memory.tool.MemoryTools.__init__", "modulename": "agent_c_tools.tools.agent_memory.tool", "qualname": "MemoryTools.__init__", "kind": "function", "doc": "<p>Initialize MemoryTools with a MemorySection instance.</p>\n\n<p>Args:\n    **kwargs (Any): Keyword arguments including those for ZepDependentToolset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.agent_memory.tool.MemoryTools.section", "modulename": "agent_c_tools.tools.agent_memory.tool", "qualname": "MemoryTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.agent_memory.tool.MemoryTools.store_metadata", "modulename": "agent_c_tools.tools.agent_memory.tool", "qualname": "MemoryTools.store_metadata", "kind": "function", "doc": "<p>Store or update metadata associated with the current user or session.</p>\n\n<p>Args:\n    key (str): The key to store the value under.\n    location (str): Where to store the metadata ('user' or 'session').\n    value (str | dict): The value to store, can be a string or a more complex data object.\n    prefix (str): Prefix used for metadata keys, defaults to 'ai_'.</p>\n\n<p>Returns:\n    str: A message indicating that the value has been stored.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.agent_memory.tool.MemoryTools.clear_metadata_key", "modulename": "agent_c_tools.tools.agent_memory.tool", "qualname": "MemoryTools.clear_metadata_key", "kind": "function", "doc": "<p>Remove metadata associated with a specified key from the current user or session.</p>\n\n<p>Args:\n    key (str): The key for which to clear the value.\n    location (str): Which set of metadata to update ('user' or 'session').\n    prefix (str): Prefix used for metadata keys, defaults to 'ai_'.</p>\n\n<p>Returns:\n    str: A message indicating that the key has been cleared.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dall_e", "modulename": "agent_c_tools.tools.dall_e", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.prompt", "modulename": "agent_c_tools.tools.dall_e.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.prompt.DallESection", "modulename": "agent_c_tools.tools.dall_e.prompt", "qualname": "DallESection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.dall_e.prompt.DallESection.__init__", "modulename": "agent_c_tools.tools.dall_e.prompt", "qualname": "DallESection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.dall_e.prompt.DallESection.model_config", "modulename": "agent_c_tools.tools.dall_e.prompt", "qualname": "DallESection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.dall_e.prompt.DallESection.model_fields", "modulename": "agent_c_tools.tools.dall_e.prompt", "qualname": "DallESection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.dall_e.prompt.DallESection.model_computed_fields", "modulename": "agent_c_tools.tools.dall_e.prompt", "qualname": "DallESection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.dall_e.tool", "modulename": "agent_c_tools.tools.dall_e.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.__init__", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.openai_client", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.openai_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": openai.AsyncOpenAI"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.section", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.username", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.username", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.workspace", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.workspace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.create_image", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.create_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dall_e.tool.DallETools.handle_base64_response", "modulename": "agent_c_tools.tools.dall_e.tool", "qualname": "DallETools.handle_base64_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">images_response</span><span class=\"o\">.</span><span class=\"n\">ImagesResponse</span>,</span><span class=\"param\">\t<span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ratio</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">session_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;None&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis", "modulename": "agent_c_tools.tools.data_vis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.data_vis.tool", "modulename": "agent_c_tools.tools.data_vis.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.__init__", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.workspace_tool", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.dataframe_tool", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.dataframe_tool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_bar_chart", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_bar_chart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_line_chart", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_line_chart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_pie_chart", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_pie_chart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_histogram_plot", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_histogram_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_box_plot", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_box_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_scatter_plot", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_scatter_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_violin_plot", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_violin_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_heatmap", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.data_vis.tool.DataVisualizationTools.create_pairplot", "modulename": "agent_c_tools.tools.data_vis.tool", "qualname": "DataVisualizationTools.create_pairplot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe", "modulename": "agent_c_tools.tools.dataframe", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.prompt", "modulename": "agent_c_tools.tools.dataframe.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.prompt.DataframeToolsSection", "modulename": "agent_c_tools.tools.dataframe.prompt", "qualname": "DataframeToolsSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.dataframe.prompt.DataframeToolsSection.__init__", "modulename": "agent_c_tools.tools.dataframe.prompt", "qualname": "DataframeToolsSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.dataframe.prompt.DataframeToolsSection.model_config", "modulename": "agent_c_tools.tools.dataframe.prompt", "qualname": "DataframeToolsSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.dataframe.prompt.DataframeToolsSection.model_fields", "modulename": "agent_c_tools.tools.dataframe.prompt", "qualname": "DataframeToolsSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.dataframe.prompt.DataframeToolsSection.model_computed_fields", "modulename": "agent_c_tools.tools.dataframe.prompt", "qualname": "DataframeToolsSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.dataframe.tool", "modulename": "agent_c_tools.tools.dataframe.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.__init__", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.DEFAULT_DATA_FOLDER", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.DEFAULT_DATA_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;dataframe_data&#x27;"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.dataframe", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.dataframe", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.file_path", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.section", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.workspace_tool", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.key_prefix", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.key_prefix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.load_data", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.load_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.store_dataframe_to_cache", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.store_dataframe_to_cache", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.load_cached_dataframe", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.load_cached_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.json_to_dataframe", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.json_to_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.add_column", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.add_column", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.drop_column", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.drop_column", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.rename_columns", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.rename_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.sort_dataframe", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.sort_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.query_rows", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.query_rows", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.group_by_and_agg", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.group_by_and_agg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.agg", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.agg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.summarize_dataframe", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.summarize_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.calculate_correlations", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.calculate_correlations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.calculate_complex_correlation", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.calculate_complex_correlation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.display_records", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.display_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.save_dataframe_to_excel", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.save_dataframe_to_excel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.tool.DataFrameTools.ydata_profile_analysis", "modulename": "agent_c_tools.tools.dataframe.tool", "qualname": "DataFrameTools.ydata_profile_analysis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.dataframe.util", "modulename": "agent_c_tools.tools.dataframe.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.util.dataframe_in_memory", "modulename": "agent_c_tools.tools.dataframe.util.dataframe_in_memory", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.dataframe.util.dataframe_in_memory.create_excel_in_memory", "modulename": "agent_c_tools.tools.dataframe.util.dataframe_in_memory", "qualname": "create_excel_in_memory", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.mermaid_chart", "modulename": "agent_c_tools.tools.mermaid_chart", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt.MermaidChatSection", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "qualname": "MermaidChatSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt.MermaidChatSection.__init__", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "qualname": "MermaidChatSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt.MermaidChatSection.model_config", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "qualname": "MermaidChatSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt.MermaidChatSection.model_fields", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "qualname": "MermaidChatSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.mermaid_chart.prompt.MermaidChatSection.model_computed_fields", "modulename": "agent_c_tools.tools.mermaid_chart.prompt", "qualname": "MermaidChatSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.mermaid_chart.tool", "modulename": "agent_c_tools.tools.mermaid_chart.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.mermaid_chart.tool.MermaidChartTools", "modulename": "agent_c_tools.tools.mermaid_chart.tool", "qualname": "MermaidChartTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.mermaid_chart.tool.MermaidChartTools.__init__", "modulename": "agent_c_tools.tools.mermaid_chart.tool", "qualname": "MermaidChartTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.mermaid_chart.tool.MermaidChartTools.render_graph", "modulename": "agent_c_tools.tools.mermaid_chart.tool", "qualname": "MermaidChartTools.render_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.rss", "modulename": "agent_c_tools.tools.rss", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.feeds", "modulename": "agent_c_tools.tools.rss.feeds", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.feeds.STD_SCHEMA", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "STD_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;]"}, {"fullname": "agent_c_tools.tools.rss.feeds.PP_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "PP_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://www.propublica.org/feeds/propublica/main&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.PP_SCHEMA", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "PP_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;published&#x27;, &#x27;author&#x27;]"}, {"fullname": "agent_c_tools.tools.rss.feeds.CENTRIC_CONSULTING_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "CENTRIC_CONSULTING_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://centricconsulting.com/feed&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.CENTRIC_SCHEMA", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "CENTRIC_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;published&#x27;, &#x27;author&#x27;, &#x27;summary&#x27;]"}, {"fullname": "agent_c_tools.tools.rss.feeds.CNN_TOP_STORIES_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "CNN_TOP_STORIES_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://rss.cnn.com/rss/cnn_topstories.rss&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.CNN_LATEST_STORIES_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "CNN_LATEST_STORIES_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://rss.cnn.com/rss/cnn_latest.rss&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.OPEN_AI_BLOG_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "OPEN_AI_BLOG_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://openai.com/blog/rss.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.LA_TIMES_MAIN_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "LA_TIMES_MAIN_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://www.latimes.com/rss2.0.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.MIT_NEWS_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "MIT_NEWS_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://news.mit.edu/topic/mitartificial-intelligence2-rss.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.KD_NUGGETS_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "KD_NUGGETS_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://feeds.feedburner.com/kdnuggets-data-mining-analytics&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.TOWARDS_AI_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "TOWARDS_AI_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://feeds.feedburner.com/towards-ai&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.TOWARDS_DATA_SCIENCE_FEED_URL", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "TOWARDS_DATA_SCIENCE_FEED_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://towardsdatascience.com/feed&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.AWS_NEWS_BLOG", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "AWS_NEWS_BLOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://feeds.feedburner.com/AmazonWebServicesBlog&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.AZURE_NEWS_BLOG", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "AZURE_NEWS_BLOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://azure.microsoft.com/en-us/blog/feed/&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.SEEKING_ALPHA_CURRENT_MARKET_NEWS", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "SEEKING_ALPHA_CURRENT_MARKET_NEWS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://seekingalpha.com/market_currents.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.SEEKING_ALPHA_POPULAR_ARTICLES", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "SEEKING_ALPHA_POPULAR_ARTICLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://seekingalpha.com/most-popular-articles.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.SEEKING_ALPHA_FINANCIAL_NEWS", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "SEEKING_ALPHA_FINANCIAL_NEWS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://seekingalpha.com/financial.xml&#x27;"}, {"fullname": "agent_c_tools.tools.rss.feeds.SA_SCHEMA", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "SA_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;title&#x27;, &#x27;uri&#x27;, &#x27;published_on&#x27;, &#x27;id&#x27;]"}, {"fullname": "agent_c_tools.tools.rss.feeds.default_feeds", "modulename": "agent_c_tools.tools.rss.feeds", "qualname": "default_feeds", "kind": "variable", "doc": "<p></p>\n", "default_value": "[RSSToolFeed(id=&#x27;propublica_news&#x27;, url=&#x27;https://www.propublica.org/feeds/propublica/main&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;published&#x27;, &#x27;author&#x27;], desc=&#x27;Latest headlines from ProPublica (Investigative Journalism in the Public Interest)&#x27;), RSSToolFeed(id=&#x27;cnn_top_stories&#x27;, url=&#x27;http://rss.cnn.com/rss/cnn_topstories.rss&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Top stories from CNN.&#x27;), RSSToolFeed(id=&#x27;cnn_latest&#x27;, url=&#x27;http://rss.cnn.com/rss/cnn_latest.rss&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest headlines from CNN.&#x27;), RSSToolFeed(id=&#x27;latimes&#x27;, url=&#x27;https://www.latimes.com/rss2.0.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest headlines from the LA Times.&#x27;), RSSToolFeed(id=&#x27;openai_blog&#x27;, url=&#x27;https://openai.com/blog/rss.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest blog posts from Open AI.&#x27;), RSSToolFeed(id=&#x27;mit_news&#x27;, url=&#x27;https://news.mit.edu/topic/mitartificial-intelligence2-rss.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest news from MIT&#x27;), RSSToolFeed(id=&#x27;kd_nuggets&#x27;, url=&#x27;https://feeds.feedburner.com/kdnuggets-data-mining-analytics&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Data Science, Machine Learning, AI &amp; Analytics news&#x27;), RSSToolFeed(id=&#x27;towards_ai&#x27;, url=&#x27;https://feeds.feedburner.com/towards-ai&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Making AI accessible to all&#x27;), RSSToolFeed(id=&#x27;towards_data_science&#x27;, url=&#x27;https://towardsdatascience.com/feed&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Your home for data science news.&#x27;), RSSToolFeed(id=&#x27;centric_consulting_blog&#x27;, url=&#x27;https://centricconsulting.com/feed&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;published&#x27;, &#x27;author&#x27;, &#x27;summary&#x27;], desc=&#x27;Latest posts on the Centric Consulting blog.&#x27;), RSSToolFeed(id=&#x27;aws_blog&#x27;, url=&#x27;https://feeds.feedburner.com/AmazonWebServicesBlog&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest AWS news from Amazon&#x27;), RSSToolFeed(id=&#x27;azure_blog&#x27;, url=&#x27;https://feeds.feedburner.com/AmazonWebServicesBlog&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;link&#x27;, &#x27;pubDate&#x27;, &#x27;description&#x27;], desc=&#x27;Latest Azure news from Microsoft&#x27;), RSSToolFeed(id=&#x27;seeking_alpha_current_market&#x27;, url=&#x27;https://seekingalpha.com/market_currents.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;uri&#x27;, &#x27;published_on&#x27;, &#x27;id&#x27;], desc=&#x27;Latest Market News from Seeking Alpha&#x27;), RSSToolFeed(id=&#x27;seeking_alpha_popular_articles&#x27;, url=&#x27;https://seekingalpha.com/most-popular-articles.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;uri&#x27;, &#x27;published_on&#x27;, &#x27;id&#x27;], desc=&#x27;Popular Articles from Seeking Alpha&#x27;), RSSToolFeed(id=&#x27;seeking_alpha_financial_news&#x27;, url=&#x27;https://seekingalpha.com/financial.xml&#x27;, fields_wanted=[&#x27;title&#x27;, &#x27;uri&#x27;, &#x27;published_on&#x27;, &#x27;id&#x27;], desc=&#x27;Financial Industry News from Seeking Alpha&#x27;)]"}, {"fullname": "agent_c_tools.tools.rss.model", "modulename": "agent_c_tools.tools.rss.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed", "kind": "class", "doc": "<p>This class represents an RSS feed configuration for the RSS tool.</p>\n\n<p>Attributes:\n    id (str): The unique identifier for the RSS feed.\n    url (str): The URL of the RSS feed.\n    fields_wanted (List[str]): A list of fields that are desired from the RSS feed.\n    desc (str): A description of the RSS feed.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.id", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.url", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.fields_wanted", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.fields_wanted", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.desc", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.desc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.model_config", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.model_fields", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;url&#x27;: FieldInfo(annotation=str, required=True), &#x27;fields_wanted&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;desc&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_tools.tools.rss.model.RSSToolFeed.model_computed_fields", "modulename": "agent_c_tools.tools.rss.model", "qualname": "RSSToolFeed.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.rss.prompt", "modulename": "agent_c_tools.tools.rss.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.__init__", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.feeds", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.feeds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.feed_list", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.feed_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.model_config", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.model_fields", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;feeds&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_tools.tools.rss.prompt.RSSSection.model_computed_fields", "modulename": "agent_c_tools.tools.rss.prompt", "qualname": "RSSSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.rss.tool", "modulename": "agent_c_tools.tools.rss.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.tool.RssTools", "modulename": "agent_c_tools.tools.rss.tool", "qualname": "RssTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.rss.tool.RssTools.__init__", "modulename": "agent_c_tools.tools.rss.tool", "qualname": "RssTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.rss.tool.RssTools.feeds", "modulename": "agent_c_tools.tools.rss.tool", "qualname": "RssTools.feeds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.rss.model.RSSToolFeed]"}, {"fullname": "agent_c_tools.tools.rss.tool.RssTools.section", "modulename": "agent_c_tools.tools.rss.tool", "qualname": "RssTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.rss.tool.RssTools.fetch_rss_feed", "modulename": "agent_c_tools.tools.rss.tool", "qualname": "RssTools.fetch_rss_feed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.salesforce", "modulename": "agent_c_tools.tools.salesforce", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.prompt", "modulename": "agent_c_tools.tools.salesforce.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.prompt.SalesforcePrompt", "modulename": "agent_c_tools.tools.salesforce.prompt", "qualname": "SalesforcePrompt", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.salesforce.prompt.SalesforcePrompt.__init__", "modulename": "agent_c_tools.tools.salesforce.prompt", "qualname": "SalesforcePrompt.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.salesforce.prompt.SalesforcePrompt.model_config", "modulename": "agent_c_tools.tools.salesforce.prompt", "qualname": "SalesforcePrompt.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.salesforce.prompt.SalesforcePrompt.model_fields", "modulename": "agent_c_tools.tools.salesforce.prompt", "qualname": "SalesforcePrompt.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.salesforce.prompt.SalesforcePrompt.model_computed_fields", "modulename": "agent_c_tools.tools.salesforce.prompt", "qualname": "SalesforcePrompt.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.salesforce.tool", "modulename": "agent_c_tools.tools.salesforce.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.__init__", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.logger", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.workspace_tool", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.workspace_tool", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.workspaces.tool.WorkspaceTools"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.section", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.sf", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.sf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.convert_dates_to_iso_format", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.convert_dates_to_iso_format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.deduplicate_keys", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.deduplicate_keys", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.query_salesforce", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.query_salesforce", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.create_record", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.create_record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.update_record", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.update_record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.salesforce.tool.SalesforceTools.delete_record", "modulename": "agent_c_tools.tools.salesforce.tool", "qualname": "SalesforceTools.delete_record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.salesforce.util", "modulename": "agent_c_tools.tools.salesforce.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.util.sfdc_utils", "modulename": "agent_c_tools.tools.salesforce.util.sfdc_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.salesforce.util.sfdc_utils.SalesforceQueryError", "modulename": "agent_c_tools.tools.salesforce.util.sfdc_utils", "qualname": "SalesforceQueryError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "agent_c_tools.tools.salesforce.util.sfdc_utils.validate_soql_query", "modulename": "agent_c_tools.tools.salesforce.util.sfdc_utils", "qualname": "validate_soql_query", "kind": "function", "doc": "<p>Validate a SOQL query for basic syntax and structure.\nThis is a basic validation and may not catch all possible errors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.salesforce.util.sfdc_utils.clean_salesforce_record", "modulename": "agent_c_tools.tools.salesforce.util.sfdc_utils", "qualname": "clean_salesforce_record", "kind": "function", "doc": "<p>Clean a Salesforce record by removing Salesforce-specific metadata fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.sec_filings", "modulename": "agent_c_tools.tools.sec_filings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt", "modulename": "agent_c_tools.tools.sec_filings.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt.SecFilingPrompt", "modulename": "agent_c_tools.tools.sec_filings.prompt", "qualname": "SecFilingPrompt", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt.SecFilingPrompt.__init__", "modulename": "agent_c_tools.tools.sec_filings.prompt", "qualname": "SecFilingPrompt.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt.SecFilingPrompt.model_config", "modulename": "agent_c_tools.tools.sec_filings.prompt", "qualname": "SecFilingPrompt.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt.SecFilingPrompt.model_fields", "modulename": "agent_c_tools.tools.sec_filings.prompt", "qualname": "SecFilingPrompt.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.sec_filings.prompt.SecFilingPrompt.model_computed_fields", "modulename": "agent_c_tools.tools.sec_filings.prompt", "qualname": "SecFilingPrompt.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.sec_filings.tool", "modulename": "agent_c_tools.tools.sec_filings.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.__init__", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.faiss_index_name", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.faiss_index_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.section", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.api_key", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.logger", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.download_filing", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.download_filing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.generate_random_user", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.generate_random_user", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.download_form_html", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.download_form_html", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.sec_filings.tool.SECTools.query_filing", "modulename": "agent_c_tools.tools.sec_filings.tool", "qualname": "SECTools.query_filing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_bio", "modulename": "agent_c_tools.tools.user_bio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_bio.prompt", "modulename": "agent_c_tools.tools.user_bio.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.__init__", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.session_manager", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.session_manager", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c.chat.session_manager.ChatSessionManager"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.user_kvps", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.user_kvps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.userid", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.userid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.firstname", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.firstname", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.lastname", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.lastname", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.model_config", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.model_fields", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;session_manager&#x27;: FieldInfo(annotation=ChatSessionManager, required=True)}"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSection.model_computed_fields", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSectionNoToolUse", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSectionNoToolUse", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "UserBioSection"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSectionNoToolUse.__init__", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSectionNoToolUse.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSectionNoToolUse.model_config", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSectionNoToolUse.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSectionNoToolUse.model_fields", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSectionNoToolUse.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;session_manager&#x27;: FieldInfo(annotation=ChatSessionManager, required=True)}"}, {"fullname": "agent_c_tools.tools.user_bio.prompt.UserBioSectionNoToolUse.model_computed_fields", "modulename": "agent_c_tools.tools.user_bio.prompt", "qualname": "UserBioSectionNoToolUse.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_bio.tool", "modulename": "agent_c_tools.tools.user_bio.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_bio.tool.UserBioTools", "modulename": "agent_c_tools.tools.user_bio.tool", "qualname": "UserBioTools", "kind": "class", "doc": "<p>UserBioTools  is a tool to allow the model to update the user record.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.user_bio.tool.UserBioTools.__init__", "modulename": "agent_c_tools.tools.user_bio.tool", "qualname": "UserBioTools.__init__", "kind": "function", "doc": "<p>Initialize MemoryTools with a MemorySection instance.</p>\n\n<p>Args:\n    **kwargs (Any): Keyword arguments including those for ZepDependentToolset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_bio.tool.UserBioTools.section", "modulename": "agent_c_tools.tools.user_bio.tool", "qualname": "UserBioTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_bio.tool.UserBioTools.update_name", "modulename": "agent_c_tools.tools.user_bio.tool", "qualname": "UserBioTools.update_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_preferences", "modulename": "agent_c_tools.tools.user_preferences", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences", "modulename": "agent_c_tools.tools.user_preferences.preferences", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as.AddressMeAsPreference", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "qualname": "AddressMeAsPreference", "kind": "class", "doc": "<p>Preference setting for how the user would like to be addressed by the assistant.</p>\n", "bases": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as.AddressMeAsPreference.__init__", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "qualname": "AddressMeAsPreference.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as.AddressMeAsPreference.model_config", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "qualname": "AddressMeAsPreference.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as.AddressMeAsPreference.model_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "qualname": "AddressMeAsPreference.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;default_value&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;user_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;visible_to_model&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;model_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;)}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.address_me_as.AddressMeAsPreference.model_computed_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.address_me_as", "qualname": "AddressMeAsPreference.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality.AssistantPersonalityPreference", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "qualname": "AssistantPersonalityPreference", "kind": "class", "doc": "<p>Preference setting for the personality the user would like the assistant to portray.</p>\n", "bases": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality.AssistantPersonalityPreference.__init__", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "qualname": "AssistantPersonalityPreference.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality.AssistantPersonalityPreference.model_config", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "qualname": "AssistantPersonalityPreference.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality.AssistantPersonalityPreference.model_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "qualname": "AssistantPersonalityPreference.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;default_value&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;user_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;visible_to_model&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;model_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;)}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.assitant_personality.AssistantPersonalityPreference.model_computed_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.assitant_personality", "qualname": "AssistantPersonalityPreference.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference", "kind": "class", "doc": "<p>Represents a basic user preference setting, with attributes that define the preference object.\nIt can be subclassed to create specific user preferences with default settings and instructions.</p>\n\n<p>A preference with visible_to_model set, needs model instructions</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.name", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.default_value", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.default_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.user_instructions", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.user_instructions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.visible_to_model", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.visible_to_model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.model_instructions", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.model_instructions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.Config", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.Config", "kind": "class", "doc": "<p>Configuration for the Pydantic model.</p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.Config.protected_namespaces", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.Config.protected_namespaces", "kind": "variable", "doc": "<p></p>\n", "default_value": "()"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.model_config", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.model_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;default_value&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;user_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;visible_to_model&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;model_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;)}"}, {"fullname": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference.model_computed_fields", "modulename": "agent_c_tools.tools.user_preferences.preferences.base", "qualname": "UserPreference.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt", "modulename": "agent_c_tools.tools.user_preferences.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.__init__", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.user_preferences", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.user_preferences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.user_preferences.preferences.base.UserPreference]"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.model_preferences", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.model_preferences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.prefs_model_instructions", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.prefs_model_instructions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.pref_names", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.pref_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.model_config", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.model_fields", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;user_preferences&#x27;: FieldInfo(annotation=List[UserPreference], required=True), &#x27;model_preferences&#x27;: FieldInfo(annotation=Callable, required=True)}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSection.model_computed_fields", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSectionNoToolUse", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSectionNoToolUse", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "UserPrefSection"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSectionNoToolUse.__init__", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSectionNoToolUse.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSectionNoToolUse.model_config", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSectionNoToolUse.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSectionNoToolUse.model_fields", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSectionNoToolUse.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;user_preferences&#x27;: FieldInfo(annotation=List[UserPreference], required=True), &#x27;model_preferences&#x27;: FieldInfo(annotation=Callable, required=True)}"}, {"fullname": "agent_c_tools.tools.user_preferences.prompt.UserPrefSectionNoToolUse.model_computed_fields", "modulename": "agent_c_tools.tools.user_preferences.prompt", "qualname": "UserPrefSectionNoToolUse.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.user_preferences.tool", "modulename": "agent_c_tools.tools.user_preferences.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools", "kind": "class", "doc": "<p>UserPreferencesTools class provides methods to manage and interact with user preferences.\nThis includes finding, getting, resetting or listing user preferences and their values.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.__init__", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.__init__", "kind": "function", "doc": "<p>Initialize UserPreferencesTools with a list of user preferences.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments, expecting 'user_preferences' to be included.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.user_preferences", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.user_preferences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.user_preferences.preferences.base.UserPreference]"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.section", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.find_preference_by_name", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.find_preference_by_name", "kind": "function", "doc": "<p>Find a user preference by its name.</p>\n\n<p>Args:\n    name (str): The name of the preference to find.</p>\n\n<p>Returns:\n    Optional[UserPreference]: The UserPreference object if found, else None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c_tools</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">user_preferences</span><span class=\"o\">.</span><span class=\"n\">preferences</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">UserPreference</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.get_user_preference", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.get_user_preference", "kind": "function", "doc": "<p>Get the value of a user preference by its key.</p>\n\n<p>Args:\n    key (str): The key of the preference to get.</p>\n\n<p>Returns:\n    str: The value of the preference, either from user metadata or default.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.get_model_prefs", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.get_model_prefs", "kind": "function", "doc": "<p>Get the list of model preferences visible to the model along with their current and default values.</p>\n\n<p>Returns:\n    List[Dict[str, Any]]: The list of preferences that are visible to the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.save_user_pref", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.save_user_pref", "kind": "function", "doc": "<p>Save a user preference with a given key to the provided value.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments:\n        'key' (str): The preference to set.\n        'value' (str): The preference value to store.\n        'prefix' (str, optional): Prefix used for user preference metadata keys.</p>\n\n<p>Returns:\n    str: Message indicating the status of the preference update.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.reset_user_pref", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.reset_user_pref", "kind": "function", "doc": "<p>Reset a user preference to its default value.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments:\n        'key' (str): The preference to reset.\n        'prefix' (str, optional): Prefix used for user preference metadata keys.</p>\n\n<p>Returns:\n    str: Message indicating the status of the preference reset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.user_preferences.tool.UserPreferencesTools.list_user_prefs", "modulename": "agent_c_tools.tools.user_preferences.tool", "qualname": "UserPreferencesTools.list_user_prefs", "kind": "function", "doc": "<p>List all user preferences including name, default value, current value, and user instructions.</p>\n\n<p>Args:\n    **kwargs: Arbitrary keyword arguments (unused in this method).</p>\n\n<p>Returns:\n    str: JSON string containing the list of user preferences.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web", "modulename": "agent_c_tools.tools.web", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters", "modulename": "agent_c_tools.tools.web.formatters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters.base", "modulename": "agent_c_tools.tools.web.formatters.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters.base.ContentFormatter", "modulename": "agent_c_tools.tools.web.formatters.base", "qualname": "ContentFormatter", "kind": "class", "doc": "<p>Basic formatter class that converts entire page content to Markdown.</p>\n\n<p>Attributes:\n    pattern (Pattern[str]): A compiled regular expression pattern to match URLs.</p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters.base.ContentFormatter.__init__", "modulename": "agent_c_tools.tools.web.formatters.base", "qualname": "ContentFormatter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">Pattern</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web.formatters.base.ContentFormatter.pattern", "modulename": "agent_c_tools.tools.web.formatters.base", "qualname": "ContentFormatter.pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": re.Pattern[str]"}, {"fullname": "agent_c_tools.tools.web.formatters.base.ContentFormatter.match", "modulename": "agent_c_tools.tools.web.formatters.base", "qualname": "ContentFormatter.match", "kind": "function", "doc": "<p>Check if the given URL matches the pattern.</p>\n\n<p>Args:\n    url (str): URL to be matched.</p>\n\n<p>Returns:\n    bool: True if the pattern matches the URL, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web.formatters.base.ContentFormatter.format", "modulename": "agent_c_tools.tools.web.formatters.base", "qualname": "ContentFormatter.format", "kind": "function", "doc": "<p>Format the given content to Markdown.</p>\n\n<p>Args:\n    content (str): Content to be formatted.\n    url (str): Source URL of the content.</p>\n\n<p>Returns:\n    str: Formatted content in Markdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web.formatters.centric_blog", "modulename": "agent_c_tools.tools.web.formatters.centric_blog", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters.centric_blog.CentricBlogFormatter", "modulename": "agent_c_tools.tools.web.formatters.centric_blog", "qualname": "CentricBlogFormatter", "kind": "class", "doc": "<p>A Formatter specific to 'centricconsulting.com/blog' that adds additional information before the content.\nInherits from ContentFormatter.</p>\n\n<p>Uses the readability Document for main content and regex to extract meta information such as the author and post date.</p>\n", "bases": "agent_c_tools.tools.web.formatters.base.ContentFormatter"}, {"fullname": "agent_c_tools.tools.web.formatters.centric_blog.CentricBlogFormatter.format", "modulename": "agent_c_tools.tools.web.formatters.centric_blog", "qualname": "CentricBlogFormatter.format", "kind": "function", "doc": "<p>Override format method to add blog post specific information.</p>\n\n<p>Args:\n    content (str): Original HTML content.\n    url (str): URL of the blog post.</p>\n\n<p>Returns:\n    str: Enhanced blog post content in Markdown format, along with meta data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web.formatters.readable", "modulename": "agent_c_tools.tools.web.formatters.readable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.formatters.readable.ReadableFormatter", "modulename": "agent_c_tools.tools.web.formatters.readable", "qualname": "ReadableFormatter", "kind": "class", "doc": "<p>A Formatter that uses the readability algorithm to extract the main content.\nInherits from ContentFormatter.</p>\n", "bases": "agent_c_tools.tools.web.formatters.base.ContentFormatter"}, {"fullname": "agent_c_tools.tools.web.formatters.readable.ReadableFormatter.format", "modulename": "agent_c_tools.tools.web.formatters.readable", "qualname": "ReadableFormatter.format", "kind": "function", "doc": "<p>Override format method to use readability to extract main content.</p>\n\n<p>Args:\n    content (str): Original HTML content.\n    url (str): URL of the content.</p>\n\n<p>Returns:\n    str: Main content formatted in Markdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web.tool", "modulename": "agent_c_tools.tools.web.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools", "kind": "class", "doc": "<p>WebTools class to fetch and format web page content.</p>\n\n<p>Attributes:\n    default_formatter (ContentFormatter): Default formatter to use when no specific formatter is found.\n    formatters (List[ContentFormatter]): List of custom formatters for specific URL patterns.\n    cache (Cache): Cache object for storing responses.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.__init__", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.default_formatter", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.default_formatter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_tools.tools.web.formatters.base.ContentFormatter"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.formatters", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.formatters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.web.formatters.base.ContentFormatter]"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.driver", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.format_content", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.format_content", "kind": "function", "doc": "<p>Find a suitable formatter for the given URL and format the content.</p>\n\n<p>Args:\n    content (str): Content to be formatted.\n    url (str): URL of the content.</p>\n\n<p>Returns:\n    str: Formatted content in Markdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.open_webpage", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.open_webpage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web.tool.WebTools.fetch_webpage", "modulename": "agent_c_tools.tools.web.tool", "qualname": "WebTools.fetch_webpage", "kind": "function", "doc": "<p>Fetch a webpage's content and convert it to Markdown format using the specified formatter.</p>\n\n<p>Args:\n    **kwargs: Keyword arguments containing the 'url' and possibly other configuration details.</p>\n\n<p>Returns:\n    str: Page content in Markdown format or an error message if an exception occurs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web.util", "modulename": "agent_c_tools.tools.web.util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.util.expires_header", "modulename": "agent_c_tools.tools.web.util.expires_header", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web.util.expires_header.expires_header_to_cache_seconds", "modulename": "agent_c_tools.tools.web.util.expires_header", "qualname": "expires_header_to_cache_seconds", "kind": "function", "doc": "<p>Convert an HTTP 'Expires' header value to the number of seconds until expiration.</p>\n\n<p>Args:\n    expires_header (Optional[str]): The value of the 'Expires' header.</p>\n\n<p>Returns:\n    Optional[int]: Number of seconds until expiration, or None if the header is missing or invalid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expires_header</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web_search", "modulename": "agent_c_tools.tools.web_search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.duck_duck_go", "modulename": "agent_c_tools.tools.web_search.duck_duck_go", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.duck_duck_go.tool", "modulename": "agent_c_tools.tools.web_search.duck_duck_go.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.duck_duck_go.tool.DuckDuckGoTools", "modulename": "agent_c_tools.tools.web_search.duck_duck_go.tool", "qualname": "DuckDuckGoTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.duck_duck_go.tool.DuckDuckGoTools.__init__", "modulename": "agent_c_tools.tools.web_search.duck_duck_go.tool", "qualname": "DuckDuckGoTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.duck_duck_go.tool.DuckDuckGoTools.web_search", "modulename": "agent_c_tools.tools.web_search.duck_duck_go.tool", "qualname": "DuckDuckGoTools.web_search", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp", "modulename": "agent_c_tools.tools.web_search.google_serp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools", "kind": "class", "doc": "<p>GoogleSearchResults tool lets you use GoogleAPIs using SERPAPI.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.__init__", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.__init__", "kind": "function", "doc": "<p>Initializes GoogleSearchResultsTool by setting up a GOOGLE SERPAPI instance with the\nenvironment credentials.\nSERPAPI_API_KEY environment variable is required and needs to be mentioned in\n.env file, in order to this to work.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.api_key", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.logger", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.search_google_", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.search_google_", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.get_flights", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.get_flights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.filter_flight_", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.filter_flight_", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">results</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.get_events", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.get_events", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.get_news", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.get_news", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_serp.tool.GoogleSerpTools.get_search_results", "modulename": "agent_c_tools.tools.web_search.google_serp.tool", "qualname": "GoogleSerpTools.get_search_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_trends", "modulename": "agent_c_tools.tools.web_search.google_trends", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool.GoogleTrendsTools", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "qualname": "GoogleTrendsTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool.GoogleTrendsTools.__init__", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "qualname": "GoogleTrendsTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool.GoogleTrendsTools.logger", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "qualname": "GoogleTrendsTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool.GoogleTrendsTools.get_google_trending_searches", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "qualname": "GoogleTrendsTools.get_google_trending_searches", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.google_trends.tool.GoogleTrendsTools.get_google_trends_for_query", "modulename": "agent_c_tools.tools.web_search.google_trends.tool", "qualname": "GoogleTrendsTools.get_google_trends_for_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news", "modulename": "agent_c_tools.tools.web_search.hacker_news", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.__init__", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.base_url", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.get_top_stories", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.get_top_stories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.get_job_stories", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.get_job_stories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.fetch_stories_ids", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.fetch_stories_ids", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">limit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web_search.hacker_news.tool.HackerNewsTools.fetch_stories", "modulename": "agent_c_tools.tools.web_search.hacker_news.tool", "qualname": "HackerNewsTools.fetch_stories", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stories_ids</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.web_search.news_api", "modulename": "agent_c_tools.tools.web_search.news_api", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.__init__", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.newsapi", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.newsapi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.logger", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.get_top_headlines", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.get_top_headlines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.get_sources", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.news_api.tool.NewsApiTools.get_all_articles", "modulename": "agent_c_tools.tools.web_search.news_api.tool", "qualname": "NewsApiTools.get_all_articles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha", "modulename": "agent_c_tools.tools.web_search.seeking_alpha", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha.tool", "modulename": "agent_c_tools.tools.web_search.seeking_alpha.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha.tool.SeekingAlphaTools", "modulename": "agent_c_tools.tools.web_search.seeking_alpha.tool", "qualname": "SeekingAlphaTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha.tool.SeekingAlphaTools.__init__", "modulename": "agent_c_tools.tools.web_search.seeking_alpha.tool", "qualname": "SeekingAlphaTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha.tool.SeekingAlphaTools.logger", "modulename": "agent_c_tools.tools.web_search.seeking_alpha.tool", "qualname": "SeekingAlphaTools.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "agent_c_tools.tools.web_search.seeking_alpha.tool.SeekingAlphaTools.get_topk_trending_news", "modulename": "agent_c_tools.tools.web_search.seeking_alpha.tool", "qualname": "SeekingAlphaTools.get_topk_trending_news", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research", "modulename": "agent_c_tools.tools.web_search.tavily_research", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt.TavilyResearchPrompt", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "qualname": "TavilyResearchPrompt", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt.TavilyResearchPrompt.__init__", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "qualname": "TavilyResearchPrompt.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt.TavilyResearchPrompt.model_config", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "qualname": "TavilyResearchPrompt.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt.TavilyResearchPrompt.model_fields", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "qualname": "TavilyResearchPrompt.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False)}"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.prompt.TavilyResearchPrompt.model_computed_fields", "modulename": "agent_c_tools.tools.web_search.tavily_research.prompt", "qualname": "TavilyResearchPrompt.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools.__init__", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools.section", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools.section", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools.api_key", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools.client", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools.client", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.tavily_research.tool.TavilyResearchTools.search_tavily", "modulename": "agent_c_tools.tools.web_search.tavily_research.tool", "qualname": "TavilyResearchTools.search_tavily", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.web_search.wikipedia", "modulename": "agent_c_tools.tools.web_search.wikipedia", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.wikipedia.tool", "modulename": "agent_c_tools.tools.web_search.wikipedia.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.web_search.wikipedia.tool.WikipediaTools", "modulename": "agent_c_tools.tools.web_search.wikipedia.tool", "qualname": "WikipediaTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.web_search.wikipedia.tool.WikipediaTools.__init__", "modulename": "agent_c_tools.tools.web_search.wikipedia.tool", "qualname": "WikipediaTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.web_search.wikipedia.tool.WikipediaTools.search_wiki", "modulename": "agent_c_tools.tools.web_search.wikipedia.tool", "qualname": "WikipediaTools.search_wiki", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces", "modulename": "agent_c_tools.tools.workspaces", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.base", "modulename": "agent_c_tools.tools.workspaces.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace", "kind": "class", "doc": "<p>This is a base class for workspace representations.</p>\n\n<p>Attributes:\n    name (str): The name of the workspace, as provided by kwargs.\n    description (str): The description of the workspace, if provided.\n    type_name (str): The type name of the workspace.\n    read_only (bool): A flag indicating whether the workspace is read-only.\n    write_status (str): A textual representation of the read/write status.\n    max_filename_length (int): The maximum length of filenames in the workspace.\n                              A value of -1 indicates no specific limit.</p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.__init__", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.__init__", "kind": "function", "doc": "<p>The initializer for the BaseWorkspace class.</p>\n\n<p>Args:\n    type_name (str): The type name of the workspace.\n    **kwargs: Keyword arguments for the workspace properties.\n              - 'name' (str): The name of the workspace.\n              - 'description' (str): The description of the workspace.\n              - 'read_only' (bool): If the workspace should be read-only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.name", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.description", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.type_name", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.type_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.read_only", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.read_only", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.write_status", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.write_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.max_filename_length", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.max_filename_length", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.path_exists", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.path_exists", "kind": "function", "doc": "<p>Abstract method to check if a path exists within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path to check for existence.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.read_bytes_internal", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.read_bytes_internal", "kind": "function", "doc": "<p>Abstract method to read bytes directly from a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path from which to read bytes.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.read_bytes_base64", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.read_bytes_base64", "kind": "function", "doc": "<p>Abstract method to read bytes and encode them base64 from a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path from which to read bytes.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.write_bytes", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.write_bytes", "kind": "function", "doc": "<p>Abstract method to write bytes to a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path where to write bytes.\n    mode (str): The mode in which to write the data, can be \"write\" or \"append\".\n    data (bytes): The data to write into the file.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.full_path", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.full_path", "kind": "function", "doc": "<p>Method to generate the full path for a given path in the workspace.</p>\n\n<p>Args:\n    path (str): The directory or file path.\n    mkdirs (bool): Whether to create directories along the path if they do not exist.</p>\n\n<p>Returns:\n    Optional[str]: The full path or None if the path is not within the workspace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mkdirs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.ls", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.ls", "kind": "function", "doc": "<p>Abstract method to list all files in a directory within the workspace.</p>\n\n<p>Args:\n    path (str): The directory path to list files from.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.read", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.read", "kind": "function", "doc": "<p>Abstract method to read text from a path within the workspace.</p>\n\n<p>Args:\n    path (str): The path from which to read text.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.base.BaseWorkspace.write", "modulename": "agent_c_tools.tools.workspaces.base", "qualname": "BaseWorkspace.write", "kind": "function", "doc": "<p>Abstract method to write text to a path within the workspace.</p>\n\n<p>Args:\n    path (str): The path where to write text.\n    mode (str): The mode in which to open the file.\n    data (str): The data to write into the file.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage", "modulename": "agent_c_tools.tools.workspaces.local_storage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.logger", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger agent_c_tools.tools.workspaces.local_storage (WARNING)&gt;"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace", "kind": "class", "doc": "<p>This is a base class for workspace representations.</p>\n\n<p>Attributes:\n    name (str): The name of the workspace, as provided by kwargs.\n    description (str): The description of the workspace, if provided.\n    type_name (str): The type name of the workspace.\n    read_only (bool): A flag indicating whether the workspace is read-only.\n    write_status (str): A textual representation of the read/write status.\n    max_filename_length (int): The maximum length of filenames in the workspace.\n                              A value of -1 indicates no specific limit.</p>\n", "bases": "agent_c_tools.tools.workspaces.base.BaseWorkspace"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.__init__", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.__init__", "kind": "function", "doc": "<p>The initializer for the BaseWorkspace class.</p>\n\n<p>Args:\n    type_name (str): The type name of the workspace.\n    **kwargs: Keyword arguments for the workspace properties.\n              - 'name' (str): The name of the workspace.\n              - 'description' (str): The description of the workspace.\n              - 'read_only' (bool): If the workspace should be read-only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.max_size", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.max_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.valid", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.valid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.max_filename_length", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.max_filename_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.ls", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.ls", "kind": "function", "doc": "<p>Abstract method to list all files in a directory within the workspace.</p>\n\n<p>Args:\n    path (str): The directory path to list files from.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relative_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.read", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.read", "kind": "function", "doc": "<p>Abstract method to read text from a path within the workspace.</p>\n\n<p>Args:\n    path (str): The path from which to read text.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.read_bytes_internal", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.read_bytes_internal", "kind": "function", "doc": "<p>Abstract method to read bytes directly from a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path from which to read bytes.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.read_bytes_base64", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.read_bytes_base64", "kind": "function", "doc": "<p>Abstract method to read bytes and encode them base64 from a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path from which to read bytes.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.full_path", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.full_path", "kind": "function", "doc": "<p>Method to generate the full path for a given path in the workspace.</p>\n\n<p>Args:\n    path (str): The directory or file path.\n    mkdirs (bool): Whether to create directories along the path if they do not exist.</p>\n\n<p>Returns:\n    Optional[str]: The full path or None if the path is not within the workspace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mkdirs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.path_exists", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.path_exists", "kind": "function", "doc": "<p>Abstract method to check if a path exists within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path to check for existence.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.write", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.write", "kind": "function", "doc": "<p>Abstract method to write text to a path within the workspace.</p>\n\n<p>Args:\n    path (str): The path where to write text.\n    mode (str): The mode in which to open the file.\n    data (str): The data to write into the file.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.local_storage.LocalStorageWorkspace.write_bytes", "modulename": "agent_c_tools.tools.workspaces.local_storage", "qualname": "LocalStorageWorkspace.write_bytes", "kind": "function", "doc": "<p>Abstract method to write bytes to a path within the workspace.</p>\n\n<p>Args:\n    file_path (str): The path where to write bytes.\n    mode (str): The mode in which to write the data, can be \"write\" or \"append\".\n    data (bytes): The data to write into the file.</p>\n\n<p>Raises:\n    NotImplementedError: This method should be implemented by subclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.prompt", "modulename": "agent_c_tools.tools.workspaces.prompt", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection", "kind": "class", "doc": "<p>A class representing a section of a prompt with dynamic properties.</p>\n\n<p>Attributes:\n    name (str): The name of the section.\n    template (str): The template string for the section.\n    render_section_header (bool): Flag to determine if a header should be rendered for the section.\n    required (bool): Flag to determine if the section is required.</p>\n", "bases": "agent_c.prompting.prompt_section.OldPromptSection"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.__init__", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.workspaces", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.workspaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.workspace_list", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.workspace_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.model_config", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.model_fields", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;template&#x27;: FieldInfo(annotation=str, required=True), &#x27;render_section_header&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;required&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;workspaces&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_tools.tools.workspaces.prompt.WorkspaceSection.model_computed_fields", "modulename": "agent_c_tools.tools.workspaces.prompt", "qualname": "WorkspaceSection.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_tools.tools.workspaces.tool", "modulename": "agent_c_tools.tools.workspaces.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_tools.tools.workspaces.tool.logger", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger agent_c_tools.tools.workspaces.tool (WARNING)&gt;"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools", "kind": "class", "doc": "<p>WorkspaceTools allows the model to read / write data to one or more workspaces.\nThis allows us to absract things like S3, Azure Storage and the like.</p>\n\n<p>This really just a rough outline at this point.</p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.__init__", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.workspaces", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.workspaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[agent_c_tools.tools.workspaces.base.BaseWorkspace]"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.add_workspace", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.add_workspace", "kind": "function", "doc": "<p>Add a workspace to the list of workspaces.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">workspace</span><span class=\"p\">:</span> <span class=\"n\">agent_c_tools</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">workspaces</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseWorkspace</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.find_workspace_by_name", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.find_workspace_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.ls", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.ls", "kind": "function", "doc": "<p>Asynchronously lists the contents of a workspaces or a subdirectory in it.</p>\n\n<p>Args:\n    workspace (str): The workspaces to use\n    path (str): Relative path within the workspaces to list contents for.</p>\n\n<p>Returns:\n    str: JSON string with the listing or an error message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.read", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.read", "kind": "function", "doc": "<p>Asynchronously reads the content of a text file within the workspaces.</p>\n\n<p>Args:\n    file_path (str): Relative path to the text file within the workspaces.</p>\n\n<p>Returns:\n    str: JSON string with the file content or an error message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_tools.tools.workspaces.tool.WorkspaceTools.write", "modulename": "agent_c_tools.tools.workspaces.tool", "qualname": "WorkspaceTools.write", "kind": "function", "doc": "<p>Asynchronously writes or appends data to a file within the workspaces.</p>\n\n<p>Args:\n    file_path (str): Relative path to the file within the workspaces.\n    data (str): The text data to write or append to the file.\n    mode (str): The writing mode, either 'write' to overwrite or 'append'.</p>\n\n<p>Returns:\n    str: JSON string with a success message or an error message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_vision", "modulename": "agent_c_vision", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2", "modulename": "agent_c_vision.cv2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed", "modulename": "agent_c_vision.cv2.cv2_feed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.__init__", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.device_no", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.device_no", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.video_capture", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.video_capture", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cv2.VideoCapture]"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.capture_width", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.capture_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.capture_height", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.capture_height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.show_captured_frames", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.show_captured_frames", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.frame_queue", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.frame_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.exit_event", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.exit_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.debug_camera_event", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.debug_camera_event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.thread", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.add_frame", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.add_frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.last_frame", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.last_frame", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_vision.cv2.cv2_frame.CV2Frame]"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.clear_queue", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.clear_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.get_frame", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.get_frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.release", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.release", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.shutdown", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.shutdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.start", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.stop", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.is_active", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.is_active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.is_running", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.is_running", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.show_debug_camera", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.show_debug_camera", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_feed.CV2Feed.hide_debug_camera", "modulename": "agent_c_vision.cv2.cv2_feed", "qualname": "CV2Feed.hide_debug_camera", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_frame", "modulename": "agent_c_vision.cv2.cv2_frame", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.__init__", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">need_copy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.resize_frame", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.resize_frame", "kind": "function", "doc": "<p>Resizes the frame to fit within the specified max_length and max_height,\nmaintaining the aspect ratio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_length</strong>:  The maximum length of the resized image.\nparam max_height: The maximum height of the resized image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The resized cv2 image.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_long</span>, </span><span class=\"param\"><span class=\"n\">max_short</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.copy", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.to_image_bytes", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.to_image_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.webp&#39;</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;bool&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.to_image_base64", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.to_image_base64", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.webp&#39;</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;bool&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_vision.cv2.cv2_frame.CV2Frame.to_image_input", "modulename": "agent_c_vision.cv2.cv2_frame", "qualname": "CV2Frame.to_image_input", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">max_long</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">max_short</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">768</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">agent_c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">image_input</span><span class=\"o\">.</span><span class=\"n\">ImageInput</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice", "modulename": "agent_c_voice", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text", "modulename": "agent_c_voice.speech_to_text", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor", "modulename": "agent_c_voice.speech_to_text.audio_processor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor", "kind": "class", "doc": "<p>A class that processes audio data. This class reads and writes raw audio data from and to a byte array.</p>\n"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.__init__", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.__init__", "kind": "function", "doc": "<p>Initialize a new AudioProcessor.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">app_exit_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">shutdown_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">input_complete_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">listen_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span></span>)</span>"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.wave_data", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.wave_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bytearray"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.read_offset", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.read_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.app_exit_event", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.app_exit_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.shutdown_event", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.shutdown_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.input_complete_event", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.input_complete_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.listen_event", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.listen_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.logger", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.reset", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.reset", "kind": "function", "doc": "<p>Reset the read offset to 0.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.read", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.read", "kind": "function", "doc": "<p>Read a chunk of audio data from the waveform data.</p>\n\n<p>Args:\n    chunk_size (int): The size of the chunk to read in bytes.</p>\n\n<p>Returns:\n    bytearray: The read chunk of audio data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bytearray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_voice.speech_to_text.audio_processor.AudioProcessor.write_audio", "modulename": "agent_c_voice.speech_to_text.audio_processor", "qualname": "AudioProcessor.write_audio", "kind": "function", "doc": "<p>Write audio data to the waveform data.</p>\n\n<p>Args:\n    data (Union[bytes, bytearray]): The raw audio data to write.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytearray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.models", "modulename": "agent_c_voice.speech_to_text.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.models.PartialTranscriptLine", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "PartialTranscriptLine", "kind": "class", "doc": "<p>Partial transcript lines only have a content field.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "agent_c_voice.speech_to_text.models.PartialTranscriptLine.content", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "PartialTranscriptLine.content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.speech_to_text.models.PartialTranscriptLine.model_config", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "PartialTranscriptLine.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "agent_c_voice.speech_to_text.models.PartialTranscriptLine.model_fields", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "PartialTranscriptLine.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;content&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "agent_c_voice.speech_to_text.models.PartialTranscriptLine.model_computed_fields", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "PartialTranscriptLine.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine", "kind": "class", "doc": "<p>Full transcript lines have a speaker field in addition to the content field.</p>\n", "bases": "PartialTranscriptLine"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.speaker", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.speaker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.cv2_frame", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.cv2_frame", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_vision.cv2.cv2_frame.CV2Frame]"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.start_time", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.end_time", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.end_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.Config", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.Config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.Config.arbitrary_types_allowed", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.Config.arbitrary_types_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.Config.protected_namespaces", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.Config.protected_namespaces", "kind": "variable", "doc": "<p></p>\n", "default_value": "()"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.model_config", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;arbitrary_types_allowed&#x27;: True, &#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.model_fields", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;content&#x27;: FieldInfo(annotation=str, required=True), &#x27;speaker&#x27;: FieldInfo(annotation=str, required=True), &#x27;cv2_frame&#x27;: FieldInfo(annotation=Union[CV2Frame, NoneType], required=False, default=None), &#x27;start_time&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=0), &#x27;end_time&#x27;: FieldInfo(annotation=Union[float, NoneType], required=False, default=0)}"}, {"fullname": "agent_c_voice.speech_to_text.models.RTTranscriptLine.model_computed_fields", "modulename": "agent_c_voice.speech_to_text.models", "qualname": "RTTranscriptLine.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.END_SENTENCE_PUNCTUATION", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "END_SENTENCE_PUNCTUATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.!?&#x27;"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.__init__", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.__init__", "kind": "function", "doc": "<p>Initializes the SpeechmaticsTranscriber class with keyword arguments.</p>\n\n<p>Keyword Args:\n    sm_api_key (str): The Speechmatics API key.\n    enhance_accuracy (bool): Flag indicating whether to use enhanced accuracy transcription.\n    language (str): The transcription language.\n    device_index (int): Audio device index.\n    audio_chunk_size (int): Chunk size for audio buffering.\n    output_queue (Queue): Where to push transcripts to.\n    partials (bool): Flag indicating whether to allow partial transcripts.\n    sm_url (str): Speechmatics connection url.\n    max_delay (int): The delay in seconds between receiving input audio and returning 'Final' transcription results.\n    dictionary (str): Path to a custom dictionary.\n    diarization (str): Speaker diarization mode.\n    active_event (threading.Event): Event to indicate when the transcriber should be active.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.logger", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.audio_cues", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.audio_cues", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_reference_apps.util.audio_cues.AudioCues]"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.thread", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[threading.Thread]"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.input_complete_event", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.input_complete_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.listen_event", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.listen_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.shutdown_event", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.shutdown_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.app_exit_event", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.app_exit_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.output_queue", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.output_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.max_empty_finals", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.max_empty_finals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.empty_finals", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.empty_finals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.audio_processor", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.audio_processor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_voice.speech_to_text.audio_processor.AudioProcessor"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.ccv2_feed", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.ccv2_feed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[agent_c_vision.cv2.cv2_feed.CV2Feed]"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.stream_callback", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.stream_callback", "kind": "function", "doc": "<p>Stream callback function that writes audio data.</p>\n\n<p>Args:\n    in_data: The input audio data.\n    frame_count: The number of frames in the data.\n    time_info: Time information.\n    status: Status information.\nReturns:\n    tuple: The audio data and the callback status.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_data</span>, </span><span class=\"param\"><span class=\"n\">frame_count</span>, </span><span class=\"param\"><span class=\"n\">time_info</span>, </span><span class=\"param\"><span class=\"n\">status</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.listen", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.listen", "kind": "function", "doc": "<p>Starts listening for audio input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.listen_stop", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.listen_stop", "kind": "function", "doc": "<p>Stops listening for audio input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.input_complete", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.input_complete", "kind": "function", "doc": "<p>Indicates that the input is complete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.is_listening", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.is_listening", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.is_running", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.is_running", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.start", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.stop", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.speech_to_text.speechmatics_transcriber.SpeechmaticsTranscriber.shutdown", "modulename": "agent_c_voice.speech_to_text.speechmatics_transcriber", "qualname": "SpeechmaticsTranscriber.shutdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech", "modulename": "agent_c_voice.text_to_speech", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player", "modulename": "agent_c_voice.text_to_speech.mpv_player", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.__init__", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exit_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">cancel_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">input_queue</span><span class=\"p\">:</span> <span class=\"n\">output_queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">output_queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.input_queue", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.input_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.exit_event", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.exit_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.cancel_event", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.cancel_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.thread", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.mpv_process", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.mpv_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.join", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.clear_input_queue", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.clear_input_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.cancel", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.cancel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.exit", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.exit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.start", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.mpv_player.MPVPlayer.stop", "modulename": "agent_c_voice.text_to_speech.mpv_player", "qualname": "MPVPlayer.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.__init__", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.voice_dirty", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.voice_dirty", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.input_queue", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.input_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.output_queue", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.output_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": output_queue.Queue"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.exit_event", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.exit_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.shutdown_event", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.shutdown_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.cancel_event", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.cancel_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.input_complete", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.input_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.transformer", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.transformer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.optimize_streaming_latency", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.optimize_streaming_latency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.output_format", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.output_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.api_key", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.api_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.thread", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[threading.Thread]"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.voice", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.voice", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;Union[Voice, None]&#x27;"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.model_id", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.model_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.default_voice_settings", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.default_voice_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.tts_active", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.tts_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.max_idle_seconds", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.max_idle_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.start", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">voice</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.stop", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.join", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.set_voice", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.set_voice", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">voice</span>, </span><span class=\"param\"><span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.cancel", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.cancel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.exit", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.exit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.should_stop_streaming", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.should_stop_streaming", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.should_end_thread", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.should_end_thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.BOS", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.BOS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.text_to_speech.tts_eleven_labs.TTSElevenLabs.ws_url", "modulename": "agent_c_voice.text_to_speech.tts_eleven_labs", "qualname": "TTSElevenLabs.ws_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "qualname": "TTSTextTransformer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer.__init__", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "qualname": "TTSTextTransformer.__init__", "kind": "function", "doc": "<p>Initialize the TTS text transformer with optional replacements and removals.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replacements</strong>:  A dictionary where the key is the pattern to be replaced and\nthe value is the string to replace with. For example,\n{'old': 'new'} will replace 'old' with 'new'.</li>\n<li><strong>removals</strong>:  A list of strings that need to be removed from the text.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">replacements</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">removals</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer.replacements", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "qualname": "TTSTextTransformer.replacements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer.removals", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "qualname": "TTSTextTransformer.removals", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "agent_c_voice.text_to_speech.tts_text_transformer.TTSTextTransformer.transform", "modulename": "agent_c_voice.text_to_speech.tts_text_transformer", "qualname": "TTSTextTransformer.transform", "kind": "function", "doc": "<p>Transforms the input text by applying decoding, replacements, and removals based\non initialized configurations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The input text to be transformed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Transformed text.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "agent_c_voice.tools", "modulename": "agent_c_voice.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs", "modulename": "agent_c_voice.tools.voice_eleven_labs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice.DefaultVoicePreference", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "qualname": "DefaultVoicePreference", "kind": "class", "doc": "<p>Preference setting for the user's default voice for the assistant.</p>\n", "bases": "agent_c_tools.tools.user_preferences.preferences.base.UserPreference"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice.DefaultVoicePreference.__init__", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "qualname": "DefaultVoicePreference.__init__", "kind": "function", "doc": "<p>Create a new model by parsing and validating input data from keyword arguments.</p>\n\n<p>Raises [<code>ValidationError</code>][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.</p>\n\n<p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice.DefaultVoicePreference.model_config", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "qualname": "DefaultVoicePreference.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;protected_namespaces&#x27;: ()}"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice.DefaultVoicePreference.model_fields", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "qualname": "DefaultVoicePreference.model_fields", "kind": "variable", "doc": "<p>Metadata about the fields defined on the model,\nmapping of field names to [<code>FieldInfo</code>][pydantic.fields.FieldInfo] objects.</p>\n\n<p>This replaces <code>Model.__fields__</code> from Pydantic V1.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.FieldInfo]]", "default_value": "{&#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;default_value&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;user_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;), &#x27;visible_to_model&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;model_instructions&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;&#x27;)}"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice.DefaultVoicePreference.model_computed_fields", "modulename": "agent_c_voice.tools.voice_eleven_labs.preferences.default_voice", "qualname": "DefaultVoicePreference.model_computed_fields", "kind": "variable", "doc": "<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>\n", "annotation": ": ClassVar[Dict[str, pydantic.fields.ComputedFieldInfo]]", "default_value": "{}"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.__init__", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.tts_client", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.tts_client", "kind": "variable", "doc": "<p></p>\n", "annotation": ": elevenlabs.client.AsyncElevenLabs"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.voices", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.voices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.voice", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.voice", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[elevenlabs.types.voice.Voice]"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.voice_settings", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.voice_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.post_init", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.post_init", "kind": "function", "doc": "<p>Optional post-initialization method that can be used for additional setup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.set_active_voice", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.set_active_voice", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "agent_c_voice.tools.voice_eleven_labs.tool.VoiceTools.list_voices", "modulename": "agent_c_voice.tools.voice_eleven_labs.tool", "qualname": "VoiceTools.list_voices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "my_agent_c", "modulename": "my_agent_c", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "my_agent_c.my_agent_c_app", "modulename": "my_agent_c.my_agent_c_app", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "my_agent_c.my_agent_c_app.main", "modulename": "my_agent_c.my_agent_c_app", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "my_agent_c.tools", "modulename": "my_agent_c.tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "my_agent_c.tools.my_tool", "modulename": "my_agent_c.tools.my_tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "my_agent_c.tools.my_tool.tool", "modulename": "my_agent_c.tools.my_tool.tool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "my_agent_c.tools.my_tool.tool.MyTool", "modulename": "my_agent_c.tools.my_tool.tool", "qualname": "MyTool", "kind": "class", "doc": "<p></p>\n", "bases": "agent_c.toolsets.tool_set.Toolset"}, {"fullname": "my_agent_c.tools.my_tool.tool.MyTool.__init__", "modulename": "my_agent_c.tools.my_tool.tool", "qualname": "MyTool.__init__", "kind": "function", "doc": "<p>Initializes the Toolset with the provided options.</p>\n\n<p>Args:\n    kwargs:\n        name (str): The name of the toolset.\n        session_manager (ChatSessionManager): Manages chat sessions.\n        tool_chest (ToolChest): Holds the active/tools available to the toolset.\n        required_tools (List[str]): A list of tools that are required to be activated.\n        tool_cache (ToolCache): Cache for tools.\n        section (OldPromptSection | None): Section-related information.\n        agent_can_use_tools (bool): If the agent can use toolsets (defaults to True if unset).\n        need_tool_user (bool): Defines if this toolset requires a tool-using agent (defaults to True).\n        needed_keys (List[str]): List of environment keys required for the toolset functionality.\n        streaming_callback (Callable[..., None]): A callback to be triggered after streaming events.\n        output_format (str): Format for output. Defaults to 'raw'.\n        tool_role (str): Defines the role of the tool (defaults to 'tool').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "my_agent_c.tools.my_tool.tool.MyTool.get_word_of_day", "modulename": "my_agent_c.tools.my_tool.tool", "qualname": "MyTool.get_word_of_day", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();