name: Build and Publish Python Packages

on:
  #pull_request:
  #  branches: [ main ]
  #  types: [ closed ]  
  workflow_dispatch:

jobs:
  build_agent_c_core:
    name: Build and Publish agent_c_core
    runs-on: ubuntu-latest
    #if: ${{ github.event.pull_request.merged == true }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        #with:
        #  fetch-depth: 2  # Fetch at least the last 2 commits to ensure HEAD^ exists

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip
          pip install -r ci/requirements.txt

      - name: Check if agent_c_core changed
        id: check
        run: |
          # Compare current commit with previous commit for changes in agent_c_core
          if git diff --quiet HEAD^ HEAD -- src/agent_c_core; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          echo "Change check result: $(cat $GITHUB_OUTPUT)"

      - name: Bump version for agent_c_core
        if: steps.check.outputs.changed == 'true'
        run: python ci/bump_version.py src/agent_c_core/pyproject.toml ${{ github.run_number }}

      - name: Build agent_c_core package
        if: steps.check.outputs.changed == 'true'
        run: |
          cd src/agent_c_core
          python -m build

      - name: Get latest tag and bump
        id: tagger
        run: |
          git fetch --tags
          latest=$(git tag | grep '^v' | sort -V | tail -n 1)
          if [ -z "$latest" ]; then
            latest="v0.0.0"
          fi
          version=${latest#v}
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
  
      - name: Create Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.tagger.outputs.new_tag }}
          git push origin ${{ steps.tagger.outputs.new_tag }}     

      - name: Upload to GitHub release
        if: steps.check.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*'
          tag_name: ${{ steps.tagger.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_agent_c_tools:
    name: Build and Publish agent_c_tools
    runs-on: ubuntu-latest
    needs: build_agent_c_core
    if: ${{ github.event.pull_request.merged == true }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip
          pip install -r ci/requirements.txt

      - name: Check if agent_c_tools changed
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- src/agent_c_tools; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          echo "Change check result: $(cat $GITHUB_OUTPUT)"

      - name: Bump version for agent_c_tools
        if: steps.check.outputs.changed == 'true'
        run: python ci/bump_version.py src/agent_c_tools/pyproject.toml ${{ github.run_number }}

      - name: Build agent_c_tools package
        if: steps.check.outputs.changed == 'true'
        run: |
          cd src/agent_c_tools
          python -m build

      - name: Upload to GitHub release
        if: steps.check.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_agent_c_reference_apps:
    name: Build and Publish agent_c_reference_apps
    runs-on: ubuntu-latest
    needs: build_agent_c_tools
    if: ${{ github.event.pull_request.merged == true }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip
          pip install -r ci/requirements.txt

      - name: Check if agent_c_reference_apps changed
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- src/agent_c_reference_apps; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          echo "Change check result: $(cat $GITHUB_OUTPUT)"

      - name: Bump version for agent_c_reference_apps
        if: steps.check.outputs.changed == 'true'
        run: python ci/bump_version.py src/agent_c_reference_apps/pyproject.toml ${{ github.run_number }}

      - name: Setup GitHub Packages environment
        if: steps.check.outputs.changed == 'true'
        run: |
          echo "[distutils]" >> ~/.pypirc
          echo "index-servers = github" >> ~/.pypirc
          echo "[github]" >> ~/.pypirc
          echo "repository = https://github.com/centricconsulting/agent_c_framework" >> ~/.pypirc
          echo "username = ${{ github.actor }}" >> ~/.pypirc
          echo "password = ${{ secrets.GITHUB_TOKEN }}" >> ~/.pypirc

      - name: Build agent_c_reference_apps package
        if: steps.check.outputs.changed == 'true'
        run: |
          cd src/agent_c_reference_apps
          python -m build

      - name: Publish agent_c_reference_apps package to GitHub Packages
        if: steps.check.outputs.changed == 'true'
        run: |
          cd src/agent_c_reference_apps
          python -m twine upload --repository github dist/*
        env:
          TWINE_USERNAME: ${{ github.actor }}
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}