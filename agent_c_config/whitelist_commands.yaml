git:
  subcommands:
    status:  { flags: ["--porcelain", "-s", "-b", "--no-color"], timeout: 20 }
    log:     { flags: ["--oneline","--graph","--decorate","-n","-p", "--no-color"] }
    show:    { flags: ["--name-only","--stat","-p", "--no-color"] }
    diff:    { flags: ["--name-only","--stat","--cached","-p", "--no-color"] }
    add: { "flags": [ ] }
    restore: { "flags": [ "--staged" ] }
    reset: { "flags": [ "--hard", "--soft", "--mixed" ] }
    checkout: { "flags": [ "-b", "--" ] }
    switch: { "flags": [ "-c", "-" ] }  # not git -c; this is switch -c (create)
    branch: { "flags": [ "-a", "-vv", "-d", "-D" ] }
    stash: { "flags": [ "list", "push", "pop", "apply", "drop", "clear" ] }
    commit: { "flags": [ "-m", "--amend", "--no-verify" ] }
    rev-parse: { "flags": [ "--abbrev-ref", "--short", "HEAD", "--verify" ] }
    ls-files: { "flags": [ "--exclude-standard", "--others", "--cached" ] }
  deny_global_flags: ["-c","--exec-path","--help","-P"]
  safe_env:
    GIT_TERMINAL_PROMPT: "0"
    GIT_CONFIG_NOSYSTEM: "1"
    GIT_CONFIG_GLOBAL: "/dev/null"
    GIT_ALLOW_PROTOCOL: "https,file"
  env_overrides:
    # Token Optimizations
    GIT_PAGER: "cat"          # disable pager (no escape codes from 'less -R')
    CLICOLOR: "0"               # disable colorization
    TERM: "dumb"               # discourages color/TTY tricks
  default_timeout: 30

pytest:
  # PytestCommandValidator uses SAFE_FLAGS; this sets defaults/timeouts or env overrides
  flags: [ "-q","--maxfail","--disable-warnings","--color" ]
  default_timeout: 120
  env_overrides:
    PYTHONDONTWRITEBYTECODE: "1"
    PYTEST_ADDOPTS: "-q --color=no --maxfail=1" # quiet + no ANSI + stop early
    PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"         # avoids third-party plugin noise
    PYTHONWARNINGS: "ignore"                    # ignore depreciation warnings from test runs

# ---- OS basics ----
which:
  validator: os_basic
  flags: ["-a","--version"]
  default_timeout: 5

where:               # Windows equivalent of 'which'
  validator: os_basic
  flags: ["/r"]      # (optional) supports scanning a dir; consider omitting for safety
  default_timeout: 5

whoami:
  validator: os_basic
  flags: []          # (Windows 'whoami' has flags like /USER; add if needed)
  default_timeout: 5

echo:
  validator: os_basic
  flags: ["--help","-n","-e"]   # keep minimal; shell redirection is ignored under shell=False
  default_timeout: 5

# Windows uses find for inside of files, but *nix find is for filesystem searching.  Disabling for now.
#find:
#  validator: os_basic
#  flags: ["-name","-maxdepth","-type","-mtime","-not","-path","-print"]
#  deny_tokens: ["-exec","-ok","-delete","-fdelete","-execdir","-prune"]
#  default_timeout: 10

# On Windows you may prefer 'findstr' (text search) instead of 'find'
#findstr:
#  validator: os_basic
#  flags: ["/I","/N","/R","/S"]  # be careful with recursive /S
#  default_timeout: 10

# ---- Language-specific ----

node:
  validator: node
  flags: ["-v","--version","--help", "-c"]
  deny_global_flags: ["-e","--eval","-p","--print"]
  default_timeout: 5
  env_overrides:
    NODE_DISABLE_COLORS: "1"
    NO_COLOR: "1"
    FORCE_COLOR: "0"
nodejs:
  validator: node
  flags: [ "-v","--version","--help" ]
  deny_global_flags: [ "-e","--eval","-p","--print" ]
  default_timeout: 5
  env_overrides:
    NODE_DISABLE_COLORS: "1"
    NO_COLOR: "1"
    FORCE_COLOR: "0"

npm:
  validator: npm
  root_flags: ["-v","--version","--help"]
  subcommands:
      view:   { allowed_flags: ["--json"] }
      list:   { allowed_flags: ["--depth","--json"] }
      ping:   { allowed_flags: [] }
      outdated: { allowed_flags: [] }
      test:   { allowed_flags: [] }
      ls:    { allowed_flags: ["--depth","--json","--long"] }

      # Only allow "npm config get <key>"
      config:
        get_only: true
        allowed_flags: []       # keep empty; we gate on 'get'

      # --- Scripts (ALLOWLIST) ---
      run:
        allowed_scripts: ["build","test","lint","format","typecheck", 'lint:fix', 'test:run']
        deny_args: false

      # --- Safe, lockfile-based install ---
      ci:
        enabled: true
        require_no_packages: true
        require_flags: ["--ignore-scripts"]
        allowed_flags: ["--ignore-scripts","--no-audit","--no-fund","--prefer-offline","--cache"]

      install:
        enabled: false
        require_no_packages: true
        require_flags: ["--ignore-scripts"]
        allowed_flags: ["--ignore-scripts","--no-audit","--no-fund","--prefer-offline","--cache"]

  # keep ‘i’ denied unless you want it—the validator aliases it to 'install'
  deny_subcommands: ["exec","publish","update","audit","ci-info","token","login","adduser","whoami","pack","link","unlink"]

  default_timeout: 120
  env_overrides:
    NPM_CONFIG_COLOR: "false"       # npm itself: no color
    NPM_CONFIG_PROGRESS: "false"    # no progress bars
    NPM_CONFIG_LOGLEVEL: "warn"     # or "error" to be even quieter
    NO_COLOR: "1"                   # many tools respect this
    FORCE_COLOR: "0"                # chalk/colorette/etc. honor this
    NODE_DISABLE_COLORS: "1"        # belt-and-suspenders for some libs
    CI: "1"                         # many CLIs reduce interactivity/spinners
    NPM_CONFIG_FUND: "false"
    NPM_CONFIG_AUDIT: "false"
    NPM_CONFIG_UPDATE_NOTIFIER: "false"
    NPM_CONFIG_PREFIX: ".npm-prefix"
    NPM_CONFIG_CACHE: ".npm-cache"
    # ensure Windows can resolve .cmd if the parent env omitted it
    PATHEXT: ".COM;.EXE;.BAT;.CMD"

pnpm:
  validator: pnpm
  root_flags: ["-v","--version","--help"]
  subcommands:
      view:   { allowed_flags: ["--json"] }
      list:   { allowed_flags: ["--depth","--json","--long"] }
      ping:   { allowed_flags: [] }
      outdated: { allowed_flags: [] }
      test:   { allowed_flags: [] }
      type_check:   { allowed_flags: [] }
      ls:   { allowed_flags: [] }
      build:   { allowed_flags: [] }
      why:    { allowed_flags: ["--json","--long"] }
      licenses: { allowed_flags: ["--json","--long"] }
      lint:   { allowed_flags: [--fix] }

      # Only allow "pnpm config get <key>"
      config:
        get_only: true
        allowed_flags: []       # keep empty; we gate on 'get'

      # --- Scripts (ALLOWLIST) ---
      run:
        allowed_scripts: ["build","test","lint", "lint:fix", "format","typecheck", "test:run"]
        deny_args: true         # no extra args (incl. after --)

      # --- Safe, lockfile-based install ---
      install:
        enabled: true
        require_no_packages: true
        require_flags: ["--ignore-scripts"]
        allowed_flags: ["--ignore-scripts","--prefer-offline","--frozen-lockfile","--reporter","--dev","--prod"]

  # pnpm doesn't have ci command like npm, but has similar restrictions
  # keep 'i' and 'add' denied unless you want them—the validator aliases them to 'install'
  deny_subcommands: ["exec","publish","update","audit","login","adduser","whoami","pack","link","unlink","patch","patch-commit"]

  default_timeout: 120
  env_overrides:
    PNPM_CONFIG_COLOR: "false"      # pnpm itself: no color
    PNPM_CONFIG_PROGRESS: "false"   # no progress bars
    PNPM_CONFIG_LOGLEVEL: "warn"    # or "error" to be even quieter
    NO_COLOR: "1"                   # many tools respect this
    FORCE_COLOR: "0"                # chalk/colorette/etc. honor this
    NODE_DISABLE_COLORS: "1"        # belt-and-suspenders for some libs
    CI: "1"                         # many CLIs reduce interactivity/spinners
    PNPM_CONFIG_FUND: "false"
    PNPM_CONFIG_UPDATE_NOTIFIER: "false"
    # ensure Windows can resolve .cmd if the parent env omitted it
    PATHEXT: ".COM;.EXE;.BAT;.CMD"

npx:
  allowed_packages:
    - "@angular/cli"
    - "create-react-app"
    - "create-next-app"
    - "@vue/cli"
    - "typescript"
    - "ts-node"
    - "eslint"
    - "prettier"
    - "jest"
    - "mocha"
    - "webpack"
    - "vite"
    - "rollup"
    - "parcel"
    - "serve"
    - "http-server"
  flags:
    - "--yes"
    - "-y"
    - "--package"
    - "-p"
    - "--call"
    - "-c"
    - "--shell"
    - "-s"
    - "--shell-auto-fallback"
    - "--ignore-existing"
    - "--quiet"
    - "-q"
    - "--npm"
    - "--node-options"
  default_timeout: 120
  env_overrides:
    NPM_CONFIG_COLOR: "false"
    NPM_CONFIG_PROGRESS: "false"
    NO_COLOR: "1"
    FORCE_COLOR: "0"
    NODE_DISABLE_COLORS: "1"
    CI: "1"
    NPM_CONFIG_FUND: "false"
    NPM_CONFIG_AUDIT: "false"
    NPM_CONFIG_UPDATE_NOTIFIER: "false"

lerna:
  flags:
    - "--version"
    - "-v"
    - "--help"
    - "-h"
    - "--loglevel"
    - "--concurrency"
    - "--scope"
    - "--ignore"
    - "--include-dependencies"
    - "--include-dependents"
    - "--since"
  subcommands:
    list:
      flags:
        - "--json"
        - "--ndjson"
        - "--parseable"
        - "-p"
        - "--long"
        - "-l"
        - "--all"
        - "-a"
        - "--graph"
        - "--toposort"
      timeout: 30
    info:
      flags:
        - "--json"
      timeout: 15
    bootstrap:
      flags:
        - "--hoist"
        - "--strict"
        - "--nohoist"
        - "--ignore-scripts"
        - "--ignore-prepublish"
        - "--ignore-engines"
        - "--npm-client"
        - "--use-workspaces"
      timeout: 300
    clean:
      flags:
        - "--yes"
        - "-y"
      timeout: 60
    ls:
      flags:
        - "--json"
        - "--ndjson"
        - "--parseable"
        - "-p"
        - "--long"
        - "-l"
        - "--all"
        - "-a"
        - "--graph"
        - "--toposort"
      timeout: 30
    changed:
      flags:
        - "--json"
        - "--ndjson"
        - "--parseable"
        - "-p"
        - "--long"
        - "-l"
        - "--all"
        - "-a"
        - "--graph"
        - "--toposort"
        - "--include-merged-tags"
      timeout: 30
    diff:
      flags:
        - "--ignore-changes"
      timeout: 45
    run:
      flags:
        - "--npm-client"
        - "--stream"
        - "--parallel"
        - "--bail"
        - "--no-bail"
        - "--no-prefix"
        - "--concurrency"
        - "--concurrency=1"
      allowed_scripts: [ "build","test","lint","format","typecheck", 'lint:fix', 'test:run' ]
      deny_args: false
      timeout: 300
    version:
      flags:
        - "--conventional-commits"
        - "--changelog-preset"
        - "--exact"
        - "--force-publish"
        - "--git-remote"
        - "--create-release"
        - "--dry-run"
        - "--json"
        - "--loglevel"
        - "--no-changelog"
        - "--no-commit-hooks"
        - "--no-git-tag-version"
        - "--no-push"
        - "--preid"
        - "--sign-git-commit"
        - "--sign-git-tag"
        - "--tag-version-prefix"
        - "--yes"
        - "-y"
      timeout: 120
  deny_subcommands:
    - "publish"
    - "exec"
    - "import"
    - "create"
    - "add"
    - "link"
  default_timeout: 180
  env_overrides:
    LERNA_DISABLE_PROGRESS: "1"
    NPM_CONFIG_COLOR: "false"
    NPM_CONFIG_PROGRESS: "false"
    NO_COLOR: "1"
    FORCE_COLOR: "0"
    NODE_DISABLE_COLORS: "1"
    CI: "1"

dotnet:
  validator: dotnet
  subcommands:
    --info: { flags: [ ] }
    --list-sdks: { flags: [ ] }
    --list-runtimes: { flags: [ ] }

    restore:
      flags: [ "--locked-mode","--configfile","--source","--verbosity","-v","--nologo" ]
      require_flags:
        --locked-mode: true
        --nologo: true
        --verbosity: [ "quiet","minimal" ]   # enforce locked dependency graph

    build:
      flags: [ "--configuration","-c","--no-restore","--nologo","--verbosity","-v" ]
      # If you want to *require* separate restore/build phases, uncomment:
      # require_flagsl: ["--no-restore"]
      require_flags:
        --nologo: true
        --verbosity: [ "quiet","minimal" ] # enforce quiet, no-logo builds

    test:
      flags: [ "--configuration","-c","--no-build","--nologo","--verbosity","-v","--filter" ]
      require_flags:
        --no-build: true
        --nologo: true
        --verbosity: [ "minimal","quiet" ]
        --logger: "console;verbosity=minimal"

  deny_subcommands: [ "run","publish","tool","new","pack","clean","nuget","workload" ]
  default_timeout: 300
  env_overrides:
    DOTNET_CLI_TELEMETRY_OPTOUT: "1"
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
    DOTNET_NOLOGO: "1"
    NUGET_PACKAGES: ".nuget/packages"
    # Generic no-color hints:
    CLICOLOR: "0"
    NO_COLOR: "1"
    TERM: "dumb"
    # Stable, English output (helps tokenization & parsing):
    DOTNET_CLI_UI_LANGUAGE: "en-US"

# ---- PowerShell (HIGHLY RESTRICTED) ----
# PowerShell is extremely dangerous and powerful. This configuration only allows
# safe, read-only information gathering cmdlets with maximum security restrictions.
# All script execution, file operations, and dangerous cmdlets are blocked.
powershell: &powershell_common
  validator: powershell
  description: "Execute safe, read-only PowerShell cmdlets for information gathering only"
  rationale: |
    PowerShell is extremely powerful and can execute arbitrary code, access system APIs,
    modify files, and perform dangerous operations. This policy implements maximum security
    restrictions:
    - Only allows whitelisted safe cmdlets (Get-*, Format-*, Out-*, etc.)
    - Blocks all script execution (-Command, -File, -EncodedCommand)
    - Forces Restricted execution policy
    - Enables lockdown mode and constrained language mode
    - Blocks dangerous patterns and cmdlets
    - Only permits read-only information gathering operations
  flags: ["-Help", "-?", "-NoProfile", "-nop", "-NonInteractive", "-noni", "-NoLogo", "-nol"]
  deny_global_flags: [
    "-Command", "-c", "-EncodedCommand", "-enc", "-e", "-File", "-f",
    "-ExecutionPolicy", "-ep", "-ex", "-WindowStyle", "-w", "-Sta", "-Mta",
    "-Version", "-v", "-PSConsoleFile", "-ConfigurationName",
    "-InputFormat", "-if", "-OutputFormat", "-of"
  ]
  require_flags: ["-NoProfile", "-NonInteractive"]
  # Whitelist of safe, read-only cmdlets allowed for information gathering
  safe_cmdlets: [
    # Information gathering cmdlets
    "get-process", "get-service", "get-childitem", "get-location", "get-date",
    "get-host", "get-culture", "get-uiculture", "get-executionpolicy",
    "get-psdrive", "get-item", "get-itemproperty", "get-content",
    "get-variable", "get-alias", "get-command", "get-module",
    "get-pssession", "get-history", "get-member", "get-help",
    "get-computerinfo", "get-timezone", "get-uptime",
    # Safe formatting and output cmdlets
    "format-table", "format-list", "format-wide", "format-custom",
    "out-string", "out-null", "out-default",
    "select-object", "where-object", "sort-object", "group-object",
    "measure-object", "compare-object",
    # Safe utility cmdlets
    "write-output", "write-host", "write-verbose", "write-debug",
    "test-path", "resolve-path", "split-path", "join-path", "convert-path"
  ]
  # Regex patterns that indicate dangerous operations (case-insensitive)
  dangerous_patterns: [
    "invoke-expression", "invoke-command", "iex\\s", "icm\\s",
    "\\$\\(", "`", "&\\s", "\\.\\s",  # Command substitution, backticks, call operator, dot sourcing
    "start-process", "new-object", "add-type",
    "\\[system\\.", "\\[reflection\\.",
    "downloadstring", "downloadfile", "webrequest", "webclient",
    "invoke-webrequest", "invoke-restmethod",
    "set-", "new-", "remove-", "clear-", "stop-", "restart-",  # Modification cmdlets
    "enable-", "disable-", "install-", "uninstall-",
    "register-", "unregister-"
  ]
  safe_env:
    PSExecutionPolicyPreference: "Restricted"
    __PSLockdownPolicy: "1"
    PSModuleAutoLoadingPreference: "None"
  env_overrides:
    PSReadlineHistorySaveStyle: "SaveNothing"
    POWERSHELL_TELEMETRY_OPTOUT: "1"
    POWERSHELL_UPDATECHECK: "Off"
    PSDisableWinRTForCurrentUser: "1"
    NO_COLOR: "1"
    TERM: "dumb"
    CLICOLOR: "0"
  default_timeout: 30

# PowerShell Core (pwsh) - same restrictions as Windows PowerShell
pwsh: *powershell_common
