using System;
#if DEBUG
using System.Diagnostics;
#endif
using System.Linq;
using System.Web;
using System.Collections.Generic;



namespace Insuresoft.DiamondServices
{
    ///<summary> Proxy class for Accounting Service such as loading, applying agency and policy payments </summary>
    public static class AccountingService
    {
        ///<summary> Applies cash to a suspense account  </summary>///<param name="request">A wrapper request object containing  the bankaccountId, balance of account and Accounting.SuspenseAccountCash object</param>///<returns>A Wrapper response object containing a boolean indicating the success/failure of the suspense cash operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplySuspenseCash" title="Code Example for calling ApplySuspenseCash function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplySuspenseCash" title="Code Example for calling ApplySuspenseCash function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.Request, Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.Response, Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.RequestData> ApplySuspenseCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.Request, Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.Response, Diamond.Common.Services.Messages.AccountingService.ApplySuspenseCash.RequestData>(proxy, proxy.ApplySuspenseCash);
            return s;
        }
        ///<summary> Begin lockbox file import </summary>///<param name="request">A wrapper request containing the Lockbox Id and the name of the file to be imported</param>///<returns>A wrapper object returning the boolean indicating the success of imoort operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\LockboxFileImport.vb" region="BeginLockboxFileImport" title="Code Example for calling BeginLockboxFileImport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\LockboxFileImport.vb" region="BeginLockboxFileImport" title="Code Example for calling BeginLockboxFileImport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.Request, Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.Response, Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.RequestData> BeginLockboxFileImport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.Request, Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.Response, Diamond.Common.Services.Messages.AccountingService.BeginLockboxFileImport.RequestData>(proxy, proxy.BeginLockboxFileImport);
            return s;
        }
        ///<summary> Begin Synchronous/Asynchronous execution of the Post Policy Payments method </summary>///<param name="request">Wrapper request object containing the Pay Queue records, and a flag to indicate EOD payments should be added .</param>///<returns>Wrapper response object containing the result flag.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="BeginPostPolicyPaymentsProcess" title="Code Example for calling BeginPostPolicyPaymentsProcess function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="BeginPostPolicyPaymentsProcess" title="Code Example for calling BeginPostPolicyPaymentsProcess function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.Request, Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.Response, Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.RequestData> BeginPostPolicyPaymentsProcess()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.Request, Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.Response, Diamond.Common.Services.Messages.AccountingService.BeginPostPolicyPaymentsProcess.RequestData>(proxy, proxy.BeginPostPolicyPaymentsProcess);
            return s;
        }
        ///<summary> Create gl file xml </summary>///<param name="request">A wrapper request containing the file information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\ProcessGL.vb" region="CreateGLFileXML" title="Code Example for calling CreateGLFileXML  function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\ProcessGL.vb" region="CreateGLFileXML" title="Code Example for calling CreateGLFileXML  function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.Request, Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.Response, Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.RequestData> CreateGLFileXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.Request, Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.Response, Diamond.Common.Services.Messages.AccountingService.CreateGLFileXML.RequestData>(proxy, proxy.CreateGLFileXML);
            return s;
        }
        ///<summary> Deletes the agency payments. </summary>///<param name="request">A wrapper request object containing accountingagencypayqueue_id</param>///<returns>A wrapper response object indicating the success of the delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="DeleteAgencyPayments" title="Code Example for calling DeleteAgencyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="DeleteAgencyPayments" title="Code Example for calling DeleteAgencyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.RequestData> DeleteAgencyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyPayments.RequestData>(proxy, proxy.DeleteAgencyPayments);
            return s;
        }
        ///<summary> Deletes the agency receipts and associated name and address </summary>///<param name="request">The request contains name_id, address_id and accountingagencyreceipt_id</param>///<returns>A Wrapper response object containing boolean indicating the success of the delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="DeleteAgencyReceipts" title="Code Example for calling DeleteAgencyReceipts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="DeleteAgencyReceipts" title="Code Example for calling DeleteAgencyReceipts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.RequestData> DeleteAgencyReceipts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.DeleteAgencyReceipts.RequestData>(proxy, proxy.DeleteAgencyReceipts);
            return s;
        }
        ///<summary> Deletes the batch waive records. </summary>///<param name="request">A wrapper request object containing accountingbatchwaiveId and indicator for whether to delete all records or not </param>///<returns>A wrapper response object returning the boolean indicating the success of delete operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="DeleteBatchWaiveRecords" title="Code Example for calling DeleteBatchWaiveRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="DeleteBatchWaiveRecords" title="Code Example for calling DeleteBatchWaiveRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.Request, Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.Response, Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.RequestData> DeleteBatchWaiveRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.Request, Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.Response, Diamond.Common.Services.Messages.AccountingService.DeleteBatchWaiveRecords.RequestData>(proxy, proxy.DeleteBatchWaiveRecords);
            return s;
        }
        ///<summary> Deletes the lockbox batch. </summary>///<param name="request">A wrapper request object containing  the accountinglockbox_id</param>///<returns>A wrapper response object returning the boolean indicating the success of delete operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="DeleteLockboxBatch" title="Code Example for calling DeleteLockboxBatch function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="DeleteLockboxBatch" title="Code Example for calling DeleteLockboxBatch function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.Request, Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.Response, Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.RequestData> DeleteLockboxBatch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.Request, Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.Response, Diamond.Common.Services.Messages.AccountingService.DeleteLockboxBatch.RequestData>(proxy, proxy.DeleteLockboxBatch);
            return s;
        }
        ///<summary> Delete Pending Suspense Payment </summary>///<param name="request">A wrapper request containing SuspenseAccountId, AccountingSuspendedCashId, AccountingSuspendedCashStatusId </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccountForm.vb" region="DeletePendingSuspensePayment" title="Code Example for calling DeletePendingSuspensePayment  function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccountForm.vb" region="DeletePendingSuspensePayment" title="Code Example for calling DeletePendingSuspensePayment  function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.Request, Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.Response, Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.RequestData> DeletePendingSuspensePayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.Request, Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.Response, Diamond.Common.Services.Messages.AccountingService.DeletePendingSuspensePayment.RequestData>(proxy, proxy.DeletePendingSuspensePayment);
            return s;
        }
        ///<summary> Deletes the policy payment and associated name and address </summary>///<param name="request">A wrapper request object containing accountingpayqueue, name and address ids.</param>///<returns>A wrapper response object returning the boolean indicating the success of delete operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="DeletePolicyPayment" title="Code Example for calling DeletePolicyPayment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="DeletePolicyPayment" title="Code Example for calling DeletePolicyPayment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.Request, Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.Response, Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.RequestData> DeletePolicyPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.Request, Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.Response, Diamond.Common.Services.Messages.AccountingService.DeletePolicyPayment.RequestData>(proxy, proxy.DeletePolicyPayment);
            return s;
        }
        ///<summary>  GetGLRawData </summary>///<param name="request">Takes in accountingDate and typeId of the data needing to be returned for general ledger</param>///<returns> DataSet info </returns>///<example>  <code lang="vbnet" source="Diamond\Business\LOB\Company.vb" region="GetGLRawData" title="Code Example for calling GetGLRawData function"></code></example>///<code lang="vbnet" source="Diamond\Business\LOB\Company.vb" region="GetGLRawData" title="Code Example for calling GetGLRawData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.GetGLRawData.Request, Diamond.Common.Services.Messages.AccountingService.GetGLRawData.Response, Diamond.Common.Services.Messages.AccountingService.GetGLRawData.RequestData> GetGLRawData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.GetGLRawData.Request, Diamond.Common.Services.Messages.AccountingService.GetGLRawData.Response, Diamond.Common.Services.Messages.AccountingService.GetGLRawData.RequestData>(proxy, proxy.GetGLRawData);
            return s;
        }
        ///<summary> Imports the lockbox payment. </summary>///<param name="request">A wrapper request object containing  accountinglockbox_id</param>///<returns>A wrapper response object returning the boolean indicating the success of import operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="ImportLockboxPayment" title="Code Example for calling ImportLockboxPayment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="ImportLockboxPayment" title="Code Example for calling ImportLockboxPayment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.Request, Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.Response, Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.RequestData> ImportLockboxPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.Request, Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.Response, Diamond.Common.Services.Messages.AccountingService.ImportLockboxPayment.RequestData>(proxy, proxy.ImportLockboxPayment);
            return s;
        }
        ///<summary> Loads the batch waive records based on the date range </summary>///<param name="request">A wrapper request object containing start and end date </param>///<returns>A wrapper response object containing collection of Accounting.BatchWaive objects.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="LoadAccountingBatchWaiveRecords" title="Code Example for calling LoadAccountingBatchWaiveRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="LoadAccountingBatchWaiveRecords" title="Code Example for calling LoadAccountingBatchWaiveRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.Request, Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.Response, Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.RequestData> LoadAccountingBatchWaiveRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.Request, Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.Response, Diamond.Common.Services.Messages.AccountingService.LoadAccountingBatchWaiveRecords.RequestData>(proxy, proxy.LoadAccountingBatchWaiveRecords);
            return s;
        }
        ///<summary> Loads the agency activities to the Agency activity screen based on the date range provided </summary>///<param name="request">A wrapper request object containing  agency id, companystatelob_id, and a date range </param>///<returns>A wrapper response object containing collection of Agency Activity objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencyActivity" title="Code Example for calling LoadAgencyActivity function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencyActivity" title="Code Example for calling LoadAgencyActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.RequestData> LoadAgencyActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyActivity.RequestData>(proxy, proxy.LoadAgencyActivity);
            return s;
        }
        ///<summary> Loads the agency based info such as agency_id, companystatelob_id, commercial_name1, code based on company state lob id. </summary>///<param name="request">A wrapper request object containing companystatelobid</param>///<returns>A wrapper response object containing collection of LoadAgencyBasedOnCompanyStateLobId objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencybasedOnCompanyStateLobId" title="Code Example for calling LoadAgencybasedOnCompanyStateLobId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencybasedOnCompanyStateLobId" title="Code Example for calling LoadAgencybasedOnCompanyStateLobId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.RequestData> LoadAgencybasedOnCompanyStateLobId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencybasedOnCompanyStateLobId.RequestData>(proxy, proxy.LoadAgencybasedOnCompanyStateLobId);
            return s;
        }
        ///<summary> Load agency bill activity </summary>///<param name="request">A wrapper request containing the agency bill activity information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillActivity.vb" region="LoadAgencyBillActivity" title="Code Example for calling LoadAgencyBillActivity function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillActivity.vb" region="LoadAgencyBillActivity" title="Code Example for calling LoadAgencyBillActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.RequestData> LoadAgencyBillActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillActivity.RequestData>(proxy, proxy.LoadAgencyBillActivity);
            return s;
        }
        ///<summary> Loads policies to the  agency bill receipts allocation screen </summary>///<param name="request">A wrapper request containing the agency bill receipt information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillPaymentDetailForm.vb" region="AgencyBillPaymentDetail" title="Code Example for calling AgencyBillPaymentDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillPaymentDetailForm.vb" region="AgencyBillPaymentDetail" title="Code Example for calling AgencyBillPaymentDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.RequestData> LoadAgencyBillPaymentDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyBillPaymentDetail.RequestData>(proxy, proxy.LoadAgencyBillPaymentDetail);
            return s;
        }
        ///<summary> Loads the agency code info based on agency id </summary>///<param name="request">A wrapper request object containing agency, company, state and lob ids </param>///<returns>A wrapper response object containing collection of Accounting.LoadAgencyCode objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencyCode" title="Code Example for calling LoadAgencyCode function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadAgencyCode" title="Code Example for calling LoadAgencyCode function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.RequestData> LoadAgencyCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyCode.RequestData>(proxy, proxy.LoadAgencyCode);
            return s;
        }
        ///<summary> Loads the agency payments for a given User Id </summary>///<param name="request">A wrapper request object containing users_id and accountingagencypayqueue_id</param>///<returns>A Wrapper response object containing collection of Agency Pay Queue objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\Agency.vb" region="LoadAgencyPayments" title="Code Example for calling LoadAgencyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\Agency.vb" region="LoadAgencyPayments" title="Code Example for calling LoadAgencyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.RequestData> LoadAgencyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyPayments.RequestData>(proxy, proxy.LoadAgencyPayments);
            return s;
        }
        ///<summary> Loads the agency receipt item info. </summary>///<param name="request">A wrapper request object containing accountingagencyreceipt_id</param>///<returns>A wrapper response object containing collection of Accounting.AccountingAgencyReceipt object.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="LoadAgencyReceiptItemInfo" title="Code Example for calling LoadAgencyReceiptItemInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="LoadAgencyReceiptItemInfo" title="Code Example for calling LoadAgencyReceiptItemInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.RequestData> LoadAgencyReceiptItemInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceiptItemInfo.RequestData>(proxy, proxy.LoadAgencyReceiptItemInfo);
            return s;
        }
        ///<summary> Loads the agency receipts for a given User Id </summary>///<param name="request">A wrapper request object containing users_id and accountingagencypayqueue_id</param>///<returns>A Wrapper response object containing collection of Agency Receipt objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\Agency.vb" region="LoadAgencyReceipts" title="Code Example for calling LoadAgencyReceipts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\Agency.vb" region="LoadAgencyReceipts" title="Code Example for calling LoadAgencyReceipts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.RequestData> LoadAgencyReceipts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.LoadAgencyReceipts.RequestData>(proxy, proxy.LoadAgencyReceipts);
            return s;
        }
        ///<summary> Loads the batch waive queue records based on the date range </summary>///<param name="request">A wrapper request object containing start and end date </param>///<returns>A wrapper response object containing collection of Accounting.BatchWaive objects.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="LoadBatchWaiveQueue" title="Code Example for calling LoadBatchWaiveQueue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="LoadBatchWaiveQueue" title="Code Example for calling LoadBatchWaiveQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.Request, Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.Response, Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.RequestData> LoadBatchWaiveQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.Request, Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.Response, Diamond.Common.Services.Messages.AccountingService.LoadBatchWaiveQueue.RequestData>(proxy, proxy.LoadBatchWaiveQueue);
            return s;
        }
        ///<summary> Loads the bill method combo  </summary>///<param name="request">A wrapper request object containing Adminstration.BillMethod object</param>///<returns>Wrapper response object containing collection of BillMethod objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadBillMethod" title="Code Example for calling LoadBillMethod function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadBillMethod" title="Code Example for calling LoadBillMethod function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.Request, Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.Response, Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.RequestData> LoadBillMethod()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.Request, Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.Response, Diamond.Common.Services.Messages.AccountingService.LoadBillMethod.RequestData>(proxy, proxy.LoadBillMethod);
            return s;
        }
        ///<summary> Loads the cash entry detail info. </summary>///<param name="request">A wrapper request object containing key info</param>///<returns>A wrapper response object containing policy and billing objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="LoadCashEntryDetailInfo" title="Code Example for calling LoadCashEntryDetailInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="LoadCashEntryDetailInfo" title="Code Example for calling LoadCashEntryDetailInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.RequestData> LoadCashEntryDetailInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadCashEntryDetailInfo.RequestData>(proxy, proxy.LoadCashEntryDetailInfo);
            return s;
        }
        ///<summary> Loads the company state lob combo  </summary>///<param name="request">A wrapper request object containing Accounting.CompanyStateLob object</param>///<returns>Wrapper response object containing collection of CompanyStateLob objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadCompanyStateLob" title="Code Example for calling LoadCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadCompanyStateLob" title="Code Example for calling LoadCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.Request, Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.Response, Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.RequestData> LoadCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.Request, Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.Response, Diamond.Common.Services.Messages.AccountingService.LoadCompanyStateLob.RequestData>(proxy, proxy.LoadCompanyStateLob);
            return s;
        }
        ///<summary> Loads the account name for suspense account adjustment. </summary>///<param name="request">A wrapper request object containing name_id</param>///<returns>A wrapper object containing returns Name object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadForSuspenseAccountAdjustment" title="Code Example for calling LoadForSuspenseAccountAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadForSuspenseAccountAdjustment" title="Code Example for calling LoadForSuspenseAccountAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.RequestData> LoadForSuspenseAccountAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.LoadForSuspenseAccountAdjustment.RequestData>(proxy, proxy.LoadForSuspenseAccountAdjustment);
            return s;
        }
        ///<summary> Loads the lockbox info. </summary>///<param name="request">A wrapper request object containing nothing</param>///<returns>A wrapper response object containing Lockbox and LockboxDetails objects collection</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="LoadLockboxInfo1" title="Code Example for calling LoadLockboxInfo function"></code>  <code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="LoadLockboxInfo2"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="LoadLockboxInfo1" title="Code Example for calling LoadLockboxInfo function"></code>///<code lang="vbnet" source="Diamond\UI\Accounting\LockBoxPaymentImport.vb" region="LoadLockboxInfo2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.RequestData> LoadLockboxInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadLockboxInfo.RequestData>(proxy, proxy.LoadLockboxInfo);
            return s;
        }
        ///<summary> Loads the policy payment item info. </summary>///<param name="request">A wrapper request object containing AccountingpayqueueId </param>///<returns>A wrapper response object containing Accounting.PayQueue and Policy objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="LoadPolicyPaymentItemInfo" title="Code Example for calling LoadPolicyPaymentItemInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="LoadPolicyPaymentItemInfo" title="Code Example for calling LoadPolicyPaymentItemInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.RequestData> LoadPolicyPaymentItemInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.Request, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.Response, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPaymentItemInfo.RequestData>(proxy, proxy.LoadPolicyPaymentItemInfo);
            return s;
        }
        ///<summary> Loads the policy payments based on Users Id </summary>///<param name="request">A wrapper request object containing users id </param>///<returns>A wrapper response object containing collection of Pay Queue objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="LoadPolicyPayments" title="Code Example for calling LoadPolicyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="LoadPolicyPayments" title="Code Example for calling LoadPolicyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.RequestData> LoadPolicyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.LoadPolicyPayments.RequestData>(proxy, proxy.LoadPolicyPayments);
            return s;
        }
        ///<summary> Loads the suspense account cash. </summary>///<param name="request">A wrapper request object containing suspense account id, name and bank name</param>///<returns>A wrapper response object containing collection of Accounting.SuspenseAccountcash object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadSuspenseAcctCash" title="Code Example for calling LoadSuspenseAccountCash function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadSuspenseAcctCash" title="Code Example for calling LoadSuspenseAccountCash function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.RequestData> LoadSuspenseAccountCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccountCash.RequestData>(proxy, proxy.LoadSuspenseAccountCash);
            return s;
        }
        ///<summary> Load suspense accounts </summary>///<param name="request">A wrapper request containing the Lockbox Id and the name of the file to be imported</param>///<returns>A wrapper object returning the boolean indicating the success of imoort operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadSuspenseAccounts" title="Code Example for calling LoadSuspenseAccounts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\SuspenseAccount.vb" region="LoadSuspenseAccounts" title="Code Example for calling LoadSuspenseAccounts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.RequestData> LoadSuspenseAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspenseAccounts.RequestData>(proxy, proxy.LoadSuspenseAccounts);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.RequestData> LoadSuspensePaymentsForPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.Request, Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.Response, Diamond.Common.Services.Messages.AccountingService.LoadSuspensePaymentsForPolicy.RequestData>(proxy, proxy.LoadSuspensePaymentsForPolicy);
            return s;
        }
        ///<summary> Posts the agency payments. </summary>///<param name="request">A wrapper request object containing collection of Accounting.AgencyPayQueue object</param>///<returns> A wrapper response object indicating the success of the payment post operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="PostAgencyPayments" title="Code Example for calling PostAgencyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="PostAgencyPayments" title="Code Example for calling PostAgencyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.RequestData> PostAgencyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.PostAgencyPayments.RequestData>(proxy, proxy.PostAgencyPayments);
            return s;
        }
        ///<summary> Posts the agency receipts. </summary>///<param name="request">A wrapper request object containing collection of Accounting.AccountingAgencyReceipts object</param>///<returns>A wrapper response object indicating the success of the receipts post operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="PostAgencyReceipts" title="Code Example for calling PostAgencyReceipts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyForm.vb" region="PostAgencyReceipts" title="Code Example for calling PostAgencyReceipts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.RequestData> PostAgencyReceipts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.PostAgencyReceipts.RequestData>(proxy, proxy.PostAgencyReceipts);
            return s;
        }
        ///<summary> Posts the policy payments. </summary>///<param name="request">A wrapper request object containing  Accounting.PayQueue object and system date</param>///<returns>A wrapper response object returning the boolean indicating the success of payment post operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="PostPolicyPayments" title="Code Example for calling PostPolicyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="PostPolicyPayments" title="Code Example for calling PostPolicyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.RequestData> PostPolicyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.PostPolicyPayments.RequestData>(proxy, proxy.PostPolicyPayments);
            return s;
        }
        ///<summary> Processes adjustments on agency bill batch payment </summary>///<param name="request">A wrapper request object containing  Accounting.PayQueue object and system date</param>///<returns>A wrapper response object returning the boolean indicating the success of adjustment batch post operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="PostAgencyBillBatchAdjustment" title="Code Example for calling PostAgencyBillBatchAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntry.vb" region="PostAgencyBillBatchAdjustment" title="Code Example for calling PostAgencyBillBatchAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.RequestData> ProcessAgencyBillBatchPaymentAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.ProcessAgencyBillBatchPaymentAdjustment.RequestData>(proxy, proxy.ProcessAgencyBillBatchPaymentAdjustment);
            return s;
        }
        ///<summary> Begin lockbox Automatic Process </summary>///<param name="request">A wrapper request containing the timer and notifications</param>///<returns>A wrapper object returning the boolean indicating the success of imoort operation, timer and notifications.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\LockboxFileImport.vb" region="BeginLockboxFileImport" title="Code Example for calling BeginLockboxFileImport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\LockboxFileImport.vb" region="BeginLockboxFileImport" title="Code Example for calling BeginLockboxFileImport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.Request, Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.Response, Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.RequestData> ProcessAutomaticLockbox()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.Request, Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.Response, Diamond.Common.Services.Messages.AccountingService.ProcessAutomaticLockbox.RequestData>(proxy, proxy.ProcessAutomaticLockbox);
            return s;
        }
        ///<summary> Process monthly GL file </summary>///<param name="request">A wrapper request containing the file information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\ProcessGL.vb" region="ProcessMonthlyGlFile" title="Code Example for calling ProcessMonthlyGlFile  function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\ProcessGL.vb" region="ProcessMonthlyGlFile" title="Code Example for calling ProcessMonthlyGlFile  function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.Request, Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.Response, Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.RequestData> ProcessMonthlyGLFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.Request, Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.Response, Diamond.Common.Services.Messages.AccountingService.ProcessMonthlyGLFile.RequestData>(proxy, proxy.ProcessMonthlyGLFile);
            return s;
        }
        ///<summary> Runs the developer tests. </summary>///<param name="request">The request.</param>///<returns>Nothing</returns>///<remarks>Doesn't do anything for now</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.Request, Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.Response, Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.RequestData> RunDeveloperTests()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.Request, Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.Response, Diamond.Common.Services.Messages.AccountingService.RunDeveloperTests.RequestData>(proxy, proxy.RunDeveloperTests);
            return s;
        }
        ///<summary> Saves the agency activity adjustment. </summary>///<param name="request">A wrapper request object containing the Accounting.AgencyActivity object, agencyactivitytype_id, start and end date, agencyactivity_id, agency_id, and companystatelob_id</param>///<returns>A wrapper response object returning the boolean indicating the success of save operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivityAdjustment.vb" region="SaveAgencyActivityAdjustment" title="Code Example for calling SaveAgencyActivityAdjustment function"></code>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyNSFFee.vb" region="SaveAgencyActivityAdjustment-NsfFee" title="Code Example specific to processing NsfFee"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivityAdjustment.vb" region="SaveAgencyActivityAdjustment" title="Code Example for calling SaveAgencyActivityAdjustment function"></code>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyNSFFee.vb" region="SaveAgencyActivityAdjustment-NsfFee" title="Code Example specific to processing NsfFee"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.RequestData> SaveAgencyActivityAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyActivityAdjustment.RequestData>(proxy, proxy.SaveAgencyActivityAdjustment);
            return s;
        }
        ///<summary> Saves the agency payments. </summary>///<param name="request">A wrapper request object containing Accounting.AgencyPayQueue object</param>///<returns>A wrapper response object returning the boolean indicating the success of save operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyPayment.vb" region="SaveAgencyPayments" title="Code Example for calling SaveAgencyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyPayment.vb" region="SaveAgencyPayments" title="Code Example for calling SaveAgencyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.RequestData> SaveAgencyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyPayments.RequestData>(proxy, proxy.SaveAgencyPayments);
            return s;
        }
        ///<summary> Saves the agency receipts  </summary>///<param name="request">A wrapper request object containing Accounting.AgencyReceipts </param>///<returns>A wrapper response object containing the saved Accounting.AgencyReceipt object and a boolean indicating the success of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="SaveAgencyReceipts" title="Code Example for calling SaveAgencyReceipts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="SaveAgencyReceipts" title="Code Example for calling SaveAgencyReceipts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.RequestData> SaveAgencyReceipts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyReceipts.RequestData>(proxy, proxy.SaveAgencyReceipts);
            return s;
        }
        ///<summary> SAve agency bill activity </summary>///<param name="request">A wrapper request containing the agency bill adjustment information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillAdjustment.vb" region="SaveAgencyStatementAdjustment" title="Code Example for calling SaveAgencyStatementAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillAdjustment.vb" region="SaveAgencyStatementAdjustment" title="Code Example for calling SaveAgencyStatementAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.RequestData> SaveAgencyStatementAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementAdjustment.RequestData>(proxy, proxy.SaveAgencyStatementAdjustment);
            return s;
        }
        ///<summary> Save agency bill receipts </summary>///<param name="request">A wrapper request containing the agency bill receipt information </param>///<returns>A wrapper object returning the boolean indicating the success of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="SaveAgencyStatementReceipts" title="Code Example for calling SaveAgencyStatementReceipts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyBillReceiptForm.vb" region="SaveAgencyStatementReceipts" title="Code Example for calling SaveAgencyStatementReceipts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.RequestData> SaveAgencyStatementReceipts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.Request, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.Response, Diamond.Common.Services.Messages.AccountingService.SaveAgencyStatementReceipts.RequestData>(proxy, proxy.SaveAgencyStatementReceipts);
            return s;
        }
        ///<summary> Saves the lockbox data. </summary>///<param name="request">A wrapper request object containing Accounting.Lockbox object</param>///<returns>A wrapper response object returning the boolean indicating the success of save operation.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLockboxData" title="Code Example for calling SaveLockboxData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLockboxData" title="Code Example for calling SaveLockboxData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.Request, Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.Response, Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.RequestData> SaveLockboxData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.Request, Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.Response, Diamond.Common.Services.Messages.AccountingService.SaveLockboxData.RequestData>(proxy, proxy.SaveLockboxData);
            return s;
        }
        ///<summary> Saves the policy payments. </summary>///<param name="request">A wrapper request object containing Accounting.PayQueue object</param>///<returns>A wrapper response object returning the boolean indicating the success of save operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="SavePolicyPayments" title="Code Example for calling SavePolicyPayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\CashEntryDetail.vb" region="SavePolicyPayments" title="Code Example for calling SavePolicyPayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.RequestData> SavePolicyPayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.Request, Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.Response, Diamond.Common.Services.Messages.AccountingService.SavePolicyPayments.RequestData>(proxy, proxy.SavePolicyPayments);
            return s;
        }
        ///<summary> Waives the batch records. </summary>///<param name="request">A wrapper request object containing  Accounting.BatchWaive and Accounting.BatchWaivetype objects</param>///<returns>A wrapper response object returning the boolean indicating the success of waive record operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="WaiveBatchRecords" title="Code Example for calling WaiveBatchRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\BatchWaive.vb" region="WaiveBatchRecords" title="Code Example for calling WaiveBatchRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.Request, Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.Response, Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.RequestData> WaiveBatchRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AccountingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.Request, Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.Response, Diamond.Common.Services.Messages.AccountingService.WaiveBatchRecords.RequestData>(proxy, proxy.WaiveBatchRecords);
            return s;
        }
    }
    ///<summary> Proxy class for Additional Interest Service such as Load and Save AI and AI List </summary>
    public static class AdditionalInterestService
    {
        ///<summary> Determines whether the user has authority to delete the Additional Interest </summary>///<param name="request">A wrapper request object containing the Additional Interest Id.</param>///<returns> A wrapper response object containing a boolean value indicating whether the user has authority to delete the AI </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="CanDelete" title="Code Example for calling CanDelete function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="CanDelete" title="Code Example for calling CanDelete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.RequestData> CanDelete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CanDelete.RequestData>(proxy, proxy.CanDelete);
            return s;
        }
        ///<summary> Determines whether the user has authority to edit the Additional Interest </summary>///<param name="request">A wrapper request object containing the Additional Interest Id, Policy Id and Policy Image Num.</param>///<returns> A wrapper response object containing a boolean value indicating whether the user has authority to edit the AI </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="CanEdit" title="Code Example for calling CanEdit function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="CanEdit" title="Code Example for calling CanEdit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.RequestData> CanEdit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CanEdit.RequestData>(proxy, proxy.CanEdit);
            return s;
        }
        ///<summary> Copy And Update AI For ABT Transactions. </summary>///<param name="request">A wrapper request object containing the Policy Id and Policy Image Num.</param>///<returns> A wrapper response object containing a boolean value indicating whether the user has authority to edit the AI </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="CopyAndUpdateAIForABT" title="Code Example for calling CopyAndUpdateAIForABT function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="CopyAndUpdateAIForABT" title="Code Example for calling CopyAndUpdateAIForABT function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.RequestData> CopyAndUpdateAIForABT()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.Request, Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.Response, Diamond.Common.Services.Messages.AdditionalInterestService.CopyAndUpdateAIForABT.RequestData>(proxy, proxy.CopyAndUpdateAIForABT);
            return s;
        }
        ///<summary> Deletes the specified global additional interest list entry. </summary>///<param name="request">A wrapper request object containing the Additional Interest List Id.</param>///<returns>A wrapper response object containing a boolean value indicating if the entry was deleted.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="DeleteGlobalListEntry" title="Code Example for calling DeleteGlobalListEntry function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="DeleteGlobalListEntry" title="Code Example for calling DeleteGlobalListEntry function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.Request, Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.Response, Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.RequestData> DeleteGlobalListEntry()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.Request, Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.Response, Diamond.Common.Services.Messages.AdditionalInterestService.DeleteGlobalListEntry.RequestData>(proxy, proxy.DeleteGlobalListEntry);
            return s;
        }
        ///<summary> Loads the list of changes done to AI </summary>///<param name="request">A wrapper request object containing the AgencyId.</param>///<returns> A wrapper response object containing collection of AI List History objects </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadAIHistory" title="Code Example for calling LoadAIHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadAIHistory" title="Code Example for calling LoadAIHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.RequestData> LoadAIHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIHistory.RequestData>(proxy, proxy.LoadAIHistory);
            return s;
        }
        ///<summary> Loads the list of changes done to AI List </summary>///<param name="request">A wrapper request object containing the AgencyId.</param>///<returns> A wrapper response object containing collection of AI List History objects </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListHistoryForm.vb" region="LoadAIListHistory" title="Code Example for calling LoadAIListHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListHistoryForm.vb" region="LoadAIListHistory" title="Code Example for calling LoadAIListHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.RequestData> LoadAIListHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadAIListHistory.RequestData>(proxy, proxy.LoadAIListHistory);
            return s;
        }
        ///<summary> Loads Additional Interest List for a specific AdditionalInterestListId </summary>///<param name="request">A wrapper request object containing the AdditionalInterestListId.</param>///<returns> A wrapper response object containing AI List object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="LoadForId" title="Code Example for calling LoadForId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="LoadForId" title="Code Example for calling LoadForId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.RequestData> LoadForId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadForId.RequestData>(proxy, proxy.LoadForId);
            return s;
        }
        ///<summary> Loads the single AI history. </summary>///<param name="request">A wrapper request object containing the AdditionalInterestListId.</param>///<returns> A wrapper response object containing AI List History object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListHistoryForm.vb" region="LoadSingleAIHistory" title="Code Example for calling LoadSingleAIHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListHistoryForm.vb" region="LoadSingleAIHistory" title="Code Example for calling LoadSingleAIHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.RequestData> LoadSingleAIHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LoadSingleAIHistory.RequestData>(proxy, proxy.LoadSingleAIHistory);
            return s;
        }
        ///<summary> Load the AI List based on the Look up information supplied </summary>///<param name="request">A wrapper request object containing the AI Lookup details such as Name, Address, Phone.</param>///<returns> A wrapper response object containing collection of AI List </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LookupLoad" title="Code Example for calling LookupLoad function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LookupLoad" title="Code Example for calling LookupLoad function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.RequestData> LookupLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.Request, Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.Response, Diamond.Common.Services.Messages.AdditionalInterestService.LookupLoad.RequestData>(proxy, proxy.LookupLoad);
            return s;
        }
        ///<summary> Saves the AI List to the database </summary>///<param name="request">A wrapper request object containing the AI List.</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the save operation </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="SaveAIList" title="Code Example for calling SaveAIList function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="SaveAIList" title="Code Example for calling SaveAIList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.Request, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.Response, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.RequestData> SaveAIList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.Request, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.Response, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIList.RequestData>(proxy, proxy.SaveAIList);
            return s;
        }
        ///<summary> Saves the AI List History containing changes to the AI List to the database </summary>///<param name="request">A wrapper request object containing the AI List History.</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the save operation </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListLookupForm.vb" region="SaveAIListHistory" title="Code Example for calling SaveAIListHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListLookupForm.vb" region="SaveAIListHistory" title="Code Example for calling SaveAIListHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.RequestData> SaveAIListHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.Request, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.Response, Diamond.Common.Services.Messages.AdditionalInterestService.SaveAIListHistory.RequestData>(proxy, proxy.SaveAIListHistory);
            return s;
        }
        ///<summary> Validates the Additional Interest search data </summary>///<param name="request">A wrapper request object containing the Additional Interest List Id.</param>///<returns>A wrapper response object containing a validation object with any returned validations. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListLookupForm.vb" region="ValidSearchData" title="Code Example for calling ValidSearchData function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListLookupForm.vb" region="ValidSearchData" title="Code Example for calling ValidSearchData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.Request, Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.Response, Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.RequestData> ValidSearchData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdditionalInterestServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.Request, Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.Response, Diamond.Common.Services.Messages.AdditionalInterestService.ValidSearchData.RequestData>(proxy, proxy.ValidSearchData);
            return s;
        }
    }
    ///<summary> Proxy class for performing Administration Service for AI, Account, Agency etc </summary>
    public static class AdministrationService
    {
        ///<summary> Adds new link for billing pay plan and agency. </summary>///<param name="request">A wrapper class for AddAgencyPayPlanLink Request Data containing the BillingPayPlanAgencyLink object.</param>///<returns>A wrapper response.  Returns success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="AddAgencyPayPlanLink" title="Code Example for calling AddAgencyPayPlanLink function"></code></example>///<code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="AddAgencyPayPlanLink" title="Code Example for calling AddAgencyPayPlanLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.Request, Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.Response, Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.RequestData> AddAgencyPayPlanLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.Request, Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.Response, Diamond.Common.Services.Messages.AdministrationService.AddAgencyPayPlanLink.RequestData>(proxy, proxy.AddAgencyPayPlanLink);
            return s;
        }
        ///<summary> Adds an authority to an authority template </summary>///<param name="request">The wrapper request containing the AuthorityTemplateAuthorityRecord.</param>///<returns>The wrapper response containing a success/failure indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.RequestData> AddAuthorityTemplateAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplateAuthority.RequestData>(proxy, proxy.AddAuthorityTemplateAuthority);
            return s;
        }
        ///<summary> Add a collection of authority templates to a security group. </summary>///<param name="request">An wrapper request containing the AuthorityTemplate collection and the SecurityGroupId of the group.</param>///<returns>The wrapper response containing success/failure status.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.RequestData> AddAuthorityTemplatesToSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityTemplatesToSecurityGroup.RequestData>(proxy, proxy.AddAuthorityTemplatesToSecurityGroup);
            return s;
        }
        ///<summary> Adds the type of the authority to all users in user. </summary>///<param name="request">The wrapper request containing AddAuthorityToAllUsersInUserType.</param>///<returns> The wrapper response containing success indicator </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.RequestData> AddAuthorityToAllUsersInUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToAllUsersInUserType.RequestData>(proxy, proxy.AddAuthorityToAllUsersInUserType);
            return s;
        }
        ///<summary> Adds the type of the authority to user or user. </summary>///<param name="request">The wrapper request containing AddAuthorityToUserOrUserType, Table.</param>///<returns> The wrapper response containing AmountFlag </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.RequestData> AddAuthorityToUserOrUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.Request, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.Response, Diamond.Common.Services.Messages.AdministrationService.AddAuthorityToUserOrUserType.RequestData>(proxy, proxy.AddAuthorityToUserOrUserType);
            return s;
        }
        ///<summary> Adds the selected producer. </summary>///<param name="request">The wrapper request containing AgencyBookTransferId, AgencyProducerId.</param>///<returns> The wrapper response containing SelectedProducer </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddSelectedProducer" title="Code Example for calling AddSelectedProducer function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddSelectedProducer" title="Code Example for calling AddSelectedProducer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.Request, Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.Response, Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.RequestData> AddSelectedProducer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.Request, Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.Response, Diamond.Common.Services.Messages.AdministrationService.AddSelectedProducer.RequestData>(proxy, proxy.AddSelectedProducer);
            return s;
        }
        ///<summary> Adds the specified transaction reason item that has been setup to only be viewable for the associated user category. </summary>///<param name="request">The wrapper request object containing the item to add.</param>///<returns>The wrapper response object the Success flag and the item that has been successfully added.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.RequestData> AddTransactionReasonViewableByUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.AddTransactionReasonViewableByUserCategory.RequestData>(proxy, proxy.AddTransactionReasonViewableByUserCategory);
            return s;
        }
        ///<summary> Adds the users authority. </summary>///<param name="request">The wrapper request containing UsersAuthorityRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="AddUsersAuthority" title="Code Example for calling AddUsersAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="AddUsersAuthority" title="Code Example for calling AddUsersAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.RequestData> AddUsersAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddUsersAuthority.RequestData>(proxy, proxy.AddUsersAuthority);
            return s;
        }
        ///<summary> Add a collection of users to a security group. </summary>///<param name="request">An wrapper request containing the DiamondUsers collection and the SecurityGroupId of the group.</param>///<returns>The wrapper response containing success/failure status.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.RequestData> AddUsersToSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.AddUsersToSecurityGroup.RequestData>(proxy, proxy.AddUsersToSecurityGroup);
            return s;
        }
        ///<summary> Adds the user type authority. </summary>///<param name="request">The wrapper request containing UserTypeAuthorityRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="AddUserTypeAuthority" title="Code Example for calling AddUserTypeAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="AddUserTypeAuthority" title="Code Example for calling AddUserTypeAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.RequestData> AddUserTypeAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.AddUserTypeAuthority.RequestData>(proxy, proxy.AddUserTypeAuthority);
            return s;
        }
        ///<summary> Agencies the lob non renew status. </summary>///<param name="request">The wrapper request containing AgencyLobNonRenewStatus.</param>///<returns> The wrapper response containing AgencyLobNonRenewStatus </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyNonRenewLOBForm.vb" region="AgencyLobNonRenewStatus" title="Code Example for calling AgencyLobNonRenewStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyNonRenewLOBForm.vb" region="AgencyLobNonRenewStatus" title="Code Example for calling AgencyLobNonRenewStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.Request, Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.Response, Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.RequestData> AgencyLobNonRenewStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.Request, Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.Response, Diamond.Common.Services.Messages.AdministrationService.AgencyLobNonRenewStatus.RequestData>(proxy, proxy.AgencyLobNonRenewStatus);
            return s;
        }
        ///<summary> Checks to see if the company can be safely deleted. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing the safe to delete indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanySetupList.vb" region="DeleteCompany" title="Code Example for calling DeleteCompany function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanySetupList.vb" region="DeleteCompany" title="Code Example for calling DeleteCompany function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.Request, Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.Response, Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.RequestData> CanDeleteCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.Request, Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.Response, Diamond.Common.Services.Messages.AdministrationService.CanDeleteCompany.RequestData>(proxy, proxy.CanDeleteCompany);
            return s;
        }
        ///<summary> Checks for primary contact. </summary>///<param name="request">The wrapper request containing AgencyId, AgencyProducerId.</param>///<returns> The wrapper response containing IsCheckForPrimaryContact </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyProducer.vb" region="CheckForPrimaryContact" title="Code Example for calling CheckForPrimaryContact function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyProducer.vb" region="CheckForPrimaryContact" title="Code Example for calling CheckForPrimaryContact function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.Request, Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.Response, Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.RequestData> CheckForPrimaryContact()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.Request, Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.Response, Diamond.Common.Services.Messages.AdministrationService.CheckForPrimaryContact.RequestData>(proxy, proxy.CheckForPrimaryContact);
            return s;
        }
        ///<summary> Checks for valid installs. </summary>///<param name="request">The wrapper request containing BillingPayPlanId.</param>///<returns>The wrapper response containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckForValidInstalls" title="Code Example for calling CheckForValidInstalls function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckForValidInstalls" title="Code Example for calling CheckForValidInstalls function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.Request, Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.Response, Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.RequestData> CheckForValidInstalls()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.Request, Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.Response, Diamond.Common.Services.Messages.AdministrationService.CheckForValidInstalls.RequestData>(proxy, proxy.CheckForValidInstalls);
            return s;
        }
        ///<summary> Creates a copy of the specified agency. </summary>///<param name="request">The wrapper request containing AgencyId of the agency to be copied.</param>///<returns>The wrapper response containing the created copy of the agency.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="CopyAgency" title="Code Example for calling CopyAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="CopyAgency" title="Code Example for calling CopyAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CopyAgency.Request, Diamond.Common.Services.Messages.AdministrationService.CopyAgency.Response, Diamond.Common.Services.Messages.AdministrationService.CopyAgency.RequestData> CopyAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CopyAgency.Request, Diamond.Common.Services.Messages.AdministrationService.CopyAgency.Response, Diamond.Common.Services.Messages.AdministrationService.CopyAgency.RequestData>(proxy, proxy.CopyAgency);
            return s;
        }
        ///<summary> Copies authorities from one user to another. </summary>///<param name="request">The wrapper request containing the source user id and the destination user id.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CopyUserAuthorities" title="Code Example for calling CopyUserAuthorities function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CopyUserAuthorities" title="Code Example for calling CopyUserAuthorities function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.RequestData> CopyUserAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.CopyUserAuthorities.RequestData>(proxy, proxy.CopyUserAuthorities);
            return s;
        }
        ///<summary> Deletes the agency group. </summary>///<param name="request">A wrapper class for DeleteAgencyGroup Request Data containing the AgencyGroupId, NeedCountCheck and DeleteAgencyGroup As DCO.Policy.Agency.AgencyGroups values.</param>///<returns>A wrapper response object containing collection of IsAgencyExists value and AgencyGroups object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="DeleteAgencyGroup" title="Code Example for calling DeleteAgencyGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="DeleteAgencyGroup" title="Code Example for calling DeleteAgencyGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.RequestData> DeleteAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgency.RequestData>(proxy, proxy.DeleteAgency);
            return s;
        }
        ///<summary> Deletes the agency commission. </summary>///<param name="request">The wrapper request containing AgencyCommissionId.</param>///<returns> The wrapper response containing ReturnValue, success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="DeleteAgencyCommission" title="Code Example for calling DeleteAgencyCommission function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="DeleteAgencyCommission" title="Code Example for calling DeleteAgencyCommission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.RequestData> DeleteAgencyCommission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommission.RequestData>(proxy, proxy.DeleteAgencyCommission);
            return s;
        }
        ///<summary> Deletes the agency commission detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionId, AgencyCommissionDetailTypeId.</param>///<returns> The wrapper response containing Returnvalue, success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="DeleteAgencyCommissionDetail" title="Code Example for calling DeleteAgencyCommissionDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="DeleteAgencyCommissionDetail" title="Code Example for calling DeleteAgencyCommissionDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.RequestData> DeleteAgencyCommissionDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetail.RequestData>(proxy, proxy.DeleteAgencyCommissionDetail);
            return s;
        }
        ///<summary> Deletes the type of the agency commission detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionDetailTypeId.</param>///<returns> The wrapper response if successful </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveAgencyCommissionDetailType" title="Code Example for calling DeleteAgencyCommissionDetailType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveAgencyCommissionDetailType" title="Code Example for calling DeleteAgencyCommissionDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.RequestData> DeleteAgencyCommissionDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyCommissionDetailType.RequestData>(proxy, proxy.DeleteAgencyCommissionDetailType);
            return s;
        }
        ///<summary> Deletes the agency group. </summary>///<param name="request">A wrapper class for DeleteAgencyGroup Request Data containing the AgencyGroupId, NeedCountCheck and DeleteAgencyGroup As DCO.Policy.Agency.AgencyGroups values.</param>///<returns>A wrapper response object containing collection of IsAgencyExists value and AgencyGroups object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="DeleteAgencyGroup" title="Code Example for calling DeleteAgencyGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="DeleteAgencyGroup" title="Code Example for calling DeleteAgencyGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.RequestData> DeleteAgencyGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyGroup.RequestData>(proxy, proxy.DeleteAgencyGroup);
            return s;
        }
        ///<summary> Deletes a billing pay plan linked to an agency. </summary>///<param name="request">A wrapper class for DeletePayPlanLink Request Data containing the AgencyId and BillingPayPlanId value.</param>///<returns>A wrapper response.  Returns success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="DeleteAgencyPayPlanLink" title="Code Example for calling DeleteAgencyPayPlanLink function"></code></example>///<code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="DeleteAgencyPayPlanLink" title="Code Example for calling DeleteAgencyPayPlanLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.RequestData> DeleteAgencyPayPlanLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyPayPlanLink.RequestData>(proxy, proxy.DeleteAgencyPayPlanLink);
            return s;
        }
        ///<summary> Deletes the agency producer. </summary>///<param name="request">The wrapper request containing AgencyProducerId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyProducers.vb" region="DeleteAgencyProducer" title="Code Example for calling DeleteAgencyProducer function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyProducers.vb" region="DeleteAgencyProducer" title="Code Example for calling DeleteAgencyProducer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.RequestData> DeleteAgencyProducer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProducer.RequestData>(proxy, proxy.DeleteAgencyProducer);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.RequestData> DeleteAgencyProfile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyProfile.RequestData>(proxy, proxy.DeleteAgencyProfile);
            return s;
        }
        ///<summary> Deletes the agency reimbursement. </summary>///<param name="request">The wrapper request containing AgencyReimbursementId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="DeleteAgencyReimbursement" title="Code Example for calling DeleteAgencyReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="DeleteAgencyReimbursement" title="Code Example for calling DeleteAgencyReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.RequestData> DeleteAgencyReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencyReimbursement.RequestData>(proxy, proxy.DeleteAgencyReimbursement);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.RequestData> DeleteAgencySecondaryUnderwriter()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAgencySecondaryUnderwriter.RequestData>(proxy, proxy.DeleteAgencySecondaryUnderwriter);
            return s;
        }
        ///<summary> Delete an authority template. </summary>///<param name="request">A wrapper request containing the AuthorityTemplateId to delete.</param>///<returns> The wrapper response containing success/failure status. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.RequestData> DeleteAuthorityTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteAuthorityTemplate.RequestData>(proxy, proxy.DeleteAuthorityTemplate);
            return s;
        }
        ///<summary> Deletes the bank account. </summary>///<param name="request">The wrapper request containing BankAccountID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteBankAccount" title="Code Example for calling DeleteBankAccount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteBankAccount" title="Code Example for calling DeleteBankAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.RequestData> DeleteBankAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccount.RequestData>(proxy, proxy.DeleteBankAccount);
            return s;
        }
        ///<summary> Deletes the bank account company LNK. </summary>///<param name="request">The wrapper request containing BankAccountID, CompanyStateLobId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBankAccountCompanyLnk" title="Code Example for calling DeleteBankAccountCompanyLnk function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBankAccountCompanyLnk" title="Code Example for calling DeleteBankAccountCompanyLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.RequestData> DeleteBankAccountCompanyLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnk.RequestData>(proxy, proxy.DeleteBankAccountCompanyLnk);
            return s;
        }
        ///<summary> Deletes the bank account company LNK use. </summary>///<param name="request">The wrapper request containing BankAccountID, CompanyStateLobId, BankAccountUseID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBankAccountCompanyLnkUse" title="Code Example for calling DeleteBankAccountCompanyLnkUse function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBankAccountCompanyLnkUse" title="Code Example for calling DeleteBankAccountCompanyLnkUse function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.RequestData> DeleteBankAccountCompanyLnkUse()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBankAccountCompanyLnkUse.RequestData>(proxy, proxy.DeleteBankAccountCompanyLnkUse);
            return s;
        }
        ///<summary> Deletes the billing payplan bill method version. </summary>///<param name="request">The wrapper request containing BillingPayplanId, BillMethodVersionId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteBillingPayplanBillMethodVersion" title="Code Example for calling DeleteBillingPayplanBillMethodVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteBillingPayplanBillMethodVersion" title="Code Example for calling DeleteBillingPayplanBillMethodVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.RequestData> DeleteBillingPayplanBillMethodVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillingPayplanBillMethodVersion.RequestData>(proxy, proxy.DeleteBillingPayplanBillMethodVersion);
            return s;
        }
        ///<summary> Deletes the specified bill method version. </summary>///<param name="request">The wrapper request containing the BillMethodVersion.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBillMethodVersion" title="Code Example for calling DeleteBillMethodVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBillMethodVersion" title="Code Example for calling DeleteBillMethodVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.RequestData> DeleteBillMethodVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillMethodVersion.RequestData>(proxy, proxy.DeleteBillMethodVersion);
            return s;
        }
        ///<summary> Deletes the specified bill to version. </summary>///<param name="request">The wrapper request containing the BillToVersion.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBillToVersion" title="Code Example for calling DeleteBillToVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteBillToVersion" title="Code Example for calling DeleteBillToVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.RequestData> DeleteBillToVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBillToVersion.RequestData>(proxy, proxy.DeleteBillToVersion);
            return s;
        }
        ///<summary> Deletes the branch. </summary>///<param name="request">The wrapper request containing BranchRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteBranch" title="Code Example for calling DeleteBranch function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteBranch" title="Code Example for calling DeleteBranch function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.RequestData> DeleteBranch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteBranch.RequestData>(proxy, proxy.DeleteBranch);
            return s;
        }
        ///<summary> Deletes the type of the CBD user. </summary>///<param name="request">The wrapper request containing CBDUserTypeRecords.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="DeleteCBDUserType" title="Code Example for calling DeleteCBDUserType function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="DeleteCBDUserType" title="Code Example for calling DeleteCBDUserType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.RequestData> DeleteCBDUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCBDUserType.RequestData>(proxy, proxy.DeleteCBDUserType);
            return s;
        }
        ///<summary> Delete company setting/company link record </summary>///<param name="request"></param>///<returns> The wrapper response containing DeleteCompanySettingsCompanyLink </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.RequestData> DeleteCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompany.RequestData>(proxy, proxy.DeleteCompany);
            return s;
        }
        ///<summary> Delete company setting/company link record </summary>///<param name="request"></param>///<returns> The wrapper response containing DeleteCompanySettingsCompanyLink </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.RequestData> DeleteCompanySettingsCompanyLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanySettingsCompanyLink.RequestData>(proxy, proxy.DeleteCompanySettingsCompanyLink);
            return s;
        }
        ///<summary> Deletes the company state lob. </summary>///<param name="request">A request object containing CompanyStateLobID</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteCompanyStateLob" title="Code Example for calling DeleteCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteCompanyStateLob" title="Code Example for calling DeleteCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.RequestData> DeleteCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteCompanyStateLob.RequestData>(proxy, proxy.DeleteCompanyStateLob);
            return s;
        }
        ///<summary> Deletes the config authority. </summary>///<param name="request">The wrapper request containing ConfigAuthority.</param>///<returns>An empty response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthoritySetup.vb" region="DeleteConfigAuthority" title="Code Example for calling DeleteConfigAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthoritySetup.vb" region="DeleteConfigAuthority" title="Code Example for calling DeleteConfigAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.RequestData> DeleteConfigAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteConfigAuthority.RequestData>(proxy, proxy.DeleteConfigAuthority);
            return s;
        }
        ///<summary> Deletes the department. </summary>///<param name="request">The wrapper request containing DepartmentRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteDepartment" title="Code Example for calling DeleteDepartment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteDepartment" title="Code Example for calling DeleteDepartment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.RequestData> DeleteDepartment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDepartment.RequestData>(proxy, proxy.DeleteDepartment);
            return s;
        }
        ///<summary> Deletes the detail version. </summary>///<param name="request">The request.</param>///<returns>A response object containing boolean indicating success/failure of delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteDetailVersion" title="Code Example for calling deleteDetailVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteDetailVersion" title="Code Example for calling deleteDetailVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.RequestData> deleteDetailVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDetailVersion.RequestData>(proxy, proxy.deleteDetailVersion);
            return s;
        }
        ///<summary> Deletes the diamond user. </summary>///<param name="request">The wrapper request containing UserRecord.</param>///<returns> The wrapper response containing success indicator, ErrorMsg </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserSetupList.vb" region="DeleteDiamondUser" title="Code Example for calling DeleteDiamondUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserSetupList.vb" region="DeleteDiamondUser" title="Code Example for calling DeleteDiamondUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.RequestData> DeleteDiamondUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteDiamondUser.RequestData>(proxy, proxy.DeleteDiamondUser);
            return s;
        }
        ///<summary> Deletes the EFT account. </summary>///<param name="request">The wrapper request containing EftAccountId, IsValid.</param>///<returns>The wrapper response containing IsValid</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyEFT.vb" region="DeleteEFTAccount" title="Code Example for calling DeleteEFTAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyEFT.vb" region="DeleteEFTAccount" title="Code Example for calling DeleteEFTAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.RequestData> DeleteEFTAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEFTAccount.RequestData>(proxy, proxy.DeleteEFTAccount);
            return s;
        }
        ///<summary> Deletes the email. </summary>///<param name="request">The request containing AgencyId, EmailId, NameAddressSourceId.</param>///<returns> The wrapper response containing DeleteEmail </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteEmail" title="Code Example for calling DeleteEmail function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteEmail" title="Code Example for calling DeleteEmail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.RequestData> DeleteEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEmail.RequestData>(proxy, proxy.DeleteEmail);
            return s;
        }
        ///<summary> Deletes the employee. </summary>///<param name="request">The wrapper request containing EmployeeRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeSetup.vb" region="DeleteEmployee" title="Code Example for calling DeleteEmployee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeSetup.vb" region="DeleteEmployee" title="Code Example for calling DeleteEmployee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.RequestData> DeleteEmployee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteEmployee.RequestData>(proxy, proxy.DeleteEmployee);
            return s;
        }
        ///<summary> Deletes the holiday. </summary>///<param name="request">The wrapper request containing Holiday.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="DeleteHoliday" title="Code Example for calling DeleteHoliday function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="DeleteHoliday" title="Code Example for calling DeleteHoliday function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.RequestData> DeleteHoliday()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteHoliday.RequestData>(proxy, proxy.DeleteHoliday);
            return s;
        }
        ///<summary> Deletes the hurricane blackout dates. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing HurricaneBlackoutDates </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="DeleteHurricaneBlackoutDates" title="Code Example for calling DeleteHurricaneBlackoutDates function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="DeleteHurricaneBlackoutDates" title="Code Example for calling DeleteHurricaneBlackoutDates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.RequestData> DeleteHurricaneBlackoutDates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteHurricaneBlackoutDates.RequestData>(proxy, proxy.DeleteHurricaneBlackoutDates);
            return s;
        }
        ///<summary> Deletes the lob. </summary>///<param name="request">The wrapper request containing AgencyID, CompanyID, StateID, LobID.</param>///<returns> The wrapper response containing DeleteLob </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="DeleteLob" title="Code Example for calling DeleteLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="DeleteLob" title="Code Example for calling DeleteLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLob.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLob.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLob.RequestData> DeleteLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLob.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLob.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLob.RequestData>(proxy, proxy.DeleteLob);
            return s;
        }
        ///<summary> Deletes the lockbox address company state lob LNK. </summary>///<param name="request">The wrapper request containing LockBoxAddressID, CompanyStateLobId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLockboxAddressCompanyStateLobLnk" title="Code Example for calling DeleteLockboxAddressCompanyStateLobLnk function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLockboxAddressCompanyStateLobLnk" title="Code Example for calling DeleteLockboxAddressCompanyStateLobLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.RequestData> DeleteLockboxAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddress.RequestData>(proxy, proxy.DeleteLockboxAddress);
            return s;
        }
        ///<summary> Deletes the lockbox address company state lob LNK. </summary>///<param name="request">The wrapper request containing LockBoxAddressID, CompanyStateLobId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLockboxAddressCompanyStateLobLnk" title="Code Example for calling DeleteLockboxAddressCompanyStateLobLnk function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLockboxAddressCompanyStateLobLnk" title="Code Example for calling DeleteLockboxAddressCompanyStateLobLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.RequestData> DeleteLockboxAddressCompanyStateLobLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteLockboxAddressCompanyStateLobLnk.RequestData>(proxy, proxy.DeleteLockboxAddressCompanyStateLobLnk);
            return s;
        }
        ///<summary> Deletes the NotesType. </summary>///<param name="request">The wrapper request containing Notes Type.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeSetup.vb" region="DeleteNotesType" title="Code Example for calling DeleteNotesType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeSetup.vb" region="DeleteNotesType" title="Code Example for calling DeleteNotesType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.RequestData> DeleteNotesType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteNotesType.RequestData>(proxy, proxy.DeleteNotesType);
            return s;
        }
        ///<summary> Deletes the other carrier. </summary>///<param name="request">The wrapper request containing OtherCarrierId, AgencyId.</param>///<returns> The wrapper response containing DeleteOtherCarrier </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="DeleteOtherCarrier1" title="Code Example for calling DeleteOtherCarrier function using OtherCarrierId and AgencyId"></code>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyOtherCarrierSetup.vb" region="DeleteOtherCarrier2" title="Code Example for calling DeleteOtherCarrier function using OtherCarrierId"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="DeleteOtherCarrier1" title="Code Example for calling DeleteOtherCarrier function using OtherCarrierId and AgencyId"></code>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyOtherCarrierSetup.vb" region="DeleteOtherCarrier2" title="Code Example for calling DeleteOtherCarrier function using OtherCarrierId"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.RequestData> DeleteOtherCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrier.RequestData>(proxy, proxy.DeleteOtherCarrier);
            return s;
        }
        ///<summary> Deletes the other carrier from agency. </summary>///<param name="request">The wrapper request containing AgencyId, NameId.</param>///<returns> The wrapper response containing DeleteOtherCarrierFromAgency </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteOtherCarrierFromAgency" title="Code Example for calling DeleteOtherCarrierFromAgency function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteOtherCarrierFromAgency" title="Code Example for calling DeleteOtherCarrierFromAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.RequestData> DeleteOtherCarrierFromAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteOtherCarrierFromAgency.RequestData>(proxy, proxy.DeleteOtherCarrierFromAgency);
            return s;
        }
        ///<summary> Deletes the pay plan installment. </summary>///<param name="request">The wrapper request containing BillingPayPlanInstallmentNum, BillingPayPlanId.</param>///<returns>The wrapper respone containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="DeletePayPlanInstallment" title="Code Example for calling DeletePayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="DeletePayPlanInstallment" title="Code Example for calling DeletePayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.RequestData> DeletePayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayplan.RequestData>(proxy, proxy.DeletePayPlan);
            return s;
        }
        ///<summary> Deletes a pay plan from the CSL </summary>///<param name="request">The wrapper request containing the pay plan and CSL</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeletePayPlanFromCSL" title="Code Example for calling DeletePayPlanFromCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeletePayPlanFromCSL" title="Code Example for calling DeletePayPlanFromCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.RequestData> DeletePayPlanFromCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanFromCSL.RequestData>(proxy, proxy.DeletePayPlanFromCSL);
            return s;
        }
        ///<summary> Deletes the pay plan installment. </summary>///<param name="request">The wrapper request containing BillingPayPlanInstallmentNum, BillingPayPlanId.</param>///<returns>The wrapper respone containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="DeletePayPlanInstallment" title="Code Example for calling DeletePayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="DeletePayPlanInstallment" title="Code Example for calling DeletePayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.RequestData> DeletePayPlanInstallment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayPlanInstallment.RequestData>(proxy, proxy.DeletePayPlanInstallment);
            return s;
        }
        ///<summary> Deletes payroll deduction information for the given employer id </summary>///<param name="request">The wrapper request containing employer id</param>///<returns> The wrapper response containing PayrollDeductionEmployer records </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\PayrollDeductionSetup\PayrollDeductionEmployerSetup.vb" region="DeletePayrollDeductionEmployer" title="Code Example for calling DeletePayrollDeductionEmployer function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\PayrollDeductionSetup\PayrollDeductionEmployerSetup.vb" region="DeletePayrollDeductionEmployer" title="Code Example for calling DeletePayrollDeductionEmployer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.RequestData> DeletePayrollDeductionEmployer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePayrollDeductionEmployer.RequestData>(proxy, proxy.DeletePayrollDeductionEmployer);
            return s;
        }
        ///<summary> Deletes the Policy Term Version. </summary>///<param name="request">The wrapper request containing PolicyTermVersionId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLob.vb" region="DeletePolicyTermVersion" title="Code Example for calling DeletePolicyTermVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLob.vb" region="DeletePolicyTermVersion" title="Code Example for calling DeletePolicyTermVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.RequestData> DeletePolicyTermVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeletePolicyTermVersion.RequestData>(proxy, proxy.DeletePolicyTermVersion);
            return s;
        }
        ///<summary> Deletes the rating version. </summary>///<param name="request">The wrapper request containing RatingVersionId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteRatingVersion" title="Code Example for calling DeleteRatingVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteRatingVersion" title="Code Example for calling DeleteRatingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.RequestData> DeleteRatingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteRatingVersion.RequestData>(proxy, proxy.DeleteRatingVersion);
            return s;
        }
        ///<summary> Deletes the reimbursement. </summary>///<param name="request">The wrapper request containing Reimbursement.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteReimbursement" title="Code Example for calling DeleteReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteReimbursement" title="Code Example for calling DeleteReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.RequestData> DeleteReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReimbursement.RequestData>(proxy, proxy.DeleteReimbursement);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.RequestData> DeleteReinstatementRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinstatementRule.RequestData>(proxy, proxy.DeleteReinstatementRule);
            return s;
        }
        ///<summary> Deletes the reinsurance. </summary>///<param name="request">The wrapper request containing reinsurancetreatyId.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="DeleteReinsurance" title="Code Example for calling DeleteReinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="DeleteReinsurance" title="Code Example for calling DeleteReinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.RequestData> DeleteReinsurance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurance.RequestData>(proxy, proxy.DeleteReinsurance);
            return s;
        }
        ///<summary> Deletes the reinsurance company broker. </summary>///<param name="request">The wrapper request containing reinsurancecompanybrokerId.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceCompanyBroker.vb" region="DeleteReinsuranceCompanyBroker" title="Code Example for calling DeleteReinsuranceCompanyBroker function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceCompanyBroker.vb" region="DeleteReinsuranceCompanyBroker" title="Code Example for calling DeleteReinsuranceCompanyBroker function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.RequestData> DeleteReinsuranceCompanyBroker()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurerCompanyBroker.RequestData>(proxy, proxy.DeleteReinsuranceCompanyBroker);
            return s;
        }
        ///<summary> Deletes the reinsurance policy. </summary>///<param name="request">The wrapper request containing reinsurancepolicyId.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsurancePolicy.vb" region="DeleteReinsurancePolicy" title="Code Example for calling DeleteReinsurancePolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsurancePolicy.vb" region="DeleteReinsurancePolicy" title="Code Example for calling DeleteReinsurancePolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.RequestData> DeleteReinsurancePolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReinsurancePolicy.RequestData>(proxy, proxy.DeleteReinsurancePolicy);
            return s;
        }
        ///<summary> Deletes the renewal roll on. </summary>///<param name="request">The wrapper request containing CoverageCodeVersionId, AgencyId, ConnectionTypeID.</param>///<returns> The wrapper response containing DeleteRenewalRollOn </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="DeleteRenewalRollOn" title="Code Example for calling DeleteRenewalRollOn function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="DeleteRenewalRollOn" title="Code Example for calling DeleteRenewalRollOn function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.RequestData> DeleteRenewalRollOn()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteRenewalRollOn.RequestData>(proxy, proxy.DeleteRenewalRollOn);
            return s;
        }
        ///<summary> Deletes the report. </summary>///<param name="request">The wrapper request containing Report.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="DeleteReport" title="Code Example for calling DeleteReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="DeleteReport" title="Code Example for calling DeleteReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReport.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReport.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReport.RequestData> DeleteReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteReport.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteReport.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteReport.RequestData>(proxy, proxy.DeleteReport);
            return s;
        }
        ///<summary> Delete a security group. </summary>///<param name="request">A wrapper request containing the SecurityGroupId to delete.</param>///<returns> The wrapper response containing success/failure status. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.RequestData> DeleteSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteSecurityGroup.RequestData>(proxy, proxy.DeleteSecurityGroup);
            return s;
        }
        ///<summary> Deletes the holiday. </summary>///<param name="request">The wrapper request containing Holiday.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="DeleteHoliday" title="Code Example for calling DeleteHoliday function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="DeleteHoliday" title="Code Example for calling DeleteHoliday function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.RequestData> DeleteStateHoliday()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteStateHoliday.RequestData>(proxy, proxy.DeleteStateHoliday);
            return s;
        }
        ///<summary> Deletes the specified transaction reason item that has been setup to only be viewable for the associated user category. </summary>///<param name="request">The wrapper request object containing the item to delete.</param>///<returns>The wrapper response object the Success flag and the item that has been successfully deleted.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.RequestData> DeleteTransactionReasonViewableByUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteTransactionReasonViewableByUserCategory.RequestData>(proxy, proxy.DeleteTransactionReasonViewableByUserCategory);
            return s;
        }
        ///<summary> Deletes the underwriting version. </summary>///<param name="request">The wrapper request containing UnderwritingVersion.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteUnderwritingVersion" title="Code Example for calling DeleteUnderwritingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="DeleteUnderwritingVersion" title="Code Example for calling DeleteUnderwritingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.RequestData> DeleteUnderwritingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUnderwritingVersion.RequestData>(proxy, proxy.DeleteUnderwritingVersion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.RequestData> DeleteUserSecurityQuestion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUserSecurityQuestion.RequestData>(proxy, proxy.DeleteUserSecurityQuestion);
            return s;
        }
        ///<summary> Deletes the type of the user. </summary>///<param name="request">The wrapper request containing UserTypeRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteUserType" title="Code Example for calling DeleteUserType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="DeleteUserType" title="Code Example for calling DeleteUserType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.RequestData> DeleteUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteUserType.RequestData>(proxy, proxy.DeleteUserType);
            return s;
        }
        ///<summary> Deletes the workflow queue. </summary>///<param name="request">The wrapper request containing WorkflowQueue.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="DeleteWorkflowQueue" title="Code Example for calling DeleteWorkflowQueue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="DeleteWorkflowQueue" title="Code Example for calling DeleteWorkflowQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.RequestData> DeleteWorkflowQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.Request, Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.Response, Diamond.Common.Services.Messages.AdministrationService.DeleteWorkflowQueue.RequestData>(proxy, proxy.DeleteWorkflowQueue);
            return s;
        }
        ///<summary> Exports the pay plan. </summary>///<param name="request">A request object containing nothing.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ExportPayPlan" title="Code Example for calling ExportPayPlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ExportPayPlan" title="Code Example for calling ExportPayPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.RequestData> ExportPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.ExportPayPlan.RequestData>(proxy, proxy.ExportPayPlan);
            return s;
        }
        ///<summary> Loads the agency's current balance. </summary>///<param name="request">The wrapper request containing Id.</param>///<returns> The wrapper response containing Balance </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyBalance" title="Code Example for calling GetAgencyBalance function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyBalance" title="Code Example for calling GetAgencyBalance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.Request, Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.Response, Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.RequestData> GetAgencyBalance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.Request, Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.Response, Diamond.Common.Services.Messages.AdministrationService.GetAgencyBalance.RequestData>(proxy, proxy.GetAgencyBalance);
            return s;
        }
        ///<summary> Gets the identifier for the <see cref="P:Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.RequestData.AgencyCode" /> provided in the <c>request</c>. </summary>///<see cref="P:Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.RequestData.AgencyCode" />///<c>request</c>///<param name="request">The wrapper request containing the <c>Agency Code</c> to identify.</param>///<c>Agency Code</c>///<returns>A wrapper response containing the <c>AgencyId</c> if one is associated with the provided agency code.</returns>///<c>AgencyId</c>///<remarks> This method optionally searches the code configured in the <c>Agency</c> table as well as the <c>AgencyCodeList</c> table. </remarks>///<c>Agency</c>///<c>AgencyCodeList</c>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.Request, Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.Response, Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.RequestData> GetAgencyIdByAgencyCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.Request, Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.Response, Diamond.Common.Services.Messages.AdministrationService.GetAgencyIdByAgencyCode.RequestData>(proxy, proxy.GetAgencyIdByAgencyCode);
            return s;
        }
        ///<summary> Gets the max model ISO count. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Count</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMaxModelISOCount" title="Code Example for calling GetMaxModelISOCount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMaxModelISOCount" title="Code Example for calling GetMaxModelISOCount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.Request, Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.Response, Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.RequestData> GetMaxModelISOCount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.Request, Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.Response, Diamond.Common.Services.Messages.AdministrationService.GetMaxModelISOCount.RequestData>(proxy, proxy.GetMaxModelISOCount);
            return s;
        }
        ///<summary> Gets the version by company state LOB. </summary>///<param name="request">A wrapper class for Request Data containing the Companyid, StateId and LobId values.</param>///<returns>A wrapper response object containing collection of AgencyVersionByCompanyStateLob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="GetVersionByCompanyStateLOB" title="Code Example for calling GetVersionByCompanyStateLOB function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="GetVersionByCompanyStateLOB" title="Code Example for calling GetVersionByCompanyStateLOB function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.RequestData> GetVersionByCompanyStateLOB()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.GetVersionByCompanyStateLOB.RequestData>(proxy, proxy.GetVersionByCompanyStateLOB);
            return s;
        }
        ///<summary> Determines whether [is queue assigned to user or agency] [the specified request]. </summary>///<param name="request">The wrapper request containing QueueId.</param>///<returns> The wrapper response containing IsQueueAssignedToUserOrAgency </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="IsQueueAssignedToUserOrAgency" title="Code Example for calling IsQueueAssignedToUserOrAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="IsQueueAssignedToUserOrAgency" title="Code Example for calling IsQueueAssignedToUserOrAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.Request, Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.Response, Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.RequestData> IsQueueAssignedToUserOrAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.Request, Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.Response, Diamond.Common.Services.Messages.AdministrationService.IsQueueAssignedToUserOrAgency.RequestData>(proxy, proxy.IsQueueAssignedToUserOrAgency);
            return s;
        }
        ///<summary> Loads the active users. </summary>///<param name="request">The wrapper request containing UserID.</param>///<returns> The wrapper response containing ActiveUsers </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadActiveUsers" title="Code Example for calling LoadActiveUsers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadActiveUsers" title="Code Example for calling LoadActiveUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.RequestData> LoadActiveUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadActiveUsers.RequestData>(proxy, proxy.LoadActiveUsers);
            return s;
        }
        ///<summary> Loads the add forms version. </summary>///<param name="request">The wrapper request containing VersionID, AddFormsVersionId.</param>///<returns> The wrapper response containing AddFormsVersion </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadAddFormsVersion" title="Code Example for calling LoadAddFormsVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadAddFormsVersion" title="Code Example for calling LoadAddFormsVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.RequestData> LoadAddFormsVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAddFormsVersion.RequestData>(proxy, proxy.LoadAddFormsVersion);
            return s;
        }
        ///<summary> Loads the admin MH park. </summary>///<param name="request">The wrapper request containing ParkNumber, Dates.</param>///<returns>The wrapper response containing MHPark</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkList.vb" region="LoadAdminMHPark" title="Code Example for calling LoadAdminMHPark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkList.vb" region="LoadAdminMHPark" title="Code Example for calling LoadAdminMHPark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.RequestData> LoadAdminMHPark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAdminMHPark.RequestData>(proxy, proxy.LoadAdminMHPark);
            return s;
        }
        ///<summary> Loads the agency. </summary>///<param name="request">A wrapper class for LoadAgency Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of Agency object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="LoadAgency" title="Code Example for calling LoadAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="LoadAgency" title="Code Example for calling LoadAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.RequestData> LoadAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.RequestData>(proxy, proxy.LoadAgency);
            return s;
        }
        ///<summary> Loads the multiple agency book transfer Plans. </summary>///<param name="request">A wrapper class for LoadAgencyBookTransferPlans Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencyBookTransfer object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanForm.vb" region="LoadAgencyBookTransferPlans" title="Code Example for calling LoadAgencyBookTransferPlans function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanForm.vb" region="LoadAgencyBookTransferPlans" title="Code Example for calling LoadAgencyBookTransferPlans function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.RequestData> LoadAgencyBookTransferPlans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPlans.RequestData>(proxy, proxy.LoadAgencyBookTransferPlans);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.RequestData> LoadAgencyBookTransferPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransferPolicies.RequestData>(proxy, proxy.LoadAgencyBookTransferPolicies);
            return s;
        }
        ///<summary> Loads the agency book transfers. </summary>///<param name="request">A wrapper class for LoadAgencyBookTransfers Request Data containing the CompanyId, StateId, LobId and AgencyId values.</param>///<returns>A wrapper response object containing collection of AgencyBookTransfer object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferForm.vb" region="LoadAgencyBookTransfers" title="Code Example for calling LoadAgencyBookTransfers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferForm.vb" region="LoadAgencyBookTransfers" title="Code Example for calling LoadAgencyBookTransfers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.RequestData> LoadAgencyBookTransfers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyBookTransfers.RequestData>(proxy, proxy.LoadAgencyBookTransfers);
            return s;
        }
        ///<summary> Loads a list of agency codes.  The optional <c>agency id</c> provided filters this list to a specific agency. </summary>///<c>agency id</c>///<param name="request">The wrapper request containing the optional AgencyId.</param>///<returns>The wrapper response containing a list of agency codes configured in Diamond;  the list is filtered to the <c>agency id</c> in the <see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" /> if a value other than <c>0</c> is provided.</returns>///<c>agency id</c>///<see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" />///<c>0</c>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.RequestData> LoadAgencyCodeList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCodeList.RequestData>(proxy, proxy.LoadAgencyCodeList);
            return s;
        }
        ///<summary> Loads the agency commission. </summary>///<param name="request">A wrapper class for LoadAgencyCommission Request Data containing the AgencyId and CompanyStateLobId values.</param>///<returns>A wrapper response object containing collection of AgencyCommission object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCommission" title="Code Example for calling LoadAgencyCommission function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCommission" title="Code Example for calling LoadAgencyCommission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.RequestData> LoadAgencyCommission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommission.RequestData>(proxy, proxy.LoadAgencyCommission);
            return s;
        }
        ///<summary> Loads the agency commission detail. </summary>///<param name="request">A wrapper class for LoadAgencyCommissionDetail Request Data containing the AgencyId, CompanyStateLobId, AgencyCommisionId values.</param>///<returns>A wrapper response object containing collection of AgencyCommissionDetail object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCommissionDetail" title="Code Example for calling LoadAgencyCommissionDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCommissionDetail" title="Code Example for calling LoadAgencyCommissionDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.RequestData> LoadAgencyCommissionDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetail.RequestData>(proxy, proxy.LoadAgencyCommissionDetail);
            return s;
        }
        ///<summary> Loads the type of the agency commission detail. </summary>///<param name="request">The wrapper request containing CompanyStateLobId.</param>///<returns> The wrapper response containing AgencyCommissionsDetailType </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadAgencyCommissionDetailType" title="Code Example for calling LoadAgencyCommissionDetailType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadAgencyCommissionDetailType" title="Code Example for calling LoadAgencyCommissionDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.RequestData> LoadAgencyCommissionDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCommissionDetailType.RequestData>(proxy, proxy.LoadAgencyCommissionDetailType);
            return s;
        }
        ///<summary> Loads the agency company state lob. </summary>///<param name="request">A wrapper class for LoadAgencyCompanyStateLob Request Data containing the AgencyId, CompanyId, StateId and LobId values.</param>///<returns>A wrapper response object containing collection of AgencyCompanyStateLob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCompanyStateLob" title="Code Example for calling LoadAgencyCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyCommission.vb" region="LoadAgencyCompanyStateLob" title="Code Example for calling LoadAgencyCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.RequestData> LoadAgencyCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyCompanyStateLob.RequestData>(proxy, proxy.LoadAgencyCompanyStateLob);
            return s;
        }
        ///<summary> Loads the agency EFT. </summary>///<param name="request">A wrapper class for LoadAgencyEFT Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencyEftListItem object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyEFT" title="Code Example for calling LoadAgencyEFT function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyEFT" title="Code Example for calling LoadAgencyEFT function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.RequestData> LoadAgencyEFT()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEFT.RequestData>(proxy, proxy.LoadAgencyEFT);
            return s;
        }
        ///<summary> Loads the agency email link. </summary>///<param name="request">The wrapper request containing AgencyId, EmailId, NameAddressSourceId.</param>///<returns> The wrapper response containing LoadAgencyEmailLink </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyEmailLink" title="Code Example for calling LoadAgencyEmailLink function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyEmailLink" title="Code Example for calling LoadAgencyEmailLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.RequestData> LoadAgencyEmailLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyEmailLink.RequestData>(proxy, proxy.LoadAgencyEmailLink);
            return s;
        }
        ///<summary> Loads the agency experience. </summary>///<param name="request">A wrapper class for LoadAgencyExperience Request Data containing the AgencyId, Month, Year values.</param>///<returns>A wrapper response object containing collection of AgencyExperience object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyExperience.vb" region="LoadAgencyExperience" title="Code Example for calling LoadAgencyExperience function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyExperience.vb" region="LoadAgencyExperience" title="Code Example for calling LoadAgencyExperience function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.RequestData> LoadAgencyExperience()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.RequestData>(proxy, proxy.LoadAgencyExperience);
            return s;
        }
        ///<summary> Loads the agency experience. </summary>///<param name="request">A wrapper class for LoadAgencyExperiencePerDate Request Data containing the AgencyId, Month, Year values.</param>///<returns> A wrapper response object containing collection of AgencyExperience object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyExperience.vb" region="LoadAgencyExperience" title="Code Example for calling LoadAgencyExperiencePerDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyExperience.vb" region="LoadAgencyExperience" title="Code Example for calling LoadAgencyExperiencePerDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.RequestData> LoadAgencyExperiencePerDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyExperience.RequestData>(proxy, proxy.LoadAgencyExperiencePerDate);
            return s;
        }
        ///<summary> Loads the agency group address. </summary>///<param name="request">A wrapper class for LoadAgencyGroupAddress Request Data containing the AgencyGroupId and Addresss values.</param>///<returns>A wrapper response object containing collection of Address object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyGroupAddress" title="Code Example for calling LoadAgencyGroupAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyGroupAddress" title="Code Example for calling LoadAgencyGroupAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.RequestData> LoadAgencyGroupAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupAddress.RequestData>(proxy, proxy.LoadAgencyGroupAddress);
            return s;
        }
        ///<summary> Loads the agency groups. </summary>///<param name="request">A wrapper class for LoadAgencyGroups Request Data containing the AgencyGroupId and Description values.</param>///<returns>A wrapper response object containing collection of AgencyGroup object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="LoadAgencyGroups" title="Code Example for calling LoadAgencyGroups function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGroupSetup.vb" region="LoadAgencyGroups" title="Code Example for calling LoadAgencyGroups function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.RequestData> LoadAgencyGroups()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroups.RequestData>(proxy, proxy.LoadAgencyGroups);
            return s;
        }
        ///<summary> Loads the agency group setup. </summary>///<param name="request">A wrapper class for LoadAgencyGroupSetup no request Data.</param>///<returns>A wrapper response object containing collection of AgencyGroups object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyGroupSetup" title="Code Example for calling LoadAgencyGroupSetup function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyGroupSetup" title="Code Example for calling LoadAgencyGroupSetup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.RequestData> LoadAgencyGroupSetup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyGroupSetup.RequestData>(proxy, proxy.LoadAgencyGroupSetup);
            return s;
        }
        ///<summary> Loads the agency lob. </summary>///<param name="request">A wrapper class for LoadAgencyLob Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencyLob object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyLob" title="Code Example for calling LoadAgencyLob function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyLob" title="Code Example for calling LoadAgencyLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.RequestData> LoadAgencyLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyLob.RequestData>(proxy, proxy.LoadAgencyLob);
            return s;
        }
        ///<summary> Loads the name of the agency. </summary>///<param name="request">A wrapper class for LoadAgencyName Request Data containing the AgencyId, NameAddressSourceId values.</param>///<returns>A wrapper response object containing collection of Name object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyName" title="Code Example for calling LoadAgencyName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyName" title="Code Example for calling LoadAgencyName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.RequestData> LoadAgencyName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyName.RequestData>(proxy, proxy.LoadAgencyName);
            return s;
        }
        ///<summary> Loads the agency other carrier. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value</param>///<returns>A wrapper response object containing collection of AgencyOtherCarrierListItem object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="LoadAgencyOtherCarrier" title="Code Example for calling LoadAgencyOtherCarrier function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="LoadAgencyOtherCarrier" title="Code Example for calling LoadAgencyOtherCarrier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.RequestData> LoadAgencyOtherCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyOtherCarrier.RequestData>(proxy, proxy.LoadAgencyOtherCarrier);
            return s;
        }
        ///<summary> Loads the agency pay plan. </summary>///<param name="request">A wrapper class for LoadAgencyPayPlan Request Data containing the PayPlanId, PayPlanDescription values.</param>///<returns>A wrapper response object containing collection of AgencyLOBPayPlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyPayPlan" title="Code Example for calling LoadAgencyPayPlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyPayPlan" title="Code Example for calling LoadAgencyPayPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.RequestData> LoadAgencyPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPayPlan.RequestData>(proxy, proxy.LoadAgencyPayPlan);
            return s;
        }
        ///<summary> Loads the ASR agency. </summary>///<param name="request">The wrapper request containing UserId.</param>///<returns> The wrapper response containing LoadASRAgency </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyPersonnel.vb" region="LoadAgencyPersonnel" title="Code Example for calling LoadAgencyPersonnel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyPersonnel.vb" region="LoadAgencyPersonnel" title="Code Example for calling LoadAgencyPersonnel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.RequestData> LoadAgencyPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPersonnel.RequestData>(proxy, proxy.LoadAgencyPersonnel);
            return s;
        }
        ///<summary> Loads the agency printer types. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing PrinterTypes </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyPrinterTypes" title="Code Example for calling LoadAgencyPrinterTypes function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgencyPrinterTypes" title="Code Example for calling LoadAgencyPrinterTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.RequestData> LoadAgencyPrinterTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyPrinterTypes.RequestData>(proxy, proxy.LoadAgencyPrinterTypes);
            return s;
        }
        ///<summary> Loads the agency producers. </summary>///<param name="request">The wrapper request containing AgencyId.</param>///<returns> The wrapper response containing AgencyProducers </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyProducers.vb" region="LoadAgencyProducers" title="Code Example for calling LoadAgencyProducers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyProducers.vb" region="LoadAgencyProducers" title="Code Example for calling LoadAgencyProducers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.RequestData> LoadAgencyProducers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProducers.RequestData>(proxy, proxy.LoadAgencyProducers);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.RequestData> LoadAgencyProfile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyProfile.RequestData>(proxy, proxy.LoadAgencyProfile);
            return s;
        }
        ///<summary> Loads the agency reimbursement. </summary>///<param name="request">The wrapper request containing AgencyId, CompanyStateLobId.</param>///<returns> The wrapper response containing LoadAgencyReimbursement </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="LoadAgencyReimbursement" title="Code Example for calling LoadAgencyReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="LoadAgencyReimbursement" title="Code Example for calling LoadAgencyReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.RequestData> LoadAgencyReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyReimbursement.RequestData>(proxy, proxy.LoadAgencyReimbursement);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.RequestData> LoadAgencySecondaryUnderwriter()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySecondaryUnderwriter.RequestData>(proxy, proxy.LoadAgencySecondaryUnderwriter);
            return s;
        }
        ///<summary> Loads the agency setup. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AgencySetup </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="LoadAgencySetup" title="Code Example for calling LoadAgencySetup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyInfoForm.vb" region="LoadAgencySetup" title="Code Example for calling LoadAgencySetup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.RequestData> LoadAgencySetup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencySetup.RequestData>(proxy, proxy.LoadAgencySetup);
            return s;
        }
        ///<summary> Loads a list of agency users that are viewable using the credentials of the specified user. </summary>///<param name="request">The wrapper request containing user id, user status type, user agency relation type and login name.</param>///<returns>The wrapper response containing the list of agency users.</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Administration\User\EditAgencyUsers.ascx.vb" region="LoadAgencyUserList" title="Code Example for calling LoadAgencyUserList function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Administration\User\EditAgencyUsers.ascx.vb" region="LoadAgencyUserList" title="Code Example for calling LoadAgencyUserList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.RequestData> LoadAgencyUserList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserList.RequestData>(proxy, proxy.LoadAgencyUserList);
            return s;
        }
        ///<summary> Loads the name of the user. </summary>///<param name="request">The wrapper request containing UserId, UserCategoryId.</param>///<returns> The wrapper response containing UserEmployeeLink </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserName" title="Code Example for calling LoadUserName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserName" title="Code Example for calling LoadUserName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.RequestData> LoadAgencyUserName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyUserName.RequestData>(proxy, proxy.LoadAgencyUserName);
            return s;
        }
        ///<summary> Loads the agency workflow queues. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencyQueue object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyWorkflowQueues.vb" region="LoadAgencyWorkflowQueues" title="Code Example for calling LoadAgencyWorkflowQueues function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyWorkflowQueues.vb" region="LoadAgencyWorkflowQueues" title="Code Example for calling LoadAgencyWorkflowQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.RequestData> LoadAgencyWorkflowQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgencyWorkflowQueues.RequestData>(proxy, proxy.LoadAgencyWorkflowQueues);
            return s;
        }
        ///<summary> Loads the type of the agy comm detail. </summary>///<param name="request">The wrapper request containing CompanyStateLobId.</param>///<returns> The wrapper response containing DetailType </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgyCommDetailType" title="Code Example for calling LoadAgyCommDetailType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAgyCommDetailType" title="Code Example for calling LoadAgyCommDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.RequestData> LoadAgyCommDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgyCommDetailType.RequestData>(proxy, proxy.LoadAgyCommDetailType);
            return s;
        }
        ///<summary> Loads all agencies. </summary>///<param name="request">A wrapper class for LoadAgency Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of Agency object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadAllAgencies" title="Code Example for calling LoadAllAgencies function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadAllAgencies" title="Code Example for calling LoadAllAgencies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.RequestData> LoadAllAgencies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllAgencies.RequestData>(proxy, proxy.LoadAllAgencies);
            return s;
        }
        ///<summary> Loads all the authorities for a specified user. </summary>///<param name="request">The wrapper request containing the UsersId.</param>///<returns> The wrapper response containing the user's authorities. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAllAuthorities" title="Code Example for calling LoadUsersAuthorities function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAllAuthorities" title="Code Example for calling LoadUsersAuthorities function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.RequestData> LoadAllAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllAuthorities.RequestData>(proxy, proxy.LoadAllAuthorities);
            return s;
        }
        ///<summary> Loads all bank account company LNK. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AllBankAccountCompanyLnk </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllBankAccountCompanyLnk" title="Code Example for calling LoadAllBankAccountCompanyLnk function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllBankAccountCompanyLnk" title="Code Example for calling LoadAllBankAccountCompanyLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.RequestData> LoadAllBankAccountCompanyLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountCompanyLnk.RequestData>(proxy, proxy.LoadAllBankAccountCompanyLnk);
            return s;
        }
        ///<summary> Loads all bank account lockbox address LNK. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AllBankAccountLockboxAddressLnk </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllBankAccountLockboxAddressLnk" title="Code Example for calling LoadAllBankAccountLockboxAddressLnk function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllBankAccountLockboxAddressLnk" title="Code Example for calling LoadAllBankAccountLockboxAddressLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.RequestData> LoadAllBankAccountLockboxAddressLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccountLockboxAddressLnk.RequestData>(proxy, proxy.LoadAllBankAccountLockboxAddressLnk);
            return s;
        }
        ///<summary> Loads all bank accounts. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing LoadAllBankAccounts </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyBankAccountForm.vb" region="LoadAllBankAccounts" title="Code Example for calling LoadAllBankAccounts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyBankAccountForm.vb" region="LoadAllBankAccounts" title="Code Example for calling LoadAllBankAccounts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.RequestData> LoadAllBankAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankAccounts.RequestData>(proxy, proxy.LoadAllBankAccounts);
            return s;
        }
        ///<summary> Loads all bank lockbox address LNK. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing LoadAllBankLockboxAddressLnk </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyStateLobLockboxAddressForm.vb" region="LoadAllBankLockboxAddressLnk" title="Code Example for calling LoadAllBankLockboxAddressLnk function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyStateLobLockboxAddressForm.vb" region="LoadAllBankLockboxAddressLnk" title="Code Example for calling LoadAllBankLockboxAddressLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.RequestData> LoadAllBankLockboxAddressLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBankLockboxAddressLnk.RequestData>(proxy, proxy.LoadAllBankLockboxAddressLnk);
            return s;
        }
        ///<summary> Loads all branches by CompanyId or BranchId </summary>///<param name="request">The wrapper request containing BranchId, CompanyId.</param>///<returns> The wrapper response containing AllBranchesRecord </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllBranches1" title="Code Example for calling LoadAllBranches function using CompanyId"></code>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllBranches2" title="Code Example for calling LoadAllBranches function using BranchId"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllBranches1" title="Code Example for calling LoadAllBranches function using CompanyId"></code>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllBranches2" title="Code Example for calling LoadAllBranches function using BranchId"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.RequestData> LoadAllBranches()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllBranches.RequestData>(proxy, proxy.LoadAllBranches);
            return s;
        }
        ///<summary> Loads all company state lob. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing AllCompanyStateLob </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllCompanyStateLob" title="Code Example for calling LoadAllCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllCompanyStateLob" title="Code Example for calling LoadAllCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.RequestData> LoadAllCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompany.RequestData>(proxy, proxy.LoadAllCompany);
            return s;
        }
        ///<summary> Loads all company state lob. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing AllCompanyStateLob </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllCompanyStateLob" title="Code Example for calling LoadAllCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllCompanyStateLob" title="Code Example for calling LoadAllCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.RequestData> LoadAllCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllCompanyStateLob.RequestData>(proxy, proxy.LoadAllCompanyStateLob);
            return s;
        }
        ///<summary> Loads all departments. </summary>///<param name="request">The wrapper request containing BranchId, DepartmentId.</param>///<returns> The wrapper response containing AllDepartmentsRecords </returns>///<remarks> Can retrieve departments based on BranchId or DepartmentId </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllDepartmentsByBranchId" title="Code Example for calling LoadAllDepartments function using BranchId"></code>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllDepartmentsByDeptId" title="Code Example for calling LoadAllDepartments function using DepartmentId"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllDepartmentsByBranchId" title="Code Example for calling LoadAllDepartments function using BranchId"></code>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllDepartmentsByDeptId" title="Code Example for calling LoadAllDepartments function using DepartmentId"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.RequestData> LoadAllDepartments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllDepartments.RequestData>(proxy, proxy.LoadAllDepartments);
            return s;
        }
        ///<summary> Loads all email. </summary>///<param name="request">The wrapper request containing AgencyId, NameAddressSourceId.</param>///<returns> The wrapper response containing EmailAddresses </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllEmail" title="Code Example for calling LoadAllEmail function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllEmail" title="Code Example for calling LoadAllEmail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.RequestData> LoadAllEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmail.RequestData>(proxy, proxy.LoadAllEmail);
            return s;
        }
        ///<summary> Loads all employees. </summary>///<param name="request">A request object containing EmployeeId.</param>///<returns>A response object containing the collection of Employee object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllEmployees" title="Code Example for calling LoadAllEmployees function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllEmployees" title="Code Example for calling LoadAllEmployees function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.RequestData> LoadAllEmployees()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllEmployees.RequestData>(proxy, proxy.LoadAllEmployees);
            return s;
        }
        ///<summary> Loads all lob. </summary>///<param name="request">A request object containing nothing.</param>///<returns>The wrapper response containing All Lob</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllLob" title="Code Example for calling LoadAllLob function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllLob" title="Code Example for calling LoadAllLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.RequestData> LoadAllLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllLob.RequestData>(proxy, proxy.LoadAllLob);
            return s;
        }
        ///<summary> Loads all other users. </summary>///<param name="request">The wrapper request containing UserID.</param>///<returns> The wrapper response containing AllOtherUsersRecords </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllOtherUsers" title="Code Example for calling LoadAllOtherUsers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllOtherUsers" title="Code Example for calling LoadAllOtherUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.RequestData> LoadAllOtherUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllOtherUsers.RequestData>(proxy, proxy.LoadAllOtherUsers);
            return s;
        }
        ///<summary> Loads all phone. </summary>///<param name="request">A wrapper class for LoadAllPhone Request Data containing the AgencyId, CompanyId, NameAddressSourceId values.</param>///<returns>A wrapper response object containing collection of Phone object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllPhone" title="Code Example for calling LoadAllPhone function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllPhone" title="Code Example for calling LoadAllPhone function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.RequestData> LoadAllPhone()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllPhone.RequestData>(proxy, proxy.LoadAllPhone);
            return s;
        }
        ///<summary> Loads all users. </summary>///<param name="request">The wrapper request containing UserID.</param>///<returns> The wrapper response containing AllUsersRecords </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllUsers" title="Code Example for calling LoadAllUsers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllUsers" title="Code Example for calling LoadAllUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.RequestData> LoadAllUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllUsers.RequestData>(proxy, proxy.LoadAllUsers);
            return s;
        }
        ///<summary> Loads all user types. </summary>///<param name="request">The wrapper request containing UserTypeID, DepartmentID.</param>///<returns> The wrapper response containing AllUserTypesRecords </returns>///<remarks> Can load all user types based on UserTypeId, DepartmentId, both or none </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadAllUserTypes" title="Code Example for calling LoadAllUserTypes function without UserTypeId or DepartmentId"></code>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllUserTypesByUserTypeId" title="Code Example for calling LoadAllUserTypes function with UserTypeId"></code>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllUserTypesByDeptId" title="Code Example for calling LoadAllUserTypes function with DepartmentId"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadAllUserTypes" title="Code Example for calling LoadAllUserTypes function without UserTypeId or DepartmentId"></code>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="LoadAllUserTypesByUserTypeId" title="Code Example for calling LoadAllUserTypes function with UserTypeId"></code>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadAllUserTypesByDeptId" title="Code Example for calling LoadAllUserTypes function with DepartmentId"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.RequestData> LoadAllUserTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAllUserTypes.RequestData>(proxy, proxy.LoadAllUserTypes);
            return s;
        }
        ///<summary> Loads the authorities per group. </summary>///<param name="request">The wrapper request containing AuthorityGroupId.</param>///<returns> The wrapper response containing LoadAuthoritiesPerGroup </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAuthoritiesPerGroup" title="Code Example for calling LoadAuthoritiesPerGroup function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAuthoritiesPerGroup" title="Code Example for calling LoadAuthoritiesPerGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.RequestData> LoadAuthoritiesPerGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthoritiesPerGroup.RequestData>(proxy, proxy.LoadAuthoritiesPerGroup);
            return s;
        }
        ///<summary> Loads all the authorities for a specified user for use with authority caching. </summary>///<param name="request">The wrapper request containing the UsersId.</param>///<returns> The wrapper response containing the user's authorities. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAuthorityCacheForUser" title="Code Example for calling LoadAuthorityCacheForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAuthorityCacheForUser" title="Code Example for calling LoadAuthorityCacheForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.RequestData> LoadAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthority.RequestData>(proxy, proxy.LoadAuthority);
            return s;
        }
        ///<summary> Loads all the authorities for a specified user for use with authority caching. </summary>///<param name="request">The wrapper request containing the UsersId.</param>///<returns> The wrapper response containing the user's authorities. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAuthorityCacheForUser" title="Code Example for calling LoadAuthorityCacheForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadAuthorityCacheForUser" title="Code Example for calling LoadAuthorityCacheForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.RequestData> LoadAuthorityCacheForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityCacheForUser.RequestData>(proxy, proxy.LoadAuthorityCacheForUser);
            return s;
        }
        ///<summary> Loads the authority groups. </summary>///<param name="request">The wrapper request containing Nothing.</param>///<returns> The wrapper response containing AuthorityGroupRecords </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAuthorityGroups" title="Code Example for calling LoadAuthorityGroups function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAuthorityGroups" title="Code Example for calling LoadAuthorityGroups function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.RequestData> LoadAuthorityGroups()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityGroups.RequestData>(proxy, proxy.LoadAuthorityGroups);
            return s;
        }
        ///<summary> Loads all authorities for an authority template </summary>///<param name="request">A wrapper request containing the AuthorityTemplateId and AuthorityGroupId to load.</param>///<returns>The wrapper response containing the AuthorityTemplateAllAuthorities records</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.RequestData> LoadAuthorityTemplateAllAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplateAllAuthorities.RequestData>(proxy, proxy.LoadAuthorityTemplateAllAuthorities);
            return s;
        }
        ///<summary> Loads all authority templates. </summary>///<param name="request">An empty wrapper request (no parameters are required).</param>///<returns> The wrapper response containing the AuthorityTemplates. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.RequestData> LoadAuthorityTemplates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplates.RequestData>(proxy, proxy.LoadAuthorityTemplates);
            return s;
        }
        ///<summary> Return the authority templates in a security group. </summary>///<param name="request">An wrapper request containing the SecurityGroupId of the group.</param>///<returns>The wrapper response containing the collection of authority templates in the group.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.RequestData> LoadAuthorityTemplatesInSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAuthorityTemplatesInSecurityGroup.RequestData>(proxy, proxy.LoadAuthorityTemplatesInSecurityGroup);
            return s;
        }
        ///<summary> Loads the automatic non renewal trans reason combo. </summary>///<param name="request">The wrapper request containing LoadAutomaticNonRenewalTransReasonCombo.</param>///<returns> The wrapper response containing LoadAutomaticNonRenewalTransReasonCombo </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyNonRenewLOBForm.vb" region="LoadAutomaticNonRenewalTransReasonCombo" title="Code Example for calling LoadAutomaticNonRenewalTransReasonCombo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyNonRenewLOBForm.vb" region="LoadAutomaticNonRenewalTransReasonCombo" title="Code Example for calling LoadAutomaticNonRenewalTransReasonCombo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.RequestData> LoadAutomaticNonRenewalTransReasonCombo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAutomaticNonRenewalTransReasonCombo.RequestData>(proxy, proxy.LoadAutomaticNonRenewalTransReasonCombo);
            return s;
        }
        ///<summary> Loads the available agency by company state LOB. </summary>///<param name="request">The wrapper request containing CompanyId, StateId, LobId, EffDate.</param>///<returns> The wrapper response containing AvailableAgencyByCompanyStateLOB </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAvailableAgencyByCompanyStateLOB" title="Code Example for calling LoadAvailableAgencyByCompanyStateLOB function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAvailableAgencyByCompanyStateLOB" title="Code Example for calling LoadAvailableAgencyByCompanyStateLOB function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.RequestData> LoadAvailableAgencyByCompanyStateLOB()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyByCompanyStateLOB.RequestData>(proxy, proxy.LoadAvailableAgencyByCompanyStateLOB);
            return s;
        }
        ///<summary> Loads available pay plans for agency linking. </summary>///<param name="request">A wrapper class for LoadAvailableAgencyPayPlans Request Data containing the companystatelob_id and agency_id value.</param>///<returns>A wrapper response object containing collection of pay plans available for linking.  Returns the pay plans that can be linked to an agency.</returns>///<example>  <code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="DeleteAgencyPayPlanLink" title="Code Example for calling DeleteAgencyPayPlanLink function"></code></example>///<code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="DeleteAgencyPayPlanLink" title="Code Example for calling DeleteAgencyPayPlanLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.RequestData> LoadAvailableAgencyPayPlans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgencyPayPlans.RequestData>(proxy, proxy.LoadAvailableAgencyPayPlans);
            return s;
        }
        ///<summary> Loads the type of the available agy comm detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionId, CompanyStateLobId.</param>///<returns> The wrapper response containing LoadAvailableAgyCommDetailType </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadAvailableAgyCommDetailType" title="Code Example for calling LoadAvailableAgyCommDetailType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadAvailableAgyCommDetailType" title="Code Example for calling LoadAvailableAgyCommDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.RequestData> LoadAvailableAgyCommDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableAgyCommDetailType.RequestData>(proxy, proxy.LoadAvailableAgyCommDetailType);
            return s;
        }
        ///<summary> Loads all available bill methods that are not already there for the PolicyTermVersionId </summary>///<param name="request">The request takes in the PolicyTermVersionId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.AdministrationService.LoadAvailableBillMethods.Response" /> Returns DCO.Administration.BillMethodobject </returns>///<see cref="T:Diamond.ServiceMessages.AdministrationService.LoadAvailableBillMethods.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailableBillMethods" title="Code Example for calling LoadAvailableBillMethods function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailableBillMethods" title="Code Example for calling LoadAvailableBillMethods function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.RequestData> LoadAvailableBillMethods()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillMethods.RequestData>(proxy, proxy.LoadAvailableBillMethods);
            return s;
        }
        ///<summary> Loads all available bill tos that are not already there for the BillMethodVersionId </summary>///<param name="request">The request takes in the BillMethodVersionId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.AdministrationService.LoadAvailableBillTos.Response" /> Returns DCO.Administration.BillTo object </returns>///<see cref="T:Diamond.ServiceMessages.AdministrationService.LoadAvailableBillTos.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailableBillTos" title="Code Example for calling LoadAvailableBillTos function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailableBillTos" title="Code Example for calling LoadAvailableBillTos function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.RequestData> LoadAvailableBillTos()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableBillTos.RequestData>(proxy, proxy.LoadAvailableBillTos);
            return s;
        }
        ///<summary> Loads the available company state lob agency. </summary>///<param name="request">The wrapper request containing AgencyId, CompanyId, StateId.</param>///<returns> The wrapper response containing LoadAvailableCompanyStateLobAgency </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyLOBForm.vb" region="LoadAvailableCompanyStateLobAgency" title="Code Example for calling LoadAvailableCompanyStateLobAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyLOBForm.vb" region="LoadAvailableCompanyStateLobAgency" title="Code Example for calling LoadAvailableCompanyStateLobAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.RequestData> LoadAvailableCompanyStateLobAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobAgency.RequestData>(proxy, proxy.LoadAvailableCompanyStateLobAgency);
            return s;
        }
        ///<summary> Loads the available company state lob reimbursement. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId and CompanyStateLobId values</param>///<returns>A wrapper response object containing collection of AgencyCompanyStateLobReimbursement object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="LoadAvailableCompanyStateLobReimbursement" title="Code Example for calling LoadAvailableCompanyStateLobReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="LoadAvailableCompanyStateLobReimbursement" title="Code Example for calling LoadAvailableCompanyStateLobReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.RequestData> LoadAvailableCompanyStateLobReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableCompanyStateLobReimbursement.RequestData>(proxy, proxy.LoadAvailableCompanyStateLobReimbursement);
            return s;
        }
        ///<summary> Loads the available policy term. </summary>///<param name="request">The wrapper request containing VersionID.</param>///<returns> The wrapper response containing AvailablePolicyTerm </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailablePolicyTerm" title="Code Example for calling LoadAvailablePolicyTerm function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="LoadAvailablePolicyTerm" title="Code Example for calling LoadAvailablePolicyTerm function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.RequestData> LoadAvailablePolicyTerm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailablePolicyTerm.RequestData>(proxy, proxy.LoadAvailablePolicyTerm);
            return s;
        }
        ///<summary> Loads the available producers based on AgencyId </summary>///<param name="request">A wrapper class for LoadAvailableProducers Request Data containing the AgencyId and AgencyBookTransferId values.</param>///<returns>A wrapper response object containing collection of AgencyProducer object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="LoadAvailableProducers" title="Code Example for calling LoadAvailableProducers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="LoadAvailableProducers" title="Code Example for calling LoadAvailableProducers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.RequestData> LoadAvailableProducers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.RequestData>(proxy, proxy.LoadAvailableProducers);
            return s;
        }
        ///<summary> Loads the available transfer lob agency based on FromAgencyId and ToAgencyId values </summary>///<param name="request">A wrapper class for LoadAvailableTransferLobAgency Request Data containing the FromAgencyId and ToAgencyId values.</param>///<returns>A wrapper response object containing collection of AgencyLob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="LoadAvailableTransferLobAgency" title="Code Example for calling LoadAvailableTransferLobAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="LoadAvailableTransferLobAgency" title="Code Example for calling LoadAvailableTransferLobAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.RequestData> LoadAvailableTransferLobAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAvailableTransferLobAgency.RequestData>(proxy, proxy.LoadAvailableTransferLobAgency);
            return s;
        }
        ///<summary> Loads the bank account. </summary>///<param name="request">The wrapper request containing Account_Number, Routing_Number, Bankaccounttype_Id, Next_Check_Number, Dscr, Display_Name, SaveBankAccount, SaveAddressBankAccount.</param>///<returns> The wrapper respone containing BankBillingRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccountSetup.vb" region="LoadBankAccount" title="Code Example for calling LoadBankAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccountSetup.vb" region="LoadBankAccount" title="Code Example for calling LoadBankAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.RequestData> LoadBankAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccount.RequestData>(proxy, proxy.LoadBankAccount);
            return s;
        }
        ///<summary> Loads the bank account company LNK. </summary>///<param name="request">The wrapper request containing CompanyStateLobID.</param>///<returns> The wrapper response containing BankAccountCompanyLnk </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBankAccountCompanyLnk" title="Code Example for calling LoadBankAccountCompanyLnk function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBankAccountCompanyLnk" title="Code Example for calling LoadBankAccountCompanyLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.RequestData> LoadBankAccountCompanyLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnk.RequestData>(proxy, proxy.LoadBankAccountCompanyLnk);
            return s;
        }
        ///<summary> Loads the bank account company LNK use. </summary>///<param name="request">The wrapper request containing CompanyStateLobID, BankAccountUseID.</param>///<returns> The wrapper response containing BankAccountCompanyLnkUse </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBankAccountCompanyLnkUse" title="Code Example for calling LoadBankAccountCompanyLnkUse function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBankAccountCompanyLnkUse" title="Code Example for calling LoadBankAccountCompanyLnkUse function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.RequestData> LoadBankAccountCompanyLnkUse()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountCompanyLnkUse.RequestData>(proxy, proxy.LoadBankAccountCompanyLnkUse);
            return s;
        }
        ///<summary> Loads the bank account lockbox address LNK. </summary>///<param name="request">The wrapper request containing BankAccountID.</param>///<returns> The wrapper response containing BankAccountLockboxAddressLnk </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBankAccountLockboxAddressLnk" title="Code Example for calling LoadBankAccountLockboxAddressLnk function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBankAccountLockboxAddressLnk" title="Code Example for calling LoadBankAccountLockboxAddressLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.RequestData> LoadBankAccountLockboxAddressLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountLockboxAddressLnk.RequestData>(proxy, proxy.LoadBankAccountLockboxAddressLnk);
            return s;
        }
        ///<summary> Loads the bank account use. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing BankAccountUseIDDscr </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\BankAccountUseForm.vb" region="LoadBankAccountUse" title="Code Example for calling LoadBankAccountUse function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\BankAccountUseForm.vb" region="LoadBankAccountUse" title="Code Example for calling LoadBankAccountUse function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.RequestData> LoadBankAccountUse()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBankAccountUse.RequestData>(proxy, proxy.LoadBankAccountUse);
            return s;
        }
        ///<summary> Loads billing pay plans linked to an agency. </summary>///<param name="request">A wrapper class for LoadBillingPayPlanAgencyLinks Request Data containing the AgencyId and CSL_id value.</param>///<returns>A wrapper response object containing collection of pay plans.  Returns the pay plans linked to an agency.</returns>///<example>  <code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="LoadBillingPayPlanAgencyLinks" title="Code Example for calling LoadBillingPayPlanAgencyLinks function"></code></example>///<code lang="vbnet" source="Diamond\Web\Administration\Agency\AgencyPayPlanLinks.vb" region="LoadBillingPayPlanAgencyLinks" title="Code Example for calling LoadBillingPayPlanAgencyLinks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.RequestData> LoadBillingPayPlanAgencyLinks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlanAgencyLinks.RequestData>(proxy, proxy.LoadBillingPayPlanAgencyLinks);
            return s;
        }
        ///<summary> Loads the pay plans for CSL, policyterm, billmethod </summary>///<param name="request">The wrapper request containing the CSL, Policy Term, Bill Method</param>///<returns>The wrapper response containing a collection of pay plans.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillingPayPlansForCompany" title="Code Example for calling LoadBillingPayPlansForCompany function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillingPayPlansForCompany" title="Code Example for calling LoadBillingPayPlansForCompany function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.RequestData> LoadBillingPayPlansForCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillingPayPlansForCompany.RequestData>(proxy, proxy.LoadBillingPayPlansForCompany);
            return s;
        }
        ///<summary> Loads all of the avaible bill methods. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing a collection of the available bill methods.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="LoadBillMethods" title="Code Example for calling LoadBillMethods function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="LoadBillMethods" title="Code Example for calling LoadBillMethods function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.RequestData> LoadBillMethods()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethods.RequestData>(proxy, proxy.LoadBillMethods);
            return s;
        }
        ///<summary> Loads the billmethodVersion for a given policytermVersionId </summary>///<param name="request">The request takes in the billmethodversionId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillMethodVersion.Response" /> Returns DCO.Administration.BillMethodVersion object </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillMethodVersion.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillMethodVersion" title="Code Example for calling LoadBillMethodVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillMethodVersion" title="Code Example for calling LoadBillMethodVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.RequestData> LoadBillMethodVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBillMethodVersion.RequestData>(proxy, proxy.LoadBillMethodVersion);
            return s;
        }
        ///<summary> Loads the blackout non renew policies. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutid, NonRenewPolicies.</param>///<returns> The wrapper response containing BlackoutNonRenewPolicies </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBlackoutNonRenewPolicies" title="Code Example for calling LoadBlackoutNonRenewPolicies function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBlackoutNonRenewPolicies" title="Code Example for calling LoadBlackoutNonRenewPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.RequestData> LoadBlackoutNonRenewPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadBlackoutNonRenewPolicies.RequestData>(proxy, proxy.LoadBlackoutNonRenewPolicies);
            return s;
        }
        ///<summary> Loads the policies by legal date for cancellation extensions </summary>///<param name="request">The wrapper request containing the legal date to be considered</param>///<returns>The wrapper response containing a collection of policies </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CancellationExtension.vb" region="LoadCancellationExtensionPolicies" title="Code Example for calling LoadCancellationExtensionPolicies function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CancellationExtension.vb" region="LoadCancellationExtensionPolicies" title="Code Example for calling LoadCancellationExtensionPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.RequestData> LoadCancellationExtensionPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCancellationExtensionPolicies.RequestData>(proxy, proxy.LoadCancellationExtensionPolicies);
            return s;
        }
        ///<summary> Loads the COM bank account. </summary>///<param name="request">The wrapper request containing nothing.</param>///<returns> The wrapper response containing LoadComBankAccount </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccount.vb" region="LoadComBankAccount" title="Code Example for calling LoadComBankAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccount.vb" region="LoadComBankAccount" title="Code Example for calling LoadComBankAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.RequestData> LoadComBankAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadComBankAccount.RequestData>(proxy, proxy.LoadComBankAccount);
            return s;
        }
        ///<summary> Loads the commissions for validation. </summary>///<param name="request">The wrapper request containing AgencyId, CompanyStateLobId, AgencyCommissionTypeId.</param>///<returns> The wrapper response containing AgencyCommissions </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommission.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommission.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommission.RequestData> LoadCommission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommission.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommission.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommission.RequestData>(proxy, proxy.LoadCommission);
            return s;
        }
        ///<summary> Loads the commission detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionId.</param>///<returns> The wrapper response containing CommissionDetail </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCommissionDetail" title="Code Example for calling LoadCommissionDetail function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCommissionDetail" title="Code Example for calling LoadCommissionDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.RequestData> LoadCommissionDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionDetail.RequestData>(proxy, proxy.LoadCommissionDetail);
            return s;
        }
        ///<summary> Loads the commissions for validation. </summary>///<param name="request">The wrapper request containing AgencyId, CompanyStateLobId, AgencyCommissionTypeId.</param>///<returns> The wrapper response containing AgencyCommissions </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.RequestData> LoadCommissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissions.RequestData>(proxy, proxy.LoadCommissions);
            return s;
        }
        ///<summary> Loads the commissions for validation. </summary>///<param name="request">The wrapper request containing AgencyId, CompanyStateLobId, AgencyCommissionTypeId.</param>///<returns> The wrapper response containing AgencyCommissions </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="LoadCommissionsForValidation" title="Code Example for calling LoadCommissionsForValidation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.RequestData> LoadCommissionsForValidation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionsForValidation.RequestData>(proxy, proxy.LoadCommissionsForValidation);
            return s;
        }
        ///<summary> Loads the commission types. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CommissionTypes </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCommissionTypes" title="Code Example for calling LoadCommissionTypes function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCommissionTypes" title="Code Example for calling LoadCommissionTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.RequestData> LoadCommissionTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCommissionTypes.RequestData>(proxy, proxy.LoadCommissionTypes);
            return s;
        }
        ///<summary> Loads the companies on account. </summary>///<param name="request">The wrapper request containing BankAccountID.</param>///<returns> The wrapper response containing CompaniesOnAccount </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompaniesOnAccount" title="Code Example for calling LoadCompaniesOnAccount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompaniesOnAccount" title="Code Example for calling LoadCompaniesOnAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.RequestData> LoadCompaniesOnAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompaniesOnAccount.RequestData>(proxy, proxy.LoadCompaniesOnAccount);
            return s;
        }
        ///<summary> Loads the company bank accounts. </summary>///<param name="request">The wrapper request containing CompanyStateLobID.</param>///<returns> The wrapper response containing CompanyBankAccounts </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompanyBankAccounts" title="Code Example for calling LoadCompanyBankAccounts function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompanyBankAccounts" title="Code Example for calling LoadCompanyBankAccounts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.RequestData> LoadCompanyBankAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyBankAccounts.RequestData>(proxy, proxy.LoadCompanyBankAccounts);
            return s;
        }
        ///<summary> Loads the name of the company. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing CompanyName </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompanyName" title="Code Example for calling LoadCompanyName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCompanyName" title="Code Example for calling LoadCompanyName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.RequestData> LoadCompanyName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyName.RequestData>(proxy, proxy.LoadCompanyName);
            return s;
        }
        ///<summary> Loads the settings for the company. </summary>///<param name="request"></param>///<returns> The wrapper response containing CompanySettings </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.RequestData> LoadCompanySettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanySettings.RequestData>(proxy, proxy.LoadCompanySettings);
            return s;
        }
        ///<summary> Loads the company state LOB. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CompanyStateLOB </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadCompanyStateLOB" title="Code Example for calling LoadCompanyStateLOB function"></code></example>///<code lang="vbnet" source="Diamond\UI\Accounting\AgencyActivity.vb" region="LoadCompanyStateLOB" title="Code Example for calling LoadCompanyStateLOB function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.RequestData> LoadCompanyStateLOB()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCompanyStateLOB.RequestData>(proxy, proxy.LoadCompanyStateLOB);
            return s;
        }
        ///<summary> Loads the config authority. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing Authorities </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthoritySetup.vb" region="LoadConfigAuthority" title="Code Example for calling LoadConfigAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthoritySetup.vb" region="LoadConfigAuthority" title="Code Example for calling LoadConfigAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.RequestData> LoadConfigAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadConfigAuthority.RequestData>(proxy, proxy.LoadConfigAuthority);
            return s;
        }
        ///<summary> Loads the counties. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing HurricaneCounties </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="LoadCounties" title="Code Example for calling LoadCounties function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="LoadCounties" title="Code Example for calling LoadCounties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCounties.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCounties.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCounties.RequestData> LoadCounties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCounties.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCounties.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCounties.RequestData>(proxy, proxy.LoadCounties);
            return s;
        }
        ///<summary> Loads the coverage code version renewal roll on. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId, CompanyStateLobId and CoverageCodeVersionId values</param>///<returns>A wrapper response object containing collection of AgencyRenewalRollOn object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnEditForm.vb" region="LoadCoverageCodeVersionRenewalRollOn" title="Code Example for calling LoadCoverageCodeVersionRenewalRollOn function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnEditForm.vb" region="LoadCoverageCodeVersionRenewalRollOn" title="Code Example for calling LoadCoverageCodeVersionRenewalRollOn function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.RequestData> LoadCoverageCodeVersionRenewalRollOn()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.LoadCoverageCodeVersionRenewalRollOn.RequestData>(proxy, proxy.LoadCoverageCodeVersionRenewalRollOn);
            return s;
        }
        ///<summary> Loads the detail settings by CSL. </summary>///<param name="request">The wrapper request containing CompanyStateLOBId, Renewal, EffectiveDate.</param>///<returns>A response object containing collection of DCO.Administration.PolicyDetailSettingsVersion object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadDetailSettingsByCSL" title="Code Example for calling LoadDetailSettingsByCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadDetailSettingsByCSL" title="Code Example for calling LoadDetailSettingsByCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.Request, Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.Response, Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.RequestData> LoadDetailSettingsByCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.Request, Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.Response, Diamond.Common.Services.Messages.AdministrationService.LoadDetailSettingsByCSL.RequestData>(proxy, proxy.LoadDetailSettingsByCSL);
            return s;
        }
        ///<summary> Loads the diamond users. </summary>///<param name="request">The wrapper request containing UserId.</param>///<returns> The wrapper response containing DiamondUsersRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserSetupList.vb" region="LoadDiamondUsers" title="Code Example for calling LoadDiamondUsers function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserSetupList.vb" region="LoadDiamondUsers" title="Code Example for calling LoadDiamondUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.RequestData> LoadDiamondUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadDiamondUsers.RequestData>(proxy, proxy.LoadDiamondUsers);
            return s;
        }
        ///<summary> Loads the edit bank account. </summary>///<param name="request">The wrapper request containing BankAccountId, LoadEditBankAccount.</param>///<returns> The wrapper response containing EditBankAccunt </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Bank Account\AddLockboxAddressForm.vb" region="LoadEditBankAccount" title="Code Example for calling LoadEditBankAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Bank Account\AddLockboxAddressForm.vb" region="LoadEditBankAccount" title="Code Example for calling LoadEditBankAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.RequestData> LoadEditBankAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEditBankAccount.RequestData>(proxy, proxy.LoadEditBankAccount);
            return s;
        }
        ///<summary> Loads the EFT account. </summary>///<param name="request">The wrapper request containing Agency.</param>///<returns> The wrapper response containing EftAccount </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyEFT.vb" region="LoadEFTAccount" title="Code Example for calling LoadEFTAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyEFT.vb" region="LoadEFTAccount" title="Code Example for calling LoadEFTAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.RequestData> LoadEFTAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEFTAccount.RequestData>(proxy, proxy.LoadEFTAccount);
            return s;
        }
        ///<summary> Loads the type of the EFT transaction. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing EftListItem </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadEFTTransactionType" title="Code Example for calling LoadEFTTransactionType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadEFTTransactionType" title="Code Example for calling LoadEFTTransactionType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.RequestData> LoadEFTTransactionType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEFTTransactionType.RequestData>(proxy, proxy.LoadEFTTransactionType);
            return s;
        }
        ///<summary> Loads the employee based on EmployeeId </summary>///<param name="request">A request object containing EmployeeId.</param>///<returns>A response object containing the Employee object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeSetup.vb" region="LoadEmployee" title="Code Example for calling LoadEmployee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeSetup.vb" region="LoadEmployee" title="Code Example for calling LoadEmployee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.RequestData> LoadEmployee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEmployee.RequestData>(proxy, proxy.LoadEmployee);
            return s;
        }
        ///<summary> Loads the entity. </summary>///<param name="request">The wrapper request containing UniqueID, EntityType, NameAddressSourceID.</param>///<returns>The wrapper response containing Entity</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadEntity" title="Code Example for calling LoadEntity function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadEntity" title="Code Example for calling LoadEntity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEntity.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEntity.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEntity.RequestData> LoadEntity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadEntity.Request, Diamond.Common.Services.Messages.AdministrationService.LoadEntity.Response, Diamond.Common.Services.Messages.AdministrationService.LoadEntity.RequestData>(proxy, proxy.LoadEntity);
            return s;
        }
        ///<summary> Loads lob, programtype and coveragecode information </summary>///<param name="request">none</param>///<returns>The wrapper response object containing lob, coveragecodee and programtype information.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.RequestData> LoadForAddSubLineLobCoverageCodeProgramTypeLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadForAddSubLineLobCoverageCodeProgramTypeLink.RequestData>(proxy, proxy.LoadForAddSubLineLobCoverageCodeProgramTypeLink);
            return s;
        }
        ///<summary> Loads the global AI agencies. </summary>///<param name="request">A wrapper class for LoadGlobalAIAgencies Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencySetup object.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LoadGlobalAIAgencies" title="Code Example for calling LoadGlobalAIAgencies function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LoadGlobalAIAgencies" title="Code Example for calling LoadGlobalAIAgencies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.RequestData> LoadGlobalAIAgencies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.Request, Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.Response, Diamond.Common.Services.Messages.AdministrationService.LoadGlobalAIAgencies.RequestData>(proxy, proxy.LoadGlobalAIAgencies);
            return s;
        }
        ///<summary> Loads the user categories for a pay plan/CSL combo </summary>///<param name="request">The wrapper request containing the pay plan, CSL</param>///<returns>The wrapper response containing a collection of usercategory_ids for the pay plan/CSL</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\AddEditPayPlanForCompany.vb" region="LoadHideForUserCategory" title="Code Example for calling LoadHideForUserCategory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\AddEditPayPlanForCompany.vb" region="LoadHideForUserCategory" title="Code Example for calling LoadHideForUserCategory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.RequestData> LoadHideForUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHideForUserCategory.RequestData>(proxy, proxy.LoadHideForUserCategory);
            return s;
        }
        ///<summary> Loads the holidays. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Holidays</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="LoadHolidays" title="Code Example for calling LoadHolidays function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="LoadHolidays" title="Code Example for calling LoadHolidays function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.RequestData> LoadHolidays()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHolidays.RequestData>(proxy, proxy.LoadHolidays);
            return s;
        }
        ///<summary> Loads the hurricane blackout counties. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing HurricaneBlackoutCounties </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutCounties" title="Code Example for calling LoadHurricaneBlackoutCounties function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutCounties" title="Code Example for calling LoadHurricaneBlackoutCounties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.RequestData> LoadHurricaneBlackoutCounties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutCounties.RequestData>(proxy, proxy.LoadHurricaneBlackoutCounties);
            return s;
        }
        ///<summary> Loads the hurricane blackout dates. </summary>///<param name="request">The wrapper request containing HurricaneStatus.</param>///<returns> The wrapper response containing HurricaneBlackoutDates </returns>///<remarks>Though this function accepts an integer input (HURRICANEBLACKOUTSTATUS_ACTIVE, HURRICANEBLACKOUTSTATUS_DELETED, HURRICANEBLACKOUTSTATUS_INACTIVE) currently the stored proc returns all entries from the HurricaneBlackout </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutDates" title="Code Example for calling LoadHurricaneBlackoutDates function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutDates" title="Code Example for calling LoadHurricaneBlackoutDates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.RequestData> LoadHurricaneBlackoutDates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutDates.RequestData>(proxy, proxy.LoadHurricaneBlackoutDates);
            return s;
        }
        ///<summary> Loads the hurricane blackout zipcodes. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing HurricaneBlackoutZipCodes </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutZipCodes" title="Code Example for calling LoadHurricaneBlackoutZipCodes function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackoutSetup.vb" region="LoadHurricaneBlackoutZipCodes" title="Code Example for calling LoadHurricaneBlackoutZipCodes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.RequestData> LoadHurricaneBlackoutZipCodes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadHurricaneBlackoutZipCodes.RequestData>(proxy, proxy.LoadHurricaneBlackoutZipCodes);
            return s;
        }
        ///<summary> Loads the individual agency lob. </summary>///<param name="request">A wrapper class for LoadIndividualAgencyLob Request Data containing the AgencyId, CompanyId, StateId, and LobId values.</param>///<returns>A wrapper response object containing collection of AgencyLob object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgencyLob" title="Code Example for calling LoadIndividualAgencyLob function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgencyLob" title="Code Example for calling LoadIndividualAgencyLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.RequestData> LoadIndividualAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadAgency.RequestData>(proxy, proxy.LoadIndividualAgency);
            return s;
        }
        ///<summary> Loads the individual agency lob. </summary>///<param name="request">A wrapper class for LoadIndividualAgencyLob Request Data containing the AgencyId, CompanyId, StateId, and LobId values.</param>///<returns>A wrapper response object containing collection of AgencyLob object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgencyLob" title="Code Example for calling LoadIndividualAgencyLob function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgencyLob" title="Code Example for calling LoadIndividualAgencyLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.RequestData> LoadIndividualAgencyLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgencyLob.RequestData>(proxy, proxy.LoadIndividualAgencyLob);
            return s;
        }
        ///<summary> Loads the type of the individual agy comm detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionDetailTypeId.</param>///<returns> The wrapper response containing IndividualAgyCommDetailType </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgyCommDetailType" title="Code Example for calling LoadIndividualAgyCommDetailType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAgyCommDetailType" title="Code Example for calling LoadIndividualAgyCommDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.RequestData> LoadIndividualAgyCommDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAgyCommDetailType.RequestData>(proxy, proxy.LoadIndividualAgyCommDetailType);
            return s;
        }
        ///<summary> Loads the individual authority group. </summary>///<param name="request">The wrapper request containing AuthorityGroupId.</param>///<returns> The wrapper response containing LoadIndividualAuthorityGroup </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAuthorityGroup" title="Code Example for calling LoadIndividualAuthorityGroup function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndividualAuthorityGroup" title="Code Example for calling LoadIndividualAuthorityGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.RequestData> LoadIndividualAuthorityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualAuthorityGroup.RequestData>(proxy, proxy.LoadIndividualAuthorityGroup);
            return s;
        }
        ///<summary> Loads the individual company. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing CompanyRecord </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadIndividualCompany" title="Code Example for calling LoadIndividualCompany function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\CompanyInfoForm.vb" region="LoadIndividualCompany" title="Code Example for calling LoadIndividualCompany function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.RequestData> LoadIndividualCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadIndividualCompany.RequestData>(proxy, proxy.LoadIndividualCompany);
            return s;
        }
        ///<summary> Loads the invalid installment numbers. </summary>///<param name="request">The wrapper request containing BillingPayPlanId, BillingPayPlanInstallmentNum.</param>///<returns> The wrapper response containing BillingPayPlanInstallmentData </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadInvalidInstallmentNumbers" title="Code Example for calling LoadInvalidInstallmentNumbers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadInvalidInstallmentNumbers" title="Code Example for calling LoadInvalidInstallmentNumbers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.RequestData> LoadInvalidInstallmentNumbers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadInvalidInstallmentNumbers.RequestData>(proxy, proxy.LoadInvalidInstallmentNumbers);
            return s;
        }
        ///<summary> Loads the user configurable authority list. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AuthorityConfig </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadList" title="Code Example for calling LoadList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadList" title="Code Example for calling LoadList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadList.RequestData> LoadList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadList.RequestData>(proxy, proxy.LoadList);
            return s;
        }
        ///<summary> Loads the state of the LOB per company. </summary>///<param name="request">The wrapper request containing CompanyId, StateId.</param>///<returns> The wrapper response containing LoadLOBPerCompanyState </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadLOBPerCompanyState" title="Code Example for calling LoadLOBPerCompanyState function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadLOBPerCompanyState" title="Code Example for calling LoadLOBPerCompanyState function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.Request, Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.Response, Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.RequestData> LoadLOBPerCompanyState()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.Request, Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.Response, Diamond.Common.Services.Messages.AdministrationService.LoadLOBPerCompanyState.RequestData>(proxy, proxy.LoadLOBPerCompanyState);
            return s;
        }
        ///<summary> Loads the mobile home park for. </summary>///<param name="request">The wrapper request containing Field, FieldValue, policy_id, policyimage_num.</param>///<returns> The wrapper response containing HomeParkFor </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMobileHomeParkFor" title="Code Example for calling LoadMobileHomeParkFor function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMobileHomeParkFor" title="Code Example for calling LoadMobileHomeParkFor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.Request, Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.Response, Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.RequestData> LoadMobileHomeParkFor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.Request, Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.Response, Diamond.Common.Services.Messages.AdministrationService.LoadMobileHomeParkFor.RequestData>(proxy, proxy.LoadMobileHomeParkFor);
            return s;
        }
        ///<summary> Loads the multiple agency book transfers. </summary>///<param name="request">A wrapper class for LoadMultipleAgencyBookTransfers Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of AgencyBookTransfer object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferForm.vb" region="LoadMultipleAgencyBookTransfers" title="Code Example for calling LoadMultipleAgencyBookTransfers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferForm.vb" region="LoadMultipleAgencyBookTransfers" title="Code Example for calling LoadMultipleAgencyBookTransfers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.RequestData> LoadMultipleAgencyBookTransfers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadMultipleAgencyBookTransfers.RequestData>(proxy, proxy.LoadMultipleAgencyBookTransfers);
            return s;
        }
        ///<summary> Loads the Note types. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing NotesTypes</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeSetup.vb" region="LoadNotesType" title="Code Example for calling LoadNotesType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeSetup.vb" region="LoadNotesType" title="Code Example for calling LoadNotesType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.RequestData> LoadNotesType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadNotesType.RequestData>(proxy, proxy.LoadNotesType);
            return s;
        }
        ///<summary> Loads the User Categories for a notes type. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing user categories</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.Request, Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.Response, Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.RequestData> LoadNoteTypeUserCategories()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.Request, Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.Response, Diamond.Common.Services.Messages.AdministrationService.LoadNoteTypeUserCategories.RequestData>(proxy, proxy.LoadNoteTypeUserCategories);
            return s;
        }
        ///<summary> Loads the other carrier. </summary>///<param name="request">A wrapper class for LoadOtherCarrier no request Data.</param>///<returns>A wrapper response object containing collection of OtherCarrier object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyOtherCarrierSetup.vb" region="LoadOtherCarrier" title="Code Example for calling LoadOtherCarrier function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyOtherCarrierSetup.vb" region="LoadOtherCarrier" title="Code Example for calling LoadOtherCarrier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.RequestData> LoadOtherCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrier.RequestData>(proxy, proxy.LoadOtherCarrier);
            return s;
        }
        ///<summary> Loads the other carrier not in agency. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value</param>///<returns>A wrapper response object containing collection of Agency object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\Select.vb" region="LoadOtherCarrierNotInAgency" title="Code Example for calling LoadOtherCarrierNotInAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\Select.vb" region="LoadOtherCarrierNotInAgency" title="Code Example for calling LoadOtherCarrierNotInAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.RequestData> LoadOtherCarrierNotInAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherCarrierNotInAgency.RequestData>(proxy, proxy.LoadOtherCarrierNotInAgency);
            return s;
        }
        ///<summary> Loads the other installments. </summary>///<param name="request">The wrapper request containing BillingPayPlanId, BillingPayPlanInstallmentNum.</param>///<returns> The wrapper response containing PayPlanInstallmentRecords </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOtherInstallments" title="Code Example for calling LoadOtherInstallments function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOtherInstallments" title="Code Example for calling LoadOtherInstallments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.RequestData> LoadOtherInstallments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.Request, Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.Response, Diamond.Common.Services.Messages.AdministrationService.LoadOtherInstallments.RequestData>(proxy, proxy.LoadOtherInstallments);
            return s;
        }
        ///<summary> Loads payroll deduction information </summary>///<param name="request">The wrapper request containing no input parameters.</param>///<returns> The wrapper response containing PayrollDeductionEmployer records </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="LoadPayrollDeductionEmployers" title="Code Example for calling LoadPayrollDeductionEmployers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="LoadPayrollDeductionEmployers" title="Code Example for calling LoadPayrollDeductionEmployers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.RequestData> LoadPayrollDeductionEmployer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployer.RequestData>(proxy, proxy.LoadPayrollDeductionEmployer);
            return s;
        }
        ///<summary> Loads payroll deduction information </summary>///<param name="request">The wrapper request containing no input parameters.</param>///<returns> The wrapper response containing PayrollDeductionEmployer records </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="LoadPayrollDeductionEmployers" title="Code Example for calling LoadPayrollDeductionEmployers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="LoadPayrollDeductionEmployers" title="Code Example for calling LoadPayrollDeductionEmployers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.RequestData> LoadPayrollDeductionEmployers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPayrollDeductionEmployers.RequestData>(proxy, proxy.LoadPayrollDeductionEmployers);
            return s;
        }
        ///<summary> Loads the type of the phone. </summary>///<param name="request">A wrapper class for LoadPhoneType no request Data.</param>///<returns>A wrapper response object containing collection of PhoneType object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadPhoneType" title="Code Example for calling LoadPhoneType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadPhoneType" title="Code Example for calling LoadPhoneType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.RequestData> LoadPhoneType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPhoneType.RequestData>(proxy, proxy.LoadPhoneType);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.RequestData> LoadPolicyPromoCategoriesStatic()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoCategoriesStatic.RequestData>(proxy, proxy.LoadPolicyPromoCategoriesStatic);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.RequestData> LoadPolicyPromoConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoConfig.RequestData>(proxy, proxy.LoadPolicyPromoConfig);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.RequestData> LoadPolicyPromoTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyPromoTypes.RequestData>(proxy, proxy.LoadPolicyPromoTypes);
            return s;
        }
        ///<summary> Loads the policy term version. </summary>///<param name="request">The wrapper request containing VersionID.</param>///<returns> The wrapper response containing PolicyTermVersion </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadPolicyTermVersion" title="Code Example for calling LoadPolicyTermVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadPolicyTermVersion" title="Code Example for calling LoadPolicyTermVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.RequestData> LoadPolicyTermVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPolicyTermVersion.RequestData>(proxy, proxy.LoadPolicyTermVersion);
            return s;
        }
        ///<summary> Loads the primary agency address. </summary>///<param name="request">A wrapper class for LoadPrimaryAgencyAddress Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of Address object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadPrimaryAgencyAddress" title="Code Example for calling LoadPrimaryAgencyAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadPrimaryAgencyAddress" title="Code Example for calling LoadPrimaryAgencyAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.RequestData> LoadPrimaryAgencyAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyAddress.RequestData>(proxy, proxy.LoadPrimaryAgencyAddress);
            return s;
        }
        ///<summary> Loads the primary agency for the specified agency group. </summary>///<param name="request">The wrapper request containing the unique identifier for the agency group.</param>///<returns>The wrapper response containing the primary agency for the specified agency group.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.RequestData> LoadPrimaryAgencyForGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadPrimaryAgencyForGroup.RequestData>(proxy, proxy.LoadPrimaryAgencyForGroup);
            return s;
        }
        ///<summary> Loads the queues. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing WorkflowQueue </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadQueues" title="Code Example for calling LoadQueues function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadQueues" title="Code Example for calling LoadQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadQueues.RequestData> LoadQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadQueues.RequestData>(proxy, proxy.LoadQueues);
            return s;
        }
        ///<summary> Loads the rating disk. </summary>///<param name="request">A wrapper class for LoadPhoneType no request Data.</param>///<returns>A wrapper response object containing collection of RatingDisk object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="LoadRatingDisk" title="Code Example for calling LoadRatingDisk function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyMiscellaneous.vb" region="LoadRatingDisk" title="Code Example for calling LoadRatingDisk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.RequestData> LoadRatingDisk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRatingDisk.RequestData>(proxy, proxy.LoadRatingDisk);
            return s;
        }
        ///<summary> Loads the rating version. </summary>///<param name="request">The wrapper request containing VersionID, RatingVersionID.</param>///<returns> The wrapper response containing RatingVersion </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadRatingVersion" title="Code Example for calling LoadRatingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadRatingVersion" title="Code Example for calling LoadRatingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.RequestData> LoadRatingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRatingVersion.RequestData>(proxy, proxy.LoadRatingVersion);
            return s;
        }
        ///<summary> Loads the reimbursement. </summary>///<param name="request">The wrapper request containing CompanyStateLobID.</param>///<returns> The wrapper response containing Reimbursement </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadReimbursement" title="Code Example for calling LoadReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadReimbursement" title="Code Example for calling LoadReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.RequestData> LoadReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReimbursement.RequestData>(proxy, proxy.LoadReimbursement);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.RequestData> LoadReinstatementRules()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinstatementRules.RequestData>(proxy, proxy.LoadReinstatementRules);
            return s;
        }
        ///<summary> Loads the reinsurance. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing ReinsuranceTreaty, ReinsuranceParameter, ReinsuranceASL </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.RequestData> LoadReinsurance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurance.RequestData>(proxy, proxy.LoadReinsurance);
            return s;
        }
        ///<summary> Loads the coverages for reinsurance. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CoverageCodes </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.RequestData> LoadReinsuranceCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsuranceCoverages.RequestData>(proxy, proxy.LoadReinsuranceCoverages);
            return s;
        }
        ///<summary> Loads the reinsurance Policy. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing Reinsurance Policy Information </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.RequestData> LoadReinsurancePolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicy.RequestData>(proxy, proxy.LoadReinsurancePolicy);
            return s;
        }
        ///<summary> To Load Reinsurance Policy List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Response" /> to Load Reinsurance Policy List </returns>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\LoadReinsurers.vb" region="ReinsurancePolicyList" title="Code Example for calling LoadReinsurancePolicyList function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\LoadReinsurers.vb" region="ReinsurancePolicyList" title="Code Example for calling LoadReinsurancePolicyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.RequestData> LoadReinsurancePolicyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyList.RequestData>(proxy, proxy.LoadReinsurancePolicyList);
            return s;
        }
        ///<summary> To Load Reinsurance Policy Names </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response" /> to Load ReinsurerCompanyBroker Names </returns>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ReinsurerCompanyBroker.vb" region="LoadReinsurerCompanyBrokerNames" title="Code Example for calling LoadReinsurerCompanyBrokerNames function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ReinsurerCompanyBroker.vb" region="LoadReinsurerCompanyBrokerNames" title="Code Example for calling LoadReinsurerCompanyBrokerNames function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.RequestData> LoadReinsurancePolicyNames()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurancePolicyNames.RequestData>(proxy, proxy.LoadReinsurancePolicyNames);
            return s;
        }
        ///<summary> Loads the reinsurer Company Brokers. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing Reinsurer Company Broker Information </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\ReinsuranceSetup.vb" region="LoadReinsurance" title="Code Example for calling LoadReinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.RequestData> LoadReinsurerCompanyBroker()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBroker.RequestData>(proxy, proxy.LoadReinsurerCompanyBroker);
            return s;
        }
        ///<summary> To Load Reinsurer Company Broker List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Response" /> to Load Reinsurer Company Broker List </returns>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\LoadReinsurers.vb" region="ReinsurerCompanyBrokerList" title="Code Example for calling LoadReinsurerCompanyBrokerList function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\LoadReinsurers.vb" region="ReinsurerCompanyBrokerList" title="Code Example for calling LoadReinsurerCompanyBrokerList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.RequestData> LoadReinsurerCompanyBrokerList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerList.RequestData>(proxy, proxy.LoadReinsurerCompanyBrokerList);
            return s;
        }
        ///<summary> To Load ReinsurerCompanyBroker Names </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response" /> to Load ReinsurerCompanyBroker Names </returns>///<see cref="T:Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ReinsurerCompanyBroker.vb" region="LoadReinsurerCompanyBrokerNames" title="Code Example for calling LoadReinsurerCompanyBrokerNames function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ReinsurerCompanyBroker.vb" region="LoadReinsurerCompanyBrokerNames" title="Code Example for calling LoadReinsurerCompanyBrokerNames function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.RequestData> LoadReinsurerCompanyBrokerNames()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReinsurerCompanyBrokerNames.RequestData>(proxy, proxy.LoadReinsurerCompanyBrokerNames);
            return s;
        }
        ///<summary> Loads the renewal roll on. </summary>///<param name="request">The wrapper request containing AgencyId, DataConnectionTypeId, CompanyStateLobId.</param>///<returns> The wrapper response containing AgencyRenewalRollOn </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="LoadRenewalRollOn" title="Code Example for calling LoadRenewalRollOn function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnForm.vb" region="LoadRenewalRollOn" title="Code Example for calling LoadRenewalRollOn function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.RequestData> LoadRenewalRollOn()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.LoadRenewalRollOn.RequestData>(proxy, proxy.LoadRenewalRollOn);
            return s;
        }
        ///<summary> Loads the report. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Report</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportDetail.vb" region="LoadReport" title="Code Example for calling LoadReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportDetail.vb" region="LoadReport" title="Code Example for calling LoadReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReport.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReport.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReport.RequestData> LoadReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReport.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReport.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReport.RequestData>(proxy, proxy.LoadReport);
            return s;
        }
        ///<summary> Loads the report list. </summary>///<param name="request">The wrapper request containing ReportId, ReportList.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="LoadReportList" title="Code Example for calling LoadReportList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="LoadReportList" title="Code Example for calling LoadReportList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReportList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReportList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReportList.RequestData> LoadReportList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadReportList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadReportList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadReportList.RequestData>(proxy, proxy.LoadReportList);
            return s;
        }
        ///<summary> Loads the secondary agency address. </summary>///<param name="request">A wrapper class for LoadSecondaryAgencyAddress Request Data containing the AgencyId value.</param>///<returns>A wrapper response object containing collection of Address object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSecondaryAgencyAddress" title="Code Example for calling LoadSecondaryAgencyAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSecondaryAgencyAddress" title="Code Example for calling LoadSecondaryAgencyAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.RequestData> LoadSecondaryAgencyAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecondaryAgencyAddress.RequestData>(proxy, proxy.LoadSecondaryAgencyAddress);
            return s;
        }
        ///<summary> Loads all security groups. </summary>///<param name="request">An empty wrapper request (no parameters are required).</param>///<returns> The wrapper response containing SecurityGroups. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.RequestData> LoadSecurityGroups()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroups.RequestData>(proxy, proxy.LoadSecurityGroups);
            return s;
        }
        ///<summary> Return a user's security groups. </summary>///<param name="request">An wrapper request containing the UsersId of the user.</param>///<returns>The wrapper response containing the collection of security groups.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.RequestData> LoadSecurityGroupsForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSecurityGroupsForUser.RequestData>(proxy, proxy.LoadSecurityGroupsForUser);
            return s;
        }
        ///<summary> Loads the selected agency. </summary>///<param name="request">The wrapper request containing CompanyID, StateID, LOBID, AgencyName, AgencyCode, City, County, ASR, ProducerCode, PhoneNumber, AgencyStatus, Email, AgencyFEIN, ProdFEIN, ProdName, Zip, AgencyType, AgencyGroup.</param>///<returns> The wrapper response containing LoadSelectedAgency </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadSelectedAgency2" title="Code Example for calling LoadAgencySetup function"></code>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadSelectedAgency1" title="Code Example for calling LoadAgencySetup function with additional criteria"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadSelectedAgency2" title="Code Example for calling LoadAgencySetup function"></code>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencySetup.vb" region="LoadSelectedAgency1" title="Code Example for calling LoadAgencySetup function with additional criteria"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.RequestData> LoadSelectedAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedAgency.RequestData>(proxy, proxy.LoadSelectedAgency);
            return s;
        }
        ///<summary> Loads the selected EFT account. </summary>///<param name="request">The wrapper request containing EFTAccount.</param>///<returns> The wrapper response containing SelectedEFTAccount </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSelectedEFTAccount" title="Code Example for calling LoadSelectedEFTAccount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSelectedEFTAccount" title="Code Example for calling LoadSelectedEFTAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.RequestData> LoadSelectedEFTAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSelectedEFTAccount.RequestData>(proxy, proxy.LoadSelectedEFTAccount);
            return s;
        }
        ///<summary> Loads the selected producers based on AgencyBookTransferId </summary>///<param name="request">A wrapper class for LoadSelectedProducers Request Data containing the AgencyId and AgencyBookTransferId values.</param>///<returns>A wrapper response object containing collection of AgencyProducer object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="LoadSelectedProducers" title="Code Example for calling LoadSelectedProducers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="LoadSelectedProducers" title="Code Example for calling LoadSelectedProducers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.RequestData> LoadSelectedProducers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Request, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.Response, Diamond.Common.Services.Messages.AdministrationService.LoadABTProducers.RequestData>(proxy, proxy.LoadSelectedProducers);
            return s;
        }
        ///<summary> Loads the single bill method version. </summary>///<param name="request">The wrapper request containing BillMethodVersionId.</param>///<returns> The wrapper response containing BillMethodVersionData </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleBillMethodVersion" title="Code Example for calling LoadSingleBillMethodVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleBillMethodVersion" title="Code Example for calling LoadSingleBillMethodVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.RequestData> LoadSingleBillMethodVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleBillMethodVersion.RequestData>(proxy, proxy.LoadSingleBillMethodVersion);
            return s;
        }
        ///<summary> Loads the single company state lob. </summary>///<param name="request">The wrapper request containing CompanyStateLOBId.</param>///<returns> The wrapper response containing LoadSingleCompanyStateLob </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleCompanyStateLob" title="Code Example for calling LoadSingleCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleCompanyStateLob" title="Code Example for calling LoadSingleCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.RequestData> LoadSingleCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleCompanyStateLob.RequestData>(proxy, proxy.LoadSingleCompanyStateLob);
            return s;
        }
        ///<summary> Loads the single reimbursement. </summary>///<param name="request">The wrapper request containing CompanyStateLobRemibursementId.</param>///<returns> The wrapper response containing LoadSingleReimbursement </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleReimbursement" title="Code Example for calling LoadSingleReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleReimbursement" title="Code Example for calling LoadSingleReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.RequestData> LoadSingleReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleReimbursement.RequestData>(proxy, proxy.LoadSingleReimbursement);
            return s;
        }
        ///<summary> Loads the single version. </summary>///<param name="request">The wrapper request containing VersionId.</param>///<returns> The wrapper response containing LoadSingleVersion </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleVersion" title="Code Example for calling LoadSingleVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadSingleVersion" title="Code Example for calling LoadSingleVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.RequestData> LoadSingleVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSingleVersion.RequestData>(proxy, proxy.LoadSingleVersion);
            return s;
        }
        ///<summary> Loads a list of agencies to which the current agency could be sold. </summary>///<param name="request">The wrapper request containing the <see cref="P:Diamond.Common.Objects.Policy.Agency.Agency.AgencyId" /> for the current <see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" />.</param>///<see cref="P:Diamond.Common.Objects.Policy.Agency.Agency.AgencyId" />///<see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" />///<returns>The wrapper response containing collection of <see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" /> objects that represent agencies to which the current agency could be sold.</returns>///<see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" />///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="LoadSoldToAgencyList" title="Code Example for calling LoadSoldToAgencyList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyGeneralInfo.vb" region="LoadSoldToAgencyList" title="Code Example for calling LoadSoldToAgencyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.RequestData> LoadSoldToAgencyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSoldToAgencyList.RequestData>(proxy, proxy.LoadSoldToAgencyList);
            return s;
        }
        ///<summary> Loads the State holidays. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing State Holidays</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="LoadHolidays" title="Code Example for calling LoadHolidays function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidaysSetup.vb" region="LoadHolidays" title="Code Example for calling LoadHolidays function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.Request, Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.Response, Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.RequestData> LoadStateHolidays()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.Request, Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.Response, Diamond.Common.Services.Messages.AdministrationService.LoadStateHolidays.RequestData>(proxy, proxy.LoadStateHolidays);
            return s;
        }
        ///<summary> Loads the state per company. </summary>///<param name="request">The wrapper request containing CompanyId.</param>///<returns> The wrapper response containing LoadStatePerCompany </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStatePerCompany" title="Code Example for calling LoadStatePerCompany function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStatePerCompany" title="Code Example for calling LoadStatePerCompany function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.RequestData> LoadStatePerCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.Request, Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.Response, Diamond.Common.Services.Messages.AdministrationService.LoadStatePerCompany.RequestData>(proxy, proxy.LoadStatePerCompany);
            return s;
        }
        ///<summary> Loads setup information from the SubLineLobCoverageCodeProgramTypeLink table </summary>///<param name="request">The wrapper request object containing all of the subline information.</param>///<returns>The wrapper response object containing a collection of <see cref="T:Diamond.Common.Objects.Configuration.SubLineLobCoverageCodeProgramTypeLink" /> objects and a collection of all the transaction reasons currently setup in the system.</returns>///<see cref="T:Diamond.Common.Objects.Configuration.SubLineLobCoverageCodeProgramTypeLink" />
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.RequestData> LoadSubLineLobCoverageCodeProgramTypeLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSubLineLobCoverageCodeProgramTypeLinks.RequestData>(proxy, proxy.LoadSubLineLobCoverageCodeProgramTypeLink);
            return s;
        }
        ///<summary> Loads the suspense accounts. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing Name, Address, SuspenseAccount, BankAccount </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\SuspenseAccounts\SuspenseAccounts.vb" region="LoadSuspenseAccounts" title="Code Example for calling LoadSuspenseAccounts function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\SuspenseAccounts\SuspenseAccounts.vb" region="LoadSuspenseAccounts" title="Code Example for calling LoadSuspenseAccounts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.RequestData> LoadSuspenseAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadSuspenseAccounts.RequestData>(proxy, proxy.LoadSuspenseAccounts);
            return s;
        }
        ///<summary> Loads a collection of transaction reasons that are viewable by user category. </summary>///<param name="request">The wrapper request object containing the user category and version id.</param>///<returns>The wrapper response object containing a collection of <see cref="T:Diamond.Common.Objects.Transactions.TransactionReasonViewableByUserCategory" /> objects.</returns>///<see cref="T:Diamond.Common.Objects.Transactions.TransactionReasonViewableByUserCategory" />
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.RequestData> LoadTransactionReasonViewableByUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.Request, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.Response, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategory.RequestData>(proxy, proxy.LoadTransactionReasonViewableByUserCategory);
            return s;
        }
        ///<summary> Loads setup information for transaction reasons that are viewable by user category. </summary>///<param name="request">The wrapper request object containing the optional user category.</param>///<returns>The wrapper response object containing a collection of <see cref="T:Diamond.Common.Objects.Transactions.TransactionReasonViewableByUserCategory" /> objects and a collection of all the transaction reasons currently setup in the system.</returns>///<see cref="T:Diamond.Common.Objects.Transactions.TransactionReasonViewableByUserCategory" />
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.RequestData> LoadTransactionReasonViewableByUserCategorySetup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadTransactionReasonViewableByUserCategorySetup.RequestData>(proxy, proxy.LoadTransactionReasonViewableByUserCategorySetup);
            return s;
        }
        ///<summary> Loads the underwriting version. </summary>///<param name="request">The wrapper request containing VersionID, UnderwritingVersionID.</param>///<returns> The wrapper response containing UnderwritingVersion </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadUnderwritingVersion" title="Code Example for calling LoadUnderwritingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadUnderwritingVersion" title="Code Example for calling LoadUnderwritingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.RequestData> LoadUnderwritingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUnderwritingVersion.RequestData>(proxy, proxy.LoadUnderwritingVersion);
            return s;
        }
        ///<summary> Loads the user address. </summary>///<param name="request">The wrapper request containing UserId, UserCategoryId.</param>///<returns>The wrapper response containing Address</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserAddress" title="Code Example for calling LoadUserAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserAddress" title="Code Example for calling LoadUserAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.RequestData> LoadUserAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserAddress.RequestData>(proxy, proxy.LoadUserAddress);
            return s;
        }
        ///<summary> Loads the name of the user client. </summary>///<param name="request">The wrapper request containing ClientID.</param>///<returns> The wrapper response containing UserClientNameRecord </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUserClientName" title="Code Example for calling LoadUserClientName function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUserClientName" title="Code Example for calling LoadUserClientName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.RequestData> LoadUserClientName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserClientName.RequestData>(proxy, proxy.LoadUserClientName);
            return s;
        }
        ///<summary>  LoadUserGridviewLayouts </summary>///<param name="request">LoadUserGridviewLayouts object</param>///<returns> A collection of user griview layouts </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.RequestData> LoadUserGridviewLayouts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserGridviewLayouts.RequestData>(proxy, proxy.LoadUserGridviewLayouts);
            return s;
        }
        ///<summary> Loads the user links. </summary>///<param name="request">The wrapper request containing UserID, UserCategoryID.</param>///<returns> The wrapper response containing UserLinksRecord </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUserLinks" title="Code Example for calling LoadUserLinks function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUserLinks" title="Code Example for calling LoadUserLinks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.RequestData> LoadUserLinks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserLinks.RequestData>(proxy, proxy.LoadUserLinks);
            return s;
        }
        ///<summary> Loads the name of the user. </summary>///<param name="request">The wrapper request containing UserId, UserCategoryId.</param>///<returns> The wrapper response containing UserEmployeeLink </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserName" title="Code Example for calling LoadUserName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUserName" title="Code Example for calling LoadUserName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserName.RequestData> LoadUserName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserName.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserName.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserName.RequestData>(proxy, proxy.LoadUserName);
            return s;
        }
        ///<summary> Loads the users all authorities. </summary>///<param name="request">The wrapper request containing AuthorityID, AuthorityGroupID, UserID, UserTypeID, UserAuthorityTable, UsersCompanyBranchDeptUserTypeID.</param>///<returns> The wrapper response containing UsersAllAuthoritiesRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="LoadUsersAllAuthorities" title="Code Example for calling LoadUsersAllAuthorities function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="LoadUsersAllAuthorities" title="Code Example for calling LoadUsersAllAuthorities function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.RequestData> LoadUsersAllAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAllAuthorities.RequestData>(proxy, proxy.LoadUsersAllAuthorities);
            return s;
        }
        ///<summary> Loads all the authorities for a specified user. </summary>///<param name="request">The wrapper request containing the UsersId.</param>///<returns> The wrapper response containing the user's authorities. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadUsersAuthorities" title="Code Example for calling LoadUsersAuthorities function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\BaseClaim.vb" region="LoadUsersAuthorities" title="Code Example for calling LoadUsersAuthorities function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.RequestData> LoadUsersAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersAuthorities.RequestData>(proxy, proxy.LoadUsersAuthorities);
            return s;
        }
        ///<summary> Loads all users with a specified authority. </summary>///<param name="request">The wrapper request containing Authority group and Authority id.</param>///<returns> The wrapper response containing LoadUsersByAuthority </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUsersByAuthority" title="Code Example for calling LoadUsersByAuthority function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadUsersByAuthority" title="Code Example for calling LoadUsersByAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.RequestData> LoadUsersByAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersByAuthority.RequestData>(proxy, proxy.LoadUsersByAuthority);
            return s;
        }
        ///<summary> Loads the type of the users company branch dept user. </summary>///<param name="request">The wrapper request containing UserID, CBDUserTypeID.</param>///<returns> The wrapper response containing UsersCompanyBranchDeptUserType </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUsersCompanyBranchDeptUserType" title="Code Example for calling LoadUsersCompanyBranchDeptUserType function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadUsersCompanyBranchDeptUserType" title="Code Example for calling LoadUsersCompanyBranchDeptUserType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.RequestData> LoadUsersCompanyBranchDeptUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersCompanyBranchDeptUserType.RequestData>(proxy, proxy.LoadUsersCompanyBranchDeptUserType);
            return s;
        }
        ///<summary> Loads all user security questions. </summary>///<param name="request">The wrapper request containing UserSecurityQuestionID.</param>///<returns> The wrapper response containing UserSecurityQuestion </returns>///<remarks> Can load all user types based on UserSecurityQuestionID </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserSecurityQuestionsControl.vb" region="LoadUserSecurityQuestions" title="Code Example for calling LoadUserSecurityQuestions function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserSecurityQuestionsControl.vb" region="LoadUserSecurityQuestions" title="Code Example for calling LoadUserSecurityQuestions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.RequestData> LoadUserSecurityQuestions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUserSecurityQuestions.RequestData>(proxy, proxy.LoadUserSecurityQuestions);
            return s;
        }
        ///<summary> Return the users in a security group. </summary>///<param name="request">An wrapper request containing the SecurityGroupId of the group.</param>///<returns>The wrapper response containing the collection of users in the group.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.RequestData> LoadUsersInSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersInSecurityGroup.RequestData>(proxy, proxy.LoadUsersInSecurityGroup);
            return s;
        }
        ///<summary> Loads all the user's user security questions. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing the UsersUserSecurityQuestionLink </returns>///<remarks> Can load all the user's user security questions </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserSecurityQuestionsControl.vb" region="LoadUserSecurityQuestions" title="Code Example for calling LoadUserSecurityQuestions function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserSecurityQuestionsControl.vb" region="LoadUserSecurityQuestions" title="Code Example for calling LoadUserSecurityQuestions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.RequestData> LoadUsersUserSecurityQuestionLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.Request, Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.Response, Diamond.Common.Services.Messages.AdministrationService.LoadUsersUserSecurityQuestionLink.RequestData>(proxy, proxy.LoadUsersUserSecurityQuestionLink);
            return s;
        }
        ///<summary> Loads the version. </summary>///<param name="request">The wrapper request containing CompanyStateLOBId.</param>///<returns> The wrapper response containing VersionData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadVersion" title="Code Example for calling LoadVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadVersion" title="Code Example for calling LoadVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadVersion.RequestData> LoadVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadVersion.Request, Diamond.Common.Services.Messages.AdministrationService.LoadVersion.Response, Diamond.Common.Services.Messages.AdministrationService.LoadVersion.RequestData>(proxy, proxy.LoadVersion);
            return s;
        }
        ///<summary> Loads the user. </summary>///<param name="request">The wrapper request containing UserId.</param>///<returns> The wrapper response containing vUsersRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadvUser" title="Code Example for calling LoadvUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="LoadvUser" title="Code Example for calling LoadvUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadvUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadvUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadvUser.RequestData> LoadvUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadvUser.Request, Diamond.Common.Services.Messages.AdministrationService.LoadvUser.Response, Diamond.Common.Services.Messages.AdministrationService.LoadvUser.RequestData>(proxy, proxy.LoadvUser);
            return s;
        }
        ///<summary> Loads the workflow queues. </summary>///<param name="request">The wrapper request containing UserId, CheckAuthority.</param>///<returns> The wrapper response containing WorkflowQueues </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="LoadWorkflowQueues" title="Code Example for calling LoadWorkflowQueues function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="LoadWorkflowQueues" title="Code Example for calling LoadWorkflowQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.RequestData> LoadWorkflowQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.Request, Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.Response, Diamond.Common.Services.Messages.AdministrationService.LoadWorkflowQueues.RequestData>(proxy, proxy.LoadWorkflowQueues);
            return s;
        }
        ///<summary> Loads the zipcode. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing HurricaneZipCodes </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="LoadZipCodes" title="Code Example for calling LoadZipCodes function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="LoadZipCodes" title="Code Example for calling LoadZipCodes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.RequestData> LoadZipCodes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.Request, Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.Response, Diamond.Common.Services.Messages.AdministrationService.LoadZipCodes.RequestData>(proxy, proxy.LoadZipCodes);
            return s;
        }
        ///<summary> Lock box data grid. </summary>///<param name="request">The request containing AccountNumber.</param>///<returns> The wrapper response containing LockBoxDataGrid </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyStateLobLockboxAddressForm.vb" region="LockBoxDataGrid" title="Code Example for calling LockBoxDataGrid function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyStateLobLockboxAddressForm.vb" region="LockBoxDataGrid" title="Code Example for calling LockBoxDataGrid function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.Request, Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.Response, Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.RequestData> LockBoxDataGrid()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.Request, Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.Response, Diamond.Common.Services.Messages.AdministrationService.LockBoxDataGrid.RequestData>(proxy, proxy.LockBoxDataGrid);
            return s;
        }
        ///<summary> Lookups the admin MH park </summary>///<param name="request">The wrapper request containing Field, FieldValue, policy_id, policyimage_num.</param>///<returns> The wrapper response containing AdminMHPark </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkList.vb" region="LookupAdminMHPark" title="Code Example for calling LookupAdminMHPark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkList.vb" region="LookupAdminMHPark" title="Code Example for calling LookupAdminMHPark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.RequestData> LookupAdminMHPark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.LookupAdminMHPark.RequestData>(proxy, proxy.LookupAdminMHPark);
            return s;
        }
        ///<summary> Processes the policies by legal date for cancellation extensions </summary>///<param name="request">The wrapper request containing the legal date and extend to dates to be considered</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CancellationExtension.vb" region="ProcessCancellationExtensionPolicies" title="Code Example for calling ProcessCancellationExtensionPolicies function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CancellationExtension.vb" region="ProcessCancellationExtensionPolicies" title="Code Example for calling ProcessCancellationExtensionPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.RequestData> ProcessCancellationExtensionPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.ProcessCancellationExtensionPolicies.RequestData>(proxy, proxy.ProcessCancellationExtensionPolicies);
            return s;
        }
        ///<summary> Removes data for one-time credit card payments from the database. </summary>///<param name="request">Contains the date to purge through.</param>///<returns>Nothing.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CreditCard\Purge.vb" region="PurgeOneTimePayments" title="Code Example for calling PurgeOneTimePayments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CreditCard\Purge.vb" region="PurgeOneTimePayments" title="Code Example for calling PurgeOneTimePayments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.Request, Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.Response, Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.RequestData> PurgeOneTimePayments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.Request, Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.Response, Diamond.Common.Services.Messages.AdministrationService.PurgeOneTimePayments.RequestData>(proxy, proxy.PurgeOneTimePayments);
            return s;
        }
        ///<summary> Reinsurances the specified request. </summary>///<param name="request">The wrapper request containing ReinsuranceTreaty, ReinsuranceType, ReinsuranceParameterType, ReinsuranceParameter, PremiumBasis, ReinsuranceASL, Display_Name.</param>///<returns> The wrapper response containing Reinsurance </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\Treaty.vb" region="Reinsurance" title="Code Example for calling Reinsurance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Reinsurance\Treaty.vb" region="Reinsurance" title="Code Example for calling Reinsurance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.Reinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.Reinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.Reinsurance.RequestData> Reinsurance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.Reinsurance.Request, Diamond.Common.Services.Messages.AdministrationService.Reinsurance.Response, Diamond.Common.Services.Messages.AdministrationService.Reinsurance.RequestData>(proxy, proxy.Reinsurance);
            return s;
        }
        ///<summary> Removes the agency transfer producer. </summary>///<param name="request">The wrapper request containing AgencyProducerID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RemoveAgencyTransferProducer" title="Code Example for calling RemoveAgencyTransferProducer function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RemoveAgencyTransferProducer" title="Code Example for calling RemoveAgencyTransferProducer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.RequestData> RemoveAgencyTransferProducer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAgencyTransferProducer.RequestData>(proxy, proxy.RemoveAgencyTransferProducer);
            return s;
        }
        ///<summary> Removes the type of the authority from all users in user. </summary>///<param name="request">The wrapper request containing AuthorityId, UsertypeId.</param>///<returns> The wrapper response containing success indicator </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.RequestData> RemoveAuthorityFromAllUsersInUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityFromAllUsersInUserType.RequestData>(proxy, proxy.RemoveAuthorityFromAllUsersInUserType);
            return s;
        }
        ///<summary> Removes an authority from an authority template </summary>///<param name="request">The wrapper request containing the AuthorityTemplateAuthorityRecord.</param>///<returns>The wrapper response containing a success/failure indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.RequestData> RemoveAuthorityTemplateAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplateAuthority.RequestData>(proxy, proxy.RemoveAuthorityTemplateAuthority);
            return s;
        }
        ///<summary> Remove a collection of authority templates from a security group. </summary>///<param name="request">An wrapper request containing the collection of authority templates and the SecurityGroupId of the group.</param>///<returns>The wrapper response containing success/failure status.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.RequestData> RemoveAuthorityTemplatesFromSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveAuthorityTemplatesFromSecurityGroup.RequestData>(proxy, proxy.RemoveAuthorityTemplatesFromSecurityGroup);
            return s;
        }
        ///<summary> Removes the users authority. </summary>///<param name="request">The wrapper request containing UsersAuthorityRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="RemoveUsersAuthority" title="Code Example for calling RemoveUsersAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="RemoveUsersAuthority" title="Code Example for calling RemoveUsersAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.RequestData> RemoveUsersAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersAuthority.RequestData>(proxy, proxy.RemoveUsersAuthority);
            return s;
        }
        ///<summary> Remove a collection of users from a security group. </summary>///<param name="request">An wrapper request containing the collection of DiamondUsers and the SecurityGroupId of the group.</param>///<returns>The wrapper response containing success/failure status.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.RequestData> RemoveUsersFromSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUsersFromSecurityGroup.RequestData>(proxy, proxy.RemoveUsersFromSecurityGroup);
            return s;
        }
        ///<summary> Removes the user type authority. </summary>///<param name="request">The wrapper request containing UserTypeAuthorityRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="RemoveUserTypeAuthority" title="Code Example for calling RemoveUserTypeAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="RemoveUserTypeAuthority" title="Code Example for calling RemoveUserTypeAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.RequestData> RemoveUserTypeAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.RemoveUserTypeAuthority.RequestData>(proxy, proxy.RemoveUserTypeAuthority);
            return s;
        }
        ///<summary> Saves the add forms version. </summary>///<param name="request">The wrapper request containing AddFormsVersion.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\FormsVersionForm.vb" region="SaveAddFormsVersion" title="Code Example for calling SaveAddFormsVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\FormsVersionForm.vb" region="SaveAddFormsVersion" title="Code Example for calling SaveAddFormsVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.RequestData> SaveAddFormsVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAddFormsVersion.RequestData>(proxy, proxy.SaveAddFormsVersion);
            return s;
        }
        ///<summary> Saves the admin MH park. </summary>///<param name="request">The wrapper request containing SaveAdminMHPark.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkForm.vb" region="SaveAdminMHPark" title="Code Example for calling SaveAdminMHPark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\MobileHomePark\MobileHomeParkForm.vb" region="SaveAdminMHPark" title="Code Example for calling SaveAdminMHPark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.RequestData> SaveAdminMHPark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAdminMHPark.RequestData>(proxy, proxy.SaveAdminMHPark);
            return s;
        }
        ///<summary> Saves the agency group. </summary>///<param name="request">A wrapper class for SaveAgencyGroup Request Data containing the AgencyGroupId, AgencyGroupDescription, AgencyGroupAddressExists and AgencyGroupsAddressCollection As DCO.Address values.</param>///<returns>A wrapper response object containing collection of Address object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\EditAgencyGroupForm.vb" region="SaveAgencyGroup" title="Code Example for calling SaveAgencyGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\EditAgencyGroupForm.vb" region="SaveAgencyGroup" title="Code Example for calling SaveAgencyGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgency.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgency.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgency.RequestData> SaveAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgency.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgency.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgency.RequestData>(proxy, proxy.SaveAgency);
            return s;
        }
        ///<summary> Saves the agency book transfer. </summary>///<param name="request">The wrapper request containing the Agency Book Transfer entry and a collection of selected producers.</param>///<returns>The wrapper response containing SaveAgencyBookTransfer</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="SaveAgencyBookTransfer" title="Code Example for calling SaveAgencyBookTransfer function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="SaveAgencyBookTransfer" title="Code Example for calling SaveAgencyBookTransfer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.RequestData> SaveAgencyBookTransfer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransfer.RequestData>(proxy, proxy.SaveAgencyBookTransfer);
            return s;
        }
        ///<summary> Saves agency book transfer plan entries. </summary>///<param name="request">The wrapper request containing the collection of agency book transfer plan entries and the collection of selected agency producers.</param>///<returns>The wrapper response containing a flag indicating if the entries were saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanEditForm.vb" region="SaveAgencyBookTransferPlans" title="Code Example for calling SaveAgencyBookTransferPlans function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanEditForm.vb" region="SaveAgencyBookTransferPlans" title="Code Example for calling SaveAgencyBookTransferPlans function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.RequestData> SaveAgencyBookTransferPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlan.RequestData>(proxy, proxy.SaveAgencyBookTransferPlan);
            return s;
        }
        ///<summary> Saves agency book transfer plan entries. </summary>///<param name="request">The wrapper request containing the collection of agency book transfer plan entries and the collection of selected agency producers.</param>///<returns>The wrapper response containing a flag indicating if the entries were saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanEditForm.vb" region="SaveAgencyBookTransferPlans" title="Code Example for calling SaveAgencyBookTransferPlans function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AgencyBookTransferPlanEditForm.vb" region="SaveAgencyBookTransferPlans" title="Code Example for calling SaveAgencyBookTransferPlans function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.RequestData> SaveAgencyBookTransferPlans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPlans.RequestData>(proxy, proxy.SaveAgencyBookTransferPlans);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.RequestData> SaveAgencyBookTransferPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyBookTransferPolicies.RequestData>(proxy, proxy.SaveAgencyBookTransferPolicies);
            return s;
        }
        ///<summary> Saves the agency commission. </summary>///<param name="request">The wrapper request containing AgencyCommissions, AgencyCommissionId, CompanyStateLobId, AgencyId, AgencyCommissionTypeId, AgencyCommissionType, StartDate.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="SaveAgencyCommission" title="Code Example for calling SaveAgencyCommission function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="SaveAgencyCommission" title="Code Example for calling SaveAgencyCommission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.RequestData> SaveAgencyCommission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommission.RequestData>(proxy, proxy.SaveAgencyCommission);
            return s;
        }
        ///<summary> Saves the agency commission detail. </summary>///<param name="request">The request containing AgencyCommissionDetail, AgencyCommissionId, AgencyCommissionDetailTypeId, Amount.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="SaveAgencyCommissionDetail" title="Code Example for calling SaveAgencyCommissionDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddAgencyCommission.vb" region="SaveAgencyCommissionDetail" title="Code Example for calling SaveAgencyCommissionDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.RequestData> SaveAgencyCommissionDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetail.RequestData>(proxy, proxy.SaveAgencyCommissionDetail);
            return s;
        }
        ///<summary> Saves the type of the agency commission detail. </summary>///<param name="request">The wrapper request containing AgencyCommissionDetail, CompanystatelobId, AgencyCommissionDetailTypeId.</param>///<returns> The wrapper response containing AgencyCommissionDetailTypeId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveAgencyCommissionDetailType" title="Code Example for calling SaveAgencyCommissionDetailType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveAgencyCommissionDetailType" title="Code Example for calling SaveAgencyCommissionDetailType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.RequestData> SaveAgencyCommissionDetailType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyCommissionDetailType.RequestData>(proxy, proxy.SaveAgencyCommissionDetailType);
            return s;
        }
        ///<summary>  SaveAgencyDefaultFee </summary>///<param name="request">AgencyDefaultFee object</param>///<returns> A wrapper returns success indicator  </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.RequestData> SaveAgencyDefaultFee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyDefaultFee.RequestData>(proxy, proxy.SaveAgencyDefaultFee);
            return s;
        }
        ///<summary> Saves the agency group. </summary>///<param name="request">A wrapper class for SaveAgencyGroup Request Data containing the AgencyGroupId, AgencyGroupDescription, AgencyGroupAddressExists and AgencyGroupsAddressCollection As DCO.Address values.</param>///<returns>A wrapper response object containing collection of Address object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\EditAgencyGroupForm.vb" region="SaveAgencyGroup" title="Code Example for calling SaveAgencyGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\EditAgencyGroupForm.vb" region="SaveAgencyGroup" title="Code Example for calling SaveAgencyGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.RequestData> SaveAgencyGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyGroup.RequestData>(proxy, proxy.SaveAgencyGroup);
            return s;
        }
        ///<summary> Saves the agency LOB. </summary>///<param name="request">A request object containing DCO.Policy.Agency.AgencyLob object.</param>///<returns>A response object containing collection of DCO.Policy.Agency.AgencyLob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyLOBForm.vb" region="SaveAgencyLOB1" title="Code Example for calling SaveAgencyLOB function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyLOBForm.vb" region="SaveAgencyLOB1" title="Code Example for calling SaveAgencyLOB function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.RequestData> SaveAgencyLOB()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLOB.RequestData>(proxy, proxy.SaveAgencyLOB);
            return s;
        }
        ///<summary> Saves the agency lob download. </summary>///<param name="request">The wrapper request containing CompanyStateLOBAgency, CompanyId, StateId, LOBId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyLobDownload" title="Code Example for calling SaveAgencyLobDownload function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyLobDownload" title="Code Example for calling SaveAgencyLobDownload function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.RequestData> SaveAgencyLobDownload()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyLobDownload.RequestData>(proxy, proxy.SaveAgencyLobDownload);
            return s;
        }
        ///<summary> Saves the agency other carrier name link. </summary>///<param name="request">The wrapper request containing OtherCarrier.</param>///<returns> The wrapper response containing SaveAgencyOtherCarrierNameLink </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\Select.vb" region="SaveAgencyOtherCarrierNameLink" title="Code Example for calling SaveAgencyOtherCarrierNameLink function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\Select.vb" region="SaveAgencyOtherCarrierNameLink" title="Code Example for calling SaveAgencyOtherCarrierNameLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.RequestData> SaveAgencyOtherCarrierNameLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyOtherCarrierNameLink.RequestData>(proxy, proxy.SaveAgencyOtherCarrierNameLink);
            return s;
        }
        ///<summary> Saves the agency personnel. </summary>///<param name="request">The wrapper request containing UserId, SaveAgencyPersonnel, ASRorUW.</param>///<returns> The wrapper response containing AssignedStatus, SaveAgencyPersonnel </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyPersonnelAssignForm.vb" region="SaveAgencyPersonnel" title="Code Example for calling SaveAgencyPersonnel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\AgencyPersonnelAssignForm.vb" region="SaveAgencyPersonnel" title="Code Example for calling SaveAgencyPersonnel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.RequestData> SaveAgencyPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyPersonnel.RequestData>(proxy, proxy.SaveAgencyPersonnel);
            return s;
        }
        ///<summary> Saves the agency producer. </summary>///<param name="request">The wrapper request containing AgencyProducer.</param>///<returns> The wrapper response containing IsSaveProducer </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyProducer.vb" region="SaveAgencyProducer" title="Code Example for calling SaveAgencyProducer function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyProducer.vb" region="SaveAgencyProducer" title="Code Example for calling SaveAgencyProducer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.RequestData> SaveAgencyProducer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProducer.RequestData>(proxy, proxy.SaveAgencyProducer);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.RequestData> SaveAgencyProfile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyProfile.RequestData>(proxy, proxy.SaveAgencyProfile);
            return s;
        }
        ///<summary> Saves the agency queues. </summary>///<param name="request">The wrapper request containing AgencyID, AgencyQueue.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyQueues" title="Code Example for calling SaveAgencyQueues function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyQueues" title="Code Example for calling SaveAgencyQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.RequestData> SaveAgencyQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyQueues.RequestData>(proxy, proxy.SaveAgencyQueues);
            return s;
        }
        ///<summary> Saves the agency reimbursement. </summary>///<param name="request">The wrapper request containing AgencyReimbursementId, CompanyStateLobReimbursementId, CompanyStateLobId, AgencyId, Amount.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="SaveAgencyReimbursement" title="Code Example for calling SaveAgencyReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyReimbursement.vb" region="SaveAgencyReimbursement" title="Code Example for calling SaveAgencyReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.RequestData> SaveAgencyReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyReimbursement.RequestData>(proxy, proxy.SaveAgencyReimbursement);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.RequestData> SaveAgencySecondaryUnderwriter()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencySecondaryUnderwriter.RequestData>(proxy, proxy.SaveAgencySecondaryUnderwriter);
            return s;
        }
        ///<summary> Saves the agent user's name. </summary>///<param name="request">The wrapper request containing Name.</param>///<returns> The wrapper response containing Name </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyUserName" title="Code Example for calling SaveAgencyUserName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveAgencyUserName" title="Code Example for calling SaveAgencyUserName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.RequestData> SaveAgencyUserName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAgencyUserName.RequestData>(proxy, proxy.SaveAgencyUserName);
            return s;
        }
        ///<summary> Saves an authority template </summary>///<param name="request">A wrapper request containing the unique identifier and description of the authority template.</param>///<returns>The wrapper response containing the added authority template</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.RequestData> SaveAuthorityTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplate.RequestData>(proxy, proxy.SaveAuthorityTemplate);
            return s;
        }
        ///<summary> Save an authority to an authority template </summary>///<param name="request">The wrapper request containing the AuthorityTemplateAuthority record.</param>///<returns>The wrapper response containing a success/failure indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.RequestData> SaveAuthorityTemplateAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveAuthorityTemplateAuthority.RequestData>(proxy, proxy.SaveAuthorityTemplateAuthority);
            return s;
        }
        ///<summary> Saves the bank account. </summary>///<param name="request">The wrapper request containing SaveBankAccount.</param>///<returns> The wrapper response containing BankBillingRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccount.vb" region="SaveBankAccount" title="Code Example for calling SaveBankAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Bank Account\BankAccount.vb" region="SaveBankAccount" title="Code Example for calling SaveBankAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.RequestData> SaveBankAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccount.RequestData>(proxy, proxy.SaveBankAccount);
            return s;
        }
        ///<summary> Saves the bank account company LNK. </summary>///<param name="request">The wrapper request containing BankAccountCompanyLnk.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyBankAccountForm.vb" region="SaveBankAccountCompanyLnk" title="Code Example for calling SaveBankAccountCompanyLnk function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AddCompanyBankAccountForm.vb" region="SaveBankAccountCompanyLnk" title="Code Example for calling SaveBankAccountCompanyLnk function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.RequestData> SaveBankAccountCompanyLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountCompanyLnk.RequestData>(proxy, proxy.SaveBankAccountCompanyLnk);
            return s;
        }
        ///<summary> Saves the bank account lockbox address LNK. </summary>///<param name="request">The wrapper request containing Address, Edit, BankAccountID, LockBoxAddressID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveBankAccountLockboxAddressLnk" title="Code Example for calling SaveBankAccountLockboxAddressLnk function to update and existing Bank Account Lockbox Address"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveBankAccountLockboxAddressLnk" title="Code Example for calling SaveBankAccountLockboxAddressLnk function to update and existing Bank Account Lockbox Address"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.RequestData> SaveBankAccountLockboxAddressLnk()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountLockboxAddressLnk.RequestData>(proxy, proxy.SaveBankAccountLockboxAddressLnk);
            return s;
        }
        ///<summary> Saves the bank account use. </summary>///<param name="request">The wrapper request containing BankAccountUse.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\BankAccountUseForm.vb" region="SaveBankAccountUse" title="Code Example for calling SaveBankAccountUse function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\BankAccountUseForm.vb" region="SaveBankAccountUse" title="Code Example for calling SaveBankAccountUse function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.RequestData> SaveBankAccountUse()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBankAccountUse.RequestData>(proxy, proxy.SaveBankAccountUse);
            return s;
        }
        ///<summary> Saves the billing pay plan installment. </summary>///<param name="request">The wrapper request containing Edit, BillingPayPlanInstallment.</param>///<returns>The wrapper response containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="SaveBillingPayPlanInstallment" title="Code Example for calling SaveBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="SaveBillingPayPlanInstallment" title="Code Example for calling SaveBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.RequestData> SaveBillingPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlan.RequestData>(proxy, proxy.SaveBillingPayPlan);
            return s;
        }
        ///<summary> Saves the billing pay plan installment. </summary>///<param name="request">The wrapper request containing Edit, BillingPayPlanInstallment.</param>///<returns>The wrapper response containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="SaveBillingPayPlanInstallment" title="Code Example for calling SaveBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="SaveBillingPayPlanInstallment" title="Code Example for calling SaveBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.RequestData> SaveBillingPayPlanInstallment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBillingPayPlanInstallment.RequestData>(proxy, proxy.SaveBillingPayPlanInstallment);
            return s;
        }
        ///<summary> Saves the branch. </summary>///<param name="request">The wrapper request containing BranchRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveBranch" title="Code Example for calling SaveBranch function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveBranch" title="Code Example for calling SaveBranch function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBranch.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBranch.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBranch.RequestData> SaveBranch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveBranch.Request, Diamond.Common.Services.Messages.AdministrationService.SaveBranch.Response, Diamond.Common.Services.Messages.AdministrationService.SaveBranch.RequestData>(proxy, proxy.SaveBranch);
            return s;
        }
        ///<summary> Saves the type of the CBD user. </summary>///<param name="request">The wrapper request containing CBDUserTypeRecord.</param>///<returns> The wrapper response containing success indicator, CBDUserTypeRecord </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\AddUsersCompanyBranchDeptUserTypeForm.vb" region="SaveCBDUserType" title="Code Example for calling SaveCBDUserType function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\AddUsersCompanyBranchDeptUserTypeForm.vb" region="SaveCBDUserType" title="Code Example for calling SaveCBDUserType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.RequestData> SaveCBDUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCBDUserType.RequestData>(proxy, proxy.SaveCBDUserType);
            return s;
        }
        ///<summary> Save company setting </summary>///<param name="request"></param>///<returns> The wrapper response containing CompanySetting </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompany.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompany.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompany.RequestData> SaveCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompany.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompany.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompany.RequestData>(proxy, proxy.SaveCompany);
            return s;
        }
        ///<summary> Save company setting </summary>///<param name="request"></param>///<returns> The wrapper response containing CompanySetting </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.RequestData> SaveCompanySetting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySetting.RequestData>(proxy, proxy.SaveCompanySetting);
            return s;
        }
        ///<summary> Save company setting/company link record </summary>///<param name="request"></param>///<returns> The wrapper response containing SaveCompanySettingsCompanyLink </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.RequestData> SaveCompanySettingsCompanyLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanySettingsCompanyLink.RequestData>(proxy, proxy.SaveCompanySettingsCompanyLink);
            return s;
        }
        ///<summary> Saves the company state lob reimbursement. </summary>///<param name="request">The wrapper request containing Reimbursement.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterReimbursementForm.vb" region="SaveCompanyStateLobReimbursement" title="Code Example for calling SaveCompanyStateLobReimbursement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterReimbursementForm.vb" region="SaveCompanyStateLobReimbursement" title="Code Example for calling SaveCompanyStateLobReimbursement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.RequestData> SaveCompanyStateLobReimbursement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.Request, Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.Response, Diamond.Common.Services.Messages.AdministrationService.SaveCompanyStateLobReimbursement.RequestData>(proxy, proxy.SaveCompanyStateLobReimbursement);
            return s;
        }
        ///<summary> Saves the config authority. </summary>///<param name="request">The wrapper request containing ConfigAuthority.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthorityInfo.vb" region="SaveConfigAuthority" title="Code Example for calling SaveConfigAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigAuthorityInfo.vb" region="SaveConfigAuthority" title="Code Example for calling SaveConfigAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.RequestData> SaveConfigAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveConfigAuthority.RequestData>(proxy, proxy.SaveConfigAuthority);
            return s;
        }
        ///<summary> Saves the department. </summary>///<param name="request">The wrapper request containing DepartmentRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveDepartment" title="Code Example for calling SaveDepartment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EnterForm.vb" region="SaveDepartment" title="Code Example for calling SaveDepartment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.Request, Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.Response, Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.RequestData> SaveDepartment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.Request, Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.Response, Diamond.Common.Services.Messages.AdministrationService.SaveDepartment.RequestData>(proxy, proxy.SaveDepartment);
            return s;
        }
        ///<summary> Saves the detail settings version. </summary>///<param name="request">The wrapper request containing DetailsSettings.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\PolicyDetailSettingForm.vb" region="SaveDetailSettingsVersion" title="Code Example for calling SaveDetailSettingsVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\PolicyDetailSettingForm.vb" region="SaveDetailSettingsVersion" title="Code Example for calling SaveDetailSettingsVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.RequestData> SaveDetailSettingsVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveDetailSettingsVersion.RequestData>(proxy, proxy.SaveDetailSettingsVersion);
            return s;
        }
        ///<summary> Saves the EFT account. </summary>///<param name="request">The wrapper request containing AgencyId, IsEdit, SaveEftAccount.</param>///<returns> The wrapper response containing SaveEftAccount </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddOrEditEFTAccount.vb" region="SaveEFTAccount" title="Code Example for calling SaveEFTAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddOrEditEFTAccount.vb" region="SaveEFTAccount" title="Code Example for calling SaveEFTAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.RequestData> SaveEFTAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveEFTAccount.RequestData>(proxy, proxy.SaveEFTAccount);
            return s;
        }
        ///<summary> Saves the employee. </summary>///<param name="request">The wrapper request containing EmployeeRecord.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeInfo.vb" region="SaveEmployee" title="Code Example for calling SaveEmployee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeInfo.vb" region="SaveEmployee" title="Code Example for calling SaveEmployee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.RequestData> SaveEmployee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.Request, Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.Response, Diamond.Common.Services.Messages.AdministrationService.SaveEmployee.RequestData>(proxy, proxy.SaveEmployee);
            return s;
        }
        ///<summary> Saves the holiday. </summary>///<param name="request">The wrapper request containing Holiday.</param>///<returns> The wrapper response containing SaveHoliday </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidayInfo.vb" region="SaveHoliday" title="Code Example for calling SaveHoliday function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidayInfo.vb" region="SaveHoliday" title="Code Example for calling SaveHoliday function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.RequestData> SaveHoliday()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.SaveHoliday.RequestData>(proxy, proxy.SaveHoliday);
            return s;
        }
        ///<summary> Saves the hurricane blackout dates and locations </summary>///<param name="request">The wrapper request containing HurricaneBlackoutSetup, HurricaneBlackoutId.</param>///<returns> The wrapper response containing success indicator, HurricaneBlackoutId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="SaveHurricaneBlackoutDates" title="Code Example for calling SaveHurricaneBlackoutDates function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\HurricaneBlackoutSetup\HurricaneBlackOutDates.vb" region="SaveHurricaneBlackoutDates" title="Code Example for calling SaveHurricaneBlackoutDates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.RequestData> SaveHurricaneBlackoutDates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.Request, Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.Response, Diamond.Common.Services.Messages.AdministrationService.SaveHurricaneBlackoutDates.RequestData>(proxy, proxy.SaveHurricaneBlackoutDates);
            return s;
        }
        ///<summary> Saves the lob. </summary>///<param name="request">A request object containing the LOB to be saved.</param>///<returns>A response object containing boolean indicating success/failure of the save operation and the CompanyId of the LOB saved</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EditLOBForm.vb" region="SaveLob" title="Code Example for calling SaveLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EditLOBForm.vb" region="SaveLob" title="Code Example for calling SaveLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveLOB.Request, Diamond.Common.Services.Messages.AdministrationService.SaveLOB.Response, Diamond.Common.Services.Messages.AdministrationService.SaveLOB.RequestData> SaveLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveLOB.Request, Diamond.Common.Services.Messages.AdministrationService.SaveLOB.Response, Diamond.Common.Services.Messages.AdministrationService.SaveLOB.RequestData>(proxy, proxy.SaveLob);
            return s;
        }
        ///<summary> Saves the lockbox address. </summary>///<param name="request">The wrapper request containing CompanystateLobId, AddressID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLockboxAddress" title="Code Example for calling SaveLockboxAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLockboxAddress" title="Code Example for calling SaveLockboxAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.Request, Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.Response, Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.RequestData> SaveLockboxAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.Request, Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.Response, Diamond.Common.Services.Messages.AdministrationService.SaveLockboxAddress.RequestData>(proxy, proxy.SaveLockboxAddress);
            return s;
        }
        ///<summary> Saves multiple agency book transfer entries. </summary>///<param name="request">The wrapper request containing the collection of agency book transfer entries and the collection of selected agency producers.</param>///<returns>The wrapper response containing a flag indicating if the entries were saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="SaveMultipleAgencyBookTransfers" title="Code Example for calling SaveMultipleAgencyBookTransfers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\MultipleAgencyBookTransferEditForm.vb" region="SaveMultipleAgencyBookTransfers" title="Code Example for calling SaveMultipleAgencyBookTransfers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.RequestData> SaveMultipleAgencyBookTransfers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.Request, Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.Response, Diamond.Common.Services.Messages.AdministrationService.SaveMultipleAgencyBookTransfers.RequestData>(proxy, proxy.SaveMultipleAgencyBookTransfers);
            return s;
        }
        ///<summary> Saves the notes types. </summary>///<param name="request">The wrapper request containing Notes Types.</param>///<returns> The wrapper response containing SaveNotesTypes </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeInfo.vb" region="SaveNotesType" title="Code Example for calling SaveNotesType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\NoteSetup\NoteTypeInfo.vb" region="SaveNotesType" title="Code Example for calling SaveNotesType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.RequestData> SaveNotesType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveNotesType.RequestData>(proxy, proxy.SaveNotesType);
            return s;
        }
        ///<summary> Saves the other carrier. </summary>///<param name="request">The wrapper request containing OtherCarrier.</param>///<returns> The wrapper response containing SaveOtherCarrier </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AddOrEditOtherCarrier.vb" region="SaveOtherCarrier" title="Code Example for calling SaveOtherCarrier function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AddOrEditOtherCarrier.vb" region="SaveOtherCarrier" title="Code Example for calling SaveOtherCarrier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.RequestData> SaveOtherCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.Request, Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.Response, Diamond.Common.Services.Messages.AdministrationService.SaveOtherCarrier.RequestData>(proxy, proxy.SaveOtherCarrier);
            return s;
        }
        ///<summary> Saves a pay plan to the CSL </summary>///<param name="request">The wrapper request containing the pay plan, CSL, policy term, bill method</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\AddEditPayPlanForCompany.vb" region="SavePayPlanToCSL" title="Code Example for calling SavePayPlanToCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\AddEditPayPlanForCompany.vb" region="SavePayPlanToCSL" title="Code Example for calling SavePayPlanToCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.Request, Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.Response, Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.RequestData> SavePayPlanToCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.Request, Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.Response, Diamond.Common.Services.Messages.AdministrationService.SavePayPlanToCSL.RequestData>(proxy, proxy.SavePayPlanToCSL);
            return s;
        }
        ///<summary> Saves payroll deduction information by employer id </summary>///<param name="request">The wrapper request containing employer id</param>///<returns> The wrapper response containing any validation errors </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\PayrollDeductionSetup\AddPayrollDeductionEmployer.vb" region="SavePayrollDeductionEmployer" title="Code Example for calling SavePayrollDeductionEmployer function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\PayrollDeductionSetup\AddPayrollDeductionEmployer.vb" region="SavePayrollDeductionEmployer" title="Code Example for calling SavePayrollDeductionEmployer function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.RequestData> SavePayrollDeductionEmployer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.Request, Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.Response, Diamond.Common.Services.Messages.AdministrationService.SavePayrollDeductionEmployer.RequestData>(proxy, proxy.SavePayrollDeductionEmployer);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.RequestData> SavePolicyPromoCategoryStatic()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoCategoryStatic.RequestData>(proxy, proxy.SavePolicyPromoCategoryStatic);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.RequestData> SavePolicyPromoConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoConfig.RequestData>(proxy, proxy.SavePolicyPromoConfig);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.RequestData> SavePolicyPromoType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyPromoType.RequestData>(proxy, proxy.SavePolicyPromoType);
            return s;
        }
        ///<summary> Saves the policy term. </summary>///<param name="request">The wrapper request containing PolicyTermVersion.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SavePolicyTermVersion" title="Code Example for calling SavePolicyTermVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SavePolicyTermVersion" title="Code Example for calling SavePolicyTermVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.RequestData> SavePolicyTermVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SavePolicyTermVersion.RequestData>(proxy, proxy.SavePolicyTermVersion);
            return s;
        }
        ///<summary> Saves the queue. </summary>///<param name="request">The wrapper request containing WorkflowQueue.</param>///<returns> The wrapper response containing WorkflowQueue1 </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveQueue" title="Code Example for calling SaveQueue function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveQueue" title="Code Example for calling SaveQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveQueue.Request, Diamond.Common.Services.Messages.AdministrationService.SaveQueue.Response, Diamond.Common.Services.Messages.AdministrationService.SaveQueue.RequestData> SaveQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveQueue.Request, Diamond.Common.Services.Messages.AdministrationService.SaveQueue.Response, Diamond.Common.Services.Messages.AdministrationService.SaveQueue.RequestData>(proxy, proxy.SaveQueue);
            return s;
        }
        ///<summary> Saves the rating version. </summary>///<param name="request">A request object containing DCO.Policy.RatingVersion object.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\RatingVersionForm.vb" region="SaveRatingVersion" title="Code Example for calling SaveRatingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\RatingVersionForm.vb" region="SaveRatingVersion" title="Code Example for calling SaveRatingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.RequestData> SaveRatingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveRatingVersion.RequestData>(proxy, proxy.SaveRatingVersion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.RequestData> SaveReinstatementRules()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinstatementRules.RequestData>(proxy, proxy.SaveReinstatementRules);
            return s;
        }
        ///<summary> Saves the reinsurance Policy. </summary>///<param name="request">The wrapper request containing ReinsurancePolicy.</param>///<returns> The wrapper response containing success indicator </returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.RequestData> SaveReinsurancePolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurancePolicy.RequestData>(proxy, proxy.SaveReinsurancePolicy);
            return s;
        }
        ///<summary> Saves the reinsurer company broker. </summary>///<param name="request">The wrapper request containing ReinsurerCompanyBroker.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeInfo.vb" region="SaveEmployee" title="Code Example for calling SaveEmployee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\EmployeeSetup\EmployeeInfo.vb" region="SaveEmployee" title="Code Example for calling SaveEmployee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.RequestData> SaveReinsurerCompanyBroker()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReinsurerCompanyBroker.RequestData>(proxy, proxy.SaveReinsurerCompanyBroker);
            return s;
        }
        ///<summary> Saves the renewal roll on. </summary>///<param name="request">The wrapper request containing EffDate, Increase, CoverageCodeVersionId, AgencyID, IsEdit, CompanyStateLobID.</param>///<returns>A response object containing a boolean indicating success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnEditForm.vb" region="SaveRenewalRollOn" title="Code Example for calling SaveRenewalRollOn function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyRenewalRollOnEditForm.vb" region="SaveRenewalRollOn" title="Code Example for calling SaveRenewalRollOn function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.RequestData> SaveRenewalRollOn()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.Request, Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.Response, Diamond.Common.Services.Messages.AdministrationService.SaveRenewalRollOn.RequestData>(proxy, proxy.SaveRenewalRollOn);
            return s;
        }
        ///<summary> Saves the report. </summary>///<param name="request">The wrapper request containing ReportList, ReportId.</param>///<returns>The wrapper response containing ReportId</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportDetail.vb" region="SaveReport" title="Code Example for calling SaveReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportDetail.vb" region="SaveReport" title="Code Example for calling SaveReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReport.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReport.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReport.RequestData> SaveReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveReport.Request, Diamond.Common.Services.Messages.AdministrationService.SaveReport.Response, Diamond.Common.Services.Messages.AdministrationService.SaveReport.RequestData>(proxy, proxy.SaveReport);
            return s;
        }
        ///<summary> Save or add a security group. </summary>///<param name="request">A wrapper request containing the SecurityGroup to save.  If the SecurityGroupId in the group is not greater than zero, a new group will be added, otherwise the group will be saved.</param>///<returns> The wrapper response containing success/failure status. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.RequestData> SaveSecurityGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSecurityGroup.RequestData>(proxy, proxy.SaveSecurityGroup);
            return s;
        }
        ///<summary> Saves the holiday. </summary>///<param name="request">The wrapper request containing Holiday.</param>///<returns> The wrapper response containing SaveHoliday </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidayInfo.vb" region="SaveHoliday" title="Code Example for calling SaveHoliday function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Holidays\HolidayInfo.vb" region="SaveHoliday" title="Code Example for calling SaveHoliday function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.RequestData> SaveStateHoliday()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.Request, Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.Response, Diamond.Common.Services.Messages.AdministrationService.SaveStateHoliday.RequestData>(proxy, proxy.SaveStateHoliday);
            return s;
        }
        ///<summary> SAves info to the Sublinelobcoveragecodeprogramtypelink table </summary>///<param name="request">none</param>///<returns>The wrapper response object containing lob, coveragecodee and programtype information.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.RequestData> SaveSubLineLobCoverageCodeProgramTypeLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSubLineLobCoverageCodeProgramTypeLink.RequestData>(proxy, proxy.SaveSubLineLobCoverageCodeProgramTypeLink);
            return s;
        }
        ///<summary> Saves the suspense account. </summary>///<param name="request">A wrapper class for SaveSuspenseAccount Request Data containing the SuspenseAccount object and Index, BankId and Add values.</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\SuspenseAccounts\SuspenseAccountSetup.vb" region="SaveSuspenseAccount" title="Code Example for calling SaveSuspenseAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\SuspenseAccounts\SuspenseAccountSetup.vb" region="SaveSuspenseAccount" title="Code Example for calling SaveSuspenseAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.RequestData> SaveSuspenseAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.Request, Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.Response, Diamond.Common.Services.Messages.AdministrationService.SaveSuspenseAccount.RequestData>(proxy, proxy.SaveSuspenseAccount);
            return s;
        }
        ///<summary> Saves the underwriting version. </summary>///<param name="request">The wrapper request containing UnderwritingVersion.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\UnderwritingVersionForm.vb" region="SaveUnderwritingVersion" title="Code Example for calling SaveUnderwritingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\UnderwritingVersionForm.vb" region="SaveUnderwritingVersion" title="Code Example for calling SaveUnderwritingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.RequestData> SaveUnderwritingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUnderwritingVersion.RequestData>(proxy, proxy.SaveUnderwritingVersion);
            return s;
        }
        ///<summary> Saves the specified authority record for the specified user. </summary>///<param name="request">The wrapper request containing UserAuthority record to save.</param>///<returns> The wrapper response containing success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUser.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUser.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUser.RequestData> SaveUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUser.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUser.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUser.RequestData>(proxy, proxy.SaveUser);
            return s;
        }
        ///<summary>  SaveUserGridviewLayouts </summary>///<param name="request">LoadUserGridviewLayouts object</param>///<returns> A collection of user griview layouts </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.RequestData> SaveUserGridviewLayouts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserGridviewLayouts.RequestData>(proxy, proxy.SaveUserGridviewLayouts);
            return s;
        }
        ///<summary> Saves the user queues. </summary>///<param name="request">The wrapper request containing UserQueueRecord, UserID.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="SaveUserQueues" title="Code Example for calling SaveUserQueues function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="SaveUserQueues" title="Code Example for calling SaveUserQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.RequestData> SaveUserQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserQueues.RequestData>(proxy, proxy.SaveUserQueues);
            return s;
        }
        ///<summary> Saves the specified authority record for the specified user. </summary>///<param name="request">The wrapper request containing UserAuthority record to save.</param>///<returns> The wrapper response containing success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.RequestData> SaveUsersAuthorities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthorities.RequestData>(proxy, proxy.SaveUsersAuthorities);
            return s;
        }
        ///<summary> Saves the specified authority record for the specified user. </summary>///<param name="request">The wrapper request containing UserAuthority record to save.</param>///<returns> The wrapper response containing success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUsersAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.RequestData> SaveUsersAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersAuthority.RequestData>(proxy, proxy.SaveUsersAuthority);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.RequestData> SaveUserSecurityQuestion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserSecurityQuestion.RequestData>(proxy, proxy.SaveUserSecurityQuestion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.RequestData> SaveUsersUserSecurityQuestionLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUsersUserSecurityQuestionLink.RequestData>(proxy, proxy.SaveUsersUserSecurityQuestionLink);
            return s;
        }
        ///<summary> Saves the specified authority record for the specified user type. </summary>///<param name="request">The wrapper request containing UserAuthority record to save.</param>///<returns> The wrapper response containing success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUserTypeAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUserTypeAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserType.RequestData> SaveUserType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserType.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserType.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserType.RequestData>(proxy, proxy.SaveUserType);
            return s;
        }
        ///<summary> Saves the specified authority record for the specified user type. </summary>///<param name="request">The wrapper request containing UserAuthority record to save.</param>///<returns> The wrapper response containing success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUserTypeAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SaveUsersAuthority" title="Code Example for calling SaveUserTypeAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.RequestData> SaveUserTypeAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.Request, Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.Response, Diamond.Common.Services.Messages.AdministrationService.SaveUserTypeAuthority.RequestData>(proxy, proxy.SaveUserTypeAuthority);
            return s;
        }
        ///<summary> Saves the version. </summary>///<param name="request">A request object containing Version object</param>///<returns> The wrapper response containing success indicator, CompanyId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EditVersionForm.vb" region="SaveVersion" title="Code Example for calling SaveVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\EditVersionForm.vb" region="SaveVersion" title="Code Example for calling SaveVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveVersion.RequestData> SaveVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveVersion.Request, Diamond.Common.Services.Messages.AdministrationService.SaveVersion.Response, Diamond.Common.Services.Messages.AdministrationService.SaveVersion.RequestData>(proxy, proxy.SaveVersion);
            return s;
        }
        ///<summary> Saves the workflow queue. </summary>///<param name="request">The wrapper request containing WorkflowQueue.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="SaveWorkflowQueue" title="Code Example for calling SaveWorkflowQueue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\WorkFlowQueuesSetup\WorkflowQueuesSetup.vb" region="SaveWorkflowQueue" title="Code Example for calling SaveWorkflowQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.Request, Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.Response, Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.RequestData> SaveWorkflowQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.Request, Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.Response, Diamond.Common.Services.Messages.AdministrationService.SaveWorkflowQueue.RequestData>(proxy, proxy.SaveWorkflowQueue);
            return s;
        }
        ///<summary> Sets the granted authority to default. </summary>///<param name="request">The wrapper request containing UsersCompanyBranchDeptUserTypeID, UserID, UserTypeID, AuthorityGroupID.</param>///<returns> The wrapper response containing UsersAuthority </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SetGrantedAuthorityToDefault" title="Code Example for calling SetGrantedAuthorityToDefault function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\Authority.vb" region="SetGrantedAuthorityToDefault" title="Code Example for calling SetGrantedAuthorityToDefault function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.Request, Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.Response, Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.RequestData> SetGrantedAuthorityToDefault()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.Request, Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.Response, Diamond.Common.Services.Messages.AdministrationService.SetGrantedAuthorityToDefault.RequestData>(proxy, proxy.SetGrantedAuthorityToDefault);
            return s;
        }
        ///<summary> Loads all data to sync diamond database to composer database </summary>///<param name="request">The wrapper request</param>///<returns> The wrapper response containing All data to be put into composer. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.Request, Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.Response, Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.RequestData> SyncDiamondToComposerLoadData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.Request, Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.Response, Diamond.Common.Services.Messages.AdministrationService.SyncDiamondToComposerLoadData.RequestData>(proxy, proxy.SyncDiamondToComposerLoadData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.Request, Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.Response, Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.RequestData> UnlockUserAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.Request, Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.Response, Diamond.Common.Services.Messages.AdministrationService.UnlockUserAccount.RequestData>(proxy, proxy.UnlockUserAccount);
            return s;
        }
        ///<summary> Updates the hurricane blackout policies. </summary>///<param name="request">The wrapper request containing HurricaneBlackoutId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateHurricaneBlackoutPolicies" title="Code Example for calling UpdateHurricaneBlackoutPolicies function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateHurricaneBlackoutPolicies" title="Code Example for calling UpdateHurricaneBlackoutPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.RequestData> UpdateHurricaneBlackoutPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.Request, Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.Response, Diamond.Common.Services.Messages.AdministrationService.UpdateHurricaneBlackoutPolicies.RequestData>(proxy, proxy.UpdateHurricaneBlackoutPolicies);
            return s;
        }
        ///<summary> Updates the non renew blackout policy. </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateNonRenewBlackoutPolicy" title="Code Example for calling UpdateNonRenewBlackoutPolicy function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateNonRenewBlackoutPolicy" title="Code Example for calling UpdateNonRenewBlackoutPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.Request, Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.Response, Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.RequestData> UpdateNonRenewBlackoutPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.Request, Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.Response, Diamond.Common.Services.Messages.AdministrationService.UpdateNonRenewBlackoutPolicy.RequestData>(proxy, proxy.UpdateNonRenewBlackoutPolicy);
            return s;
        }
        ///<summary> Users the code exists. </summary>///<param name="request">The wrapper request containing UserId, UserCode.</param>///<returns>The wrapper response containing Exist</returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="UserCodeExists" title="Code Example for calling UserCodeExists function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="UserCodeExists" title="Code Example for calling UserCodeExists function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.Request, Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.Response, Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.RequestData> UserCodeExists()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.Request, Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.Response, Diamond.Common.Services.Messages.AdministrationService.UserCodeExists.RequestData>(proxy, proxy.UserCodeExists);
            return s;
        }
        ///<summary> Valids the connection for claim exposure version. </summary>///<param name="request">The wrapper request containing VersionId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ValidConnectionForClaimExposureVersion" title="Code Example for calling ValidConnectionForClaimExposureVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ValidConnectionForClaimExposureVersion" title="Code Example for calling ValidConnectionForClaimExposureVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.Request, Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.Response, Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.RequestData> ValidConnectionForClaimExposureVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.Request, Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.Response, Diamond.Common.Services.Messages.AdministrationService.ValidConnectionForClaimExposureVersion.RequestData>(proxy, proxy.ValidConnectionForClaimExposureVersion);
            return s;
        }
        ///<summary> Loads the info needed to view the agencies that are linked to a pay plan/CSL </summary>///<param name="request">The wrapper request containing the pay plan, CSL</param>///<returns>The wrapper response containing a collection of agencies linked</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\ViewAgenciesLinkedToPayPlan.vb" region="ViewAgenciesLinkedToPayPlan" title="Code Example for calling ViewAgenciesLinkedToPayPlan function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompantySetup\ViewAgenciesLinkedToPayPlan.vb" region="ViewAgenciesLinkedToPayPlan" title="Code Example for calling ViewAgenciesLinkedToPayPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.RequestData> ViewAgenciesLinkedToPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.Request, Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.Response, Diamond.Common.Services.Messages.AdministrationService.ViewAgenciesLinkedToPayPlan.RequestData>(proxy, proxy.ViewAgenciesLinkedToPayPlan);
            return s;
        }
    }
    ///<summary> Proxy class for Agency Administration Service for performing operations such Load and Save Agency related data </summary>
    public static class AgencyAdministrationService
    {
        ///<summary> Asynchronously begins the process of downloading the policies for the agencies specified in the list. </summary>///<param name="request">A wrapper class for Request Data containing the from date, to date, download status, in-force only indicator, and the list of <see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" /> objects whose policies should be downloaded.</param>///<see cref="T:Diamond.Common.Objects.Policy.Agency.Agency" />///<returns>A wrapper response object containing the <see cref="P:Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.ResponseData.OperationSuccessful" /> value that indicates if the process has began.</returns>///<see cref="P:Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.ResponseData.OperationSuccessful" />
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.RequestData> BeginDownloadAgencyListProcess()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadAgencyListProcess.RequestData>(proxy, proxy.BeginDownloadAgencyListProcess);
            return s;
        }
        ///<summary> Asynchronously begins the process of downloading the policies specified in the list. </summary>///<param name="request">A wrapper class for Request Data containing the list of <see cref="T:Diamond.Common.Objects.Policy.PolicyKey" /> objects representing the policies to be downloaded.</param>///<see cref="T:Diamond.Common.Objects.Policy.PolicyKey" />///<returns>A wrapper response object containing the <see cref="P:Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.ResponseData.OperationSuccessful" /> value that indicates if the process has began.</returns>///<see cref="P:Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.ResponseData.OperationSuccessful" />
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.RequestData> BeginDownloadPolicyListProcess()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.BeginDownloadPolicyListProcess.RequestData>(proxy, proxy.BeginDownloadPolicyListProcess);
            return s;
        }
        ///<summary> Checks the name of the plan existed by agency ID plan. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId and Description values</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="CheckPlanExistedByAgencyIDPlanName" title="Code Example for calling CheckPlanExistedByAgencyIDPlanName function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="CheckPlanExistedByAgencyIDPlanName" title="Code Example for calling CheckPlanExistedByAgencyIDPlanName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.RequestData> CheckPlanExistedByAgencyIDPlanName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.CheckPlanExistedByAgencyIDPlanName.RequestData>(proxy, proxy.CheckPlanExistedByAgencyIDPlanName);
            return s;
        }
        ///<summary> Deletes the coverage plan. </summary>///<param name="request">A wrapper class for Request Data containing the CoveragePlanId and AgencyId values</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCoveragePlan" title="Code Example for calling DeleteCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCoveragePlan" title="Code Example for calling DeleteCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.RequestData> DeleteCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlan.RequestData>(proxy, proxy.DeleteCoveragePlan);
            return s;
        }
        ///<summary> Deletes the coverage plan details. </summary>///<param name="request">A wrapper class for Request Data containing the CoveragePlanDetail object.</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCoveragePlanDetails" title="Code Example for calling DeleteCoveragePlanDetails function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCoveragePlanDetails" title="Code Example for calling DeleteCoveragePlanDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.RequestData> DeleteCoveragePlanDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DeleteCoveragePlanDetails.RequestData>(proxy, proxy.DeleteCoveragePlanDetails);
            return s;
        }
        ///<summary> Gets the PolicyID. </summary>///<param name="request">A wrapper class for Request Data containing PolicyKey and DiamondValidation object.</param>///<returns>A wrapper response object containing OperationSuccessfull value</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControls\BaseClasses\InsPolicyDetail.vb" region="DownloadOnDemand" title="Code Example for calling DownloadOnDemand function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControls\BaseClasses\InsPolicyDetail.vb" region="DownloadOnDemand" title="Code Example for calling DownloadOnDemand function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.RequestData> DownloadOnDemand()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.DownloadOnDemand.RequestData>(proxy, proxy.DownloadOnDemand);
            return s;
        }
        ///<summary> Gets the agency code by agency ID. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value</param>///<returns>A wrapper response object containing collection of AgencyCode value</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="GetAgencyCodeByAgencyID" title="Code Example for calling GetAgencyCodeByAgencyID function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="GetAgencyCodeByAgencyID" title="Code Example for calling GetAgencyCodeByAgencyID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.RequestData> GetAgencyCodeByAgencyID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyCodeByAgencyID.RequestData>(proxy, proxy.GetAgencyCodeByAgencyID);
            return s;
        }
        ///<summary> Gets the AgencyId, AgencyCode and AgencyName. </summary>///<param name="request">A wrapper class for Request Data containing no value.</param>///<returns>A wrapper response object containing collection of AgencyInfo objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="GetAgencyForDownload" title="Code Example for calling GetAgencyForDownload function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="GetAgencyForDownload" title="Code Example for calling GetAgencyForDownload function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.RequestData> GetAgencyForDownload()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyForDownload.RequestData>(proxy, proxy.GetAgencyForDownload);
            return s;
        }
        ///<summary> Gets the agency ID by policy ID and image num. </summary>///<param name="request">A wrapper class for Request Data containing the PolicyId, PolicyImageNumId values</param>///<returns>A wrapper response object containing collection of PolicyImage objects</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyIDByPolicyIDAndImageNum" title="Code Example for calling GetAgencyIDByPolicyIDAndImageNum function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyIDByPolicyIDAndImageNum" title="Code Example for calling GetAgencyIDByPolicyIDAndImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.RequestData> GetAgencyIDByPolicyIDAndImageNum()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyIDByPolicyIDAndImageNum.RequestData>(proxy, proxy.GetAgencyIDByPolicyIDAndImageNum);
            return s;
        }
        ///<summary> Gets the workflow information specific to the agency code provided. </summary>///<param name="request">A wrapper class for the <see cref="T:Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.RequestData" /> which includes the <c>AgencyCode</c>.</param>///<see cref="T:Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.RequestData" />///<c>AgencyCode</c>///<returns>A wrapper class containing the <see cref="T:Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.ResponseData" /> which returns the <c>AgencyId</c>, <c>WorkflowQueueId</c>, and <c>TransactionUsersId</c> for the specified <c>AgencyCode</c> and <c>WorkflowQueueType</c>.</returns>///<see cref="T:Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.ResponseData" />///<c>AgencyId</c>///<c>WorkflowQueueId</c>///<c>TransactionUsersId</c>///<c>AgencyCode</c>///<c>WorkflowQueueType</c>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.RequestData> GetAgencyWorkflowInfoByCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetAgencyWorkflowInfoByCode.RequestData>(proxy, proxy.GetAgencyWorkflowInfoByCode);
            return s;
        }
        ///<summary> Gets the coverage code limits. </summary>///<param name="request">A wrapper class for Request Data containing the CoverageCodeVersionID and ConnectionId values</param>///<returns>A wrapper response object containing collection of CoverageCodeVersionLimits object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetCoverageCodeLimits" title="Code Example for calling GetCoverageCodeLimits function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetCoverageCodeLimits" title="Code Example for calling GetCoverageCodeLimits function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.RequestData> GetCoverageCodeLimits()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverageCodeLimits.RequestData>(proxy, proxy.GetCoverageCodeLimits);
            return s;
        }
        ///<summary> Gets the coverages. </summary>///<param name="request">A wrapper class for Request Data containing the VersionId and ConnectionId values</param>///<returns>A wrapper response object containing collection of CoverageCodeVersion object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetCoverages" title="Code Example for calling GetCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetCoverages" title="Code Example for calling GetCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.RequestData> GetCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetCoverages.RequestData>(proxy, proxy.GetCoverages);
            return s;
        }
        ///<summary> Gets the lob connection type id for version id. </summary>///<param name="request">A wrapper class for Request Data containing the VersionId and ConnectionType values</param>///<returns>A wrapper response object containing ConnectionType value</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetLobConnectionTypeIdForVersionId" title="Code Example for calling GetLobConnectionTypeIdForVersionId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetLobConnectionTypeIdForVersionId" title="Code Example for calling GetLobConnectionTypeIdForVersionId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.RequestData> GetLobConnectionTypeIdForVersionId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetLobConnectionTypeIdForVersionId.RequestData>(proxy, proxy.GetLobConnectionTypeIdForVersionId);
            return s;
        }
        ///<summary> Gets the coverage code limits. </summary>///<param name="request">A wrapper class for Request Data containing the VersionID and StoredProcedureName values</param>///<returns>A wrapper response object containing collection of CoveragePlanOtherDefaultOptions object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetOtherDefaultsOptions" title="Code Example for calling GetOtherDefaultsOptions function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetOtherDefaultsOptions" title="Code Example for calling GetOtherDefaultsOptions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.RequestData> GetOtherDefaults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaults.RequestData>(proxy, proxy.GetOtherDefaults);
            return s;
        }
        ///<summary> Gets the coverage code limits. </summary>///<param name="request">A wrapper class for Request Data containing the VersionID and StoredProcedureName values</param>///<returns>A wrapper response object containing collection of CoveragePlanOtherDefaultOptions object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetOtherDefaultsOptions" title="Code Example for calling GetOtherDefaultsOptions function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="GetOtherDefaultsOptions" title="Code Example for calling GetOtherDefaultsOptions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.RequestData> GetOtherDefaultsOptions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetOtherDefaultsOptions.RequestData>(proxy, proxy.GetOtherDefaultsOptions);
            return s;
        }
        ///<summary> Gets the PolicySummary object. </summary>///<param name="request">A wrapper class for Request Data containing AgencyId, StartDate, EndDate, DownloadStatusId and InForceOnly values.</param>///<returns>A wrapper response object containing collection of PolicySummary objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="GetPolicyFromAgency" title="Code Example for calling GetPolicyFromAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="GetPolicyFromAgency" title="Code Example for calling GetPolicyFromAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.RequestData> GetPolicyFromAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.GetPolicyFromAgency.RequestData>(proxy, proxy.GetPolicyFromAgency);
            return s;
        }
        ///<summary> Loads the agency default data. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value</param>///<returns>A wrapper response object containing collection of AgencyDefault object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAgencyDefaultData" title="Code Example for calling LoadAgencyDefaultData function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAgencyDefaultData" title="Code Example for calling LoadAgencyDefaultData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.RequestData> LoadAgencyDefaultData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyDefaultData.RequestData>(proxy, proxy.LoadAgencyDefaultData);
            return s;
        }
        ///<summary> Loads the agency static data. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value</param>///<returns>A wrapper response object containing collection of AgencyStaticInfo object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAgencyStaticData" title="Code Example for calling LoadAgencyStaticData function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAgencyStaticData" title="Code Example for calling LoadAgencyStaticData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.RequestData> LoadAgencyStaticData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAgencyStaticData.RequestData>(proxy, proxy.LoadAgencyStaticData);
            return s;
        }
        ///<summary> Loads all coverage plans for an agency. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAllCoveragePlansForAnAgency" title="Code Example for calling LoadAllCoveragePlansForAnAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadAllCoveragePlansForAnAgency" title="Code Example for calling LoadAllCoveragePlansForAnAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.RequestData> LoadAllCoveragePlansForAnAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgency.RequestData>(proxy, proxy.LoadAllCoveragePlansForAnAgency);
            return s;
        }
        ///<summary> Loads all coverage plans for an agency and version_id. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllCoveragePlansForAnAgencyAndVersion" title="Code Example for calling LoadAllCoveragePlansForAnAgencyAndVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllCoveragePlansForAnAgencyAndVersion" title="Code Example for calling LoadAllCoveragePlansForAnAgencyAndVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.RequestData> LoadAllCoveragePlansForAnAgencyAndVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadAllCoveragePlansForAnAgencyAndVersion.RequestData>(proxy, proxy.LoadAllCoveragePlansForAnAgencyAndVersion);
            return s;
        }
        ///<summary> Loads the company state lob I ds by version. </summary>///<param name="request">A wrapper class for Request Data containing the VersionId value</param>///<returns>A wrapper response object containing collection of Version object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCompanyStateLobIDsByVersion" title="Code Example for calling LoadCompanyStateLobIDsByVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCompanyStateLobIDsByVersion" title="Code Example for calling LoadCompanyStateLobIDsByVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.RequestData> LoadCompanyStateLobIDsByVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCompanyStateLobIDsByVersion.RequestData>(proxy, proxy.LoadCompanyStateLobIDsByVersion);
            return s;
        }
        ///<summary> Loads the copy plan agency info. </summary>///<param name="request">A wrapper class for Request Data containing the LobId value</param>///<returns>A wrapper response object containing collection of CopyPlanAgencyInfo object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="LoadCopyPlanAgencyInfo" title="Code Example for calling LoadCopyPlanAgencyInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\CopyPlanForm.vb" region="LoadCopyPlanAgencyInfo" title="Code Example for calling LoadCopyPlanAgencyInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.RequestData> LoadCopyPlanAgencyInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCopyPlanAgencyInfo.RequestData>(proxy, proxy.LoadCopyPlanAgencyInfo);
            return s;
        }
        ///<summary> Loads the coverage plan details. </summary>///<param name="request">A wrapper class for Request Data containing the CoveragePlanId, VersionId and ConnectionId values</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlanDetail object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCoveragePlanDetails" title="Code Example for calling LoadCoveragePlanDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCoveragePlanDetails" title="Code Example for calling LoadCoveragePlanDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.RequestData> LoadCoveragePlanDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCoveragePlanDetails.RequestData>(proxy, proxy.LoadCoveragePlanDetails);
            return s;
        }
        ///<summary> Loads the CSL. </summary>///<param name="request">A wrapper class for Request Data containing the CompanyId, StateId and LobId values</param>///<returns>A wrapper response object containing collection of CompanyStateLobID value</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCSL" title="Code Example for calling LoadCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadCSL" title="Code Example for calling LoadCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.RequestData> LoadCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadCSL.RequestData>(proxy, proxy.LoadCSL);
            return s;
        }
        ///<summary> Loads a Automobile policy image with default coverage information </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultAutomobileCoveragePlan" title="Code Example for calling LoadDefaultAutomobileCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultAutomobileCoveragePlan" title="Code Example for calling LoadDefaultAutomobileCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.RequestData> LoadDefaultAutomobileCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultAutomobileCoveragePlan.RequestData>(proxy, proxy.LoadDefaultAutomobileCoveragePlan);
            return s;
        }
        ///<summary> Loads a Dwelling policy image with default coverage information </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultDwellingCoveragePlan" title="Code Example for calling LoadDefaultDwellingCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultDwellingCoveragePlan" title="Code Example for calling LoadDefaultDwellingCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.RequestData> LoadDefaultDwellingCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultDwellingCoveragePlan.RequestData>(proxy, proxy.LoadDefaultDwellingCoveragePlan);
            return s;
        }
        ///<summary> Loads a Homeonwer policy image with default coverage information </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultHomeownerCoveragePlan" title="Code Example for calling LoadDefaultHomeownerCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultHomeownerCoveragePlan" title="Code Example for calling LoadDefaultHomeownerCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.RequestData> LoadDefaultHomeownerCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultHomeownerCoveragePlan.RequestData>(proxy, proxy.LoadDefaultHomeownerCoveragePlan);
            return s;
        }
        ///<summary> Loads an Umbrella policy image with default coverage information </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultUmbrellaCoveragePlan" title="Code Example for calling LoadDefaultUmbrellaCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultUmbrellaCoveragePlan" title="Code Example for calling LoadDefaultUmbrellaCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.RequestData> LoadDefaultUmbrellaCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultUmbrellaCoveragePlan.RequestData>(proxy, proxy.LoadDefaultUmbrellaCoveragePlan);
            return s;
        }
        ///<summary> Loads a watercraft policy image with default coverage information </summary>///<param name="request">A wrapper class for Request Data containing the AgencyID value and version_id</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultWatercraftCoveragePlan" title="Code Example for calling LoadDefaultWatercraftCoveragePlan function for existing watercraft"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadDefaultWatercraftCoveragePlan" title="Code Example for calling LoadDefaultWatercraftCoveragePlan function for existing watercraft"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.RequestData> LoadDefaultWatercraftCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadDefaultWatercraftCoveragePlan.RequestData>(proxy, proxy.LoadDefaultWatercraftCoveragePlan);
            return s;
        }
        ///<summary> Loads the latest version by CSL. </summary>///<param name="request">A wrapper class for Request Data containing the CompanyId, StateId and LobId values</param>///<returns>A wrapper response object containing collection of VersionId value</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadLatestVersionByCSL" title="Code Example for calling LoadLatestVersionByCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadLatestVersionByCSL" title="Code Example for calling LoadLatestVersionByCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.RequestData> LoadLatestVersionByCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadLatestVersionByCSL.RequestData>(proxy, proxy.LoadLatestVersionByCSL);
            return s;
        }
        ///<summary> Loads the specific plan. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId and PlanName values</param>///<returns>A wrapper response object containing collection of AgencyCoveragePlan object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadSpecificPlan" title="Code Example for calling LoadSpecificPlan function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="LoadSpecificPlan" title="Code Example for calling LoadSpecificPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.RequestData> LoadSpecificPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadSpecificPlan.RequestData>(proxy, proxy.LoadSpecificPlan);
            return s;
        }
        ///<summary> Loads the versions by CSL. </summary>///<param name="request">A wrapper class for Request Data containing the CompanyId, StateId and LobId values</param>///<returns>A wrapper response object containing collection of Version object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadVersionsByCSL" title="Code Example for calling LoadVersionsByCSL function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadVersionsByCSL" title="Code Example for calling LoadVersionsByCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.RequestData> LoadVersionsByCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.LoadVersionsByCSL.RequestData>(proxy, proxy.LoadVersionsByCSL);
            return s;
        }
        ///<summary> Saves the agency data. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyInfo object</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="SaveAgencyData" title="Code Example for calling SaveAgencyData function"></code></example>///<code lang="vbnet" source="Diamond\UI\AgencyAdministration\AgencyAdminMdiParentForm.vb" region="SaveAgencyData" title="Code Example for calling SaveAgencyData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.RequestData> SaveAgencyData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveAgencyData.RequestData>(proxy, proxy.SaveAgencyData);
            return s;
        }
        ///<summary> Saves the coverage plan details. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId, CoveragePlanDescription values and CoveragePlanDetail object</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveCoveragePlanDetails" title="Code Example for calling SaveCoveragePlanDetails function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveCoveragePlanDetails" title="Code Example for calling SaveCoveragePlanDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.RequestData> SaveCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlan.RequestData>(proxy, proxy.SaveCoveragePlan);
            return s;
        }
        ///<summary> Saves the coverage plan details. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId, CoveragePlanDescription values and CoveragePlanDetail object</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveCoveragePlanDetails" title="Code Example for calling SaveCoveragePlanDetails function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveCoveragePlanDetails" title="Code Example for calling SaveCoveragePlanDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.RequestData> SaveCoveragePlanDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveCoveragePlanDetails.RequestData>(proxy, proxy.SaveCoveragePlanDetails);
            return s;
        }
        ///<summary> Saves the specific coverage plan. </summary>///<param name="request">A wrapper class for Request Data containing the AgencyId value and AgencyCoveragePlan object</param>///<returns>A wrapper response object containing a boolean value indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\Business\AgencyAdministrator\AgencyAdministration.vb" region="SaveSpecificCoveragePlan" title="Code Example for calling SaveSpecificCoveragePlan function"></code></example>///<code lang="vbnet" source="Diamond\Business\AgencyAdministrator\AgencyAdministration.vb" region="SaveSpecificCoveragePlan" title="Code Example for calling SaveSpecificCoveragePlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.RequestData> SaveSpecificCoveragePlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AgencyAdministrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.Request, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.Response, Diamond.Common.Services.Messages.AgencyAdministrationService.SaveSpecificCoveragePlan.RequestData>(proxy, proxy.SaveSpecificCoveragePlan);
            return s;
        }
    }
    ///<summary> Proxy class for Attachment Service </summary>
    public static class AttachmentService
    {
        ///<summary> Attaches the file at a specific level such as Policy, Client, Claimant etc </summary>///<param name="Keys">Collection of AttachKeys object containing info such as DisplayLevel, AttachmentLevel etc</param>///<param name="Dscr">The Description.</param>///<param name="AttachData">The attachment.</param>///<param name="fileName">Name of the file to be attached.</param>///<returns>A response object containing a boolean indicating success/failure of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="AttachFile" title="Code Example for calling AttachFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="AttachFile" title="Code Example for calling AttachFile function"></code>///<remarks> Set Keys.LevelDisplay to appropriate value to display attachments at/above/below that level.  For example, if Keys.AttachmentLevel = DCE.AttachmentType.Policy_Attachment and Keys.LevelDisplay = DCE.Attachments.LevelDisplay.This_Level_Up then all attachments at Client_Level (level above policy) are retrieved </remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.AttachFile.Request, Diamond.Common.Services.Messages.AttachmentService.AttachFile.Response, Diamond.Common.Services.Messages.AttachmentService.AttachFile.RequestData> AttachFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.AttachFile.Request, Diamond.Common.Services.Messages.AttachmentService.AttachFile.Response, Diamond.Common.Services.Messages.AttachmentService.AttachFile.RequestData>(proxy, proxy.AttachFile);
            return s;
        }
        ///<summary> Creates a letter using the specified document. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.CreateLetter.Request, Diamond.Common.Services.Messages.AttachmentService.CreateLetter.Response, Diamond.Common.Services.Messages.AttachmentService.CreateLetter.RequestData> CreateLetter()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.CreateLetter.Request, Diamond.Common.Services.Messages.AttachmentService.CreateLetter.Response, Diamond.Common.Services.Messages.AttachmentService.CreateLetter.RequestData>(proxy, proxy.CreateLetter);
            return s;
        }
        ///<summary> Deletes the attachment. </summary>///<param name="Attachment_id">The Attachment id.</param>///<returns>A boolean indicating the success/failure of the DeleteAttachment operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="DeleteAttachment" title="Code Example for calling DeleteAttachment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="DeleteAttachment" title="Code Example for calling DeleteAttachment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.RequestData> DeleteAttachment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteAttachment.RequestData>(proxy, proxy.DeleteAttachment);
            return s;
        }
        ///<summary> Deletes the <see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs" /> using the specified DocumentId. </summary>///<see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs" />///<param name="request">A wrapper object containing the DocumentId.</param>///<returns>A wrapper object containing a flag that indicates the document was successfully deleted.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.RequestData> DeleteWriteLetterDocument()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterDocument.RequestData>(proxy, proxy.DeleteWriteLetterDocument);
            return s;
        }
        ///<summary> Deletes the <see cref="T:Diamond.Common.Objects.WriteLetter.WordTemplate" /> using the specified TemplateId. </summary>///<see cref="T:Diamond.Common.Objects.WriteLetter.WordTemplate" />///<param name="request">A wrapper object containing the TemplateId.</param>///<returns>A wrapper object containing a flag that indicates the template was successfully deleted.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.RequestData> DeleteWriteLetterTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.DeleteWriteLetterTemplate.RequestData>(proxy, proxy.DeleteWriteLetterTemplate);
            return s;
        }
        ///<summary> Determines if the specified policy has any attachments. </summary>///<param name="request">A wrapper object containing the policy id.</param>///<returns>A wrapper object containing a flag that indicates the policy has attachments.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DoesPolicyHaveAttachments" title="Code Example for calling DoesPolicyHaveAttachments function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DoesPolicyHaveAttachments" title="Code Example for calling DoesPolicyHaveAttachments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.Request, Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.Response, Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.RequestData> DoesPolicyHaveAttachments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.Request, Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.Response, Diamond.Common.Services.Messages.AttachmentService.DoesPolicyHaveAttachments.RequestData>(proxy, proxy.DoesPolicyHaveAttachments);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.Request, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.Response, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.RequestData> GetAttachmentDiaryAutomaticAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.Request, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.Response, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentDiaryAutomaticAssignment.RequestData>(proxy, proxy.GetAttachmentDiaryAutomaticAssignment);
            return s;
        }
        ///<summary>  Gets attachment claim levels to pssible attach at. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.Request, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.Response, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.RequestData> GetAttachmentLevelsForClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.Request, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.Response, Diamond.Common.Services.Messages.AttachmentService.GetAttachmentLevelsForClaim.RequestData>(proxy, proxy.GetAttachmentLevelsForClaim);
            return s;
        }
        ///<summary> Loads information for an existing document created using Write Letter. </summary>///<param name="request">A wrapper object containing the document id and other details</param>///<returns>A wrapper object containing an indicator indicating the success/failure of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="GetLetterData" title="Code Example for calling GetLetterData function"></code>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="BuildGetLetterDataRequest" title="Code Example for setting up the values in Request object"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="GetLetterData" title="Code Example for calling GetLetterData function"></code>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="BuildGetLetterDataRequest" title="Code Example for setting up the values in Request object"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetLetterData.Request, Diamond.Common.Services.Messages.AttachmentService.GetLetterData.Response, Diamond.Common.Services.Messages.AttachmentService.GetLetterData.RequestData> GetLetterData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.GetLetterData.Request, Diamond.Common.Services.Messages.AttachmentService.GetLetterData.Response, Diamond.Common.Services.Messages.AttachmentService.GetLetterData.RequestData>(proxy, proxy.GetLetterData);
            return s;
        }
        ///<summary> Loads all existing templates that are already in the system. </summary>///<param name="request">A wrapper object containing the request</param>///<returns>A wrapper object containing a collection of the existing templates.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\SelectLevelControl.vb" region="LoadAllExistingTemplates" title="Code Example for calling LoadAllExistingTemplates function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\SelectLevelControl.vb" region="LoadAllExistingTemplates" title="Code Example for calling LoadAllExistingTemplates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.RequestData> LoadAllExistingTemplates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAllExistingTemplates.RequestData>(proxy, proxy.LoadAllExistingTemplates);
            return s;
        }
        ///<summary> Loads the attachment. </summary>///<param name="request">The wrapper request containing AttachmentId.</param>///<returns>The wrapper response containing Attachment</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadAttachment" title="Code Example for calling LoadAttachment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadAttachment" title="Code Example for calling LoadAttachment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.RequestData> LoadAttachment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachment.RequestData>(proxy, proxy.LoadAttachment);
            return s;
        }
        ///<summary> Loads all current attachment types </summary>///<param name="request">Wrapper contains nothing.</param>///<returns> The wrapper response containing collection of AttachmentTypes </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AttachmentType.vb" region="LoadAttachmentTypes" title="Code Example for calling LoadAttachmentTypes function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AttachmentType.vb" region="LoadAttachmentTypes" title="Code Example for calling LoadAttachmentTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.RequestData> LoadAttachmentTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypes.RequestData>(proxy, proxy.LoadAttachmentTypes);
            return s;
        }
        ///<summary> Loads all attachment types for a given attachment level </summary>///<param name="request">The wrapper request containing a AttachmentLevelId value.</param>///<returns> A collection of AttachmentType objects </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\UpdateAttachmentForm.vb" region="LoadAttachmentTypesByLevel" title="Code Example for calling LoadAttachmentTypesByLevel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\UpdateAttachmentForm.vb" region="LoadAttachmentTypesByLevel" title="Code Example for calling LoadAttachmentTypesByLevel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.RequestData> LoadAttachmentTypesByLevel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAttachmentTypesByLevel.RequestData>(proxy, proxy.LoadAttachmentTypesByLevel);
            return s;
        }
        ///<summary> Loads the template fields that are available for the specified attachment level. </summary>///<param name="request">A wrapper object containing the level to use for loading the available fields.</param>///<returns>A wrapper object containing collection of fields that are available for the specified level.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\TemplateWizardControls\SelectFieldsControl.vb" region="LoadAvailableTemplateFields" title="Code Example for calling LoadAvailableTemplateFields function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\TemplateWizardControls\SelectFieldsControl.vb" region="LoadAvailableTemplateFields" title="Code Example for calling LoadAvailableTemplateFields function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.RequestData> LoadAvailableTemplateFields()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.Request, Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.Response, Diamond.Common.Services.Messages.AttachmentService.LoadAvailableTemplateFields.RequestData>(proxy, proxy.LoadAvailableTemplateFields);
            return s;
        }
        ///<summary> Loads a list of claim attachments </summary>///<param name="request">A wrapper object containing the attachment list.</param>///<returns>A wrapper object containing operation result.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.Request, Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.Response, Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.RequestData> LoadClaimAttachmentList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.Request, Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.Response, Diamond.Common.Services.Messages.AttachmentService.LoadClaimAttachmentList.RequestData>(proxy, proxy.LoadClaimAttachmentList);
            return s;
        }
        ///<summary> Loads the fields that are already setup for the specified template id. </summary>///<param name="request">A wrapper object containing the template id to use when loading the existing fields.</param>///<returns>A wrapper object containing collection of the existing fields for the specified template id.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExistingTemplateFields" title="Code Example for calling LoadExistingTemplateFields function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExistingTemplateFields" title="Code Example for calling LoadExistingTemplateFields function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.Request, Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.Response, Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.RequestData> LoadExistingTemplateFields()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.Request, Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.Response, Diamond.Common.Services.Messages.AttachmentService.LoadExistingTemplateFields.RequestData>(proxy, proxy.LoadExistingTemplateFields);
            return s;
        }
        ///<summary> Loads collection of attachments attached at certain level. </summary>///<param name="request">The wrapper request containing the keys to be used for loading the list of attachments.</param>///<returns>Collection of <see cref="T:Diamond.Common.Objects.Attachments.AttachListItem" /> objects.</returns>///<see cref="T:Diamond.Common.Objects.Attachments.AttachListItem" />///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="LoadForList" title="Code Example for calling LoadForList function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="LoadForList" title="Code Example for calling LoadForList function"></code>///<remarks> Populate corresponding Id value in Keys for the level being searched. For example, if all attachments at Policy_Level needs to be retrieved set Keys.AttachmentLevel = DCE.AttachmentType.Policy_Attachment and the Keys.PolicyId = ID <para> The LevelDisplay property of the Keys property in the request can be used to include additional levels in the search. For example, setting the LevelDisplay property to a value of <see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Down" /> for policy attachments will load all attachments for the policy as well as attachments for every level underneath the policy (e.g. Claims, Claimants, etc). The default for the LevelDisplay property is <see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Only" />. </para></remarks>///<para> The LevelDisplay property of the Keys property in the request can be used to include additional levels in the search. For example, setting the LevelDisplay property to a value of <see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Down" /> for policy attachments will load all attachments for the policy as well as attachments for every level underneath the policy (e.g. Claims, Claimants, etc). The default for the LevelDisplay property is <see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Only" />. </para>///<see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Down" />///<see cref="F:Diamond.Common.Enums.Attachments.LevelDisplay.This_Level_Only" />
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadForList.Request, Diamond.Common.Services.Messages.AttachmentService.LoadForList.Response, Diamond.Common.Services.Messages.AttachmentService.LoadForList.RequestData> LoadForList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadForList.Request, Diamond.Common.Services.Messages.AttachmentService.LoadForList.Response, Diamond.Common.Services.Messages.AttachmentService.LoadForList.RequestData>(proxy, proxy.LoadForList);
            return s;
        }
        ///<summary> Loads the info for attachment. </summary>///<param name="attachmentId">The attachment id.</param>///<returns>A response object containing Attachment to be loaded</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadInfo" title="Code Example for calling LoadInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadInfo" title="Code Example for calling LoadInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadInfo.Request, Diamond.Common.Services.Messages.AttachmentService.LoadInfo.Response, Diamond.Common.Services.Messages.AttachmentService.LoadInfo.RequestData> LoadInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadInfo.Request, Diamond.Common.Services.Messages.AttachmentService.LoadInfo.Response, Diamond.Common.Services.Messages.AttachmentService.LoadInfo.RequestData>(proxy, proxy.LoadInfo);
            return s;
        }
        ///<summary> Loads the letter templates. </summary>///<param name="request">The wrapper request containing attachment Level</param>///<returns>The wrapper response containing a collection of the documents for the specified attachment level.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadLetterTemplates" title="Code Example for calling LoadLetterTemplates function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\InsAttachments.vb" region="LoadLetterTemplates" title="Code Example for calling LoadLetterTemplates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.RequestData> LoadLetterTemplates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.LoadLetterTemplate.RequestData>(proxy, proxy.LoadLetterTemplates);
            return s;
        }
        ///<summary> Loads all of the <see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs" /> that are currently in the system. </summary>///<see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs" />///<param name="request">A wrapper object.</param>///<returns>A wrapper object containing the collection of <see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs"></see> documents in the system.</returns>///<see cref="T:Diamond.Common.Objects.WriteLetter.WordDocs"></see>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\DocumentListUserControl.vb" region="LoadWriteLetterDocuments" title="Code Example for calling LoadWriteLetterDocuments function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\DocumentListUserControl.vb" region="LoadWriteLetterDocuments" title="Code Example for calling LoadWriteLetterDocuments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.Request, Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.Response, Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.RequestData> LoadWriteLetterDocuments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.Request, Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.Response, Diamond.Common.Services.Messages.AttachmentService.LoadWriteLetterDocuments.RequestData>(proxy, proxy.LoadWriteLetterDocuments);
            return s;
        }
        ///<summary> Saves a single attachment type </summary>///<param name="request">The wrapper request containing a single Attachment Type object.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AttachmentTypeInfo.vb" region="SaveAttachmentType" title="Code Example for calling SaveAttachmentType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AttachmentTypeInfo.vb" region="SaveAttachmentType" title="Code Example for calling SaveAttachmentType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.Request, Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.Response, Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.RequestData> SaveAttachmentType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.Request, Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.Response, Diamond.Common.Services.Messages.AttachmentService.SaveAttachmentType.RequestData>(proxy, proxy.SaveAttachmentType);
            return s;
        }
        ///<summary> Saves the specified document. </summary>///<param name="request">A wrapper object containing the document to be saved.</param>///<returns>A wrapper object containing operation result.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\DocumentWizardControls\FinishControl.vb" region="SaveDocumentData" title="Code Example for calling SaveDocumentData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\DocumentWizardControls\FinishControl.vb" region="SaveDocumentData" title="Code Example for calling SaveDocumentData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.Request, Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.Response, Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.RequestData> SaveDocumentData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.Request, Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.Response, Diamond.Common.Services.Messages.AttachmentService.SaveDocumentData.RequestData>(proxy, proxy.SaveDocumentData);
            return s;
        }
        ///<summary> Saves the specified letter template. </summary>///<param name="request">A wrapper object containing the template to save.</param>///<returns>A wrapper object containing indicator whether the template was successfully saved or not.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\TemplateWizardControls\FinishControl.vb" region="SaveLetterTemplate" title="Code Example for calling SaveLetterTemplate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Attachments\WriteLetter\Controls\TemplateWizardControls\FinishControl.vb" region="SaveLetterTemplate" title="Code Example for calling SaveLetterTemplate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.RequestData> SaveLetterTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.Request, Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.Response, Diamond.Common.Services.Messages.AttachmentService.SaveLetterTemplate.RequestData>(proxy, proxy.SaveLetterTemplate);
            return s;
        }
        ///<summary> Updates an existing attachment with the specified data. </summary>///<param name="request">A wrapper object containing the unique identifier and data for the attachment to be updated.</param>///<returns>A wrapper object containing a flag that indicates the attachment was successfully updated.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Diamond\ApplicationEvents.vb" region="UpdateAttachment" title="Code Example for calling UpdateAttachment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Diamond\ApplicationEvents.vb" region="UpdateAttachment" title="Code Example for calling UpdateAttachment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.RequestData> UpdateAttachment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.Request, Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.Response, Diamond.Common.Services.Messages.AttachmentService.UpdateAttachment.RequestData>(proxy, proxy.UpdateAttachment);
            return s;
        }
        ///<summary> Updates an existing attachment with the user category links. </summary>///<param name="request">A wrapper object containing the unique identifier and the user categories to be linked.</param>///<example>  <code lang="vbnet" source="Diamond\UI\Diamond\ApplicationEvents.vb" region="UpdateAttachment" title="Code Example for calling UpdateAttachment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Diamond\ApplicationEvents.vb" region="UpdateAttachment" title="Code Example for calling UpdateAttachment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.Request, Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.Response, Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.RequestData> UpdateUserCategories()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AttachmentServices.AttachmentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.Request, Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.Response, Diamond.Common.Services.Messages.AttachmentService.UpdateUserCategories.RequestData>(proxy, proxy.UpdateUserCategories);
            return s;
        }
    }
    ///<summary> Proxy class for Personal Auto Service </summary>
    public static class AutoService
    {
        ///<summary> Replaces the vehicle. </summary>///<param name="vehicles">The vehicles.</param>///<param name="policyId">The policy id.</param>///<param name="imageNum">The image num.</param>///<param name="drivers">The drivers.</param>///<param name="vehicleNum">The vehicle num.</param>///<param name="Errors">The errors.</param>///<returns>A boolean indicating success/failure of the replacevehicle operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\Vehicle\VehicleInformation.vb" region="ReplaceVehicle" title="Code Example for calling ReplaceVehicle function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\Vehicle\VehicleInformation.vb" region="ReplaceVehicle" title="Code Example for calling ReplaceVehicle function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.Request, Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.Response, Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.RequestData> ReplaceVehicle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.AutoServices.AutoServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.Request, Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.Response, Diamond.Common.Services.Messages.AutoService.ReplaceVehicle.RequestData>(proxy, proxy.ReplaceVehicle);
            return s;
        }
    }
    ///<summary> Proxy class for Billing Service for performing billing related operation such as Apply Cash, Credit, retrieve billing info etc </summary>
    public static class BillingService
    {
        ///<summary> Creates a legal notice on a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.AddLegalNotice.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.AddLegalNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="AddLegalNotice" title="Code Example for calling AddLegalNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="AddLegalNotice" title="Code Example for calling AddLegalNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.AddLegalNotice.Request, Diamond.Common.Services.Messages.BillingService.AddLegalNotice.Response, Diamond.Common.Services.Messages.BillingService.AddLegalNotice.RequestData> AddLegalNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.AddLegalNotice.Request, Diamond.Common.Services.Messages.BillingService.AddLegalNotice.Response, Diamond.Common.Services.Messages.BillingService.AddLegalNotice.RequestData>(proxy, proxy.AddLegalNotice);
            return s;
        }
        ///<summary> Creates a reminder notice on a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.AddReminderNotice.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.AddReminderNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="AddReminderNotice" title="Code Example for calling AddReminderNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="AddReminderNotice" title="Code Example for calling AddReminderNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.AddReminderNotice.Request, Diamond.Common.Services.Messages.BillingService.AddReminderNotice.Response, Diamond.Common.Services.Messages.BillingService.AddReminderNotice.RequestData> AddReminderNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.AddReminderNotice.Request, Diamond.Common.Services.Messages.BillingService.AddReminderNotice.Response, Diamond.Common.Services.Messages.BillingService.AddReminderNotice.RequestData>(proxy, proxy.AddReminderNotice);
            return s;
        }
        ///<summary> Returns amount  </summary>///<param name="request">The request contains policy id </param>///<returns>A response object returning amount needed to reinstate the policy.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AmountToReinstate" title="Code Example for calling AmountToReinstate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AmountToReinstate" title="Code Example for calling AmountToReinstate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.AmountToReinstate.Request, Diamond.Common.Services.Messages.BillingService.AmountToReinstate.Response, Diamond.Common.Services.Messages.BillingService.AmountToReinstate.RequestData> AmountToReinstate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.AmountToReinstate.Request, Diamond.Common.Services.Messages.BillingService.AmountToReinstate.Response, Diamond.Common.Services.Messages.BillingService.AmountToReinstate.RequestData>(proxy, proxy.AmountToReinstate);
            return s;
        }
        ///<summary> Applies a billing account adjustment to the given policies </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyBillingAccountAdjustment.Response" /> Returns the Billing.Data object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyBillingAccountAdjustment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ApplyCashPayment" title="Code Example for setting up values for calling function"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountAdjustment" title="Code Example for calling ApplyBillingAccountAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ApplyCashPayment" title="Code Example for setting up values for calling function"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountAdjustment" title="Code Example for calling ApplyBillingAccountAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.RequestData> ApplyBillingAccountAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountAdjustment.RequestData>(proxy, proxy.ApplyBillingAccountAdjustment);
            return s;
        }
        ///<summary> Applies a billing account payment </summary>///<param name="request">The request takes in the Billing.ApplyCash object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyBillingAccountPayment.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyBillingAccountPayment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplyBillingAccountPayment1" title="Code Example for calling ApplyBillingAccountPayment function - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountPayment" title="Code Example for calling ApplyBillingAccountPayment function - part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplyBillingAccountPayment1" title="Code Example for calling ApplyBillingAccountPayment function - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountPayment" title="Code Example for calling ApplyBillingAccountPayment function - part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.Request, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.Response, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.RequestData> ApplyBillingAccountPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.Request, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.Response, Diamond.Common.Services.Messages.BillingService.ApplyBillingAccountPayment.RequestData>(proxy, proxy.ApplyBillingAccountPayment);
            return s;
        }
        ///<summary> Applies a payment to the given policy </summary>///<param name="request">The request takes in the Billing.ApplyCash object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyCash.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyCash.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ApplyCashPayment" title="Code Example for setting up cash payment - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ConversionAdjustmentForm.vb" region="ApplyCheckPayment" title="Code Example for setting up check payment - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\TransferForm.vb" region="TransferCashToPolicy" title="Code Example for setting up cash transfer to policy - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AdjustCashForm.vb" region="AdjustCash" title="Code Example for adjusting cash amount - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="WaiveCreditBalance" title="Code Example for waiving credit balance - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyCash" title="Code Example for calling ApplyCash function - part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ApplyCashPayment" title="Code Example for setting up cash payment - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ConversionAdjustmentForm.vb" region="ApplyCheckPayment" title="Code Example for setting up check payment - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\TransferForm.vb" region="TransferCashToPolicy" title="Code Example for setting up cash transfer to policy - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AdjustCashForm.vb" region="AdjustCash" title="Code Example for adjusting cash amount - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="WaiveCreditBalance" title="Code Example for waiving credit balance - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyCash" title="Code Example for calling ApplyCash function - part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCash.Request, Diamond.Common.Services.Messages.BillingService.ApplyCash.Response, Diamond.Common.Services.Messages.BillingService.ApplyCash.RequestData> ApplyCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCash.Request, Diamond.Common.Services.Messages.BillingService.ApplyCash.Response, Diamond.Common.Services.Messages.BillingService.ApplyCash.RequestData>(proxy, proxy.ApplyCash);
            return s;
        }
        ///<summary> Applies a charge (service, misc., etc. to a policy) </summary>///<param name="request">The request takes in the Billing.ApplyChargeCreditType object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyCharge.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyCharge.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AddMiscellaneousChargeForm.vb" region="ApplyCharge" title="Code Example for calling ApplyCharge function to Apply Charge"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AddMiscellaneousChargeForm.vb" region="ApplyCharge" title="Code Example for calling ApplyCharge function to Apply Charge"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCharge.Request, Diamond.Common.Services.Messages.BillingService.ApplyCharge.Response, Diamond.Common.Services.Messages.BillingService.ApplyCharge.RequestData> ApplyCharge()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCharge.Request, Diamond.Common.Services.Messages.BillingService.ApplyCharge.Response, Diamond.Common.Services.Messages.BillingService.ApplyCharge.RequestData>(proxy, proxy.ApplyCharge);
            return s;
        }
        ///<summary> Applies credit to a policy </summary>///<param name="request">The request takes in the Billing.ApplyChargeCreditType object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyCredit.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyCredit.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\WaiveForm.vb" region="ApplyCredit" title="Code Example for calling ApplyCredit function to Waive Misc Charge"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\WaiveForm.vb" region="ApplyCredit" title="Code Example for calling ApplyCredit function to Waive Misc Charge"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCredit.Request, Diamond.Common.Services.Messages.BillingService.ApplyCredit.Response, Diamond.Common.Services.Messages.BillingService.ApplyCredit.RequestData> ApplyCredit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyCredit.Request, Diamond.Common.Services.Messages.BillingService.ApplyCredit.Response, Diamond.Common.Services.Messages.BillingService.ApplyCredit.RequestData>(proxy, proxy.ApplyCredit);
            return s;
        }
        ///<summary> Applies multiple billing account payments </summary>///<param name="request">The request takes in a collection of Billing.ApplyCash object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplyBillingAccountPayment1" title="Code Example for calling ApplyBillingAccountPayment function - part 1"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountPayment" title="Code Example for calling ApplyBillingAccountPayment function - part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Receipt.vb" region="ApplyBillingAccountPayment1" title="Code Example for calling ApplyBillingAccountPayment function - part 1"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="ApplyBillingAccountPayment" title="Code Example for calling ApplyBillingAccountPayment function - part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.RequestData> ApplyMultiplePaymentsToPoliciesInBillingAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.ApplyMultiplePaymentsToPoliciesInBillingAccount.RequestData>(proxy, proxy.ApplyMultiplePaymentsToPoliciesInBillingAccount);
            return s;
        }
        ///<summary> Verifies payplan installments add up to 100% </summary>///<param name="request">The request takes in the billingpayplanId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.CheckForValidPercents.Response" /> Returns a string indicating if the installment percentages add up correctly </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.CheckForValidPercents.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckForValidPercents" title="Code Example for calling CheckForValidPercents function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckForValidPercents" title="Code Example for calling CheckForValidPercents function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.Request, Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.Response, Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.RequestData> CheckForValidPercents()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.Request, Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.Response, Diamond.Common.Services.Messages.BillingService.CheckForValidPercents.RequestData>(proxy, proxy.CheckForValidPercents);
            return s;
        }
        ///<summary> Deletes all billing activity and sets a balance on the policy. Used for conversion. </summary>///<param name="request">A wrapper request with policy_id, current balance, current due date.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingSave.vb" region="ConversionBillingBalance" title="Code Example for calling SaveNoticeDates function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingSave.vb" region="ConversionBillingBalance" title="Code Example for calling SaveNoticeDates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.Request, Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.Response, Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.RequestData> ConversionBillingBalance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.Request, Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.Response, Diamond.Common.Services.Messages.BillingService.ConversionBillingBalance.RequestData>(proxy, proxy.ConversionBillingBalance);
            return s;
        }
        ///<summary> Sets the next installment for a policy. Used for conversion. </summary>///<param name="request">A wrapper request with policy_id, next installment amount, next installment date.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingSave.vb" region="ConversionBillingBalance" title="Code Example for calling ConversionSaveBillingInstallments function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingSave.vb" region="ConversionBillingBalance" title="Code Example for calling ConversionSaveBillingInstallments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.Request, Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.Response, Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.RequestData> ConversionSaveBillingInstallments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.Request, Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.Response, Diamond.Common.Services.Messages.BillingService.ConversionSaveBillingInstallments.RequestData>(proxy, proxy.ConversionSaveBillingInstallments);
            return s;
        }
        ///<summary> Calculates invoices and installments for all possible payplans </summary>///<param name="request">The request takes in PolicyId, PolicyImageNum, and PayPlanId </param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.CheckForValidPercents.Response" /> Returns a collection of ShortBillingPreviews and a collection of Payplans. </returns>///<see cref="T:Diamond.ServiceMessages.CheckForValidPercents.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\BillingPayplanPreview\BillingPayplanPreview.ascx.vb" region="CreateMultipleShortPreviewInvoices" title="Code Example for calling CreateMultipleShortPreviewInvoices function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\BillingPayplanPreview\BillingPayplanPreview.ascx.vb" region="CreateMultipleShortPreviewInvoices" title="Code Example for calling CreateMultipleShortPreviewInvoices function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.Request, Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.Response, Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.RequestData> CreateMultipleShortPreviewInvoices()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.Request, Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.Response, Diamond.Common.Services.Messages.BillingService.CreateMultipleShortPreviewInvoices.RequestData>(proxy, proxy.CreateMultipleShortPreviewInvoices);
            return s;
        }
        ///<summary> Deletes a billing pay plan renewal group </summary>///<param name="request">Takes in the billingpayplanrenewalgroup_id  </param>///<returns>  <see cref="T:Diamond.ServiceMessages.BillingService.DeleteBillingPayPlanRenewalGroup.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.DeleteBillingPayPlanRenewalGroup.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroup.vb" region="DeleteBillingPayPlanRenewalGroup" title="Code Example for calling DeleteBillingPayPlanRenewalGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroup.vb" region="DeleteBillingPayPlanRenewalGroup" title="Code Example for calling DeleteBillingPayPlanRenewalGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.Request, Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.Response, Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.RequestData> DeleteBillingPayPlanRenewalGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.Request, Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.Response, Diamond.Common.Services.Messages.BillingService.DeleteBillingPayPlanRenewalGroup.RequestData>(proxy, proxy.DeleteBillingPayPlanRenewalGroup);
            return s;
        }
        ///<summary> Deletes cash off of a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object and billingcashNum</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.DeleteCash.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.DeleteCash.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCash" title="Code Example for calling DeleteCash function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteCash" title="Code Example for calling DeleteCash function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteCash.Request, Diamond.Common.Services.Messages.BillingService.DeleteCash.Response, Diamond.Common.Services.Messages.BillingService.DeleteCash.RequestData> DeleteCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteCash.Request, Diamond.Common.Services.Messages.BillingService.DeleteCash.Response, Diamond.Common.Services.Messages.BillingService.DeleteCash.RequestData>(proxy, proxy.DeleteCash);
            return s;
        }
        ///<summary> Deletes a charge credit from a policy (done through edit billing) </summary>///<param name="request">The request takes in the Billing.BusinessData object and billingchargeCreditNum</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.DeleteChargeCredit.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.DeleteChargeCredit.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteChargeCredit" title="Code Example for calling DeleteChargeCredit function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteChargeCredit" title="Code Example for calling DeleteChargeCredit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.Request, Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.Response, Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.RequestData> DeleteChargeCredit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.Request, Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.Response, Diamond.Common.Services.Messages.BillingService.DeleteChargeCredit.RequestData>(proxy, proxy.DeleteChargeCredit);
            return s;
        }
        ///<summary> Deletes a legal notice from a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object and billingnoticeNum</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.DeleteLegalNotice.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.DeleteLegalNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLegalNotice" title="Code Example for calling DeleteLegalNotice function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteLegalNotice" title="Code Example for calling DeleteLegalNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.Request, Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.Response, Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.RequestData> DeleteLegalNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.Request, Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.Response, Diamond.Common.Services.Messages.BillingService.DeleteLegalNotice.RequestData>(proxy, proxy.DeleteLegalNotice);
            return s;
        }
        ///<summary>  DeletePaymentProcessorData </summary>///<param name="request"></param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetup.vb" region="DeletePaymentProcessorData" title="Code Example for calling DeletePaymentProcessorData function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetup.vb" region="DeletePaymentProcessorData" title="Code Example for calling DeletePaymentProcessorData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.RequestData> DeletePaymentProcessorData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.DeletePaymentProcessorData.RequestData>(proxy, proxy.DeletePaymentProcessorData);
            return s;
        }
        ///<summary> Updates the BillingInvoice  </summary>///<param name="request">The request object containing current and prior outstanding amounts, due date and DCO.Billing.BusinessData</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.EditBillingInvoice.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.EditBillingInvoice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="EditBillingInvoice" title="Code Example for calling EditBillingInvoice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="EditBillingInvoice" title="Code Example for calling EditBillingInvoice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.Request, Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.Response, Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.RequestData> EditBillingInvoice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.Request, Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.Response, Diamond.Common.Services.Messages.BillingService.EditBillingInvoice.RequestData>(proxy, proxy.EditBillingInvoice);
            return s;
        }
        ///<summary> Returns Policy Id   </summary>///<param name="request">The request contains account id</param>///<returns>A response object returning policy id</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAccountBalance" title="Code Example for calling GetAccountBalance function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAccountBalance" title="Code Example for calling GetAccountBalance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Request, Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Response, Diamond.Common.Services.Messages.BillingService.GetAccountBalance.RequestData> GetAccountBalance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Request, Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Response, Diamond.Common.Services.Messages.BillingService.GetAccountBalance.RequestData>(proxy, proxy.GetAccountBalance);
            return s;
        }
        ///<summary> Returns Boolean  </summary>///<param name="request">The request contains policy id </param>///<returns>A response object returning account info </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAccountInfo" title="Code Example for calling GetAccountInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAccountInfo" title="Code Example for calling GetAccountInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAccountInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAccountInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAccountInfo.RequestData> GetAccountInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAccountInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAccountInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAccountInfo.RequestData>(proxy, proxy.GetAccountInfo);
            return s;
        }
        ///<summary> Returns the payroll deduction info by policy id </summary>///<param name="request">The request contains no input parameters </param>///<returns>A response object returning collection of the AgencyBillActivity object and indicator showing the success/failure of the load operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyBillActivity" title="Code Example for calling GetAgencyBillActivity function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyBillActivity" title="Code Example for calling GetAgencyBillActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.Request, Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.Response, Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.RequestData> GetAgencyBillActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.Request, Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.Response, Diamond.Common.Services.Messages.BillingService.GetAgencyBillActivity.RequestData>(proxy, proxy.GetAgencyBillActivity);
            return s;
        }
        ///<summary> Returns the agency bill commission information for a given agency </summary>///<param name="request">The request contains no input parameters </param>///<returns>A response object returning collection of the AgencyBillActivity object and indicator showing the success/failure of the load operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyStatementCommissionInfo" title="Code Example for calling GetAgencyStatementCommmissionInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyStatementCommissionInfo" title="Code Example for calling GetAgencyStatementCommmissionInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.RequestData> GetAgencyStatementCommissionInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAgencyStatementCommissionInfo.RequestData>(proxy, proxy.GetAgencyStatementCommissionInfo);
            return s;
        }
        ///<summary> Returns the automatic refund check payee info </summary>///<param name="request">The request takes in the client_id </param>///<returns>A response object returning collection of the CheckAutoRefundPayee object and indicator showing the success/failure of the load operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAutomaticRefundCheckPayeeInfo" title="Code Example for calling GetAutomaticRefundCheckPayeeInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAutomaticRefundCheckPayeeInfo" title="Code Example for calling GetAutomaticRefundCheckPayeeInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.RequestData> GetAutomaticRefundCheckPayeeInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetAutomaticRefundCheckPayeeInfo.RequestData>(proxy, proxy.GetAutomaticRefundCheckPayeeInfo);
            return s;
        }
        ///<summary> Returns the information about a particular billing account payment.  </summary>///<param name="request">The request takes in the billingcashtype_id and billingcash_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetCashInfo.Response" /> Returns the Cash and CashDetail objects. Also returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetCashInfo.Response" />///<remarks> In Diamond UI, this info is loaded on the Cash Detail screen which is accessed by double-clicking a billing account payment </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\CashDetailForm.vb" region="GetBillingAccountCashInfo" title="Code Example for calling GetBillingAccountCashInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\CashDetailForm.vb" region="GetBillingAccountCashInfo" title="Code Example for calling GetBillingAccountCashInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.RequestData> GetBillingAccountCashInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountCashInfo.RequestData>(proxy, proxy.GetBillingAccountCashInfo);
            return s;
        }
        ///<summary> This function returns charge information for the given billing account for the BillingChargeCredit and BillingCashMchgDetail tables if the system setting "Display Billed Activity at the Account Level" is on.  </summary>///<param name="request">  <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingAccountChargeInfo.Request" /> object containing billingaccount id , policy id</param>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingAccountChargeInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingAccountChargeInfo.Response" /> Returns the success of the call from the business layer and the Billing.ChargeCredit and Billing.CashMchgDetail objects </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingAccountChargeInfo.Response" />///<remarks> In Diamond UI, this data is used to load the Charges detail screen (which is accessed by double-clicking on a line on the billing statement screen. </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChargeDetailForm.vb" region="GetBillingAccountChargeInfo" title="Code Example for calling GetBillingAccountChargeInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChargeDetailForm.vb" region="GetBillingAccountChargeInfo" title="Code Example for calling GetBillingAccountChargeInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.RequestData> GetBillingAccountChargeInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountChargeInfo.RequestData>(proxy, proxy.GetBillingAccountChargeInfo);
            return s;
        }
        ///<summary> Returns Policy Id   </summary>///<param name="request">The request contains billing account id</param>///<returns>A response object returning policy id</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingAccountRebalanceInfo" title="Code Example for calling GetBillingAccountRebalanceInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingAccountRebalanceInfo" title="Code Example for calling GetBillingAccountRebalanceInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.RequestData> GetBillingAccountRebalanceInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.Request, Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.Response, Diamond.Common.Services.Messages.BillingService.GetBillingAccountRebalanceInfo.RequestData>(proxy, proxy.GetBillingAccountRebalanceInfo);
            return s;
        }
        ///<summary> Returns the billing data for the given policy. </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingBusinessData.Response" /> Returns the Billing.Data object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingBusinessData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="GetBillingBusinessData" title="Code Example for calling GetBillingBusinessData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="GetBillingBusinessData" title="Code Example for calling GetBillingBusinessData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.Request, Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.Response, Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.RequestData> GetBillingBusinessData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.Request, Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.Response, Diamond.Common.Services.Messages.BillingService.GetBillingBusinessData.RequestData>(proxy, proxy.GetBillingBusinessData);
            return s;
        }
        ///<summary> Returns the billing data for the given policy. </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingDataFromBusinessData.Response" /> Returns the Billing.Data object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingDataFromBusinessData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="GetBillingDataFromBusinessData" title="Code Example for calling GetBillingDataFromBusinessData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="GetBillingDataFromBusinessData" title="Code Example for calling GetBillingDataFromBusinessData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.Request, Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.Response, Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.RequestData> GetBillingDataFromBusinessData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.Request, Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.Response, Diamond.Common.Services.Messages.BillingService.GetBillingDataFromBusinessData.RequestData>(proxy, proxy.GetBillingDataFromBusinessData);
            return s;
        }
        ///<summary> Gets the policy's future installments, etc </summary>///<param name="request">Takes in policy_id</param>///<returns> Returns the DCO.Billing.Futures object </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Policy\Transaction\TransactionControl.vb" region="GetBillingFutures" title="Code Example for calling GetBillingFutures function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Policy\Transaction\TransactionControl.vb" region="GetBillingFutures" title="Code Example for calling GetBillingFutures function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingFutures.Request, Diamond.Common.Services.Messages.BillingService.GetBillingFutures.Response, Diamond.Common.Services.Messages.BillingService.GetBillingFutures.RequestData> GetBillingFutures()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingFutures.Request, Diamond.Common.Services.Messages.BillingService.GetBillingFutures.Response, Diamond.Common.Services.Messages.BillingService.GetBillingFutures.RequestData>(proxy, proxy.GetBillingFutures);
            return s;
        }
        ///<summary> Returns the billing history for the given policy. This is loaded onto the billing account history screen </summary>///<param name="request">The request takes in the policy_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingHistory.Response" /> Returns the Billing.History object Also returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingHistory.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ConversionAdjustmentForm.vb" region="GetBillingHistory" title="Code Example for calling GetBillingHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ConversionAdjustmentForm.vb" region="GetBillingHistory" title="Code Example for calling GetBillingHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingHistory.Request, Diamond.Common.Services.Messages.BillingService.GetBillingHistory.Response, Diamond.Common.Services.Messages.BillingService.GetBillingHistory.RequestData> GetBillingHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingHistory.Request, Diamond.Common.Services.Messages.BillingService.GetBillingHistory.Response, Diamond.Common.Services.Messages.BillingService.GetBillingHistory.RequestData>(proxy, proxy.GetBillingHistory);
            return s;
        }
        ///<summary> Returns the payplan installments for the given payplan. </summary>///<param name="request">The request takes in the payplanId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingPayPlanInstallment.Response" /> Returns the Billing.PayplanInstallment object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingPayPlanInstallment.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingPayPlanInstallment" title="Code Example for calling GetBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingPayPlanInstallment" title="Code Example for calling GetBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.RequestData> GetBillingPayPlanInstallment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlanInstallment.RequestData>(proxy, proxy.GetBillingPayPlanInstallment);
            return s;
        }
        ///<summary> Gets the pay plans that are valid for a policy </summary>///<param name="request">A wrapper request with agency_id, policyterm_id, billmethod_id, companystatelob_id, effective_date, payplanusage, editmode.</param>///<returns>A wrapper response with a collection of DCSDMO.SystemData.Billing.BillingPayPlan objects.</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\BillingInformation.vb" region="GetBillingPayPlansForPolicy" title="Code Example for calling GetBillingPayPlansForPolicy function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\BillingInformation.vb" region="GetBillingPayPlansForPolicy" title="Code Example for calling GetBillingPayPlansForPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.RequestData> GetBillingPayPlansForPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansForPolicy.RequestData>(proxy, proxy.GetBillingPayPlansForPolicy);
            return s;
        }
        ///<summary> Gets the pay plans that are linked to an agency </summary>///<param name="request">A wrapper request with agency_id.</param>///<returns>A wrapper response with a collection of BillingPayPlanAgencyLink objects.</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\BillingInformation.vb" region="GetBillingPayPlansLinkedToAgency" title="Code Example for calling GetBillingPayPlansLinkedToAgency function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\BillingInformation.vb" region="GetBillingPayPlansLinkedToAgency" title="Code Example for calling GetBillingPayPlansLinkedToAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.RequestData> GetBillingPayPlansLinkedToAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPayPlansLinkedToAgency.RequestData>(proxy, proxy.GetBillingPayPlansLinkedToAgency);
            return s;
        }
        ///<summary> Gets the preview for billing with a potential cancellation on a policy.  </summary>///<param name="request">A wrapper request with policy_id and premium fields.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingInfo.vb" region="GetBillingPreviewForDecoupledCancellation" title="Code Example for calling GetBillingPreviewForDecoupledCancellation function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingInfo.vb" region="GetBillingPreviewForDecoupledCancellation" title="Code Example for calling GetBillingPreviewForDecoupledCancellation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.RequestData> GetBillingPreviewForDecoupledCancellation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledCancellation.RequestData>(proxy, proxy.GetBillingPreviewForDecoupledCancellation);
            return s;
        }
        ///<summary> Gets the preview for billing with a potential endorsement on a policy.  </summary>///<param name="request">A wrapper request with policy_id, next installment amount, next installment date.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingInfo.vb" region="GetBillingPreviewForDecoupledEndorsement" title="Code Example for calling GetBillingPreviewForDecoupledEndorsement function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingInfo.vb" region="GetBillingPreviewForDecoupledEndorsement" title="Code Example for calling GetBillingPreviewForDecoupledEndorsement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.RequestData> GetBillingPreviewForDecoupledEndorsement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledEndorsement.RequestData>(proxy, proxy.GetBillingPreviewForDecoupledEndorsement);
            return s;
        }
        ///<summary> This returns the billing preview for the policy </summary>///<param name="request">The request contains several pieces of data to help derive the billing </param>///<returns>A response object returning a collection of futures.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingPreviewForDecoupledPolicy" title="Code Example for calling GetBillingPreviewForDecoupledPolicy function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingPreviewForDecoupledPolicy" title="Code Example for calling GetBillingPreviewForDecoupledPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.RequestData> GetBillingPreviewForDecoupledPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetBillingPreviewForDecoupledPolicy.RequestData>(proxy, proxy.GetBillingPreviewForDecoupledPolicy);
            return s;
        }
        ///<summary> Returns the billing statement, account and billingaccount information by client_id or policy_id </summary>///<param name="request">The request contains policy_id and agency code</param>///<returns>A response object containing sucess/failure indicator of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingSummary" title="Code Example for calling GetBillingSummary function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetBillingSummary" title="Code Example for calling GetBillingSummary function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingSummary.Request, Diamond.Common.Services.Messages.BillingService.GetBillingSummary.Response, Diamond.Common.Services.Messages.BillingService.GetBillingSummary.RequestData> GetBillingSummary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetBillingSummary.Request, Diamond.Common.Services.Messages.BillingService.GetBillingSummary.Response, Diamond.Common.Services.Messages.BillingService.GetBillingSummary.RequestData>(proxy, proxy.GetBillingSummary);
            return s;
        }
        ///<summary> Returns the information about a particular payment.  </summary>///<param name="request">The request takes in the billingcash_num and policy_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetCashInfo.Response" /> Returns the Cash, CashDetail and billto_id. Also returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetCashInfo.Response" />///<remarks> In Diamond UI, this info is loaded on the Cash Detail screen which is accessed by double-clicking a payment </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\CashDetailForm.vb" region="GetCashInfo" title="Code Example for calling GetCashInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\CashDetailForm.vb" region="GetCashInfo" title="Code Example for calling GetCashInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCashInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCashInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCashInfo.RequestData> GetCashInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCashInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCashInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCashInfo.RequestData>(proxy, proxy.GetCashInfo);
            return s;
        }
        ///<summary> This function returns charge information for the given policy for the BillingChargeCredit and BillingCashMchgDetail tables.  </summary>///<param name="request">  <see cref="T:Diamond.ServiceMessages.BillingService.GetChargeInfo.Request" /> object containing policy id and creditcard number</param>///<see cref="T:Diamond.ServiceMessages.BillingService.GetChargeInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetChargeInfo.Response" /> Returns the success of the call from the business layer and the Billing.ChargeCredit and Billing.CashMchgDetail objects </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetChargeInfo.Response" />///<remarks> In Diamond UI, this data is used to load the Charges detail screen (which is accessed by double-clicking on a line on the billing statement screen. </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChargeDetailForm.vb" region="GetChargeInfo" title="Code Example for calling GetChargeInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChargeDetailForm.vb" region="GetChargeInfo" title="Code Example for calling GetChargeInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetChargeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetChargeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetChargeInfo.RequestData> GetChargeInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetChargeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetChargeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetChargeInfo.RequestData>(proxy, proxy.GetChargeInfo);
            return s;
        }
        ///<summary> Returns the payee info for a given policy/agency id </summary>///<param name="request">The request takes in the policy_id, policyimage_num, agency_id, checkmailto_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetCheckPayeeInfo.Response" /> Returns the Address and name objects and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetCheckPayeeInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AutomaticRefundForm.vb" region="GetCheckPayeeInfo" title="Code Example for calling GetCheckPayeeInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AutomaticRefundForm.vb" region="GetCheckPayeeInfo" title="Code Example for calling GetCheckPayeeInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.RequestData> GetCheckPayeeInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCheckPayeeInfo.RequestData>(proxy, proxy.GetCheckPayeeInfo);
            return s;
        }
        ///<summary> Returns the agency commission info </summary>///<param name="request">No parameters in the request object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetCommissionInfo.Response" /> Returns the AgencyCommissionInfo collection. </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetCommissionInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Rules\DetailControls\CommissionContribution.vb" region="CommissionContributionValid" title="Code Example for calling GetCommissionInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Rules\DetailControls\CommissionContribution.vb" region="CommissionContributionValid" title="Code Example for calling GetCommissionInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.RequestData> GetCommissionInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.Request, Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.Response, Diamond.Common.Services.Messages.BillingService.GetCommissionInfo.RequestData>(proxy, proxy.GetCommissionInfo);
            return s;
        }
        ///<summary> Gets information regarding the payment that is needed when finalizing the policy workflow. </summary>///<param name="request">A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetFinalizePaymentInformation.Request " />  object containing a flag that indicates if service charges should be included and the policy image.</param>///<see cref="T:Diamond.ServiceMessages.BillingService.GetFinalizePaymentInformation.Request " />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetFinalizePaymentInformation.Response" /> that returns the calculated payment amount and policy information. </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetFinalizePaymentInformation.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.Request, Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.Response, Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.RequestData> GetFinalizePaymentInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.Request, Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.Response, Diamond.Common.Services.Messages.BillingService.GetFinalizePaymentInformation.RequestData>(proxy, proxy.GetFinalizePaymentInformation);
            return s;
        }
        ///<summary> Returns information from the BillingFutureCash table for the given policyid </summary>///<param name="request">The request takes in the policy_id and billingfuturecashnum</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetFutureCash.Response" /> Returns the Billing.FutureCash object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetFutureCash.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetFutureCash" title="Code Example for calling GetFutureCash function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetFutureCash" title="Code Example for calling GetFutureCash function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetFutureCash.Request, Diamond.Common.Services.Messages.BillingService.GetFutureCash.Response, Diamond.Common.Services.Messages.BillingService.GetFutureCash.RequestData> GetFutureCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetFutureCash.Request, Diamond.Common.Services.Messages.BillingService.GetFutureCash.Response, Diamond.Common.Services.Messages.BillingService.GetFutureCash.RequestData>(proxy, proxy.GetFutureCash);
            return s;
        }
        ///<summary> Gets the installments on a policy. Used for conversion. </summary>///<param name="request">A wrapper request with policy_id, next installment amount, next installment date.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingGetData.vb" region="GetInstallmentsForPolicy" title="Code Example for calling GetInstallmentsForPolicy function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingGetData.vb" region="GetInstallmentsForPolicy" title="Code Example for calling GetInstallmentsForPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.RequestData> GetInstallmentsForPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.Request, Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.Response, Diamond.Common.Services.Messages.BillingService.GetInstallmentsForPolicy.RequestData>(proxy, proxy.GetInstallmentsForPolicy);
            return s;
        }
        ///<summary> Returns the information about a particular miscellaneous charge. This info is loaded on the Cash Detail screen which is accessed by double-clicking a misc. charge </summary>///<param name="request">The request takes in the billingcashdetail_num and policy_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetMiscellaneousChargeCashDetails.Response" /> Returns the CashDetail object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetMiscellaneousChargeCashDetails.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\MiscellaneousChargePaymentDetailForm.vb" region="GetMiscellaneousChargeCashDetails" title="Code Example for calling GetMiscellaneousChargeCashDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\MiscellaneousChargePaymentDetailForm.vb" region="GetMiscellaneousChargeCashDetails" title="Code Example for calling GetMiscellaneousChargeCashDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.Request, Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.Response, Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.RequestData> GetMiscellaneousChargeCashDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.Request, Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.Response, Diamond.Common.Services.Messages.BillingService.GetMiscellaneousChargeCashDetails.RequestData>(proxy, proxy.GetMiscellaneousChargeCashDetails);
            return s;
        }
        ///<summary> Returns the credit card data for the given policy. </summary>///<param name="request">The request takes in the policyId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetPolicyCreditCardInfo.Response" /> Returns the Billing.CreditCard object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetPolicyCreditCardInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\CreditCard.vb" region="GetPolicyCreditCardInfo" title="Code Example for calling GetPolicyCreditCardInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\CreditCard.vb" region="GetPolicyCreditCardInfo" title="Code Example for calling GetPolicyCreditCardInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.Request, Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.Response, Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.RequestData> GetPolicyCreditCardInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.Request, Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.Response, Diamond.Common.Services.Messages.BillingService.GetPolicyCreditCardInfo.RequestData>(proxy, proxy.GetPolicyCreditCardInfo);
            return s;
        }
        ///<summary> Gets the policy EFT info. </summary>///<param name="request">The request object containing Policy Id.</param>///<returns>A response object containing EFT object and indicator for success/failure of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="GetPolicyEFTInfo" title="Code Example for calling GetPolicyEFTInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="GetPolicyEFTInfo" title="Code Example for calling GetPolicyEFTInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.Request, Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.Response, Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.RequestData> GetPolicyEftInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.Request, Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.Response, Diamond.Common.Services.Messages.BillingService.GetPolicyEftInfo.RequestData>(proxy, proxy.GetPolicyEftInfo);
            return s;
        }
        ///<summary> Returns the info needed to populate the Billing receipt screen. </summary>///<param name="request">No parameters in the request object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetReceiptInfo.Response" /> Returns the receipt info and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetReceiptInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetReceiptInfo" title="Code Example for calling GetReceiptInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetReceiptInfo" title="Code Example for calling GetReceiptInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.Request, Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.Response, Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.RequestData> GetReceiptInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.Request, Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.Response, Diamond.Common.Services.Messages.BillingService.GetReceiptInfo.RequestData>(proxy, proxy.GetReceiptInfo);
            return s;
        }
        ///<summary> Returns the renewal offer information about a policy </summary>///<param name="request">The request takes in the policy_id</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalOfferInfo.Response" /> Returns the renewal offer information </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalOfferInfo.Response" />///<remarks> In Diamond UI, this info is used with the "Accept Agency Bill renewal Offer" billing transaction </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AgencyBillRenewalOfferForm.vb" region="GetRenewalOfferInfo" title="Code Example for calling GetRenewalOfferInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AgencyBillRenewalOfferForm.vb" region="GetRenewalOfferInfo" title="Code Example for calling GetRenewalOfferInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.Request, Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.Response, Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.RequestData> GetRenewalOfferInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.Request, Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.Response, Diamond.Common.Services.Messages.BillingService.GetRenewalOfferInfo.RequestData>(proxy, proxy.GetRenewalOfferInfo);
            return s;
        }
        ///<summary> Loads renewal payplan information for a given billingpayplanId and other data </summary>///<param name="request">The request takes in the billingpayplanID, effective date, billmethod, CSLID</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalPayPlan.Response" /> Returns the Renewal BillingPayplan ID and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalPayPlan.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.Request, Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.Response, Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.RequestData> GetRenewalPayplan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.Request, Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.Response, Diamond.Common.Services.Messages.BillingService.GetRenewalPayplan.RequestData>(proxy, proxy.GetRenewalPayplan);
            return s;
        }
        ///<summary> Loads payplan information for a given billingpayplanId </summary>///<param name="request">The request takes in the billingpayplanID</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetSingleBillingPayPlan.Response" /> Returns the Billing.PayplanDetailData  object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetSingleBillingPayPlan.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\PayPlan.vb" region="GetSingleBillingPayPlan" title="Code Example for calling GetSingleBillingPayPlan function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\PayPlan.vb" region="GetSingleBillingPayPlan" title="Code Example for calling GetSingleBillingPayPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.RequestData> GetSingleBillingPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.GetSingleBillingPayPlan.RequestData>(proxy, proxy.GetSingleBillingPayPlan);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.Request, Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.Response, Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.RequestData> GetTotalAmountBilled()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.Request, Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.Response, Diamond.Common.Services.Messages.BillingService.TotalAmountBilled.RequestData>(proxy, proxy.GetTotalAmountBilled);
            return s;
        }
        ///<summary>  GetTransTypeOfMinimumImageNum </summary>///<param name="request">Takes in policy_id and renewal_ver</param>///<returns> A wrapper returns success indicator and transtype_id </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetTransTypeOfMinimumImageNum" title="Code Example for calling GetTransTypeOfMinimumImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.Request, Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.Response, Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.RequestData> GetTransTypeOfMinimumImageNum()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.Request, Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.Response, Diamond.Common.Services.Messages.BillingService.GetTransTypeOfMinimumImageNum.RequestData>(proxy, proxy.GetTransTypeOfMinimumImageNum);
            return s;
        }
        ///<summary> Returns Boolean  </summary>///<param name="request">The request contains policy id </param>///<returns>A response object returning boolean indicator indicating whether the policy has had cash applied.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="HasPolicyHadCashApplied" title="Code Example for calling HasPolicyHadCashApplied function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="HasPolicyHadCashApplied" title="Code Example for calling HasPolicyHadCashApplied function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.Request, Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.Response, Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.RequestData> HasPolicyHadCashApplied()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.Request, Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.Response, Diamond.Common.Services.Messages.BillingService.HasPolicyHadCashApplied.RequestData>(proxy, proxy.HasPolicyHadCashApplied);
            return s;
        }
        ///<summary> Imports a file </summary>///<param name="request">filename, contents</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyconfigurationTool\EFTGroupInfo.vb" region="ImportFile" title="Code Example for calling ImportFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyconfigurationTool\EFTGroupInfo.vb" region="ImportFile" title="Code Example for calling ImportFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ImportFile.Request, Diamond.Common.Services.Messages.BillingService.ImportFile.Response, Diamond.Common.Services.Messages.BillingService.ImportFile.RequestData> ImportFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ImportFile.Request, Diamond.Common.Services.Messages.BillingService.ImportFile.Response, Diamond.Common.Services.Messages.BillingService.ImportFile.RequestData>(proxy, proxy.ImportFile);
            return s;
        }
        ///<summary> Function that checks to see if a policy meets the criteria for a due date change. </summary>///<param name="request">The request takes in the Billing.TransactionData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.IsDueDateChangeAllowed.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.IsDueDateChangeAllowed.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangeInvoiceDueDateForm.vb" region="IsDueDateChangeAllowed" title="Code Example for calling IsDueDateChangeAllowed function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangeInvoiceDueDateForm.vb" region="IsDueDateChangeAllowed" title="Code Example for calling IsDueDateChangeAllowed function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.Request, Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.Response, Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.RequestData> IsDueDateChangeAllowed()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.Request, Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.Response, Diamond.Common.Services.Messages.BillingService.IsDueDateChangeAllowed.RequestData>(proxy, proxy.IsDueDateChangeAllowed);
            return s;
        }
        ///<summary> Function that checks to see if a policy meets the criteria for a payplan change. </summary>///<param name="request">The request takes in the Billing.TransactionData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.IsPayPlanChangeAllowed.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.IsPayPlanChangeAllowed.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayPlanForm.vb" region="IsPayPlanChangeAllowed" title="Code Example for calling IsPayPlanChangeAllowed function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayPlanForm.vb" region="IsPayPlanChangeAllowed" title="Code Example for calling IsPayPlanChangeAllowed function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.Request, Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.Response, Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.RequestData> IsPayPlanChangeAllowed()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.Request, Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.Response, Diamond.Common.Services.Messages.BillingService.IsPayPlanChangeAllowed.RequestData>(proxy, proxy.IsPayPlanChangeAllowed);
            return s;
        }
        ///<summary> Issues a billing transaction such as CreateBillingAccount, DeleteBillingAccount, LinkPolicyToBillingAccount, UnlinkPolicyFromBillingAccount etc </summary>///<param name="request">The request takes in collection of Billing.TransactionData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.IssueTransaction.Response" /> Returns  a success indicator and collection of DataItem containing BillingAccountId  </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.IssueTransaction.Response" />///<remarks> The DataItem collection in Response object is returned only for CreateBillingAccount operation </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="IssueTransaction-DeleteBillingAccount" title="Code Example for setting up data for performing DeleteBillingAccount"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\BillingAccountPayorForm.vb" region="IssueTransaction-CreateBillingAccount" title="Code Example for setting up data for performing CreateBillingAccount"></code>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="IssueTransaction" title="Code Example for calling IssueTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="IssueTransaction-DeleteBillingAccount" title="Code Example for setting up data for performing DeleteBillingAccount"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\BillingAccountPayorForm.vb" region="IssueTransaction-CreateBillingAccount" title="Code Example for setting up data for performing CreateBillingAccount"></code>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="IssueTransaction" title="Code Example for calling IssueTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.IssueTransaction.Request, Diamond.Common.Services.Messages.BillingService.IssueTransaction.Response, Diamond.Common.Services.Messages.BillingService.IssueTransaction.RequestData> IssueTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.IssueTransaction.Request, Diamond.Common.Services.Messages.BillingService.IssueTransaction.Response, Diamond.Common.Services.Messages.BillingService.IssueTransaction.RequestData>(proxy, proxy.IssueTransaction);
            return s;
        }
        ///<summary>  billingaccount link </summary>///<param name="request">DCO.Billing.TransactionData object</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ManageBillingAccounts.vb" region="LinkPolicyToBillingAccount" title="Code Example for calling LinkPolicyToBillingAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ManageBillingAccounts.vb" region="LinkPolicyToBillingAccount" title="Code Example for calling LinkPolicyToBillingAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.RequestData> LinkPolicyToBillingAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.LinkPolicyToBillingAccount.RequestData>(proxy, proxy.LinkPolicyToBillingAccount);
            return s;
        }
        ///<summary> Loads Billing information for a given PolicyId </summary>///<param name="request">A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.Load.Request" /> object containing the billing data to be loaded to the billing statement screen.</param>///<see cref="T:Diamond.ServiceMessages.BillingService.Load.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.Load.Response" /> Returns all of the data necessary to load the statement screen. </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.Load.Response" />///<remarks> Set LoadAccountDetail to true if accountdetails needs to be loaded along with Billing Information </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Billing.vb" region="BillingLoad" title="Code Example for calling Load function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Billing.vb" region="BillingLoad" title="Code Example for calling Load function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.Load.Request, Diamond.Common.Services.Messages.BillingService.Load.Response, Diamond.Common.Services.Messages.BillingService.Load.RequestData> Load()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.Load.Request, Diamond.Common.Services.Messages.BillingService.Load.Response, Diamond.Common.Services.Messages.BillingService.Load.RequestData>(proxy, proxy.Load);
            return s;
        }
        ///<summary> Returns the account history on a policy. </summary>///<param name="request">The request takes in the policyId and printcurrentactivity flag</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadAccountHistory.Response" /> Returns DCO.Billing.AccountHistory object </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadAccountHistory.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.Request, Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.Response, Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.RequestData> LoadAccountHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.Request, Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.Response, Diamond.Common.Services.Messages.BillingService.LoadAccountHistory.RequestData>(proxy, proxy.LoadAccountHistory);
            return s;
        }
        ///<summary> Loads all the BillingPayPlanBillingPayPlanRenewalGroupLink records </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="LoadAllBillingPayPlanRenewalGroupLinks" title="Code Example for calling LoadAllBillingPayPlanRenewalGroupLinks function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="LoadAllBillingPayPlanRenewalGroupLinks" title="Code Example for calling LoadAllBillingPayPlanRenewalGroupLinks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.Request, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.Response, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.RequestData> LoadAllBillingPayPlanRenewalGroupLinks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.Request, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.Response, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroupLinks.RequestData>(proxy, proxy.LoadAllBillingPayPlanRenewalGroupLinks);
            return s;
        }
        ///<summary> Loads all renewal groups </summary>///<param name="request">The request takes no parameters</param>///<returns> Returns the  Billing.BillingPayPlanRenewalGroup object <see cref="T:Diamond.ServiceMessages.BillingService.LoadAllBillingPayPlanRenewalGroups.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadAllBillingPayPlanRenewalGroups.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroup.vb" region="LoadAllBillingPayPlanRenewalGroups" title="Code Example for calling LoadAllBillingPayPlanRenewalGroups function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroup.vb" region="LoadAllBillingPayPlanRenewalGroups" title="Code Example for calling LoadAllBillingPayPlanRenewalGroups function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.Request, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.Response, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.RequestData> LoadAllBillingPayPlanRenewalGroups()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.Request, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.Response, Diamond.Common.Services.Messages.BillingService.LoadAllBillingPayPlanRenewalGroups.RequestData>(proxy, proxy.LoadAllBillingPayPlanRenewalGroups);
            return s;
        }
        ///<summary> Loads the billing account by Id </summary>///<param name="request">  <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountById.Request" /> object contains the client_id</param>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountById.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountById.Response" /> returns a listing of the billing accounts that are currently linked to the client </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountById.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="LoadBillingAccountById" title="Code Example for calling LoadBillingAccountsByClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="LoadBillingAccountById" title="Code Example for calling LoadBillingAccountsByClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.RequestData> LoadBillingAccountById()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountById.RequestData>(proxy, proxy.LoadBillingAccountById);
            return s;
        }
        ///<summary> Loads the billing accounts by clientid </summary>///<param name="request">  <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountsByClient.Request" /> object contains the client_id</param>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountsByClient.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountsByClient.Response" /> returns a listing of the billing accounts that are currently linked to the client </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingAccountsByClient.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="LoadBillingAccountsByClient" title="Code Example for calling LoadBillingAccountsByClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\ManageBillingAccounts.vb" region="LoadBillingAccountsByClient" title="Code Example for calling LoadBillingAccountsByClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.RequestData> LoadBillingAccountsByClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingAccountsByClient.RequestData>(proxy, proxy.LoadBillingAccountsByClient);
            return s;
        }
        ///<summary> Load the payplan installment for a given payplanId and billingpayplanInstallmentNum </summary>///<param name="request">The request takes in the billingpayplanId</param>///<returns> Returns the  Billing.PayplanInstallment object <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanInstallment.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanInstallment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="LoadBillingPayPlanInstallment" title="Code Example for calling LoadBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="LoadBillingPayPlanInstallment" title="Code Example for calling LoadBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.RequestData> LoadBillingPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlan.RequestData>(proxy, proxy.LoadBillingPayPlan);
            return s;
        }
        ///<summary> Load the payplan installment for a given payplanId and billingpayplanInstallmentNum </summary>///<param name="request">The request takes in the billingpayplanId</param>///<returns> Returns the  Billing.PayplanInstallment object <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanInstallment.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanInstallment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="LoadBillingPayPlanInstallment" title="Code Example for calling LoadBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\BillingPayplanInstallments.vb" region="LoadBillingPayPlanInstallment" title="Code Example for calling LoadBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.RequestData> LoadBillingPayPlanInstallment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanInstallment.RequestData>(proxy, proxy.LoadBillingPayPlanInstallment);
            return s;
        }
        ///<summary> Loads the renewal group for a given groupId </summary>///<param name="request">Takes in billingpayplanrenewalgroup_id</param>///<returns> Returns the Billing.BillingPayPlanRenewalGroup object <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanRenewalGroup.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillingPayPlanRenewalGroup.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="LoadBillingPayPlanRenewalGroup" title="Code Example for calling LoadBillingPayPlanRenewalGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="LoadBillingPayPlanRenewalGroup" title="Code Example for calling LoadBillingPayPlanRenewalGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.RequestData> LoadBillingPayPlanRenewalGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingPayPlanRenewalGroup.RequestData>(proxy, proxy.LoadBillingPayPlanRenewalGroup);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.RequestData> LoadBillingSummary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.Request, Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.Response, Diamond.Common.Services.Messages.BillingService.LoadBillingSummary.RequestData>(proxy, proxy.LoadBillingSummary);
            return s;
        }
        ///<summary> Returns the bill to on a policy. </summary>///<param name="request">The request takes in the billmethodversionId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillTo.Response" /> Returns DCO.Administration.BillToVersion object </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillTo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillTo" title="Code Example for calling LoadBillTo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadBillTo" title="Code Example for calling LoadBillTo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillTo.Request, Diamond.Common.Services.Messages.BillingService.LoadBillTo.Response, Diamond.Common.Services.Messages.BillingService.LoadBillTo.RequestData> LoadBillTo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadBillTo.Request, Diamond.Common.Services.Messages.BillingService.LoadBillTo.Response, Diamond.Common.Services.Messages.BillingService.LoadBillTo.RequestData>(proxy, proxy.LoadBillTo);
            return s;
        }
        ///<summary> Loads the mortgagees for the given policy to the Bill To Change form. This screen can be accessed through the billing transaction - Manage Billing Accounts or through the billing transaction - Change Payor. </summary>///<param name="request">A wrapper object containing the list of mortgagees attached to the given policy to be loaded on the Bill To Change screen.<see cref="T:Diamond.ServiceMessages.BillingService.LoadMortgagees.Request" /></param>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadMortgagees.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadMortgagees.Response" /> Returns a list of mortgagees for the given policy </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadMortgagees.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangeBillToForm.vb" region="LoadMortgagees" title="Code Example for calling LoadMortgagees function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangeBillToForm.vb" region="LoadMortgagees" title="Code Example for calling LoadMortgagees function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadMortgagees.Request, Diamond.Common.Services.Messages.BillingService.LoadMortgagees.Response, Diamond.Common.Services.Messages.BillingService.LoadMortgagees.RequestData> LoadMortgagees()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadMortgagees.Request, Diamond.Common.Services.Messages.BillingService.LoadMortgagees.Response, Diamond.Common.Services.Messages.BillingService.LoadMortgagees.RequestData>(proxy, proxy.LoadMortgagees);
            return s;
        }
        ///<summary>  LoadPaymentProcessorData </summary>///<param name="request"></param>///<returns> A wrapper returns payment processor data collection </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetup.vb" region="LoadPaymentProcessorData" title="Code Example for calling LoadPaymentProcessorData function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetup.vb" region="LoadPaymentProcessorData" title="Code Example for calling LoadPaymentProcessorData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.RequestData> LoadPaymentProcessorData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.LoadPaymentProcessorData.RequestData>(proxy, proxy.LoadPaymentProcessorData);
            return s;
        }
        ///<summary> Gets the payments made during a date range for a company </summary>///<param name="request">A wrapper request with companyId, startDate, endDate.</param>///<returns>A wrapper response with a datatable.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.Request, Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.Response, Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.RequestData> LoadPaymentsByDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.Request, Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.Response, Diamond.Common.Services.Messages.BillingService.LoadPaymentsByDate.RequestData>(proxy, proxy.LoadPaymentsByDate);
            return s;
        }
        ///<summary> Loads the pay plans in a group </summary>///<param name="request"> Takes in the billingpayplanrenewalgroup_id  </param>///<returns> Returns the  Billing.BillingPayPlanRenewalGrouLinks object <see cref="T:Diamond.ServiceMessages.BillingService.LoadPayPlansInGroup.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPayPlansInGroup.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroupInfo.vb" region="LoadPayPlansInGroup" title="Code Example for calling LoadPayPlansInGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\BillingPayPlanRenewalGroupInfo.vb" region="LoadPayPlansInGroup" title="Code Example for calling LoadPayPlansInGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.Request, Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.Response, Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.RequestData> LoadPayPlansInGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.Request, Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.Response, Diamond.Common.Services.Messages.BillingService.LoadPayPlansInGroup.RequestData>(proxy, proxy.LoadPayPlansInGroup);
            return s;
        }
        ///<summary> Returns the payroll deduction info by policy id </summary>///<param name="request">The request contains policy id </param>///<returns>A response object returning collection of PayrollDeductionAccountSummary objects and indicator showing the success/failure of the load operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\PayrollDeductionInfoForm.vb" region="LoadPayrollDeductionInfo" title="Code Example for calling LoadPayrollDeductionInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\PayrollDeductionInfoForm.vb" region="LoadPayrollDeductionInfo" title="Code Example for calling LoadPayrollDeductionInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.Request, Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.Response, Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.RequestData> LoadPayrollDeductionInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.Request, Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.Response, Diamond.Common.Services.Messages.BillingService.LoadPayrollDeductionInfo.RequestData>(proxy, proxy.LoadPayrollDeductionInfo);
            return s;
        }
        ///<summary> Loads a listing of the policies that are currently linked to the given client. These policies are displayed on the Manage Billling Accounts Screen and this function is also used to load the policies that are available to unlink from the billing account on the Unlink screen. </summary>///<param name="request">The request.<see cref="T:Diamond.ServiceMessages.BillingService.LoadPoliciesByClient.Request" /></param>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPoliciesByClient.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadPoliciesByClient.Response" /> Returns a list of policies linked to the given client_id </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPoliciesByClient.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\BillingAccountLink.vb" region="LoadPoliciesByClient" title="Code Example for calling LoadPoliciesByClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\BillingAccountLink.vb" region="LoadPoliciesByClient" title="Code Example for calling LoadPoliciesByClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.Request, Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.Response, Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.RequestData> LoadPoliciesByClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.Request, Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.Response, Diamond.Common.Services.Messages.BillingService.LoadPoliciesByClient.RequestData>(proxy, proxy.LoadPoliciesByClient);
            return s;
        }
        ///<summary> This function returns the agency_id and the billto_id from the policyimage table for the given policy and policyimage. </summary>///<param name="request">A request wrapper object containing PolicyId and PolicyImageNum</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadPolicyAgencyBillTo.Response" /> Returns the agency_id and billto_id </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPolicyAgencyBillTo.Response" />///<example>  <code lang="vbnet" source="Diamond\Business\Billing\BillingTransaction.vb" region="LoadPolicyAgencyBillTo" title="Code Example for calling LoadPolicyAgencyBillTo function"></code></example>///<code lang="vbnet" source="Diamond\Business\Billing\BillingTransaction.vb" region="LoadPolicyAgencyBillTo" title="Code Example for calling LoadPolicyAgencyBillTo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.Request, Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.Response, Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.RequestData> LoadPolicyAgencyBillTo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.Request, Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.Response, Diamond.Common.Services.Messages.BillingService.LoadPolicyAgencyBillTo.RequestData>(proxy, proxy.LoadPolicyAgencyBillTo);
            return s;
        }
        ///<summary> Loads the data to the Billing Preview screen. </summary>///<param name="request">A wrapper object containing the data that is used to populate the Billing Preview screen.<see cref="T:Diamond.ServiceMessages.BillingService.LoadPreview.Request" /></param>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPreview.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadPreview.Response" /> Returns the data to populate the billing preview screen. </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadPreview.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Billing.vb" region="LoadPreview" title="Code Example for calling LoadPreview function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Billing.vb" region="LoadPreview" title="Code Example for calling LoadPreview function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPreview.Request, Diamond.Common.Services.Messages.BillingService.LoadPreview.Response, Diamond.Common.Services.Messages.BillingService.LoadPreview.RequestData> LoadPreview()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadPreview.Request, Diamond.Common.Services.Messages.BillingService.LoadPreview.Response, Diamond.Common.Services.Messages.BillingService.LoadPreview.RequestData>(proxy, proxy.LoadPreview);
            return s;
        }
        ///<summary> Load the payplan installment for a given payplanId and billingpayplanInstallmentNum </summary>///<param name="request">The request takes in the billingpayplanId</param>///<returns> Returns Billing.PayplanInstallment object <see cref="T:Diamond.ServiceMessages.BillingService.LoadSingleBillingPayPlanInstallment.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadSingleBillingPayPlanInstallment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="LoadSingleBillingPayPlanInstallment" title="Code Example for calling LoadSingleBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="LoadSingleBillingPayPlanInstallment" title="Code Example for calling LoadSingleBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.RequestData> LoadSingleBillingPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.Request, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.Response, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlan.RequestData>(proxy, proxy.LoadSingleBillingPayPlan);
            return s;
        }
        ///<summary> Load the payplan installment for a given payplanId and billingpayplanInstallmentNum </summary>///<param name="request">The request takes in the billingpayplanId</param>///<returns> Returns Billing.PayplanInstallment object <see cref="T:Diamond.ServiceMessages.BillingService.LoadSingleBillingPayPlanInstallment.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadSingleBillingPayPlanInstallment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="LoadSingleBillingPayPlanInstallment" title="Code Example for calling LoadSingleBillingPayPlanInstallment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Payplans\PayPlanInstallmentForm.vb" region="LoadSingleBillingPayPlanInstallment" title="Code Example for calling LoadSingleBillingPayPlanInstallment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.RequestData> LoadSingleBillingPayPlanInstallment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.Request, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.Response, Diamond.Common.Services.Messages.BillingService.LoadSingleBillingPayPlanInstallment.RequestData>(proxy, proxy.LoadSingleBillingPayPlanInstallment);
            return s;
        }
        ///<summary> Loads adjustments valid for the policy </summary>///<param name="request">The request takes in a paymentTypeId, accountReceivableTotal, hasHistories, and policyCurrentOutstanding</param>///<returns>Returns collection of adjustments</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWebUIAdjustments" title="Code Example for calling LoadWebUIAdjustments function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWebUIAdjustments" title="Code Example for calling LoadWebUIAdjustments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.Request, Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.Response, Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.RequestData> LoadWebUIAdjustments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.Request, Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.Response, Diamond.Common.Services.Messages.BillingService.LoadWebUIAdjustments.RequestData>(proxy, proxy.LoadWebUIAdjustments);
            return s;
        }
        ///<summary> Loads data relevant to the Web Agency/Employee UI </summary>///<param name="request">The request takes in the TODO</param>///<returns>A response object returning TODO</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWebUIData" title="Code Example for calling LoadWebUIData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWebUIData" title="Code Example for calling LoadWebUIData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadWebUIData.Request, Diamond.Common.Services.Messages.BillingService.LoadWebUIData.Response, Diamond.Common.Services.Messages.BillingService.LoadWebUIData.RequestData> LoadWebUIData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.LoadWebUIData.Request, Diamond.Common.Services.Messages.BillingService.LoadWebUIData.Response, Diamond.Common.Services.Messages.BillingService.LoadWebUIData.RequestData>(proxy, proxy.LoadWebUIData);
            return s;
        }
        ///<summary> Called by End Of period - processes legal notices </summary>///<param name="request">The request takes in the policyId, imageNum and min invoice amount</param>///<returns> Returns a success indicator <see cref="T:Diamond.ServiceMessages.BillingService.ProcessLegalCancellations.Response" /></returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ProcessLegalCancellations.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessLegalCancellations" title="Code Example for calling ProcessLegalCancellations function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessLegalCancellations" title="Code Example for calling ProcessLegalCancellations function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.Request, Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.Response, Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.RequestData> ProcessLegalCancellations()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.Request, Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.Response, Diamond.Common.Services.Messages.BillingService.ProcessLegalCancellations.RequestData>(proxy, proxy.ProcessLegalCancellations);
            return s;
        }
        ///<summary> Processes a refund on a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ProcessRefundCheck.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ProcessRefundCheck.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\RefundForm.vb" region="ProcessRefundCheck" title="Code Example for calling ProcessRefundCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\RefundForm.vb" region="ProcessRefundCheck" title="Code Example for calling ProcessRefundCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.Request, Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.Response, Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.RequestData> ProcessRefundCheck()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.Request, Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.Response, Diamond.Common.Services.Messages.BillingService.ProcessRefundCheck.RequestData>(proxy, proxy.ProcessRefundCheck);
            return s;
        }
        ///<summary> Returns the billing data for the given policy. </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.RecreateInstallments.Response" /> Returns  a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.RecreateInstallments.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecreateInstallments" title="Code Example for calling RecreateInstallments function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecreateInstallments" title="Code Example for calling RecreateInstallments function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.RecreateInstallments.Request, Diamond.Common.Services.Messages.BillingService.RecreateInstallments.Response, Diamond.Common.Services.Messages.BillingService.RecreateInstallments.RequestData> RecreateInstallments()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.RecreateInstallments.Request, Diamond.Common.Services.Messages.BillingService.RecreateInstallments.Response, Diamond.Common.Services.Messages.BillingService.RecreateInstallments.RequestData>(proxy, proxy.RecreateInstallments);
            return s;
        }
        ///<summary> Reverses a payment, NSF or other cash transaction </summary>///<param name="request">The request object containing Billing.Cash object, PolicyId and BillingCashTypeId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ReversalCashAdjustment.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ReversalCashAdjustment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ReversalCashAdjustment" title="Code Example for calling ReversalCashAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ReversalCashAdjustment" title="Code Example for calling ReversalCashAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.RequestData> ReversalCashAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.RequestData>(proxy, proxy.ReversalCashAdjustment);
            return s;
        }
        ///<summary> Reverses the charge on the policy </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.ReversalChargesCreditsAdjustment.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.ReversalChargesCreditsAdjustment.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ReversalChargesCreditsAdjustment" title="Code Example for calling ReversalChargesCreditsAdjustment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="ReversalChargesCreditsAdjustment" title="Code Example for calling ReversalChargesCreditsAdjustment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.RequestData> ReversalChargesCreditsAdjustment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Request, Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Response, Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.RequestData>(proxy, proxy.ReversalChargesCreditsAdjustment);
            return s;
        }
        ///<summary>  Test Method used by Developers </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetBillingDataFromBusinessData.Response" /> Returns the Billing.Data object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetBillingDataFromBusinessData.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.Request, Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.Response, Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.RequestData> RunDeveloperTests()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.Request, Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.Response, Diamond.Common.Services.Messages.BillingService.RunDeveloperTests.RequestData>(proxy, proxy.RunDeveloperTests);
            return s;
        }
        ///<summary> Saves the policies billing history. </summary>///<param name="request">The request object containing collection of History objects to be saved </param>///<returns>A response object containing indicator showing the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="" region="SaveBillingHistory" title="Code Example for calling SaveBillingHistory function"></code></example>///<code lang="vbnet" source="" region="SaveBillingHistory" title="Code Example for calling SaveBillingHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.RequestData> SaveBillingHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingHistory.RequestData>(proxy, proxy.SaveBillingHistory);
            return s;
        }
        ///<summary> Saves billing information </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.SaveBillingInfo.Response" /> Returns the Billing.Data object and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.SaveBillingInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="SaveBillingInfo" title="Code Example for calling SaveBillingInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="SaveBillingInfo" title="Code Example for calling SaveBillingInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.RequestData> SaveBillingInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingInfo.RequestData>(proxy, proxy.SaveBillingInfo);
            return s;
        }
        ///<summary> Save BillingPayPlanRenewalGroup and BillingPayPlanRenewalGroupLinks records </summary>///<param name="request">Takes BillingPayPlanRenewalGroup and BillingPayPlanRenewalGroupLinks</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="SaveBillingPayPlanRenewalGroupInfo" title="Code Example for calling SaveBillingPayPlanRenewalGroupInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\PayPlanRenewalGroups\PayPlanRenewalGroupInfo.vb" region="SaveBillingPayPlanRenewalGroupInfo" title="Code Example for calling SaveBillingPayPlanRenewalGroupInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.RequestData> SaveBillingPayPlanRenewalGroupInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillingPayPlanRenewalGroupInfo.RequestData>(proxy, proxy.SaveBillingPayPlanRenewalGroupInfo);
            return s;
        }
        ///<summary> Saves a billmethodversion - done in Administration, Company Setup </summary>///<param name="request">The request takes in the Administration.BillmethodVersion object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.SaveBillMethodVersion.Response" /> Returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.SaveBillMethodVersion.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveBillMethodVersion" title="Code Example for calling SaveBillMethodVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveBillMethodVersion" title="Code Example for calling SaveBillMethodVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.Request, Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.Response, Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.RequestData> SaveBillMethodVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.Request, Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.Response, Diamond.Common.Services.Messages.BillingService.SaveBillMethodVersion.RequestData>(proxy, proxy.SaveBillMethodVersion);
            return s;
        }
        ///<summary> Saves the bill to on a policy. </summary>///<param name="request">The request takes in the billtoVersionId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.LoadBillTo.Response" /> Returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.LoadBillTo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveBillTo" title="Code Example for calling SaveBillTo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveBillTo" title="Code Example for calling SaveBillTo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillTo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillTo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillTo.RequestData> SaveBillTo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveBillTo.Request, Diamond.Common.Services.Messages.BillingService.SaveBillTo.Response, Diamond.Common.Services.Messages.BillingService.SaveBillTo.RequestData>(proxy, proxy.SaveBillTo);
            return s;
        }
        ///<summary> Sets the notice dates on a policy. Used for conversion. </summary>///<param name="request">A wrapper request with policy_id, remindernoticedate, legalnoticedate, finalnoticedate, and a nonrenewal flag.</param>///<returns>A wrapper response with success flag.</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\BillingSave.vb" region="SaveNoticeDates" title="Code Example for calling SaveNoticeDates function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\BillingSave.vb" region="SaveNoticeDates" title="Code Example for calling SaveNoticeDates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.Request, Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.Response, Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.RequestData> SaveNoticeDates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.Request, Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.Response, Diamond.Common.Services.Messages.BillingService.SaveNoticeDates.RequestData>(proxy, proxy.SaveNoticeDates);
            return s;
        }
        ///<summary>  SavePaymentProcessorData </summary>///<param name="request"></param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetupInfo.vb" region="SavePaymentProcessorData" title="Code Example for calling SavePaymentProcessorData function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\AuthorizeNetSetup\AuthorizeNetSetupInfo.vb" region="SavePaymentProcessorData" title="Code Example for calling SavePaymentProcessorData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.RequestData> SavePaymentProcessorData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.Request, Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.Response, Diamond.Common.Services.Messages.BillingService.SavePaymentProcessorData.RequestData>(proxy, proxy.SavePaymentProcessorData);
            return s;
        }
        ///<summary> Saves the policies payroll deduction info. </summary>///<param name="request">The request object containing collection of PayrollDeductionAccount objects to be saved </param>///<returns>A response object containing indicator showing the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\PayrollDeductionInfoForm.vb" region="SavePayrollDeductionInfo" title="Code Example for calling SavePayrollDeductionInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\PayrollDeductionInfoForm.vb" region="SavePayrollDeductionInfo" title="Code Example for calling SavePayrollDeductionInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.RequestData> SavePayrollDeductionInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePayrollDeductionInfo.RequestData>(proxy, proxy.SavePayrollDeductionInfo);
            return s;
        }
        ///<summary> Saves credit card data for the given policy. </summary>///<param name="request">The request takes in the Billing.CreditCard object and a policyId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.SavePolicyCreditCardInfo.Response" /> Returns  success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.SavePolicyCreditCardInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\CreditCard.vb" region="SavePolicyCreditCardInfo" title="Code Example for calling SavePolicyCreditCardInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\CreditCard.vb" region="SavePolicyCreditCardInfo" title="Code Example for calling SavePolicyCreditCardInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.RequestData> SavePolicyCreditCardInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePolicyCreditCardInfo.RequestData>(proxy, proxy.SavePolicyCreditCardInfo);
            return s;
        }
        ///<summary> Saves the policy EFT info. </summary>///<param name="request">The request containing PolicyId, EFT object and EFT validation required flag</param>///<returns>A response object containing indicator for success/failure of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="SavePolicyEftInfo" title="Code Example for calling SavePolicyEftInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="SavePolicyEftInfo" title="Code Example for calling SavePolicyEftInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.RequestData> SavePolicyEftInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.Request, Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.Response, Diamond.Common.Services.Messages.BillingService.SavePolicyEftInfo.RequestData>(proxy, proxy.SavePolicyEftInfo);
            return s;
        }
        ///<summary> Unlinks a policy from a billing account </summary>///<param name="request">The request takes in the billingpayplanID, effective date, billmethod, CSLID</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalPayPlan.Response" /> Returns the Renewal BillingPayplan ID and a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.GetRenewalPayPlan.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.RequestData> UnlinkPolicyFromBillingAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.Request, Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.Response, Diamond.Common.Services.Messages.BillingService.UnlinkPolicyFromBillingAccount.RequestData>(proxy, proxy.UnlinkPolicyFromBillingAccount);
            return s;
        }
        ///<summary> Updates the payplan in the Account table </summary>///<param name="request">The request takes in the policyId, policyImageNum, and transtypeId</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.UpdateAccountPayPlan.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.UpdateAccountPayPlan.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateAccountPayPlan" title="Code Example for calling UpdateAccountPayPlan function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateAccountPayPlan" title="Code Example for calling UpdateAccountPayPlan function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.Request, Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.Response, Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.RequestData> UpdateAccountPayPlan()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.Request, Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.Response, Diamond.Common.Services.Messages.BillingService.UpdateAccountPayPlan.RequestData>(proxy, proxy.UpdateAccountPayPlan);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.Request, Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.Response, Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.RequestData> UpdateBillingRefundOptionPerClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.Request, Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.Response, Diamond.Common.Services.Messages.BillingService.UpdateBillingRefundOptionPerClient.RequestData>(proxy, proxy.UpdateBillingRefundOptionPerClient);
            return s;
        }
        ///<summary> Returns a boolean indicating success </summary>///<param name="request">The request takes in a collection of TransactionData objects</param>///<returns> Returns an indicator of success </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateMultipleEFTAccounts" title="Code Example for calling UpdateMultipleEFTAccounts function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateMultipleEFTAccounts" title="Code Example for calling UpdateMultipleEFTAccounts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.Request, Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.Response, Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.RequestData> UpdateMultipleEFTAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.Request, Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.Response, Diamond.Common.Services.Messages.BillingService.UpdateMultipleEFTAccounts.RequestData>(proxy, proxy.UpdateMultipleEFTAccounts);
            return s;
        }
        ///<summary> Validates an applycash object, with both base and company rules </summary>///<param name="request">DCO.Billing.ApplyCash object</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\ReceiphHQ.vb" region="ValidateApplyCash" title="Code Example for calling ValidateApplyCash function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\ReceiphHQ.vb" region="ValidateApplyCash" title="Code Example for calling ValidateApplyCash function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.Request, Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.Response, Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.RequestData> ValidateApplyCash()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.Request, Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.Response, Diamond.Common.Services.Messages.BillingService.ValidateApplyCash.RequestData>(proxy, proxy.ValidateApplyCash);
            return s;
        }
        ///<summary> Validates billingaccount link </summary>///<param name="request">DCO.Billing.ApplyCash object</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Billing\ReceiphHQ.vb" region="ValidateBillingAccountLinkAtSubmit" title="Code Example for calling ValidateBillingAccountLinkAtSubmit function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Billing\ReceiphHQ.vb" region="ValidateBillingAccountLinkAtSubmit" title="Code Example for calling ValidateBillingAccountLinkAtSubmit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.Request, Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.Response, Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.RequestData> ValidateBillingAccountLinkAtSubmit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.Request, Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.Response, Diamond.Common.Services.Messages.BillingService.ValidateBillingAccountLinkAtSubmit.RequestData>(proxy, proxy.ValidateBillingAccountLinkAtSubmit);
            return s;
        }
        ///<summary> Verifies the billing is in balance </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.VerifyBilling.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.VerifyBilling.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="VerifyBilling" title="Code Example for calling VerifyBilling function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\EditBillingForm.vb" region="VerifyBilling" title="Code Example for calling VerifyBilling function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.VerifyBilling.Request, Diamond.Common.Services.Messages.BillingService.VerifyBilling.Response, Diamond.Common.Services.Messages.BillingService.VerifyBilling.RequestData> VerifyBilling()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.VerifyBilling.Request, Diamond.Common.Services.Messages.BillingService.VerifyBilling.Response, Diamond.Common.Services.Messages.BillingService.VerifyBilling.RequestData>(proxy, proxy.VerifyBilling);
            return s;
        }
        ///<summary> Voids a refund check on a policy </summary>///<param name="request">The request takes in the Billing.BusinessData object</param>///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.BillingService.VoidRefundCheck.Response" /> Returns a success indicator </returns>///<see cref="T:Diamond.ServiceMessages.BillingService.VoidRefundCheck.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="VoidRefundCheck" title="Code Example for calling VoidRefundCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AccountingAdjustmentForm.vb" region="VoidRefundCheck" title="Code Example for calling VoidRefundCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.Request, Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.Response, Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.RequestData> VoidRefundCheck()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.Request, Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.Response, Diamond.Common.Services.Messages.BillingService.VoidRefundCheck.RequestData>(proxy, proxy.VoidRefundCheck);
            return s;
        }
    }
    ///<summary> Proxy class for Check Service such as Load Check, Change/Delete Payee etc </summary>
    public static class CheckService
    {
        ///<summary> Builds the queue of checks to be processed </summary>///<param name="request">The request contains Checks.CompanyStateLob, Checks.CheckType and suspenseaccount_id</param>///<returns>Checks.Checks object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="BuildQueue" title="Code Example for calling BuildQueue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="BuildQueue" title="Code Example for calling BuildQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.BuildQueue.Request, Diamond.Common.Services.Messages.CheckService.BuildQueue.Response, Diamond.Common.Services.Messages.CheckService.BuildQueue.RequestData> BuildQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.BuildQueue.Request, Diamond.Common.Services.Messages.CheckService.BuildQueue.Response, Diamond.Common.Services.Messages.CheckService.BuildQueue.RequestData>(proxy, proxy.BuildQueue);
            return s;
        }
        ///<summary> Changes the payee. </summary>///<param name="request">The request object containing collection of Checks.CheckPayee objects</param>///<returns>Nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayeeForm.vb" region="ChangePayee" title="Code Example for calling ChangePayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayeeForm.vb" region="ChangePayee" title="Code Example for calling ChangePayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ChangePayee.Request, Diamond.Common.Services.Messages.CheckService.ChangePayee.Response, Diamond.Common.Services.Messages.CheckService.ChangePayee.RequestData> ChangePayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ChangePayee.Request, Diamond.Common.Services.Messages.CheckService.ChangePayee.Response, Diamond.Common.Services.Messages.CheckService.ChangePayee.RequestData>(proxy, proxy.ChangePayee);
            return s;
        }
        ///<summary> Checks the name of the job. </summary>///<param name="request">The request object containing the job name.</param>///<returns>A response object containing a boolean indicating whether the job is found</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="CheckJobName" title="Code Example for calling CheckJobName function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="CheckJobName" title="Code Example for calling CheckJobName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.CheckJobName.Request, Diamond.Common.Services.Messages.CheckService.CheckJobName.Response, Diamond.Common.Services.Messages.CheckService.CheckJobName.RequestData> CheckJobName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.CheckJobName.Request, Diamond.Common.Services.Messages.CheckService.CheckJobName.Response, Diamond.Common.Services.Messages.CheckService.CheckJobName.RequestData>(proxy, proxy.CheckJobName);
            return s;
        }
        ///<summary> Clears the checks. </summary>///<param name="request">The request object containing collection of Check object.</param>///<returns>A response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="ClearChecks" title="Code Example for calling ClearChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="ClearChecks" title="Code Example for calling ClearChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ClearChecks.Request, Diamond.Common.Services.Messages.CheckService.ClearChecks.Response, Diamond.Common.Services.Messages.CheckService.ClearChecks.RequestData> ClearChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ClearChecks.Request, Diamond.Common.Services.Messages.CheckService.ClearChecks.Response, Diamond.Common.Services.Messages.CheckService.ClearChecks.RequestData>(proxy, proxy.ClearChecks);
            return s;
        }
        ///<summary> Creates the agency commission check records </summary>///<param name="request">The request contains the Checks.CompanyStateLob object and the accounting_date</param>///<returns>Returns no paramters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="CreateAgencyChecks" title="Code Example for calling CreateAgencyChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="CreateAgencyChecks" title="Code Example for calling CreateAgencyChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.Request, Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.Response, Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.RequestData> CreateAgencyChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.Request, Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.Response, Diamond.Common.Services.Messages.CheckService.CreateAgencyChecks.RequestData>(proxy, proxy.CreateAgencyChecks);
            return s;
        }
        ///<summary> Creates a manual checkitem/check for a tax code municipality </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="CreateManualMunicipalCheck" title="Code Example for calling CreateManualMunicipalCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="CreateManualMunicipalCheck" title="Code Example for calling CreateManualMunicipalCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.Request, Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.Response, Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.RequestData> CreateManualMunicipalCheck()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.Request, Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.Response, Diamond.Common.Services.Messages.CheckService.CreateManualMunicipalCheck.RequestData>(proxy, proxy.CreateManualMunicipalCheck);
            return s;
        }
        ///<summary> Creates (Generates) municipal checks </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="CreateMunicipalChecks" title="Code Example for calling CreateMunicipalChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="CreateMunicipalChecks" title="Code Example for calling CreateMunicipalChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.Request, Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.Response, Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.RequestData> CreateMunicipalChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.Request, Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.Response, Diamond.Common.Services.Messages.CheckService.CreateMunicipalChecks.RequestData>(proxy, proxy.CreateMunicipalChecks);
            return s;
        }
        ///<summary> Deletes a specific check by checkid </summary>///<param name="request">The request object containing the checkid.</param>///<returns>A response object containing UpdateCheckStatus indicating the status of the check</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Delete" title="Code Example for calling Delete function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Delete" title="Code Example for calling Delete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.Delete.Request, Diamond.Common.Services.Messages.CheckService.Delete.Response, Diamond.Common.Services.Messages.CheckService.Delete.RequestData> Delete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.Delete.Request, Diamond.Common.Services.Messages.CheckService.Delete.Response, Diamond.Common.Services.Messages.CheckService.Delete.RequestData>(proxy, proxy.Delete);
            return s;
        }
        ///<summary> Deletes a single check rule from the database. </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRules.vb" region="DeleteCheckRule" title="Code Example for calling DeleteCheckRule function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRules.vb" region="DeleteCheckRule" title="Code Example for calling DeleteCheckRule function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.Request, Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.Response, Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.RequestData> DeleteCheckRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.Request, Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.Response, Diamond.Common.Services.Messages.CheckService.DeleteCheckRule.RequestData>(proxy, proxy.DeleteCheckRule);
            return s;
        }
        ///<summary> Deletes the check process jobs from Queue </summary>///<param name="request">The request object containing CheckProcessJobId.</param>///<returns>A response object containing boolean indicating the success/failure of the Delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\JobSetup.vb" region="DeleteJobs" title="Code Example for calling DeleteJobs function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\JobSetup.vb" region="DeleteJobs" title="Code Example for calling DeleteJobs function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteJobs.Request, Diamond.Common.Services.Messages.CheckService.DeleteJobs.Response, Diamond.Common.Services.Messages.CheckService.DeleteJobs.RequestData> DeleteJobs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteJobs.Request, Diamond.Common.Services.Messages.CheckService.DeleteJobs.Response, Diamond.Common.Services.Messages.CheckService.DeleteJobs.RequestData>(proxy, proxy.DeleteJobs);
            return s;
        }
        ///<summary> Deletes the job tasks. </summary>///<param name="request">A request object containing CheckProcessJobId, CheckTypeId and CompanyStateLobId</param>///<returns>A response object containing boolean indicating success/failure of the Delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="DeleteJobTasks" title="Code Example for calling DeleteJobTasks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="DeleteJobTasks" title="Code Example for calling DeleteJobTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.Request, Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.Response, Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.RequestData> DeleteJobTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.Request, Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.Response, Diamond.Common.Services.Messages.CheckService.DeleteJobTasks.RequestData>(proxy, proxy.DeleteJobTasks);
            return s;
        }
        ///<summary> Deletes name and address associated with a payee for a given taxcode </summary>///<param name="request">The request contains a municipal check payee object</param>///<returns>Returns nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="DeleteMunicipalCheckPayee" title="Code Example for calling DeleteMunicipalCheckPayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="DeleteMunicipalCheckPayee" title="Code Example for calling DeleteMunicipalCheckPayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.Request, Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.Response, Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.RequestData> DeleteMunicipalCheckPayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.Request, Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.Response, Diamond.Common.Services.Messages.CheckService.DeleteMunicipalCheckPayee.RequestData>(proxy, proxy.DeleteMunicipalCheckPayee);
            return s;
        }
        ///<summary> Deletes the payee. </summary>///<param name="request">The request object containing info of Check Payee to be deleted</param>///<returns>A response object containing boolean indicating success/failure of the delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayeeForm.vb" region="DeletePayee" title="Code Example for calling DeletePayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\ChangePayeeForm.vb" region="DeletePayee" title="Code Example for calling DeletePayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.DeletePayee.Request, Diamond.Common.Services.Messages.CheckService.DeletePayee.Response, Diamond.Common.Services.Messages.CheckService.DeletePayee.RequestData> DeletePayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.DeletePayee.Request, Diamond.Common.Services.Messages.CheckService.DeletePayee.Response, Diamond.Common.Services.Messages.CheckService.DeletePayee.RequestData>(proxy, proxy.DeletePayee);
            return s;
        }
        ///<summary> Determines which export format to use for the check. </summary>///<param name="request">The request contains the Checks object</param>///<returns>Returns authority indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="ExportCheckData" title="Code Example for calling ExportCheckData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="ExportCheckData" title="Code Example for calling ExportCheckData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ExportCheckData.Request, Diamond.Common.Services.Messages.CheckService.ExportCheckData.Response, Diamond.Common.Services.Messages.CheckService.ExportCheckData.RequestData> ExportCheckData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ExportCheckData.Request, Diamond.Common.Services.Messages.CheckService.ExportCheckData.Response, Diamond.Common.Services.Messages.CheckService.ExportCheckData.RequestData>(proxy, proxy.ExportCheckData);
            return s;
        }
        ///<summary> Exports check data to an XML File </summary>///<param name="request">The request contains no parameters</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="ExportVoidCheckDataXML" title="Code Example for calling ExportVoidCheckDataXML function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="ExportVoidCheckDataXML" title="Code Example for calling ExportVoidCheckDataXML function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.RequestData> ExportVoidCheckDataXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ExportVoidCheckDataXML.RequestData>(proxy, proxy.ExportVoidCheckDataXML);
            return s;
        }
        ///<summary> Generates Return Premium Checks </summary>///<param name="request">The request object containing CompanyStateLOBId and AccountingDate</param>///<returns>A response object containing a count showing number of checks generated</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GenerateChecks" title="Code Example for calling GenerateChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GenerateChecks" title="Code Example for calling GenerateChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GenerateChecks.Request, Diamond.Common.Services.Messages.CheckService.GenerateChecks.Response, Diamond.Common.Services.Messages.CheckService.GenerateChecks.RequestData> GenerateChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GenerateChecks.Request, Diamond.Common.Services.Messages.CheckService.GenerateChecks.Response, Diamond.Common.Services.Messages.CheckService.GenerateChecks.RequestData>(proxy, proxy.GenerateChecks);
            return s;
        }
        ///<summary> Gets all checks queued for export </summary>///<param name="request">The request contains Checks.CheckObject</param>///<returns>Returns Checks.CheckObject</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetAllCheckExport" title="Code Example for calling GetAllCheckExport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetAllCheckExport" title="Code Example for calling GetAllCheckExport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.Request, Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.Response, Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.RequestData> GetAllCheckExport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.Request, Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.Response, Diamond.Common.Services.Messages.CheckService.GetAllCheckExport.RequestData>(proxy, proxy.GetAllCheckExport);
            return s;
        }
        ///<summary> Gets the check remark. </summary>///<param name="request">The request object containing the CheckId.</param>///<returns>A response object containing the CheckRemark</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddRemarkForm.vb" region="GetCheckRemark" title="Code Example for calling GetCheckRemark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddRemarkForm.vb" region="GetCheckRemark" title="Code Example for calling GetCheckRemark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetCheckRemark.Request, Diamond.Common.Services.Messages.CheckService.GetCheckRemark.Response, Diamond.Common.Services.Messages.CheckService.GetCheckRemark.RequestData> GetCheckRemark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetCheckRemark.Request, Diamond.Common.Services.Messages.CheckService.GetCheckRemark.Response, Diamond.Common.Services.Messages.CheckService.GetCheckRemark.RequestData>(proxy, proxy.GetCheckRemark);
            return s;
        }
        ///<summary> Gets the export file. </summary>///<param name="request">The request contains bankaccount_id checktypeid, and checkprocessjobId</param>///<returns>Returns Checks.CheckObject</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetExportFile" title="Code Example for calling GetExportFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetExportFile" title="Code Example for calling GetExportFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetExportFile.Request, Diamond.Common.Services.Messages.CheckService.GetExportFile.Response, Diamond.Common.Services.Messages.CheckService.GetExportFile.RequestData> GetExportFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetExportFile.Request, Diamond.Common.Services.Messages.CheckService.GetExportFile.Response, Diamond.Common.Services.Messages.CheckService.GetExportFile.RequestData>(proxy, proxy.GetExportFile);
            return s;
        }
        ///<summary> Gets the check mail to information. </summary>///<param name="request">The request contains the check Id</param>///<returns>Returns Checks.Checks object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="GetMailToInformation" title="Code Example for calling GetMailToInformation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="GetMailToInformation" title="Code Example for calling GetMailToInformation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMailToInformation.Request, Diamond.Common.Services.Messages.CheckService.GetMailToInformation.Response, Diamond.Common.Services.Messages.CheckService.GetMailToInformation.RequestData> GetMailToInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMailToInformation.Request, Diamond.Common.Services.Messages.CheckService.GetMailToInformation.Response, Diamond.Common.Services.Messages.CheckService.GetMailToInformation.RequestData>(proxy, proxy.GetMailToInformation);
            return s;
        }
        ///<summary> Gathers municipal check activity for a given tax code and year range </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="GetMunicipalCheckActivity" title="Code Example for calling GetMunicipalCheckActivity function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="GetMunicipalCheckActivity" title="Code Example for calling GetMunicipalCheckActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.RequestData> GetMunicipalCheckActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckActivity.RequestData>(proxy, proxy.GetMunicipalCheckActivity);
            return s;
        }
        ///<summary> Gets a name/address object for a specific Municipal Check Payee </summary>///<param name="request">The request contains a name_id and address_id</param>///<returns>Returns a name and address object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckPayee.vb" region="GetMunicipalCheckPayeeNameAddress" title="Code Example for calling GetMunicipalCheckPayeeNameAddress function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckPayee.vb" region="GetMunicipalCheckPayeeNameAddress" title="Code Example for calling GetMunicipalCheckPayeeNameAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.RequestData> GetMunicipalCheckPayeeNameAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayeeNameAddress.RequestData>(proxy, proxy.GetMunicipalCheckPayeeNameAddress);
            return s;
        }
        ///<summary> Gets all tax codes and their associated payees </summary>///<param name="request">The request contains nothing</param>///<returns>Returns a collection of Municipal Check Payees</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="GetMunicipalCheckPayees" title="Code Example for calling GetMunicipalCheckPayees function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckSetup.vb" region="GetMunicipalCheckPayees" title="Code Example for calling GetMunicipalCheckPayees function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.RequestData> GetMunicipalCheckPayees()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.Request, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.Response, Diamond.Common.Services.Messages.CheckService.GetMunicipalCheckPayees.RequestData>(proxy, proxy.GetMunicipalCheckPayees);
            return s;
        }
        ///<summary> Gets the next check number from the BankAccount table </summary>///<param name="request">The request contains checkId, companystatelobId, and checktypeId</param>///<returns>Returns the nextCheckNumber</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetNextCheckNumber" title="Code Example for calling GetNextCheckNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="GetNextCheckNumber" title="Code Example for calling GetNextCheckNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.Request, Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.Response, Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.RequestData> GetNextCheckNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.Request, Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.Response, Diamond.Common.Services.Messages.CheckService.GetNextCheckNumber.RequestData>(proxy, proxy.GetNextCheckNumber);
            return s;
        }
        ///<summary> Imports Check Data </summary>///<param name="request">The request contains the Export/Import path and filename, and an array of checks</param>///<returns>A response object containing boolean indicating the success/failure of the import operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="ImportCheckDataXML" title="Code Example for calling ImportCheckDataXML function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="ImportCheckDataXML" title="Code Example for calling ImportCheckDataXML function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.RequestData> ImportCheckDataXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ImportCheckDataXML.RequestData>(proxy, proxy.ImportCheckDataXML);
            return s;
        }
        ///<summary> Imports Positive Pay Check Data </summary>///<param name="request">The request contains the Export/Import path and filename</param>///<returns>Returns summary of events</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearedCheckImport.vb" region="ImportPositivePayCheckDataXML" title="Code Example for calling ImportPositivePayCheckDataXML function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearedCheckImport.vb" region="ImportPositivePayCheckDataXML" title="Code Example for calling ImportPositivePayCheckDataXML function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.RequestData> ImportPositivePayCheckDataXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.Request, Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.Response, Diamond.Common.Services.Messages.CheckService.ImportPositivePayCheckDataXML.RequestData>(proxy, proxy.ImportPositivePayCheckDataXML);
            return s;
        }
        ///<summary> Issues the check </summary>///<param name="request">The request contains Checks.Checkitem and manual_check indicator</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Issue" title="Code Example for calling Issue function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Issue" title="Code Example for calling Issue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.Issue.Request, Diamond.Common.Services.Messages.CheckService.Issue.Response, Diamond.Common.Services.Messages.CheckService.Issue.RequestData> Issue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.Issue.Request, Diamond.Common.Services.Messages.CheckService.Issue.Response, Diamond.Common.Services.Messages.CheckService.Issue.RequestData>(proxy, proxy.Issue);
            return s;
        }
        ///<summary> Loads the checks for the selected bank account </summary>///<param name="request">The request contains bankaccountId, Type, search type, check number and amount of check</param>///<returns>Returns Checks.Checks object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="LoadVoidedAccountsChecks" title="Code Example for calling LoadAccountsChecks function to retrieve voided checks"></code>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="LoadClearedAccountsChecks" title="Code Example for calling LoadAccountsChecks function to retrieve cleared checks"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="LoadVoidedAccountsChecks" title="Code Example for calling LoadAccountsChecks function to retrieve voided checks"></code>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="LoadClearedAccountsChecks" title="Code Example for calling LoadAccountsChecks function to retrieve cleared checks"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.Request, Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.Response, Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.RequestData> LoadAccountsChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.Request, Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.Response, Diamond.Common.Services.Messages.CheckService.LoadAccountsChecks.RequestData>(proxy, proxy.LoadAccountsChecks);
            return s;
        }
        ///<summary> Loads the checks queue </summary>///<param name="request">The request contains no parameters</param>///<returns> Returns Administration.BankAccount object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="LoadAccountsShape" title="Code Example for calling LoadAccountsShape function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ClearChecks.vb" region="LoadAccountsShape" title="Code Example for calling LoadAccountsShape function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.Request, Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.Response, Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.RequestData> LoadAccountsShape()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.Request, Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.Response, Diamond.Common.Services.Messages.CheckService.LoadAccountsShape.RequestData>(proxy, proxy.LoadAccountsShape);
            return s;
        }
        ///<summary> Loads all of the check rules for all companies so that they can be edited. </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRules.vb" region="LoadAllCheckRules" title="Code Example for calling CreateManualMunicipalCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRules.vb" region="LoadAllCheckRules" title="Code Example for calling CreateManualMunicipalCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.Request, Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.Response, Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.RequestData> LoadAllCheckRules()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.Request, Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.Response, Diamond.Common.Services.Messages.CheckService.LoadAllCheckRules.RequestData>(proxy, proxy.LoadAllCheckRules);
            return s;
        }
        ///<summary> Loads the checks to the checks screen. </summary>///<param name="request">The request contains suspenseaccountId, Checks.Checktype,</param>///<returns>Returns Checks.Checks object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadChecks" title="Code Example for calling LoadChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadChecks" title="Code Example for calling LoadChecks function"></code>///<remarks>For SuspendedAccounts, make sure 'LoadSuspenseAccount' service method is called to get the SuspenseAccountId and populate its value as shown in the code example</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadChecks.Request, Diamond.Common.Services.Messages.CheckService.LoadChecks.Response, Diamond.Common.Services.Messages.CheckService.LoadChecks.RequestData> LoadChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadChecks.Request, Diamond.Common.Services.Messages.CheckService.LoadChecks.Response, Diamond.Common.Services.Messages.CheckService.LoadChecks.RequestData>(proxy, proxy.LoadChecks);
            return s;
        }
        ///<summary> Loads the company, state, lobs available for the selected check job </summary>///<param name="request">The request contains checkprocessJobId</param>///<returns>Returns Checks.CompanyStateLob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadChecksForJob" title="Code Example for calling LoadChecksForJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadChecksForJob" title="Code Example for calling LoadChecksForJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.Request, Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.Response, Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.RequestData> LoadChecksForJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.Request, Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.Response, Diamond.Common.Services.Messages.CheckService.LoadChecksForJob.RequestData>(proxy, proxy.LoadChecksForJob);
            return s;
        }
        ///<summary> Loads the company. </summary>///<param name="request">The request containing nothirng</param>///<returns>A response object containing DataTable</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadCompany" title="Code Example for calling LoadCompany function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadCompany" title="Code Example for calling LoadCompany function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadCompany.Request, Diamond.Common.Services.Messages.CheckService.LoadCompany.Response, Diamond.Common.Services.Messages.CheckService.LoadCompany.RequestData> LoadCompany()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadCompany.Request, Diamond.Common.Services.Messages.CheckService.LoadCompany.Response, Diamond.Common.Services.Messages.CheckService.LoadCompany.RequestData>(proxy, proxy.LoadCompany);
            return s;
        }
        ///<summary> Loads the company, state, lob combinations available for the selected check type </summary>///<param name="request">The request contains checktype_id, and bankAccount_id</param>///<returns>Returns Checks.CheckObject object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="LoadCSL" title="Code Example for calling LoadCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="LoadCSL" title="Code Example for calling LoadCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadCSL.Request, Diamond.Common.Services.Messages.CheckService.LoadCSL.Response, Diamond.Common.Services.Messages.CheckService.LoadCSL.RequestData> LoadCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadCSL.Request, Diamond.Common.Services.Messages.CheckService.LoadCSL.Response, Diamond.Common.Services.Messages.CheckService.LoadCSL.RequestData>(proxy, proxy.LoadCSL);
            return s;
        }
        ///<summary> Loads the saved check jobs based on BankAccountId </summary>///<param name="request">A request object containing BankAccountId</param>///<returns>A response object containing the Checks.CheckObject object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\JobSetup.vb" region="LoadJobs" title="Code Example for calling LoadJobs function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\JobSetup.vb" region="LoadJobs" title="Code Example for calling LoadJobs function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadJobs.Request, Diamond.Common.Services.Messages.CheckService.LoadJobs.Response, Diamond.Common.Services.Messages.CheckService.LoadJobs.RequestData> LoadJobs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadJobs.Request, Diamond.Common.Services.Messages.CheckService.LoadJobs.Response, Diamond.Common.Services.Messages.CheckService.LoadJobs.RequestData>(proxy, proxy.LoadJobs);
            return s;
        }
        ///<summary> Loads the job tasks (add, renumber, post, etc). </summary>///<param name="request">The request contains checkprocessjob_id</param>///<returns>A response object containing collection CheckProcessJob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadJobTasks" title="Code Example for calling LoadJobTasks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadJobTasks" title="Code Example for calling LoadJobTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadJobTasks.Request, Diamond.Common.Services.Messages.CheckService.LoadJobTasks.Response, Diamond.Common.Services.Messages.CheckService.LoadJobTasks.RequestData> LoadJobTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadJobTasks.Request, Diamond.Common.Services.Messages.CheckService.LoadJobTasks.Response, Diamond.Common.Services.Messages.CheckService.LoadJobTasks.RequestData>(proxy, proxy.LoadJobTasks);
            return s;
        }
        ///<summary> Loads the payee info. </summary>///<param name="request">The request contains check_id</param>///<returns>Returns success indicator and the Checks.CheckPayee object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="LoadPayeeInfo" title="Code Example for calling LoadPayeeInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="LoadPayeeInfo" title="Code Example for calling LoadPayeeInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.Request, Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.Response, Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.RequestData> LoadPayeeInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.Request, Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.Response, Diamond.Common.Services.Messages.CheckService.LoadPayeeInfo.RequestData>(proxy, proxy.LoadPayeeInfo);
            return s;
        }
        ///<summary> Loads the processing steps. </summary>///<param name="request">The request contains checkprocessjob_id (from the CheckProcessJob table)</param>///<returns>Returns the Checks.CheckProcessJob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadProcessingSteps" title="Code Example for calling LoadProcessingSteps function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadProcessingSteps" title="Code Example for calling LoadProcessingSteps function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.Request, Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.Response, Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.RequestData> LoadProcessingSteps()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.Request, Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.Response, Diamond.Common.Services.Messages.CheckService.LoadProcessingSteps.RequestData>(proxy, proxy.LoadProcessingSteps);
            return s;
        }
        ///<summary> Loads the specific check. </summary>///<param name="request">The request contains check_id</param>///<returns>Returns the Checks.Check object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="LoadSpecificCheck" title="Code Example for calling LoadSpecificCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="LoadSpecificCheck" title="Code Example for calling LoadSpecificCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.Request, Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.Response, Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.RequestData> LoadSpecificCheck()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.Request, Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.Response, Diamond.Common.Services.Messages.CheckService.LoadSpecificCheck.RequestData>(proxy, proxy.LoadSpecificCheck);
            return s;
        }
        ///<summary> Loads the suspense account. </summary>///<param name="request">The request contains checkprocessjob_id, unused indicator,</param>///<returns>Returns the Accounting.SuspenseAccount object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadSuspenseAccount" title="Code Example for calling LoadSuspenseAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="LoadSuspenseAccount" title="Code Example for calling LoadSuspenseAccount function"></code>///<remarks> Set 'SuspenseAccountRequest.RequestData.Unused = False' for loading Used Suspended Account and 'SuspenseAccountRequest.RequestData.Unused = True' for loading Unused Suspended Account </remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.Request, Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.Response, Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.RequestData> LoadSuspenseAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.Request, Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.Response, Diamond.Common.Services.Messages.CheckService.LoadSuspenseAccount.RequestData>(proxy, proxy.LoadSuspenseAccount);
            return s;
        }
        ///<summary> Load voided check items based on CheckId </summary>///<param name="request">A request object containing the CheckId</param>///<returns>A response object containing collection of CheckItem object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="LoadVoidCheckItems" title="Code Example for calling LoadVoidCheckItems function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="LoadVoidCheckItems" title="Code Example for calling LoadVoidCheckItems function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.Request, Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.Response, Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.RequestData> LoadVoidCheckItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.Request, Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.Response, Diamond.Common.Services.Messages.CheckService.LoadVoidCheckitems.RequestData>(proxy, proxy.LoadVoidCheckItems);
            return s;
        }
        ///<summary> Looks up the pay to for a check. </summary>///<param name="request">The request contains check_id and the Checks.CheckPayeeLookup object</param>///<returns>returns success indicator and the Checks.CheckPayee object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ChangeMailTo.vb" region="LookupPayTo" title="Code Example for calling LookupPayTo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ChangeMailTo.vb" region="LookupPayTo" title="Code Example for calling LookupPayTo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LookupPayTo.Request, Diamond.Common.Services.Messages.CheckService.LookupPayTo.Response, Diamond.Common.Services.Messages.CheckService.LookupPayTo.RequestData> LookupPayTo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LookupPayTo.Request, Diamond.Common.Services.Messages.CheckService.LookupPayTo.Response, Diamond.Common.Services.Messages.CheckService.LookupPayTo.RequestData>(proxy, proxy.LookupPayTo);
            return s;
        }
        ///<summary> Looks up the pay to on a specified check </summary>///<param name="request">The request contains the Checks.CheckPayeeLookup object and the policy_id and policyimage_num</param>///<returns>returns success indicator and the Checks.CheckPayee object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AutomaticRefundForm.vb" region="LookupPolicyPayTo" title="Code Example for calling LookupPolicyPayTo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AutomaticRefundForm.vb" region="LookupPolicyPayTo" title="Code Example for calling LookupPolicyPayTo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.Request, Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.Response, Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.RequestData> LookupPolicyPayTo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.Request, Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.Response, Diamond.Common.Services.Messages.CheckService.LookupPolicyPayTo.RequestData>(proxy, proxy.LookupPolicyPayTo);
            return s;
        }
        ///<summary> Modifies the check </summary>///<param name="request">The request contains check information</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Modify" title="Code Example for calling Modify function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Modify" title="Code Example for calling Modify function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.Modify.Request, Diamond.Common.Services.Messages.CheckService.Modify.Response, Diamond.Common.Services.Messages.CheckService.Modify.RequestData> Modify()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.Modify.Request, Diamond.Common.Services.Messages.CheckService.Modify.Response, Diamond.Common.Services.Messages.CheckService.Modify.RequestData>(proxy, proxy.Modify);
            return s;
        }
        ///<summary> Exports the positive pay file </summary>///<param name="request">The request contains bankaccount_id, start and ending date ranges </param>///<returns>returns file as a string</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\PositivePayException.vb" region="PositivePayExport" title="Code Example for calling PositivePayExport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\PositivePayException.vb" region="PositivePayExport" title="Code Example for calling PositivePayExport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.PositivePayExport.Request, Diamond.Common.Services.Messages.CheckService.PositivePayExport.Response, Diamond.Common.Services.Messages.CheckService.PositivePayExport.RequestData> PositivePayExport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.PositivePayExport.Request, Diamond.Common.Services.Messages.CheckService.PositivePayExport.Response, Diamond.Common.Services.Messages.CheckService.PositivePayExport.RequestData>(proxy, proxy.PositivePayExport);
            return s;
        }
        ///<summary> Posts the checks </summary>///<param name="request">The request contains the Checks.Checks and Checks.Checktype object,</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="PostChecks" title="Code Example for calling PostChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="PostChecks" title="Code Example for calling PostChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.PostChecks.Request, Diamond.Common.Services.Messages.CheckService.PostChecks.Response, Diamond.Common.Services.Messages.CheckService.PostChecks.RequestData> PostChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.PostChecks.Request, Diamond.Common.Services.Messages.CheckService.PostChecks.Response, Diamond.Common.Services.Messages.CheckService.PostChecks.RequestData>(proxy, proxy.PostChecks);
            return s;
        }
        ///<summary> Prints the selected checks from the queue </summary>///<param name="request">The request contains the Checks.Checks object `</param>///<returns>returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="PrintChecks" title="Code Example for calling PrintChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="PrintChecks" title="Code Example for calling PrintChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.PrintChecks.Request, Diamond.Common.Services.Messages.CheckService.PrintChecks.Response, Diamond.Common.Services.Messages.CheckService.PrintChecks.RequestData> PrintChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.PrintChecks.Request, Diamond.Common.Services.Messages.CheckService.PrintChecks.Response, Diamond.Common.Services.Messages.CheckService.PrintChecks.RequestData>(proxy, proxy.PrintChecks);
            return s;
        }
        ///<summary> Removes the checks from the queue </summary>///<param name="request">The request contains the Checks.CheckType object and Checks.Checks object </param>///<returns>returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="RemoveChecks" title="Code Example for calling RemoveChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="RemoveChecks" title="Code Example for calling RemoveChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.RemoveChecks.Request, Diamond.Common.Services.Messages.CheckService.RemoveChecks.Response, Diamond.Common.Services.Messages.CheckService.RemoveChecks.RequestData> RemoveChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.RemoveChecks.Request, Diamond.Common.Services.Messages.CheckService.RemoveChecks.Response, Diamond.Common.Services.Messages.CheckService.RemoveChecks.RequestData>(proxy, proxy.RemoveChecks);
            return s;
        }
        ///<summary> Renumbers the selected check(s). </summary>///<param name="request">The request contains the Checks.Checks and Checks.CheckType object and the starting check number </param>///<returns>returns check number</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="RenumberChecks" title="Code Example for calling RenumberChecks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="RenumberChecks" title="Code Example for calling RenumberChecks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.RenumberChecks.Request, Diamond.Common.Services.Messages.CheckService.RenumberChecks.Response, Diamond.Common.Services.Messages.CheckService.RenumberChecks.RequestData> RenumberChecks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.RenumberChecks.Request, Diamond.Common.Services.Messages.CheckService.RenumberChecks.Response, Diamond.Common.Services.Messages.CheckService.RenumberChecks.RequestData>(proxy, proxy.RenumberChecks);
            return s;
        }
        ///<summary> Saves the check changes. </summary>///<param name="request">The request contains check information (amount, check_id, payee/mailto info)</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="SaveCheckChanges" title="Code Example for calling SaveCheckChanges function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\EditCheckForm.vb" region="SaveCheckChanges" title="Code Example for calling SaveCheckChanges function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.RequestData> SaveCheckChanges()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckChanges.RequestData>(proxy, proxy.SaveCheckChanges);
            return s;
        }
        ///<summary> Saves the check remark. </summary>///<param name="request">The request contains check_id and the check remark </param>///<returns>returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddRemarkForm.vb" region="SaveCheckRemark" title="Code Example for calling SaveCheckRemark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddRemarkForm.vb" region="SaveCheckRemark" title="Code Example for calling SaveCheckRemark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.RequestData> SaveCheckRemark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckRemark.RequestData>(proxy, proxy.SaveCheckRemark);
            return s;
        }
        ///<summary> Saves a single check rule to the database. </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRuleInfo.vb" region="SaveCheckRule" title="Code Example for calling SaveCheckRule function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\CheckRuleInfo.vb" region="SaveCheckRule" title="Code Example for calling SaveCheckRule function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckRule.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckRule.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckRule.RequestData> SaveCheckRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCheckRule.Request, Diamond.Common.Services.Messages.CheckService.SaveCheckRule.Response, Diamond.Common.Services.Messages.CheckService.SaveCheckRule.RequestData>(proxy, proxy.SaveCheckRule);
            return s;
        }
        ///<summary> Saves the companystatelob combination for the Check job </summary>///<param name="request">The request contains the checkprocessjob_id, checktype_id and companystatelob_id</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveCSL" title="Code Example for calling SaveCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveCSL" title="Code Example for calling SaveCSL function"></code>///<remarks> Called for non-suspended accounts </remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCSL.Request, Diamond.Common.Services.Messages.CheckService.SaveCSL.Response, Diamond.Common.Services.Messages.CheckService.SaveCSL.RequestData> SaveCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveCSL.Request, Diamond.Common.Services.Messages.CheckService.SaveCSL.Response, Diamond.Common.Services.Messages.CheckService.SaveCSL.RequestData>(proxy, proxy.SaveCSL);
            return s;
        }
        ///<summary> Saves the mail to name address for the check. </summary>///<param name="request">The request contains check_id and Name and address objects</param>///<returns>Returns no parameters </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ChangeMailTo.vb" region="SaveMailToNameAddress" title="Code Example for calling SaveMailToNameAddress function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\ChangeMailTo.vb" region="SaveMailToNameAddress" title="Code Example for calling SaveMailToNameAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.Request, Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.Response, Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.RequestData> SaveMailToNameAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.Request, Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.Response, Diamond.Common.Services.Messages.CheckService.SaveMailToNameAddress.RequestData>(proxy, proxy.SaveMailToNameAddress);
            return s;
        }
        ///<summary> Saves municipal check activity that has been edited through Administration </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="SaveMunicipalCheckActivity" title="Code Example for calling SaveMunicipalCheckActivity function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckActivity.vb" region="SaveMunicipalCheckActivity" title="Code Example for calling SaveMunicipalCheckActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.Request, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.Response, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.RequestData> SaveMunicipalCheckActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.Request, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.Response, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckActivity.RequestData>(proxy, proxy.SaveMunicipalCheckActivity);
            return s;
        }
        ///<summary> Saves a name/address object for a specific Municipal Check Payee </summary>///<param name="request">The request contains a name object, address object, and a taxcode string</param>///<returns>Returns nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckPayee.vb" region="SaveMunicipalCheckPayeeNameAddress" title="Code Example for calling SaveMunicipalCheckPayeeNameAddress function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\MunicipalCheckPayee.vb" region="SaveMunicipalCheckPayeeNameAddress" title="Code Example for calling SaveMunicipalCheckPayeeNameAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.Request, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.Response, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.RequestData> SaveMunicipalCheckPayeeNameAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.Request, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.Response, Diamond.Common.Services.Messages.CheckService.SaveMunicipalCheckPayeeNameAddress.RequestData>(proxy, proxy.SaveMunicipalCheckPayeeNameAddress);
            return s;
        }
        ///<summary> Saves the payee. </summary>///<param name="request">The request contains the Policy.BillingAddressee object</param>///<returns>returns success indicator and the Policy.BillingAddressee object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Forms\AddOtherCheckPayeeForm.vb" region="SavePayee" title="Code Example for calling SavePayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Forms\AddOtherCheckPayeeForm.vb" region="SavePayee" title="Code Example for calling SavePayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SavePayee.Request, Diamond.Common.Services.Messages.CheckService.SavePayee.Response, Diamond.Common.Services.Messages.CheckService.SavePayee.RequestData> SavePayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SavePayee.Request, Diamond.Common.Services.Messages.CheckService.SavePayee.Response, Diamond.Common.Services.Messages.CheckService.SavePayee.RequestData>(proxy, proxy.SavePayee);
            return s;
        }
        ///<summary> Saves the processing steps for the selected check job </summary>///<param name="request">The request contains the Checks.CheckProcessJob object</param>///<returns>returns no parameters </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveProcessingSteps" title="Code Example for calling SaveProcessingSteps function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveProcessingSteps" title="Code Example for calling SaveProcessingSteps function"></code>///<remarks> Make sure 'CheckJobName' service call is called before this to verify that no duplicate jobs by the same name exist  </remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.Request, Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.Response, Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.RequestData> SaveProcessingSteps()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.Request, Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.Response, Diamond.Common.Services.Messages.CheckService.SaveProcessingSteps.RequestData>(proxy, proxy.SaveProcessingSteps);
            return s;
        }
        ///<summary> Saves the Suspense account </summary>///<param name="request">The request contains suspense account id and name/address information</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveSA" title="Code Example for calling SaveSA function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\AddEditJobForm.vb" region="SaveSA" title="Code Example for calling SaveSA function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveSA.Request, Diamond.Common.Services.Messages.CheckService.SaveSA.Response, Diamond.Common.Services.Messages.CheckService.SaveSA.RequestData> SaveSA()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.SaveSA.Request, Diamond.Common.Services.Messages.CheckService.SaveSA.Response, Diamond.Common.Services.Messages.CheckService.SaveSA.RequestData>(proxy, proxy.SaveSA);
            return s;
        }
        ///<summary> Updates the check status in the Checks and Checkitem tables(i.e. pending, posted, etc.) </summary>///<param name="request">The request contains the Checks.Checks and Checks.CheckStatus objects</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="UpdateCheckStatus" title="Code Example for calling UpdateCheckStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\Wizard.vb" region="UpdateCheckStatus" title="Code Example for calling UpdateCheckStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.Request, Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.Response, Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.RequestData> UpdateCheckStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.Request, Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.Response, Diamond.Common.Services.Messages.CheckService.UpdateCheckStatus.RequestData>(proxy, proxy.UpdateCheckStatus);
            return s;
        }
        ///<summary> Voids the specified check. </summary>///<param name="request">The request contains checks.CheckVoidType object and check_id</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Void" title="Code Example for calling Void function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Void" title="Code Example for calling Void function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.Void.Request, Diamond.Common.Services.Messages.CheckService.Void.Response, Diamond.Common.Services.Messages.CheckService.Void.RequestData> Void()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.Void.Request, Diamond.Common.Services.Messages.CheckService.Void.Response, Diamond.Common.Services.Messages.CheckService.Void.RequestData>(proxy, proxy.Void);
            return s;
        }
        ///<summary> Voids the check. </summary>///<param name="request">The request contains check id, checkvoidtype, and checknumber</param>///<returns>Returns authority indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="VoidCheck" title="Code Example for calling VoidCheck function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\CheckProcessing\VoidChecks.vb" region="VoidCheck" title="Code Example for calling VoidCheck function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CheckService.VoidCheck.Request, Diamond.Common.Services.Messages.CheckService.VoidCheck.Response, Diamond.Common.Services.Messages.CheckService.VoidCheck.RequestData> VoidCheck()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CheckServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CheckService.VoidCheck.Request, Diamond.Common.Services.Messages.CheckService.VoidCheck.Response, Diamond.Common.Services.Messages.CheckService.VoidCheck.RequestData>(proxy, proxy.VoidCheck);
            return s;
        }
    }
    ///<summary> Proxy class for Claims Service such as Loading and Saving Claim related info </summary>
    public static class ClaimsService
    {
        ///<summary> Add a CCC event. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.Request, Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.Response, Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.RequestData> AddClaimAppraisalCCCEvent()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.Request, Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.Response, Diamond.Common.Services.Messages.ClaimsService.AddClaimAppraisalCCCEvent.RequestData>(proxy, proxy.AddClaimAppraisalCCCEvent);
            return s;
        }
        ///<summary> Adds coverage issues </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.Request, Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.Response, Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.RequestData> AddCoverageIssues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.Request, Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.Response, Diamond.Common.Services.Messages.ClaimsService.AddCoverageIssues.RequestData>(proxy, proxy.AddCoverageIssues);
            return s;
        }
        ///<summary> To Add Payee Name </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Response" /> to Add Payee Name </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="AddPayeeName" title="Code Example for calling AddPayeeName function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="AddPayeeName" title="Code Example for calling AddPayeeName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Request, Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Response, Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.RequestData> AddPayeeName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Request, Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.Response, Diamond.Common.Services.Messages.ClaimsService.AddPayeeName.RequestData>(proxy, proxy.AddPayeeName);
            return s;
        }
        ///<summary> to Add Reserves For Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddReserves.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddReserves.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddReserves.Response" /> to Add Reserves For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.AddReserves.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddReserves" title="Code Example for calling AddReserves function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddReserves" title="Code Example for calling AddReserves function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddReserves.Request, Diamond.Common.Services.Messages.ClaimsService.AddReserves.Response, Diamond.Common.Services.Messages.ClaimsService.AddReserves.RequestData> AddReserves()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AddReserves.Request, Diamond.Common.Services.Messages.ClaimsService.AddReserves.Response, Diamond.Common.Services.Messages.ClaimsService.AddReserves.RequestData>(proxy, proxy.AddReserves);
            return s;
        }
        ///<summary> Adjusts the split transaction amount. </summary>///<param name="request">The request.</param>///<returns>Adjusted Screen Data of split transaction</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="AdjustSplitTransactionAmount" title="Code Example for calling AdjustSplitTransactionAmount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="AdjustSplitTransactionAmount" title="Code Example for calling AdjustSplitTransactionAmount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.Request, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.Response, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.RequestData> AdjustSplitTransactionAmount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.Request, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.Response, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionAmount.RequestData>(proxy, proxy.AdjustSplitTransactionAmount);
            return s;
        }
        ///<summary> Adjusts the split transaction deductibles. </summary>///<param name="request">The request.</param>///<returns>Adjusted split transaction deductibles amount</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="AdjustSplitTransactionDeductibles" title="Code Example for calling AdjustSplitTransactionDeductibles function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="AdjustSplitTransactionDeductibles" title="Code Example for calling AdjustSplitTransactionDeductibles function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.RequestData> AdjustSplitTransactionDeductibles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.AdjustSplitTransactionDeductibles.RequestData>(proxy, proxy.AdjustSplitTransactionDeductibles);
            return s;
        }
        ///<summary> Approves the transaction. </summary>///<param name="request">The request.</param>///<returns>success indicator for Approved</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ApproveTransaction" title="Code Example for calling ApproveTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ApproveTransaction" title="Code Example for calling ApproveTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.RequestData> ApproveTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ApproveTransaction.RequestData>(proxy, proxy.ApproveTransaction);
            return s;
        }
        ///<summary> Bifurcate claim </summary>///<param name="request">A request object containing ClaimControlId and Claims.PersonnelData object</param>///<returns>A wrapper object containing BifurcatedClaimNumber and BifurcatedClaimControlId</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="BifurcateClaim" title="Code Example for calling BifurcateClaim function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="BifurcateClaim" title="Code Example for calling BifurcateClaim function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.Request, Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.Response, Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.RequestData> BifurcateClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.Request, Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.Response, Diamond.Common.Services.Messages.ClaimsService.BifurcateClaim.RequestData>(proxy, proxy.BifurcateClaim);
            return s;
        }
        ///<summary> Transfers assigned claims to another personnel </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.Request, Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.Response, Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.RequestData> BulkTransferClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.Request, Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.Response, Diamond.Common.Services.Messages.ClaimsService.BulkTransferClaims.RequestData>(proxy, proxy.BulkTransferClaims);
            return s;
        }
        ///<summary> Transfers assigned features to another personnel </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.Request, Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.Response, Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.RequestData> BulkTransferFeatures()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.Request, Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.Response, Diamond.Common.Services.Messages.ClaimsService.BulkTransferFeatures.RequestData>(proxy, proxy.BulkTransferFeatures);
            return s;
        }
        ///<summary> Get Calculated Deductibles </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.RequestData> CalculateDeductibles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.CalculateDeductibles.RequestData>(proxy, proxy.CalculateDeductibles);
            return s;
        }
        ///<summary> To  Change LossDate </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Response" /> to Change Loss Date </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\ChangeDateOfLoss.vb" region="ChangeLossDate" title="Code Example for calling ChangeLossDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\ChangeDateOfLoss.vb" region="ChangeLossDate" title="Code Example for calling ChangeLossDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.RequestData> ChangeLossDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.ChangeLossDate.RequestData>(proxy, proxy.ChangeLossDate);
            return s;
        }
        ///<summary> Changes the status of a scheduled payment cycle </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.Request, Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.Response, Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.RequestData> ChangeScheduledPaymentCycleStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.Request, Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.Response, Diamond.Common.Services.Messages.ClaimsService.ChangeScheduledPaymentCycleStatus.RequestData>(proxy, proxy.ChangeScheduledPaymentCycleStatus);
            return s;
        }
        ///<summary> To Check for Deductible Waived </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Response" /> To Check for Deductible Waived </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="CheckforDeductWaived" title="Code Example for calling CheckforDeductWaived function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="CheckforDeductWaived" title="Code Example for calling CheckforDeductWaived function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Request, Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Response, Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.RequestData> CheckforDeductWaived()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Request, Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.Response, Diamond.Common.Services.Messages.ClaimsService.CheckforDeductWaived.RequestData>(proxy, proxy.CheckforDeductWaived);
            return s;
        }
        ///<summary> Check for Same Deductible Applied </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Response" /> to Check for Same Deductible Applied </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckforSameDeductibleApplied" title="Code Example for calling CheckforSameDeductibleApplied function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckforSameDeductibleApplied" title="Code Example for calling CheckforSameDeductibleApplied function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Request, Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Response, Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.RequestData> CheckforSameDeductibleApplied()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Request, Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.Response, Diamond.Common.Services.Messages.ClaimsService.CheckforSameDeductibleApplied.RequestData>(proxy, proxy.CheckforSameDeductibleApplied);
            return s;
        }
        ///<summary> Check the stop payment status </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Response" /> to check the stop payment status </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckStopPayment" title="Code Example for calling CheckStopPayment function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CheckStopPayment" title="Code Example for calling CheckStopPayment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Request, Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Response, Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.RequestData> CheckStopPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Request, Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.Response, Diamond.Common.Services.Messages.ClaimsService.CheckStopPayment.RequestData>(proxy, proxy.CheckStopPayment);
            return s;
        }
        ///<summary> To determine if Claim Is RecordOnly </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Response" /> to determine if Claim Is RecordOnly </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ClaimIsRecordOnly" title="Code Example for calling ClaimIsRecordOnly function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ClaimIsRecordOnly" title="Code Example for calling ClaimIsRecordOnly function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.RequestData> ClaimIsRecordOnly()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimIsRecordOnly.RequestData>(proxy, proxy.ClaimIsRecordOnly);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.RequestData> ClaimNegotiationGenerateDiary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationGenerateDiary.RequestData>(proxy, proxy.ClaimNegotiationGenerateDiary);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.RequestData> ClaimNegotiationValidation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimNegotiationValidation.RequestData>(proxy, proxy.ClaimNegotiationValidation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.RequestData> ClaimPIPNegotiationValid()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimPIPNegotiationValid.RequestData>(proxy, proxy.ClaimPIPNegotiationValid);
            return s;
        }
        ///<summary> Queries for claim information by agency and claimcontrolstatus </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.RequestData> ClaimsLookupByAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.Request, Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.Response, Diamond.Common.Services.Messages.ClaimsService.ClaimsLookupByAgency.RequestData>(proxy, proxy.ClaimsLookupByAgency);
            return s;
        }
        ///<summary> Clears a coverage issue </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.Request, Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.Response, Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.RequestData> ClearCoverageIssue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.Request, Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.Response, Diamond.Common.Services.Messages.ClaimsService.ClearCoverageIssue.RequestData>(proxy, proxy.ClearCoverageIssue);
            return s;
        }
        ///<summary> Closes the claimant record. </summary>///<param name="request">The <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Request" /> containing the <c>ClaimControlId</c> and <c>ClaimantNum</c> to close.</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Request" />///<c>ClaimControlId</c>///<c>ClaimantNum</c>///<returns> A <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Response" /> to indicate if the claimant was closed successfully. </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="CloseClaimantRecord" title="Code Example for calling CloseClaimantRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="CloseClaimantRecord" title="Code Example for calling CloseClaimantRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.RequestData> CloseClaimantRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseClaimantRecord.RequestData>(proxy, proxy.CloseClaimantRecord);
            return s;
        }
        ///<summary> To  Close Claim Record </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Response" /> to Close Claim Record </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="CloseClaimRecord" title="Code Example for calling CloseClaimRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="CloseClaimRecord" title="Code Example for calling CloseClaimRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.RequestData> CloseClaimRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseClaimRecord.RequestData>(proxy, proxy.CloseClaimRecord);
            return s;
        }
        ///<summary> to close the Feature record </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Response" /> to close the Feature record </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="CloseFeatureRecord" title="Code Example for calling CloseFeatureRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="CloseFeatureRecord" title="Code Example for calling CloseFeatureRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.RequestData> CloseFeatureRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Request, Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.Response, Diamond.Common.Services.Messages.ClaimsService.CloseFeatureRecord.RequestData>(proxy, proxy.CloseFeatureRecord);
            return s;
        }
        ///<summary> Count Notify UW  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Response" /> to Count UW Notifications </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CountNotifyUnderwriting" title="Code Example for calling CountNotifyUnderwriting function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CountNotifyUnderwriting" title="Code Example for calling CountNotifyUnderwriting function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Request, Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Response, Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.RequestData> CountNotifyUnderwriting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Request, Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.Response, Diamond.Common.Services.Messages.ClaimsService.CountNotifyUnderwriting.RequestData>(proxy, proxy.CountNotifyUnderwriting);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.Request, Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.Response, Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.RequestData> CreateClaimsXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.Request, Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.Response, Diamond.Common.Services.Messages.ClaimsService.CreateClaimsXML.RequestData>(proxy, proxy.CreateClaimsXML);
            return s;
        }
        ///<summary> Creates an object from disconnected policy data retrieved from an external service. </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.RequestData> CreateDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicy.RequestData>(proxy, proxy.CreateDCPolicy);
            return s;
        }
        ///<summary> Creates an policy XML for use with an external policy service </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.Request, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.Response, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.RequestData> CreateDCPolicyXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.Request, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.Response, Diamond.Common.Services.Messages.ClaimsService.CreateDCPolicyXML.RequestData>(proxy, proxy.CreateDCPolicyXML);
            return s;
        }
        ///<summary> Returns boolean </summary>///<param name="request">The wrapper request containing the submission date</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareCreateClaimFile.vb" region="CreateMedicareTINReferenceFile" title="Code Example for calling CreateMedicareClaimFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareCreateClaimFile.vb" region="CreateMedicareTINReferenceFile" title="Code Example for calling CreateMedicareClaimFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.RequestData> CreateMedicareClaimFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareClaimFile.RequestData>(proxy, proxy.CreateMedicareClaimFile);
            return s;
        }
        ///<summary> Returns boolean </summary>///<param name="request">The wrapper request containing no parameters</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareQueryCreate.vb" region="CreateMedicareQueryFile" title="Code Example for calling CreateMedicareQueryFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareQueryCreate.vb" region="CreateMedicareQueryFile" title="Code Example for calling CreateMedicareQueryFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.RequestData> CreateMedicareQueryFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareQueryFile.RequestData>(proxy, proxy.CreateMedicareQueryFile);
            return s;
        }
        ///<summary> Returns boolean </summary>///<param name="request">The wrapper request containing the submission date</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareCreateClaimFile.vb" region="CreateMedicareTINReferenceFile" title="Code Example for calling CreateMedicareTINReferenceFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareCreateClaimFile.vb" region="CreateMedicareTINReferenceFile" title="Code Example for calling CreateMedicareTINReferenceFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.RequestData> CreateMedicareTINReferenceFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateMedicareTINReferenceFile.RequestData>(proxy, proxy.CreateMedicareTINReferenceFile);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.RequestData> CreateTestLegacyClaimImportFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.Request, Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.Response, Diamond.Common.Services.Messages.ClaimsService.CreateTestLegacyClaimImportFile.RequestData>(proxy, proxy.CreateTestLegacyClaimImportFile);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.Request, Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.Response, Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.RequestData> DefaultExplanationOfBenefits()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.Request, Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.Response, Diamond.Common.Services.Messages.ClaimsService.DefaultExplanationOfBenefits.RequestData>(proxy, proxy.DefaultExplanationOfBenefits);
            return s;
        }
        ///<summary> Delete a Claim Appraiser  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Request" />///<returns> A <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Response" /> object containing the success/failure status of the deletion. </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="DeleteAppraiser" title="Code Example for calling DeleteAppraiser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="DeleteAppraiser" title="Code Example for calling DeleteAppraiser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.RequestData> DeleteAppraiser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteAppraiser.RequestData>(proxy, proxy.DeleteAppraiser);
            return s;
        }
        ///<summary> To Delete Catastrophe </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Response" /> to Delete Catastrophe </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="DeleteCatastrophe" title="Code Example for calling DeleteCatastrophe function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="DeleteCatastrophe" title="Code Example for calling DeleteCatastrophe function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.RequestData> DeleteCatastrophe()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteCatastrophe.RequestData>(proxy, proxy.DeleteCatastrophe);
            return s;
        }
        ///<summary> To Delete Claimant </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Response" /> to Delete Claimant </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="DeleteClaimant" title="Code Example for calling DeleteClaimant function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="DeleteClaimant" title="Code Example for calling DeleteClaimant function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.RequestData> DeleteClaimant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimant.RequestData>(proxy, proxy.DeleteClaimant);
            return s;
        }
        ///<summary> To  Delete ClaimControl Property </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Response" /> to Delete ClaimControl Property </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="DeleteClaimControlProperty" title="Code Example for calling DeleteClaimControlProperty function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="DeleteClaimControlProperty" title="Code Example for calling DeleteClaimControlProperty function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.RequestData> DeleteClaimControlProperty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlProperty.RequestData>(proxy, proxy.DeleteClaimControlProperty);
            return s;
        }
        ///<summary> To Delete ClaimControl Vehicle </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Response" /> to Delete ClaimControl Vehicle </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="DeleteClaimControlVehicle" title="Code Example for calling DeleteClaimControlVehicle function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="DeleteClaimControlVehicle" title="Code Example for calling DeleteClaimControlVehicle function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.RequestData> DeleteClaimControlVehicle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimControlVehicle.RequestData>(proxy, proxy.DeleteClaimControlVehicle);
            return s;
        }
        ///<summary> Deletes the claim number fields. </summary>///<param name="request">The wrapper request containing ClaimNumberFieldId.</param>///<returns>The wrapper response containing Result</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumberSetup.vb" region="DeleteClaimNumberFields" title="Code Example for calling DeleteClaimNumberFields function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumberSetup.vb" region="DeleteClaimNumberFields" title="Code Example for calling DeleteClaimNumberFields function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.RequestData> DeleteClaimNumberFields()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteClaimNumberFields.RequestData>(proxy, proxy.DeleteClaimNumberFields);
            return s;
        }
        ///<summary> To Delete Dashboard Template </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Response" /> to Delete Dashboard template </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="DeleteDashboardTemplate" title="Code Example for calling DeleteDashboardTemplate function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="DeleteDashboardTemplate" title="Code Example for calling DeleteDashboardTemplate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.RequestData> DeleteDashboardTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteDashboardTemplate.RequestData>(proxy, proxy.DeleteDashboardTemplate);
            return s;
        }
        ///<summary> Deletes the default. </summary>///<param name="request">The wrapper request containing ClaimFtrDefaultID.</param>///<returns>The wrapper response.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultList.vb" region="DeleteFeatureDefault" title="Code Example for calling DeleteDefault function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultList.vb" region="DeleteFeatureDefault" title="Code Example for calling DeleteDefault function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.RequestData> DeleteFeatureDefault()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteFeatureDefault.RequestData>(proxy, proxy.DeleteFeatureDefault);
            return s;
        }
        ///<summary> To Delete Initial Reserve </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Response" /> To Delete Initial Reserve </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="DeleteInitialReserve" title="Code Example for calling DeleteInitialReserve function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="DeleteInitialReserve" title="Code Example for calling DeleteInitialReserve function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.RequestData> DeleteInitialReserve()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteInitialReserve.RequestData>(proxy, proxy.DeleteInitialReserve);
            return s;
        }
        ///<summary> To  Delete Levy </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Response" /> to Delete Levy </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="DeleteLevy" title="Code Example for calling DeleteLevy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="DeleteLevy" title="Code Example for calling DeleteLevy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.RequestData> DeleteLevy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteLevy.RequestData>(proxy, proxy.DeleteLevy);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.RequestData> DeleteMedicalProviderMedicalFacilityLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicalProviderMedicalFacilityLink.RequestData>(proxy, proxy.DeleteMedicalProviderMedicalFacilityLink);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.RequestData> DeleteMedicareResponsibleReportingEntityCodeConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteMedicareResponsibleReportingEntityCodeConfig.RequestData>(proxy, proxy.DeleteMedicareResponsibleReportingEntityCodeConfig);
            return s;
        }
        ///<summary> To Delete Notify Underwriting </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Response" /> to Delete Notify Underwriting </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwritingList.vb" region="DeleteNotifyUnderwriting" title="Code Example for calling DeleteNotifyUnderwriting function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwritingList.vb" region="DeleteNotifyUnderwriting" title="Code Example for calling DeleteNotifyUnderwriting function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.RequestData> DeleteNotifyUnderwriting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteNotifyUnderwriting.RequestData>(proxy, proxy.DeleteNotifyUnderwriting);
            return s;
        }
        ///<summary> To Delete Payee </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Response" /> to Delete Payee </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="DeletePayee" title="Code Example for calling DeletePayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="DeletePayee" title="Code Example for calling DeletePayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePayee.RequestData> DeletePayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePayee.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePayee.RequestData>(proxy, proxy.DeletePayee);
            return s;
        }
        ///<summary> To delete a pending claim </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="DeletePendingClaim" title="Code Example for calling DeletePendingClaim function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="DeletePendingClaim" title="Code Example for calling DeletePendingClaim function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.RequestData> DeletePendingClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaim.RequestData>(proxy, proxy.DeletePendingClaim);
            return s;
        }
        ///<summary> To do post submission claim work </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Response" /> to Update Claim Submission </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNoticeMdiForm.vb" region="DeletePendingClaimControl" title="Code Example for calling DeletePendingClaimControl function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNoticeMdiForm.vb" region="DeletePendingClaimControl" title="Code Example for calling DeletePendingClaimControl function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.RequestData> DeletePendingClaimControl()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePendingClaimControl.RequestData>(proxy, proxy.DeletePendingClaimControl);
            return s;
        }
        ///<summary> Deletes a personnel assignment </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.RequestData> DeletePersonnelAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePersonnelAssignment.RequestData>(proxy, proxy.DeletePersonnelAssignment);
            return s;
        }
        ///<summary> Deletes a PTTOOLinkItem </summary>///<param name="request">The request contains ClaimPayeePTTOOItemsId, PTTOOLinkItems.</param>///<returns>nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="DeletePTTOOItem" title="Code Example for calling DeletePTTOOItem function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="DeletePTTOOItem" title="Code Example for calling DeletePTTOOItem function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.RequestData> DeletePTTOOItem()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.Request, Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.Response, Diamond.Common.Services.Messages.ClaimsService.DeletePTTOOItem.RequestData>(proxy, proxy.DeletePTTOOItem);
            return s;
        }
        ///<summary> To Delete  Repair Shop </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Response" /> To Delete  Repair Shop </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShopList.vb" region="DeleteRepairShop" title="Code Example for calling DeleteRepairShop function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShopList.vb" region="DeleteRepairShop" title="Code Example for calling DeleteRepairShop function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.RequestData> DeleteRepairShop()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteRepairShop.RequestData>(proxy, proxy.DeleteRepairShop);
            return s;
        }
        ///<summary> Deletes a particular scheduled payment cycle </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.RequestData> DeleteScheduledPaymentCycle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteScheduledPaymentCycle.RequestData>(proxy, proxy.DeleteScheduledPaymentCycle);
            return s;
        }
        ///<summary> Delete Witness </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Response" /> to delete Claim Witness </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="DeleteWitness" title="Code Example for calling DeleteWitness function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="DeleteWitness" title="Code Example for calling DeleteWitness function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.RequestData> DeleteWitness()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Request, Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.Response, Diamond.Common.Services.Messages.ClaimsService.DeleteWitness.RequestData>(proxy, proxy.DeleteWitness);
            return s;
        }
        ///<summary> Denies or removes from denial, a claim </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DenyClaim.Request, Diamond.Common.Services.Messages.ClaimsService.DenyClaim.Response, Diamond.Common.Services.Messages.ClaimsService.DenyClaim.RequestData> DenyClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DenyClaim.Request, Diamond.Common.Services.Messages.ClaimsService.DenyClaim.Response, Diamond.Common.Services.Messages.ClaimsService.DenyClaim.RequestData>(proxy, proxy.DenyClaim);
            return s;
        }
        ///<summary> Denies or removes from denial, a feature/coverage </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DenyFeature.Request, Diamond.Common.Services.Messages.ClaimsService.DenyFeature.Response, Diamond.Common.Services.Messages.ClaimsService.DenyFeature.RequestData> DenyFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.DenyFeature.Request, Diamond.Common.Services.Messages.ClaimsService.DenyFeature.Response, Diamond.Common.Services.Messages.ClaimsService.DenyFeature.RequestData>(proxy, proxy.DenyFeature);
            return s;
        }
        ///<summary> Determines existence of claim by external account number. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.Request, Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.Response, Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.RequestData> FindClaimByExternalAccountNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.Request, Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.Response, Diamond.Common.Services.Messages.ClaimsService.FindClaimByExternalAccountNumber.RequestData>(proxy, proxy.FindClaimByExternalAccountNumber);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.Request, Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.Response, Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.RequestData> GetAdditionalPersonnelInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.Request, Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.Response, Diamond.Common.Services.Messages.ClaimsService.GetAdditionalPersonnelInfo.RequestData>(proxy, proxy.GetAdditionalPersonnelInfo);
            return s;
        }
        ///<summary> To Load Vehicle Claim Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Response" /> to Load Vehicle Claim Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="GetClaimInfoForVehicle" title="Code Example for calling GetClaimInfoForVehicle function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="GetClaimInfoForVehicle" title="Code Example for calling GetClaimInfoForVehicle function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.RequestData> GetClaimInfoForVehicle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimInfoForVehicle.RequestData>(proxy, proxy.GetClaimInfoForVehicle);
            return s;
        }
        ///<summary> Gets Collection of Claim data such as ClaimNumberField and ClaimNumberFieldType </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing ClaimNumberField, ClaimNumberFieldType. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumberSetup.vb" region="GetClaimNumberData" title="Code Example for calling GetData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumberSetup.vb" region="GetClaimNumberData" title="Code Example for calling GetData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.RequestData> GetClaimNumberData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimNumberData.RequestData>(proxy, proxy.GetClaimNumberData);
            return s;
        }
        ///<summary> Gets all the claim personnel associated with an office. </summary>///<param name="request">The wrapper request containing ClaimPersonnelId and ClaimOfficeId.</param>///<returns> The wrapper response containing Personnel List </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="GetClaimPersonnelForOffice" title="Code Example for calling GetClaimPersonnelForOffice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="GetClaimPersonnelForOffice" title="Code Example for calling GetClaimPersonnelForOffice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.RequestData> GetClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnel.RequestData>(proxy, proxy.GetClaimPersonnel);
            return s;
        }
        ///<summary> Gets the claim personnel specified by the ClaimPersonnelTypeId. </summary>///<param name="request">The wrapper request containing ClaimPersonnelId, ClaimOfficeId.</param>///<returns> The wrapper response containing PersonnelList </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClaimPersonnelByType" title="Code Example for calling GetClaimPersonnelByType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClaimPersonnelByType" title="Code Example for calling GetClaimPersonnelByType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.RequestData> GetClaimPersonnelByType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelByType.RequestData>(proxy, proxy.GetClaimPersonnelByType);
            return s;
        }
        ///<summary> Gets all the claim personnel associated with an office. </summary>///<param name="request">The wrapper request containing ClaimPersonnelId and ClaimOfficeId.</param>///<returns> The wrapper response containing Personnel List </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="GetClaimPersonnelForOffice" title="Code Example for calling GetClaimPersonnelForOffice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="GetClaimPersonnelForOffice" title="Code Example for calling GetClaimPersonnelForOffice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.RequestData> GetClaimPersonnelForOffice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.Request, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.Response, Diamond.Common.Services.Messages.ClaimsService.GetClaimPersonnelForOffice.RequestData>(proxy, proxy.GetClaimPersonnelForOffice);
            return s;
        }
        ///<summary> Get Coverage Type Data </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.Request, Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.Response, Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.RequestData> GetCoverageTypeData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.Request, Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.Response, Diamond.Common.Services.Messages.ClaimsService.GetCoverageTypeData.RequestData>(proxy, proxy.GetCoverageTypeData);
            return s;
        }
        ///<summary> Get Deductible Amount For Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Response" /> to Get Deductible Amount For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="GetDeductAmtForClaimFeature" title="Code Example for calling GetDeductAmtForClaimFeature function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="GetDeductAmtForClaimFeature" title="Code Example for calling GetDeductAmtForClaimFeature function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Request, Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Response, Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.RequestData> GetDeductAmtForClaimFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Request, Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.Response, Diamond.Common.Services.Messages.ClaimsService.GetDeductAmtForClaimFeature.RequestData>(proxy, proxy.GetDeductAmtForClaimFeature);
            return s;
        }
        ///<summary> Gets the feature/coverage status </summary>///<param name="request">The wrapper request containing ClaimControlId, ClaimantNum, FeatureNum.</param>///<returns> The wrapper response containing feature/coverage status </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetFeatureStatus" title="Code Example for calling GetFeatureStatus function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetFeatureStatus" title="Code Example for calling GetFeatureStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.Request, Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.Response, Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.RequestData> GetFeatureStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.Request, Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.Response, Diamond.Common.Services.Messages.ClaimsService.GetFeatureStatus.RequestData>(proxy, proxy.GetFeatureStatus);
            return s;
        }
        ///<summary> To get the policy ID, policy image num, and the claimcontrol Id for the claim number </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Response" /> to get the policy Id, policy image num, and the ClaimControl Id for the claim number </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetIdsForClaimNumber" title="Code Example for calling GetIdsForClaimNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetIdsForClaimNumber" title="Code Example for calling GetIdsForClaimNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.RequestData> GetIdsForClaimNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.GetIdsForClaimNumber.RequestData>(proxy, proxy.GetIdsForClaimNumber);
            return s;
        }
        ///<summary> Loads the latest payee id. </summary>///<param name="request">The request with ClaimPayeeNum, ClaimPayeeVersion.</param>///<returns>Claim Payee Id</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="GetLatestPayeeVersion" title="Code Example for calling GetLatestPayeeVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="GetLatestPayeeVersion" title="Code Example for calling GetLatestPayeeVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.Request, Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.Response, Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.RequestData> GetLatestPayeeVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.Request, Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.Response, Diamond.Common.Services.Messages.ClaimsService.GetLatestPayeeVersion.RequestData>(proxy, proxy.GetLatestPayeeVersion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.Request, Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.Response, Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.RequestData> GetMedicalFacilityProviderCount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.Request, Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.Response, Diamond.Common.Services.Messages.ClaimsService.GetMedicalFacilityProviderCount.RequestData>(proxy, proxy.GetMedicalFacilityProviderCount);
            return s;
        }
        ///<summary> to Get Next Claim Number </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Response" /> to Get Next Claim Number </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\Main.vb" region="GetNextClaimNumber" title="Code Example for calling GetNextClaimNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\Main.vb" region="GetNextClaimNumber" title="Code Example for calling GetNextClaimNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.RequestData> GetNextClaimNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.GetNextClaimNumber.RequestData>(proxy, proxy.GetNextClaimNumber);
            return s;
        }
        ///<summary> Gets the payee for reason. </summary>///<param name="request">The wrapper request containing ClaimPayeeReasonId.</param>///<returns> The wrapper response containing ClaimPayee </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="LoadClaimPayeeChangeReason" title="Code Example for calling LoadClaimPayeeChangeReason function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="LoadClaimPayeeChangeReason" title="Code Example for calling LoadClaimPayeeChangeReason function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.Request, Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.Response, Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.RequestData> GetPayeeForReason()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.Request, Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.Response, Diamond.Common.Services.Messages.ClaimsService.GetPayeeForReason.RequestData>(proxy, proxy.GetPayeeForReason);
            return s;
        }
        ///<summary> To Get Policy Id Num For ClaimControlId </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Response" /> to Get Policy IdNum For ClaimControl Id </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetPolicyIdNumForClaimControlId" title="Code Example for calling GetPolicyIdNumForClaimControlId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetPolicyIdNumForClaimControlId" title="Code Example for calling GetPolicyIdNumForClaimControlId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Request, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Response, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.RequestData> GetPolicyIdNumForClaimControlId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Request, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.Response, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForClaimControlId.RequestData>(proxy, proxy.GetPolicyIdNumForClaimControlId);
            return s;
        }
        ///<summary> To  Get Policy Id Num For Policy No LossDate </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Response" /> to Get PolicyId Num For Policy No LossDate </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="GetPolicyIdNumForPolicyNoLossDate" title="Code Example for calling GetPolicyIdNumForPolicyNoLossDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="GetPolicyIdNumForPolicyNoLossDate" title="Code Example for calling GetPolicyIdNumForPolicyNoLossDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.RequestData> GetPolicyIdNumForPolicyNoLossDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.GetPolicyIdNumForPolicyNoLossDate.RequestData>(proxy, proxy.GetPolicyIdNumForPolicyNoLossDate);
            return s;
        }
        ///<summary> Gets the transaction for payee phrase. </summary>///<param name="request">The wrapper request containing ClaimPayeePhraseId.</param>///<returns>The wrapper response containing Output</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="GetTransactionForPayeePhrase" title="Code Example for calling GetTransactionForPayeePhrase function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="GetTransactionForPayeePhrase" title="Code Example for calling GetTransactionForPayeePhrase function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.RequestData> GetTransactionForPayeePhrase()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.GetTransactionForPayeePhrase.RequestData>(proxy, proxy.GetTransactionForPayeePhrase);
            return s;
        }
        ///<summary> To Get Version Id For Claim Control Id </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response" /> to Get VersionId For ClaimControl Id </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetVersionIdForClaimControlId" title="Code Example for calling GetVersionIdForClaimControlId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetVersionIdForClaimControlId" title="Code Example for calling GetVersionIdForClaimControlId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.RequestData> GetVersionIdForClaimControlId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.RequestData>(proxy, proxy.GetVersionIdForClaimControlId);
            return s;
        }
        ///<summary> To Get Version Id For Policy Id/ver </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response" /> to Get VersionId For Policy Id/Ver </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForClaimControlId.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetVersionIdForClaimControlId" title="Code Example for calling GetVersionIdForClaimControlId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="GetVersionIdForClaimControlId" title="Code Example for calling GetVersionIdForClaimControlId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.RequestData> GetVersionIdForPolicyIdNum()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyIdVer.RequestData>(proxy, proxy.GetVersionIdForPolicyIdNum);
            return s;
        }
        ///<summary> To  Get Version Id For Policy No LossDate </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Response" /> to Get VersionId For Policy No LossDate </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\NewClaim\NewClaim.ascx.vb" region="GetVersionIdForPolicyNoLossDate" title="Code Example for calling GetVersionIdForPolicyNoLossDate function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\NewClaim\NewClaim.ascx.vb" region="GetVersionIdForPolicyNoLossDate" title="Code Example for calling GetVersionIdForPolicyNoLossDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.RequestData> GetVersionIdForPolicyNoLossDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Request, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.Response, Diamond.Common.Services.Messages.ClaimsService.GetVersionIdForPolicyNoLossDate.RequestData>(proxy, proxy.GetVersionIdForPolicyNoLossDate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.Request, Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.Response, Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.RequestData> ImportLegacyClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.Request, Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.Response, Diamond.Common.Services.Messages.ClaimsService.ImportLegacyClaims.RequestData>(proxy, proxy.ImportLegacyClaims);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.RequestData> ImportTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.ImportTransactions.RequestData>(proxy, proxy.ImportTransactions);
            return s;
        }
        ///<summary> Initializes with Adminstration.VersionSetup data </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing VersionSetup </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="Initialize" title="Code Example for calling Initialize function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="Initialize" title="Code Example for calling Initialize function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.Request, Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.Response, Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.RequestData> InitializeInitialReserveSetup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.Request, Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.Response, Diamond.Common.Services.Messages.ClaimsService.InitializeInitialReserveSetup.RequestData>(proxy, proxy.InitializeInitialReserveSetup);
            return s;
        }
        ///<summary> Loads claim coverages for external policies </summary>///<param name="request">The request has ClaimControlId.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.RequestData> InterpretExternalPolicyRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretExternalPolicyRecords.RequestData>(proxy, proxy.InterpretExternalPolicyRecords);
            return s;
        }
        ///<summary> Loads claim coverages for imported policies </summary>///<param name="request">The request has ClaimControlId.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.RequestData> InterpretImportedPolicyRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretImportedPolicyRecords.RequestData>(proxy, proxy.InterpretImportedPolicyRecords);
            return s;
        }
        ///<summary> Loads claim coverages </summary>///<param name="request">The request has ClaimControlId.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="InterpretPolicyRecords" title="Code Example for calling InterpretPolicyRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.RequestData> InterpretPolicyRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.Request, Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.Response, Diamond.Common.Services.Messages.ClaimsService.InterpretPolicyRecords.RequestData>(proxy, proxy.InterpretPolicyRecords);
            return s;
        }
        ///<summary> Checks to see if the transaction is an offset payment </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Response" /> to check if the transaction is an offset payment </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsOffsetPayment" title="Code Example for calling IsOffsetPayment function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsOffsetPayment" title="Code Example for calling IsOffsetPayment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Request, Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Response, Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.RequestData> IsOffsetPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Request, Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.Response, Diamond.Common.Services.Messages.ClaimsService.IsOffsetPayment.RequestData>(proxy, proxy.IsOffsetPayment);
            return s;
        }
        ///<summary> Checks to see if the transaction has been reissued </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Response" /> to check to see if the transaction has been reissued </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsTransactionReissued" title="Code Example for calling IsTransactionReissued function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsTransactionReissued" title="Code Example for calling IsTransactionReissued function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Request, Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Response, Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.RequestData> IsTransactionReissued()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Request, Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.Response, Diamond.Common.Services.Messages.ClaimsService.IsTransactionReissued.RequestData>(proxy, proxy.IsTransactionReissued);
            return s;
        }
        ///<summary> To Load Activity </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Response" /> to Load Activity </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Activity\ActivityList.vb" region="LoadActivity" title="Code Example for calling LoadActivity function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Activity\ActivityList.vb" region="LoadActivity" title="Code Example for calling LoadActivity function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Request, Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Response, Diamond.Common.Services.Messages.ClaimsService.LoadActivity.RequestData> LoadActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Request, Diamond.Common.Services.Messages.ClaimsService.LoadActivity.Response, Diamond.Common.Services.Messages.ClaimsService.LoadActivity.RequestData>(proxy, proxy.LoadActivity);
            return s;
        }
        ///<summary> Load Adjust Coverages Exposures </summary>///<param name="request">The request has ClaimControlId, ClaimExposureId, Description.</param>///<returns>collection of coverage exposures</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesExposures" title="Code Example for calling LoadAdjustCoveragesExposures function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesExposures" title="Code Example for calling LoadAdjustCoveragesExposures function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.RequestData> LoadAdjustCoveragesExposures()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesExposures.RequestData>(proxy, proxy.LoadAdjustCoveragesExposures);
            return s;
        }
        ///<summary> Load Adjust Coverages Sub-Exposures </summary>///<param name="request">The request has ClaimControlId, ClaimExposureId, ClaimSubExposureNum, Description.</param>///<returns>collection of coverage sub-exposures</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesSubExposures" title="Code Example for calling LoadAdjustCoveragesSubExposures function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesSubExposures" title="Code Example for calling LoadAdjustCoveragesSubExposures function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.RequestData> LoadAdjustCoveragesSubExposures()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesSubExposures.RequestData>(proxy, proxy.LoadAdjustCoveragesSubExposures);
            return s;
        }
        ///<summary> Load Adjust Coverages tree data </summary>///<param name="request">The request has ClaimControlId, ClaimExposureId, ClaimSubExposureNum.</param>///<returns>collection of claim limit data item, LimitLinkDataItem, Coverage level</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesTreeData" title="Code Example for calling LoadAdjustCoveragesTreeData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="LoadAdjustCoveragesTreeData" title="Code Example for calling LoadAdjustCoveragesTreeData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.RequestData> LoadAdjustCoveragesTreeData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjustCoveragesTreeData.RequestData>(proxy, proxy.LoadAdjustCoveragesTreeData);
            return s;
        }
        ///<summary> To Load Adjuster </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Response" /> To Load Adjuster </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadAdjuster1" title="Code Example for calling LoadAdjuster function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadAdjuster1" title="Code Example for calling LoadAdjuster function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.RequestData> LoadAdjuster()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjuster.RequestData>(proxy, proxy.LoadAdjuster);
            return s;
        }
        ///<summary> To Load Adjuster list </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Response" /> To Load Adjuster list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadAdjusterList" title="Code Example for calling LoadAdjusterList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadAdjusterList" title="Code Example for calling LoadAdjusterList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.RequestData> LoadAdjusterList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterList.RequestData>(proxy, proxy.LoadAdjusterList);
            return s;
        }
        ///<summary> To Load Adjuster Mainatenence </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Response" /> To Load Adjuster Mainatenence </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierAdjusterSetup.vb" region="LoadAdjusterMaintenance" title="Code Example for calling LoadAdjusterMaintenance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierAdjusterSetup.vb" region="LoadAdjusterMaintenance" title="Code Example for calling LoadAdjusterMaintenance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.RequestData> LoadAdjusterMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAdjusterMaintenance.RequestData>(proxy, proxy.LoadAdjusterMaintenance);
            return s;
        }
        ///<summary> To Load Agency Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Response" /> to Load Agency Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadAgencyInfo" title="Code Example for calling LoadAgencyInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadAgencyInfo" title="Code Example for calling LoadAgencyInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.RequestData> LoadAgencyInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyInfo.RequestData>(proxy, proxy.LoadAgencyInfo);
            return s;
        }
        ///<summary> To Load Agency Producer Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Response" /> to Load Agency Producer Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\ReportedBy\ReportedBy.vb" region="LoadAgencyProducerInfo" title="Code Example for calling LoadAgencyProducerInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\ReportedBy\ReportedBy.vb" region="LoadAgencyProducerInfo" title="Code Example for calling LoadAgencyProducerInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.RequestData> LoadAgencyProducerInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAgencyProducerInfo.RequestData>(proxy, proxy.LoadAgencyProducerInfo);
            return s;
        }
        ///<summary> Loads all defaults. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing LoadAllFeatureDefaults </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultList.vb" region="LoadAllFeatureDefaults" title="Code Example for calling LoadAllDefaults function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultList.vb" region="LoadAllFeatureDefaults" title="Code Example for calling LoadAllDefaults function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.RequestData> LoadAllFeatureDefaults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAllFeatureDefaults.RequestData>(proxy, proxy.LoadAllFeatureDefaults);
            return s;
        }
        ///<summary> To Load Appraiser </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Response" /> to Load Appraiser </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="LoadAppraiser" title="Code Example for calling LoadAppraiser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="LoadAppraiser" title="Code Example for calling LoadAppraiser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.RequestData> LoadAppraiser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiser.RequestData>(proxy, proxy.LoadAppraiser);
            return s;
        }
        ///<summary> To Load Appraiser Details </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Response" /> to Load Appraiser Details </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\Appraiser.vb" region="LoadAppraiserDetails" title="Code Example for calling LoadAppraiserDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\Appraiser.vb" region="LoadAppraiserDetails" title="Code Example for calling LoadAppraiserDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.RequestData> LoadAppraiserDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserDetails.RequestData>(proxy, proxy.LoadAppraiserDetails);
            return s;
        }
        ///<summary> To Load Appraiser List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Response" /> to Load Appraiser List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="LoadAppraiserList" title="Code Example for calling LoadAppraiserList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="LoadAppraiserList" title="Code Example for calling LoadAppraiserList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.RequestData> LoadAppraiserList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserList.RequestData>(proxy, proxy.LoadAppraiserList);
            return s;
        }
        ///<summary> To Load Appraiser Names </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Response" /> to Load Appraiser Names </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\Appraiser.vb" region="LoadAppraiserNames" title="Code Example for calling LoadAppraiserNames function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\Appraiser.vb" region="LoadAppraiserNames" title="Code Example for calling LoadAppraiserNames function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.RequestData> LoadAppraiserNames()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAppraiserNames.RequestData>(proxy, proxy.LoadAppraiserNames);
            return s;
        }
        ///<summary> To  Load Attorneys </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Response" /> to Load Attorneys </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAttorneys" title="Code Example for calling LoadAttorneys function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAttorneys" title="Code Example for calling LoadAttorneys function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.RequestData> LoadAttorneys()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Request, Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.Response, Diamond.Common.Services.Messages.ClaimsService.LoadAttorneys.RequestData>(proxy, proxy.LoadAttorneys);
            return s;
        }
        ///<summary> Load Bifurcated Claim Link data </summary>///<param name="request">A request object containing ClaimControlId</param>///<returns>A wrapper object containing BifurcatedClaimControlId and BifurcatedClaimNumber</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBifurcatedLink" title="Code Example for calling LoadBifurcatedLink function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadBifurcatedLink" title="Code Example for calling LoadBifurcatedLink function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.Request, Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.Response, Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.RequestData> LoadBifurcatedLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.Request, Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.Response, Diamond.Common.Services.Messages.ClaimsService.LoadBifurcatedLink.RequestData>(proxy, proxy.LoadBifurcatedLink);
            return s;
        }
        ///<summary> Loads the Build Pay to the Order of. </summary>///<param name="request">The request containing PTTOOLinks.</param>///<returns>collection of PayeePTTOOItem</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="LoadBuildPTTOO" title="Code Example for calling LoadBuildPTTOO function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="LoadBuildPTTOO" title="Code Example for calling LoadBuildPTTOO function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.RequestData> LoadBuildPTTOO()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.LoadBuildPTTOO.RequestData>(proxy, proxy.LoadBuildPTTOO);
            return s;
        }
        ///<summary> TO Load claim fire </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Response" /> TO Load claim fire </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProvider.vb" region="LoadCareProvider" title="Code Example for calling LoadCareProvider function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProvider.vb" region="LoadCareProvider" title="Code Example for calling LoadCareProvider function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.RequestData> LoadCareProvider()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProvider.RequestData>(proxy, proxy.LoadCareProvider);
            return s;
        }
        ///<summary> TO Load List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Response" /> TO Load List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProvider.vb" region="LoadCareProviderList" title="Code Example for calling LoadCareProviderList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProvider.vb" region="LoadCareProviderList" title="Code Example for calling LoadCareProviderList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.RequestData> LoadCareProviderList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderList.RequestData>(proxy, proxy.LoadCareProviderList);
            return s;
        }
        ///<summary> To  Load Maintenance ClaimCareProvider </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Response" /> to Load Maintenance ClaimCareProvider </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProviderSetup.vb" region="LoadCareProviderMaintenance" title="Code Example for calling LoadCareProviderMaintenance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\CareProviderSetup.vb" region="LoadCareProviderMaintenance" title="Code Example for calling LoadCareProviderMaintenance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.RequestData> LoadCareProviderMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCareProviderMaintenance.RequestData>(proxy, proxy.LoadCareProviderMaintenance);
            return s;
        }
        ///<summary> To Load Carrier </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Response" /> To Load Carrier </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadCarrier" title="Code Example for calling LoadCarrier function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadCarrier" title="Code Example for calling LoadCarrier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.RequestData> LoadCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrier.RequestData>(proxy, proxy.LoadCarrier);
            return s;
        }
        ///<summary> To Load CarrierList </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Response" /> To Load CarrierList </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadCarrierList" title="Code Example for calling LoadCarrierList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantCarrier.vb" region="LoadCarrierList" title="Code Example for calling LoadCarrierList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.RequestData> LoadCarrierList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierList.RequestData>(proxy, proxy.LoadCarrierList);
            return s;
        }
        ///<summary> To Load Carrier Maintenance </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Response" /> To Load Carrier Maintenance </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierSetup.vb" region="LoadCarrierMaintenance" title="Code Example for calling LoadCarrierMaintenance function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierSetup.vb" region="LoadCarrierMaintenance" title="Code Example for calling LoadCarrierMaintenance function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.RequestData> LoadCarrierMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCarrierMaintenance.RequestData>(proxy, proxy.LoadCarrierMaintenance);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNoticeProperties.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNoticeProperties.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNoticeProperties.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNoticeProperties.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.RequestData> LoadCatastrophe()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophe.RequestData>(proxy, proxy.LoadCatastrophe);
            return s;
        }
        ///<summary> To Load Catastrophe Combo </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Response" /> to Load Catastrophe Combo </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\Main.vb" region="LoadCatastropheCombo" title="Code Example for calling LoadCatastropheCombo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\Main.vb" region="LoadCatastropheCombo" title="Code Example for calling LoadCatastropheCombo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.RequestData> LoadCatastropheCombo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheCombo.RequestData>(proxy, proxy.LoadCatastropheCombo);
            return s;
        }
        ///<summary> To  Load Catastrophe to Edit </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Response" /> to Load Catastrophe to Edit </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\Catastrophe.vb" region="LoadCatastropheEdit" title="Code Example for calling LoadCatastropheEdit function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\Catastrophe.vb" region="LoadCatastropheEdit" title="Code Example for calling LoadCatastropheEdit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.RequestData> LoadCatastropheEdit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheEdit.RequestData>(proxy, proxy.LoadCatastropheEdit);
            return s;
        }
        ///<summary> To Load Catastrophe List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Response" /> to Load Catastrophe List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="LoadCatastropheList" title="Code Example for calling LoadCatastropheList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="LoadCatastropheList" title="Code Example for calling LoadCatastropheList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.RequestData> LoadCatastropheList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastropheList.RequestData>(proxy, proxy.LoadCatastropheList);
            return s;
        }
        ///<summary> To Load Catastrophes For Year </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Response" /> to Load Catastrophes For a given Year </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="LoadCatastrophesForYear" title="Code Example for calling LoadCatastrophesForYear function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheList.vb" region="LoadCatastrophesForYear" title="Code Example for calling LoadCatastrophesForYear function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.RequestData> LoadCatastrophesForYear()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCatastrophesForYear.RequestData>(proxy, proxy.LoadCatastrophesForYear);
            return s;
        }
        ///<summary> Gets the changed claims during a date range for a company </summary>///<param name="request">A wrapper request with companyId, startDate, endDate.</param>///<returns>A wrapper response with a datatable.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.Request, Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.Response, Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.RequestData> LoadChangedClaimsByDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.Request, Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.Response, Diamond.Common.Services.Messages.ClaimsService.LoadChangedClaimsByDate.RequestData>(proxy, proxy.LoadChangedClaimsByDate);
            return s;
        }
        ///<summary> To Load Transaction Check Information </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Response" /> to Load Transaction Check Information </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCheckInfo" title="Code Example for calling LoadCheckInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCheckInfo" title="Code Example for calling LoadCheckInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.RequestData> LoadCheckInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCheckInfo.RequestData>(proxy, proxy.LoadCheckInfo);
            return s;
        }
        ///<summary> To  Load Claimant List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response" /> to Load Claimant List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="LoadClaimantList" title="Code Example for calling LoadClaimantList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="LoadClaimantList" title="Code Example for calling LoadClaimantList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.RequestData> LoadClaimant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimant.RequestData>(proxy, proxy.LoadClaimant);
            return s;
        }
        ///<summary> To  Load Claimant Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Response" /> to Load Claimant Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadClaimantInfo" title="Code Example for calling LoadClaimantInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadClaimantInfo" title="Code Example for calling LoadClaimantInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.RequestData> LoadClaimantInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInfo.RequestData>(proxy, proxy.LoadClaimantInfo);
            return s;
        }
        ///<summary> To Load Claimant Injury </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Response" /> to Load Claimant Injury </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantInjury.vb" region="LoadClaimantInjury" title="Code Example for calling LoadClaimantInjury function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantInjury.vb" region="LoadClaimantInjury" title="Code Example for calling LoadClaimantInjury function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.RequestData> LoadClaimantInjury()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantInjury.RequestData>(proxy, proxy.LoadClaimantInjury);
            return s;
        }
        ///<summary> To  Load Claimant List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response" /> to Load Claimant List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="LoadClaimantList" title="Code Example for calling LoadClaimantList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="LoadClaimantList" title="Code Example for calling LoadClaimantList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.RequestData> LoadClaimantList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimantList.RequestData>(proxy, proxy.LoadClaimantList);
            return s;
        }
        ///<summary> Load a single CCC appraisal request </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.RequestData> LoadClaimAppraisalCCC()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalCCC.RequestData>(proxy, proxy.LoadClaimAppraisalCCC);
            return s;
        }
        ///<summary> Load a list of CCC appraisal requests </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.RequestData> LoadClaimAppraisalsCCC()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimAppraisalsCCC.RequestData>(proxy, proxy.LoadClaimAppraisalsCCC);
            return s;
        }
        ///<summary> Queries an external policy system for policy information </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.RequestData> LoadClaimContractor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractor.RequestData>(proxy, proxy.LoadClaimContractor);
            return s;
        }
        ///<summary> Queries an external policy system for policy information </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.RequestData> LoadClaimContractorList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimContractorList.RequestData>(proxy, proxy.LoadClaimContractorList);
            return s;
        }
        ///<summary> To Load ClaimControl Listed AI Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Response" /> to Load ClaimControl Listed AI Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\AdditionalInterest\AdditionalInterestList.vb" region="LoadClaimControlListedAIData" title="Code Example for calling LoadClaimControlListedAIData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\AdditionalInterest\AdditionalInterestList.vb" region="LoadClaimControlListedAIData" title="Code Example for calling LoadClaimControlListedAIData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.RequestData> LoadClaimControlListedAIData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIData.RequestData>(proxy, proxy.LoadClaimControlListedAIData);
            return s;
        }
        ///<summary> To Load all Claim Control Listed AI Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Response" /> to Load all ClaimControl Listed AI Data  </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\AdditionalInterest\AdditionalInterestList.vb" region="LoadClaimControlListedAIDataAll" title="Code Example for calling LoadClaimControlListedAIDataAll function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\AdditionalInterest\AdditionalInterestList.vb" region="LoadClaimControlListedAIDataAll" title="Code Example for calling LoadClaimControlListedAIDataAll function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.RequestData> LoadClaimControlListedAIDataAll()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedAIDataAll.RequestData>(proxy, proxy.LoadClaimControlListedAIDataAll);
            return s;
        }
        ///<summary> To  Load ClaimControl Listed Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Response" /> to Load ClaimControl Listed Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="LoadClaimControlListedProperties" title="Code Example for calling LoadClaimControlListedProperties function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="LoadClaimControlListedProperties" title="Code Example for calling LoadClaimControlListedProperties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.RequestData> LoadClaimControlListedProperties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedProperties.RequestData>(proxy, proxy.LoadClaimControlListedProperties);
            return s;
        }
        ///<summary> To  Load ClaimControl Listed Vehicles </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Response" /> to Load ClaimControl Listed Vehicles </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="LoadClaimControlListedVehicles" title="Code Example for calling LoadClaimControlListedVehicles function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="LoadClaimControlListedVehicles" title="Code Example for calling LoadClaimControlListedVehicles function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.RequestData> LoadClaimControlListedVehicles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlListedVehicles.RequestData>(proxy, proxy.LoadClaimControlListedVehicles);
            return s;
        }
        ///<summary> To  Load ClaimControl Personnel By Type </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" /> to Load ClaimControl Personnel By Type </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPersonnelByType" title="Code Example for calling LoadClaimControlPersonnelByType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPersonnelByType" title="Code Example for calling LoadClaimControlPersonnelByType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.RequestData> LoadClaimControlPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnel.RequestData>(proxy, proxy.LoadClaimControlPersonnel);
            return s;
        }
        ///<summary> To  Load ClaimControl Personnel By Type </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" /> to Load ClaimControl Personnel By Type </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPersonnelByType" title="Code Example for calling LoadClaimControlPersonnelByType function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPersonnelByType" title="Code Example for calling LoadClaimControlPersonnelByType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.RequestData> LoadClaimControlPersonnelByType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.RequestData>(proxy, proxy.LoadClaimControlPersonnelByType);
            return s;
        }
        ///<summary> To  Load ClaimControl Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Response" /> to Load ClaimControl Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlProperties" title="Code Example for calling LoadClaimControlProperties function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlProperties" title="Code Example for calling LoadClaimControlProperties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.RequestData> LoadClaimControlProperties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlProperties.RequestData>(proxy, proxy.LoadClaimControlProperties);
            return s;
        }
        ///<summary> To Load ClaimControl Property Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Response" /> to Load ClaimControl Property Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="LoadClaimControlPropertyAppraisal" title="Code Example for calling LoadClaimControlPropertyAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="LoadClaimControlPropertyAppraisal" title="Code Example for calling LoadClaimControlPropertyAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.RequestData> LoadClaimControlPropertyAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisal.RequestData>(proxy, proxy.LoadClaimControlPropertyAppraisal);
            return s;
        }
        ///<summary> To Load ClaimControl Property Appraisals </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Response" /> to Load ClaimControl Property Appraisals </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPropertyAppraisals" title="Code Example for calling LoadClaimControlPropertyAppraisals function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlPropertyAppraisals" title="Code Example for calling LoadClaimControlPropertyAppraisals function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.RequestData> LoadClaimControlPropertyAppraisals()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPropertyAppraisals.RequestData>(proxy, proxy.LoadClaimControlPropertyAppraisals);
            return s;
        }
        ///<summary> To Load ClaimControl Screen Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Response" /> to Load ClaimControl Screen Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlScreenData" title="Code Example for calling LoadClaimControlScreenData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlScreenData" title="Code Example for calling LoadClaimControlScreenData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.RequestData> LoadClaimControlScreenData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlScreenData.RequestData>(proxy, proxy.LoadClaimControlScreenData);
            return s;
        }
        ///<summary> To  Load ClaimControl Vehicle Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Response" /> to Load ClaimControl Vehicle Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="LoadClaimControlVehicleAppraisal" title="Code Example for calling LoadClaimControlVehicleAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="LoadClaimControlVehicleAppraisal" title="Code Example for calling LoadClaimControlVehicleAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.RequestData> LoadClaimControlVehicleAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisal.RequestData>(proxy, proxy.LoadClaimControlVehicleAppraisal);
            return s;
        }
        ///<summary> To Load ClaimControl Vehicle Appraisals </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Response" /> to Load ClaimControl Vehicle Appraisals </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlVehicleAppraisals" title="Code Example for calling LoadClaimControlVehicleAppraisals function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlVehicleAppraisals" title="Code Example for calling LoadClaimControlVehicleAppraisals function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.RequestData> LoadClaimControlVehicleAppraisals()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicleAppraisals.RequestData>(proxy, proxy.LoadClaimControlVehicleAppraisals);
            return s;
        }
        ///<summary> To  Load ClaimControl Vehicles </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Response" /> to Load ClaimControl Vehicles </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlVehicles" title="Code Example for calling LoadClaimControlVehicles function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimControlVehicles" title="Code Example for calling LoadClaimControlVehicles function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.RequestData> LoadClaimControlVehicles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlVehicles.RequestData>(proxy, proxy.LoadClaimControlVehicles);
            return s;
        }
        ///<summary>  to load claim coverages for the Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Response" /> to load claim coverages for the Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadClaimCoverages" title="Code Example for calling LoadClaimCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadClaimCoverages" title="Code Example for calling LoadClaimCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.RequestData> LoadClaimCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoverages.RequestData>(proxy, proxy.LoadClaimCoverages);
            return s;
        }
        ///<summary> Loads the claim coverages. </summary>///<param name="request">The wrapper request containing CompanyStateLOBID.</param>///<returns> The wrapper response containing LoadClaimCoverages </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimCoveragesForFeatureDefault" title="Code Example for calling LoadClaimCoveragesForFeatureDefault function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimCoveragesForFeatureDefault" title="Code Example for calling LoadClaimCoveragesForFeatureDefault function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.RequestData> LoadClaimCoveragesForFeatureDefault()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimCoveragesForFeatureDefault.RequestData>(proxy, proxy.LoadClaimCoveragesForFeatureDefault);
            return s;
        }
        ///<summary> To Load Claim Detail Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Response" /> to Load ClaimDetail Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Detail.vb" region="LoadClaimDetailInfo" title="Code Example for calling LoadClaimDetailInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Detail.vb" region="LoadClaimDetailInfo" title="Code Example for calling LoadClaimDetailInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.RequestData> LoadClaimDetailInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimDetailInfo.RequestData>(proxy, proxy.LoadClaimDetailInfo);
            return s;
        }
        ///<summary> Loads the claim exposure. </summary>///<param name="request">The wrapper request containing VersionID, UnderwritingVersionID.</param>///<returns> The wrapper response containing ClaimExposure </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadClaimExposure" title="Code Example for calling LoadClaimExposure function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\CompanySetup\AdminLOB.vb" region="LoadClaimExposure" title="Code Example for calling LoadClaimExposure function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.RequestData> LoadClaimExposure()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimExposure.RequestData>(proxy, proxy.LoadClaimExposure);
            return s;
        }
        ///<summary> To Load Claim Attorney List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response" /> To Load Claim Attorney List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetup.vb" region="LoadClaimFirmAttorneyList" title="Code Example for calling LoadClaimFirmAttorneyList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetup.vb" region="LoadClaimFirmAttorneyList" title="Code Example for calling LoadClaimFirmAttorneyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.RequestData> LoadClaimFirmAttorney()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorney.RequestData>(proxy, proxy.LoadClaimFirmAttorney);
            return s;
        }
        ///<summary> To Load Claim Attorney List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response" /> To Load Claim Attorney List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetup.vb" region="LoadClaimFirmAttorneyList" title="Code Example for calling LoadClaimFirmAttorneyList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetup.vb" region="LoadClaimFirmAttorneyList" title="Code Example for calling LoadClaimFirmAttorneyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.RequestData> LoadClaimFirmAttorneyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmAttorneyList.RequestData>(proxy, proxy.LoadClaimFirmAttorneyList);
            return s;
        }
        ///<summary> To Load Claim Firm Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Response" /> To Load Claim Firm Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetupForm.vb" region="LoadClaimFirmInfo" title="Code Example for calling LoadClaimFirmInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneySetupForm.vb" region="LoadClaimFirmInfo" title="Code Example for calling LoadClaimFirmInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.RequestData> LoadClaimFirmInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmInfo.RequestData>(proxy, proxy.LoadClaimFirmInfo);
            return s;
        }
        ///<summary> To Load ClaimFirm List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Response" /> to Load ClaimFirm List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmSetup.vb" region="LoadClaimFirmList" title="Code Example for calling LoadClaimFirmList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmSetup.vb" region="LoadClaimFirmList" title="Code Example for calling LoadClaimFirmList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.RequestData> LoadClaimFirmList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmList.RequestData>(proxy, proxy.LoadClaimFirmList);
            return s;
        }
        ///<summary> To Load ClaimFirm List By Type </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Response" /> to Load ClaimFirm List By Type </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationMain.vb" region="LoadClaimFirmListByType" title="Code Example for calling LoadClaimFirmListByType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationMain.vb" region="LoadClaimFirmListByType" title="Code Example for calling LoadClaimFirmListByType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.RequestData> LoadClaimFirmListByType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimFirmListByType.RequestData>(proxy, proxy.LoadClaimFirmListByType);
            return s;
        }
        ///<summary> To Load Claim by claim control ID </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response" /> to Load claim </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimForId" title="Code Example for calling LoadClaimForId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimForId" title="Code Example for calling LoadClaimForId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.RequestData> LoadClaimForId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.RequestData>(proxy, proxy.LoadClaimForId);
            return s;
        }
        ///<summary> To Load Claim for Inquiry </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Response" /> to Load claim for Inquiry </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Response" />
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.RequestData> LoadClaimInquiry()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimInquiry.RequestData>(proxy, proxy.LoadClaimInquiry);
            return s;
        }
        ///<summary> Loads the claim loss types by version </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.RequestData> LoadClaimLossTypesVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimLossTypesVersion.RequestData>(proxy, proxy.LoadClaimLossTypesVersion);
            return s;
        }
        ///<summary> To Load Claim by claim control ID </summary>///<param name="request">The request takes in the claimControlId, claimantNum, featureNum, transaction_num  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response" /> to Load claim </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimForId.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimForId" title="Code Example for calling LoadClaimForId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimForId" title="Code Example for calling LoadClaimForId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.RequestData> LoadClaimObject()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimObject.RequestData>(proxy, proxy.LoadClaimObject);
            return s;
        }
        ///<summary> To  Load ClaimOffice List For Admin </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" /> to Load ClaimControl Personnel By Type </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimControlPersonnelByType.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimOfficeSetup.vb" region="LoadClaimOfficeListForAdmin" title="Code Example for calling LoadClaimOfficeListForAdmin function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimOfficeSetup.vb" region="LoadClaimOfficeListForAdmin" title="Code Example for calling LoadClaimOfficeListForAdmin function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.RequestData> LoadClaimOfficeListForAdmin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimOfficeListForAdmin.RequestData>(proxy, proxy.LoadClaimOfficeListForAdmin);
            return s;
        }
        ///<summary> Loads the claim payee change reason. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CliamPayeeChangeReason </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="LoadClaimPayeeChangeReason" title="Code Example for calling LoadClaimPayeeChangeReason function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="LoadClaimPayeeChangeReason" title="Code Example for calling LoadClaimPayeeChangeReason function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.RequestData> LoadClaimPayeeChangeReason()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeeChangeReason.RequestData>(proxy, proxy.LoadClaimPayeeChangeReason);
            return s;
        }
        ///<summary> Loads the claim payee phrase. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CliamPayeePhrase </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="LoadClaimPayeePhrase" title="Code Example for calling LoadClaimPayeePhrase function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="LoadClaimPayeePhrase" title="Code Example for calling LoadClaimPayeePhrase function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.RequestData> LoadClaimPayeePhrase()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPayeePhrase.RequestData>(proxy, proxy.LoadClaimPayeePhrase);
            return s;
        }
        ///<summary> Loads the <see cref="T:Diamond.Common.Objects.Claims.Personnel.ClaimPersonnel" /> object for a given <c>ClaimPersonelId</c>. </summary>///<see cref="T:Diamond.Common.Objects.Claims.Personnel.ClaimPersonnel" />///<c>ClaimPersonelId</c>///<param name="request">The wrapper request containing ClaimpersonnelID.</param>///<returns> The wrapper response containing ClaimPersonnel List </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimPersonnelDisplay" title="Code Example for calling LoadClaimPersonnelDisplay function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadClaimPersonnelDisplay" title="Code Example for calling LoadClaimPersonnelDisplay function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.RequestData> LoadClaimPersonnelDisplay()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplay.RequestData>(proxy, proxy.LoadClaimPersonnelDisplay);
            return s;
        }
        ///<summary> Loads the claim personnel display list. </summary>///<param name="request">The request contains Nothing.</param>///<returns>The claim personnel list for display</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnelSetup.vb" region="LoadClaimPersonnelDisplayList" title="Code Example for calling LoadClaimPersonnelDisplayList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnelSetup.vb" region="LoadClaimPersonnelDisplayList" title="Code Example for calling LoadClaimPersonnelDisplayList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.RequestData> LoadClaimPersonnelDisplayList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimPersonnelDisplayList.RequestData>(proxy, proxy.LoadClaimPersonnelDisplayList);
            return s;
        }
        ///<summary> To  Load Claims List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsList" title="Code Example for calling LoadClaimsList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsList" title="Code Example for calling LoadClaimsList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaims.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaims.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaims.RequestData> LoadClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaims.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaims.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaims.RequestData>(proxy, proxy.LoadClaims);
            return s;
        }
        ///<summary> To Load Claims by User </summary>///<param name="request">The request takes in the <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response" /> to Load Claims by User </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\MyClaimsList.ascx.vb" region="LoadClaimsByUser" title="Code Example for calling LoadClaimsByUser function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\MyClaimsList.ascx.vb" region="LoadClaimsByUser" title="Code Example for calling LoadClaimsByUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.RequestData> LoadClaimsByUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.RequestData>(proxy, proxy.LoadClaimsByUser);
            return s;
        }
        ///<summary> To  Load Claims List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsList" title="Code Example for calling LoadClaimsList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsList" title="Code Example for calling LoadClaimsList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.RequestData> LoadClaimsList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsList.RequestData>(proxy, proxy.LoadClaimsList);
            return s;
        }
        ///<summary> To  Load Claims List For Policy # </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsListForPolicyNumber" title="Code Example for calling LoadClaimsList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadClaimsListForPolicyNumber" title="Code Example for calling LoadClaimsList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.RequestData> LoadClaimsListForPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsListForPolicyNumber.RequestData>(proxy, proxy.LoadClaimsListForPolicyNumber);
            return s;
        }
        ///<summary>  to load claim sub-coverages for the Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimSubCoverages.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimSubCoverages.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimSubCoverages.Response" /> to load claim sub-coverages for the Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimSubCoverages.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadClaimSubCoverages" title="Code Example for calling LoadClaimSubCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadClaimSubCoverages" title="Code Example for calling LoadClaimSubCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.RequestData> LoadClaimSubCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimsubCoveragesForFeatureDefault.RequestData>(proxy, proxy.LoadClaimSubCoverages);
            return s;
        }
        
        ///<summary> Loads the claim tracking types by version </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.RequestData> LoadClaimTrackingTypesVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.LoadClaimTrackingTypesVersion.RequestData>(proxy, proxy.LoadClaimTrackingTypesVersion);
            return s;
        }
        ///<summary> To Load Close ClaimSummary </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Response" /> to Load Close Claim Summary </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CloseClaimSummary.vb" region="LoadCloseClaimSummary" title="Code Example for calling LoadCloseClaimSummary function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CloseClaimSummary.vb" region="LoadCloseClaimSummary" title="Code Example for calling LoadCloseClaimSummary function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.RequestData> LoadCloseClaimSummary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCloseClaimSummary.RequestData>(proxy, proxy.LoadCloseClaimSummary);
            return s;
        }
        ///<summary> Loads the company state Lobs. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing LoadCompanyStateLOBs </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadCompanyStateLOBs" title="Code Example for calling LoadCompanyStateLOBs function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="LoadCompanyStateLOBs" title="Code Example for calling LoadCompanyStateLOBs function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.RequestData> LoadCompanyStateLOBs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCompanyStateLOBs.RequestData>(proxy, proxy.LoadCompanyStateLOBs);
            return s;
        }
        ///<summary> To  Load Contact </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadContact.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadContact.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadContact.Response" /> to Load Contact </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadContact.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ReportedInsured.vb" region="LoadContact" title="Code Example for calling LoadContact function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ReportedInsured.vb" region="LoadContact" title="Code Example for calling LoadContact function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadContact.Request, Diamond.Common.Services.Messages.ClaimsService.LoadContact.Response, Diamond.Common.Services.Messages.ClaimsService.LoadContact.RequestData> LoadContact()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadContact.Request, Diamond.Common.Services.Messages.ClaimsService.LoadContact.Response, Diamond.Common.Services.Messages.ClaimsService.LoadContact.RequestData>(proxy, proxy.LoadContact);
            return s;
        }
        ///<summary> Count Forms For Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Response" /> to Count Forms For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadCoverageList" title="Code Example for calling LoadCoverageList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadCoverageList" title="Code Example for calling LoadCoverageList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.RequestData> LoadCoverageList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCoverageList.RequestData>(proxy, proxy.LoadCoverageList);
            return s;
        }
        ///<summary> To Load Coverages </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Response" /> to Load Coverages </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\Coverages.vb" region="LoadCoverages" title="Code Example for calling LoadCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\Coverages.vb" region="LoadCoverages" title="Code Example for calling LoadCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.RequestData> LoadCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadCoverages.RequestData>(proxy, proxy.LoadCoverages);
            return s;
        }
        ///<summary> To Load Dashboard Controls </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Response" /> to Load Dashboard Controls </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="LoadDashboardControls" title="Code Example for calling LoadDashboardControls function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="LoadDashboardControls" title="Code Example for calling LoadDashboardControls function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.RequestData> LoadDashboardControls()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardControls.RequestData>(proxy, proxy.LoadDashboardControls);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.RequestData> LoadDashboardNegotiations()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardNegotiations.RequestData>(proxy, proxy.LoadDashboardNegotiations);
            return s;
        }
        ///<summary> To Load Dashboard Templates </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Response" /> to Load Dashboard Templates </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="LoadDashboardTemplates" title="Code Example for calling LoadDashboardTemplates function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="LoadDashboardTemplates" title="Code Example for calling LoadDashboardTemplates function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.RequestData> LoadDashboardTemplates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDashboardTemplates.RequestData>(proxy, proxy.LoadDashboardTemplates);
            return s;
        }
        ///<summary> Queries an external policy system for policy information </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.RequestData> LoadDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDCPolicy.RequestData>(proxy, proxy.LoadDCPolicy);
            return s;
        }
        ///<summary> TO Load Dept claim fire </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Response" /> TO Load Dept claim fire </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Fire.vb" region="LoadDeptClaimFire" title="Code Example for calling LoadDeptClaimFire function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Fire.vb" region="LoadDeptClaimFire" title="Code Example for calling LoadDeptClaimFire function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.RequestData> LoadDeptClaimFire()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimFire.RequestData>(proxy, proxy.LoadDeptClaimFire);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadDeptClaimPolice" title="Code Example for calling LoadDeptClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadDeptClaimPolice" title="Code Example for calling LoadDeptClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.RequestData> LoadDeptClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptClaimPolice.RequestData>(proxy, proxy.LoadDeptClaimPolice);
            return s;
        }
        ///<summary> TO Load Dept List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Response" /> TO Load Dept List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Fire.vb" region="LoadDeptListClaimFire" title="Code Example for calling LoadDeptListClaimFire function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Fire.vb" region="LoadDeptListClaimFire" title="Code Example for calling LoadDeptListClaimFire function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.RequestData> LoadDeptListClaimFire()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimFire.RequestData>(proxy, proxy.LoadDeptListClaimFire);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadDeptListClaimPolice" title="Code Example for calling LoadDeptListClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadDeptListClaimPolice" title="Code Example for calling LoadDeptListClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.RequestData> LoadDeptListClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptListClaimPolice.RequestData>(proxy, proxy.LoadDeptListClaimPolice);
            return s;
        }
        ///<summary> To  Load Dept Maintenance ClaimFire </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Response" /> to Load Dept Maintenance ClaimFire </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\FireSetup.vb" region="LoadDeptMaintenanceClaimFire" title="Code Example for calling LoadDeptMaintenanceClaimFire function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\FireSetup.vb" region="LoadDeptMaintenanceClaimFire" title="Code Example for calling LoadDeptMaintenanceClaimFire function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.RequestData> LoadDeptMaintenanceClaimFire()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimFire.RequestData>(proxy, proxy.LoadDeptMaintenanceClaimFire);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\PoliceDepartmentSetup.vb" region="LoadDeptMaintenanceClaimPolice" title="Code Example for calling LoadDeptMaintenanceClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\PoliceDepartmentSetup.vb" region="LoadDeptMaintenanceClaimPolice" title="Code Example for calling LoadDeptMaintenanceClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.RequestData> LoadDeptMaintenanceClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDeptMaintenanceClaimPolice.RequestData>(proxy, proxy.LoadDeptMaintenanceClaimPolice);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.RequestData> LoadDrivers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.Request, Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.Response, Diamond.Common.Services.Messages.ClaimsService.LoadDrivers.RequestData>(proxy, proxy.LoadDrivers);
            return s;
        }
        ///<summary> Loads Exposure list For Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Response" /> to Load Exposure list For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExposureList" title="Code Example for calling LoadExposureList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExposureList" title="Code Example for calling LoadExposureList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.RequestData> LoadExposureList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadExposureList.RequestData>(proxy, proxy.LoadExposureList);
            return s;
        }
        ///<summary> Load Claim Feature List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response" /> loads the list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\Litigation.vb" region="LoadFeatureList" title="Code Example for calling LoadFeatureList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\Litigation.vb" region="LoadFeatureList" title="Code Example for calling LoadFeatureList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeature.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeature.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeature.RequestData> LoadFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeature.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeature.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeature.RequestData>(proxy, proxy.LoadFeature);
            return s;
        }
        ///<summary> To Load Feature Count by User </summary>///<param name="request">The request takes in the <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response" /> to Load Feature Count by User </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadClaimsByUser.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\TeamClaimsList.ascx.vb" region="LoadFeatureCountByUser" title="Code Example for calling LoadFeatureCountByUser function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\TeamClaimsList.ascx.vb" region="LoadFeatureCountByUser" title="Code Example for calling LoadFeatureCountByUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.RequestData> LoadFeatureCountByUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureCountByUser.RequestData>(proxy, proxy.LoadFeatureCountByUser);
            return s;
        }
        ///<summary> Load Claim Feature Default </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Response" /> loads the list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\MultipleFeature.vb" region="LoadFeatureDefault" title="Code Example for calling LoadFeatureDefault function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\MultipleFeature.vb" region="LoadFeatureDefault" title="Code Example for calling LoadFeatureDefault function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.RequestData> LoadFeatureDefault()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureDefault.RequestData>(proxy, proxy.LoadFeatureDefault);
            return s;
        }
        ///<summary> To Load Feature Initial Reserves </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Response" /> to Load Feature Initial Reserves </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadFeatureInitialReserves" title="Code Example for calling LoadFeatureInitialReserves function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadFeatureInitialReserves" title="Code Example for calling LoadFeatureInitialReserves function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.RequestData> LoadFeatureInitialReserves()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureInitialReserves.RequestData>(proxy, proxy.LoadFeatureInitialReserves);
            return s;
        }
        ///<summary> Load Claim Feature List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response" /> loads the list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\Litigation.vb" region="LoadFeatureList" title="Code Example for calling LoadFeatureList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\Litigation.vb" region="LoadFeatureList" title="Code Example for calling LoadFeatureList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.RequestData> LoadFeatureList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeatureList.RequestData>(proxy, proxy.LoadFeatureList);
            return s;
        }
        ///<summary> To  Load Feature Personnel </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Response" /> to Load Feature Personnel </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadFeaturePersonnel" title="Code Example for calling LoadFeaturePersonnel function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadFeaturePersonnel" title="Code Example for calling LoadFeaturePersonnel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.RequestData> LoadFeaturePersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFeaturePersonnel.RequestData>(proxy, proxy.LoadFeaturePersonnel);
            return s;
        }
        ///<summary> To Load Financials </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Response" /> to Load Financials </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadFinancials" title="Code Example for calling LoadFinancials function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadFinancials" title="Code Example for calling LoadFinancials function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.RequestData> LoadFinancials()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancials.RequestData>(proxy, proxy.LoadFinancials);
            return s;
        }
        ///<summary> To Load Financials For Claimant </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Response" /> to Load Financials For Claimant </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Financials\CloseFinancialsForm.vb" region="LoadFinancialsForClaimant" title="Code Example for calling LoadFinancialsForClaimant function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Financials\CloseFinancialsForm.vb" region="LoadFinancialsForClaimant" title="Code Example for calling LoadFinancialsForClaimant function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.RequestData> LoadFinancialsForClaimant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimant.RequestData>(proxy, proxy.LoadFinancialsForClaimant);
            return s;
        }
        ///<summary> To Load Financials For ClaimControl </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Response" /> to Load Financials For ClaimControl </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadFinancialsForClaimControl" title="Code Example for calling LoadFinancialsForClaimControl function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\List\ClaimsList.vb" region="LoadFinancialsForClaimControl" title="Code Example for calling LoadFinancialsForClaimControl function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.RequestData> LoadFinancialsForClaimControl()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForClaimControl.RequestData>(proxy, proxy.LoadFinancialsForClaimControl);
            return s;
        }
        ///<summary> To  Load Financials For Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Response" /> to Load Financials For Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="LoadFinancialsForFeature" title="Code Example for calling LoadFinancialsForFeature function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="LoadFinancialsForFeature" title="Code Example for calling LoadFinancialsForFeature function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.RequestData> LoadFinancialsForFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Request, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.Response, Diamond.Common.Services.Messages.ClaimsService.LoadFinancialsForFeature.RequestData>(proxy, proxy.LoadFinancialsForFeature);
            return s;
        }
        ///<summary> To  Initial Reserve LoadList </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response" /> to Initial Reserve LoadList </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="LoadInitialReserveList" title="Code Example for calling LoadInitialReserveList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="LoadInitialReserveList" title="Code Example for calling LoadInitialReserveList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.RequestData> LoadInitialReserve()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserve.RequestData>(proxy, proxy.LoadInitialReserve);
            return s;
        }
        ///<summary> To  Initial Reserve LoadList </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response" /> to Initial Reserve LoadList </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="LoadInitialReserveList" title="Code Example for calling LoadInitialReserveList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveSetup.vb" region="LoadInitialReserveList" title="Code Example for calling LoadInitialReserveList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.RequestData> LoadInitialReserveList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInitialReserveList.RequestData>(proxy, proxy.LoadInitialReserveList);
            return s;
        }
        ///<summary> To  Load Insured Submission Questions </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsured.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsured.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsured.RequestData> LoadInsured()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsured.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsured.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsured.RequestData>(proxy, proxy.LoadInsured);
            return s;
        }
        ///<summary> To Load Insured Claim PayeeId </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Response" /> to Load Insured Claim Payee Id </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadInsuredClaimPayeeId" title="Code Example for calling LoadInsuredClaimPayeeId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadInsuredClaimPayeeId" title="Code Example for calling LoadInsuredClaimPayeeId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.RequestData> LoadInsuredClaimPayeeId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredClaimPayeeId.RequestData>(proxy, proxy.LoadInsuredClaimPayeeId);
            return s;
        }
        ///<summary> To Load Insured Info </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Response" /> to Load Insured Info </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\ReportedBy\ReportedBy.vb" region="LoadInsuredInfo" title="Code Example for calling LoadInsuredInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\ReportedBy\ReportedBy.vb" region="LoadInsuredInfo" title="Code Example for calling LoadInsuredInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.RequestData> LoadInsuredInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredInfo.RequestData>(proxy, proxy.LoadInsuredInfo);
            return s;
        }
        ///<summary> To  Load Insured Submission Questions </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response" /> to Load Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.RequestData> LoadInsuredSubmissionQuestions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadInsuredSubmissionQuestions.RequestData>(proxy, proxy.LoadInsuredSubmissionQuestions);
            return s;
        }
        ///<summary> To Load Payee's Legal Name </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Response" /> to Load Payee's Legal Name </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadLegalName" title="Code Example for calling LoadLegalName function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadLegalName" title="Code Example for calling LoadLegalName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.RequestData> LoadLegalName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLegalName.RequestData>(proxy, proxy.LoadLegalName);
            return s;
        }
        ///<summary> To  Load Levy List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Response" /> to Load Levy List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadLevyList" title="Code Example for calling LoadLevyList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadLevyList" title="Code Example for calling LoadLevyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.RequestData> LoadLevyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLevyList.RequestData>(proxy, proxy.LoadLevyList);
            return s;
        }
        ///<summary> To Load Listed Claimant Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Request" /> object contains ClaimControlId, ClaimantNum</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Response" /> to Load Listed Claimant Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\OperatorOwner.vb" region="LoadListedClaimantData" title="Code Example for calling LoadListedClaimantData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\OperatorOwner.vb" region="LoadListedClaimantData" title="Code Example for calling LoadListedClaimantData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.RequestData> LoadListedClaimantData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantData.RequestData>(proxy, proxy.LoadListedClaimantData);
            return s;
        }
        ///<summary> To Load Listed Claimants And Drivers </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Response" /> to Load Listed Claimants And Drivers with Number, Name, Type </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\OperatorOwner.vb" region="LoadListedClaimantsAndDrivers" title="Code Example for calling LoadListedClaimantsAndDrivers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\OperatorOwner.vb" region="LoadListedClaimantsAndDrivers" title="Code Example for calling LoadListedClaimantsAndDrivers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.RequestData> LoadListedClaimantsAndDrivers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedClaimantsAndDrivers.RequestData>(proxy, proxy.LoadListedClaimantsAndDrivers);
            return s;
        }
        ///<summary> To Load Listed Person </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Response" /> to Load Listed Person </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="LoadListedPerson" title="Code Example for calling LoadListedPerson function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="LoadListedPerson" title="Code Example for calling LoadListedPerson function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.RequestData> LoadListedPerson()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedPerson.RequestData>(proxy, proxy.LoadListedPerson);
            return s;
        }
        ///<summary> To Load Listed Person Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Response" /> to Load Listed Person Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="LoadListedPersonData" title="Code Example for calling LoadListedPersonData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="LoadListedPersonData" title="Code Example for calling LoadListedPersonData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.RequestData> LoadListedPersonData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadListedPersonData.RequestData>(proxy, proxy.LoadListedPersonData);
            return s;
        }
        ///<summary> To Load Litigation </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Response" /> to Load Litigation </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationList.vb" region="LoadLitigation1" title="Code Example for calling LoadLitigation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationList.vb" region="LoadLitigation1" title="Code Example for calling LoadLitigation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.RequestData> LoadLitigation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigation.RequestData>(proxy, proxy.LoadLitigation);
            return s;
        }
        ///<summary> Load Litigation Expenses </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.RequestData> LoadLitigationExpenses()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationExpenses.RequestData>(proxy, proxy.LoadLitigationExpenses);
            return s;
        }
        ///<summary> To  Load Litigation List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Response" /> to Load Litigation List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationList.vb" region="LoadLitigationList" title="Code Example for calling LoadLitigationList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationList.vb" region="LoadLitigationList" title="Code Example for calling LoadLitigationList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.RequestData> LoadLitigationList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationList.RequestData>(proxy, proxy.LoadLitigationList);
            return s;
        }
        ///<summary> Returns claim personnel </summary>///<param name="request">The wrapper request containing the ClaimPersonnelTypeId and an existing ClaimPersonnelId assigned to an existing litigation</param>///<returns> The wrapper response containing claim personnel </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationMain.vb" region="LoadLitigationPersonnelByType" title="Code Example for calling LoadLitigationPersonnelByType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationMain.vb" region="LoadLitigationPersonnelByType" title="Code Example for calling LoadLitigationPersonnelByType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.RequestData> LoadLitigationPersonnelByType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLitigationPersonnelByType.RequestData>(proxy, proxy.LoadLitigationPersonnelByType);
            return s;
        }
        ///<summary> To  Load LossNotice </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Response" /> to Load LossNotice </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNotice.vb" region="LoadLossNotice" title="Code Example for calling LoadLossNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNotice.vb" region="LoadLossNotice" title="Code Example for calling LoadLossNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.RequestData> LoadLossNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadLossNotice.RequestData>(proxy, proxy.LoadLossNotice);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.RequestData> LoadMedicalBillDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetail.RequestData>(proxy, proxy.LoadMedicalBillDetail);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.RequestData> LoadMedicalBillDetailList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalBillDetailList.RequestData>(proxy, proxy.LoadMedicalBillDetailList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.RequestData> LoadMedicalFacility()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacility.RequestData>(proxy, proxy.LoadMedicalFacility);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.RequestData> LoadMedicalFacilityList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityList.RequestData>(proxy, proxy.LoadMedicalFacilityList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.RequestData> LoadMedicalFacilityMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalFacilityMaintenance.RequestData>(proxy, proxy.LoadMedicalFacilityMaintenance);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.RequestData> LoadMedicalProvider()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProvider.RequestData>(proxy, proxy.LoadMedicalProvider);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.RequestData> LoadMedicalProviderList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderList.RequestData>(proxy, proxy.LoadMedicalProviderList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.RequestData> LoadMedicalProviderMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalProviderMaintenance.RequestData>(proxy, proxy.LoadMedicalProviderMaintenance);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.RequestData> LoadMedicalTreatment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatment.RequestData>(proxy, proxy.LoadMedicalTreatment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.RequestData> LoadMedicalTreatmentList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentList.RequestData>(proxy, proxy.LoadMedicalTreatmentList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.RequestData> LoadMedicalTreatmentMaintenance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicalTreatmentMaintenance.RequestData>(proxy, proxy.LoadMedicalTreatmentMaintenance);
            return s;
        }
        ///<summary> Returns the Medicare Responsible Reporting Entity codes </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.RequestData> LoadMedicareResponsibleReportingEntityCodeConfigs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.Request, Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.Response, Diamond.Common.Services.Messages.ClaimsService.LoadMedicareResponsibleReportingEntityCodeConfigs.RequestData>(proxy, proxy.LoadMedicareResponsibleReportingEntityCodeConfigs);
            return s;
        }
        ///<summary> To Load Notify Underwriting Detail </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Response" /> to Load Notify Underwriting Detail </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwriting.vb" region="LoadNotifyUnderwritingDetail" title="Code Example for calling LoadNotifyUnderwritingDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwriting.vb" region="LoadNotifyUnderwritingDetail" title="Code Example for calling LoadNotifyUnderwritingDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Request, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Response, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.RequestData> LoadNotifyUnderwritingDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Request, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.Response, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingDetail.RequestData>(proxy, proxy.LoadNotifyUnderwritingDetail);
            return s;
        }
        ///<summary> To Load Notify Underwriting List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Response" /> to Load NotifyUnderwriting List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwritingList.vb" region="LoadNotifyUnderwritingList" title="Code Example for calling LoadNotifyUnderwritingList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwritingList.vb" region="LoadNotifyUnderwritingList" title="Code Example for calling LoadNotifyUnderwritingList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.RequestData> LoadNotifyUnderwritingList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadNotifyUnderwritingList.RequestData>(proxy, proxy.LoadNotifyUnderwritingList);
            return s;
        }
        ///<summary> To Load Officer </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Response" /> To Load Officer </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadOfficerClaimPolice" title="Code Example for calling LoadOfficerClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadOfficerClaimPolice" title="Code Example for calling LoadOfficerClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.RequestData> LoadOfficerClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerClaimPolice.RequestData>(proxy, proxy.LoadOfficerClaimPolice);
            return s;
        }
        ///<summary> To Load Officer List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Response" /> To Load Officer List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadOfficerListClaimPolice" title="Code Example for calling LoadOfficerListClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\Police.vb" region="LoadOfficerListClaimPolice" title="Code Example for calling LoadOfficerListClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.RequestData> LoadOfficerListClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerListClaimPolice.RequestData>(proxy, proxy.LoadOfficerListClaimPolice);
            return s;
        }
        ///<summary> To Load Police Officer Maintenance  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Response" /> To Load Police Officer Maintenance  </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\PoliceOfficerSetup.vb" region="LoadOfficerMaintenanceClaimPolice" title="Code Example for calling LoadOfficerMaintenanceClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\PoliceOfficerSetup.vb" region="LoadOfficerMaintenanceClaimPolice" title="Code Example for calling LoadOfficerMaintenanceClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.RequestData> LoadOfficerMaintenanceClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOfficerMaintenanceClaimPolice.RequestData>(proxy, proxy.LoadOfficerMaintenanceClaimPolice);
            return s;
        }
        ///<summary> Loads open claims assigned to user </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.RequestData> LoadOpenClaimsForClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOpenClaimsForClaimPersonnel.RequestData>(proxy, proxy.LoadOpenClaimsForClaimPersonnel);
            return s;
        }
        ///<summary> Loads open features assigned to user </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.RequestData> LoadOpenFeaturesForClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadOpenFeaturesForClaimPersonnel.RequestData>(proxy, proxy.LoadOpenFeaturesForClaimPersonnel);
            return s;
        }
        ///<summary> To  Load Payee </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Response" /> to Load Payee </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadPayee" title="Code Example for calling LoadPayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="LoadPayee" title="Code Example for calling LoadPayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayee.RequestData> LoadPayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayee.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayee.RequestData>(proxy, proxy.LoadPayee);
            return s;
        }
        ///<summary> To load the EFTAccount associated with a Payee </summary>///<param name="request">The request takes in the EFTAccountId</param>///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Response" /> Returns the EFTAccount object containing the record </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\EFTForm.vb" region="LoadPayeeEFTAccount" title="Code Example for calling LoadPayeeEFTAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\EFTForm.vb" region="LoadPayeeEFTAccount" title="Code Example for calling LoadPayeeEFTAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.RequestData> LoadPayeeEFTAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeEFTAccount.RequestData>(proxy, proxy.LoadPayeeEFTAccount);
            return s;
        }
        ///<summary> To Load Payee List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Response" /> to Load Payee List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="LoadPayeeList" title="Code Example for calling LoadPayeeList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="LoadPayeeList" title="Code Example for calling LoadPayeeList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.RequestData> LoadPayeeList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayeeList.RequestData>(proxy, proxy.LoadPayeeList);
            return s;
        }
        ///<summary> Loads the payment types. </summary>///<param name="request">The request contains ClaimControlId, ClaimantNum, ClaimFeatureNum, ClaimTransactionNum, ClaimTransactionCategoryId, PaymentTypeApplies.</param>///<returns>collection of PayType</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadPayTypes" title="Code Example for calling LoadPayTypes function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadPayTypes" title="Code Example for calling LoadPayTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.RequestData> LoadPayTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPayTypes.RequestData>(proxy, proxy.LoadPayTypes);
            return s;
        }
        ///<summary> To  Load Pending Claims List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Response" /> to Load Pending Claims List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadPendingClaimsList" title="Code Example for calling LoadPendingClaimsList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadPendingClaimsList" title="Code Example for calling LoadPendingClaimsList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.RequestData> LoadPendingClaimsList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPendingClaimsList.RequestData>(proxy, proxy.LoadPendingClaimsList);
            return s;
        }
        ///<summary> Loads a personnel assignment list </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.RequestData> LoadPersonnelAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignment.RequestData>(proxy, proxy.LoadPersonnelAssignment);
            return s;
        }
        ///<summary> Loads the display data for a claim personnel assignment </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.RequestData> LoadPersonnelAssignmentDisplayData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentDisplayData.RequestData>(proxy, proxy.LoadPersonnelAssignmentDisplayData);
            return s;
        }
        ///<summary> Loads a personnel assignment list </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.RequestData> LoadPersonnelAssignmentList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPersonnelAssignmentList.RequestData>(proxy, proxy.LoadPersonnelAssignmentList);
            return s;
        }
        ///<summary> Loads a policy system combo on the external customer lookup </summary>///<returns>Combo values</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.RequestData> LoadPolicySystemCombo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.Request, Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.Response, Diamond.Common.Services.Messages.ClaimsService.LoadPolicySystemCombo.RequestData>(proxy, proxy.LoadPolicySystemCombo);
            return s;
        }
        ///<summary> LoadRandomPolicyImage <note>Use this method for testing purpose only</note></summary>///<note>Use this method for testing purpose only</note>///<param name="request">A request object containing no properties</param>///<returns>A wrapper object containing the Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadRandomPolicyImage" title="Code Example for calling LoadRandomPolicyImage function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadRandomPolicyImage" title="Code Example for calling LoadRandomPolicyImage function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.RequestData> LoadRandomPolicyImage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRandomPolicyImage.RequestData>(proxy, proxy.LoadRandomPolicyImage);
            return s;
        }
        ///<summary> To Load Recent ClaimList For User </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Response" /> to Load Recent Claim List For User </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickClaimsLookupForm.vb" region="LoadRecentClaimListForUser" title="Code Example for calling LoadRecentClaimListForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickClaimsLookupForm.vb" region="LoadRecentClaimListForUser" title="Code Example for calling LoadRecentClaimListForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.RequestData> LoadRecentClaimListForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRecentClaimListForUser.RequestData>(proxy, proxy.LoadRecentClaimListForUser);
            return s;
        }
        ///<summary> Loads related tasks for a claim personnel </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.RequestData> LoadRelatedTasksForClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRelatedTasksForClaimPersonnel.RequestData>(proxy, proxy.LoadRelatedTasksForClaimPersonnel);
            return s;
        }
        ///<summary> To  Load RepairShop Details </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Response" /> to Load RepairShop Details </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShop.vb" region="LoadRepairShopDetails" title="Code Example for calling LoadRepairShopDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShop.vb" region="LoadRepairShopDetails" title="Code Example for calling LoadRepairShopDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.RequestData> LoadRepairShopDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopDetails.RequestData>(proxy, proxy.LoadRepairShopDetails);
            return s;
        }
        ///<summary> To  Load Repair Shop list </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Response" /> To  Load Repair Shop list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShop.vb" region="LoadRepairShopList" title="Code Example for calling LoadRepairShopList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShop.vb" region="LoadRepairShopList" title="Code Example for calling LoadRepairShopList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.RequestData> LoadRepairShopList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadRepairShopList.RequestData>(proxy, proxy.LoadRepairShopList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.RequestData> LoadSalvageAuctions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctions.RequestData>(proxy, proxy.LoadSalvageAuctions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.RequestData> LoadSalvageAuctionStaticData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSalvageAuctionStaticData.RequestData>(proxy, proxy.LoadSalvageAuctionStaticData);
            return s;
        }
        ///<summary> Loads a scheduled payment cycle </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.RequestData> LoadScheduledPaymentCycle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycle.RequestData>(proxy, proxy.LoadScheduledPaymentCycle);
            return s;
        }
        ///<summary> Loads the list of scheduled payment cycles for a particular claimant </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.RequestData> LoadScheduledPaymentCycleList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleList.RequestData>(proxy, proxy.LoadScheduledPaymentCycleList);
            return s;
        }
        ///<summary> Loads all transactions associated with a particular scheduled payment </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.RequestData> LoadScheduledPaymentCycleTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadScheduledPaymentCycleTransactions.RequestData>(proxy, proxy.LoadScheduledPaymentCycleTransactions);
            return s;
        }
        ///<summary> Loads the split transactions. </summary>///<param name="request">The request contains ClaimControlId,ClaimantNum.</param>///<returns>Response message contains collection of ClaimFeatureNum,Description, and collection of ClaimDeductibleNum,DeductibleAmount,DeductibleAppliedAmount,DeductibleAvailableAmount,Description,ClaimFeatureNum </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="LoadSplitTransactions" title="Code Example for calling LoadSplitTransactions function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="LoadSplitTransactions" title="Code Example for calling LoadSplitTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.RequestData> LoadSplitTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSplitTransactions.RequestData>(proxy, proxy.LoadSplitTransactions);
            return s;
        }
        ///<summary> Loads the stop payment information. </summary>///<param name="request">The request containing ClaimStopPaymentId.</param>///<returns>StopPayment object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\StopPayment.vb" region="LoadStopPayment" title="Code Example for calling LoadStopPayment function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\StopPayment.vb" region="LoadStopPayment" title="Code Example for calling LoadStopPayment function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.RequestData> LoadStopPayment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStopPayment.RequestData>(proxy, proxy.LoadStopPayment);
            return s;
        }
        ///<summary> LoadStressClaimants </summary>///<param name="request">A request object containing the ClaimControlId</param>///<returns>A wrapper object containing an array of Claimant Nums as Integer</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStressClaimants" title="Code Example for calling LoadStressClaimants function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStressClaimants" title="Code Example for calling LoadStressClaimants function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.RequestData> LoadStressClaimants()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimants.RequestData>(proxy, proxy.LoadStressClaimants);
            return s;
        }
        ///<summary> LoadStressClaimControl </summary>///<param name="request">A request object containing the ClaimControlId</param>///<returns>A wrapper object containing the ClaimControlId, PolicyId, PolicyImageNum, Inside and Outside Adjuster Ids</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStressClaimControl" title="Code Example for calling LoadStressClaimControl function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadStressClaimControl" title="Code Example for calling LoadStressClaimControl function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.RequestData> LoadStressClaimControl()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.Request, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.Response, Diamond.Common.Services.Messages.ClaimsService.LoadStressClaimControl.RequestData>(proxy, proxy.LoadStressClaimControl);
            return s;
        }
        ///<summary> To Load Sub Coverage List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Response" /> to Load Sub Coverage List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadSubCoverageList" title="Code Example for calling LoadSubCoverageList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadSubCoverageList" title="Code Example for calling LoadSubCoverageList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.RequestData> LoadSubCoverageList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverageList.RequestData>(proxy, proxy.LoadSubCoverageList);
            return s;
        }
        ///<summary> To  Load Sub Coverages </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Response" /> to Load Sub Coverages </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserve.vb" region="LoadSubCoverages" title="Code Example for calling LoadSubCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserve.vb" region="LoadSubCoverages" title="Code Example for calling LoadSubCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.RequestData> LoadSubCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubCoverages.RequestData>(proxy, proxy.LoadSubCoverages);
            return s;
        }
        ///<summary> Loads Sub-Exposure list For Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Response" /> to Load Sub-Exposure list For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadSubExposureList" title="Code Example for calling LoadSubExposureList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Main.vb" region="LoadSubExposureList" title="Code Example for calling LoadSubExposureList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.RequestData> LoadSubExposureList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadSubExposureList.RequestData>(proxy, proxy.LoadSubExposureList);
            return s;
        }
        ///<summary> To  Load TabSettings </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Response" /> to Load Tab Settings </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\LossNotice\LossNotice\LossNotice.ascx.vb" region="LoadTabSettings" title="Code Example for calling LoadTabSettings function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\LossNotice\LossNotice\LossNotice.ascx.vb" region="LoadTabSettings" title="Code Example for calling LoadTabSettings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.RequestData> LoadTabSettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTabSettings.RequestData>(proxy, proxy.LoadTabSettings);
            return s;
        }
        ///<summary> Loads the transaction object. </summary>///<param name="request">The request containing the <c>ClaimControlId</c>, <c>ClaimantNum</c>, <c>ClaimFeatureNum</c>, and <c>TransactionNum</c> to load.</param>///<c>ClaimControlId</c>///<c>ClaimantNum</c>///<c>ClaimFeatureNum</c>///<c>TransactionNum</c>///<returns>Transaction Data</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="LoadTransaction" title="Code Example for calling LoadTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="LoadTransaction" title="Code Example for calling LoadTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.RequestData> LoadTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransaction.RequestData>(proxy, proxy.LoadTransaction);
            return s;
        }
        ///<summary> Returns the claim transaction list </summary>///<param name="request">Enter ClaimControlId, ClaimantNum, and ClaimFeatureNum</param>///<returns>Transaction Data to be displayed in the transaction list</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\TransactionList.vb" region="LoadTransactionList" title="Code Example for calling LoadTransactionList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\TransactionList.vb" region="LoadTransactionList" title="Code Example for calling LoadTransactionList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.RequestData> LoadTransactionList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionList.RequestData>(proxy, proxy.LoadTransactionList);
            return s;
        }
        ///<summary> Loads the transaction payee list. </summary>///<param name="request">The request contains NewTransaction,ClaimTransactionCategoryId,ClaimTransactionTypeId,CalledFromDelete,ClaimControlId,ClaimantNum,ClaimFeatureNum, collection of Payee.</param>///<returns>collection of ClaimPayeeId,ClaimPayeeNum,ClaimPayeeTypeId,UsedInPTTOO,TypeDescription,ClaimPayeeVer,PayeeNumVer,IsLatestVersion,DisplayName,SortName,TaxNum,Address,City,StateId,State,Zip,Status</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadTransactionPayeeList" title="Code Example for calling LoadTransactionPayeeList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadTransactionPayeeList" title="Code Example for calling LoadTransactionPayeeList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.RequestData> LoadTransactionPayeeList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionPayeeList.RequestData>(proxy, proxy.LoadTransactionPayeeList);
            return s;
        }
        ///<summary> Loads the transaction types for a particular claim transaction category. </summary>///<param name="request">The requestcontains ClaimControlId,ClaimTransactionCategoryId,NewTransaction indicator,Adjust indicator, .</param>///<returns>collection of Claim Transaction type</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadTransactionTypes" title="Code Example for calling LoadTransactionTypes function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Main.vb" region="LoadTransactionTypes" title="Code Example for calling LoadTransactionTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.RequestData> LoadTransactionTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.Request, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.Response, Diamond.Common.Services.Messages.ClaimsService.LoadTransactionTypes.RequestData>(proxy, proxy.LoadTransactionTypes);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.Request, Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.Response, Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.RequestData> LoadVehicleOperator()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.Request, Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.Response, Diamond.Common.Services.Messages.ClaimsService.LoadVehicleOperator.RequestData>(proxy, proxy.LoadVehicleOperator);
            return s;
        }
        ///<summary> Loads Claim Witness </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Response" /> to Load Claim Witness </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitness" title="Code Example for calling LoadWitness function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitness" title="Code Example for calling LoadWitness function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitness.RequestData> LoadWitness()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitness.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitness.RequestData>(proxy, proxy.LoadWitness);
            return s;
        }
        ///<summary> Loads Claim Witness </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Response" /> to Load Claim Witness for Loss Notice </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitnessForLossNotice" title="Code Example for calling LoadWitnessForLossNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitnessForLossNotice" title="Code Example for calling LoadWitnessForLossNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.RequestData> LoadWitnessForLossNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessForLossNotice.RequestData>(proxy, proxy.LoadWitnessForLossNotice);
            return s;
        }
        ///<summary> Load Witness List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Response" /> to Load witness list </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitnessList" title="Code Example for calling LoadWitnessList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessList.vb" region="LoadWitnessList" title="Code Example for calling LoadWitnessList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.RequestData> LoadWitnessList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessList.RequestData>(proxy, proxy.LoadWitnessList);
            return s;
        }
        ///<summary> Load Witness List For Loss Notice </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Response" /> to Load claim Witness List for Loss Notice </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\LossNotice\LossNotice\LossNotice.ascx.vb" region="LoadWitnessListForLossNotice" title="Code Example for calling LoadWitnessListForLossNotice function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\LossNotice\LossNotice\LossNotice.ascx.vb" region="LoadWitnessListForLossNotice" title="Code Example for calling LoadWitnessListForLossNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.RequestData> LoadWitnessListForLossNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.LoadWitnessListForLossNotice.RequestData>(proxy, proxy.LoadWitnessListForLossNotice);
            return s;
        }
        ///<summary> Queries an external policy system for policy information </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.RequestData> LookupDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.LookupDCPolicy.RequestData>(proxy, proxy.LookupDCPolicy);
            return s;
        }
        ///<summary> Opens the claimant record. </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Response" /> to open claim claimant record. </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="OpenClaimantRecord" title="Code Example for calling OpenClaimantRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="OpenClaimantRecord" title="Code Example for calling OpenClaimantRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.RequestData> OpenClaimantRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenClaimantRecord.RequestData>(proxy, proxy.OpenClaimantRecord);
            return s;
        }
        ///<summary> To Open Claim Record </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Response" /> to Open Claim Record </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="OpenClaimRecord" title="Code Example for calling OpenClaimRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="OpenClaimRecord" title="Code Example for calling OpenClaimRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.RequestData> OpenClaimRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenClaimRecord.RequestData>(proxy, proxy.OpenClaimRecord);
            return s;
        }
        ///<summary> open claim Feature record </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Response" /> to open claim Feature record </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="OpenFeatureRecord" title="Code Example for calling OpenFeatureRecord function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="OpenFeatureRecord" title="Code Example for calling OpenFeatureRecord function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.RequestData> OpenFeatureRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Request, Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.Response, Diamond.Common.Services.Messages.ClaimsService.OpenFeatureRecord.RequestData>(proxy, proxy.OpenFeatureRecord);
            return s;
        }
        ///<summary> Parses the PTTOO string </summary>///<param name="request">The request contains PTTOO string.</param>///<returns>parsed PTTOO string</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\ViewPayToTheOrderOf.vb" region="ParsePTTOOString" title="Code Example for calling ParsePTTOOString function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\ViewPayToTheOrderOf.vb" region="ParsePTTOOString" title="Code Example for calling ParsePTTOOString function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.Request, Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.Response, Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.RequestData> ParsePTTOOString()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.Request, Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.Response, Diamond.Common.Services.Messages.ClaimsService.ParsePTTOOString.RequestData>(proxy, proxy.ParsePTTOOString);
            return s;
        }
        ///<summary> To  Determines whether or not the specified user has permissions to access this Claim </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Response" /> to Determines whether or not the specified user has permissions to access this Claim </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="PersonnelAccessRestricted" title="Code Example for calling PersonnelAccessRestricted function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Core\Utility.vb" region="PersonnelAccessRestricted" title="Code Example for calling PersonnelAccessRestricted function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Request, Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Response, Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.RequestData> PersonnelAccessRestricted()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Request, Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.Response, Diamond.Common.Services.Messages.ClaimsService.PersonnelAccessRestricted.RequestData>(proxy, proxy.PersonnelAccessRestricted);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.RequestData> ProcessEOPSubro()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessEOPSubro.RequestData>(proxy, proxy.ProcessEOPSubro);
            return s;
        }
        ///<param name="request">The wrapper request containing the file name</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\ProcessISOClaimSearchErrorFile.vb" region="ProcessISOClaimSearchErrorFile" title="Code Example for calling ProcessISOClaimSearchErrorFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\ProcessISOClaimSearchErrorFile.vb" region="ProcessISOClaimSearchErrorFile" title="Code Example for calling ProcessISOClaimSearchErrorFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.RequestData> ProcessISOClaimSearchErrorFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessISOClaimSearchErrorFile.RequestData>(proxy, proxy.ProcessISOClaimSearchErrorFile);
            return s;
        }
        ///<param name="request">The wrapper request containing the file name</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareClaimFileResponse.vb" region="ProcessMedicareClaimFileResults" title="Code Example for calling ProcessMedicareClaimFileResults function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareClaimFileResponse.vb" region="ProcessMedicareClaimFileResults" title="Code Example for calling ProcessMedicareClaimFileResults function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.RequestData> ProcessMedicareClaimFileResults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareClaimFileResults.RequestData>(proxy, proxy.ProcessMedicareClaimFileResults);
            return s;
        }
        ///<summary> Returns boolean </summary>///<param name="request">The wrapper request containing the file name</param>///<returns> The wrapper response containing success </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareQueryResponse.vb" region="ProcessMedicareQueryResults" title="Code Example for calling ProcessMedicareQueryResults function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Medicare\MedicareQueryResponse.vb" region="ProcessMedicareQueryResults" title="Code Example for calling ProcessMedicareQueryResults function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.RequestData> ProcessMedicareQueryResults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessMedicareQueryResults.RequestData>(proxy, proxy.ProcessMedicareQueryResults);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.RequestData> ProcessSalvageAuctionNotification()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessSalvageAuctionNotification.RequestData>(proxy, proxy.ProcessSalvageAuctionNotification);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.RequestData> ProcessSubroNotes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.Request, Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.Response, Diamond.Common.Services.Messages.ClaimsService.ProcessSubroNotes.RequestData>(proxy, proxy.ProcessSubroNotes);
            return s;
        }
        ///<summary> To  Query Payee List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Response" /> to Query Payee List </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="QueryPayeeList" title="Code Example for calling QueryPayeeList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\PayeeList.vb" region="QueryPayeeList" title="Code Example for calling QueryPayeeList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.RequestData> QueryPayeeList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Request, Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.Response, Diamond.Common.Services.Messages.ClaimsService.QueryPayeeList.RequestData>(proxy, proxy.QueryPayeeList);
            return s;
        }
        ///<summary> To  Refresh Financials </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Response" /> to Refresh Financials </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="RefreshFinancials" title="Code Example for calling RefreshFinancials function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\FeatureList.vb" region="RefreshFinancials" title="Code Example for calling RefreshFinancials function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Request, Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Response, Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.RequestData> RefreshFinancials()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Request, Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.Response, Diamond.Common.Services.Messages.ClaimsService.RefreshFinancials.RequestData>(proxy, proxy.RefreshFinancials);
            return s;
        }
        ///<summary> Reinstates a voided transaction. </summary>///<param name="request">The request contains collection of SaveTransactionParameter, ClaimControlId,ClaimantNum,ClaimFeatureNum,TransactionNum.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ReinstateVoidTransaction" title="Code Example for calling ReinstateVoidTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ReinstateVoidTransaction" title="Code Example for calling ReinstateVoidTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.RequestData> ReinstateVoidTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ReinstateVoidTransaction.RequestData>(proxy, proxy.ReinstateVoidTransaction);
            return s;
        }
        ///<summary> Reinstates the transaction. </summary>///<param name="request">The request contains ClaimControlId,ClaimantNum,ClaimFeatureNum,TransactionNum,FirstLoad.</param>///<returns>Transaction Data</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ReissueTransaction" title="Code Example for calling ReissueTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="ReissueTransaction" title="Code Example for calling ReissueTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.RequestData> ReissueTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.ReissueTransaction.RequestData>(proxy, proxy.ReissueTransaction);
            return s;
        }
        ///<summary> Request a list of CCC appraisers </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.RequestData> RequestAppraiser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.RequestAppraiser.RequestData>(proxy, proxy.RequestAppraiser);
            return s;
        }
        ///<summary> Save Adjusted Coverages </summary>///<param name="request">The request has ClaimControlId, ClaimExposureId, ClaimSubExposureNum, ClaimLimitDataItems,LimitLinkDataItems.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="SaveAdjustedCoverages" title="Code Example for calling SaveAdjustedCoverages function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\Misc\CoverageLimit.vb" region="SaveAdjustedCoverages" title="Code Example for calling SaveAdjustedCoverages function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.RequestData> SaveAdjustedCoverages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAdjustedCoverages.RequestData>(proxy, proxy.SaveAdjustedCoverages);
            return s;
        }
        ///<summary> To Save Adjuster </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Response" /> To Save Adjuster </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\EditCarrierAdjusterForm.vb" region="SaveAdjuster" title="Code Example for calling SaveAdjuster function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\EditCarrierAdjusterForm.vb" region="SaveAdjuster" title="Code Example for calling SaveAdjuster function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.RequestData> SaveAdjuster()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAdjuster.RequestData>(proxy, proxy.SaveAdjuster);
            return s;
        }
        ///<summary> Save a Claim Appraiser  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Request" />///<returns> A <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Response" /> object containing the success/failure status of the save. </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="SaveAppraiser" title="Code Example for calling SaveAppraiser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AppraiserList.vb" region="SaveAppraiser" title="Code Example for calling SaveAppraiser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.RequestData> SaveAppraiser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.SaveAppraiser.RequestData>(proxy, proxy.SaveAppraiser);
            return s;
        }
        ///<summary> Saves the Build Pay to the Order of. </summary>///<param name="request">The request contains collection of PayeePTTOOItem.</param>///<returns>Diamond Validation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="SaveBuildPTTOO" title="Code Example for calling SaveBuildPTTOO function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="SaveBuildPTTOO" title="Code Example for calling SaveBuildPTTOO function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.RequestData> SaveBuildPTTOO()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.SaveBuildPTTOO.RequestData>(proxy, proxy.SaveBuildPTTOO);
            return s;
        }
        ///<summary> To  Save Care Provider </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Response" /> to Save ClaimCareProvider </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\EditCareProviderForm.vb" region="SaveCareProvider" title="Code Example for calling SaveCareProvider function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Care Provider\EditCareProviderForm.vb" region="SaveCareProvider" title="Code Example for calling SaveCareProvider function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.RequestData> SaveCareProvider()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCareProvider.RequestData>(proxy, proxy.SaveCareProvider);
            return s;
        }
        ///<summary> To  Save Carrier </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Response" /> to Save Carrier </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierSetup.vb" region="SaveCarrier" title="Code Example for calling SaveCarrier function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Carrier\CarrierSetup.vb" region="SaveCarrier" title="Code Example for calling SaveCarrier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.RequestData> SaveCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCarrier.RequestData>(proxy, proxy.SaveCarrier);
            return s;
        }
        ///<summary> To  Save Catastrophe </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Response" /> to Save Catastrophe </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheForm.vb" region="SaveCatastrophe" title="Code Example for calling SaveCatastrophe function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Catastrophe\CatastropheForm.vb" region="SaveCatastrophe" title="Code Example for calling SaveCatastrophe function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.RequestData> SaveCatastrophe()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Request, Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.Response, Diamond.Common.Services.Messages.ClaimsService.SaveCatastrophe.RequestData>(proxy, proxy.SaveCatastrophe);
            return s;
        }
        ///<summary> To Save Claimant </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Response" /> to SaveClaimant </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="SaveClaimant" title="Code Example for calling SaveClaimant function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="SaveClaimant" title="Code Example for calling SaveClaimant function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.RequestData> SaveClaimant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimant.RequestData>(proxy, proxy.SaveClaimant);
            return s;
        }
        ///<summary> To Save Claimant Vehicle Num </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Response" /> to Save Claimant VehicleNum </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="SaveClaimantVehicleNum" title="Code Example for calling SaveClaimantVehicleNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="SaveClaimantVehicleNum" title="Code Example for calling SaveClaimantVehicleNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.RequestData> SaveClaimantVehicleNum()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimantVehicleNum.RequestData>(proxy, proxy.SaveClaimantVehicleNum);
            return s;
        }
        ///<summary> Save a ACD appraisal request </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.RequestData> SaveClaimAppraisalACD()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalACD.RequestData>(proxy, proxy.SaveClaimAppraisalACD);
            return s;
        }
        ///<summary> Save a CCC appraisal request </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.RequestData> SaveClaimAppraisalCCC()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimAppraisalCCC.RequestData>(proxy, proxy.SaveClaimAppraisalCCC);
            return s;
        }
        ///<summary> Queries an external policy system for policy information </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.RequestData> SaveClaimContractor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimContractor.RequestData>(proxy, proxy.SaveClaimContractor);
            return s;
        }
        ///<summary> To  Save Claim Control Personnel </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Response" /> to Save ClaimControl Personnel </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="SaveClaimControlPersonnel" title="Code Example for calling SaveClaimControlPersonnel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\Personnel.vb" region="SaveClaimControlPersonnel" title="Code Example for calling SaveClaimControlPersonnel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.RequestData> SaveClaimControlPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPersonnel.RequestData>(proxy, proxy.SaveClaimControlPersonnel);
            return s;
        }
        ///<summary> To Save ClaimControl Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Response" /> to Save ClaimControl Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="SaveClaimControlProperties" title="Code Example for calling SaveClaimControlProperties function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\PropertyList.vb" region="SaveClaimControlProperties" title="Code Example for calling SaveClaimControlProperties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.RequestData> SaveClaimControlProperties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlProperties.RequestData>(proxy, proxy.SaveClaimControlProperties);
            return s;
        }
        ///<summary> To Save ClaimControl Property Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Response" /> to Save Claim Control Property Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="SaveClaimControlPropertyAppraisal" title="Code Example for calling SaveClaimControlPropertyAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="SaveClaimControlPropertyAppraisal" title="Code Example for calling SaveClaimControlPropertyAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.RequestData> SaveClaimControlPropertyAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlPropertyAppraisal.RequestData>(proxy, proxy.SaveClaimControlPropertyAppraisal);
            return s;
        }
        ///<summary> To  Save ClaimControl Screen Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Response" /> to Save ClaimControl Screen Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="SaveClaimControlScreenData" title="Code Example for calling SaveClaimControlScreenData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="SaveClaimControlScreenData" title="Code Example for calling SaveClaimControlScreenData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.RequestData> SaveClaimControlScreenData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlScreenData.RequestData>(proxy, proxy.SaveClaimControlScreenData);
            return s;
        }
        ///<summary> To  Save ClaimControl Vehicle Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Response" /> to Save ClaimControl Vehicle Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="SaveClaimControlVehicleAppraisal" title="Code Example for calling SaveClaimControlVehicleAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="SaveClaimControlVehicleAppraisal" title="Code Example for calling SaveClaimControlVehicleAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.RequestData> SaveClaimControlVehicleAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicleAppraisal.RequestData>(proxy, proxy.SaveClaimControlVehicleAppraisal);
            return s;
        }
        ///<summary> To  Save ClaimControl Vehicles </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Response" /> to Save ClaimControl Vehicles </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="SaveClaimControlVehicles" title="Code Example for calling SaveClaimControlVehicles function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\VehicleList.vb" region="SaveClaimControlVehicles" title="Code Example for calling SaveClaimControlVehicles function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.RequestData> SaveClaimControlVehicles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimControlVehicles.RequestData>(proxy, proxy.SaveClaimControlVehicles);
            return s;
        }
        ///<summary> Saves the claim exposure. </summary>///<param name="request">The wrapper request containing ClaimExposure.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveClaimExposure" title="Code Example for calling SaveClaimExposure function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AgencySetup\Select.vb" region="SaveClaimExposure" title="Code Example for calling SaveClaimExposure function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.RequestData> SaveClaimExposure()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimExposure.RequestData>(proxy, proxy.SaveClaimExposure);
            return s;
        }
        ///<summary> To Save Claim Attorney Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response" /> To Save Claim Attorney Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneyForm.vb" region="SaveClaimFirmAttorney" title="Code Example for calling SaveClaimFirmAttorney function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneyForm.vb" region="SaveClaimFirmAttorney" title="Code Example for calling SaveClaimFirmAttorney function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.RequestData> SaveClaimFirm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirm.RequestData>(proxy, proxy.SaveClaimFirm);
            return s;
        }
        ///<summary> To Save Claim Attorney Data </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response" /> To Save Claim Attorney Data </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneyForm.vb" region="SaveClaimFirmAttorney" title="Code Example for calling SaveClaimFirmAttorney function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\FirmAttorneyForm.vb" region="SaveClaimFirmAttorney" title="Code Example for calling SaveClaimFirmAttorney function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.RequestData> SaveClaimFirmAttorney()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimFirmAttorney.RequestData>(proxy, proxy.SaveClaimFirmAttorney);
            return s;
        }
        ///<summary> Save the claim loss types by version </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.RequestData> SaveClaimLossTypesVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimLossTypesVersion.RequestData>(proxy, proxy.SaveClaimLossTypesVersion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.RequestData> SaveClaimNegotiation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNegotiation.RequestData>(proxy, proxy.SaveClaimNegotiation);
            return s;
        }
        ///<summary> Saves the claim number fields used for generating the sequence of claim number </summary>///<param name="request">The wrapper request containing ClaimNumberFieldData.</param>///<returns>The wrapper response containing Result</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="SaveClaimNumberFields" title="Code Example for calling SaveClaimNumberFields function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="SaveClaimNumberFields" title="Code Example for calling SaveClaimNumberFields function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.RequestData> SaveClaimNumberFields()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimNumberFields.RequestData>(proxy, proxy.SaveClaimNumberFields);
            return s;
        }
        ///<summary> To  Save Claim Office </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Response" /> to save claim office </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimOfficeForm.vb" region="SaveClaimOffice" title="Code Example for calling SaveClaimOffice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimOfficeForm.vb" region="SaveClaimOffice" title="Code Example for calling SaveClaimOffice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.RequestData> SaveClaimOffice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimOffice.RequestData>(proxy, proxy.SaveClaimOffice);
            return s;
        }
        ///<summary> Saves the claim payee change reason. </summary>///<param name="request">The wrapper request containing ClaimPayeeChangeReason.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="SaveClaimPayeeChangeReason" title="Code Example for calling SaveClaimPayeeChangeReason function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeChangeReasonSetup.vb" region="SaveClaimPayeeChangeReason" title="Code Example for calling SaveClaimPayeeChangeReason function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.RequestData> SaveClaimPayeeChangeReason()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeeChangeReason.RequestData>(proxy, proxy.SaveClaimPayeeChangeReason);
            return s;
        }
        ///<summary> Saves the claim payee phrase. </summary>///<param name="request">The wrapper request containing ClaimPayeePhrase.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="SaveClaimPayeePhrase" title="Code Example for calling SaveClaimPayeePhrase function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeePhraseSetup.vb" region="SaveClaimPayeePhrase" title="Code Example for calling SaveClaimPayeePhrase function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.RequestData> SaveClaimPayeePhrase()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPayeePhrase.RequestData>(proxy, proxy.SaveClaimPayeePhrase);
            return s;
        }
        ///<summary> Saves the claim personnel. </summary>///<param name="request">The wrapper request containing ClaimPersonnel.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnelForm.vb" region="SaveClaimPersonnel" title="Code Example for calling SaveClaimPersonnel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnelForm.vb" region="SaveClaimPersonnel" title="Code Example for calling SaveClaimPersonnel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.RequestData> SaveClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPersonnel.RequestData>(proxy, proxy.SaveClaimPersonnel);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.RequestData> SaveClaimPIPNegotiation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimPIPNegotiation.RequestData>(proxy, proxy.SaveClaimPIPNegotiation);
            return s;
        }
        ///<summary> Save the claim tracking types by version </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.RequestData> SaveClaimTrackingTypesVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.Request, Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.Response, Diamond.Common.Services.Messages.ClaimsService.SaveClaimTrackingTypesVersion.RequestData>(proxy, proxy.SaveClaimTrackingTypesVersion);
            return s;
        }
        ///<summary> To Save Dashboard Templates </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Response" /> to Save Dashboard Templates </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="SaveDashboardTemplate" title="Code Example for calling SaveDashboardTemplate function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Dashboard\Admin.ascx.vb" region="SaveDashboardTemplate" title="Code Example for calling SaveDashboardTemplate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.RequestData> SaveDashboardTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDashboardTemplate.RequestData>(proxy, proxy.SaveDashboardTemplate);
            return s;
        }
        ///<summary> Saves an external policy data into the database </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.RequestData> SaveDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDCPolicy.RequestData>(proxy, proxy.SaveDCPolicy);
            return s;
        }
        ///<summary> To  Save Dept Claim Fire </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Response" /> to Save Dept ClaimFire </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditFireForm.vb" region="SaveDeptClaimFire" title="Code Example for calling SaveDeptClaimFire function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditFireForm.vb" region="SaveDeptClaimFire" title="Code Example for calling SaveDeptClaimFire function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.RequestData> SaveDeptClaimFire()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimFire.RequestData>(proxy, proxy.SaveDeptClaimFire);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditPoliceDepartmentForm.vb" region="SaveDeptClaimPolice" title="Code Example for calling SaveDeptClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditPoliceDepartmentForm.vb" region="SaveDeptClaimPolice" title="Code Example for calling SaveDeptClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.RequestData> SaveDeptClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveDeptClaimPolice.RequestData>(proxy, proxy.SaveDeptClaimPolice);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.Request, Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.Response, Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.RequestData> SaveExplanationOfBenefits()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.Request, Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.Response, Diamond.Common.Services.Messages.ClaimsService.SaveExplanationOfBenefits.RequestData>(proxy, proxy.SaveExplanationOfBenefits);
            return s;
        }
        ///<summary> To Save the Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Response" /> to save the Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveFeature" title="Code Example for calling SaveFeature function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveFeature" title="Code Example for calling SaveFeature function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Request, Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Response, Diamond.Common.Services.Messages.ClaimsService.SaveFeature.RequestData> SaveFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Request, Diamond.Common.Services.Messages.ClaimsService.SaveFeature.Response, Diamond.Common.Services.Messages.ClaimsService.SaveFeature.RequestData>(proxy, proxy.SaveFeature);
            return s;
        }
        ///<summary> Saves the default. </summary>///<param name="request">The wrapper request containing SaveDefault, SaveClaimFtrDefault.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="SaveFeatureDefault" title="Code Example for calling SaveDefault function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Defaults\FeatureDefaultSetup.vb" region="SaveFeatureDefault" title="Code Example for calling SaveDefault function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.RequestData> SaveFeatureDefault()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.Request, Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.Response, Diamond.Common.Services.Messages.ClaimsService.SaveFeatureDefault.RequestData>(proxy, proxy.SaveFeatureDefault);
            return s;
        }
        ///<summary> To Save Initial Reserve </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Response" /> To Save Initial Reserve </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveForm.vb" region="SaveInitialReserve" title="Code Example for calling SaveInitialReserve function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\InitialReserveForm.vb" region="SaveInitialReserve" title="Code Example for calling SaveInitialReserve function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.RequestData> SaveInitialReserve()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialReserve.RequestData>(proxy, proxy.SaveInitialReserve);
            return s;
        }
        ///<summary> saves initial transaction for Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Response" /> to save initial transaction For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveInitialTransactions" title="Code Example for calling SaveInitialTransactions function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveInitialTransactions" title="Code Example for calling SaveInitialTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.RequestData> SaveInitialTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactions.RequestData>(proxy, proxy.SaveInitialTransactions);
            return s;
        }
        ///<summary> saves all initial transaction for Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Response" /> to save initial transaction For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveInitialTransactionsAll" title="Code Example for calling SaveInitialTransactionsAll function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveInitialTransactionsAll" title="Code Example for calling SaveInitialTransactionsAll function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.RequestData> SaveInitialTransactionsAll()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Request, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.Response, Diamond.Common.Services.Messages.ClaimsService.SaveInitialTransactionsAll.RequestData>(proxy, proxy.SaveInitialTransactionsAll);
            return s;
        }
        ///<summary> To  Save Levy </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Response" /> to Save Levy </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="SaveLevy" title="Code Example for calling SaveLevy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="SaveLevy" title="Code Example for calling SaveLevy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Request, Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Response, Diamond.Common.Services.Messages.ClaimsService.SaveLevy.RequestData> SaveLevy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Request, Diamond.Common.Services.Messages.ClaimsService.SaveLevy.Response, Diamond.Common.Services.Messages.ClaimsService.SaveLevy.RequestData>(proxy, proxy.SaveLevy);
            return s;
        }
        ///<summary> To  Save Litigation </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Response" /> to Save Litigation </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationForm.vb" region="SaveLitigation" title="Code Example for calling SaveLitigation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Litigation\LitigationForm.vb" region="SaveLitigation" title="Code Example for calling SaveLitigation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.RequestData> SaveLitigation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Request, Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.Response, Diamond.Common.Services.Messages.ClaimsService.SaveLitigation.RequestData>(proxy, proxy.SaveLitigation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.RequestData> SaveMedicalBillDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalBillDetail.RequestData>(proxy, proxy.SaveMedicalBillDetail);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.RequestData> SaveMedicalFacility()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalFacility.RequestData>(proxy, proxy.SaveMedicalFacility);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.RequestData> SaveMedicalProvider()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProvider.RequestData>(proxy, proxy.SaveMedicalProvider);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.RequestData> SaveMedicalProviderMedicalFacilityLink()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalProviderMedicalFacilityLink.RequestData>(proxy, proxy.SaveMedicalProviderMedicalFacilityLink);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.RequestData> SaveMedicalTreatment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicalTreatment.RequestData>(proxy, proxy.SaveMedicalTreatment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.RequestData> SaveMedicareResponsibleReportingEntityCodeConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.Request, Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.Response, Diamond.Common.Services.Messages.ClaimsService.SaveMedicareResponsibleReportingEntityCodeConfig.RequestData>(proxy, proxy.SaveMedicareResponsibleReportingEntityCodeConfig);
            return s;
        }
        ///<summary> To Save Notify Underwriting Detail </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Response" /> to Save Notify Underwriting Detail </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwriting.vb" region="SaveNotifyUnderwritingDetail" title="Code Example for calling SaveNotifyUnderwritingDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\NotifyUnderwriting\NotifyUnderwriting.vb" region="SaveNotifyUnderwritingDetail" title="Code Example for calling SaveNotifyUnderwritingDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Request, Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Response, Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.RequestData> SaveNotifyUnderwritingDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Request, Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.Response, Diamond.Common.Services.Messages.ClaimsService.SaveNotifyUnderwritingDetail.RequestData>(proxy, proxy.SaveNotifyUnderwritingDetail);
            return s;
        }
        ///<summary> To  Load LossNotice Properties </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Response" /> to Load LossNotice Properties </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditPoliceOfficerForm.vb" region="SaveOfficerClaimPolice" title="Code Example for calling SaveOfficerClaimPolice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\PoliceFire\EditPoliceOfficerForm.vb" region="SaveOfficerClaimPolice" title="Code Example for calling SaveOfficerClaimPolice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.RequestData> SaveOfficerClaimPolice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Request, Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.Response, Diamond.Common.Services.Messages.ClaimsService.SaveOfficerClaimPolice.RequestData>(proxy, proxy.SaveOfficerClaimPolice);
            return s;
        }
        ///<summary> To  Save Payee </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SavePayee.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SavePayee.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SavePayee.Response" /> to Save Payee </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SavePayee.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="SavePayee" title="Code Example for calling SavePayee function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Payee\Payee.vb" region="SavePayee" title="Code Example for calling SavePayee function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SavePayee.Request, Diamond.Common.Services.Messages.ClaimsService.SavePayee.Response, Diamond.Common.Services.Messages.ClaimsService.SavePayee.RequestData> SavePayee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SavePayee.Request, Diamond.Common.Services.Messages.ClaimsService.SavePayee.Response, Diamond.Common.Services.Messages.ClaimsService.SavePayee.RequestData>(proxy, proxy.SavePayee);
            return s;
        }
        ///<summary> Saves a personnel assignment </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.RequestData> SavePersonnelAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.Request, Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.Response, Diamond.Common.Services.Messages.ClaimsService.SavePersonnelAssignment.RequestData>(proxy, proxy.SavePersonnelAssignment);
            return s;
        }
        ///<summary> To  Save Recent Claim For User </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Response" /> to Save Recent Claim For User </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="SaveRecentClaimForUser" title="Code Example for calling SaveRecentClaimForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="SaveRecentClaimForUser" title="Code Example for calling SaveRecentClaimForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Request, Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Response, Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.RequestData> SaveRecentClaimForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Request, Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.Response, Diamond.Common.Services.Messages.ClaimsService.SaveRecentClaimForUser.RequestData>(proxy, proxy.SaveRecentClaimForUser);
            return s;
        }
        ///<summary> To Save  Repair Shop  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Response" /> To Save  Repair Shop  </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShopList.vb" region="SaveRepairShop" title="Code Example for calling SaveRepairShop function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Maintenance\Repair Shop\RepairShopList.vb" region="SaveRepairShop" title="Code Example for calling SaveRepairShop function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Request, Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Response, Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.RequestData> SaveRepairShop()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Request, Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.Response, Diamond.Common.Services.Messages.ClaimsService.SaveRepairShop.RequestData>(proxy, proxy.SaveRepairShop);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.RequestData> SaveSalvageAuction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSalvageAuction.RequestData>(proxy, proxy.SaveSalvageAuction);
            return s;
        }
        ///<summary> Saves a scheduled payment cycle </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.RequestData> SaveScheduledPaymentCycle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.Request, Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.Response, Diamond.Common.Services.Messages.ClaimsService.SaveScheduledPaymentCycle.RequestData>(proxy, proxy.SaveScheduledPaymentCycle);
            return s;
        }
        ///<summary> saves secondary transactions for Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Response" /> to save secondary transactions For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveSecondaryTransactions" title="Code Example for calling SaveSecondaryTransactions function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveSecondaryTransactions" title="Code Example for calling SaveSecondaryTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.RequestData> SaveSecondaryTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactions.RequestData>(proxy, proxy.SaveSecondaryTransactions);
            return s;
        }
        ///<summary> saves all secondary transactions for Claim Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Response" /> to save secondary transactions For Claim Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveSecondaryTransactionsAll" title="Code Example for calling SaveSecondaryTransactionsAll function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Feature\Feature.vb" region="SaveSecondaryTransactionsAll" title="Code Example for calling SaveSecondaryTransactionsAll function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.RequestData> SaveSecondaryTransactionsAll()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSecondaryTransactionsAll.RequestData>(proxy, proxy.SaveSecondaryTransactionsAll);
            return s;
        }
        ///<summary> Saves the split transactions. </summary>///<param name="request">The request contains SplitTransactionScreenData,First SaveAttempt.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="SaveSplitTransactions" title="Code Example for calling SaveSplitTransactions function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="SaveSplitTransactions" title="Code Example for calling SaveSplitTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.RequestData> SaveSplitTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.Request, Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.Response, Diamond.Common.Services.Messages.ClaimsService.SaveSplitTransactions.RequestData>(proxy, proxy.SaveSplitTransactions);
            return s;
        }
        ///<summary> Saves the stop payment data when a request to stop payment on a claim is made. </summary>///<param name="request">The request.</param>///<returns>  <c>True</c> if the stop payment request was successful; <c>false</c> otherwise. </returns>///<c>True</c>///<c>false</c>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\StopPayment.vb" region="SaveStopPaymentData" title="Code Example for calling SaveStopPaymentData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\StopPayment.vb" region="SaveStopPaymentData" title="Code Example for calling SaveStopPaymentData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.Request, Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.Response, Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.RequestData> SaveStopPaymentData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.Request, Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.Response, Diamond.Common.Services.Messages.ClaimsService.SaveStopPaymentData.RequestData>(proxy, proxy.SaveStopPaymentData);
            return s;
        }
        ///<summary> Saves the transaction. </summary>///<param name="request">The request contains ClaimTransactionData,Note, NewFeature indicator,First SaveAttempt, SaveMode.</param>///<returns>success indicator, collection of transaction, collection of payee, Note</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="SaveTransaction" title="Code Example for calling SaveTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="SaveTransaction" title="Code Example for calling SaveTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.RequestData> SaveTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.SaveTransaction.RequestData>(proxy, proxy.SaveTransaction);
            return s;
        }
        ///<summary> Save Witness </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Response" /> to save Witness </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessForm.vb" region="SaveWitness" title="Code Example for calling SaveWitness function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessForm.vb" region="SaveWitness" title="Code Example for calling SaveWitness function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Request, Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Response, Diamond.Common.Services.Messages.ClaimsService.SaveWitness.RequestData> SaveWitness()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Request, Diamond.Common.Services.Messages.ClaimsService.SaveWitness.Response, Diamond.Common.Services.Messages.ClaimsService.SaveWitness.RequestData>(proxy, proxy.SaveWitness);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SearchClaims.Request, Diamond.Common.Services.Messages.ClaimsService.SearchClaims.Response, Diamond.Common.Services.Messages.ClaimsService.SearchClaims.RequestData> SearchClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SearchClaims.Request, Diamond.Common.Services.Messages.ClaimsService.SearchClaims.Response, Diamond.Common.Services.Messages.ClaimsService.SearchClaims.RequestData>(proxy, proxy.SearchClaims);
            return s;
        }
        ///<summary> Select a CCC appraiser </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.RequestData> SelectAppraiser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.Request, Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.Response, Diamond.Common.Services.Messages.ClaimsService.SelectAppraiser.RequestData>(proxy, proxy.SelectAppraiser);
            return s;
        }
        ///<summary> Sends a task object to an external service. </summary>///<returns>Success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SendDCTask.Request, Diamond.Common.Services.Messages.ClaimsService.SendDCTask.Response, Diamond.Common.Services.Messages.ClaimsService.SendDCTask.RequestData> SendDCTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SendDCTask.Request, Diamond.Common.Services.Messages.ClaimsService.SendDCTask.Response, Diamond.Common.Services.Messages.ClaimsService.SendDCTask.RequestData>(proxy, proxy.SendDCTask);
            return s;
        }
        ///<summary> Sets the Out of Office status for a claim personnel </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.RequestData> SetOutOfOfficeForPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.Request, Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.Response, Diamond.Common.Services.Messages.ClaimsService.SetOutOfOfficeForPersonnel.RequestData>(proxy, proxy.SetOutOfOfficeForPersonnel);
            return s;
        }
        ///<summary> To  Submit Insured Submission Answers </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Response" /> to Submit Insured Submission </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Claims\Claim\ClaimsInsuredSubmission\ClaimsInsuredSubmission.ascx.vb" region="LoadInsuredSubmissionQuestions" title="Code Example for calling LoadInsuredSubmissionQuestions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Request, Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Response, Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.RequestData> SubmitInsuredSubmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Request, Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.Response, Diamond.Common.Services.Messages.ClaimsService.SubmitInsuredSubmission.RequestData>(proxy, proxy.SubmitInsuredSubmission);
            return s;
        }
        ///<summary> To  Submit LossNotice </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Response" /> to Submit LossNotice </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNotice.vb" region="SubmitLossNotice" title="Code Example for calling SubmitLossNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNotice.vb" region="SubmitLossNotice" title="Code Example for calling SubmitLossNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.RequestData> SubmitLossNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Request, Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.Response, Diamond.Common.Services.Messages.ClaimsService.SubmitLossNotice.RequestData>(proxy, proxy.SubmitLossNotice);
            return s;
        }
        ///<summary> To do post submission claim work </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Response" /> to Update Claim Submission </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNoticeMdiForm.vb" region="UpdateClaimSubmission" title="Code Example for calling UpdateClaimSubmission function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\LossNoticeMdiForm.vb" region="UpdateClaimSubmission" title="Code Example for calling UpdateClaimSubmission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.RequestData> UpdateClaimSubmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateClaimSubmission.RequestData>(proxy, proxy.UpdateClaimSubmission);
            return s;
        }
        ///<summary> Update Deductibles </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.RequestData> UpdateDeductibles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateDeductibles.RequestData>(proxy, proxy.UpdateDeductibles);
            return s;
        }
        ///<summary> To  Update Feature </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Response" /> to Update Feature </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateFeature" title="Code Example for calling UpdateFeature function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateFeature" title="Code Example for calling UpdateFeature function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.RequestData> UpdateFeature()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateFeature.RequestData>(proxy, proxy.UpdateFeature);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.RequestData> UpdateMedicalTreatmentSummary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateMedicalTreatmentSummary.RequestData>(proxy, proxy.UpdateMedicalTreatmentSummary);
            return s;
        }
        ///<summary> Updates the type of the payee sub. </summary>///<param name="request">A request object containing various payee sub type info.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeSubTypeForm.vb" region="UpdatePayeeSubType" title="Code Example for calling UpdatePayeeSubType function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\PayeeSubTypeForm.vb" region="UpdatePayeeSubType" title="Code Example for calling UpdatePayeeSubType function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.Request, Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.Response, Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.RequestData> UpdatePayeeSubType()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.Request, Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.Response, Diamond.Common.Services.Messages.ClaimsService.UpdatePayeeSubType.RequestData>(proxy, proxy.UpdatePayeeSubType);
            return s;
        }
        ///<summary> Updates a reissued transaction. </summary>///<param name="request">The request contains ClaimControlId,ClaimantNum, ClaimFeatureNum, TransactionNum,Reissued indicator.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateReissue" title="Code Example for calling UpdateReissue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateReissue" title="Code Example for calling UpdateReissue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.RequestData> UpdateReissue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateReissue.RequestData>(proxy, proxy.UpdateReissue);
            return s;
        }
        ///<summary> Updates the split transaction amount. </summary>///<param name="request">The request with SplitTransactionScreenData.</param>///<returns>UpdatedScreenData</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="UpdateSplitTransactionAmount" title="Code Example for calling UpdateSplitTransactionAmount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\SplitTransaction.vb" region="UpdateSplitTransactionAmount" title="Code Example for calling UpdateSplitTransactionAmount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.RequestData> UpdateSplitTransactionAmount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateSplitTransactionAmount.RequestData>(proxy, proxy.UpdateSplitTransactionAmount);
            return s;
        }
        ///<summary> Updates the stop payment status. </summary>///<param name="request">The request has ClaimControlId, ClaimantNumber, FeatureNumber, ClaimTransactionNum, ClaimStopPaymentId, ClaimStopPaymentStatusId,StopPaymentData, First SaveAttempt.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateStopPaymentStatus" title="Code Example for calling UpdateStopPaymentStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateStopPaymentStatus" title="Code Example for calling UpdateStopPaymentStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.RequestData> UpdateStopPaymentStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateStopPaymentStatus.RequestData>(proxy, proxy.UpdateStopPaymentStatus);
            return s;
        }
        ///<summary> Update code for claim transactions </summary>///<param name="request">The request contains ClaimTransactionData,Note,NewFeature, First SaveAttempt, TransactionSaveMode.</param>///<returns>Success indicator, collection of transaction, collection of payee</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateTransaction" title="Code Example for calling UpdateTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="UpdateTransaction" title="Code Example for calling UpdateTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.RequestData> UpdateTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateTransaction.RequestData>(proxy, proxy.UpdateTransaction);
            return s;
        }
        ///<summary> Updates workflow types to flag those to delete with claim closure. </summary>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.RequestData> UpdateWorkflowTypeForClaimClosure()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.Request, Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.Response, Diamond.Common.Services.Messages.ClaimsService.UpdateWorkflowTypeForClaimClosure.RequestData>(proxy, proxy.UpdateWorkflowTypeForClaimClosure);
            return s;
        }
        ///<summary> To Validate 3rd Party </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Response" /> to Validate 3rd Party </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\LossNotice\ThirdPartyForm.vb" region="Validate3rdParty" title="Code Example for calling Validate3rdParty function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\LossNotice\ThirdPartyForm.vb" region="Validate3rdParty" title="Code Example for calling Validate3rdParty function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Request, Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Response, Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.RequestData> Validate3rdParty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Request, Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.Response, Diamond.Common.Services.Messages.ClaimsService.Validate3rdParty.RequestData>(proxy, proxy.Validate3rdParty);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.RequestData> ValidateAndAssignDefaultSubroAdjuster()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateAndAssignDefaultSubroAdjuster.RequestData>(proxy, proxy.ValidateAndAssignDefaultSubroAdjuster);
            return s;
        }
        ///<summary> Validates the Build Pay to the Order of. </summary>///<param name="request">The request contains collection of TransactionPayee,Buffer string.</param>///<returns>Diamond Validation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="ValidateBuildPTTOO" title="Code Example for calling ValidateBuildPTTOO function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\BuildPayToTheOrderOf.vb" region="ValidateBuildPTTOO" title="Code Example for calling ValidateBuildPTTOO function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.RequestData> ValidateBuildPTTOO()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateBuildPTTOO.RequestData>(proxy, proxy.ValidateBuildPTTOO);
            return s;
        }
        ///<summary> To  Validate Claimant </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Response" /> to Validate Claimant </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="ValidateClaimant" title="Code Example for calling ValidateClaimant function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\Claimant.vb" region="ValidateClaimant" title="Code Example for calling ValidateClaimant function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.RequestData> ValidateClaimant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimant.RequestData>(proxy, proxy.ValidateClaimant);
            return s;
        }
        ///<summary> Validate Claim Closure </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.RequestData> ValidateClaimClosure()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimClosure.RequestData>(proxy, proxy.ValidateClaimClosure);
            return s;
        }
        ///<summary> To  Validate Claim Control Property </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Response" /> to Validate Claim Control Property </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\Property.vb" region="ValidateLossNoticeProperty" title="Code Example for calling ValidateClaimControlPropertyProperty function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\Property.vb" region="ValidateLossNoticeProperty" title="Code Example for calling ValidateClaimControlPropertyProperty function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.RequestData> ValidateClaimControlProperty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlProperty.RequestData>(proxy, proxy.ValidateClaimControlProperty);
            return s;
        }
        ///<summary> To  Validate ClaimControl Vehicle </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Response" /> to Validate ClaimControl Vehicle </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="ValidateClaimControlVehicle" title="Code Example for calling ValidateClaimControlVehicle function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="ValidateClaimControlVehicle" title="Code Example for calling ValidateClaimControlVehicle function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.RequestData> ValidateClaimControlVehicle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimControlVehicle.RequestData>(proxy, proxy.ValidateClaimControlVehicle);
            return s;
        }
        ///<summary> Validates the claim number </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.RequestData> ValidateClaimNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateClaimNumber.RequestData>(proxy, proxy.ValidateClaimNumber);
            return s;
        }
        ///<summary> Validates the constant before saving the claim number generation info. </summary>///<param name="request">The wrapper request containing ClaimNumberField.</param>///<returns>The wrapper response containing Result</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateConstant" title="Code Example for calling ValidateConstant function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateConstant" title="Code Example for calling ValidateConstant function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.RequestData> ValidateConstant()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateConstant.RequestData>(proxy, proxy.ValidateConstant);
            return s;
        }
        ///<summary> To  Validate LossNotice Property </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Response" /> to Validate LossNotice Property </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Property\Property.vb" region="ValidateLossNoticeProperty" title="Code Example for calling ValidateLossNoticeProperty function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Property\Property.vb" region="ValidateLossNoticeProperty" title="Code Example for calling ValidateLossNoticeProperty function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.RequestData> ValidateLossNoticeProperty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeProperty.RequestData>(proxy, proxy.ValidateLossNoticeProperty);
            return s;
        }
        ///<summary> To Validate LossNotice Property Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Response" /> to Validate LossNotice Property Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="ValidateLossNoticePropertyAppraisal" title="Code Example for calling ValidateLossNoticePropertyAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\PropertyAppraisalForm.vb" region="ValidateLossNoticePropertyAppraisal" title="Code Example for calling ValidateLossNoticePropertyAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.RequestData> ValidateLossNoticePropertyAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticePropertyAppraisal.RequestData>(proxy, proxy.ValidateLossNoticePropertyAppraisal);
            return s;
        }
        ///<summary> To  Validate LossNotice Vehicle </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Response" /> to Validate LossNotice Vehicle </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="ValidateLossNoticeVehicle" title="Code Example for calling ValidateLossNoticeVehicle function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Vehicle\Vehicle.vb" region="ValidateLossNoticeVehicle" title="Code Example for calling ValidateLossNoticeVehicle function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.RequestData> ValidateLossNoticeVehicle()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicle.RequestData>(proxy, proxy.ValidateLossNoticeVehicle);
            return s;
        }
        ///<summary> To Validate LossNotice Vehicle Appraisal </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Response" /> to Validate LossNotice Vehicle Appraisal </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="ValidateLossNoticeVehicleAppraisal" title="Code Example for calling ValidateLossNoticeVehicleAppraisal function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Appraisal\AutoAppraisalForm.vb" region="ValidateLossNoticeVehicleAppraisal" title="Code Example for calling ValidateLossNoticeVehicleAppraisal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.RequestData> ValidateLossNoticeVehicleAppraisal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateLossNoticeVehicleAppraisal.RequestData>(proxy, proxy.ValidateLossNoticeVehicleAppraisal);
            return s;
        }
        ///<summary> To  Validate New Claim Occurrence </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Response" /> to Validate New Claim Occurrence </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="ValidateNewClaimOccurrence" title="Code Example for calling ValidateNewClaimOccurrence function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="ValidateNewClaimOccurrence" title="Code Example for calling ValidateNewClaimOccurrence function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.RequestData> ValidateNewClaimOccurrence()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateNewClaimOccurrence.RequestData>(proxy, proxy.ValidateNewClaimOccurrence);
            return s;
        }
        ///<summary> Validates the partial claim number </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.RequestData> ValidatePartialClaimNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.Request, Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.Response, Diamond.Common.Services.Messages.ClaimsService.ValidatePartialClaimNumber.RequestData>(proxy, proxy.ValidatePartialClaimNumber);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.RequestData> ValidateSalvageAuction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSalvageAuction.RequestData>(proxy, proxy.ValidateSalvageAuction);
            return s;
        }
        ///<summary> Validates the sequence before saving the claim number generation info </summary>///<param name="request">The wrapper request containing ClaimNumberField.</param>///<returns>The wrapper response containing Result</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateSequence" title="Code Example for calling ValidateSequence function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateSequence" title="Code Example for calling ValidateSequence function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.RequestData> ValidateSequence()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSequence.RequestData>(proxy, proxy.ValidateSequence);
            return s;
        }
        ///<summary> Validates the sort order before saving the claim number generation info </summary>///<param name="request">The wrapper request containing SortOrder.</param>///<returns>The wrapper response containing boolean indicating whether the claimnumbers can be sorted based on the given sort order </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateSortOrder" title="Code Example for calling ValidateSortOrder function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Configure\ClaimNumber.vb" region="ValidateSortOrder" title="Code Example for calling ValidateSortOrder function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.RequestData> ValidateSortOrder()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateSortOrder.RequestData>(proxy, proxy.ValidateSortOrder);
            return s;
        }
        ///<summary> Validate Witness For LossNotice </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Response" /> to Validate the Witness </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessForm.vb" region="ValidateWitnessForLossNotice" title="Code Example for calling ValidateWitnessForLossNotice function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Witness\WitnessForm.vb" region="ValidateWitnessForLossNotice" title="Code Example for calling ValidateWitnessForLossNotice function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.RequestData> ValidateWitnessForLossNotice()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Request, Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.Response, Diamond.Common.Services.Messages.ClaimsService.ValidateWitness.RequestData>(proxy, proxy.ValidateWitnessForLossNotice);
            return s;
        }
        ///<summary> Verify Policy </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.RequestData> VerifyPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.Request, Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.Response, Diamond.Common.Services.Messages.ClaimsService.VerifyPolicy.RequestData>(proxy, proxy.VerifyPolicy);
            return s;
        }
        ///<summary> Voids the list of transactions specified. </summary>///<param name="request">The request contains ClaimControlId, ClaimantNum, ClaimFeatureNum, TransactionNum, ClaimTransactionVoidReasonId, CheckPossession flag,First SaveAttempt, BulkVoid flag, collection of transactions.</param>///<returns>ClaimTransactionNum, collection of Transaction</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="VoidTransaction" title="Code Example for calling VoidTransaction function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\Transaction.vb" region="VoidTransaction" title="Code Example for calling VoidTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.RequestData> VoidTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.Request, Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.Response, Diamond.Common.Services.Messages.ClaimsService.VoidTransaction.RequestData>(proxy, proxy.VoidTransaction);
            return s;
        }
        ///<summary> to zero the reserves </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Response" /> to zero the reserves </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="ZeroClaimantReserves" title="Code Example for calling ZeroClaimantReserves function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claimant\ClaimantList.vb" region="ZeroClaimantReserves" title="Code Example for calling ZeroClaimantReserves function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.RequestData> ZeroClaimantReserves()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimantReserves.RequestData>(proxy, proxy.ZeroClaimantReserves);
            return s;
        }
        ///<summary> To Zero Claim Reserves </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Response" /> to Zero Claim Reserves </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="ZeroClaimReserves" title="Code Example for calling ZeroClaimReserves function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Detail\ClaimControl\ClaimControl.vb" region="ZeroClaimReserves" title="Code Example for calling ZeroClaimReserves function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.RequestData> ZeroClaimReserves()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroClaimReserves.RequestData>(proxy, proxy.ZeroClaimReserves);
            return s;
        }
        ///<summary> to zero-in the reserves </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Response" /> to zero-in the reserves </returns>///<see cref="T:Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Financials\CloseFinancials.vb" region="ZeroFeatureReserves" title="Code Example for calling ZeroFeatureReserves function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Financials\CloseFinancials.vb" region="ZeroFeatureReserves" title="Code Example for calling ZeroFeatureReserves function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.RequestData> ZeroFeatureReserves()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ClaimsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Request, Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.Response, Diamond.Common.Services.Messages.ClaimsService.ZeroFeatureReserves.RequestData>(proxy, proxy.ZeroFeatureReserves);
            return s;
        }
    }
    ///<summary> Proxy class for CLM Classification Services </summary>
    public static class CLMClassService
    {
        ///<summary> Searches the CLM classification for a specified description or class code </summary>///<param name="request">A wrapper request object containing the search text, search type and CLM line of business for the lookup .</param>///<returns>A wrapper response object containing a collection of CLMClassDetail objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\ClassificationCode\ClassificationCodeLookupForm.vb" region="DoSearch" title="Code Example for calling DoSearch function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\ClassificationCode\ClassificationCodeLookupForm.vb" region="DoSearch" title="Code Example for calling DoSearch function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.CLMClassData.DoSearch.Request, Diamond.Common.Services.Messages.CLMClassData.DoSearch.Response, Diamond.Common.Services.Messages.CLMClassData.DoSearch.RequestData> DoSearch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CLMClassServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CLMClassData.DoSearch.Request, Diamond.Common.Services.Messages.CLMClassData.DoSearch.Response, Diamond.Common.Services.Messages.CLMClassData.DoSearch.RequestData>(proxy, proxy.DoSearch);
            return s;
        }
    }

    public static class ComposerExternalUpdateService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.RequestData> CheckForNewSystem()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.RequestData>(proxy, proxy.CheckForNewSystem);
            return s;
        }
        ///<summary> Checks to see if there are available Composer updates for Diamond. </summary>///<param name="request">The wrapper request object containing all the fields needed to check for a Diamond update</param>///<returns> The wrapper response object containing the collection of available updates if there are any </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.RequestData> CheckForUpdates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.RequestData>(proxy, proxy.CheckForUpdates);
            return s;
        }
        ///<summary> Imports data from Diamond into Composer </summary>///<param name="request">The request contains the data being imported into Composer</param>///<returns> A wrapper returns if the import was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.RequestData> LoadDeployment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.RequestData>(proxy, proxy.LoadDeployment);
            return s;
        }
        ///<summary> Reports successful deployments back to composer </summary>///<param name="request">The request contains the data about the machine that had the deployment</param>///<returns> A wrapper returns if the log was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.RequestData> LogDeployment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.RequestData>(proxy, proxy.LogDeployment);
            return s;
        }
        ///<summary> Imports data from Diamond into Composer </summary>///<param name="request">The request contains the data being imported into Composer</param>///<returns> A wrapper returns if the import was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Request, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Response, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.RequestData> SyncDiamondToComposer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Request, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Response, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.RequestData>(proxy, proxy.SyncDiamondToComposer);
            return s;
        }
    }

    public static class ConfigurableComposerExternalUpdateService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.RequestData> CheckForNewSystem()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableProxy.ConfigurableComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForNewSystem.RequestData>(proxy, proxy.CheckForNewSystem);
            return s;
        }
        ///<summary> Checks to see if there are available Composer updates for Diamond. </summary>///<param name="request">The wrapper request object containing all the fields needed to check for a Diamond update</param>///<returns> The wrapper response object containing the collection of available updates if there are any </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.RequestData> CheckForUpdates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableProxy.ConfigurableComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Request, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.Response, Diamond.Common.Services.Messages.ComposerUpdateService.CheckForUpdates.RequestData>(proxy, proxy.CheckForUpdates);
            return s;
        }
        ///<summary> Imports data from Diamond into Composer </summary>///<param name="request">The request contains the data being imported into Composer</param>///<returns> A wrapper returns if the import was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.RequestData> LoadDeployment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableProxy.ConfigurableComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LoadDeployment.RequestData>(proxy, proxy.LoadDeployment);
            return s;
        }
        ///<summary> Reports successful deployments back to composer </summary>///<param name="request">The request contains the data about the machine that had the deployment</param>///<returns> A wrapper returns if the log was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.RequestData> LogDeployment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableProxy.ConfigurableComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Request, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.Response, Diamond.Common.Services.Messages.ComposerUpdateService.LogDeployment.RequestData>(proxy, proxy.LogDeployment);
            return s;
        }
        ///<summary> Imports data from Diamond into Composer </summary>///<param name="request">The request contains the data being imported into Composer</param>///<returns> A wrapper returns if the import was successful. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Request, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Response, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.RequestData> SyncDiamondToComposer()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableProxy.ConfigurableComposerExternalUpdateServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Request, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.Response, Diamond.Common.Services.Messages.ComposerUpdateService.SyncDiamondToComposer.RequestData>(proxy, proxy.SyncDiamondToComposer);
            return s;
        }
    }

    public static class ContactManagementService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Import.Request, Diamond.Common.Services.Messages.ContactManagementService.Import.Response, Diamond.Common.Services.Messages.ContactManagementService.Import.RequestData> Import()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Import.Request, Diamond.Common.Services.Messages.ContactManagementService.Import.Response, Diamond.Common.Services.Messages.ContactManagementService.Import.RequestData>(proxy, proxy.Import);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Load.Request, Diamond.Common.Services.Messages.ContactManagementService.Load.Response, Diamond.Common.Services.Messages.ContactManagementService.Load.RequestData> Load()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Load.Request, Diamond.Common.Services.Messages.ContactManagementService.Load.Response, Diamond.Common.Services.Messages.ContactManagementService.Load.RequestData>(proxy, proxy.Load);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.Request, Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.Response, Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.RequestData> PurgeContacts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.Request, Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.Response, Diamond.Common.Services.Messages.ContactManagementService.PurgeContacts.RequestData>(proxy, proxy.PurgeContacts);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Save.Request, Diamond.Common.Services.Messages.ContactManagementService.Save.Response, Diamond.Common.Services.Messages.ContactManagementService.Save.RequestData> Save()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.Save.Request, Diamond.Common.Services.Messages.ContactManagementService.Save.Response, Diamond.Common.Services.Messages.ContactManagementService.Save.RequestData>(proxy, proxy.Save);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.RequestData> SearchByAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByAddress.RequestData>(proxy, proxy.SearchByAddress);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByName.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByName.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByName.RequestData> SearchByName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByName.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByName.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByName.RequestData>(proxy, proxy.SearchByName);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.RequestData> SearchByPreferredCustomerNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ContactManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.Request, Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.Response, Diamond.Common.Services.Messages.ContactManagementService.SearchByPreferredCustomerNumber.RequestData>(proxy, proxy.SearchByPreferredCustomerNumber);
            return s;
        }
    }
    ///<summary> Proxy class for Billing Integration Service for performing billing related operations. </summary>
    public static class BillingIntegrationService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.RequestData> GetPolicyCancellationInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingIntegrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.GetPolicyCancellationInformation.RequestData>(proxy, proxy.GetPolicyCancellationInformation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.RequestData> PopulateBillingInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingIntegrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.PopulateBillingInformation.RequestData>(proxy, proxy.PopulateBillingInformation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.RequestData> PopulatePolicyInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.BillingIntegrationServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.Request, Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.Response, Diamond.Common.Services.Messages.BillingIntegrationService.PopulatePolicyInformation.RequestData>(proxy, proxy.PopulatePolicyInformation);
            return s;
        }
    }

    public static class CurrentCarrierService
    {
        ///<summary> Creates Current Carrier Record. </summary>///<param name="request">The current Carrier struct.</param>///<returns>Returns success indicator</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.Request, Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.Response, Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.RequestData> CreateCurrentCarrier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.CurrentCarrierServiceProxy.CurrentCarrierServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.Request, Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.Response, Diamond.Common.Services.Messages.CurrentCarrierService.CreateCurrentCarrier.RequestData>(proxy, proxy.CreateCurrentCarrier);
            return s;
        }
    }
    ///<summary> Proxy class for Document service. </summary>
    public static class DocumentService
    {
        ///<summary> Get document category item list </summary>///<param name="request">The request object containing no input parameters</param>///<returns>A wrapper object containing collection of DocumentCategoryItem</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentCategoryItemList" title="Code Example for calling GetDocumentCategoryItemList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentCategoryItemList" title="Code Example for calling GetDocumentCategoryItemList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.RequestData> GetDocumentCategoryItemList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemList.RequestData>(proxy, proxy.GetDocumentCategoryItemList);
            return s;
        }
        ///<summary> Get document category item list by parent ID </summary>///<param name="request">The request object containing ParentCategoryId</param>///<returns>A wrapper object containing collection of DocumentCategoryItem object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentCategoryItemListByParentID" title="Code Example for calling GetDocumentCategoryItemListByParentID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentCategoryItemListByParentID" title="Code Example for calling GetDocumentCategoryItemListByParentID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.RequestData> GetDocumentCategoryItemListByParentID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentCategoryItemListByParentID.RequestData>(proxy, proxy.GetDocumentCategoryItemListByParentID);
            return s;
        }
        ///<summary> Get document item by ID </summary>///<param name="request">The request object containing DocumentId</param>///<returns>A wrapper object containing DocumentItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentItemByID" title="Code Example for calling GetDocumentItemByID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentItemByID" title="Code Example for calling GetDocumentItemByID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.RequestData> GetDocumentItemByID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemByID.RequestData>(proxy, proxy.GetDocumentItemByID);
            return s;
        }
        ///<summary> Get document item list by category ID </summary>///<param name="request">The request object containing CategoryID.</param>///<returns>A wrapper object containing collection of DocumentItemList</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentItemListByCategoryID" title="Code Example for calling GetDocumentItemListByCategoryID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDocumentItemListByCategoryID" title="Code Example for calling GetDocumentItemListByCategoryID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.RequestData> GetDocumentItemListByCategoryID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.Request, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.Response, Diamond.Common.Services.Messages.DocumentService.GetDocumentItemListByCategoryID.RequestData>(proxy, proxy.GetDocumentItemListByCategoryID);
            return s;
        }
        ///<summary> Loads a collection of DocumentCategory objects </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing a collection of DocumentCategory objects</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.LoadList.Request, Diamond.Common.Services.Messages.DocumentService.LoadList.Response, Diamond.Common.Services.Messages.DocumentService.LoadList.RequestData> LoadList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.LoadList.Request, Diamond.Common.Services.Messages.DocumentService.LoadList.Response, Diamond.Common.Services.Messages.DocumentService.LoadList.RequestData>(proxy, proxy.LoadList);
            return s;
        }
        ///<summary> Updates the specified category based on the specified action type. </summary>///<param name="request">The wrapper request containing the action type and category.</param>///<returns>The wrapper response containing a flag that indicates if the action was successfully completed.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.UpdateCategory.Request, Diamond.Common.Services.Messages.DocumentService.UpdateCategory.Response, Diamond.Common.Services.Messages.DocumentService.UpdateCategory.RequestData> UpdateCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.UpdateCategory.Request, Diamond.Common.Services.Messages.DocumentService.UpdateCategory.Response, Diamond.Common.Services.Messages.DocumentService.UpdateCategory.RequestData>(proxy, proxy.UpdateCategory);
            return s;
        }
        ///<summary> Updates the specified document based on the specified action type. </summary>///<param name="request">The wrapper request containing the action type and document.</param>///<returns>The wrapper response containing a flag that indicates if the action was successfully completed.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.DocumentService.UpdateDocument.Request, Diamond.Common.Services.Messages.DocumentService.UpdateDocument.Response, Diamond.Common.Services.Messages.DocumentService.UpdateDocument.RequestData> UpdateDocument()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DocumentServices.DocumentServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DocumentService.UpdateDocument.Request, Diamond.Common.Services.Messages.DocumentService.UpdateDocument.Response, Diamond.Common.Services.Messages.DocumentService.UpdateDocument.RequestData>(proxy, proxy.UpdateDocument);
            return s;
        }
    }
    ///<summary> Interface for the Experience Modification Import service. </summary>///<remarks>This service provides functionality to import records from an NCCI Experience Modification file into the Diamond System.</remarks>
    public static class ExperienceModificationImportService
    {
        ///<summary> Imports the provided NCCI Experience Modification data file into the Diamond System. </summary>///<param name="request">The request object containing file to be imported.</param>///<returns>A wrapper object containing fields indicating # of records successfully imported and # of records not imported</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\ExperienceModifications\NCCI\ImportControl.vb" region="ImportRecords" title="Code Example for calling ImportRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\ExperienceModifications\NCCI\ImportControl.vb" region="ImportRecords" title="Code Example for calling ImportRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.Request, Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.Response, Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.RequestData> ImportRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ExperienceModificationImportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.Request, Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.Response, Diamond.Common.Services.Messages.ExperienceModificationImportService.ImportRecords.RequestData>(proxy, proxy.ImportRecords);
            return s;
        }
        ///<summary> Loads a list of all the NCCI Experience Modification data records that exist in the system with the specified import status. </summary>///<param name="request">The request object containing status of records to be loaded.</param>///<returns>A wrapper object containing collection of RecordListItem</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\ExperienceModifications\NCCI\ApplyModificationFactorsControl.vb" region="LoadRecordList" title="Code Example for calling LoadRecordList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\ExperienceModifications\NCCI\ApplyModificationFactorsControl.vb" region="LoadRecordList" title="Code Example for calling LoadRecordList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.Request, Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.Response, Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.RequestData> LoadRecordList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ExperienceModificationImportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.Request, Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.Response, Diamond.Common.Services.Messages.ExperienceModificationImportService.LoadRecordList.RequestData>(proxy, proxy.LoadRecordList);
            return s;
        }
    }

    public static class GlobalAdditionalInterestListManagementService
    {
        ///<summary> Determines if the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" /> entry can be deleted from the system. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" />///<param name="request">A wrapper request object containing the unique identifier for the entry to be deleted.</param>///<returns>A wrapper response object containing a flag that indicates if the entry was can be deleted from the system.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="CanDelete" title="Code Example for calling CanDelete function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="CanDelete" title="Code Example for calling CanDelete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.RequestData> CanDelete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanDelete.RequestData>(proxy, proxy.CanDelete);
            return s;
        }
        ///<summary> Determines if the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" /> entry can be modified. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" />///<param name="request">A wrapper request object containing the unique identifier for the entry to be modified.</param>///<returns>A wrapper response object containing a flag that indicates if the entry was can be modified.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="CanEdit" title="Code Example for calling CanEdit function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\AdditionalInterest\AdditionalInterestListAddEditForm.vb" region="CanEdit" title="Code Example for calling CanEdit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.RequestData> CanEdit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.CanEdit.RequestData>(proxy, proxy.CanEdit);
            return s;
        }
        ///<summary> Deletes the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" /> entry from the system. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" />///<param name="request">A wrapper request object containing the unique identifier for the entry to be deleted.</param>///<returns>A wrapper response object containing a flag that indicates if the entry was successfully deleted from the system.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="DeleteGlobalListEntry" title="Code Example for calling Delete function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="DeleteGlobalListEntry" title="Code Example for calling Delete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.RequestData> Delete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Delete.RequestData>(proxy, proxy.Delete);
            return s;
        }
        ///<summary> Loads the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" /> entry. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" />///<param name="request">A wrapper request object containing the unique identifier for the entry to be loaded.</param>///<returns>A wrapper response object containing the entry that matches the specified identifier.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="LoadAI" title="Code Example for calling Load function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMainList.vb" region="LoadAI" title="Code Example for calling Load function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.RequestData> Load()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Load.RequestData>(proxy, proxy.Load);
            return s;
        }
        ///<summary> Loads a collection of <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" /> history entries that match the specified criteria. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" />///<param name="request">A wrapper request object containing the optional agency identifier.</param>///<returns>A wrapper response object containing the collection of history entries that match the specified critiera.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadAIHistory" title="Code Example for calling LoadHistoryEntries function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadAIHistory" title="Code Example for calling LoadHistoryEntries function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.RequestData> LoadHistoryEntries()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntries.RequestData>(proxy, proxy.LoadHistoryEntries);
            return s;
        }
        ///<summary> Loads a collection of <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" /> history entries that matches the specified identifier. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" />///<param name="request">A wrapper request object containing the unique identifier for the entries to load.</param>///<returns>A wrapper response object containing the collection of history entries that match the specified identifier.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadHistoryEntriesForListId" title="Code Example for calling LoadHistoryEntriesForListId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestHistory.vb" region="LoadHistoryEntriesForListId" title="Code Example for calling LoadHistoryEntriesForListId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.RequestData> LoadHistoryEntriesForListId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.LoadHistoryEntriesForListId.RequestData>(proxy, proxy.LoadHistoryEntriesForListId);
            return s;
        }
        ///<summary> Loads a collection of <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" /> entries that match the specified criteria. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" />///<param name="request">A wrapper request object containing the agency identifier, group type, name, city, state, zip and business phone number.</param>///<returns>A wrapper response object containing the collection of entries that match the specified criteria.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LookupLoad" title="Code Example for calling Lookup function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AdditionalInterestMain.vb" region="LookupLoad" title="Code Example for calling Lookup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.RequestData> Lookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Lookup.RequestData>(proxy, proxy.Lookup);
            return s;
        }
        ///<summary> Saves the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" /> entry. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestList" />///<param name="request">A wrapper request object containing the entry to be saved.</param>///<returns>A wrapper response object containing a flag that indicates if the entry was successfully saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AddAdditionalInterestForm.vb" region="Save" title="Code Example for calling Save function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AddAdditionalInterestForm.vb" region="Save" title="Code Example for calling Save function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.RequestData> Save()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.Save.RequestData>(proxy, proxy.Save);
            return s;
        }
        ///<summary> Saves the specified <see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" /> entry. </summary>///<see cref="T:Diamond.Common.Objects.Policy.AdditionalInterestListHistory" />///<param name="request">A wrapper request object containing the entry to be saved.</param>///<returns>A wrapper response object containing a flag that indicates if the entry was successfully saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AddAdditionalInterestForm.vb" region="SaveHistory" title="Code Example for calling SaveHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Additional Interest\AddAdditionalInterestForm.vb" region="SaveHistory" title="Code Example for calling SaveHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.RequestData> SaveHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.GlobalAdditionalInterestListManagementServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.Request, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.Response, Diamond.Common.Services.Messages.GlobalAdditionalInterestListManagementService.SaveHistory.RequestData>(proxy, proxy.SaveHistory);
            return s;
        }
    }
    ///<summary> Proxy class for Login Service performing User Authentication </summary>
    public static class LoginService
    {
        ///<summary> Authenticates the encrypted security token.  If the authentication succeeds, an security token is returned. </summary>///<param name="request">Contains the encrypted security token used for the authentication request.</param>///<returns>The authenticated security token.</returns>///<remarks> If the authentication request fails, details regarding the failure can be found in the <c>DiamondValidation</c> collection.  Additionally, the <c>SecurityToken</c> property will be <c>Nothing</c>. </remarks>///<c>DiamondValidation</c>///<c>SecurityToken</c>///<c>Nothing</c>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.Request, Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.Response, Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.RequestData> AuthenticateWithEncryptedToken()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.Request, Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.Response, Diamond.Common.Services.Messages.LoginService.AuthenticateWithEncryptedToken.RequestData>(proxy, proxy.AuthenticateWithEncryptedToken);
            return s;
        }
        ///<summary> Gets a DiamondSecurityToken object based on login name and domain </summary>///<param name="request">The wrapper request object containing user login name and domain info.</param>///<returns> The wrapper response object containing the returned security token </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDiamTokenForDomainUsername" title="Code Example for calling GetDiamTokenForDomainUsername function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetDiamTokenForDomainUsername" title="Code Example for calling GetDiamTokenForDomainUsername function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.RequestData> GetDiamTokenForDomainUsername()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForDomainUsername.RequestData>(proxy, proxy.GetDiamTokenForDomainUsername);
            return s;
        }
        ///<summary> Gets a DiamondSecurityToken object based on a third party authentication token </summary>///<param name="request">The wrapper request object containing a third party authentication token.</param>///<returns> The wrapper response object containing the returned security token </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.RequestData> GetDiamTokenForThirdPartyToken()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForThirdPartyToken.RequestData>(proxy, proxy.GetDiamTokenForThirdPartyToken);
            return s;
        }
        ///<summary> Gets a DiamondSecurityToken object based on login name and password </summary>///<param name="request">The wrapper request object containing user login name and password.</param>///<returns> The wrapper response object containing the returned security token </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.RequestData> GetDiamTokenForUsernamePassword()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.RequestData>(proxy, proxy.GetDiamTokenForUsernamePassword);
            return s;
        }
        ///<summary> Gets a DiamondSecurityToken object based on usersid </summary>///<param name="request">The wrapper request object containing user login name and password info.</param>///<returns>The wrapper response object containing the returned security token</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.RequestData> GetDiamTokenForUsersId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Request, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Response, Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.RequestData>(proxy, proxy.GetDiamTokenForUsersId);
            return s;
        }
        ///<summary> Authenticates the provided <c>username</c> and <c>password</c>.  If the authentication succeeds, an encrypted security token is returned. </summary>///<c>username</c>///<c>password</c>///<param name="request">Contains the <c>LoginName</c> and <c>Password</c> for the authentication request.</param>///<c>LoginName</c>///<c>Password</c>///<returns>The encrypted security token returned from the authentication request.</returns>///<remarks> If the authentication request fails, details regarding the failure can be found in the <c>DiamondValidation</c> collection.  Additionally, the <c>SecurityToken</c> property will be <c>Nothing</c> or <c>String.Empty</c>. </remarks>///<c>DiamondValidation</c>///<c>SecurityToken</c>///<c>Nothing</c>///<c>String.Empty</c>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.Request, Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.Response, Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.RequestData> GetEncryptedUsernameToken()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.Request, Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.Response, Diamond.Common.Services.Messages.LoginService.GetEncryptedUsernameToken.RequestData>(proxy, proxy.GetEncryptedUsernameToken);
            return s;
        }
        ///<summary> Log in a guest user </summary>///<param name="request">An empty wrapper request object.</param>///<returns>The wrapper response object containing the returned guest user login name</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.LoginService.LoginGuestUser.Request, Diamond.Common.Services.Messages.LoginService.LoginGuestUser.Response, Diamond.Common.Services.Messages.LoginService.LoginGuestUser.RequestData> LoginGuestUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LoginServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LoginService.LoginGuestUser.Request, Diamond.Common.Services.Messages.LoginService.LoginGuestUser.Response, Diamond.Common.Services.Messages.LoginService.LoginGuestUser.RequestData>(proxy, proxy.LoginGuestUser);
            return s;
        }
    }
    ///<summary> Proxy class for Third Party Service </summary>
    public static class LossHistoryService
    {
        ///<summary> Function updates loss histories from claims </summary>///<param name="request">The wrapper request containing image and new policy image num.</param>///<returns>Diamond Validation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateLossHistoriesOnRenewal" title="Code Example for calling UpdateLossHistoriesOnRenewal function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateLossHistoriesOnRenewal" title="Code Example for calling UpdateLossHistoriesOnRenewal function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.Request, Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.Response, Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.RequestData> UpdateLossHistoriesOnRenewal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LossHistoryServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.Request, Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.Response, Diamond.Common.Services.Messages.LossHistoryService.UpdateLossHistoriesOnRenewal.RequestData>(proxy, proxy.UpdateLossHistoriesOnRenewal);
            return s;
        }
    }
    ///<summary> Proxy class for Merchandise service. </summary>
    public static class MerchandiseService
    {
        ///<summary> Get merchandise category featured list </summary>///<param name="request">The request object containing no input parameter</param>///<returns>A wrapper object containing collection of MerchandiseCategoryItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryFeaturedList" title="Code Example for calling GetMerchandiseCategoryFeaturedList function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryFeaturedList" title="Code Example for calling GetMerchandiseCategoryFeaturedList function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.RequestData> GetMerchandiseCategoryFeaturedList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryFeaturedList.RequestData>(proxy, proxy.GetMerchandiseCategoryFeaturedList);
            return s;
        }
        ///<summary> Get merchandise category item by id </summary>///<param name="request">The request object containing MerchandiseCategoryId </param>///<returns>A wrapper object containing MerchandiseCategoryItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryItemById" title="Code Example for calling GetMerchandiseCategoryItemById function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryItemById" title="Code Example for calling GetMerchandiseCategoryItemById function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.RequestData> GetMerchandiseCategoryItemById()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemById.RequestData>(proxy, proxy.GetMerchandiseCategoryItemById);
            return s;
        }
        ///<summary> Get merchandise category item list </summary>///<param name="request">The request object containing no input parameters</param>///<returns>A wrapper object containing collection of MerchandiseCategoryItem object</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryItemList" title="Code Example for calling GetMerchandiseCategoryItemList function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseCategoryItemList" title="Code Example for calling GetMerchandiseCategoryItemList function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.RequestData> GetMerchandiseCategoryItemList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseCategoryItemList.RequestData>(proxy, proxy.GetMerchandiseCategoryItemList);
            return s;
        }
        ///<summary> Get merchandise product color list by product id </summary>///<param name="request">The request object containing MerchandiseProductId</param>///<returns>A wrapper object containing collection of MerchandiseProductColorItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductColorListByProductId" title="Code Example for calling GetMerchandiseProductColorListByProductId function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductColorListByProductId" title="Code Example for calling GetMerchandiseProductColorListByProductId function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.RequestData> GetMerchandiseProductColorListByProductId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductColorListByProductId.RequestData>(proxy, proxy.GetMerchandiseProductColorListByProductId);
            return s;
        }
        ///<summary> Get merchandise product item list by category id </summary>///<param name="request">The request object containing MerchandiseCategoryId</param>///<returns>A wrapper object containing collection of MerchandiseProductItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductItemListByCategoryId" title="Code Example for calling GetMerchandiseProductItemListByCategoryId function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductItemListByCategoryId" title="Code Example for calling GetMerchandiseProductItemListByCategoryId function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.RequestData> GetMerchandiseProductItemListByCategoryId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductItemListByCategoryId.RequestData>(proxy, proxy.GetMerchandiseProductItemListByCategoryId);
            return s;
        }
        ///<summary> Get merchandise product size list by product id </summary>///<param name="request">The request object containing MerchandiseProductId</param>///<returns>A wrapper object containing collection of MerchandiseProductSizeItem</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductSizeListByProductId" title="Code Example for calling GetMerchandiseProductSizeListByProductId function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetMerchandiseProductSizeListByProductId" title="Code Example for calling GetMerchandiseProductSizeListByProductId function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.RequestData> GetMerchandiseProductSizeListByProductId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MerchandiseServices.MerchandiseServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.Request, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.Response, Diamond.Common.Services.Messages.MerchandiseService.GetMerchandiseProductSizeListByProductId.RequestData>(proxy, proxy.GetMerchandiseProductSizeListByProductId);
            return s;
        }
    }
    ///<summary> Proxy class for news article service. </summary>
    public static class NewsService
    {
        ///<summary> Get news item list </summary>///<param name="request">The request object containing AgencyId, ArticleType, EffectiveDate and ExpriationDate.</param>///<returns>A wrapper object containing collection of NewsItem</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNewsItemList" title="Code Example for calling GetNewsItemList function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNewsItemList" title="Code Example for calling GetNewsItemList function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NewsService.GetNewsItem.Request, Diamond.Common.Services.Messages.NewsService.GetNewsItem.Response, Diamond.Common.Services.Messages.NewsService.GetNewsItem.RequestData> GetNewsItem()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NewsServices.NewsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NewsService.GetNewsItem.Request, Diamond.Common.Services.Messages.NewsService.GetNewsItem.Response, Diamond.Common.Services.Messages.NewsService.GetNewsItem.RequestData>(proxy, proxy.GetNewsItem);
            return s;
        }
        ///<summary> Get news item list </summary>///<param name="request">The request object containing AgencyId, ArticleType, EffectiveDate and ExpriationDate.</param>///<returns>A wrapper object containing collection of NewsItem</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNewsItemList" title="Code Example for calling GetNewsItemList function."></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNewsItemList" title="Code Example for calling GetNewsItemList function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NewsService.GetNewsItemList.Request, Diamond.Common.Services.Messages.NewsService.GetNewsItemList.Response, Diamond.Common.Services.Messages.NewsService.GetNewsItemList.RequestData> GetNewsItemList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NewsServices.NewsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NewsService.GetNewsItemList.Request, Diamond.Common.Services.Messages.NewsService.GetNewsItemList.Response, Diamond.Common.Services.Messages.NewsService.GetNewsItemList.RequestData>(proxy, proxy.GetNewsItemList);
            return s;
        }
    }

    public static class ProductExtensionService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Request, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Response, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.RequestData> CompileOnBusinessTier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProductExtensionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Request, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Response, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.RequestData>(proxy, proxy.CompileOnBusinessTier);
            return s;
        }
        ///<summary> Loads a list of all assemblies </summary>///<remarks>No child objects are loaded</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.Request, Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.Response, Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.RequestData> LoadAssemblyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProductExtensionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.Request, Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.Response, Diamond.Common.Services.Messages.ProductExtensionService.LoadAssemblyList.RequestData>(proxy, proxy.LoadAssemblyList);
            return s;
        }
        ///<summary> Loads the full hierarchy for an assembly </summary>///<remarks>The entire hierarchy for an assembly is loaded.</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Request, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Response, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.RequestData> LoadFullAssembly()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProductExtensionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Request, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.Response, Diamond.Common.Services.Messages.ProductExtensionService.AssemblyNameMessage.RequestData>(proxy, proxy.LoadFullAssembly);
            return s;
        }
    }

    public static class ReplacementCostService
    {
        ///<summary> Create cost estimate for a given location </summary>///<param name="request">The request containing CreateCostEstimate object</param>///<returns>A wrapper object containing boolean indicating success/failure of update operation and the updated CreateCostEstimate object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateCostEstimate" title="Code Example for calling CreateCostEstimate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateCostEstimate" title="Code Example for calling CreateCostEstimate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.RequestData> CreateCostEstimate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReplacementCostServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.CreateCostEstimate.RequestData>(proxy, proxy.CreateCostEstimate);
            return s;
        }
        ///<summary> Imports and saves location cost estimate </summary>///<param name="request">The request object containing LocationCostEstimate object</param>///<returns>A wrapper object containing boolean indicating success/failure of import operation and the imported LocationCostEstimate object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Import" title="Code Example for calling Import function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Import" title="Code Example for calling Import function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.Import.Request, Diamond.Common.Services.Messages.ReplacementCostService.Import.Response, Diamond.Common.Services.Messages.ReplacementCostService.Import.RequestData> Import()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReplacementCostServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.Import.Request, Diamond.Common.Services.Messages.ReplacementCostService.Import.Response, Diamond.Common.Services.Messages.ReplacementCostService.Import.RequestData>(proxy, proxy.Import);
            return s;
        }
        ///<summary> Load location cost estimate for a given Location </summary>///<param name="request">The request object containing PolicyId, PolicyImageNum and LocatationNum</param>///<returns>A wrapper object containing LocationCostEstimate object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadLocationCostEstimate" title="Code Example for calling LoadLocationCostEstimate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadLocationCostEstimate" title="Code Example for calling LoadLocationCostEstimate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.RequestData> LoadLocationCostEstimate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReplacementCostServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.LoadLocationCostEstimate.RequestData>(proxy, proxy.LoadLocationCostEstimate);
            return s;
        }
        ///<summary> Save location cost estimate </summary>///<param name="request">The request object containing LocationCostEstimate object</param>///<returns>A wrapper object containing boolean indicating success/failure of save operation and the saved LocationCostEstimate object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLocationCostEstimate" title="Code Example for calling SaveLocationCostEstimate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveLocationCostEstimate" title="Code Example for calling SaveLocationCostEstimate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.RequestData> SaveLocationCostEstimate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReplacementCostServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.Request, Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.Response, Diamond.Common.Services.Messages.ReplacementCostService.SaveLocationCostEstimate.RequestData>(proxy, proxy.SaveLocationCostEstimate);
            return s;
        }
        ///<summary> Update LocationCostEstimate policy number with assigned policy number </summary>///<param name="request">The request containing LocationCostEstimate object</param>///<returns>A wrapper object containing boolean indicating success/failure of update operation and the updated LocationCostEstimate object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdatePolicyNumber" title="Code Example for calling UpdatePolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdatePolicyNumber" title="Code Example for calling UpdatePolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.Request, Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.Response, Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.RequestData> UpdatePolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReplacementCostServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.Request, Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.Response, Diamond.Common.Services.Messages.ReplacementCostService.UpdatePolicyNumber.RequestData>(proxy, proxy.UpdatePolicyNumber);
            return s;
        }
    }

    public static class RuleEngineService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.Request, Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.Response, Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.RequestData> ClearSystemData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.Request, Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.Response, Diamond.Common.Services.Messages.RuleEngineService.ClearSystemData.RequestData>(proxy, proxy.ClearSystemData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.Request, Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.Response, Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.RequestData> EvaluatePolicyRules()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.Request, Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.Response, Diamond.Common.Services.Messages.RuleEngineService.EvaluatePolicyRules.RequestData>(proxy, proxy.EvaluatePolicyRules);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.Request, Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.Response, Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.RequestData> GetSystemData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.Request, Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.Response, Diamond.Common.Services.Messages.RuleEngineService.GetSystemData.RequestData>(proxy, proxy.GetSystemData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.RequestData> LoadRuleVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersion.RequestData>(proxy, proxy.LoadRuleVersion);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.RequestData> LoadRuleVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadRuleVersions.RequestData>(proxy, proxy.LoadRuleVersions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.RequestData> LoadXamlRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRule.RequestData>(proxy, proxy.LoadXamlRule);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.RequestData> LoadXamlRules()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.Request, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.Response, Diamond.Common.Services.Messages.RuleEngineService.LoadXamlRules.RequestData>(proxy, proxy.LoadXamlRules);
            return s;
        }
        ///<summary> Updates the specified rule override entry. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.Request, Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.Response, Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.RequestData> RuleOverrideUpdate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.Request, Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.Response, Diamond.Common.Services.Messages.RuleEngineService.RuleOverrideUpdate.RequestData>(proxy, proxy.RuleOverrideUpdate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.Request, Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.Response, Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.RequestData> SaveRuleVersionStatusCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.Request, Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.Response, Diamond.Common.Services.Messages.RuleEngineService.SaveRuleVersionStatusCode.RequestData>(proxy, proxy.SaveRuleVersionStatusCode);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.Request, Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.Response, Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.RequestData> TestClaimRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.Request, Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.Response, Diamond.Common.Services.Messages.RuleEngineService.TestClaimRule.RequestData>(proxy, proxy.TestClaimRule);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.TestRule.Request, Diamond.Common.Services.Messages.RuleEngineService.TestRule.Response, Diamond.Common.Services.Messages.RuleEngineService.TestRule.RequestData> TestRule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RuleEngineServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RuleEngineService.TestRule.Request, Diamond.Common.Services.Messages.RuleEngineService.TestRule.Response, Diamond.Common.Services.Messages.RuleEngineService.TestRule.RequestData>(proxy, proxy.TestRule);
            return s;
        }
    }

    public static class ScheduleRunnerService
    {
        ///<summary> Deletes scheduled job </summary>///<param name="request">The request object containing the service job id.</param>///<returns>A wrapper object containing boolean indicating success/failure of the delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="DeleteJob" title="Code Example for calling DeleteJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="DeleteJob" title="Code Example for calling DeleteJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.RequestData> DeleteJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteJob.RequestData>(proxy, proxy.DeleteJob);
            return s;
        }
        ///<summary> Delete schedule </summary>///<param name="request">The request object containing the service schedule id.</param>///<returns>A wrapper object containing boolean indicating success/failure of the delete operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleList.vb" region="DeleteSchedule" title="Code Example for calling DeleteSchedule function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleList.vb" region="DeleteSchedule" title="Code Example for calling DeleteSchedule function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.RequestData> DeleteSchedule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.DeleteSchedule.RequestData>(proxy, proxy.DeleteSchedule);
            return s;
        }
        ///<summary> Load End Of Period job </summary>///<param name="request">The request object containing ServiceProcessJobId</param>///<returns>A wrapper object containing EOPJob object being loaded</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\EndOfPeriod\EndOfPeriodSetup.vb" region="LoadEopJob" title="Code Example for calling LoadEopJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\EndOfPeriod\EndOfPeriodSetup.vb" region="LoadEopJob" title="Code Example for calling LoadEopJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.RequestData> LoadEopJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadEopJob.RequestData>(proxy, proxy.LoadEopJob);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.RequestData> LoadErrorLogJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadErrorLogJob.RequestData>(proxy, proxy.LoadErrorLogJob);
            return s;
        }
        ///<summary> Load generic exe job </summary>///<param name="request">The request object containing ServiceProcessJobId</param>///<returns>A wrapper object containing GenericExeJob object being loaded</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerEditGenericExeJobForm.vb" region="LoadGenericExeJob" title="Code Example for calling LoadGenericExeJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerEditGenericExeJobForm.vb" region="LoadGenericExeJob" title="Code Example for calling LoadGenericExeJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.RequestData> LoadGenericExeJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadGenericExeJob.RequestData>(proxy, proxy.LoadGenericExeJob);
            return s;
        }
        ///<summary> Load job list </summary>///<param name="request">The request object containing nothing.</param>///<returns>A wrapper object containing collection of DataItem objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="LoadJobList" title="Code Example for calling LoadJobList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="LoadJobList" title="Code Example for calling LoadJobList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.RequestData> LoadJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJob.RequestData>(proxy, proxy.LoadJob);
            return s;
        }
        ///<summary> Load job list </summary>///<param name="request">The request object containing nothing.</param>///<returns>A wrapper object containing collection of DataItem objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="LoadJobList" title="Code Example for calling LoadJobList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerJobList.vb" region="LoadJobList" title="Code Example for calling LoadJobList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.RequestData> LoadJobList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadJobList.RequestData>(proxy, proxy.LoadJobList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.RequestData> LoadPolicyExtractJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadPolicyExtractJob.RequestData>(proxy, proxy.LoadPolicyExtractJob);
            return s;
        }
        ///<summary> Load renewal CSL as </summary>///<param name="request">The request.</param>///<returns>A wrapper object containing</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.RequestData> LoadRenewalCSLAs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalCSLAs.RequestData>(proxy, proxy.LoadRenewalCSLAs);
            return s;
        }
        ///<summary> Load renewal job </summary>///<param name="request">The request object containing ServiceProcessJobId</param>///<returns>A wrapper object containing returned RenewalJob object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\Renewals\RenewalSetup.vb" region="LoadRenewalJob" title="Code Example for calling LoadRenewalJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\Renewals\RenewalSetup.vb" region="LoadRenewalJob" title="Code Example for calling LoadRenewalJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.RequestData> LoadRenewalJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadRenewalJob.RequestData>(proxy, proxy.LoadRenewalJob);
            return s;
        }
        ///<summary> Load job schedule </summary>///<param name="request">The request containing ServiceProcessJobId</param>///<returns>A wrapper object containing collection of JobItem and ScheduleItem object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleEditForm.vb" region="LoadSchedule" title="Code Example for calling LoadSchedule function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleEditForm.vb" region="LoadSchedule" title="Code Example for calling LoadSchedule function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.RequestData> LoadSchedule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSchedule.RequestData>(proxy, proxy.LoadSchedule);
            return s;
        }
        ///<summary> Load schedule list </summary>///<param name="request">The request object containing nothing.</param>///<returns>A wrapper object containing collection of DataItem object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleList.vb" region="LoadScheduleList" title="Code Example for calling LoadScheduleList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleList.vb" region="LoadScheduleList" title="Code Example for calling LoadScheduleList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.RequestData> LoadScheduleList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadScheduleList.RequestData>(proxy, proxy.LoadScheduleList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.RequestData> LoadSQLServerAgentJobList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerAgentJobList.RequestData>(proxy, proxy.LoadSQLServerAgentJobList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.RequestData> LoadSQLServerJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.LoadSQLServerJob.RequestData>(proxy, proxy.LoadSQLServerJob);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.RequestData> ProcessSchedule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.ProcessSchedule.RequestData>(proxy, proxy.ProcessSchedule);
            return s;
        }
        ///<summary> Run scheduled jobs </summary>///<param name="request">The request object containing boolean indicating whether to run scheduled job or not</param>///<returns>A wrapper object containing boolean indicating whether the scheduled job ran successfully or not and process message</returns>///<example>  <code lang="vbnet" source="Diamond\WindowsServices\ScheduleRunner\ScheduleRunnerService.vb" region="RunScheduledJobs" title="Code Example for calling RunScheduledJobs function"></code></example>///<code lang="vbnet" source="Diamond\WindowsServices\ScheduleRunner\ScheduleRunnerService.vb" region="RunScheduledJobs" title="Code Example for calling RunScheduledJobs function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.RequestData> RunScheduledJobs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.RunScheduledJobs.RequestData>(proxy, proxy.RunScheduledJobs);
            return s;
        }
        ///<summary> Save eop job </summary>///<param name="request">The request object containing EOPJob to be saved</param>///<returns>A wrapper object containing boolean indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\EndOfPeriod\EndOfPeriodSetup.vb" region="SaveEopJob" title="Code Example for calling SaveEopJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\EndOfPeriod\EndOfPeriodSetup.vb" region="SaveEopJob" title="Code Example for calling SaveEopJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.RequestData> SaveEopJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveEopJob.RequestData>(proxy, proxy.SaveEopJob);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.RequestData> SaveErrorLogJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveErrorLogJob.RequestData>(proxy, proxy.SaveErrorLogJob);
            return s;
        }
        ///<summary> Save Generic Exe Job </summary>///<param name="request">The request object containing GenericExeJob to be saved</param>///<returns>A wrapper object containing boolean indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerEditGenericExeJobForm.vb" region="SaveGenericExeJob" title="Code Example for calling SaveGenericExeJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\ServiceControllerEditGenericExeJobForm.vb" region="SaveGenericExeJob" title="Code Example for calling SaveGenericExeJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.RequestData> SaveGenericExeJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveGenericExeJob.RequestData>(proxy, proxy.SaveGenericExeJob);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.RequestData> SaveJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveJob.RequestData>(proxy, proxy.SaveJob);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.RequestData> SavePolicyExtractJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SavePolicyExtractJob.RequestData>(proxy, proxy.SavePolicyExtractJob);
            return s;
        }
        ///<summary> Save Renewal Job </summary>///<param name="request">The request object containing RenewalJob object to be saved</param>///<returns>A wrapper object containing boolean indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\Renewals\RenewalSetup.vb" region="SaveRenewalJob" title="Code Example for calling SaveRenewalJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\Renewals\RenewalSetup.vb" region="SaveRenewalJob" title="Code Example for calling SaveRenewalJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.RequestData> SaveRenewalJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveRenewalJob.RequestData>(proxy, proxy.SaveRenewalJob);
            return s;
        }
        ///<summary> Save Schedule </summary>///<param name="request">The request object containing Schedule object to be saved</param>///<returns>A wrapper object containing boolean indicating the success/failure of the save operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleEditForm.vb" region="SaveSchedule" title="Code Example for calling SaveSchedule function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSchedule\ServiceControllerScheduleEditForm.vb" region="SaveSchedule" title="Code Example for calling SaveSchedule function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.RequestData> SaveSchedule()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSchedule.RequestData>(proxy, proxy.SaveSchedule);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.RequestData> SaveSQLServerJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ScheduleRunnerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.Request, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.Response, Diamond.Common.Services.Messages.ScheduleRunnerService.SaveSQLServerJob.RequestData>(proxy, proxy.SaveSQLServerJob);
            return s;
        }
    }
    ///<summary> Proxy class for Supplies service. </summary>
    public static class SuppliesService
    {
        ///<summary> Get supplies item list </summary>///<param name="request">The request object containing no input parameter</param>///<returns>A wrapper object containing collection of SuppliesItem object</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSuppliesItemList" title="Code Example for calling GetSuppliesItemList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSuppliesItemList" title="Code Example for calling GetSuppliesItemList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.Request, Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.Response, Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.RequestData> GetSuppliesItemList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SuppliesServices.SuppliesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.Request, Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.Response, Diamond.Common.Services.Messages.SuppliesService.GetSuppliesItemList.RequestData>(proxy, proxy.GetSuppliesItemList);
            return s;
        }
    }
    ///<summary> Class containing Services for processing WebSite Operations </summary>
    public static class WebSiteService
    {
        ///<summary> Retrieve the users progress through the tab workflow for a specific policy. </summary>///<param name="request">The wrapper request object containing policy Info</param>///<returns> The wrapper response object containing the progression retrieved </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.Request, Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.Response, Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.RequestData> GetPolicyTabProgress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebSiteServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.Request, Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.Response, Diamond.Common.Services.Messages.WebSiteService.GetPolicyTabProgress.RequestData>(proxy, proxy.GetPolicyTabProgress);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.Request, Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.Response, Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.RequestData> SaveBrowserInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebSiteServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.Request, Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.Response, Diamond.Common.Services.Messages.WebSiteService.SaveBrowserInfo.RequestData>(proxy, proxy.SaveBrowserInfo);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.Request, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.Response, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.RequestData> SaveUserLogin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebSiteServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.Request, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.Response, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogin.RequestData>(proxy, proxy.SaveUserLogin);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.Request, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.Response, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.RequestData> SaveUserLogout()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebSiteServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.Request, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.Response, Diamond.Common.Services.Messages.WebSiteService.SaveUserLogout.RequestData>(proxy, proxy.SaveUserLogout);
            return s;
        }
        ///<summary> Update the users progress through the tab workflow for a specific policy. </summary>///<param name="request">The wrapper request object containing progression Info</param>///<returns> The wrapper response object containing the result of the save success </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.Request, Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.Response, Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.RequestData> UpdatePolicyTabProgress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebSiteServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.Request, Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.Response, Diamond.Common.Services.Messages.WebSiteService.UpdatePolicyTabProgress.RequestData>(proxy, proxy.UpdatePolicyTabProgress);
            return s;
        }
    }
    ///<summary> Proxy class for Claims Service such as Loading and Saving Claim related info </summary>
    public static class WebUsers
    {
        ///<summary> Retrieves user information based on an email address.  Used when the user forgets their password. </summary>///<param name="request">The request containing the email address.</param>///<returns> The <see cref="T:Diamond.Common.Objects.Web.WebUser" /> that matches the <c>EmailAddress</c> provided. </returns>///<see cref="T:Diamond.Common.Objects.Web.WebUser" />///<c>EmailAddress</c>
        public static ServiceCall<Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.Request, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.Response, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.RequestData> GetWebUserFromEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebUsersProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.Request, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.Response, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromEmail.RequestData>(proxy, proxy.GetWebUserFromEmail);
            return s;
        }
        ///<summary> Authenticates the user credentials for a particular website. </summary>///<param name="request">The request containing the <c>WebsiteId</c>, <c>Username</c> and <c>Password</c> to authenticate.</param>///<c>WebsiteId</c>///<c>Username</c>///<c>Password</c>///<returns> The <see cref="T:Diamond.Common.Objects.Web.WebUser" /> that matches the criteria provided; or <c>Nothing</c> is a match is not found. </returns>///<see cref="T:Diamond.Common.Objects.Web.WebUser" />///<c>Nothing</c>
        public static ServiceCall<Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.Request, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.Response, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.RequestData> GetWebUserFromLogin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebUsersProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.Request, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.Response, Diamond.Common.Services.Messages.WebUsersService.GetWebUserFromLogin.RequestData>(proxy, proxy.GetWebUserFromLogin);
            return s;
        }
        ///<summary> Inserts a new user if the <see cref="P:Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData.WebUsersId" /> is <c>&lt; 0</c> granting access to a particular website. Or Updates an existing <c>WebUser</c> when the <see cref="P:Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData.WebUsersId" /> is specified. </summary>///<see cref="P:Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData.WebUsersId" />///<c>&lt; 0</c>///<c>WebUser</c>///<see cref="P:Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData.WebUsersId" />///<param name="request">The request containing the information used to add or update the web user.</param>///<returns> The users unique identifier (<c>WebUsersId</c>). </returns>///<c>WebUsersId</c>
        public static ServiceCall<Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.Request, Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.Response, Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData> UpdateWebUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebUsersProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.Request, Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.Response, Diamond.Common.Services.Messages.WebUsersService.UpdateWebUser.RequestData>(proxy, proxy.UpdateWebUser);
            return s;
        }
    }

    public static class WebVersionService
    {
        ///<summary> Imports web versions into the Diamond database from an external source </summary>///<param name="request">The wrapper request object containing the collection of WebVersion objects to be imported</param>///<returns> The wrapper response object containing a status flag </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.RequestData> ImportWebVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.ImportWebVersions.RequestData>(proxy, proxy.ImportWebVersions);
            return s;
        }
        ///<summary> Loads all web versions based on status </summary>///<param name="request">The wrapper request object containing the status if one is specified</param>///<returns> The wrapper response object containing the web version collection result </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.RequestData> LoadAllWebVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.LoadAllWebVersions.RequestData>(proxy, proxy.LoadAllWebVersions);
            return s;
        }
        ///<summary> Loads a collection of web versions, but filters the collection based on a list of web version ids included as a request parameter </summary>///<param name="request">The request contains the list of web version ids that should be excluded</param>///<returns> A wrapper returns a collection of web version objects </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.RequestData> LoadSpecificWebVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.Request, Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.Response, Diamond.Common.Services.Messages.WebVersionService.LoadSpecificWebVersions.RequestData>(proxy, proxy.LoadSpecificWebVersions);
            return s;
        }
        ///<summary> Loads a web version using the web version id  </summary>///<param name="request">The wrapper request object containing the web version id of the web version to be loaded</param>///<returns> The web version object </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.Request, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.Response, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.RequestData> LoadWebVersionById()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.Request, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.Response, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionById.RequestData>(proxy, proxy.LoadWebVersionById);
            return s;
        }
        ///<summary> Loads a collection of web version objects filtered out by company, stat, LOB, effective date, and expiration date </summary>///<param name="request">The request contains the company id, state id, lob id, effective date, and expiration date of the web version to load</param>///<returns> A wrapper returns a collection of web version objects </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.Request, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.Response, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.RequestData> LoadWebVersionsForCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.Request, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.Response, Diamond.Common.Services.Messages.WebVersionService.LoadWebVersionsForCSL.RequestData>(proxy, proxy.LoadWebVersionsForCSL);
            return s;
        }
        ///<summary> Either inserts a new web version or updates an existing one. </summary>///<param name="request">The wrapper request object containing all the fields needed to insert or update a web version</param>///<returns> The wrapper response object containing the result of the save success </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.Request, Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.Response, Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.RequestData> UpdateWebVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.WebVersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.Request, Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.Response, Diamond.Common.Services.Messages.WebVersionService.UpdateWebVersion.RequestData>(proxy, proxy.UpdateWebVersion);
            return s;
        }
    }

    public static class MyService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.MyService.MyMethod.Request, Diamond.Common.Services.Messages.MyService.MyMethod.Response, Diamond.Common.Services.Messages.MyService.MyMethod.RequestData> MyMethod()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.MyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.MyService.MyMethod.Request, Diamond.Common.Services.Messages.MyService.MyMethod.Response, Diamond.Common.Services.Messages.MyService.MyMethod.RequestData>(proxy, proxy.MyMethod);
            return s;
        }
    }
    ///<summary> Class containing Services for supporting Configurable Book Operations </summary>
    public static class ConfigurableBookService
    {
        ///<summary> Creates the new version. </summary>///<param name="request">A wrapper class for Load request Data containing BookType, BookXml, NewEngineObject, NewRenewalEffectiveDate, NewStartTime, NewXmlFileName and OldVersionId values.</param>///<returns>The wrapper response containing success indicator and NewVersionId and RFUVersionId values.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\CreateVersion\CreateRateVersion.vb" region="CreateNewVersion" title="Code Example for calling CreateNewVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\CreateVersion\CreateRateVersion.vb" region="CreateNewVersion" title="Code Example for calling CreateNewVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.Request, Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.Response, Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.RequestData> CreateNewVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.Request, Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.Response, Diamond.Common.Services.Messages.ConfigurableBookService.CreateNewVersion.RequestData>(proxy, proxy.CreateNewVersion);
            return s;
        }
        ///<summary> Deletes the analysis. </summary>///<param name="request">A wrapper class for DeleteAnalysis request Data containing Analysis value.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Business\ConfigurableBookManager\Manager.vb" region="DeleteAnalysis" title="Code Example for calling DeleteAnalysis function"></code></example>///<code lang="vbnet" source="Diamond\Business\ConfigurableBookManager\Manager.vb" region="DeleteAnalysis" title="Code Example for calling DeleteAnalysis function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.RequestData> DeleteAnalysis()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.DeleteAnalysis.RequestData>(proxy, proxy.DeleteAnalysis);
            return s;
        }
        ///<summary> Extracts the policies to rate. </summary>///<param name="request">A wrapper class for ExtractPoliciesToRate request Data containing BeginDate, CompanyId, EffectiveRange, EndDate, LobId, StateId, TerritoryNum and Timeout values.</param>///<returns>The wrapper response containing AnalysisResult and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonWnd.vb" region="ExtractPoliciesToRate" title="Code Example for calling ExtractPoliciesToRate function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonWnd.vb" region="ExtractPoliciesToRate" title="Code Example for calling ExtractPoliciesToRate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.RequestData> ExtractPoliciesToRate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToRate.RequestData>(proxy, proxy.ExtractPoliciesToRate);
            return s;
        }
        ///<summary> Extracts the policies to test rate versions. </summary>///<param name="request">A wrapper class for ExtractPoliciesToTestRateVersions request Data containing CompanyId, LobId, StateId and Timeout values.</param>///<returns>The wrapper response containing AnalysisResult and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookTester\RateVersionTesterWnd.vb" region="ExtractPoliciesToTestRateVersions" title="Code Example for calling ExtractPoliciesToTestRateVersions function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookTester\RateVersionTesterWnd.vb" region="ExtractPoliciesToTestRateVersions" title="Code Example for calling ExtractPoliciesToTestRateVersions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.RequestData> ExtractPoliciesToTestRateVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPoliciesToTestRateVersions.RequestData>(proxy, proxy.ExtractPoliciesToTestRateVersions);
            return s;
        }
        ///<summary> Extracts the policy. </summary>///<param name="request">A wrapper class for ExtractPolicy request Data containing PolicyId and PolicyImageNum values.</param>///<returns>The wrapper response containing Image object and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ExportDiamondDataDialog.vb" region="ExtractPolicy" title="Code Example for calling ExtractPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ExportDiamondDataDialog.vb" region="ExtractPolicy" title="Code Example for calling ExtractPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.RequestData> ExtractPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicy.RequestData>(proxy, proxy.ExtractPolicy);
            return s;
        }
        ///<summary> Extracts the policy form. </summary>///<param name="request">A wrapper class for ExtractPolicyForm request Data containing PolicyId and PolicyImageNum values.</param>///<returns>The wrapper response containing Image, FormsDataObject and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ExportDiamondDataDialog.vb" region="ExtractPolicyForm" title="Code Example for calling ExtractPolicyForm function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\ExportDiamondDataDialog.vb" region="ExtractPolicyForm" title="Code Example for calling ExtractPolicyForm function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.RequestData> ExtractPolicyForm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ExtractPolicyForm.RequestData>(proxy, proxy.ExtractPolicyForm);
            return s;
        }
        ///<summary> Generates a new book (rating/form) based on version/forms data in the database. </summary>///<param name="request">A wrapper class for BookGenerator request Data containing book xml and version data.</param>///<returns>The wrapper response containing created book xml.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookGenerator\BookGenerator.vb" region="GenerateBook" title="Generate Book"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookGenerator\BookGenerator.vb" region="GenerateBook" title="Generate Book"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.RequestData> GenerateBook()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.GenerateBook.RequestData>(proxy, proxy.GenerateBook);
            return s;
        }
        ///<summary> Loads the specified request. </summary>///<param name="request">A wrapper class for Load request Data containing BookType and RatingVersionId values.</param>///<returns>The wrapper response containing success indicator and BookXml value.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Load" title="Code Example for calling Load function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Load" title="Code Example for calling Load function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.Load.Request, Diamond.Common.Services.Messages.ConfigurableBookService.Load.Response, Diamond.Common.Services.Messages.ConfigurableBookService.Load.RequestData> Load()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.Load.Request, Diamond.Common.Services.Messages.ConfigurableBookService.Load.Response, Diamond.Common.Services.Messages.ConfigurableBookService.Load.RequestData>(proxy, proxy.Load);
            return s;
        }
        ///<summary> Loads the analysis. </summary>///<param name="request">A wrapper class for LoadAnalysis request Data containing AnalysisId value.</param>///<returns>The wrapper response containing Analysis, AnalysisList and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonSelect.vb" region="LoadAnalysis" title="Code Example for calling LoadAnalysis function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonSelect.vb" region="LoadAnalysis" title="Code Example for calling LoadAnalysis function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.RequestData> LoadAnalysis()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAnalysis.RequestData>(proxy, proxy.LoadAnalysis);
            return s;
        }
        ///<summary> Loads the available versions. </summary>///<param name="request">A wrapper class for LoadAvailableVersions request Data containing BookType, IncludeAll and RFUVersionId values.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Controls\VersionInsDataGridView.vb" region="LoadAvailableVersions" title="Code Example for calling LoadAvailableVersions function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Controls\VersionInsDataGridView.vb" region="LoadAvailableVersions" title="Code Example for calling LoadAvailableVersions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.Request, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.Response, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.RequestData> LoadAvailableVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.Request, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.Response, Diamond.Common.Services.Messages.ConfigurableBookService.LoadAvailableVersions.RequestData>(proxy, proxy.LoadAvailableVersions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.Request, Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.Response, Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.RequestData> PerformanceTestStub()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.Request, Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.Response, Diamond.Common.Services.Messages.ConfigurableBookService.PerformanceTestStub.RequestData>(proxy, proxy.PerformanceTestStub);
            return s;
        }
        ///<summary> Rates the policy. </summary>///<param name="request">A wrapper class for RatePolicy request Data containing PolicyId and PolicyImageNum values.</param>///<returns>The wrapper response containing Image object and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookTester\RateVersionTesterWnd.vb" region="RatePolicy" title="Code Example for calling RatePolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookTester\RateVersionTesterWnd.vb" region="RatePolicy" title="Code Example for calling RatePolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.Request, Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.Response, Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.RequestData> RatePolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.Request, Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.Response, Diamond.Common.Services.Messages.ConfigurableBookService.RatePolicy.RequestData>(proxy, proxy.RatePolicy);
            return s;
        }
        ///<summary> Saves the specified request. </summary>///<param name="request">A wrapper class for Save request Data containing RFUVersionId, BookType, BookXml, and VersionId values.</param>///<returns>The wrapper response containing success indicator and RatingVersionId value.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\SaveBookDialog.vb" region="Save" title="Code Example for calling Save function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\SaveBookDialog.vb" region="Save" title="Code Example for calling Save function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.Save.Request, Diamond.Common.Services.Messages.ConfigurableBookService.Save.Response, Diamond.Common.Services.Messages.ConfigurableBookService.Save.RequestData> Save()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.Save.Request, Diamond.Common.Services.Messages.ConfigurableBookService.Save.Response, Diamond.Common.Services.Messages.ConfigurableBookService.Save.RequestData>(proxy, proxy.Save);
            return s;
        }
        ///<summary> Saves the analysis. </summary>///<param name="request">A wrapper class for SaveAnalysis request Data containing no value.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonSave.vb" region="SaveAnalysis" title="Code Example for calling SaveAnalysis function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\BookAnalysis\RateComparisonSave.vb" region="SaveAnalysis" title="Code Example for calling SaveAnalysis function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.RequestData> SaveAnalysis()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.Request, Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.Response, Diamond.Common.Services.Messages.ConfigurableBookService.SaveAnalysis.RequestData>(proxy, proxy.SaveAnalysis);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.Request, Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.Response, Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.RequestData> SaveNew()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.Request, Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.Response, Diamond.Common.Services.Messages.ConfigurableBookService.SaveNew.RequestData>(proxy, proxy.SaveNew);
            return s;
        }
        ///<summary> Tests the book. </summary>///<param name="request">A wrapper class for TestBook request Data containing Image, FormsDataObject object and BookXml value.</param>///<returns>The wrapper response containing CompilerErrorXml, GeneratedSourceCode, Result, Image object and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Book.vb" region="TestBook" title="Code Example for calling TestBook function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Book.vb" region="TestBook" title="Code Example for calling TestBook function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.RequestData> TestBook()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.TestBook.RequestData>(proxy, proxy.TestBook);
            return s;
        }
        ///<summary> Validates the specified request. </summary>///<param name="request">A wrapper class for Validate request Data containing BookXml value.</param>///<returns>The wrapper response containing CompilerErrorXml, GeneratedSourceCode and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Validate" title="Code Example for calling Validate function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Validate" title="Code Example for calling Validate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.RequestData> Validate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.RequestData>(proxy, proxy.Validate);
            return s;
        }
        ///<summary> Validates the specified request. </summary>///<param name="request">A wrapper class for Validate request Data containing BookXml value.</param>///<returns>The wrapper response containing CompilerErrorXml, GeneratedSourceCode and success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Validate" title="Code Example for calling Validate function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\_Shared.vb" region="Validate" title="Code Example for calling Validate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.RequestData> ValidateBook()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ConfigurableBookService.ConfigurableBookServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Request, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.Response, Diamond.Common.Services.Messages.ConfigurableBookService.ValidateBook.RequestData>(proxy, proxy.ValidateBook);
            return s;
        }
    }
    ///<summary> Proxy class for Detail Settings Service </summary>
    public static class DetailSettingService
    {
        ///<summary> Function used to retrieve description for detail setting </summary>///<param name="request">The wrapper request containing CompanyStateLobId, IsRenewal, DateGiven, PolicyDetailSettingId.</param>///<returns> The wrapper response containing SettingDescription </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingDescription" title="Code Example for calling GetSettingDescription function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingDescription" title="Code Example for calling GetSettingDescription function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.RequestData> GetSettingDescription()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingDescription.RequestData>(proxy, proxy.GetSettingDescription);
            return s;
        }
        ///<summary> Function used to retrieve detail settings </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing PolicyDetailSettings </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettings" title="Code Example for calling GetSettings function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettings" title="Code Example for calling GetSettings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettings.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettings.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettings.RequestData> GetSettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettings.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettings.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettings.RequestData>(proxy, proxy.GetSettings);
            return s;
        }
        ///<summary> Function used to retrieve detail settings via Company State LOB. </summary>///<param name="request">The wrapper request containing CompanyStateLobId, IsRenewal, EffectiveDate.</param>///<returns> The wrapper response containing PolicyDetailSettings </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingsByCSL" title="Code Example for calling GetSettingsByCSL function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingsByCSL" title="Code Example for calling GetSettingsByCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.RequestData> GetSettingsByCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingsByCSL.RequestData>(proxy, proxy.GetSettingsByCSL);
            return s;
        }
        ///<summary> Function used to retrieve setting value </summary>///<param name="request">The wrapper request containing CompanyStateLobId, IsRenewal, DateGiven, PolicyDetailSettingId.</param>///<returns> The wrapper response containing SettingValue </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingValue" title="Code Example for calling GetSettingValue function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingValue" title="Code Example for calling GetSettingValue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.RequestData> GetSettingValue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValue.RequestData>(proxy, proxy.GetSettingValue);
            return s;
        }
        ///<summary> Function used to retrieve setting value via Policy Information </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, VersionId, PolicyDetailSettingId.</param>///<returns> The wrapper request containing SettingValue </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingValueByPolicyIDImageAndVersion" title="Code Example for calling GetSettingValueByPolicyIDImageAndVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSettingValueByPolicyIDImageAndVersion" title="Code Example for calling GetSettingValueByPolicyIDImageAndVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.RequestData> GetSettingValueByPolicyIDImageAndVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.Request, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.Response, Diamond.Common.Services.Messages.DetailSettingService.GetSettingValueByPolicyIDImageAndVersion.RequestData>(proxy, proxy.GetSettingValueByPolicyIDImageAndVersion);
            return s;
        }
        ///<summary> Function used to determine validity of setting </summary>///<param name="request">The wrapper request containing CompanyStateLobId, IsRenewal, DateGiven, PolicyDetailSettingId.</param>///<returns> The wrapper response containing ValidSetting </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidSetting" title="Code Example for calling IsValidSetting function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidSetting" title="Code Example for calling IsValidSetting function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.Request, Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.Response, Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.RequestData> IsValidSetting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.Request, Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.Response, Diamond.Common.Services.Messages.DetailSettingService.IsValidSetting.RequestData>(proxy, proxy.IsValidSetting);
            return s;
        }
        ///<summary> Function used to retrieve setting via ID </summary>///<param name="request">The wrapper request PolicyDetailSettingId, PolicyDetailSettingVersionId.</param>///<returns> The wrapper response containing DetailSetting </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SettingRetrieveByID" title="Code Example for calling SettingRetrieveByID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SettingRetrieveByID" title="Code Example for calling SettingRetrieveByID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.Request, Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.Response, Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.RequestData> SettingRetrieveByID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DetailSettingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.Request, Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.Response, Diamond.Common.Services.Messages.DetailSettingService.SettingRetrieveByID.RequestData>(proxy, proxy.SettingRetrieveByID);
            return s;
        }
    }

    public static class DMVService
    {
        ///<summary> Loads a collection containing the DMV configurations that currently exist in the system. </summary>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\DMV\ManualReportUtility.vb" region="LoadConfigurationList" title="Code Example for calling LoadConfigurationList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\DMV\ManualReportUtility.vb" region="LoadConfigurationList" title="Code Example for calling LoadConfigurationList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.Request, Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.Response, Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.RequestData> LoadConfigurationList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DMVServiceProxy.DMVServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.Request, Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.Response, Diamond.Common.Services.Messages.DMVService.LoadConfigurationList.RequestData>(proxy, proxy.LoadConfigurationList);
            return s;
        }
        ///<summary> Process one or more reports. </summary>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\DMV\ManualReportUtility.vb" region="ProcessReport" title="Code Example for calling ProcessReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\DMV\ManualReportUtility.vb" region="ProcessReport" title="Code Example for calling ProcessReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DMVService.ProcessReport.Request, Diamond.Common.Services.Messages.DMVService.ProcessReport.Response, Diamond.Common.Services.Messages.DMVService.ProcessReport.RequestData> ProcessReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DMVServiceProxy.DMVServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DMVService.ProcessReport.Request, Diamond.Common.Services.Messages.DMVService.ProcessReport.Response, Diamond.Common.Services.Messages.DMVService.ProcessReport.RequestData>(proxy, proxy.ProcessReport);
            return s;
        }
        ///<summary> Resubmit to DMV Load </summary>///<param name="request">The wrapper request object containing PolicyId</param>///<returns>A wrapper response object will contain a collection returning the vehicle found for that policy</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.Request, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.Response, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.RequestData> ResubmitToDMVLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DMVServiceProxy.DMVServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.Request, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.Response, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVLoad.RequestData>(proxy, proxy.ResubmitToDMVLoad);
            return s;
        }
        ///<summary> Resubmit to DMV Save </summary>///<param name="request">The wrapper request object containing Policy_Id and policyimage_num</param>///<returns>nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.Request, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.Response, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.RequestData> ResubmitToDMVSave()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DMVServiceProxy.DMVServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.Request, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.Response, Diamond.Common.Services.Messages.DMVService.ResubmitToDMVSave.RequestData>(proxy, proxy.ResubmitToDMVSave);
            return s;
        }
        ///<summary> Validate Vehicle For DMV </summary>///<param name="request">The wrapper request object containing Policy Number and VIN</param>///<returns>If vehicle has coverage</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ResubmitToDMV.vb" region="ResubmitToDMV" title="Code Example for calling ResubmitToDMV function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.Request, Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.Response, Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.RequestData> ValidateVehicleForDMV()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.DMVServiceProxy.DMVServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.Request, Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.Response, Diamond.Common.Services.Messages.DMVService.ValidateVehicleForDMV.RequestData>(proxy, proxy.ValidateVehicleForDMV);
            return s;
        }
    }
    ///<summary> Proxy class for EFT Service </summary>
    public static class EFTService
    {
        ///<summary> Begins the EFT file creation </summary>///<param name="request">Takes EFTGroupId <see cref="T:Diamond.ServiceMessages.EFTService.BeginEFTFileProcessing.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.BeginEFTFileProcessing.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Response" /> returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\ExportFile.vb" region="BeginEFTFileProcessing" title="Code Example for calling BeginEFTFileProcessing function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\ExportFile.vb" region="BeginEFTFileProcessing" title="Code Example for calling BeginEFTFileProcessing function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.Request, Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.Response, Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.RequestData> BeginEFTFileProcessing()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.Request, Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.Response, Diamond.Common.Services.Messages.EFTService.BeginEFTFileProcessing.RequestData>(proxy, proxy.BeginEFTFileProcessing);
            return s;
        }
        ///<summary> Creates EFT file  - done through DiamUIProc or EOD </summary>///<param name="request">Takes EFTGroupId <see cref="T:Diamond.ServiceMessages.EFTService.CreateEFTFile.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.CreateEFTFile.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.CreateEFTFile.Response" /> returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.CreateEFTFile.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateEFTFile" title="Code Example for calling CreateEFTFile function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateEFTFile" title="Code Example for calling CreateEFTFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.CreateEFTFile.Request, Diamond.Common.Services.Messages.EFTService.CreateEFTFile.Response, Diamond.Common.Services.Messages.EFTService.CreateEFTFile.RequestData> CreateEFTFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.CreateEFTFile.Request, Diamond.Common.Services.Messages.EFTService.CreateEFTFile.Response, Diamond.Common.Services.Messages.EFTService.CreateEFTFile.RequestData>(proxy, proxy.CreateEFTFile);
            return s;
        }
        ///<summary> Delete a particular EFT Group </summary>///<param name="request">Takes EFTGroupId<see cref="T:Diamond.ServiceMessages.EFTService.DeleteEFTGroup.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.DeleteEFTGroup.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.DeleteEFTGroup.Response" /> returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.DeleteEFTGroup.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroup.vb" region="DeleteEFTGroup" title="Code Example for calling DeleteEFTGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroup.vb" region="DeleteEFTGroup" title="Code Example for calling DeleteEFTGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.Request, Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.Response, Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.RequestData> DeleteEFTGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.Request, Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.Response, Diamond.Common.Services.Messages.EFTService.DeleteEFTGroup.RequestData>(proxy, proxy.DeleteEFTGroup);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.Request, Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.Response, Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.RequestData> DeletePaymentProfile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.Request, Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.Response, Diamond.Common.Services.Messages.EFTService.DeletePaymentProfile.RequestData>(proxy, proxy.DeletePaymentProfile);
            return s;
        }
        ///<summary> Load all EFT Groups for editing </summary>///<param name="request">Takes no parameters<see cref="T:Diamond.ServiceMessages.EFTService.LoadAllEFTGroups.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadAllEFTGroups.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.LoadAllEFTGroups.Response" /> returns collection of groups </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadAllEFTGroups.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroup.vb" region="LoadAllEFTGroups" title="Code Example for calling LoadAllEFTGroups function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroup.vb" region="LoadAllEFTGroups" title="Code Example for calling LoadAllEFTGroups function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.Request, Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.Response, Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.RequestData> LoadAllEFTGroups()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.Request, Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.Response, Diamond.Common.Services.Messages.EFTService.LoadAllEFTGroups.RequestData>(proxy, proxy.LoadAllEFTGroups);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.Request, Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.Response, Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.RequestData> LoadCustomerAndPaymentProfiles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.Request, Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.Response, Diamond.Common.Services.Messages.EFTService.LoadCustomerAndPaymentProfiles.RequestData>(proxy, proxy.LoadCustomerAndPaymentProfiles);
            return s;
        }
        ///<summary> Load a particular EFT Group </summary>///<param name="request">Takes EFTGroupId<see cref="T:Diamond.ServiceMessages.EFTService.LoadEFTGroup.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadEFTGroup.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.LoadEFTGroup.Response" /> returns loaded EFT Group </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadEFTGroup.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="LoadEFTGroup" title="Code Example for calling LoadEFTGroup function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="LoadEFTGroup" title="Code Example for calling LoadEFTGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.Request, Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.Response, Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.RequestData> LoadEFTGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.Request, Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.Response, Diamond.Common.Services.Messages.EFTService.LoadEFTGroup.RequestData>(proxy, proxy.LoadEFTGroup);
            return s;
        }
        ///<summary> Load Company/State/Lob information for an EFT Group </summary>///<param name="request">Takes EFTGroupId<see cref="T:Diamond.ServiceMessages.EFTService.LoadSetupInfo.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadSetupInfo.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.LoadSetupInfo.Response" /> returns EFTBankAccountView collection </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.LoadSetupInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="LoadSetupInfo" title="Code Example for calling LoadSetupInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="LoadSetupInfo" title="Code Example for calling LoadSetupInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.Request, Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.Response, Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.RequestData> LoadSetupInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.Request, Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.Response, Diamond.Common.Services.Messages.EFTService.LoadSetupInfo.RequestData>(proxy, proxy.LoadSetupInfo);
            return s;
        }
        ///<summary> Process EFT return file from DiamUIproc </summary>///<param name="request">contains file  <see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Request" /> object EFT.EFTAccountInformation</param>///<see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Response" /> returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.ProcessEFTReturnFile.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTReturns.vb" region="ProcessEFTReturnFile" title="Code Example for calling ProcessEFTReturnFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTReturns.vb" region="ProcessEFTReturnFile" title="Code Example for calling ProcessEFTReturnFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.Request, Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.Response, Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.RequestData> ProcessEFTReturnFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.Request, Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.Response, Diamond.Common.Services.Messages.EFTService.ProcessEFTReturnFile.RequestData>(proxy, proxy.ProcessEFTReturnFile);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.Request, Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.Response, Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.RequestData> SaveCustomerAndPaymentProfiles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.Request, Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.Response, Diamond.Common.Services.Messages.EFTService.SaveCustomerAndPaymentProfiles.RequestData>(proxy, proxy.SaveCustomerAndPaymentProfiles);
            return s;
        }
        ///<summary> Save EFTGroup and EFTGroupCompanyLink records </summary>///<param name="request">Takes EFTGroup and EFTGroupCompanyLinks</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="SaveEFTGroupInfo" title="Code Example for calling SaveEFTGroupInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="SaveEFTGroupInfo" title="Code Example for calling SaveEFTGroupInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.Request, Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.Response, Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.RequestData> SaveEFTGroupInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.Request, Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.Response, Diamond.Common.Services.Messages.EFTService.SaveEFTGroupInfo.RequestData>(proxy, proxy.SaveEFTGroupInfo);
            return s;
        }
        ///<summary> Saves EFT data on a policy </summary>///<param name="request">Contains the EFT account information needed to save <see cref="T:Diamond.ServiceMessages.EFTService.SavePolicyEftInfo.Request" /></param>///<see cref="T:Diamond.ServiceMessages.EFTService.SavePolicyEftInfo.Request" />///<returns> A wrapper object <see cref="T:Diamond.ServiceMessages.EFTService.SavePolicyEftInfo.Response" /> that returns success indicator </returns>///<see cref="T:Diamond.ServiceMessages.EFTService.SavePolicyEftInfo.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="SavePolicyEftInfo" title="Code Example for calling SavePolicyEftInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Controls\Eft.vb" region="SavePolicyEftInfo" title="Code Example for calling SavePolicyEftInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.Request, Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.Response, Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.RequestData> SavePolicyEftInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.Request, Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.Response, Diamond.Common.Services.Messages.EFTService.SavePolicyEftInfo.RequestData>(proxy, proxy.SavePolicyEftInfo);
            return s;
        }
        ///<summary> Validate a routing number against the dbo.EFTValidation table </summary>///<param name="request">Takes a routing number in string format</param>///<returns> A wrapper returns success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="ValidateRoutingNumberAgainstList" title="Code Example for calling ValidateRoutingNumberAgainstList function"></code></example>///<code lang="vbnet" source="Diamond\UI\EFT\EFTGroupInfo.vb" region="ValidateRoutingNumberAgainstList" title="Code Example for calling ValidateRoutingNumberAgainstList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.Request, Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.Response, Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.RequestData> ValidateRoutingNumberAgainstList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EFTServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.Request, Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.Response, Diamond.Common.Services.Messages.EFTService.ValidateRoutingNumberAgainstList.RequestData>(proxy, proxy.ValidateRoutingNumberAgainstList);
            return s;
        }
    }
    ///<summary> Proxy class for Employ Info Service </summary>
    public static class EmployInfoService
    {
        ///<summary> Loads all employment information </summary>///<param name="request">The wrapper request takes PolicyId</param>///<returns>Returns a wrapper response containing success indicator, driver employment, applicant employment info</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="LoadAll" title="Code Example for calling LoadAll function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="LoadAll" title="Code Example for calling LoadAll function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EmployInfoService.LoadAll.Request, Diamond.Common.Services.Messages.EmployInfoService.LoadAll.Response, Diamond.Common.Services.Messages.EmployInfoService.LoadAll.RequestData> LoadAll()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EmployInfoServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EmployInfoService.LoadAll.Request, Diamond.Common.Services.Messages.EmployInfoService.LoadAll.Response, Diamond.Common.Services.Messages.EmployInfoService.LoadAll.RequestData>(proxy, proxy.LoadAll);
            return s;
        }
    }
    ///<summary> Proxy class for EOP Process Service </summary>
    public static class EOPProcessService
    {
        ///<summary> Allow Run Processes </summary>///<param name="request">A wrapper class for AllowRunProcesses request data ProcessType</param>///<returns> The wrapper response containing InitializationData, Message object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="AllowRunProcesses" title="Code Example for calling AllowRunProcesses function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="AllowRunProcesses" title="Code Example for calling AllowRunProcesses function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.Request, Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.Response, Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.RequestData> AllowRunProcesses()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.Request, Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.Response, Diamond.Common.Services.Messages.EOPProcessService.AllowRunProcesses.RequestData>(proxy, proxy.AllowRunProcesses);
            return s;
        }
        ///<summary> Begins processing the specified EOD processes. </summary>///<param name="request">A request wrapper class that contains the End of Period type, the selected processes, and the roll system date indicator.</param>///<returns>A response wrapper class containing the Success flag indicating if the process has began.  If so, then unique identifier for the associated End of Period log is returned.</returns>///<remarks>  <para> End of Period will execute on a background thread.  This means that the service call to BeginProcessing will return to client as soon as the background thread is started on the server. </para>  <para> In order to monitor the status of the End of Period process, the client will need to use the EopLogId that is returned in the response. Making calls to the <see cref="M:Diamond.Common.Services.Proxies.EOPProcessServiceProxy.GetProcessStatus(Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Request)" /> service method will return the status for the specified process. </para></remarks>///<para> End of Period will execute on a background thread.  This means that the service call to BeginProcessing will return to client as soon as the background thread is started on the server. </para>///<para> In order to monitor the status of the End of Period process, the client will need to use the EopLogId that is returned in the response. Making calls to the <see cref="M:Diamond.Common.Services.Proxies.EOPProcessServiceProxy.GetProcessStatus(Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Request)" /> service method will return the status for the specified process. </para>///<see cref="M:Diamond.Common.Services.Proxies.EOPProcessServiceProxy.GetProcessStatus(Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Request)" />///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="BeginProcessing" title="Code Example for calling BeginProcessing function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="BeginProcessing" title="Code Example for calling BeginProcessing function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.Request, Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.Response, Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.RequestData> BeginProcessing()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.Request, Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.Response, Diamond.Common.Services.Messages.EOPProcessService.BeginProcessing.RequestData>(proxy, proxy.BeginProcessing);
            return s;
        }
        ///<summary> Gets the current status for the specified End of Period process. </summary>///<param name="request">A request wrapper class containing the EopLogId and EopProcessId.</param>///<returns>Returns a response wrapper class that contains the instance of the <see cref="T:Diamond.Common.Objects.EndOfPeriod.ExecutionLogDetail" /> class, if one is found.  Otherwise, nothing is returned.</returns>///<see cref="T:Diamond.Common.Objects.EndOfPeriod.ExecutionLogDetail" />///<remarks>Used to monitor the End of Period process executing on the server.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="GetProcessStatus" title="Code Example for calling GetProcessStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="GetProcessStatus" title="Code Example for calling GetProcessStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Request, Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Response, Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.RequestData> GetProcessStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Request, Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.Response, Diamond.Common.Services.Messages.EOPProcessService.GetProcessStatus.RequestData>(proxy, proxy.GetProcessStatus);
            return s;
        }
        ///<summary> Returns whether or not the End of Period process is currently executing. </summary>///<param name="request">A request wrapper class.</param>///<returns>A response wrapper class containing the Result flag that indicates if the process is currently executing.</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="IsEndOfPeriodRunning" title="Code Example for calling IsEndOfPeriodRunning function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="IsEndOfPeriodRunning" title="Code Example for calling IsEndOfPeriodRunning function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.Request, Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.Response, Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.RequestData> IsEndOfPeriodRunning()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.Request, Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.Response, Diamond.Common.Services.Messages.EOPProcessService.IsEndOfPeriodRunning.RequestData>(proxy, proxy.IsEndOfPeriodRunning);
            return s;
        }
        ///<summary> Returns whether or not the End of Period process type has completed. </summary>///<param name="request">A request wrapper class.</param>///<returns>A response wrapper class containing the Result flag that indicates if the process type has completed.</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="IsEOPComplete" title="Code Example for calling IsEOPComplete function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="IsEOPComplete" title="Code Example for calling IsEOPComplete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.Request, Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.Response, Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.RequestData> IsEOPComplete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.Request, Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.Response, Diamond.Common.Services.Messages.EOPProcessService.IsEOPComplete.RequestData>(proxy, proxy.IsEOPComplete);
            return s;
        }
        ///<summary> Launches the EOP process. </summary>///<param name="request">The wrapper request containing EOP Processes.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\JobSetup.vb" region="LoadInitializationData" title="Code Example for calling LoadInitializationData function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ServiceController\JobSetup\JobSetup.vb" region="LoadInitializationData" title="Code Example for calling LoadInitializationData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.Request, Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.Response, Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.RequestData> LoadInitializationData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.Request, Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.Response, Diamond.Common.Services.Messages.EOPProcessService.LoadInitializationData.RequestData>(proxy, proxy.LoadInitializationData);
            return s;
        }
        ///<summary> Resets the current EOP status to not running. </summary>///<param name="request">The request.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\AdminMdiParentForm.vb" region="ResetStatus" title="Code Example for calling ResetStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\AdminMdiParentForm.vb" region="ResetStatus" title="Code Example for calling ResetStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.Request, Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.Response, Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.RequestData> ResetStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.Request, Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.Response, Diamond.Common.Services.Messages.EOPProcessService.ResetStatus.RequestData>(proxy, proxy.ResetStatus);
            return s;
        }
        ///<summary> Launches the EOP process. </summary>///<param name="request">The wrapper request containing EOP Processes.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RollSystemDate" title="Code Example for calling RollSystemDate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RollSystemDate" title="Code Example for calling RollSystemDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.Request, Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.Response, Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.RequestData> RollSystemDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.Request, Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.Response, Diamond.Common.Services.Messages.EOPProcessService.RollSystemDate.RequestData>(proxy, proxy.RollSystemDate);
            return s;
        }
        ///<summary> Launches the EOP process. </summary>///<param name="request">The wrapper request containing EOP Processes.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="UpdateEOPLog" title="Code Example for calling UpdateEOPLog function"></code></example>///<code lang="vbnet" source="Diamond\UI\EndOfPeriod\ProcessesForm.vb" region="UpdateEOPLog" title="Code Example for calling UpdateEOPLog function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.Request, Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.Response, Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.RequestData> UpdateEOPLog()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.EOPProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.Request, Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.Response, Diamond.Common.Services.Messages.EOPProcessService.UpdateEOPLog.RequestData>(proxy, proxy.UpdateEOPLog);
            return s;
        }
    }
    ///<summary> Proxy class for Lookup Service </summary>
    public static class LookupService
    {
        ///<summary> Performs a City State Zip County lookup </summary>///<param name="request">The wrapper request containing Search info.</param>///<returns> The wrapper response containing CityStateZipCountyLookups </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.Request, Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.Response, Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.RequestData> CityStateZipCountyLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.Request, Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.Response, Diamond.Common.Services.Messages.LookupService.CityStateZipCountyLookup.RequestData>(proxy, proxy.CityStateZipCountyLookup);
            return s;
        }
        ///<summary> Performs a protection class lookup </summary>///<param name="request">The wrapper request containing Search Type and the Search Text.</param>///<returns> The wrapper response containing ProtectionClassLookups </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCommercial\ProtectionClassLookup\ProtectionClassLookup.vb" region="DoProtectionClassSearch" title="Code Example for doing a Protection Class Search."></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCommercial\ProtectionClassLookup\ProtectionClassLookup.vb" region="DoProtectionClassSearch" title="Code Example for doing a Protection Class Search."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.Request, Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.Response, Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.RequestData> DoProtectionClassSearch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.Request, Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.Response, Diamond.Common.Services.Messages.LookupService.DoProtectionClassSearch.RequestData>(proxy, proxy.DoProtectionClassSearch);
            return s;
        }
        ///<summary> Performs a RiskGrade lookup </summary>///<param name="request">The wrapper request containing Search Type and the Search Text.</param>///<returns> The wrapper response containing RiskGrades </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\RiskGradeSelection\RiskGradeSelectionForm.vb" region="DoRiskGradeLookup" title="Code Example for doing a Risk Grade Lookup."></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\RiskGradeSelection\RiskGradeSelectionForm.vb" region="DoRiskGradeLookup" title="Code Example for doing a Risk Grade Lookup."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.Request, Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.Response, Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.RequestData> DoRiskGradeSearch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.Request, Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.Response, Diamond.Common.Services.Messages.LookupService.DoRiskGradeSearch.RequestData>(proxy, proxy.DoRiskGradeSearch);
            return s;
        }
        ///<summary> Gets the agency data. </summary>///<param name="request">The wrapper request</param>///<returns>The wrapper response containing Agencies</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyData" title="Code Example for calling GetAgencyData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyData" title="Code Example for calling GetAgencyData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyData.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyData.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyData.RequestData> GetAgencyData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyData.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyData.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyData.RequestData>(proxy, proxy.GetAgencyData);
            return s;
        }
        ///<summary> Gets the agency data for agency id. </summary>///<param name="request">The wrapper request containing AgencyId.</param>///<returns>The wrapper response containing Agencies</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyDataForAgencyId" title="Code Example for calling GetAgencyDataForAgencyId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyDataForAgencyId" title="Code Example for calling GetAgencyDataForAgencyId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.RequestData> GetAgencyDataForAgencyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForAgencyId.RequestData>(proxy, proxy.GetAgencyDataForAgencyId);
            return s;
        }
        ///<summary> Gets the agency data for code. </summary>///<param name="request">The wrapper request containing Code.</param>///<returns>The wrapper response containing Agency Data</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyDataForCode" title="Code Example for calling GetAgencyDataForCode function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAgencyDataForCode" title="Code Example for calling GetAgencyDataForCode function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.RequestData> GetAgencyDataForCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCode.RequestData>(proxy, proxy.GetAgencyDataForCode);
            return s;
        }
        ///<summary> Gets the agency data for Company, State, Lob. </summary>///<param name="request">The wrapper request containing CompanyId, StateId, LobId.</param>///<returns>The wrapper response containing Agencies</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetAgencyDataForCSL" title="Code Example for calling GetAgencyDataForCSL function"></code></example>///<code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetAgencyDataForCSL" title="Code Example for calling GetAgencyDataForCSL function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.RequestData> GetAgencyDataForCSL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.Request, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.Response, Diamond.Common.Services.Messages.LookupService.GetAgencyDataForCSL.RequestData>(proxy, proxy.GetAgencyDataForCSL);
            return s;
        }
        ///<summary> Gets the CompanyStateLobAgency data. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing CSLAs</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetCSLA" title="Code Example for calling GetCSLA function"></code></example>///<code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetCSLA" title="Code Example for calling GetCSLA function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetCSLA.Request, Diamond.Common.Services.Messages.LookupService.GetCSLA.Response, Diamond.Common.Services.Messages.LookupService.GetCSLA.RequestData> GetCSLA()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetCSLA.Request, Diamond.Common.Services.Messages.LookupService.GetCSLA.Response, Diamond.Common.Services.Messages.LookupService.GetCSLA.RequestData>(proxy, proxy.GetCSLA);
            return s;
        }
        ///<summary> Gets the search parameters for lookup. </summary>///<param name="request">The wrapper request containing Lookup Type.</param>///<returns>A wrapper response object containing Parameters object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\Controls\LookupCriteria.vb" region="LookupService.GetLookupParameters" title="Code Example for calling GetLookupParameters Proxy"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\Controls\LookupCriteria.vb" region="LookupService.GetLookupParameters" title="Code Example for calling GetLookupParameters Proxy"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.LookupParameters.Request, Diamond.Common.Services.Messages.LookupService.LookupParameters.Response, Diamond.Common.Services.Messages.LookupService.LookupParameters.RequestData> GetLookupParameters()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.LookupParameters.Request, Diamond.Common.Services.Messages.LookupService.LookupParameters.Response, Diamond.Common.Services.Messages.LookupService.LookupParameters.RequestData>(proxy, proxy.GetLookupParameters);
            return s;
        }
        ///<summary> Gets the producers. </summary>///<param name="request">The wrapper request object</param>///<returns> The wrapper response containing Producers </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetProducers" title="Code Example for calling GetProducers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetProducers" title="Code Example for calling GetProducers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducers.Request, Diamond.Common.Services.Messages.LookupService.GetProducers.Response, Diamond.Common.Services.Messages.LookupService.GetProducers.RequestData> GetProducers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducers.Request, Diamond.Common.Services.Messages.LookupService.GetProducers.Response, Diamond.Common.Services.Messages.LookupService.GetProducers.RequestData>(proxy, proxy.GetProducers);
            return s;
        }
        ///<summary> Gets the producers by agency. </summary>///<param name="request">The wrapper request containing AgencyId.</param>///<returns> The wrapper response containing Producers </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="GetProducersByAgency" title="Code Example for calling GetProducersByAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="GetProducersByAgency" title="Code Example for calling GetProducersByAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.Request, Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.Response, Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.RequestData> GetProducersByAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.Request, Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.Response, Diamond.Common.Services.Messages.LookupService.GetProducersByAgency.RequestData>(proxy, proxy.GetProducersByAgency);
            return s;
        }
        ///<summary> Gets the producers by Company, State, Lob, Agency, Effective Date. </summary>///<param name="request">The wrapper request containing CompanyId, StateId, LobId, AgencyId, EffectiveDate.</param>///<returns> The wrapper response containing Producers </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Policy\Application\Application.ascx.vb" region="GetProducersByCSLAEff" title="Code Example for calling GetProducersByCSLAEff function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Policy\Application\Application.ascx.vb" region="GetProducersByCSLAEff" title="Code Example for calling GetProducersByCSLAEff function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.Request, Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.Response, Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.RequestData> GetProducersByCSLAEff()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.Request, Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.Response, Diamond.Common.Services.Messages.LookupService.GetProducersByCSLAEff.RequestData>(proxy, proxy.GetProducersByCSLAEff);
            return s;
        }
        ///<summary> Gets the user. </summary>///<param name="request">The wrapper request containing UsersId.</param>///<returns>The wrapper response containing User</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ApplicationMdiForm.vb" region="GetUser" title="Code Example for calling GetUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ApplicationMdiForm.vb" region="GetUser" title="Code Example for calling GetUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUser.Request, Diamond.Common.Services.Messages.LookupService.GetUser.Response, Diamond.Common.Services.Messages.LookupService.GetUser.RequestData> GetUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUser.Request, Diamond.Common.Services.Messages.LookupService.GetUser.Response, Diamond.Common.Services.Messages.LookupService.GetUser.RequestData>(proxy, proxy.GetUser);
            return s;
        }
        ///<summary> Gets the user agencies. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing UserAgencies </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserAgencies" title="Code Example for calling GetUserAgencies function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserAgencies" title="Code Example for calling GetUserAgencies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUserAgencies.Request, Diamond.Common.Services.Messages.LookupService.GetUserAgencies.Response, Diamond.Common.Services.Messages.LookupService.GetUserAgencies.RequestData> GetUserAgencies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUserAgencies.Request, Diamond.Common.Services.Messages.LookupService.GetUserAgencies.Response, Diamond.Common.Services.Messages.LookupService.GetUserAgencies.RequestData>(proxy, proxy.GetUserAgencies);
            return s;
        }
        ///<summary> Gets the user agency by UsersId. </summary>///<param name="request">The wrapper request containing UsersId.</param>///<returns> The wrapper response containing UserAgencies </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Accounting\BatchPayments\BatchPayments.ascx.vb" region="GetUserAgencyByUser" title="Code Example for calling GetUserAgencyByUser function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Accounting\BatchPayments\BatchPayments.ascx.vb" region="GetUserAgencyByUser" title="Code Example for calling GetUserAgencyByUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.Request, Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.Response, Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.RequestData> GetUserAgencyByUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.Request, Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.Response, Diamond.Common.Services.Messages.LookupService.GetUserAgencyByUser.RequestData>(proxy, proxy.GetUserAgencyByUser);
            return s;
        }
        ///<summary> Gets the users. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Users</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="GetUsers" title="Code Example for calling GetUsers function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="GetUsers" title="Code Example for calling GetUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUsers.Request, Diamond.Common.Services.Messages.LookupService.GetUsers.Response, Diamond.Common.Services.Messages.LookupService.GetUsers.RequestData> GetUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.GetUsers.Request, Diamond.Common.Services.Messages.LookupService.GetUsers.Response, Diamond.Common.Services.Messages.LookupService.GetUsers.RequestData>(proxy, proxy.GetUsers);
            return s;
        }
        ///<summary> Loads to agency. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Agencies</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="LoadToAgency" title="Code Example for calling LoadToAgency function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\ABT\AbtEditForm.vb" region="LoadToAgency" title="Code Example for calling LoadToAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.LoadToAgency.Request, Diamond.Common.Services.Messages.LookupService.LoadToAgency.Response, Diamond.Common.Services.Messages.LookupService.LoadToAgency.RequestData> LoadToAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.LoadToAgency.Request, Diamond.Common.Services.Messages.LookupService.LoadToAgency.Response, Diamond.Common.Services.Messages.LookupService.LoadToAgency.RequestData>(proxy, proxy.LoadToAgency);
            return s;
        }
        ///<summary> Performs lookup by provided criteria. </summary>///<param name="request">The wrapper request containing Parameters, ExactMatch, Criteria.</param>///<returns>The wrapper response containing Results</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\Controls\LookupCriteria.vb" region="SetInputCriteria 1" title="Code Example for setting up Input Criteria - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\AdvancedSearchForm.vb" region="SetInputCriteria 2" title="Code Example for setting up Input Criteria - Part 2"></code>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\AdvancedSearchForm.vb" region="LookupService.LookupByCriteria" title="Code Example for calling LookupByCriteria Proxy"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\Controls\LookupCriteria.vb" region="SetInputCriteria 1" title="Code Example for setting up Input Criteria - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\AdvancedSearchForm.vb" region="SetInputCriteria 2" title="Code Example for setting up Input Criteria - Part 2"></code>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\AdvancedSearchForm.vb" region="LookupService.LookupByCriteria" title="Code Example for calling LookupByCriteria Proxy"></code>///<remarks>  <see cref="M:Diamond.Common.Services.Proxies.LookupServiceProxy.GetLookupParameters(Diamond.Common.Services.Messages.LookupService.LookupParameters.Request)" /> needs to be called to setup default Lookup parameters before calling this proxy function</remarks>///<see cref="M:Diamond.Common.Services.Proxies.LookupServiceProxy.GetLookupParameters(Diamond.Common.Services.Messages.LookupService.LookupParameters.Request)" />
        public static ServiceCall<Diamond.Common.Services.Messages.LookupService.LookupByCriteria.Request, Diamond.Common.Services.Messages.LookupService.LookupByCriteria.Response, Diamond.Common.Services.Messages.LookupService.LookupByCriteria.RequestData> LookupByCriteria()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.LookupServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.LookupService.LookupByCriteria.Request, Diamond.Common.Services.Messages.LookupService.LookupByCriteria.Response, Diamond.Common.Services.Messages.LookupService.LookupByCriteria.RequestData>(proxy, proxy.LookupByCriteria);
            return s;
        }
    }
    ///<summary> Proxy class for Modifier Service such as Load/Save Coverage Code and Links </summary>
    public static class ModifierService
    {
        ///<summary> Loads the edit data. </summary>///<param name="request">A wrapper class for LoadEditData request Data containing no values.</param>///<returns> The wrapper response containing ModifierEditor object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ModifierEditor\Main.vb" region="LoadEditData" title="Code Example for calling LoadEditData function"></code></example>///<code lang="vbnet" source="Diamond\UI\ModifierEditor\Main.vb" region="LoadEditData" title="Code Example for calling LoadEditData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ModifierService.LoadEditData.Request, Diamond.Common.Services.Messages.ModifierService.LoadEditData.Response, Diamond.Common.Services.Messages.ModifierService.LoadEditData.RequestData> LoadEditData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Modifiers.ModifierServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ModifierService.LoadEditData.Request, Diamond.Common.Services.Messages.ModifierService.LoadEditData.Response, Diamond.Common.Services.Messages.ModifierService.LoadEditData.RequestData>(proxy, proxy.LoadEditData);
            return s;
        }
        ///<summary> Saves the edit data. </summary>///<param name="request">A wrapper class for SaveEditData request Data containing the VersionId value and ModifierEditor object.</param>///<returns> The wrapper response containing ModifierEditor object and success indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ModifierEditor\ModInfo.vb" region="SaveEditData" title="Code Example for calling SaveEditData function"></code></example>///<code lang="vbnet" source="Diamond\UI\ModifierEditor\ModInfo.vb" region="SaveEditData" title="Code Example for calling SaveEditData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ModifierService.SaveEditData.Request, Diamond.Common.Services.Messages.ModifierService.SaveEditData.Response, Diamond.Common.Services.Messages.ModifierService.SaveEditData.RequestData> SaveEditData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Modifiers.ModifierServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ModifierService.SaveEditData.Request, Diamond.Common.Services.Messages.ModifierService.SaveEditData.Response, Diamond.Common.Services.Messages.ModifierService.SaveEditData.RequestData>(proxy, proxy.SaveEditData);
            return s;
        }
    }
    ///<summary> Proxy class for Notes Service </summary>
    public static class NotesService
    {
        ///<summary> Assigns the ownership of notes. </summary>///<param name="request">The wrapper request containing NoteId, UserId.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AssignOwnership" title="Code Example for calling AssignOwnership function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AssignOwnership" title="Code Example for calling AssignOwnership function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.AssignOwnership.Request, Diamond.Common.Services.Messages.NotesService.AssignOwnership.Response, Diamond.Common.Services.Messages.NotesService.AssignOwnership.RequestData> AssignOwnership()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.AssignOwnership.Request, Diamond.Common.Services.Messages.NotesService.AssignOwnership.Response, Diamond.Common.Services.Messages.NotesService.AssignOwnership.RequestData>(proxy, proxy.AssignOwnership);
            return s;
        }
        ///<summary> Determines whether note can be edited. </summary>///<param name="request">The wrapper request containing NoteId.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanEditNote" title="Code Example for calling CanEditNote function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanEditNote" title="Code Example for calling CanEditNote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.CanEditNote.Request, Diamond.Common.Services.Messages.NotesService.CanEditNote.Response, Diamond.Common.Services.Messages.NotesService.CanEditNote.RequestData> CanEditNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.CanEditNote.Request, Diamond.Common.Services.Messages.NotesService.CanEditNote.Response, Diamond.Common.Services.Messages.NotesService.CanEditNote.RequestData>(proxy, proxy.CanEditNote);
            return s;
        }
        ///<summary> Creates the note. </summary>///<param name="request">The wrapper request containing NoteStruct.</param>///<returns>The wrapper response containing success indicator, NoteStruct</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateNote" title="Code Example for calling CreateNote function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateNote" title="Code Example for calling CreateNote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.CreateNote.Request, Diamond.Common.Services.Messages.NotesService.CreateNote.Response, Diamond.Common.Services.Messages.NotesService.CreateNote.RequestData> CreateNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.CreateNote.Request, Diamond.Common.Services.Messages.NotesService.CreateNote.Response, Diamond.Common.Services.Messages.NotesService.CreateNote.RequestData>(proxy, proxy.CreateNote);
            return s;
        }
        ///<summary> Deletes the note. </summary>///<param name="request">The wrapper request containing NoteId.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="" title="Code Example for calling DeleteAI function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="" title="Code Example for calling DeleteAI function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.DeleteNote.Request, Diamond.Common.Services.Messages.NotesService.DeleteNote.Response, Diamond.Common.Services.Messages.NotesService.DeleteNote.RequestData> DeleteNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.DeleteNote.Request, Diamond.Common.Services.Messages.NotesService.DeleteNote.Response, Diamond.Common.Services.Messages.NotesService.DeleteNote.RequestData>(proxy, proxy.DeleteNote);
            return s;
        }
        ///<summary> Returns the number of normal and sticky notes found for the specified level, key values and system generated indicator. </summary>///<param name="Request">The wrapper request containing an instance of the <see cref="T:Diamond.Common.Objects.Notes.LoadNoteStruct" /> class that contains the specified level, key values and system generated indicator.</param>///<see cref="T:Diamond.Common.Objects.Notes.LoadNoteStruct" />///<returns>The wrapper response containing the NormalNoteCount and StickyNoteCount.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Transaction\TransactionList.vb" region="GetNoteCount" title="Code Example for calling GetNoteCount function."></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Transaction\TransactionList.vb" region="GetNoteCount" title="Code Example for calling GetNoteCount function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.GetNoteCount.Request, Diamond.Common.Services.Messages.NotesService.GetNoteCount.Response, Diamond.Common.Services.Messages.NotesService.GetNoteCount.RequestData> GetNoteCount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.GetNoteCount.Request, Diamond.Common.Services.Messages.NotesService.GetNoteCount.Response, Diamond.Common.Services.Messages.NotesService.GetNoteCount.RequestData>(proxy, proxy.GetNoteCount);
            return s;
        }
        ///<summary> Returns the items for this claim to load into the level combo. </summary>///<param name="Request">The wrapper request containing the claimcontrolId for this claim.</param>///<returns>The wrapper response containing the DataItem collection of the items to be returned.</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Notes\InsNote.ascx.vb" region="GetNoteLevelsForClaim" title="Code Example for calling GetNoteLevelsForClaim function."></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Notes\InsNote.ascx.vb" region="GetNoteLevelsForClaim" title="Code Example for calling GetNoteLevelsForClaim function."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.Request, Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.Response, Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.RequestData> GetNoteLevelsForClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.Request, Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.Response, Diamond.Common.Services.Messages.NotesService.GetNoteLevelsForClaim.RequestData>(proxy, proxy.GetNoteLevelsForClaim);
            return s;
        }
        ///<summary> Loads the keys for notes. </summary>///<param name="request">The wrapper request containing KeysFound, InitialLevelNoteKeyStruct.</param>///<returns>The wrapper response containing KeysFound, KeyStructs</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadKeys" title="Code Example for calling LoadKeys function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadKeys" title="Code Example for calling LoadKeys function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadKeys.Request, Diamond.Common.Services.Messages.NotesService.LoadKeys.Response, Diamond.Common.Services.Messages.NotesService.LoadKeys.RequestData> LoadKeys()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadKeys.Request, Diamond.Common.Services.Messages.NotesService.LoadKeys.Response, Diamond.Common.Services.Messages.NotesService.LoadKeys.RequestData>(proxy, proxy.LoadKeys);
            return s;
        }
        ///<summary> Loads the note. </summary>///<param name="noteId">The note id of the note to retrieve.</param>///<returns>the note</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNote.Request, Diamond.Common.Services.Messages.NotesService.LoadNote.Response, Diamond.Common.Services.Messages.NotesService.LoadNote.RequestData> LoadNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNote.Request, Diamond.Common.Services.Messages.NotesService.LoadNote.Response, Diamond.Common.Services.Messages.NotesService.LoadNote.RequestData>(proxy, proxy.LoadNote);
            return s;
        }
        ///<summary> Loads the notes. </summary>///<param name="request">The wrapper request containing NotesFound, LoadStruct.</param>///<returns>The wrapper response containing NotesFound, Notes</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Notes\InsNoteView.vb" region="LoadNotes" title="Code Example for calling LoadNotes function"></code></example>///<code lang="vbnet" source="Diamond\UI\Notes\InsNoteView.vb" region="LoadNotes" title="Code Example for calling LoadNotes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNotes.Request, Diamond.Common.Services.Messages.NotesService.LoadNotes.Response, Diamond.Common.Services.Messages.NotesService.LoadNotes.RequestData> LoadNotes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNotes.Request, Diamond.Common.Services.Messages.NotesService.LoadNotes.Response, Diamond.Common.Services.Messages.NotesService.LoadNotes.RequestData>(proxy, proxy.LoadNotes);
            return s;
        }
        ///<summary> Loads the notes at this level. </summary>///<param name="request">The wrapper request containing NotesFound, LoadStruct.</param>///<returns>The wrapper response containing NotesFound, Notes</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadNotesAtThisLevel" title="Code Example for calling LoadNotesAtThisLevel function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadNotesAtThisLevel" title="Code Example for calling LoadNotesAtThisLevel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.Request, Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.Response, Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.RequestData> LoadNotesAtThisLevel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.Request, Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.Response, Diamond.Common.Services.Messages.NotesService.LoadNotesAtThisLevel.RequestData>(proxy, proxy.LoadNotesAtThisLevel);
            return s;
        }
        ///<summary> Saves the note. </summary>///<param name="request">The wrapper request containing NoteStruct.</param>///<returns>The wrapper response containing success indicator, NoteStruct</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveNote" title="Code Example for calling SaveNote function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveNote" title="Code Example for calling SaveNote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.SaveNote.Request, Diamond.Common.Services.Messages.NotesService.SaveNote.Response, Diamond.Common.Services.Messages.NotesService.SaveNote.RequestData> SaveNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.SaveNote.Request, Diamond.Common.Services.Messages.NotesService.SaveNote.Response, Diamond.Common.Services.Messages.NotesService.SaveNote.RequestData>(proxy, proxy.SaveNote);
            return s;
        }
        ///<summary> Toggles the sticky note flag for the specified <see cref="T:Diamond.Common.Objects.Notes.Note" />. </summary>///<see cref="T:Diamond.Common.Objects.Notes.Note" />///<param name="Request">The wrapper request containing the <see cref="T:Diamond.Common.Objects.Notes.Note" /> whose sticky note flag should be toggled.</param>///<see cref="T:Diamond.Common.Objects.Notes.Note" />///<returns>The wrapper response containing the result of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Notes\StickyNote.vb" region="ToggleStickyNote" title="Code Example for calling ToggleStickyNote service method."></code></example>///<code lang="vbnet" source="Diamond\UI\Notes\StickyNote.vb" region="ToggleStickyNote" title="Code Example for calling ToggleStickyNote service method."></code>
        public static ServiceCall<Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.Request, Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.Response, Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.RequestData> ToggleStickyNote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.NotesServices.NotesServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.Request, Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.Response, Diamond.Common.Services.Messages.NotesService.ToggleStickyNote.RequestData>(proxy, proxy.ToggleStickyNote);
            return s;
        }
    }
    ///<summary> Proxy class for Policy Control Service </summary>
    public static class PolicyControlService
    {
        ///<summary> Returns the policy id based on the policy number passed in. </summary>///<param name="request">A wrapper <see cref="T:Diamond.ServiceMessages.PolicyControlService.GetIdFromPolicyNumber.Request" /> object containing policy Id</param>///<see cref="T:Diamond.ServiceMessages.PolicyControlService.GetIdFromPolicyNumber.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.PolicyControlService.GetIdFromPolicyNumber.Response" /> object containing the success of the call to the business layer and the policy id </returns>///<see cref="T:Diamond.ServiceMessages.PolicyControlService.GetIdFromPolicyNumber.Response" />///<example>  <code lang="vbnet" source="Diamond\ASPNET\Policy\PolicyInquiry\PolicySearch.ascx.vb" region="GetIdFromPolicyNumber" title="Code Example for calling GetIdFromPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Policy\PolicyInquiry\PolicySearch.ascx.vb" region="GetIdFromPolicyNumber" title="Code Example for calling GetIdFromPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.RequestData> GetIdFromPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyControlServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyControlService.GetIdFromPolicyNumber.RequestData>(proxy, proxy.GetIdFromPolicyNumber);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.Request, Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.Response, Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.RequestData> GetLimitedPolicyData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyControlServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.Request, Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.Response, Diamond.Common.Services.Messages.PolicyControlService.GetLimitedPolicyData.RequestData>(proxy, proxy.GetLimitedPolicyData);
            return s;
        }
        ///<summary> Sets the first written date on a policy. </summary>///<param name="request">A wrapper <see cref="T:Diamond.ServiceMessages.PolicyControlService.SetFirstWrittenDate.Request" /> object containing First Written object to be saved</param>///<see cref="T:Diamond.ServiceMessages.PolicyControlService.SetFirstWrittenDate.Request" />///<returns> A wrapper <see cref="T:Diamond.ServiceMessages.PolicyControlService.SetFirstWrittenDate.Response" /> object containing the success of the call to the business layer and the saved First Written object </returns>///<see cref="T:Diamond.ServiceMessages.PolicyControlService.SetFirstWrittenDate.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Processes\PolicyFirstWrittenDate.vb" region="SetFirstWrittenDate" title="Code Example for calling SetFirstWrittenDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\PolicyFirstWrittenDate.vb" region="SetFirstWrittenDate" title="Code Example for calling SetFirstWrittenDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.Request, Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.Response, Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.RequestData> SetFirstWrittenDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyControlServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.Request, Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.Response, Diamond.Common.Services.Messages.PolicyControlService.SetFirstWrittenDate.RequestData>(proxy, proxy.SetFirstWrittenDate);
            return s;
        }
    }
    ///<summary> Wrapper class for Policy Form Service </summary>
    public static class PolicyFormService
    {
        ///<summary> Adds forms and print to the current attached forms by Form Category Type ID. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, formCategoryTypeId, policyImage object.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddFormAndPrintByCategory" title="Code Example for calling AddFormAndPrintByCategory function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddFormAndPrintByCategory" title="Code Example for calling AddFormAndPrintByCategory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.Request, Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.Response, Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.RequestData> AddFormAndPrintByCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.Request, Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.Response, Diamond.Common.Services.Messages.PolicyFormService.AddFormAndPrintByCategory.RequestData>(proxy, proxy.AddFormAndPrintByCategory);
            return s;
        }
        ///<summary> Adds specified form and print to current attached forms. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, formNumber, level, parentNum, suppress, alwaysSuppress, UnitDescription, policyImage object.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddFormsAndPrintByFormVersion" title="Code Example for calling AddFormsAndPrintByFormVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AddFormsAndPrintByFormVersion" title="Code Example for calling AddFormsAndPrintByFormVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.Request, Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.Response, Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.RequestData> AddFormsAndPrintByFormVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.Request, Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.Response, Diamond.Common.Services.Messages.PolicyFormService.AddFormsAndPrintByFormVersion.RequestData>(proxy, proxy.AddFormsAndPrintByFormVersion);
            return s;
        }
        ///<summary> Adds the manual policy form. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, FormVersionId, PolicyFormRisk.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\AvailablePolicyForms.vb" region="AddManualPolicyForm" title="Code Example for calling AddManualPolicyForm function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\AvailablePolicyForms.vb" region="AddManualPolicyForm" title="Code Example for calling AddManualPolicyForm function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.Request, Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.Response, Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.RequestData> AddManualPolicyForm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.Request, Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.Response, Diamond.Common.Services.Messages.PolicyFormService.AddManualPolicyForm.RequestData>(proxy, proxy.AddManualPolicyForm);
            return s;
        }
        ///<summary> Deletes the manual policy form. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, PolicyFormNum.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="DeleteManualPolicyForm" title="Code Example for calling DeleteManualPolicyForm function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="DeleteManualPolicyForm" title="Code Example for calling DeleteManualPolicyForm function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.Request, Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.Response, Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.RequestData> DeleteManualPolicyForm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.Request, Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.Response, Diamond.Common.Services.Messages.PolicyFormService.DeleteManualPolicyForm.RequestData>(proxy, proxy.DeleteManualPolicyForm);
            return s;
        }
        ///<summary> Gets the formversion static data  </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, TransactionTypeId, EffDate, and CompanyStateLobId.</param>///<returns>The wrapper response containing success indicator, form version static data records</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="GetFormVersionData" title="Code Example for calling GetFormVersionData function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="GetFormVersionData" title="Code Example for calling GetFormVersionData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.Request, Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.Response, Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.RequestData> GetFormVersionData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.Request, Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.Response, Diamond.Common.Services.Messages.PolicyFormService.GetFormVersionData.RequestData>(proxy, proxy.GetFormVersionData);
            return s;
        }
        ///<summary> Loads the additional information. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, PolicyFormNum, FormVersionId.</param>///<returns>The wrapper response containing success indicator, PolicyFormsAdditionalInfo</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\AdditionalInfo\AdditionalInfoList.vb" region="LoadAdditionalinfo" title="Code Example for calling LoadAdditionalinfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\AdditionalInfo\AdditionalInfoList.vb" region="LoadAdditionalinfo" title="Code Example for calling LoadAdditionalinfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.RequestData> LoadAdditionalinfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadAdditionalinfo.RequestData>(proxy, proxy.LoadAdditionalinfo);
            return s;
        }
        ///<summary> Loads the Policy Forms. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, TransTypeId, EffectiveDate.</param>///<returns>The wrapper response containing success indicator, PolicyForms</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="LoadForView" title="Code Example for calling LoadForView function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="LoadForView" title="Code Example for calling LoadForView function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadForView.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadForView.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadForView.RequestData> LoadForView()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadForView.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadForView.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadForView.RequestData>(proxy, proxy.LoadForView);
            return s;
        }
        ///<summary> Loads the Policy Form Risks. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum.</param>///<returns>The wrapper response containing success indicator, PolicyFormRisks</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="LoadRisks" title="Code Example for calling LoadRisks function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\PolicyForm\PolicyFormList.vb" region="LoadRisks" title="Code Example for calling LoadRisks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.RequestData> LoadRisks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.Request, Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.Response, Diamond.Common.Services.Messages.PolicyFormService.LoadRisks.RequestData>(proxy, proxy.LoadRisks);
            return s;
        }
        ///<summary> Saves the additionalinfo. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, PolicyFormNum, FormVersionId, PolicyFormAdditioanlInfo.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\AdditionalInfo\AdditionalInfoList.vb" region="SaveAdditionalinfo" title="Code Example for calling SaveAdditionalinfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\AdditionalInfo\AdditionalInfoList.vb" region="SaveAdditionalinfo" title="Code Example for calling SaveAdditionalinfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.Request, Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.Response, Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.RequestData> SaveAdditionalinfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.Request, Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.Response, Diamond.Common.Services.Messages.PolicyFormService.SaveAdditionalInfo.RequestData>(proxy, proxy.SaveAdditionalinfo);
            return s;
        }
        ///<summary> Tests the configurable forms book. <Note>For Testing Purpose Only</Note></summary>///<Note>For Testing Purpose Only</Note>///<param name="request">The wrapper request containing BookXml, Image, FormsData.</param>///<returns>The wrapper response containing success indicator, CompilerErrorXml, GeneratedSourceCode, Image, Result</returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Book.vb" region="TestConfigurableFormsBook" title="Code Example for calling TestConfigurableFormsBook function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\Book.vb" region="TestConfigurableFormsBook" title="Code Example for calling TestConfigurableFormsBook function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.Request, Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.Response, Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.RequestData> TestConfigurableFormsBook()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyFormServices.PolicyFormServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.Request, Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.Response, Diamond.Common.Services.Messages.PolicyFormService.TestConfigurableFormsBook.RequestData>(proxy, proxy.TestConfigurableFormsBook);
            return s;
        }
    }
    ///<summary> Class containing Services for processing Policy Operations - SubmitApplication, Rate, Issue etc </summary>
    public static class PolicyService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.Request, Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.Response, Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.RequestData> AcceptRejectQuote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.Request, Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.Response, Diamond.Common.Services.Messages.PolicyService.AcceptRejectQuote.RequestData>(proxy, proxy.AcceptRejectQuote);
            return s;
        }
        ///<summary> Acquires the pending image. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image num.</param>///<param name="usersId">The users id.</param>///<returns>Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="AcquirePendingImage" title="Code Example for calling AcquirePendingImage function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="AcquirePendingImage" title="Code Example for calling AcquirePendingImage function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Request, Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Response, Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.RequestData> AcquirePendingImage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Request, Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Response, Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.RequestData>(proxy, proxy.AcquirePendingImage);
            return s;
        }
        ///<summary> Applies the specified NCCI Experience Modification Factor to the associated policy in the system. </summary>///<param name="request">The wrapper request object containing the <c>Diamond.Common.Objects.ExperienceModificaton.NCCIExperienceModificationFileRecord</c> item to process.</param>///<c>Diamond.Common.Objects.ExperienceModificaton.NCCIExperienceModificationFileRecord</c>///<returns>The wrapper response object containing the returned <c>Diamond.Common.Objects.ExperienceModificaton.NCCIExperienceModificationFileRecord</c> item.</returns>///<c>Diamond.Common.Objects.ExperienceModificaton.NCCIExperienceModificationFileRecord</c>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ExperienceModifications\NCCI\ApplyModificationFactorsControl.vb" region="ApplyExperienceModificationFactor" title="Code Example for calling ApplyExperienceModificationFactor function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ExperienceModifications\NCCI\ApplyModificationFactorsControl.vb" region="ApplyExperienceModificationFactor" title="Code Example for calling ApplyExperienceModificationFactor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.Request, Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.Response, Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.RequestData> ApplyExperienceModificationFactor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.Request, Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.Response, Diamond.Common.Services.Messages.PolicyService.ApplyExperienceModificationFactor.RequestData>(proxy, proxy.ApplyExperienceModificationFactor);
            return s;
        }
        ///<summary> Attaches forms to the specified policy image. </summary>///<param name="request">The wrapper request object containing the policy id, policy image number, and version id to use for forms attachment processing.</param>///<returns>The wrapper response object containing an operation result and a collection of <c>Diamond.Common.Objects.Policy.PolicyForm.PolicyFormView</c> objects that were attached to the policy.</returns>///<c>Diamond.Common.Objects.Policy.PolicyForm.PolicyFormView</c>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="AttachForms" title="Code Example for calling AttachForms function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="AttachForms" title="Code Example for calling AttachForms function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.AttachForms.Request, Diamond.Common.Services.Messages.PolicyService.AttachForms.Response, Diamond.Common.Services.Messages.PolicyService.AttachForms.RequestData> AttachForms()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.AttachForms.Request, Diamond.Common.Services.Messages.PolicyService.AttachForms.Response, Diamond.Common.Services.Messages.PolicyService.AttachForms.RequestData>(proxy, proxy.AttachForms);
            return s;
        }
        ///<summary> Binds or Denies the specified policy based on value in 'Bind' parameter </summary>///<param name="policy_Id">The policy id.</param>///<param name="policyImage_Num">The policy image num.</param>///<param name="tType_Id">The transaction type id.</param>///<param name="BindToDate">The bind date.</param>///<param name="BindToTime">The bind time.</param>///<param name="tReason">The transaction reason code</param>///<param name="Remark">Any remark entered.</param>///<param name="Bind">set to <c>true</c> [bind] and if set to <c>false</c> [deny].</param>///<c>true</c>///<c>false</c>///<returns>A boolean value including sucess/failure of bind/deny operation </returns>///<remarks> This function is called for both bind and deny operation by setting 'Bind' parameter to 'true' for bind and to 'false' for 'deny'</remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Binder" title="Code Example for calling Binder function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Binder" title="Code Example for calling Binder function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.Binder.Request, Diamond.Common.Services.Messages.PolicyService.Binder.Response, Diamond.Common.Services.Messages.PolicyService.Binder.RequestData> Binder()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.Binder.Request, Diamond.Common.Services.Messages.PolicyService.Binder.Response, Diamond.Common.Services.Messages.PolicyService.Binder.RequestData>(proxy, proxy.Binder);
            return s;
        }
        ///<summary> This will calculate the current policy Loss Ratio </summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\Web\DetailControlCore\LossRatio.ascx.vb" region="CalculateCurrentLossRatio" title="Code Example for calling CalculateCurrentLossRatio function"></code></example>///<code lang="vbnet" source="Diamond\Web\DetailControlCore\LossRatio.ascx.vb" region="CalculateCurrentLossRatio" title="Code Example for calling CalculateCurrentLossRatio function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.Request, Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.Response, Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.RequestData> CalculateCurrentLossRatio()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.Request, Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.Response, Diamond.Common.Services.Messages.PolicyService.CalculateCurrentLossRatio.RequestData>(proxy, proxy.CalculateCurrentLossRatio);
            return s;
        }
        ///<summary> Converts the policy for renewal. </summary>///<param name="request">The wrapper request object containing various inputs such as PolicyId, PolicyImageNum, VersionId etc.</param>///<returns>A wrapper response object containing a success/failure indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ConvertPolicyForRenewal" title="Code Example for calling ConvertPolicyForRenewal function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ConvertPolicyForRenewal" title="Code Example for calling ConvertPolicyForRenewal function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.Request, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.Response, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.RequestData> ConvertPolicyForRenewal()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.Request, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.Response, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyForRenewal.RequestData>(proxy, proxy.ConvertPolicyForRenewal);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.Request, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.Response, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.RequestData> ConvertPolicyFromQuoteToApplication()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.Request, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.Response, Diamond.Common.Services.Messages.PolicyService.ConvertPolicyFromQuoteToApplication.RequestData>(proxy, proxy.ConvertPolicyFromQuoteToApplication);
            return s;
        }
        ///<summary> Copies current quote to new quote </summary>///<param name="policyId">The policy id of the current quote.</param>///<param name="policyImageNum">The policy image number of the current quote</param>///<param name="usersId">The user id.</param>///<param name="diamondValidation"> diamondValidation.</param>///<returns>Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="CopyQuoteToNewQuote" title="Code Example for calling CopyQuoteToNewQuote function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="CopyQuoteToNewQuote" title="Code Example for calling CopyQuoteToNewQuote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Request, Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Response, Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.RequestData> CopyQuoteToNewQuote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Request, Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Response, Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.RequestData>(proxy, proxy.CopyQuoteToNewQuote);
            return s;
        }
        ///<summary> Generates warnings for coverages that will be deleted if dependent coverages aren't valid </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.Request, Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.Response, Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.RequestData> CoverageDeleteWarning()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.Request, Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.Response, Diamond.Common.Services.Messages.PolicyService.CoverageDeleteWarning.RequestData>(proxy, proxy.CoverageDeleteWarning);
            return s;
        }
        ///<summary> Get package part objects with version_id, ratingversion_id, addformsversion_id, underwritingversion_id, and other data set. </summary>///<param name="request">The request object containing Image TransactionTypeId, TransactionReasonId, TransactionEffectiveDate, Guaranteed Date, and an ordered array of PackagePartTypeIds to add.</param>///<returns>A wrapper object containing a PackagePart collection</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateNewPackageParts" title="Code Example for calling CreateNewPackageParts function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CreateNewPackageParts" title="Code Example for calling CreateNewPackageParts function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.Request, Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.Response, Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.RequestData> CreateNewPackageParts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.Request, Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.Response, Diamond.Common.Services.Messages.PolicyService.CreateNewPackageParts.RequestData>(proxy, proxy.CreateNewPackageParts);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DataFill.Request, Diamond.Common.Services.Messages.PolicyService.DataFill.Response, Diamond.Common.Services.Messages.PolicyService.DataFill.RequestData> DataFill()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DataFill.Request, Diamond.Common.Services.Messages.PolicyService.DataFill.Response, Diamond.Common.Services.Messages.PolicyService.DataFill.RequestData>(proxy, proxy.DataFill);
            return s;
        }
        ///<summary> Defaults first location. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.Request, Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.Response, Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.RequestData> DefaultFirstLocation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.Request, Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.Response, Diamond.Common.Services.Messages.PolicyService.DefaultFirstLocation.RequestData>(proxy, proxy.DefaultFirstLocation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.Request, Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.Response, Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.RequestData> DefaultSubmitInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.Request, Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.Response, Diamond.Common.Services.Messages.PolicyService.DefaultSubmitInfo.RequestData>(proxy, proxy.DefaultSubmitInfo);
            return s;
        }
        ///<summary> Deletes the client. </summary>///<param name="request">The wrapper request object containing Client Id.</param>///<returns>A wrapper response object containing boolean indicating the success/failure of DeleteClient operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="DeleteClient" title="Code Example for calling DeleteClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="DeleteClient" title="Code Example for calling DeleteClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteClient.Request, Diamond.Common.Services.Messages.PolicyService.DeleteClient.Response, Diamond.Common.Services.Messages.PolicyService.DeleteClient.RequestData> DeleteClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteClient.Request, Diamond.Common.Services.Messages.PolicyService.DeleteClient.Response, Diamond.Common.Services.Messages.PolicyService.DeleteClient.RequestData>(proxy, proxy.DeleteClient);
            return s;
        }
        ///<summary> Deletes the future events. </summary>///<param name="request">The wrapper request object containing DeleteByAutomaticProcess, FutureEventsNum, FutureEventsTypeId, Successful and PolicyId values.</param>///<returns> The wrapper response object containing collection of  DataItem object having boolean success/failure indicator. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\FutureEvents.vb" region="DeleteFutureEvents" title="Code Example for calling DeleteFutureEvents function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\FutureEvents.vb" region="DeleteFutureEvents" title="Code Example for calling DeleteFutureEvents function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.Request, Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.Response, Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.RequestData> DeleteFutureEvents()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.Request, Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.Response, Diamond.Common.Services.Messages.PolicyService.DeleteFutureEvents.RequestData>(proxy, proxy.DeleteFutureEvents);
            return s;
        }
        ///<summary> Delete a Claim OutsideAuditor  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Request" />///<returns> A <see cref="T:Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Response" /> object containing the success/failure status of the deletion. </returns>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="DeleteOutsideAuditor" title="Code Example for calling DeleteOutsideAuditor function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="DeleteOutsideAuditor" title="Code Example for calling DeleteOutsideAuditor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.RequestData> DeleteOutsideAuditor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.DeleteOutsideAuditor.RequestData>(proxy, proxy.DeleteOutsideAuditor);
            return s;
        }
        ///<summary> Deletes pending images from the policy </summary>///<param name="request">The wrapper request object.</param>///<returns>  <c>True</c> if the policy image was successfully deleted.  <c>False</c> otherwise.</returns>///<c>True</c>///<c>False</c>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.Request, Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.Response, Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.RequestData> DeletePendingImage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.Request, Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.Response, Diamond.Common.Services.Messages.PolicyService.DeletePendingImage.RequestData>(proxy, proxy.DeletePendingImage);
            return s;
        }
        ///<summary> Deletes the specified policy search type. </summary>///<param name="request">The wrapper request object containing the policy search type to delete.</param>///<returns>The wrapper response containing a result flag that indicates if the item was successfully deleted.</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.Request, Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.Response, Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.RequestData> DeletePolicySearchTypeViewableByUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.Request, Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.Response, Diamond.Common.Services.Messages.PolicyService.DeletePolicySearchTypeViewableByUserCategory.RequestData>(proxy, proxy.DeletePolicySearchTypeViewableByUserCategory);
            return s;
        }
        ///<summary> Deletes the quote. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image number</param>///<returns>Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="DeleteQuote" title="Code Example for calling DeleteQuote function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="DeleteQuote" title="Code Example for calling DeleteQuote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteQuote.Request, Diamond.Common.Services.Messages.PolicyService.DeleteQuote.Response, Diamond.Common.Services.Messages.PolicyService.DeleteQuote.RequestData> DeleteQuote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DeleteQuote.Request, Diamond.Common.Services.Messages.PolicyService.DeleteQuote.Response, Diamond.Common.Services.Messages.PolicyService.DeleteQuote.RequestData>(proxy, proxy.DeleteQuote);
            return s;
        }
        ///<summary> Demotes the pending to quote. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image num.</param>///<returns>Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="DemotePendingToQuote" title="Code Example for calling DemotePendingToQuote function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="DemotePendingToQuote" title="Code Example for calling DemotePendingToQuote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.Request, Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.Response, Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.RequestData> DemotePendingToQuote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.Request, Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.Response, Diamond.Common.Services.Messages.PolicyService.DemotePendingToQuote.RequestData>(proxy, proxy.DemotePendingToQuote);
            return s;
        }
        ///<summary></summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.RequestData> FraudPreventionApproveEntitySearchLogRecord()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionApproveEntitySearchLogRecord.RequestData>(proxy, proxy.FraudPreventionApproveEntitySearchLogRecord);
            return s;
        }
        ///<summary></summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.RequestData> FraudPreventionLoadEntitySearchLogRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadEntitySearchLogRecords.RequestData>(proxy, proxy.FraudPreventionLoadEntitySearchLogRecords);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.RequestData> FraudPreventionLoadRestrictedEntityListEntries()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadRestrictedEntityListEntries.RequestData>(proxy, proxy.FraudPreventionLoadRestrictedEntityListEntries);
            return s;
        }
        ///<summary></summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.RequestData> FraudPreventionLoadSearchConfigurations()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionLoadSearchConfigurations.RequestData>(proxy, proxy.FraudPreventionLoadSearchConfigurations);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.RequestData> FraudPreventionUpdateRestrictedEntityListEntry()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateRestrictedEntityListEntry.RequestData>(proxy, proxy.FraudPreventionUpdateRestrictedEntityListEntry);
            return s;
        }
        ///<summary></summary>///<param name="request"></param>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.RequestData> FraudPreventionUpdateSearchConfiguration()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.Request, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.Response, Diamond.Common.Services.Messages.PolicyService.FraudPreventionUpdateSearchConfiguration.RequestData>(proxy, proxy.FraudPreventionUpdateSearchConfiguration);
            return s;
        }
        ///<summary> Returns a list of Risks for a given <c>ClientId</c> grouped by <c>PolicyId</c>. The <c>RiskId</c> and <c>RiskType</c> are returned in XML format. </summary>///<c>ClientId</c>///<c>PolicyId</c>///<c>RiskId</c>///<c>RiskType</c>///<param name="request">The request containing the <c>ClientId</c> and optionally the risks to include or exclude.</param>///<c>ClientId</c>///<returns></returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetActiveRisksByClientId" title="Code Example for calling GetActiveRisksByClientId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetActiveRisksByClientId" title="Code Example for calling GetActiveRisksByClientId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.Request, Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.Response, Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.RequestData> GetActiveRisksByClientId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.Request, Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.Response, Diamond.Common.Services.Messages.PolicyService.GetActiveRisksByClientId.RequestData>(proxy, proxy.GetActiveRisksByClientId);
            return s;
        }
        ///<summary> Gets the address for a given <c>PolicyId</c>, <c>PolicyImageNum</c> and <c>NameAddressSourceId</c>. </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>NameAddressSourceId</c>///<param name="request">The wrapper request object containing the <c>PolicyId</c>, <c>PolicyImageNum</c>, and <c>NameAddressSourceId</c>.</param>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>NameAddressSourceId</c>///<returns> The wrapper response object containing a list of <see cref="T:Diamond.Common.Objects.Address">Addresses</see> corresponding to the <c>NameAddressSourceId</c> in the context of the policy. </returns>///<see cref="T:Diamond.Common.Objects.Address">Addresses</see>///<c>NameAddressSourceId</c>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAddress" title="Code Example for getting Client1 address using GetAddress function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetAddress" title="Code Example for getting Client1 address using GetAddress function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetAddress.Request, Diamond.Common.Services.Messages.PolicyService.GetAddress.Response, Diamond.Common.Services.Messages.PolicyService.GetAddress.RequestData> GetAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetAddress.Request, Diamond.Common.Services.Messages.PolicyService.GetAddress.Response, Diamond.Common.Services.Messages.PolicyService.GetAddress.RequestData>(proxy, proxy.GetAddress);
            return s;
        }
        ///<summary> Gets the agency data based on AgencyId or Code </summary>///<param name="request">The wrapper request object containing LobId, Code, CompanyId, StateId, AgencyId values.</param>///<returns> The wrapper response object containing the returned AgencyData object. </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsAgencyCombo.vb" region="GetAgencyData" title="Code Example for calling GetAgencyData function company, State and LOB combination"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsAgencyCombo.vb" region="GetAgencyData" title="Code Example for calling GetAgencyData function company, State and LOB combination"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetAgencyData.Request, Diamond.Common.Services.Messages.PolicyService.GetAgencyData.Response, Diamond.Common.Services.Messages.PolicyService.GetAgencyData.RequestData> GetAgencyData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetAgencyData.Request, Diamond.Common.Services.Messages.PolicyService.GetAgencyData.Response, Diamond.Common.Services.Messages.PolicyService.GetAgencyData.RequestData>(proxy, proxy.GetAgencyData);
            return s;
        }
        ///<summary> Gets the client policies. </summary>///<param name="request">The wrapper request object containing PolicyId</param>///<returns> The wrapper response object containing the returned Success, Policy, PolicyImageNum object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="GetClientPolicies" title="Code Example for calling GetClientPolicies function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="GetClientPolicies" title="Code Example for calling GetClientPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.Request, Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.Response, Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.RequestData> GetClientPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.Request, Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.Response, Diamond.Common.Services.Messages.PolicyService.GetClientPolicies.RequestData>(proxy, proxy.GetClientPolicies);
            return s;
        }
        ///<summary> Gets the client policyinfos by attaching them under policylevel in the image passed. </summary>///<param name="request">The wrapper request object containing PolicyImage</param>///<returns> The wrapper response object containing the returned PolicyImage containing the PolicyInfos </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyInfo" title="Code Example for calling GetClientPolicyInfo function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyInfo" title="Code Example for calling GetClientPolicyInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.Request, Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.Response, Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.RequestData> GetClientPolicyInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.Request, Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.Response, Diamond.Common.Services.Messages.PolicyService.GetClientPolicyInfo.RequestData>(proxy, proxy.GetClientPolicyInfo);
            return s;
        }
        ///<summary> Gets the date the policy was first written. </summary>///<param name="request">The wrapper request object containing the Policy Number.</param>///<returns>The wrapper response object contains the success or failure of the operation.  If the operation succeeded, the first written date is returned.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\PolicyFirstWrittenDate.vb" region="GetFirstWrittenDate" title="Code Example for calling GetFirstWrittenDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\PolicyFirstWrittenDate.vb" region="GetFirstWrittenDate" title="Code Example for calling GetFirstWrittenDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.Request, Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.Response, Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.RequestData> GetFirstWrittenDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.Request, Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.Response, Diamond.Common.Services.Messages.PolicyService.GetFirstWrittenDate.RequestData>(proxy, proxy.GetFirstWrittenDate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.Request, Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.Response, Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.RequestData> GetMiscellaneousCharges()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.Request, Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.Response, Diamond.Common.Services.Messages.PolicyService.GetMiscellaneousCharges.RequestData>(proxy, proxy.GetMiscellaneousCharges);
            return s;
        }
        ///<summary> Gets the NAICS data based on search criteria (code, description) </summary>///<param name="request">The wrapper request object containing Fieldname (code, description) and FieldValue (value to be used in search) fields.</param>///<returns> The wrapper response object containing the returned NAICS object. </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond/UI/BaseControls/NAICSLookup/NAICSLookup.vb" region="GetNAICSData" title="Code Example for calling GetNAICSData function"></code></example>///<code lang="vbnet" source="Diamond/UI/BaseControls/NAICSLookup/NAICSLookup.vb" region="GetNAICSData" title="Code Example for calling GetNAICSData function"></code>///<remarks></remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNAICSData.Request, Diamond.Common.Services.Messages.PolicyService.GetNAICSData.Response, Diamond.Common.Services.Messages.PolicyService.GetNAICSData.RequestData> GetNAICSData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNAICSData.Request, Diamond.Common.Services.Messages.PolicyService.GetNAICSData.Response, Diamond.Common.Services.Messages.PolicyService.GetNAICSData.RequestData>(proxy, proxy.GetNAICSData);
            return s;
        }
        ///<summary> Gets new Policy LinkNumber </summary>///<param name="request">The wrapper request object containing the PolicyId, PolicyTypeId.</param>///<returns>The wrapper response object contains the success or failure of the operation.  If the operation succeeded, the new LinkNumber.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.RequestData> GetNewPolicyLinkNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyLinkNumber.RequestData>(proxy, proxy.GetNewPolicyLinkNumber);
            return s;
        }
        ///<summary> Function to return a new policy or quote number when a new business or quick quote is started </summary>///<param name="company_id">System assigned value set based on Issuing Company in which the New Policy or Quote is created</param>///<param name="state_id">System assigned value set based on the state selected for issuance</param>///<param name="lob_id">System assigned value set based on the Line of Business (Personal Auto, Personal Home etc) selected by user</param>///<param name="effectiveDate">Effective Date of policy entered by User</param>///<param name="transType_id">System assigned value set based on the Transaction Type selected </param>///<param name="isQuote">Boolean value indicating Quote or non-Quote transaction</param>///<returns> A string containing the Quote Number or New Policy Number assigned </returns>///<example>  <code lang="vbnet" source="Diamond\IntegrationServices\Translation\Auto\ACORDTranslator.vb" region="GetNewPolicyOrQuoteNumber" title="Code Example for calling GetNewPolicyOrQuoteNumber function"></code></example>///<code lang="vbnet" source="Diamond\IntegrationServices\Translation\Auto\ACORDTranslator.vb" region="GetNewPolicyOrQuoteNumber" title="Code Example for calling GetNewPolicyOrQuoteNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.RequestData> GetNewPolicyOrQuoteNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.RequestData>(proxy, proxy.GetNewPolicyOrQuoteNumber);
            return s;
        }
        ///<summary> Using the Policy_id and/Or the PolicyImageNum provided in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Request">request</see> object into <c>Diamond</c>.  If a only one Quote (PolicystatusCodeId of 12) or Pending (policystatuscodeid of 4) Image exists for a policyId that image will be returned.  If no Quote or pending images exits than an empty image object will be returned. If more than one Quote or pending Image exsits for the policyid Then using the PolicyimageNum passed in we will try and find the Quote or Pending image that this image started from. </summary>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Request">request</see>///<c>Diamond</c>///<param name="request">The request containing the populated <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> object.</param>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<returns>A <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> object that has been returned in the quote image.</returns>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetPendingOrQuoteImageByPolicyIdAndOrImageNum" title="Code Example for calling GetPendingOrQuoteImageByPolicyIdAndOrImageNum function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetPendingOrQuoteImageByPolicyIdAndOrImageNum" title="Code Example for calling GetPendingOrQuoteImageByPolicyIdAndOrImageNum function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Request, Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Response, Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.RequestData> GetPendingOrQuoteImageByPolicyIdAndOrImageNum()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Request, Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.Response, Diamond.Common.Services.Messages.PolicyService.GetPendingOrQuoteImageByPolicyIdAndOrImageNum.RequestData>(proxy, proxy.GetPendingOrQuoteImageByPolicyIdAndOrImageNum);
            return s;
        }
        ///<summary> Returns collection of policy history object based on Policy Id </summary>///<param name="request">A wrapper request object containing Policy Id.</param>///<returns>A wrapper response object containing collection of Policy History object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyHistory" title="Code Example for calling GetPolicyHistory function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyHistory" title="Code Example for calling GetPolicyHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.RequestData> GetPolicyHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyHistory.RequestData>(proxy, proxy.GetPolicyHistory);
            return s;
        }
        ///<summary> Gets the policy id and num for billing account. </summary>///<param name="request">The wrapper request object containing BillingAccountId value.</param>///<returns> The wrapper response object containing the returned QuickLookup object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="GetPolicyIdAndNumForBillingAccount" title="Code Example for calling GetPolicyIdAndNumForBillingAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="GetPolicyIdAndNumForBillingAccount" title="Code Example for calling GetPolicyIdAndNumForBillingAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.RequestData> GetPolicyIdAndNumForBillingAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForBillingAccount.RequestData>(proxy, proxy.GetPolicyIdAndNumForBillingAccount);
            return s;
        }
        ///<summary> Gets the policy id and num for policy number. </summary>///<param name="request">The wrapper request object containing PolicyId, PolicyImageNum and PolicyNumber values.</param>///<returns> The wrapper response object containing the returned QuickLookup object. </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyIdAndNumForPolicyNumber" title="Code Example for calling GetPolicyIdAndNumForPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyIdAndNumForPolicyNumber" title="Code Example for calling GetPolicyIdAndNumForPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.RequestData> GetPolicyIdAndNumForPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyIdAndNumForPolicyNumber.RequestData>(proxy, proxy.GetPolicyIdAndNumForPolicyNumber);
            return s;
        }
        ///<summary> Gets the policy message. </summary>///<param name="request">The wrapper request object containing PolicyImageNum, PolicyId values.</param>///<returns> The wrapper response object containing the returned Color, Status, Message values. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetPolicyMessage" title="Code Example for calling GetPolicyMessage function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetPolicyMessage" title="Code Example for calling GetPolicyMessage function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.RequestData> GetPolicyMessage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.Request, Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.Response, Diamond.Common.Services.Messages.PolicyService.GetPolicyMessage.RequestData>(proxy, proxy.GetPolicyMessage);
            return s;
        }
        ///<summary> Gets the previous policy history. </summary>///<param name="request">The wrapper request object containing PolicyId values.</param>///<returns> The wrapper response object containing the returned History object and Success value. </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPreviousPolicyHistory" title="Code Example for calling GetPreviousPolicyHistory function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPreviousPolicyHistory" title="Code Example for calling GetPreviousPolicyHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.Request, Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.Response, Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.RequestData> GetPreviousPolicyHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.Request, Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.Response, Diamond.Common.Services.Messages.PolicyService.GetPreviousPolicyHistory.RequestData>(proxy, proxy.GetPreviousPolicyHistory);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.Request, Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.Response, Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.RequestData> GetStartingImageForRenewalVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.Request, Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.Response, Diamond.Common.Services.Messages.PolicyService.GetStartingImageForRenewalVersion.RequestData>(proxy, proxy.GetStartingImageForRenewalVersion);
            return s;
        }
        ///<summary> Gets the territory data for a given version based on search criteria (zip, city, county, state) </summary>///<param name="request">The wrapper request object containing VersionId, Fieldname (zip, city, county, state) and FieldValue (value to be used in search) fields.</param>///<returns> The wrapper response object containing the returned Territory object. </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond/UI/DetailControlsCore/TerritoryLookup/TerritoryLookup.vb" region="GetTerritoryData" title="Code Example for calling GetTerritoryData function"></code></example>///<code lang="vbnet" source="Diamond/UI/DetailControlsCore/TerritoryLookup/TerritoryLookup.vb" region="GetTerritoryData" title="Code Example for calling GetTerritoryData function"></code>///<remarks> If FieldName is set to 'city' then corresponding FieldValue should be a city name, if FieldName is 'state' then FieldValue should be StateId (say 'IL'), if FieldName is 'zip' then FieldValue a be zip code in format 'xxxxx-0000' (say 641010-0000) </remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.Request, Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.Response, Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.RequestData> GetTerritoryData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.Request, Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.Response, Diamond.Common.Services.Messages.PolicyService.GetTerritoryData.RequestData>(proxy, proxy.GetTerritoryData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.Request, Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.Response, Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.RequestData> GetValidPackagePartTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.Request, Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.Response, Diamond.Common.Services.Messages.PolicyService.GetValidPackagePartTypes.RequestData>(proxy, proxy.GetValidPackagePartTypes);
            return s;
        }
        ///<summary> Returns the corresponding version id for the specified policy id, transaction effective date and transaction type. </summary>///<param name="request">The wrapper request object containing the policy id, transaction effective date and transaction type.</param>///<returns>The wrapper response object containing the returned version id.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdByPolicyId" title="Code Example for calling GetVersionIdByPolicyId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdByPolicyId" title="Code Example for calling GetVersionIdByPolicyId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.RequestData> GetVersionIdByPolicyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyId.RequestData>(proxy, proxy.GetVersionIdByPolicyId);
            return s;
        }
        ///<summary> Returns the corresponding version id for the specified policy number, transaction effective date and transaction type. </summary>///<param name="request">The wrapper request object containing the policy number, transaction effective date and transaction type.</param>///<returns>The wrapper response object containing the returned version id.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdByPolicyNumber" title="Code Example for calling GetVersionIdByPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdByPolicyNumber" title="Code Example for calling GetVersionIdByPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.RequestData> GetVersionIdByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdByPolicyNumber.RequestData>(proxy, proxy.GetVersionIdByPolicyNumber);
            return s;
        }
        ///<summary> Get versionId for package part </summary>///<param name="request">The request object containing PackPartNum, PolicyId and PolicyImageNum.</param>///<returns>A wrapper object containing VersionId</returns>///<example>  <remark>-1 value for versionid indicates that the combination of PolicyId and PolicyImageNum doesn't exist</remark>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdForPackagePart" title="Code Example for calling GetVersionIdForPackagePart function"></code></example>///<remark>-1 value for versionid indicates that the combination of PolicyId and PolicyImageNum doesn't exist</remark>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetVersionIdForPackagePart" title="Code Example for calling GetVersionIdForPackagePart function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.RequestData> GetVersionIdForPackagePart()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionIdForPackagePart.RequestData>(proxy, proxy.GetVersionIdForPackagePart);
            return s;
        }
        ///<summary> GetVersionToSubmit the specified request. </summary>///<param name="request">The wrapper request object containing SubmitVersion object</param>///<returns> The wrapper response object containing the returned Success and TransactionVersion object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\TestRateOnly\TestRateOnly.vb" region="GetVersionToSubmit" title="Code Example for calling GetVersionToSubmit function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\TestRateOnly\TestRateOnly.vb" region="GetVersionToSubmit" title="Code Example for calling GetVersionToSubmit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.RequestData> GetVersionToSubmit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.Request, Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.Response, Diamond.Common.Services.Messages.PolicyService.GetVersionToSubmit.RequestData>(proxy, proxy.GetVersionToSubmit);
            return s;
        }
        ///<summary> Using the Policy_id and/Or the PolicyImageNum provided in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Request">request</see> object into <c>Diamond</c>.  If any Quote (PolicystatusCodeId of 12) or Pending (policystatuscodeid of 4) Image exists for a policyId Return True.  </summary>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Request">request</see>///<c>Diamond</c>///<param name="request">The request containing the populated <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> object.</param>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<returns>A <see cref="T:System.Boolean">HasPendingOrQuoteImage</see></returns>///<see cref="T:System.Boolean">HasPendingOrQuoteImage</see>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.RequestData> HasPendingOrQuoteImageByPolicyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.HasPendingOrQuoteImageByPolicyId.RequestData>(proxy, proxy.HasPendingOrQuoteImageByPolicyId);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.Request, Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.Response, Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.RequestData> ImportPackagePart()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.Request, Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.Response, Diamond.Common.Services.Messages.PolicyService.ImportPackagePart.RequestData>(proxy, proxy.ImportPackagePart);
            return s;
        }
        ///<summary> Imports Umbrella underlying policies. </summary>///<param name="request">The wrapper request object containing the Image to import data into and all UnderlyingPolicy objects to import</param>///<returns> The wrapper response object containing the returned Success and the updated Image object </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\UnderlyingPolicy\UnderlyingPolicySelection.ascx.vb" region="ImportUnderlyingPolicies" title="Code Example for calling ImportUnderlyingPolicies function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\UnderlyingPolicy\UnderlyingPolicySelection.ascx.vb" region="ImportUnderlyingPolicies" title="Code Example for calling ImportUnderlyingPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.Request, Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.Response, Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.RequestData> ImportUnderlyingPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.Request, Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.Response, Diamond.Common.Services.Messages.PolicyService.ImportUnderlyingPolicies.RequestData>(proxy, proxy.ImportUnderlyingPolicies);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.Request, Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.Response, Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.RequestData> IsExternalPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.Request, Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.Response, Diamond.Common.Services.Messages.PolicyService.IsExternalPolicy.RequestData>(proxy, proxy.IsExternalPolicy);
            return s;
        }
        ///<summary> Checks if the new Transaction Effective Date is valid. </summary>///<param name="request">The wrapper request object containing Vin value and PropertyVersion object.</param>///<returns> The wrapper response object containing the returned ModelISO object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="IsNewTEffDateValid" title="Code Example for calling IsNewTEffDateValid function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="IsNewTEffDateValid" title="Code Example for calling IsNewTEffDateValid function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Request, Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Response, Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.RequestData> IsNewTEffDateValid()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Request, Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Response, Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.RequestData>(proxy, proxy.IsNewTEffDateValid);
            return s;
        }
        ///<summary> Issues the specified policy image. </summary>///<param name="PolicyImage">The policy image.</param>///<param name="rate">if set to <c>true</c> [rate].</param>///<c>true</c>///<param name="alreadyValidated">if set to <c>true</c> [already validated].</param>///<c>true</c>///<returns>Boolean indicating success/failure of Policy Issue operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="Issue" title="Code Example for calling Issue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="Issue" title="Code Example for calling Issue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.Issue.Request, Diamond.Common.Services.Messages.PolicyService.Issue.Response, Diamond.Common.Services.Messages.PolicyService.Issue.RequestData> Issue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.Issue.Request, Diamond.Common.Services.Messages.PolicyService.Issue.Response, Diamond.Common.Services.Messages.PolicyService.Issue.RequestData>(proxy, proxy.Issue);
            return s;
        }
        ///<summary> Issues the specified image. </summary>///<param name="request">The wrapper request object containing TransferCash, NewPolicyNumber, IsAutomaticTrans, Rate, PolicyId and ImageNumber values.</param>///<returns> The wrapper response object containing the returned OperationSuccessful value. </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IssueByPolicyId" title="Code Example for calling Issue3 function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IssueByPolicyId" title="Code Example for calling Issue3 function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.RequestData> IssueByPolicyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.Request, Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.Response, Diamond.Common.Services.Messages.PolicyService.IssueByPolicyId.RequestData>(proxy, proxy.IssueByPolicyId);
            return s;
        }
        ///<summary> Loads the Policy Images based on PolicyNumber. </summary>///<param name="request">The wrapper request object containing PolicyNumber</param>///<returns> The wrapper response object containing the returned PolicyImage object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadAllImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.RequestData> LoadAllImagesByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.LoadAllImagesByPolicyNumber.RequestData>(proxy, proxy.LoadAllImagesByPolicyNumber);
            return s;
        }
        ///<summary> Gets the changed images during a date range for a company </summary>///<param name="request">A wrapper request with companyId, startDate, endDate.</param>///<returns>A wrapper response with a datatable.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.Request, Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.Response, Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.RequestData> LoadChangedImagesByDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.Request, Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.Response, Diamond.Common.Services.Messages.PolicyService.LoadChangedImagesByDate.RequestData>(proxy, proxy.LoadChangedImagesByDate);
            return s;
        }
        ///<summary> Loads the client object based on the specified client id. </summary>///<param name="request">The wrapper request object containing the ClientId value.</param>///<returns> The wrapper response object containing the returned <see cref="T:Diamond.Common.Objects.Client" /> object. </returns>///<see cref="T:Diamond.Common.Objects.Client" />///<example>  <code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadClient" title="Code Example for calling LoadClient4 function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadClient" title="Code Example for calling LoadClient4 function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadClient.Request, Diamond.Common.Services.Messages.PolicyService.LoadClient.Response, Diamond.Common.Services.Messages.PolicyService.LoadClient.RequestData> LoadClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadClient.Request, Diamond.Common.Services.Messages.PolicyService.LoadClient.Response, Diamond.Common.Services.Messages.PolicyService.LoadClient.RequestData>(proxy, proxy.LoadClient);
            return s;
        }
        ///<summary> Loads the client object based on the specified client id. </summary>///<param name="request">The wrapper request object containing the ClientId value.</param>///<returns> The wrapper response object containing the returned <see cref="T:Diamond.Common.Objects.Client" /> object. </returns>///<see cref="T:Diamond.Common.Objects.Client" />///<example>  <code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadClientSnapshot" title="Code Example for calling LoadClientSnapshot function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="LoadClientSnapshot" title="Code Example for calling LoadClientSnapshot function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.Request, Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.Response, Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.RequestData> LoadClientSnapshot()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.Request, Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.Response, Diamond.Common.Services.Messages.PolicyService.LoadClientSnapshot.RequestData>(proxy, proxy.LoadClientSnapshot);
            return s;
        }
        ///<summary> Loads the coverage plan defaults. </summary>///<param name="request">The wrapper request object containing AgencyId, CoveragePlanId, VersionId values.</param>///<returns> The wrapper response object containing the returned PlanDetail object. </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\DefaultCoveragePlan\DefaultCoveragePlan.vb" region="LoadCoveragePlanDefaults" title="Code Example for calling LoadCoveragePlanDefaults function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\DefaultCoveragePlan\DefaultCoveragePlan.vb" region="LoadCoveragePlanDefaults" title="Code Example for calling LoadCoveragePlanDefaults function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.Request, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.Response, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.RequestData> LoadCoveragePlanDefaults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.Request, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.Response, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlanDefaults.RequestData>(proxy, proxy.LoadCoveragePlanDefaults);
            return s;
        }
        ///<summary> Loads the coverage plans. </summary>///<param name="request">The wrapper request object containing PolicyImageNum, PolicyId values.</param>///<returns> The wrapper response object containing the returned CoveragePlan object. </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\DefaultCoveragePlan\DefaultCoveragePlan.vb" region="LoadCoveragePlans" title="Code Example for calling LoadCoveragePlans function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\DefaultCoveragePlan\DefaultCoveragePlan.vb" region="LoadCoveragePlans" title="Code Example for calling LoadCoveragePlans function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.Request, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.Response, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.RequestData> LoadCoveragePlans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.Request, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.Response, Diamond.Common.Services.Messages.PolicyService.LoadCoveragePlans.RequestData>(proxy, proxy.LoadCoveragePlans);
            return s;
        }
        ///<summary> Loads the policy detail. </summary>///<param name="request">The wrapper request object containing ClientId</param>///<returns> The wrapper response object containing the returned ClientDetail object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="LoadDetail" title="Code Example for calling LoadDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="LoadDetail" title="Code Example for calling LoadDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadDetail.Request, Diamond.Common.Services.Messages.PolicyService.LoadDetail.Response, Diamond.Common.Services.Messages.PolicyService.LoadDetail.RequestData> LoadDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadDetail.Request, Diamond.Common.Services.Messages.PolicyService.LoadDetail.Response, Diamond.Common.Services.Messages.PolicyService.LoadDetail.RequestData>(proxy, proxy.LoadDetail);
            return s;
        }
        ///<summary> Loads the experience modification record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.Policy" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.Policy" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.ExperienceModification" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.ExperienceModification" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExperienceModification" title="Code Example for calling LoadExperienceModification function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadExperienceModification" title="Code Example for calling LoadExperienceModification function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.Request, Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.Response, Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.RequestData> LoadExperienceModification()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.Request, Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.Response, Diamond.Common.Services.Messages.PolicyService.LoadExperienceModification.RequestData>(proxy, proxy.LoadExperienceModification);
            return s;
        }
        ///<summary> Loads the FilingHistory record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.FilingHistory" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.FilingHistory" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.FilingHistory" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.FilingHistory" />
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.Request, Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.Response, Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.RequestData> LoadFilingHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.Request, Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.Response, Diamond.Common.Services.Messages.PolicyService.LoadFilingHistory.RequestData>(proxy, proxy.LoadFilingHistory);
            return s;
        }
        ///<summary> Loads the FilingInfo record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.FilingInfo" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.FilingInfo" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.FilingInfo" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.FilingInfo" />
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.Request, Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.Response, Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.RequestData> LoadFilingInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.Request, Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.Response, Diamond.Common.Services.Messages.PolicyService.LoadFilingInfo.RequestData>(proxy, proxy.LoadFilingInfo);
            return s;
        }
        ///<summary> Loads the future events. </summary>///<param name="request">The wrapper request object containing SomeData, SomeString, SomeId, TransactionSource, TransactionRemark, TransactionDate, RollDate, FutureEventsTypeId, FutureEventsTypeDscr, FutureEventsNum, UserName and PolicyId values.</param>///<returns> The wrapper response object containing the returned DataItem object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\FutureEvents.vb" region="LoadFutureEvents" title="Code Example for calling LoadFutureEvents function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\FutureEvents.vb" region="LoadFutureEvents" title="Code Example for calling LoadFutureEvents function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.Request, Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.Response, Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.RequestData> LoadFutureEvents()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.Request, Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.Response, Diamond.Common.Services.Messages.PolicyService.LoadFutureEvents.RequestData>(proxy, proxy.LoadFutureEvents);
            return s;
        }
        ///<summary> Loads the Policy Images based on PolicyNumber. </summary>///<param name="request">The wrapper request object containing PolicyNumber</param>///<returns> The wrapper response object containing the returned PolicyImage object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadImage.Request, Diamond.Common.Services.Messages.PolicyService.LoadImage.Response, Diamond.Common.Services.Messages.PolicyService.LoadImage.RequestData> LoadImage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadImage.Request, Diamond.Common.Services.Messages.PolicyService.LoadImage.Response, Diamond.Common.Services.Messages.PolicyService.LoadImage.RequestData>(proxy, proxy.LoadImage);
            return s;
        }
        ///<summary> Loads the Policy Images based on PolicyNumber. </summary>///<param name="request">The wrapper request object containing PolicyNumber</param>///<returns> The wrapper response object containing the returned PolicyImage object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadImagesByPolicyNumber" title="Code Example for calling LoadClient3 function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.RequestData> LoadImagesByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.LoadImagesByPolicyNumber.RequestData>(proxy, proxy.LoadImagesByPolicyNumber);
            return s;
        }
        ///<summary> Loads the inspection record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the policy id.</param>///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.Inspection" /> items and locations.</returns>///<see cref="T:Diamond.Common.Objects.Policy.Inspection" />
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadInspection.Request, Diamond.Common.Services.Messages.PolicyService.LoadInspection.Response, Diamond.Common.Services.Messages.PolicyService.LoadInspection.RequestData> LoadInspection()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadInspection.Request, Diamond.Common.Services.Messages.PolicyService.LoadInspection.Response, Diamond.Common.Services.Messages.PolicyService.LoadInspection.RequestData>(proxy, proxy.LoadInspection);
            return s;
        }
        ///<summary> Loads the misc policy static. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image num.</param>///<returns>A response message encapsulating properties of Policy Image Numbers</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="LoadMiscPolicyStatic" title="Code Example for calling LoadMiscPolicyStatic function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="LoadMiscPolicyStatic" title="Code Example for calling LoadMiscPolicyStatic function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.Request, Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.Response, Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.RequestData> LoadMiscPolicyStatic()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.Request, Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.Response, Diamond.Common.Services.Messages.PolicyService.LoadMiscPolicyStatic.RequestData>(proxy, proxy.LoadMiscPolicyStatic);
            return s;
        }
        ///<summary> To Load OutsideAuditor </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Response" /> to Load OutsideAuditor </returns>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Response" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOutsideAuditor" title="Code Example for calling LoadOutsideAuditor function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOutsideAuditor" title="Code Example for calling LoadOutsideAuditor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.RequestData> LoadOutsideAuditor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditor.RequestData>(proxy, proxy.LoadOutsideAuditor);
            return s;
        }
        ///<summary> To Load Outside Auditor List </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Response" /> to Load Outside Auditor List </returns>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="LoadOutsideAuditorList" title="Code Example for calling LoadOutsideAuditorList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="LoadOutsideAuditorList" title="Code Example for calling LoadOutsideAuditorList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.RequestData> LoadOutsideAuditorList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorList.RequestData>(proxy, proxy.LoadOutsideAuditorList);
            return s;
        }
        ///<summary> To Load OutsideAuditor Names </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Request" />///<returns> A wrapper <see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Response" /> to Load OutsideAuditor Names </returns>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadOutsideAuditorNames" title="Code Example for calling LoadOutsideAuditorNames function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadOutsideAuditorNames" title="Code Example for calling LoadOutsideAuditorNames function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.RequestData> LoadOutsideAuditorNames()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Request, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.Response, Diamond.Common.Services.Messages.PolicyService.LoadOutsideAuditorNames.RequestData>(proxy, proxy.LoadOutsideAuditorNames);
            return s;
        }
        ///<summary> Load package part list </summary>///<param name="request">The request object containing PolicyId and PolicyImageNum.</param>///<returns>A Collection of DataItems containing PackagePartNum and PackagePartTypeDescription</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="LoadPackagePartList" title="Code Example for calling LoadPackagePartList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Claim\NewClaim.vb" region="LoadPackagePartList" title="Code Example for calling LoadPackagePartList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.RequestData> LoadPackagePartList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPackagePartList.RequestData>(proxy, proxy.LoadPackagePartList);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.RequestData> LoadPolicyActivities()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyActivities.RequestData>(proxy, proxy.LoadPolicyActivities);
            return s;
        }
        ///<summary> Loads the Policy Audit List record(s) associated with the specified policy and renewal version. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.PolicyAuditList" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.PolicyAuditList" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicyAuditList" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicyAuditList" />///<example>  <code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadPolicyAuditList" title="Code Example for calling LoadPolicyAuditList function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadPolicyAuditList" title="Code Example for calling LoadPolicyAuditList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.RequestData> LoadPolicyAuditList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAuditList.RequestData>(proxy, proxy.LoadPolicyAuditList);
            return s;
        }
        ///<summary> Loads the Policy Audit record(s) associated with the specified policy and renewal version. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" />///<example>  <code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadPolicyAudits" title="Code Example for calling LoadPolicyAudits function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="LoadPolicyAudits" title="Code Example for calling LoadPolicyAudits function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.RequestData> LoadPolicyAudits()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyAudits.RequestData>(proxy, proxy.LoadPolicyAudits);
            return s;
        }
        ///<summary> Function to load policy detail information </summary>///<param name="request"> A request message encapsulating Policy Id and Policy Image Number </param>///<returns> A response message encapsulating Policy Details </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="LoadPolicyDetail" title="Code Example for calling LoadPolicyDetail function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="LoadPolicyDetail" title="Code Example for calling LoadPolicyDetail function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.RequestData> LoadPolicyDetail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicyDetail.RequestData>(proxy, proxy.LoadPolicyDetail);
            return s;
        }
        ///<summary> Loads all of the policy search types currently in the system that are being overriden by user type. </summary>///<param name="request">The wrapper request object.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Administration.PolicySearchType" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Administration.PolicySearchType" />///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.RequestData> LoadPolicySearchTypeViewableByUserCategoryList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.Request, Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.Response, Diamond.Common.Services.Messages.PolicyService.LoadPolicySearchTypeViewableByUserCategoryList.RequestData>(proxy, proxy.LoadPolicySearchTypeViewableByUserCategoryList);
            return s;
        }
        ///<summary> Loads the ProblemPolicyAccount record(s) associated with the specified policy_id or client_id. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.Policy" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.Policy" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.ProblemPolicyAccount" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.ProblemPolicyAccount" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadProblemPolicyAccount" title="Code Example for calling LoadProblemPolicyAccount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadProblemPolicyAccount" title="Code Example for calling LoadProblemPolicyAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.Request, Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.Response, Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.RequestData> LoadProblemPolicyAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.Request, Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.Response, Diamond.Common.Services.Messages.PolicyService.LoadProblemPolicyAccounts.RequestData>(proxy, proxy.LoadProblemPolicyAccounts);
            return s;
        }
        ///<summary> Loads the recent billing list for user. </summary>///<param name="request">The wrapper request object containing UsersId value.</param>///<returns> The wrapper response object containing the returned BillingAccountId value. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickBillingLookupForm.vb" region="LoadRecentBillingListForUser" title="Code Example for calling LoadRecentBillingListForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickBillingLookupForm.vb" region="LoadRecentBillingListForUser" title="Code Example for calling LoadRecentBillingListForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.Request, Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.Response, Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.RequestData> LoadRecentBillingListForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.Request, Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.Response, Diamond.Common.Services.Messages.PolicyService.LoadRecentBillingListForUser.RequestData>(proxy, proxy.LoadRecentBillingListForUser);
            return s;
        }
        ///<summary> Loads the recent policy list for user. </summary>///<param name="request">The wrapper request object containing PolicyId and PolicyImageNum values.</param>///<returns> The wrapper response object containing the returned PolicyImage object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickPolicyLookupForm.vb" region="LoadRecentPolicyListForUser" title="Code Example for calling LoadRecentPolicyListForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\QuickPolicyLookupForm.vb" region="LoadRecentPolicyListForUser" title="Code Example for calling LoadRecentPolicyListForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.Request, Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.Response, Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.RequestData> LoadRecentPolicyListForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.Request, Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.Response, Diamond.Common.Services.Messages.PolicyService.LoadRecentPolicyListForUser.RequestData>(proxy, proxy.LoadRecentPolicyListForUser);
            return s;
        }
        ///<summary> Loads renewal underwriting items for the specified <see cref="T:Diamond.Common.Objects.Policy.Policy" />. </summary>///<see cref="T:Diamond.Common.Objects.Policy.Policy" />///<param name="request">The wrapper request object containing the policy id, policy image number, and version id.</param>///<returns>The wrapper response object containing a collection of <see cref="T:Diamond.Common.Objects.Policy.RenewalUnderwriting" /> objects.</returns>///<see cref="T:Diamond.Common.Objects.Policy.RenewalUnderwriting" />///<example>  <code lang="vbnet" source="Diamond/UI/Policy/Controls/RenewalUnderwritingControl.vb" region="LoadRenewalUnderwriting" title="Code Example for calling LoadRenewalUnderwriting function"></code></example>///<code lang="vbnet" source="Diamond/UI/Policy/Controls/RenewalUnderwritingControl.vb" region="LoadRenewalUnderwriting" title="Code Example for calling LoadRenewalUnderwriting function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.Request, Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.Response, Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.RequestData> LoadRenewalUnderwriting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.Request, Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.Response, Diamond.Common.Services.Messages.PolicyService.LoadRenewalUnderwriting.RequestData>(proxy, proxy.LoadRenewalUnderwriting);
            return s;
        }
        ///<summary> Loads a summary of the changes for the specified <see cref="T:Diamond.Common.Objects.Policy.Image" />. </summary>///<see cref="T:Diamond.Common.Objects.Policy.Image" />///<param name="request">The wrapper request object containing the policy id and policy image number.</param>///<returns>The wrapper response object containing a collection of <see cref="T:Diamond.Common.Objects.Transactions.EndorsementChange" /> objects.</returns>///<see cref="T:Diamond.Common.Objects.Transactions.EndorsementChange" />///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Controls\SummaryOfChangesControl.vb" region="LoadSummaryOfChanges" title="Code Example for calling LoadSummaryOfChanges function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Controls\SummaryOfChangesControl.vb" region="LoadSummaryOfChanges" title="Code Example for calling LoadSummaryOfChanges function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.Request, Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.Response, Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.RequestData> LoadSummaryOfChanges()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.Request, Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.Response, Diamond.Common.Services.Messages.PolicyService.LoadSummaryOfChanges.RequestData>(proxy, proxy.LoadSummaryOfChanges);
            return s;
        }
        ///<summary> Loads information about each term for a policy. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.Request, Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.Response, Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.RequestData> LoadTermInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.Request, Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.Response, Diamond.Common.Services.Messages.PolicyService.LoadTermInformation.RequestData>(proxy, proxy.LoadTermInformation);
            return s;
        }
        ///<summary> Loads the collection of third party designees for a policy. </summary>///<param name="request">The wrapper request object containing the PolicyId and PolicyImageNum</param>///<returns>A wrapper response object containing the collection of third party designees</returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.Request, Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.Response, Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.RequestData> LoadThirdPartyDesignee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.Request, Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.Response, Diamond.Common.Services.Messages.PolicyService.LoadThirdPartyDesignee.RequestData>(proxy, proxy.LoadThirdPartyDesignee);
            return s;
        }
        ///<summary> Loads the transactions  </summary>///<param name="request">The wrapper request object containing ClientId</param>///<returns> The wrapper response object containing collection of Transaction object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadTransactions" title="Code Example for calling LoadTransactions function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadTransactions" title="Code Example for calling LoadTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadTransactions.Request, Diamond.Common.Services.Messages.PolicyService.LoadTransactions.Response, Diamond.Common.Services.Messages.PolicyService.LoadTransactions.RequestData> LoadTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadTransactions.Request, Diamond.Common.Services.Messages.PolicyService.LoadTransactions.Response, Diamond.Common.Services.Messages.PolicyService.LoadTransactions.RequestData>(proxy, proxy.LoadTransactions);
            return s;
        }
        ///<summary> Loads the stored validations for policyID and policyImageNum </summary>///<param name="request">PolicyID  and PolicyImageNum</param>///<returns> A loaded DiamondValidation object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadValidation" title="Code Example for calling LoadValidation function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadValidation" title="Code Example for calling LoadValidation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadValidation.Request, Diamond.Common.Services.Messages.PolicyService.LoadValidation.Response, Diamond.Common.Services.Messages.PolicyService.LoadValidation.RequestData> LoadValidation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LoadValidation.Request, Diamond.Common.Services.Messages.PolicyService.LoadValidation.Response, Diamond.Common.Services.Messages.PolicyService.LoadValidation.RequestData>(proxy, proxy.LoadValidation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.Request, Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.Response, Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.RequestData> LogClientRulesActivity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.Request, Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.Response, Diamond.Common.Services.Messages.PolicyService.LogClientRulesActivity.RequestData>(proxy, proxy.LogClientRulesActivity);
            return s;
        }
        ///<summary> Gets the client policies that can be selected for the multi policy Discount. </summary>///<param name="request">The wrapper request object containing Lookup Information</param>///<returns> The wrapper response object containing the returned Success and a collection of Policies object </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\MultiPolicyDiscountPolicies\MultiPolicyDiscountPoliciesPolicySelection.ascx.vb" region="LookupMultiPolicyDiscountPolicies" title="Code Example for calling LookupMultiPolicyDiscountPolicies function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\MultiPolicyDiscountPolicies\MultiPolicyDiscountPoliciesPolicySelection.ascx.vb" region="LookupMultiPolicyDiscountPolicies" title="Code Example for calling LookupMultiPolicyDiscountPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.Request, Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.Response, Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.RequestData> LookupMultiPolicyDiscountPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.Request, Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.Response, Diamond.Common.Services.Messages.PolicyService.LookupMultiPolicyDiscountPolicies.RequestData>(proxy, proxy.LookupMultiPolicyDiscountPolicies);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.Request, Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.Response, Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.RequestData> LookupPolicyPromo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.Request, Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.Response, Diamond.Common.Services.Messages.PolicyService.LookupPolicyPromo.RequestData>(proxy, proxy.LookupPolicyPromo);
            return s;
        }
        ///<summary> Gets the client policies that can be underlying policies for an Umbrella. </summary>///<param name="request">The wrapper request object containing Lookup Information</param>///<returns> The wrapper response object containing the returned Success and a collection of Underlying Policies object </returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\UnderlyingPolicy\UnderlyingPolicySelection.ascx.vb" region="LookupUnderlyingPolicies" title="Code Example for calling LookupUnderlyingPolicies function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\DetailControlsCore\UnderlyingPolicy\UnderlyingPolicySelection.ascx.vb" region="LookupUnderlyingPolicies" title="Code Example for calling LookupUnderlyingPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.Request, Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.Response, Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.RequestData> LookupUnderlyingPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.Request, Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.Response, Diamond.Common.Services.Messages.PolicyService.LookupUnderlyingPolicies.RequestData>(proxy, proxy.LookupUnderlyingPolicies);
            return s;
        }
        ///<summary> Compares the specified policy images /&gt;. </summary>///<param name="request">The wrapper request object containing the policy id and policy image number.</param>///<returns>The wrapper response object containing an xml of changes.</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.Request, Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.Response, Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.RequestData> PolicyImageCompare()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.Request, Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.Response, Diamond.Common.Services.Messages.PolicyService.PolicyImageCompare.RequestData>(proxy, proxy.PolicyImageCompare);
            return s;
        }
        ///<summary> Returns AACS Validation for a given policy image. </summary>///<param name="request">The wrapper request object containing the <c>PolicyImage</c>, <c>IsRating</c>, and <c>DiamondValidation</c>.</param>///<c>PolicyImage</c>///<c>IsRating</c>///<c>DiamondValidation</c>///<returns> The wrapper response object a<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> and DiamondValidation </returns>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessAACS" title="Code Example for calling ProcessAACS function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessAACS" title="Code Example for calling ProcessAACS function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ProcessAACS.Request, Diamond.Common.Services.Messages.PolicyService.ProcessAACS.Response, Diamond.Common.Services.Messages.PolicyService.ProcessAACS.RequestData> ProcessAACS()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ProcessAACS.Request, Diamond.Common.Services.Messages.PolicyService.ProcessAACS.Response, Diamond.Common.Services.Messages.PolicyService.ProcessAACS.RequestData>(proxy, proxy.ProcessAACS);
            return s;
        }
        ///<summary> Promotes the quote to pending. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image num.</param>///<param name="usersId">The users id.</param>///<returns>Policy Image object.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="PromoteQuoteToPending" title="Code Example for calling PromoteQuoteToPending function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="PromoteQuoteToPending" title="Code Example for calling PromoteQuoteToPending function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.Request, Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.Response, Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.RequestData> PromoteQuoteToPending()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.Request, Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.Response, Diamond.Common.Services.Messages.PolicyService.PromoteQuoteToPending.RequestData>(proxy, proxy.PromoteQuoteToPending);
            return s;
        }
        ///<summary> Queries for billingaccount number. </summary>///<param name="request">The wrapper request object containing billingaccount number value.</param>///<returns> The wrapper response object containing the returned DataItem object. </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="QueryForBillingAccountNumber" title="Code Example for calling QueryForBillingAccountNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="QueryForBillingAccountNumber" title="Code Example for calling QueryForBillingAccountNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.Request, Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.Response, Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.RequestData> QueryForBillingAccountNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.Request, Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.Response, Diamond.Common.Services.Messages.PolicyService.QueryForBillingAccountNumber.RequestData>(proxy, proxy.QueryForBillingAccountNumber);
            return s;
        }
        ///<summary> Get PolicyId, PolicyImageNum and other details based on policy number. </summary>///<param name="request">The wrapper request object containing PolicyNumber value.</param>///<returns> The wrapper response object containing the returned DataItem object including PolicyId, PolicyImageNum etc  </returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\ModalDialogs\PolicySelectionForm.vb" region="QueryForPolicyNumber" title="Code Example for calling QueryForPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\ModalDialogs\PolicySelectionForm.vb" region="QueryForPolicyNumber" title="Code Example for calling QueryForPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.RequestData> QueryForPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.QueryForPolicyNumber.RequestData>(proxy, proxy.QueryForPolicyNumber);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.Request, Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.Response, Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.RequestData> QueuePolicyForExport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.Request, Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.Response, Diamond.Common.Services.Messages.PolicyService.QueuePolicyForExport.RequestData>(proxy, proxy.QueuePolicyForExport);
            return s;
        }
        ///<summary> Rates the specified request. </summary>///<param name="request">The wrapper request object containing PolicyImage object</param>///<returns> The wrapper response object containing the returned Success and PolicyImage object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Rate1" title="Code Example for calling Rate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="Rate1" title="Code Example for calling Rate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.Rate.Request, Diamond.Common.Services.Messages.PolicyService.Rate.Response, Diamond.Common.Services.Messages.PolicyService.Rate.RequestData> Rate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.Rate.Request, Diamond.Common.Services.Messages.PolicyService.Rate.Response, Diamond.Common.Services.Messages.PolicyService.Rate.RequestData>(proxy, proxy.Rate);
            return s;
        }
        ///<summary> RateOnly the specified request. </summary>///<param name="request">The wrapper request object containing PolicyImage object</param>///<returns> The wrapper response object containing the returned Success and PolicyImage object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\TestRateOnly\TestRateOnly.vb" region="RateOnly" title="Code Example for calling RateOnly function"></code></example>///<code lang="vbnet" source="Diamond\UI\CompanyConfigurationTool\TestRateOnly\TestRateOnly.vb" region="RateOnly" title="Code Example for calling RateOnly function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.RateOnly.Request, Diamond.Common.Services.Messages.PolicyService.RateOnly.Response, Diamond.Common.Services.Messages.PolicyService.RateOnly.RequestData> RateOnly()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.RateOnly.Request, Diamond.Common.Services.Messages.PolicyService.RateOnly.Response, Diamond.Common.Services.Messages.PolicyService.RateOnly.RequestData>(proxy, proxy.RateOnly);
            return s;
        }
        ///<summary> Promotes the quote to pending new business. </summary>///<param name="request">The wrapper request object containing Usersid, PolicyId, and PolicyImageNum values.</param>///<returns> The wrapper response object containing the returned PolicyImage object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="PromoteQuoteToPending" title="Code Example for calling PromoteQuoteToPending function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="PromoteQuoteToPending" title="Code Example for calling PromoteQuoteToPending function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Request, Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Response, Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.RequestData> RouteQuoteToUnderwriting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Request, Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Response, Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.RequestData>(proxy, proxy.RouteQuoteToUnderwriting);
            return s;
        }
        ///<summary> Loads the rule log entries based on the specified criteria. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.Request, Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.Response, Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.RequestData> RuleLogLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.Request, Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.Response, Diamond.Common.Services.Messages.PolicyService.RuleLogLoad.RequestData>(proxy, proxy.RuleLogLoad);
            return s;
        }
        ///<summary> Loads the rule log entries based on the specified criteria. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.Request, Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.Response, Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.RequestData> RuleOverrideLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.Request, Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.Response, Diamond.Common.Services.Messages.PolicyService.RuleOverrideLoad.RequestData>(proxy, proxy.RuleOverrideLoad);
            return s;
        }
        ///<summary> Saves the client info. </summary>///<param name="request">The wrapper request object containing Client Info</param>///<returns> The wrapper response object containing the returned Client Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="SaveClientInfo" title="Code Example for calling SaveClientInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="SaveClientInfo" title="Code Example for calling SaveClientInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClient.Request, Diamond.Common.Services.Messages.PolicyService.SaveClient.Response, Diamond.Common.Services.Messages.PolicyService.SaveClient.RequestData> SaveClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClient.Request, Diamond.Common.Services.Messages.PolicyService.SaveClient.Response, Diamond.Common.Services.Messages.PolicyService.SaveClient.RequestData>(proxy, proxy.SaveClient);
            return s;
        }
        ///<summary> Save the client conversation object </summary>///<param name="request">The wrapper request object containing the conversation object.</param>///<returns> The wrapper response object containing a success value. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.Request, Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.Response, Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.RequestData> SaveClientConversation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.Request, Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.Response, Diamond.Common.Services.Messages.PolicyService.SaveClientConversation.RequestData>(proxy, proxy.SaveClientConversation);
            return s;
        }
        ///<summary> Saves the client info. </summary>///<param name="request">The wrapper request object containing Client Info</param>///<returns> The wrapper response object containing the returned Client Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="SaveClientInfo" title="Code Example for calling SaveClientInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ClientInformation.vb" region="SaveClientInfo" title="Code Example for calling SaveClientInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.Request, Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.Response, Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.RequestData> SaveClientInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.Request, Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.Response, Diamond.Common.Services.Messages.PolicyService.SaveClientInfo.RequestData>(proxy, proxy.SaveClientInfo);
            return s;
        }
        ///<summary> Saves the experience modification record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.Policy" /> and the collection of <see cref="T:Diamond.Common.Objects.Policy.ExperienceModification" /> items.</param>///<see cref="T:Diamond.Common.Objects.Policy.Policy" />///<see cref="T:Diamond.Common.Objects.Policy.ExperienceModification" />///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\ExperienceModificationAddEditForm.vb" region="SaveExperienceModification" title="Code Example for calling SaveExperienceModification function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\ExperienceModificationAddEditForm.vb" region="SaveExperienceModification" title="Code Example for calling SaveExperienceModification function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.Request, Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.Response, Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.RequestData> SaveExperienceModification()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.Request, Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.Response, Diamond.Common.Services.Messages.PolicyService.SaveExperienceModification.RequestData>(proxy, proxy.SaveExperienceModification);
            return s;
        }
        ///<summary> Saves the FilingHistory record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.FilingHistory" /> and the collection of <see cref="T:Diamond.Common.Objects.Policy.FilingHistory" /> items.</param>///<see cref="T:Diamond.Common.Objects.Policy.FilingHistory" />///<see cref="T:Diamond.Common.Objects.Policy.FilingHistory" />///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.Request, Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.Response, Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.RequestData> SaveFilingHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.Request, Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.Response, Diamond.Common.Services.Messages.PolicyService.SaveFilingHistory.RequestData>(proxy, proxy.SaveFilingHistory);
            return s;
        }
        ///<summary> Saves the FilingInfo record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.FilingInfo" /> and the collection of <see cref="T:Diamond.Common.Objects.Policy.FilingInfo" /> items.</param>///<see cref="T:Diamond.Common.Objects.Policy.FilingInfo" />///<see cref="T:Diamond.Common.Objects.Policy.FilingInfo" />///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.Request, Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.Response, Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.RequestData> SaveFilingInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.Request, Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.Response, Diamond.Common.Services.Messages.PolicyService.SaveFilingInfo.RequestData>(proxy, proxy.SaveFilingInfo);
            return s;
        }
        ///<summary> Saves the inspection record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the policy id and the collection of <see cref="T:Diamond.Common.Objects.Policy.Inspection" /> items.</param>///<see cref="T:Diamond.Common.Objects.Policy.Inspection" />///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveInspection.Request, Diamond.Common.Services.Messages.PolicyService.SaveInspection.Response, Diamond.Common.Services.Messages.PolicyService.SaveInspection.RequestData> SaveInspection()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveInspection.Request, Diamond.Common.Services.Messages.PolicyService.SaveInspection.Response, Diamond.Common.Services.Messages.PolicyService.SaveInspection.RequestData>(proxy, proxy.SaveInspection);
            return s;
        }
        ///<summary> Save a Claim OutsideAuditor  </summary>///<param name="request">The request takes in the  <see cref="T:Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Request" /> object</param>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Request" />///<returns> A <see cref="T:Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Response" /> object containing the success/failure status of the save. </returns>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="SaveOutsideAuditor" title="Code Example for calling SaveOutsideAuditor function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\OutsideAuditors\OutsideAuditorList.vb" region="SaveOutsideAuditor" title="Code Example for calling SaveOutsideAuditor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.RequestData> SaveOutsideAuditor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Request, Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.Response, Diamond.Common.Services.Messages.PolicyService.SaveOutsideAuditor.RequestData>(proxy, proxy.SaveOutsideAuditor);
            return s;
        }
        ///<summary> Saves the Policy Audit record(s) associated with the specified policy. </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" /> and the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" /> items.</param>///<see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" />///<see cref="T:Diamond.Common.Objects.Policy.PolicyAudit" />///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="SavePolicyAudits" title="Code Example for calling SavePolicyAudits function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\AuditControl.vb" region="SavePolicyAudits" title="Code Example for calling SavePolicyAudits function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.Request, Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.Response, Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.RequestData> SavePolicyAudits()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.Request, Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.Response, Diamond.Common.Services.Messages.PolicyService.SavePolicyAudits.RequestData>(proxy, proxy.SavePolicyAudits);
            return s;
        }
        ///<summary> Saves the specified policy search type. </summary>///<param name="request">The wrapper request object containing the policy search type to save.</param>///<returns>The wrapper response containing a result flag that indicates if the item was successfully saved.</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.Request, Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.Response, Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.RequestData> SavePolicySearchTypeViewableByUserCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.Request, Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.Response, Diamond.Common.Services.Messages.PolicyService.SavePolicySearchTypeViewableByUserCategory.RequestData>(proxy, proxy.SavePolicySearchTypeViewableByUserCategory);
            return s;
        }
        ///<summary> Saves the ProblemPolicyAccount record(s). </summary>///<param name="request">The wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Policy.Policy" />.</param>///<see cref="T:Diamond.Common.Objects.Policy.Policy" />///<returns>The wrapper response object containing the collection of <see cref="T:Diamond.Common.Objects.Policy.ProblemPolicyAccount" /> items.</returns>///<see cref="T:Diamond.Common.Objects.Policy.ProblemPolicyAccount" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadProblemPolicyAccount" title="Code Example for calling LoadProblemPolicyAccount function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadProblemPolicyAccount" title="Code Example for calling LoadProblemPolicyAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.Request, Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.Response, Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.RequestData> SaveProblemPolicyAccounts()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.Request, Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.Response, Diamond.Common.Services.Messages.PolicyService.SaveProblemPolicyAccounts.RequestData>(proxy, proxy.SaveProblemPolicyAccounts);
            return s;
        }
        ///<summary> Saves and rates the specified image. </summary>///<param name="request">The request contains the image, package part identifiers, and validation screen type.</param>///<returns>A response wrapper object containing the following: <p> Image: Image that has either been saved or rated successfully.    If nothing was done, then nothing is returned. SaveSuccessful: Flag that indicates the image was successfully saved. RateSuccessful: Flag that indicates the image was successfully rated. </p></returns>///<p> Image: Image that has either been saved or rated successfully.    If nothing was done, then nothing is returned. SaveSuccessful: Flag that indicates the image was successfully saved. RateSuccessful: Flag that indicates the image was successfully rated. </p>///<remarks>The currently signed on user must have both the Save and Rate authorities.</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRate.Request, Diamond.Common.Services.Messages.PolicyService.SaveRate.Response, Diamond.Common.Services.Messages.PolicyService.SaveRate.RequestData> SaveRate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRate.Request, Diamond.Common.Services.Messages.PolicyService.SaveRate.Response, Diamond.Common.Services.Messages.PolicyService.SaveRate.RequestData>(proxy, proxy.SaveRate);
            return s;
        }
        ///<summary> Saves, rates and issues the specified image. </summary>///<param name="request">The request contains the image, package part identifiers, validation screen type, and the ReturnIssuedImage flag.</param>///<returns>A response wrapper object containing the following: <p> Image: Image that has been successfully saved or rated.  If the image was successfully issued and the ReturnIssuedImage flag in the request is true, then the issued image will be returned.  If nothing was done, then nothing is returned. SaveSuccessful: Flag that indicates the image was successfully saved. RateSuccessful: Flag that indicates the image was successfully rated. IssueSuccessful: Flag that indicates the image was successfully issued. </p></returns>///<p> Image: Image that has been successfully saved or rated.  If the image was successfully issued and the ReturnIssuedImage flag in the request is true, then the issued image will be returned.  If nothing was done, then nothing is returned. SaveSuccessful: Flag that indicates the image was successfully saved. RateSuccessful: Flag that indicates the image was successfully rated. IssueSuccessful: Flag that indicates the image was successfully issued. </p>///<remarks>The currently signed on user must have both the Save, Rate and appropriate Issue authorities.</remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.Request, Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.Response, Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.RequestData> SaveRateIssue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.Request, Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.Response, Diamond.Common.Services.Messages.PolicyService.SaveRateIssue.RequestData>(proxy, proxy.SaveRateIssue);
            return s;
        }
        ///<summary> Saves the recent billing for user. </summary>///<param name="request">The wrapper request object containing BillingAccountId and UsersId values.</param>///<returns> The wrapper response object containing the returned Success value. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.Request, Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.Response, Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.RequestData> SaveRecentBillingForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.Request, Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.Response, Diamond.Common.Services.Messages.PolicyService.SaveRecentBillingForUser.RequestData>(proxy, proxy.SaveRecentBillingForUser);
            return s;
        }
        ///<summary> Saves the recent policy for user. </summary>///<param name="request">The wrapper request object containing PolicyNumber and UsersId values.</param>///<returns> The wrapper response object containing the returned Success value. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="SaveRecentPolicyForUser" title="Code Example for calling SaveRecentPolicyForUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="SaveRecentPolicyForUser" title="Code Example for calling SaveRecentPolicyForUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.Request, Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.Response, Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.RequestData> SaveRecentPolicyForUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.Request, Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.Response, Diamond.Common.Services.Messages.PolicyService.SaveRecentPolicyForUser.RequestData>(proxy, proxy.SaveRecentPolicyForUser);
            return s;
        }
        ///<summary> Saves the collection of third party designees for a policy. </summary>///<param name="request">The wrapper request object containing the PolicyId, PolicyImageNum, and the collection of third party designees</param>///<returns>A wrapper response object containing the success of the save</returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.Request, Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.Response, Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.RequestData> SaveThirdPartyDesignee()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.Request, Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.Response, Diamond.Common.Services.Messages.PolicyService.SaveThirdPartyDesignee.RequestData>(proxy, proxy.SaveThirdPartyDesignee);
            return s;
        }
        ///<summary> Saves the trans remark. </summary>///<param name="request">The wrapper request object containing RemarkTxt, PolicyImageNum and PolicyId values.</param>///<returns> The wrapper response object containing the returned Success value. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\RemarkForm.vb" region="SaveTransRemark" title="Code Example for calling SaveTransRemark function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\RemarkForm.vb" region="SaveTransRemark" title="Code Example for calling SaveTransRemark function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.Request, Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.Response, Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.RequestData> SaveTransRemark()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.Request, Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.Response, Diamond.Common.Services.Messages.PolicyService.SaveTransRemark.RequestData>(proxy, proxy.SaveTransRemark);
            return s;
        }
        ///<summary> Searches for policies by using the name of an additional policyholder. </summary>///<param name="request">The wrapper request containing the additional policyholder name and the partial match flag.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAdditionalPolicyHolder1" title="Code Example for calling SearchByAdditionalPolicyHolder function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAdditionalPolicyHolder2" title="Code Example for calling SearchByAdditionalPolicyHolder function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAdditionalPolicyHolder1" title="Code Example for calling SearchByAdditionalPolicyHolder function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAdditionalPolicyHolder2" title="Code Example for calling SearchByAdditionalPolicyHolder function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.Request, Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.Response, Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.RequestData> SearchByAdditionalPolicyHolder()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.Request, Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.Response, Diamond.Common.Services.Messages.PolicyService.SearchByAdditionalPolicyHolder.RequestData>(proxy, proxy.SearchByAdditionalPolicyHolder);
            return s;
        }
        ///<summary> Searches for policies by using the address of either the primary or secondary policyholder. </summary>///<param name="request">The wrapper request containing the house number, street name, apartment or suite number, post office box, city, state, zip, and the partial match flag.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAddress1" title="Code Example for calling SearchByAddress function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAddress2" title="Code Example for calling SearchByAddress function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAddress1" title="Code Example for calling SearchByAddress function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByAddress2" title="Code Example for calling SearchByAddress function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByAddress.Request, Diamond.Common.Services.Messages.PolicyService.SearchByAddress.Response, Diamond.Common.Services.Messages.PolicyService.SearchByAddress.RequestData> SearchByAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByAddress.Request, Diamond.Common.Services.Messages.PolicyService.SearchByAddress.Response, Diamond.Common.Services.Messages.PolicyService.SearchByAddress.RequestData>(proxy, proxy.SearchByAddress);
            return s;
        }
        ///<summary> Searches for all policies for a client, which is found using the policyId passed in. </summary>///<param name="request">The wrapper request containing the policy id.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByClient.Request, Diamond.Common.Services.Messages.PolicyService.SearchByClient.Response, Diamond.Common.Services.Messages.PolicyService.SearchByClient.RequestData> SearchByClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByClient.Request, Diamond.Common.Services.Messages.PolicyService.SearchByClient.Response, Diamond.Common.Services.Messages.PolicyService.SearchByClient.RequestData>(proxy, proxy.SearchByClient);
            return s;
        }
        ///<summary> Searches for policies by using the Companion Policy Number. </summary>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.RequestData> SearchByCompanionPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByCompanionPolicyNumber.RequestData>(proxy, proxy.SearchByCompanionPolicyNumber);
            return s;
        }
        ///<summary> Searches for policies by using the doing business as value for the primary policyholder. </summary>///<param name="request">The wrapper request containing the doing business as value and the partial match flag.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByDoingBusinessAs1" title="Code Example for calling SearchByDoingBusinessAs function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByDoingBusinessAs2" title="Code Example for calling SearchByDoingBusinessAs function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByDoingBusinessAs1" title="Code Example for calling SearchByDoingBusinessAs function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByDoingBusinessAs2" title="Code Example for calling SearchByDoingBusinessAs function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.Request, Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.Response, Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.RequestData> SearchByDoingBusinessAs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.Request, Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.Response, Diamond.Common.Services.Messages.PolicyService.SearchByDoingBusinessAs.RequestData>(proxy, proxy.SearchByDoingBusinessAs);
            return s;
        }
        ///<summary> Searches for policies by using the full name (a.k.a. Display Name) of either the primary or secondary policyholder. </summary>///<param name="request">The wrapper request containing the full name of policyholder and the partial match flag.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByFullName1" title="Code Example for calling SearchByFullName function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByFullName2" title="Code Example for calling SearchByFullName function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByFullName1" title="Code Example for calling SearchByFullName function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByFullName2" title="Code Example for calling SearchByFullName function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByFullName.Request, Diamond.Common.Services.Messages.PolicyService.SearchByFullName.Response, Diamond.Common.Services.Messages.PolicyService.SearchByFullName.RequestData> SearchByFullName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByFullName.Request, Diamond.Common.Services.Messages.PolicyService.SearchByFullName.Response, Diamond.Common.Services.Messages.PolicyService.SearchByFullName.RequestData>(proxy, proxy.SearchByFullName);
            return s;
        }
        ///<summary> Searches for policies or quotes by using the manually created client identifier. </summary>///<param name="request">The wrapper request containing the manually created client identifier.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SearchByManuallyCreatedClientIdentifier" title="Code Example for calling SearchByManuallyCreatedClientIdentifier function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SearchByManuallyCreatedClientIdentifier" title="Code Example for calling SearchByManuallyCreatedClientIdentifier function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.Request, Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.Response, Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.RequestData> SearchByManuallyCreatedClientIdentifier()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.Request, Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.Response, Diamond.Common.Services.Messages.PolicyService.SearchByManuallyCreatedClientIdentifier.RequestData>(proxy, proxy.SearchByManuallyCreatedClientIdentifier);
            return s;
        }
        ///<summary> Searches for policies by using the first, middle or last name of either the primary or secondary policyholder. </summary>///<param name="request">The wrapper request containing the first name, middle name, last name, and the partial match flag.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByName1" title="Code Example for calling SearchByName function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByName2" title="Code Example for calling SearchByName function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByName1" title="Code Example for calling SearchByName function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByName2" title="Code Example for calling SearchByName function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByName.Request, Diamond.Common.Services.Messages.PolicyService.SearchByName.Response, Diamond.Common.Services.Messages.PolicyService.SearchByName.RequestData> SearchByName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByName.Request, Diamond.Common.Services.Messages.PolicyService.SearchByName.Response, Diamond.Common.Services.Messages.PolicyService.SearchByName.RequestData>(proxy, proxy.SearchByName);
            return s;
        }
        ///<summary> Searches for policies by using a phone number of either the primary or secondary policyholder. </summary>///<param name="request">The wrapper request containing a phone number.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPhoneNumber1" title="Code Example for calling SearchByPhoneNumber function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPhoneNumber2" title="Code Example for calling SearchByPhoneNumber function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPhoneNumber1" title="Code Example for calling SearchByPhoneNumber function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPhoneNumber2" title="Code Example for calling SearchByPhoneNumber function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.RequestData> SearchByPhoneNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByPhoneNumber.RequestData>(proxy, proxy.SearchByPhoneNumber);
            return s;
        }
        ///<summary> Searches for policies by using the policy number. </summary>///<param name="request">The wrapper request containing the policy number.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPolicyNumber1" title="Code Example for calling SearchByPolicyNumber function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPolicyNumber2" title="Code Example for calling SearchByPolicyNumber function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPolicyNumber1" title="Code Example for calling SearchByPolicyNumber function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByPolicyNumber2" title="Code Example for calling SearchByPolicyNumber function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.RequestData> SearchByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByPolicyNumber.RequestData>(proxy, proxy.SearchByPolicyNumber);
            return s;
        }
        ///<summary> Searches for quotes by using the quote number. </summary>///<param name="request">The wrapper request containing the quote number.</param>///<returns>The wrapper response containing the collection of <see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" /> items and the total number of records found.</returns>///<see cref="T:Diamond.Common.Objects.Policy.PolicySearchResult" />///<remarks>A maximum of 500 records will be returned in the results.  The additional records can be returned by narrowing the search criteria.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByQuoteNumber1" title="Code Example for calling SearchByQuoteNumber function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByQuoteNumber2" title="Code Example for calling SearchByQuoteNumber function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByQuoteNumber1" title="Code Example for calling SearchByQuoteNumber function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\PolicySearchForm.vb" region="SearchByQuoteNumber2" title="Code Example for calling SearchByQuoteNumber function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.RequestData> SearchByQuoteNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.Request, Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.Response, Diamond.Common.Services.Messages.PolicyService.SearchByQuoteNumber.RequestData>(proxy, proxy.SearchByQuoteNumber);
            return s;
        }
        ///<summary> Locks\unlocks the specified policy based on the provided lock value. </summary>///<param name="request">The wrapper request object.</param>///<returns>  <c>True</c> if the policy was successfully locked\unlocked.  <c>False</c> otherwise.</returns>///<c>True</c>///<c>False</c>///<remarks>The <see cref="F:Diamond.Common.Enums.Authorities.PolicyProcessing.ChangeLockStatus" /> authority in the <see cref="F:Diamond.Common.Enums.Authorities.AuthorityGroup.PolicyProcessing" /> authority group is required.</remarks>///<see cref="F:Diamond.Common.Enums.Authorities.PolicyProcessing.ChangeLockStatus" />///<see cref="F:Diamond.Common.Enums.Authorities.AuthorityGroup.PolicyProcessing" />
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.Request, Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.Response, Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.RequestData> SetPolicyLock()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.Request, Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.Response, Diamond.Common.Services.Messages.PolicyService.SetPolicyLock.RequestData>(proxy, proxy.SetPolicyLock);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SmallLoad.Request, Diamond.Common.Services.Messages.PolicyService.SmallLoad.Response, Diamond.Common.Services.Messages.PolicyService.SmallLoad.RequestData> SmallLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SmallLoad.Request, Diamond.Common.Services.Messages.PolicyService.SmallLoad.Response, Diamond.Common.Services.Messages.PolicyService.SmallLoad.RequestData>(proxy, proxy.SmallLoad);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SmallSave.Request, Diamond.Common.Services.Messages.PolicyService.SmallSave.Response, Diamond.Common.Services.Messages.PolicyService.SmallSave.RequestData> SmallSave()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SmallSave.Request, Diamond.Common.Services.Messages.PolicyService.SmallSave.Response, Diamond.Common.Services.Messages.PolicyService.SmallSave.RequestData>(proxy, proxy.SmallSave);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SR2226Import.Request, Diamond.Common.Services.Messages.PolicyService.SR2226Import.Response, Diamond.Common.Services.Messages.PolicyService.SR2226Import.RequestData> SR2226Import()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SR2226Import.Request, Diamond.Common.Services.Messages.PolicyService.SR2226Import.Response, Diamond.Common.Services.Messages.PolicyService.SR2226Import.RequestData>(proxy, proxy.SR2226Import);
            return s;
        }
        ///<summary> Function to submit a new application </summary>///<param name="request"> A request message encapsulating Policy Image, Submit Version (comprising of Company Id, State Id, Lob Id, Transaction eff. date, Transaction Type Id and Guaranteed Rate Period eff. date), ReceiptData (ApplyCash object) containing payment information and already validated indicator  (make sure to set it as false if validation needs to be done at server). </param>///<returns>  A response message encapsulating Policy Image object containing Client and Policy information created and status of submission </returns>///<remarks> Also saves ApplyCash Object containing payment information supplied by filling in the payment section of Client </remarks>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="SubmitApplication" title="Code Example for calling SubmitApplication function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="SubmitApplication" title="Code Example for calling SubmitApplication function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SubmitApplication.Request, Diamond.Common.Services.Messages.PolicyService.SubmitApplication.Response, Diamond.Common.Services.Messages.PolicyService.SubmitApplication.RequestData> SubmitApplication()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SubmitApplication.Request, Diamond.Common.Services.Messages.PolicyService.SubmitApplication.Response, Diamond.Common.Services.Messages.PolicyService.SubmitApplication.RequestData>(proxy, proxy.SubmitApplication);
            return s;
        }
        ///<summary> Submits the policy image provided in the <see cref="T:Diamond.Common.Services.Messages.PolicyService.SubmitRate.Request">request</see> object into <c>Diamond</c>.  If submission is successful, the policy image is also rated. </summary>///<see cref="T:Diamond.Common.Services.Messages.PolicyService.SubmitRate.Request">request</see>///<c>Diamond</c>///<param name="request">The request containing the populated <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> object.</param>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<returns>A <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> object that has been submitted and rated.</returns>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<remarks>  <para> The <c>Image</c> is submitted into Diamond.  If this process completes successfully, <c>Rate</c> is called. If rating is successful, the <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> is returned with the appropriate rating information and premiums populated. </para>  <para> Any errors with the <c>Submit</c> or <c>Rate</c> call are captured and returned in the <see cref="T:Diamond.Common.Objects.DiamondValidation">Validation</see> object returned with the response. </para>  <para> If the image does not contain a <c>PolicyNumber</c>, a policy number is created in Diamond and assigned to the image. A call to <see cref="M:Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy.GetNewPolicyOrQuoteNumber(Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Request)" /> is made to retrieve the new policy number. </para></remarks>///<para> The <c>Image</c> is submitted into Diamond.  If this process completes successfully, <c>Rate</c> is called. If rating is successful, the <see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see> is returned with the appropriate rating information and premiums populated. </para>///<c>Image</c>///<c>Rate</c>///<see cref="T:Diamond.Common.Objects.Policy.Image">PolicyImage</see>///<para> Any errors with the <c>Submit</c> or <c>Rate</c> call are captured and returned in the <see cref="T:Diamond.Common.Objects.DiamondValidation">Validation</see> object returned with the response. </para>///<c>Submit</c>///<c>Rate</c>///<see cref="T:Diamond.Common.Objects.DiamondValidation">Validation</see>///<para> If the image does not contain a <c>PolicyNumber</c>, a policy number is created in Diamond and assigned to the image. A call to <see cref="M:Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy.GetNewPolicyOrQuoteNumber(Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Request)" /> is made to retrieve the new policy number. </para>///<c>PolicyNumber</c>///<see cref="M:Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy.GetNewPolicyOrQuoteNumber(Diamond.Common.Services.Messages.PolicyService.GetNewPolicyOrQuoteNumber.Request)" />///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SubmitRate" title="Code Example for calling SubmitRate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SubmitRate" title="Code Example for calling SubmitRate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.SubmitRate.Request, Diamond.Common.Services.Messages.PolicyService.SubmitRate.Response, Diamond.Common.Services.Messages.PolicyService.SubmitRate.RequestData> SubmitRate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.SubmitRate.Request, Diamond.Common.Services.Messages.PolicyService.SubmitRate.Response, Diamond.Common.Services.Messages.PolicyService.SubmitRate.RequestData>(proxy, proxy.SubmitRate);
            return s;
        }
        ///<summary> Tierings the specified policy id. </summary>///<param name="policyId">The policy id.</param>///<param name="policyImageNum">The policy image num.</param>///<param name="companyId">The company id.</param>///<param name="stateId">The state id.</param>///<param name="LobId">The lob id.</param>///<param name="effectiveDate">The effective date.</param>///<param name="errors">The errors.</param>///<returns>Policy Image object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="Tiering" title="Code Example for calling Tiering function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="Tiering" title="Code Example for calling Tiering function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.Tiering.Request, Diamond.Common.Services.Messages.PolicyService.Tiering.Response, Diamond.Common.Services.Messages.PolicyService.Tiering.RequestData> Tiering()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.Tiering.Request, Diamond.Common.Services.Messages.PolicyService.Tiering.Response, Diamond.Common.Services.Messages.PolicyService.Tiering.RequestData>(proxy, proxy.Tiering);
            return s;
        }
        ///<summary> Transfers the policy to client. </summary>///<param name="request">The wrapper request object containing ClientId and PolicyId</param>///<returns>A wrapper response object containing Nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="TransferPolicyToClient" title="Code Example for calling TransferPolicyToClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.Request, Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.Response, Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.RequestData> TransferPolicyToClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.Request, Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.Response, Diamond.Common.Services.Messages.PolicyService.TransferPolicyToClient.RequestData>(proxy, proxy.TransferPolicyToClient);
            return s;
        }
        ///<summary> Undeny the specified policy </summary>///<param name="request">The request.</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\UndenyPolicy.vb" region="UndenyPolicy" title="Code Example for calling UndenyPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\UndenyPolicy.vb" region="UndenyPolicy" title="Code Example for calling UndenyPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.Request, Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.Response, Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.RequestData> UndenyPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.Request, Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.Response, Diamond.Common.Services.Messages.PolicyService.UndenyPolicy.RequestData>(proxy, proxy.UndenyPolicy);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.Request, Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.Response, Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.RequestData> UpdateAgencyOnPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.Request, Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.Response, Diamond.Common.Services.Messages.PolicyService.UpdateAgencyOnPolicy.RequestData>(proxy, proxy.UpdateAgencyOnPolicy);
            return s;
        }
        ///<summary> This will update the specified image with the specified quote source (a.k.a. referred by). </summary>///<param name="request">The request contains the flag for proceeding when the version changes, the image and the quote source.</param>///<returns>The request contains a success flag and the updated image.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.Request, Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.Response, Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.RequestData> UpdateReferredBy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.Request, Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.Response, Diamond.Common.Services.Messages.PolicyService.UpdateReferredBy.RequestData>(proxy, proxy.UpdateReferredBy);
            return s;
        }
        ///<summary> Validates a policy at the end of the Application workflow and before it is promoted to the Finalize workflow.  This function is useful for any validation that has to be performed before the policy is finalized but where there are no screens in the finalize workflow to make the changes required by the validation. </summary>///<param name="request">The wrapper request object containing the <see cref="T:Diamond.Common.Objects.Policy.Image" /> that holds the information for the application.</param>///<see cref="T:Diamond.Common.Objects.Policy.Image" />///<returns>The wrapper response object containing the Success flag indicating if the application is valid.</returns>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\ASPNET\BaseControls\Navigation\TabControls\InsTabControl.vb" region="ValidateApplication" title="Code Example for calling ValidateApplication function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\BaseControls\Navigation\TabControls\InsTabControl.vb" region="ValidateApplication" title="Code Example for calling ValidateApplication function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.ValidateApplication.Request, Diamond.Common.Services.Messages.PolicyService.ValidateApplication.Response, Diamond.Common.Services.Messages.PolicyService.ValidateApplication.RequestData> ValidateApplication()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.ValidateApplication.Request, Diamond.Common.Services.Messages.PolicyService.ValidateApplication.Response, Diamond.Common.Services.Messages.PolicyService.ValidateApplication.RequestData>(proxy, proxy.ValidateApplication);
            return s;
        }
        ///<summary> Checks to see if the current user can save\issue the specified policy image. </summary>///<param name="request">The wrapper request object containing the Policy Id and Policy Image Number.</param>///<returns> The wrapper response object contains the result indicating if the user can process the operation. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Forms\CopyClientForm.vb" region="VerifyUserCanSaveIssue" title="Code Example for calling VerifyUserCanSaveIssue function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Forms\CopyClientForm.vb" region="VerifyUserCanSaveIssue" title="Code Example for calling VerifyUserCanSaveIssue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.Request, Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.Response, Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.RequestData> VerifyUserCanSaveIssue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.Request, Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.Response, Diamond.Common.Services.Messages.PolicyService.VerifyUserCanSaveIssue.RequestData>(proxy, proxy.VerifyUserCanSaveIssue);
            return s;
        }
    }
    ///<summary> Proxy class for Printing Service such as LoadPrintHistory, ReprintJob etc </summary>
    public static class PrintingService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.Request, Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.Response, Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.RequestData> AddManualAgencyForm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.Request, Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.Response, Diamond.Common.Services.Messages.PrintingService.AddManualAgencyForm.RequestData>(proxy, proxy.AddManualAgencyForm);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.Request, Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.Response, Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.RequestData> AttachAgencyForms()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.Request, Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.Response, Diamond.Common.Services.Messages.PrintingService.AttachAgencyForms.RequestData>(proxy, proxy.AttachAgencyForms);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.Request, Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.Response, Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.RequestData> CreateAgencyPrintOutput()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.Request, Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.Response, Diamond.Common.Services.Messages.PrintingService.CreateAgencyPrintOutput.RequestData>(proxy, proxy.CreateAgencyPrintOutput);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.Request, Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.Response, Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.RequestData> DeleteAgencyManualForm()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.Request, Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.Response, Diamond.Common.Services.Messages.PrintingService.DeleteAgencyManualForm.RequestData>(proxy, proxy.DeleteAgencyManualForm);
            return s;
        }
        ///<summary> Filters the print history. </summary>///<param name="request">A wrapper class for FilterPrintHistory Request Data containing the AllImages, Description, LegacyPrint, PolicyId, PolicyImageNum, PrintRecipients and PrintTypes values.</param>///<returns>The wrapper response containing success indicator and PrintHistory object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PrintHistory.vb" region="FilterPrintHistory" title="Code Example for calling FilterPrintHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PrintHistory.vb" region="FilterPrintHistory" title="Code Example for calling FilterPrintHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.RequestData> FilterPrintHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.FilterPrintHistory.RequestData>(proxy, proxy.FilterPrintHistory);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.Request, Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.Response, Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.RequestData> GetAgencyFormsByAgencyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.Request, Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.Response, Diamond.Common.Services.Messages.PrintingService.GetAgencyFormsByAgencyId.RequestData>(proxy, proxy.GetAgencyFormsByAgencyId);
            return s;
        }
        ///<summary> Gets policy print distribution data based on policyId </summary>///<param name="request">A wrapper class for GetPolicyPrintDistribution Printing Request Data containing the PolicyId.</param>///<returns>The wrapper response containing PolicyPrintDistribution object based on the request parameters</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyPrintDistribution" title="Code Example for calling GetPolicyPrintDistribution function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPolicyPrintDistribution" title="Code Example for calling GetPolicyPrintDistribution function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.Request, Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.Response, Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.RequestData> GetPolicyPrintDistribution()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.Request, Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.Response, Diamond.Common.Services.Messages.PrintingService.GetPolicyPrintDistribution.RequestData>(proxy, proxy.GetPolicyPrintDistribution);
            return s;
        }
        ///<summary> Gets data for print report based on dates </summary>///<param name="request">A wrapper class for GetPrintReportingData Printing Request Data containing the PrintGUID, ViewedInsured, ViewedAgency, ViewedAI.</param>///<returns>The wrapper response containing success indicator, and Data based on the request parameters</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPrintReportingData" title="Code Example for calling GetPrintReportingData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPrintReportingData" title="Code Example for calling GetPrintReportingData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.Request, Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.Response, Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.RequestData> GetPrintReportingData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.Request, Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.Response, Diamond.Common.Services.Messages.PrintingService.GetPrintReportingData.RequestData>(proxy, proxy.GetPrintReportingData);
            return s;
        }
        ///<summary> Imports the compressed PDF containing the legacy print job output. </summary>///<param name="request">A wrapper class for the request data.</param>///<returns>The wrapper class for the response data.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.Request, Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.Response, Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.RequestData> ImportPrintJobPDF()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.Request, Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.Response, Diamond.Common.Services.Messages.PrintingService.ImportPrintJobPDF.RequestData>(proxy, proxy.ImportPrintJobPDF);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.RequestData> LoadAgencyPrintHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadAgencyPrintHistory.RequestData>(proxy, proxy.LoadAgencyPrintHistory);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.Request, Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.Response, Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.RequestData> LoadAllEmailTemplates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.Request, Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.Response, Diamond.Common.Services.Messages.PrintingService.LoadAllEmailTemplates.RequestData>(proxy, proxy.LoadAllEmailTemplates);
            return s;
        }
        ///<summary> Loads the elios history. </summary>///<param name="request">A wrapper class for LoadEliosHistory Request Data containing the PolicyId, PolicyImageNum values.</param>///<returns>The wrapper response containing success indicator and EliosHistory object</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.RequestData> LoadEliosHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadEliosHistory.RequestData>(proxy, proxy.LoadEliosHistory);
            return s;
        }
        ///<summary> Loads the email queue history. </summary>///<param name="request">A wrapper class for LoadEmailQueueHistory Request Data containing the PolicyId, PolicyImageNum values.</param>///<returns>The wrapper response containing success indicator and EmailQueueHistory object</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.RequestData> LoadEmailQueueHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadEmailQueueHistory.RequestData>(proxy, proxy.LoadEmailQueueHistory);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.Request, Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.Response, Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.RequestData> LoadEmailTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.Request, Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.Response, Diamond.Common.Services.Messages.PrintingService.LoadEmailTemplate.RequestData>(proxy, proxy.LoadEmailTemplate);
            return s;
        }
        ///<summary> Loads the print forms for mobile app. </summary>///<param name="request">A wrapper class for LoadFormsByFormCategory Request Data containing the PolicyId, PolicyImageNum, FormCategoryType values.</param>///<returns>The wrapper response containing success indicator and PrintForm object</returns>///<example> WILL ADD </example>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.Request, Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.Response, Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.RequestData> LoadFormsByFormCategory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.Request, Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.Response, Diamond.Common.Services.Messages.PrintingService.LoadFormsByFormCategory.RequestData>(proxy, proxy.LoadFormsByFormCategory);
            return s;
        }
        ///<summary> Loads the policy print distribution history. </summary>///<param name="request">A wrapper class for LoadPolicyPrintDistributionHistory Request Data containing the PolicyId value.</param>///<returns>The wrapper response containing success indicator and PolicyPrintDistributionHistory object</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.RequestData> LoadPolicyPrintDistributionHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadPolicyPrintDistributionHistory.RequestData>(proxy, proxy.LoadPolicyPrintDistributionHistory);
            return s;
        }
        ///<summary> Loads the print history. </summary>///<param name="request">A wrapper class for LoadPrintHistory Request Data containing the LegacyPrint, PolicyId, PolicyImageNum values.</param>///<returns>The wrapper response containing success indicator and PrintForm object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="LoadPrintHistory" title="Code Example for calling LoadPrintHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="LoadPrintHistory" title="Code Example for calling LoadPrintHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.RequestData> LoadPrintHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.Request, Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.Response, Diamond.Common.Services.Messages.PrintingService.LoadPrintHistory.RequestData>(proxy, proxy.LoadPrintHistory);
            return s;
        }
        ///<summary> Processed unprocessed printprocess records </summary>///<param name="request">A wrapper class for Process Unprocessed Printing Request Data (empty request).</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\PrintProcess.vb" region="ProcessUnprocessedPrinting" title="Code Example for calling ProcessUnprocessedPrinting function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\PrintProcess.vb" region="ProcessUnprocessedPrinting" title="Code Example for calling ProcessUnprocessedPrinting function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.Request, Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.Response, Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.RequestData> ProcessUnprocessedPrinting()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.Request, Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.Response, Diamond.Common.Services.Messages.PrintingService.ProcessUnprocessedPrinting.RequestData>(proxy, proxy.ProcessUnprocessedPrinting);
            return s;
        }
        ///<summary> Receives the event. </summary>///<param name="request">A wrapper class for ReceiveEvent Request Data containing the PrintEvent object.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="ReceiveEvent" title="Code Example for calling ReceiveEvent function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="ReceiveEvent" title="Code Example for calling ReceiveEvent function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.Request, Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.Response, Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.RequestData> ReceiveEvent()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.Request, Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.Response, Diamond.Common.Services.Messages.PrintingService.ReceiveEvent.RequestData>(proxy, proxy.ReceiveEvent);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.Request, Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.Response, Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.RequestData> ReprintAgencyJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.Request, Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.Response, Diamond.Common.Services.Messages.PrintingService.ReprintAgencyJob.RequestData>(proxy, proxy.ReprintAgencyJob);
            return s;
        }
        ///<summary> Reprints the job. </summary>///<param name="request">A wrapper class for ReprintJob Request Data containing the PrintForms, ReprintHistory, PolicyId, PolicyImageNum values.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintJob" title="Code Example for calling ReprintJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintJob" title="Code Example for calling ReprintJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintJob.Request, Diamond.Common.Services.Messages.PrintingService.ReprintJob.Response, Diamond.Common.Services.Messages.PrintingService.ReprintJob.RequestData> ReprintJob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintJob.Request, Diamond.Common.Services.Messages.PrintingService.ReprintJob.Response, Diamond.Common.Services.Messages.PrintingService.ReprintJob.RequestData>(proxy, proxy.ReprintJob);
            return s;
        }
        ///<summary> Reprints the policy package. </summary>///<param name="request">A wrapper class for ReprintPolicyPackage Request Data containing the PolicyId, TransDate values.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintPolicyPackage" title="Code Example for calling ReprintPolicyPackage function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintPolicyPackage" title="Code Example for calling ReprintPolicyPackage function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.Request, Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.Response, Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.RequestData> ReprintPolicyPackage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.Request, Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.Response, Diamond.Common.Services.Messages.PrintingService.ReprintPolicyPackage.RequestData>(proxy, proxy.ReprintPolicyPackage);
            return s;
        }
        ///<summary> resends the email(s) to the current insured. </summary>///<param name="request">A wrapper class for ResendEmail Request Data containing the PrintForms value.</param>///<returns>Diamond Validation object with return information.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintJob" title="Code Example for calling ReprintJob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Form\FormList.vb" region="ReprintJob" title="Code Example for calling ReprintJob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.ResendEmail.Request, Diamond.Common.Services.Messages.PrintingService.ResendEmail.Response, Diamond.Common.Services.Messages.PrintingService.ResendEmail.RequestData> ResendEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.ResendEmail.Request, Diamond.Common.Services.Messages.PrintingService.ResendEmail.Response, Diamond.Common.Services.Messages.PrintingService.ResendEmail.RequestData>(proxy, proxy.ResendEmail);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.Request, Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.Response, Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.RequestData> SaveAgencyFormAdditionalInfoItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.Request, Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.Response, Diamond.Common.Services.Messages.PrintingService.SaveAgencyFormAdditionalInformation.RequestData>(proxy, proxy.SaveAgencyFormAdditionalInfoItems);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.Request, Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.Response, Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.RequestData> SaveEmailTemplate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.Request, Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.Response, Diamond.Common.Services.Messages.PrintingService.SaveEmailTemplate.RequestData>(proxy, proxy.SaveEmailTemplate);
            return s;
        }
        ///<summary> Saves Notices and Questionnaires Information. </summary>///<param name="request">A wrapper class for notices and questionnaires Request Data containing the PolicyId, PolicyImageNum, noticesandquestionnaires values.</param>///<returns>The wrapper response containing noticesandquestionnaires.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveNoticesAndQuestionnaires" title="Code Example for calling SaveNoticesAndQuestionnaires function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveNoticesAndQuestionnaires" title="Code Example for calling SaveNoticesAndQuestionnaires function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.Request, Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.Response, Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.RequestData> SaveNoticesAndQuestionnaires()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.Request, Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.Response, Diamond.Common.Services.Messages.PrintingService.SaveNoticesAndQuestionnaires.RequestData>(proxy, proxy.SaveNoticesAndQuestionnaires);
            return s;
        }
        ///<summary> Saves the printdistributiontype_id for the policy_id </summary>///<param name="request">A wrapper class for GetPrintReportingData Printing Request Data containing the PolicyId and PrintDistributionTypeId.</param>///<returns>The wrapper response containing success indicator based on the request parameters</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SavePolicyPrintDistribution" title="Code Example for calling SavePolicyPrintDistribution function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SavePolicyPrintDistribution" title="Code Example for calling SavePolicyPrintDistribution function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.Request, Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.Response, Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.RequestData> SavePolicyPrintDistribution()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.Request, Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.Response, Diamond.Common.Services.Messages.PrintingService.SavePolicyPrintDistribution.RequestData>(proxy, proxy.SavePolicyPrintDistribution);
            return s;
        }
        ///<summary> Saves Print Location Control Information. </summary>///<param name="request">A wrapper class for print location control Request Data containing the PolicyId, PolicyImageNum, PrintLocationControl values.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SavePrintControl" title="Code Example for calling SavePrintControl function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SavePrintControl" title="Code Example for calling SavePrintControl function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.SavePrintControl.Request, Diamond.Common.Services.Messages.PrintingService.SavePrintControl.Response, Diamond.Common.Services.Messages.PrintingService.SavePrintControl.RequestData> SavePrintControl()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.SavePrintControl.Request, Diamond.Common.Services.Messages.PrintingService.SavePrintControl.Response, Diamond.Common.Services.Messages.PrintingService.SavePrintControl.RequestData>(proxy, proxy.SavePrintControl);
            return s;
        }
        ///<summary> Updates the export status of the printguid being passed in. </summary>///<param name="request">A wrapper class for UpdatePrintExportStatus Printing Request Data containing the PrintGUID, ExportStatusId, CompanySpecificExportID.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdatePrintExportStatus" title="Code Example for calling UpdatePrintExportStatus function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdatePrintExportStatus" title="Code Example for calling UpdatePrintExportStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.Request, Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.Response, Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.RequestData> UpdatePrintExportStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.Request, Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.Response, Diamond.Common.Services.Messages.PrintingService.UpdatePrintExportStatus.RequestData>(proxy, proxy.UpdatePrintExportStatus);
            return s;
        }
        ///<summary> Updates the viewed status of the printguid being passed in. </summary>///<param name="request">A wrapper class for ProcessUnprocessed Printing Request Data containing the PrintGUID, ViewedInsured, ViewedAgency, ViewedAI.</param>///<returns>The wrapper response containing success indicator.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateViewedStatus" title="Code Example for calling UpdateViewedStatus function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UpdateViewedStatus" title="Code Example for calling UpdateViewedStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.Request, Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.Response, Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.RequestData> UpdateViewedStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.PrintingServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.Request, Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.Response, Diamond.Common.Services.Messages.PrintingService.UpdateViewedStatus.RequestData>(proxy, proxy.UpdateViewedStatus);
            return s;
        }
    }
    ///<summary> Proxy class for Process Service to Load and Save XML schema from and to files and tables </summary>
    public static class ProcessService
    {
        ///<summary> Loads BatchEndorsementsLoadCompanyStateLob. </summary>///<param name="request">The request contains collection of CompanyStateLob.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadCompanyStateLob" title="Code Example for calling BatchEndorsementsLoadCompanyStateLob function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadCompanyStateLob" title="Code Example for calling BatchEndorsementsLoadCompanyStateLob function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.RequestData> BatchEndorsementsLoadCompanyStateLob()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadCompanyStateLob.RequestData>(proxy, proxy.BatchEndorsementsLoadCompanyStateLob);
            return s;
        }
        ///<summary> Loads BatchEndorsementsLoadPolicies. </summary>///<param name="request">The request contains collection of Policies.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadPolicies" title="Code Example for calling BatchEndorsementsLoadPolicies function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadPolicies" title="Code Example for calling BatchEndorsementsLoadPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.RequestData> BatchEndorsementsLoadPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadPolicies.RequestData>(proxy, proxy.BatchEndorsementsLoadPolicies);
            return s;
        }
        ///<summary> Loads BatchEndorsementsLoadRatingVersion. </summary>///<param name="request">The request contains collection of RatingVersions.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadRatingVersion" title="Code Example for calling BatchEndorsementsLoadRatingVersion function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsLoadRatingVersion" title="Code Example for calling BatchEndorsementsLoadRatingVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.RequestData> BatchEndorsementsLoadRatingVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsLoadRatingVersion.RequestData>(proxy, proxy.BatchEndorsementsLoadRatingVersion);
            return s;
        }
        ///<summary> Processes BatchEndorsementsProcessEndorsement. </summary>///<param name="request">The request contains Policy to process.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsProcessEndorsement" title="Code Example for calling BatchEndorsementsProcessEndorsement function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\BatchEndorsements.vb" region="BatchEndorsementsProcessEndorsement" title="Code Example for calling BatchEndorsementsProcessEndorsement function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.RequestData> BatchEndorsementsProcessEndorsement()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.Request, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.Response, Diamond.Common.Services.Messages.ProcessService.BatchEndorsementsProcessEndorsement.RequestData>(proxy, proxy.BatchEndorsementsProcessEndorsement);
            return s;
        }
        ///<summary> Creates payroll deduction files </summary>///<param name="request">The request contains collection of payroll deduction employer.</param>///<returns>success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="CreatePayrollDeductionFiles" title="Code Example for calling CreatePayrollDeductionFiles function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\PayrollDeductionFiles.vb" region="CreatePayrollDeductionFiles" title="Code Example for calling CreatePayrollDeductionFiles function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.Request, Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.Response, Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.RequestData> CreatePayrollDeductionFiles()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.Request, Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.Response, Diamond.Common.Services.Messages.ProcessService.CreatePayrollDeductionFiles.RequestData>(proxy, proxy.CreatePayrollDeductionFiles);
            return s;
        }
        ///<summary> Deletes the XSL map. </summary>///<param name="request">The request contains the version_id and xslinterfacemaps_id</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="DeleteXSLMap" title="Code Example for calling DeleteXSLMap function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="DeleteXSLMap" title="Code Example for calling DeleteXSLMap function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.Request, Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.Response, Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.RequestData> DeleteXSLMap()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.Request, Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.Response, Diamond.Common.Services.Messages.ProcessService.DeleteXSLMap.RequestData>(proxy, proxy.DeleteXSLMap);
            return s;
        }
        ///<summary> Executes the Peoplesoft. </summary>///<param name="request">The request contains request type.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ImportFile" title="Code Example for importing file from Peoplesoft"></code>  <code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ExportAPFile" title="Code Example for exporting AP file to Peoplesoft"></code>  <code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ExportGLFile" title="Code Example for exporting GL file to Peoplesoft"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ImportFile" title="Code Example for importing file from Peoplesoft"></code>///<code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ExportAPFile" title="Code Example for exporting AP file to Peoplesoft"></code>///<code lang="vbnet" source="Diamond\UI\Processes\Peoplesoft.vb" region="ExecutePeoplesoft-ExportGLFile" title="Code Example for exporting GL file to Peoplesoft"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.Request, Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.Response, Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.RequestData> ExecutePeoplesoft()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.Request, Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.Response, Diamond.Common.Services.Messages.ProcessService.ExecutePeoplesoft.RequestData>(proxy, proxy.ExecutePeoplesoft);
            return s;
        }
        ///<summary> Executes the upload. </summary>///<param name="request">The request contains XML string, FileName.</param>///<returns>Success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Upload.vb" region="ExecuteUpload" title="Code Example for calling ExecuteUpload function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Upload.vb" region="ExecuteUpload" title="Code Example for calling ExecuteUpload function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.Request, Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.Response, Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.RequestData> ExecuteUpload()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.Request, Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.Response, Diamond.Common.Services.Messages.ProcessService.ExecuteUpload.RequestData>(proxy, proxy.ExecuteUpload);
            return s;
        }
        ///<summary> Loads the XSL map from file. </summary>///<param name="request">The request contains the XSL import filename</param>///<returns> Returns success indicator and the full map </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="LoadXSLMapFromFile" title="Code Example for calling LoadXSLMapFromFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="LoadXSLMapFromFile" title="Code Example for calling LoadXSLMapFromFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.Request, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.Response, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.RequestData> LoadXSLMapFromFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.Request, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.Response, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromFile.RequestData>(proxy, proxy.LoadXSLMapFromFile);
            return s;
        }
        ///<summary> Loads the XSL map from table. </summary>///<param name="request">The request contains the interfacexslmaps_id</param>///<returns> Returns full map, compiled xsl, map date, full xsl, xsl description and a success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="LoadXSLMaps" title="Code Example for calling LoadXSLMapFromTable function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="LoadXSLMaps" title="Code Example for calling LoadXSLMapFromTable function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.Request, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.Response, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.RequestData> LoadXSLMapFromTable()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.Request, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.Response, Diamond.Common.Services.Messages.ProcessService.LoadXSLMapFromTable.RequestData>(proxy, proxy.LoadXSLMapFromTable);
            return s;
        }
        ///<summary> Saves the XSL map to file. </summary>///<param name="request">The request contains version_id, Processes.InterfaceXSLMaps object, and the import filename</param>///<returns> Returns success indicator and the XSLMaps_id of the saved map. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="SaveXSLMapToFile" title="Code Example for calling SaveXSLMapToFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="SaveXSLMapToFile" title="Code Example for calling SaveXSLMapToFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.RequestData> SaveXSLMap()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMap.RequestData>(proxy, proxy.SaveXSLMap);
            return s;
        }
        ///<summary> Saves the XSL maps version to the InterfaceXSLMapsVersion table </summary>///<param name="request">The request contains Processes.InterfaceXSLMapsVersion object</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveXSLMapsVersion" title="Code Example for calling SaveXSLMapsVersion function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveXSLMapsVersion" title="Code Example for calling SaveXSLMapsVersion function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.RequestData> SaveXSLMapsVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapsVersion.RequestData>(proxy, proxy.SaveXSLMapsVersion);
            return s;
        }
        ///<summary> Saves the XSL map to file. </summary>///<param name="request">The request contains version_id, Processes.InterfaceXSLMaps object, and the import filename</param>///<returns> Returns success indicator and the XSLMaps_id of the saved map. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="SaveXSLMapToFile" title="Code Example for calling SaveXSLMapToFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\XSLMapInterface.vb" region="SaveXSLMapToFile" title="Code Example for calling SaveXSLMapToFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.RequestData> SaveXSLMapToFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ProcessServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.Request, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.Response, Diamond.Common.Services.Messages.ProcessService.SaveXSLMapToFile.RequestData>(proxy, proxy.SaveXSLMapToFile);
            return s;
        }
    }
    ///<summary> Proxy class for Renewal Service </summary>
    public static class RenewalService
    {
        ///<summary> Gets the current status for the specified instance of the Automatic Renewal Process. </summary>///<param name="request">The request wrapper class.</param>///<returns>Returns a response wrapper class that contains the Success flag that indicates if a log entry was found.  If so, then an instance of the <see cref="T:Diamond.Common.Objects.Renewals.RenewalQueueLog" /> class is also returned.</returns>///<see cref="T:Diamond.Common.Objects.Renewals.RenewalQueueLog" />///<example>  <code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetCurrentStatus" title="Code Example for calling GetCurrentStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="GetCurrentStatus" title="Code Example for calling GetCurrentStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.Request, Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.Response, Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.RequestData> GetCurrentStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RenewalServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.Request, Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.Response, Diamond.Common.Services.Messages.RenewalService.GetCurrentStatus.RequestData>(proxy, proxy.GetCurrentStatus);
            return s;
        }
        ///<summary> Returns whether or not the Automatic Renewal Process is currently executing. </summary>///<param name="request">The request wrapper class.</param>///<returns>Returns a response wrapper class that contains the Result indicating if the process is running or not.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="IsAutomaticRenewalsRunning" title="Code Example for calling IsAutomaticRenewalsRunning function"></code></example>///<code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="IsAutomaticRenewalsRunning" title="Code Example for calling IsAutomaticRenewalsRunning function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.Request, Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.Response, Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.RequestData> IsAutomaticRenewalsRunning()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RenewalServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.Request, Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.Response, Diamond.Common.Services.Messages.RenewalService.IsAutomaticRenewalsRunning.RequestData>(proxy, proxy.IsAutomaticRenewalsRunning);
            return s;
        }
        ///<summary> Processes the specified renewal queue item. </summary>///<param name="request">The request wrapper class containing the <see cref="T:Diamond.Common.Objects.Renewals.RenewalQueue" /> item to process.</param>///<see cref="T:Diamond.Common.Objects.Renewals.RenewalQueue" />///<returns>Returns a response wrapper class that contains the Success, Submitted, Rated and Issued flags.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessRenewalQueueItem" title="Code Example for calling ProcessRenewalQueueItem function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessRenewalQueueItem" title="Code Example for calling ProcessRenewalQueueItem function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.Request, Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.Response, Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.RequestData> ProcessRenewalQueueItem()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RenewalServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.Request, Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.Response, Diamond.Common.Services.Messages.RenewalService.ProcessRenewalQueueItem.RequestData>(proxy, proxy.ProcessRenewalQueueItem);
            return s;
        }
        ///<summary> Processes all renewals. </summary>///<param name="request">The request contains pre-process indicator, automatirenewaloptions_id, start and ending date range and billmethod_id</param>///<returns>Returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Business\Renewals\ScheduledProcess.vb" region="ProcessRenewals" title="Code Example for calling ProcessRenewals function"></code></example>///<code lang="vbnet" source="Diamond\Business\Renewals\ScheduledProcess.vb" region="ProcessRenewals" title="Code Example for calling ProcessRenewals function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.Request, Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.Response, Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.RequestData> ProcessRenewals()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RenewalServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.Request, Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.Response, Diamond.Common.Services.Messages.RenewalService.ProcessRenewals.RequestData>(proxy, proxy.ProcessRenewals);
            return s;
        }
        ///<summary> Resets the state of the Automatic Renewal Process. </summary>///<param name="request">The request wrapper class containing the value to use.</param>///<returns>Returns a response wrapper class that contains the Success flag indicating if the status was successfully reset.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="ResetStatus" title="Code Example for calling ResetStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Renewals\ProcessAutomaticRenewals.vb" region="ResetStatus" title="Code Example for calling ResetStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.RenewalService.ResetStatus.Request, Diamond.Common.Services.Messages.RenewalService.ResetStatus.Response, Diamond.Common.Services.Messages.RenewalService.ResetStatus.RequestData> ResetStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.RenewalServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.RenewalService.ResetStatus.Request, Diamond.Common.Services.Messages.RenewalService.ResetStatus.Response, Diamond.Common.Services.Messages.RenewalService.ResetStatus.RequestData>(proxy, proxy.ResetStatus);
            return s;
        }
    }
    ///<summary> Proxy class for Report Service  </summary>
    public static class ReportService
    {
        ///<summary> Loads the URL details of an online report from SQL; information on the policy/claim/user must be passed in along with a report_id. </summary>///<param name="request">Contains the information related to the policy/claim/user that for the report that needs to be loaded. <see cref="T:Diamond.ServiceMessages.ReportService.LoadReportDetails.Request" /></param>///<see cref="T:Diamond.ServiceMessages.ReportService.LoadReportDetails.Request" />///<returns> A wrapper object <see cref="T:Diamond.ServiceMessages.ReportService.LoadReportDetails.Response" /> that returns the URL for the report. </returns>///<see cref="T:Diamond.ServiceMessages.ReportService.LoadReportDetails.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\ReportDisplayForm.vb" region="LoadReportDetails" title="Code Example for calling LoadReportDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\ReportDisplayForm.vb" region="LoadReportDetails" title="Code Example for calling LoadReportDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReportService.LoadReportDetails.Request, Diamond.Common.Services.Messages.ReportService.LoadReportDetails.Response, Diamond.Common.Services.Messages.ReportService.LoadReportDetails.RequestData> LoadReportDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReportService.LoadReportDetails.Request, Diamond.Common.Services.Messages.ReportService.LoadReportDetails.Response, Diamond.Common.Services.Messages.ReportService.LoadReportDetails.RequestData>(proxy, proxy.LoadReportDetails);
            return s;
        }
        ///<summary> Loads the list of online reports from SQL for a specified level and user. </summary>///<param name="request">Contains the information related to the level and user that reports need to be loaded for. <see cref="T:Diamond.ServiceMessages.ReportService.LoadReportList.Request" /></param>///<see cref="T:Diamond.ServiceMessages.ReportService.LoadReportList.Request" />///<returns> A wrapper object <see cref="T:Diamond.ServiceMessages.ReportService.LoadReportList.Response" /> that returns success indicator and a collection of reports. </returns>///<see cref="T:Diamond.ServiceMessages.ReportService.LoadReportList.Response" />///<example>  <code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-General" title="Code Example for calling LoadReportList function for loading General Reports"></code>  <code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-Claims" title="Code Example for calling LoadReportList function for loading Claim Reports"></code>  <code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-Policy" title="Code Example for calling LoadReportList function for loading Policy Reports"></code></example>///<code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-General" title="Code Example for calling LoadReportList function for loading General Reports"></code>///<code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-Claims" title="Code Example for calling LoadReportList function for loading Claim Reports"></code>///<code lang="vbnet" source="Diamond\UI\Reports\ModalDialogs\OnlineReportsListForm.vb" region="LoadReportList-Policy" title="Code Example for calling LoadReportList function for loading Policy Reports"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ReportService.LoadReportList.Request, Diamond.Common.Services.Messages.ReportService.LoadReportList.Response, Diamond.Common.Services.Messages.ReportService.LoadReportList.RequestData> LoadReportList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ReportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ReportService.LoadReportList.Request, Diamond.Common.Services.Messages.ReportService.LoadReportList.Response, Diamond.Common.Services.Messages.ReportService.LoadReportList.RequestData>(proxy, proxy.LoadReportList);
            return s;
        }
    }
    ///<summary> Proxy class for Residence Info Service </summary>
    public static class ResidenceInfoService
    {
        ///<summary> Loads all residence infos for policy and lob. </summary>///<param name="request">The wrapper request containing PolicyId, LobId.</param>///<returns> The wrapper response containing Success, ResidenceInfos </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="LoadAllResidenceInfo" title="Code Example for calling LoadAll function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\ImportPolicyDataForm\ImportPolicyDataForm.vb" region="LoadAllResidenceInfo" title="Code Example for calling LoadAll function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.Request, Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.Response, Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.RequestData> LoadAll()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ResidenceInfoServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.Request, Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.Response, Diamond.Common.Services.Messages.ResidenceInfoService.LoadAll.RequestData>(proxy, proxy.LoadAll);
            return s;
        }
    }

    public static class SampleService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.SampleService.SampleMethod1.Request, Diamond.Common.Services.Messages.SampleService.SampleMethod1.Response, Diamond.Common.Services.Messages.SampleService.SampleMethod1.RequestData> SampleMethod1()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SampleServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SampleService.SampleMethod1.Request, Diamond.Common.Services.Messages.SampleService.SampleMethod1.Response, Diamond.Common.Services.Messages.SampleService.SampleMethod1.RequestData>(proxy, proxy.SampleMethod1);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.SampleService.SampleMethod2.Request, Diamond.Common.Services.Messages.SampleService.SampleMethod2.Response, Diamond.Common.Services.Messages.SampleService.SampleMethod2.RequestData> SampleMethod2()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SampleServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SampleService.SampleMethod2.Request, Diamond.Common.Services.Messages.SampleService.SampleMethod2.Response, Diamond.Common.Services.Messages.SampleService.SampleMethod2.RequestData>(proxy, proxy.SampleMethod2);
            return s;
        }
    }
    ///<summary> Proxy class for Security Service performing User Authentication and Authorization </summary>
    public static class SecurityService
    {
        ///<summary> Determines whether the agency user can view policy based on UserId, PolicyId and PolicyImageNum </summary>///<param name="request">The wrapper request object containing the UserId, PolicyId and PolicyImageNum</param>///<returns> The wrapper response object containing a boolean indicating whether the agency user can view the policy or not </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="CanAgencyUserViewPolicy" title="Code Example for calling CanAgencyUserViewPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="CanAgencyUserViewPolicy" title="Code Example for calling CanAgencyUserViewPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.Request, Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.Response, Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.RequestData> CanAgencyUserViewPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.Request, Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.Response, Diamond.Common.Services.Messages.SecurityService.CanAgencyUserViewPolicy.RequestData>(proxy, proxy.CanAgencyUserViewPolicy);
            return s;
        }
        ///<summary> Determines whether the user has rights to view a given agency based on the UserId and the AgencyId </summary>///<param name="request">The wrapper request object containing the UserId and AgencyId</param>///<returns> The wrapper response object containing a boolean indicating whether the agency user can view the agency or not </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewAgency" title="Code Example for calling CanViewAgency function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewAgency" title="Code Example for calling CanViewAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewAgency.Request, Diamond.Common.Services.Messages.SecurityService.CanViewAgency.Response, Diamond.Common.Services.Messages.SecurityService.CanViewAgency.RequestData> CanViewAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewAgency.Request, Diamond.Common.Services.Messages.SecurityService.CanViewAgency.Response, Diamond.Common.Services.Messages.SecurityService.CanViewAgency.RequestData>(proxy, proxy.CanViewAgency);
            return s;
        }
        ///<summary> Determines whether the user has rights to view a given agency group based on the UserId </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing a boolean indicating whether the agency user can view the agency group or not </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewAgencyGroup" title="Code Example for calling CanViewAgencyGroup function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewAgencyGroup" title="Code Example for calling CanViewAgencyGroup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.Request, Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.Response, Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.RequestData> CanViewAgencyGroup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.Request, Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.Response, Diamond.Common.Services.Messages.SecurityService.CanViewAgencyGroup.RequestData>(proxy, proxy.CanViewAgencyGroup);
            return s;
        }
        ///<summary> Determines whether user has rights to view a given client based on UserId and ClientId </summary>///<param name="request">The wrapper request object containing the UserId and ClientId</param>///<returns> The wrapper response object containing a boolean indicating whether the agency user can view the Client Info </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewClient" title="Code Example for calling CanViewClient function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewClient" title="Code Example for calling CanViewClient function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewClient.Request, Diamond.Common.Services.Messages.SecurityService.CanViewClient.Response, Diamond.Common.Services.Messages.SecurityService.CanViewClient.RequestData> CanViewClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.CanViewClient.Request, Diamond.Common.Services.Messages.SecurityService.CanViewClient.Response, Diamond.Common.Services.Messages.SecurityService.CanViewClient.RequestData>(proxy, proxy.CanViewClient);
            return s;
        }
        ///<summary> Change user password </summary>///<param name="request">The request object containing LoginName, OldPassword, NewPassword1 and NewPassword2.</param>///<returns>A wrapper object containing boolean indicating success/failure</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Authentication\ChangePasswordForm.vb" region="ChangeUserPassword" title="Code Example for calling ChangeUserPassword function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Authentication\ChangePasswordForm.vb" region="ChangeUserPassword" title="Code Example for calling ChangeUserPassword function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.Request, Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.Response, Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.RequestData> ChangeUserPassword()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.Request, Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.Response, Diamond.Common.Services.Messages.SecurityService.ChangeUserPassword.RequestData>(proxy, proxy.ChangeUserPassword);
            return s;
        }
        ///<summary> Change user password </summary>///<param name="request">The request object containing LoginName, OldPassword, NewPassword1 and NewPassword2.</param>///<returns>A wrapper object containing boolean indicating success/failure</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Authentication\ChangePasswordForm.vb" region="ChangeUserPassword" title="Code Example for calling ChangeUserPassword function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Authentication\ChangePasswordForm.vb" region="ChangeUserPassword" title="Code Example for calling ChangeUserPassword function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.Request, Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.Response, Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.RequestData> CheckPasswordComplexity()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.Request, Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.Response, Diamond.Common.Services.Messages.SecurityService.CheckPasswordComplexity.RequestData>(proxy, proxy.CheckPasswordComplexity);
            return s;
        }
        ///<summary> Determines if the <c>Client</c> has an associated <c>User</c> record. </summary>///<c>Client</c>///<c>User</c>///<param name="request">The request containing the <c>ClientId</c>.</param>///<c>ClientId</c>///<returns> A <c>Response</c> object containing the <c>HasAssociation</c> flag indicating the client does have an associated users record. </returns>///<c>Response</c>///<c>HasAssociation</c>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.Request, Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.Response, Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.RequestData> ClientHasUserAssociated()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.Request, Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.Response, Diamond.Common.Services.Messages.SecurityService.ClientHasUserAssociated.RequestData>(proxy, proxy.ClientHasUserAssociated);
            return s;
        }
        ///<summary> Decrypts the encrypted BankAccount Number using the encryption Id and encryption type after validating that the user has authorization to do so </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the encrypted BankAccount Number</param>///<returns> The wrapper response object containing the decrypted BankAccount Number </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptBankAccountNumber" title="Code Example for calling DecryptBankAccountNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptBankAccountNumber" title="Code Example for calling DecryptBankAccountNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.RequestData> DecryptBankAccountNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptBankAccountNumber.RequestData>(proxy, proxy.DecryptBankAccountNumber);
            return s;
        }
        ///<summary> Decrypts the encrypted CreditCard Number using the encryption Id and encryption type after validating that the user has authorization to do so </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the encrypted CreditCard Number</param>///<returns> The wrapper response object containing the decrypted CreditCard Number </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="DecryptCreditCardNumber" title="Code Example for calling DecryptCreditCardNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="DecryptCreditCardNumber" title="Code Example for calling DecryptCreditCardNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.RequestData> DecryptCreditCardNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptCreditCardNumber.RequestData>(proxy, proxy.DecryptCreditCardNumber);
            return s;
        }
        ///<summary> Decrypts the encrypted EFT Account Number using the encryption Id and encryption type after validating that the user has authorization to do so </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the encrypted EFT Account Number</param>///<returns> The wrapper response object containing the decrypted EFT Account Number </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="DecryptEftAccountNumber" title="Code Example for calling DecryptEftAccountNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Billing\Globals.vb" region="DecryptEftAccountNumber" title="Code Example for calling DecryptEftAccountNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.RequestData> DecryptEftAccountNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptEftAccountNumber.RequestData>(proxy, proxy.DecryptEftAccountNumber);
            return s;
        }
        ///<summary> Decrypts the encrypted License Number using the encryption Id and encryption type after validating that the user has authorization to do so </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the encrypted License Number</param>///<returns> The wrapper response object containing the decrypted License Number </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptLicenseNumber" title="Code Example for calling DecryptLicenseNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptLicenseNumber" title="Code Example for calling DecryptLicenseNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.RequestData> DecryptLicenseNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptLicenseNumber.RequestData>(proxy, proxy.DecryptLicenseNumber);
            return s;
        }
        ///<summary> Decrypts multiple data elements (provided that the user has authority to decrypt the information). </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption key type, encrypted data, masking flag, data type, and the unique identifier associated with the encrypted data.</param>///<returns>The wrapper request object containing the encryption Id, encryption key type, encrypted data, plain text (decrypted information), masking flag, data type, and the unique identifier associated with the encrypted data.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DecryptMultipleItems" title="Code Example for calling DecryptMultipleItems function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DecryptMultipleItems" title="Code Example for calling DecryptMultipleItems function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.Request, Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.Response, Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.RequestData> DecryptMultipleItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.Request, Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.Response, Diamond.Common.Services.Messages.SecurityService.DecryptMultipleItems.RequestData>(proxy, proxy.DecryptMultipleItems);
            return s;
        }
        ///<summary> Decrypts the encrypted tax number using the encryption Id and encryption type after validating that the user has authorization to do so </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the encrypted Tax Number</param>///<returns> The wrapper response object containing the decrypted Tax Number </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptTaxNumber" title="Code Example for calling DecryptTaxNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="DecryptTaxNumber" title="Code Example for calling DecryptTaxNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.RequestData> DecryptTaxNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Request, Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Response, Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.RequestData>(proxy, proxy.DecryptTaxNumber);
            return s;
        }
        ///<summary> Determines whether Login info furnished already exists in the database </summary>///<param name="request">The wrapper request object containing the UserId and Domain Name</param>///<returns> The wrapper response object containing a boolean indicating whether the login info supplied already exists </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="DoesLoginAndDomainExist" title="Code Example for calling DoesLoginAndDomainExist function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="DoesLoginAndDomainExist" title="Code Example for calling DoesLoginAndDomainExist function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.Request, Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.Response, Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.RequestData> DoesLoginAndDomainExist()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.Request, Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.Response, Diamond.Common.Services.Messages.SecurityService.DoesLoginAndDomainExist.RequestData>(proxy, proxy.DoesLoginAndDomainExist);
            return s;
        }
        ///<summary> Encrypts the plain text using the encryption Id and encryption type </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption type and the plain text to be encrypted</param>///<returns> The wrapper response object containing the encrypted text </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="Encrypt" title="Code Example for calling Encrypt function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Encryption.vb" region="Encrypt" title="Code Example for calling Encrypt function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.Encrypt.Request, Diamond.Common.Services.Messages.SecurityService.Encrypt.Response, Diamond.Common.Services.Messages.SecurityService.Encrypt.RequestData> Encrypt()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.Encrypt.Request, Diamond.Common.Services.Messages.SecurityService.Encrypt.Response, Diamond.Common.Services.Messages.SecurityService.Encrypt.RequestData>(proxy, proxy.Encrypt);
            return s;
        }
        ///<summary> Encrypts multiple data elements. </summary>///<param name="request">The wrapper request object containing the encryption Id, encryption key type, masking flag, data type, and the unique identifier associated with the data.</param>///<returns>The wrapper request object containing the encryption Id, encryption key type, encrypted data, plain text (decrypted information), masking flag, data type, and the unique identifier associated with the data.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="EncryptMultipleItems" title="Code Example for calling EncryptMultipleItems function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="EncryptMultipleItems" title="Code Example for calling EncryptMultipleItems function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.Request, Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.Response, Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.RequestData> EncryptMultipleItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.Request, Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.Response, Diamond.Common.Services.Messages.SecurityService.EncryptMultipleItems.RequestData>(proxy, proxy.EncryptMultipleItems);
            return s;
        }
        ///<summary> Sets the temporary password for a user and returns it as a string. </summary>///<param name="request">The request containing the <c>LoginDomain</c>, <c>LoginName</c></param>///<c>LoginDomain</c>///<c>LoginName</c>///<returns>A <c>Response</c> object containing the <c>Password</c> as a string</returns>///<c>Response</c>///<c>Password</c>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.Request, Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.Response, Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.RequestData> GenerateTemporaryPassword()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.Request, Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.Response, Diamond.Common.Services.Messages.SecurityService.GenerateTemporaryPassword.RequestData>(proxy, proxy.GenerateTemporaryPassword);
            return s;
        }
        ///<summary> Gets signed on user info using windows identity </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing the returned User Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Reports\Globals.vb" region="GetSignedOnUser" title="Code Example for calling GetSignedOnUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Reports\Globals.vb" region="GetSignedOnUser" title="Code Example for calling GetSignedOnUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.Request, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.Response, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.RequestData> GetSignedOnUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.Request, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.Response, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUser.RequestData>(proxy, proxy.GetSignedOnUser);
            return s;
        }
        ///<summary> Gets the signed on user id using windows identity </summary>///<param name="request">The wrapper request object</param>///<returns> The wrapper response object containing the returned UserId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnel.vb" region="GetSignedOnUserId" title="Code Example for calling GetSignedOnUserId function"></code></example>///<code lang="vbnet" source="Diamond\UI\Claims\Personnel\ClaimPersonnel.vb" region="GetSignedOnUserId" title="Code Example for calling GetSignedOnUserId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.Request, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.Response, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.RequestData> GetSignedOnUserId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.Request, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.Response, Diamond.Common.Services.Messages.SecurityService.GetSignedOnUserId.RequestData>(proxy, proxy.GetSignedOnUserId);
            return s;
        }
        ///<summary> Gets the user info based on login name and domain </summary>///<param name="request">The wrapper request object containing user login name and domain info.</param>///<returns> The wrapper response object containing the returned User Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetUser" title="Code Example for calling GetUser function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="GetUser" title="Code Example for calling GetUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUser.Request, Diamond.Common.Services.Messages.SecurityService.GetUser.Response, Diamond.Common.Services.Messages.SecurityService.GetUser.RequestData> GetUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUser.Request, Diamond.Common.Services.Messages.SecurityService.GetUser.Response, Diamond.Common.Services.Messages.SecurityService.GetUser.RequestData>(proxy, proxy.GetUser);
            return s;
        }
        ///<summary> Gets the user agency info based on userid </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing the returned Agency Info </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserAgency" title="Code Example for calling GetUserAgency function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserAgency" title="Code Example for calling GetUserAgency function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserAgency.Request, Diamond.Common.Services.Messages.SecurityService.GetUserAgency.Response, Diamond.Common.Services.Messages.SecurityService.GetUserAgency.RequestData> GetUserAgency()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserAgency.Request, Diamond.Common.Services.Messages.SecurityService.GetUserAgency.Response, Diamond.Common.Services.Messages.SecurityService.GetUserAgency.RequestData>(proxy, proxy.GetUserAgency);
            return s;
        }
        ///<summary> Gets signed on user info based on User Id </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing the returned User Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Utility\Authentication\LoginForm.vb" region="GetUserById" title="Code Example for calling GetUserById function"></code></example>///<code lang="vbnet" source="Diamond\UI\Utility\Authentication\LoginForm.vb" region="GetUserById" title="Code Example for calling GetUserById function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserById.Request, Diamond.Common.Services.Messages.SecurityService.GetUserById.Response, Diamond.Common.Services.Messages.SecurityService.GetUserById.RequestData> GetUserById()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserById.Request, Diamond.Common.Services.Messages.SecurityService.GetUserById.Response, Diamond.Common.Services.Messages.SecurityService.GetUserById.RequestData>(proxy, proxy.GetUserById);
            return s;
        }
        ///<summary> Returns the UserId based on the User's Login Name and Login Domain </summary>///<param name="request">The wrapper request object containing the User's Login Name and Login Domain</param>///<returns> The wrapper response object containing the returned UserId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="GetUserId" title="Code Example for calling GetUserId function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\UserInfoForm.vb" region="GetUserId" title="Code Example for calling GetUserId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserId.Request, Diamond.Common.Services.Messages.SecurityService.GetUserId.Response, Diamond.Common.Services.Messages.SecurityService.GetUserId.RequestData> GetUserId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserId.Request, Diamond.Common.Services.Messages.SecurityService.GetUserId.Response, Diamond.Common.Services.Messages.SecurityService.GetUserId.RequestData>(proxy, proxy.GetUserId);
            return s;
        }
        ///<summary> Gets the user logon name and domain for a give UserId </summary>///<param name="request">The wrapper request object containing the UserId, Login Name and Login Domain</param>///<returns> The wrapper response object containing a boolean indicating whether the login credentials are valid and the Login Name and Domain for the supplied UserId </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserLogon" title="Code Example for calling GetUserLogon function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetUserLogon" title="Code Example for calling GetUserLogon function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserLogon.Request, Diamond.Common.Services.Messages.SecurityService.GetUserLogon.Response, Diamond.Common.Services.Messages.SecurityService.GetUserLogon.RequestData> GetUserLogon()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserLogon.Request, Diamond.Common.Services.Messages.SecurityService.GetUserLogon.Response, Diamond.Common.Services.Messages.SecurityService.GetUserLogon.RequestData>(proxy, proxy.GetUserLogon);
            return s;
        }
        ///<summary> Determines if a Client is identifiable by the request data provided. </summary>///<param name="request">The request contains data to valid user.</param>///<returns> A <c>Response</c> object containing the <c>ClientId</c> corresponding to the <c>PolicyNumber</c> provided. </returns>///<c>Response</c>///<c>ClientId</c>///<c>PolicyNumber</c>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.Request, Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.Response, Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.RequestData> GetUserRegistrationClientId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.Request, Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.Response, Diamond.Common.Services.Messages.SecurityService.GetUserRegistrationClientId.RequestData>(proxy, proxy.GetUserRegistrationClientId);
            return s;
        }
        ///<summary> Gets the agencies the User is authorized to view based on the UserId </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing a collection of agencies </returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsAgencyCombo.vb" region="GetViewableAgencies" title="Code Example for calling GetViewableAgencies function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsAgencyCombo.vb" region="GetViewableAgencies" title="Code Example for calling GetViewableAgencies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.Request, Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.Response, Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.RequestData> GetViewableAgencies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.Request, Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.Response, Diamond.Common.Services.Messages.SecurityService.GetViewableAgencies.RequestData>(proxy, proxy.GetViewableAgencies);
            return s;
        }
        ///<summary> Gets the Users info, the login User is authorized to view based on the UserId </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing a collection of Users Info </returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetViewableUsers" title="Code Example for calling GetViewableUsers function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetViewableUsers" title="Code Example for calling GetViewableUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.Request, Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.Response, Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.RequestData> GetViewableUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.Request, Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.Response, Diamond.Common.Services.Messages.SecurityService.GetViewableUsers.RequestData>(proxy, proxy.GetViewableUsers);
            return s;
        }
        ///<summary> Determines whether login user is an Insuresoft Employee based the UserId </summary>///<param name="request">The wrapper request object containing the UserId and ClientId</param>///<returns> The wrapper response object containing a boolean indicating whether the login user is Insuresoft Employee </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsInsuresoftUser" title="Code Example for calling IsInsuresoftUser function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsInsuresoftUser" title="Code Example for calling IsInsuresoftUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.Request, Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.Response, Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.RequestData> IsInsuresoftUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.Request, Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.Response, Diamond.Common.Services.Messages.SecurityService.IsInsuresoftUser.RequestData>(proxy, proxy.IsInsuresoftUser);
            return s;
        }
        ///<summary> Determines whether the specified request is supervisor. </summary>///<param name="request">The wrapper request object containing the UserId</param>///<returns> The wrapper response object containing a boolean indicating whether the login user is a Supervisor </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsSupervisor" title="Code Example for calling IsSupervisor function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsSupervisor" title="Code Example for calling IsSupervisor function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsSupervisor.Request, Diamond.Common.Services.Messages.SecurityService.IsSupervisor.Response, Diamond.Common.Services.Messages.SecurityService.IsSupervisor.RequestData> IsSupervisor()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsSupervisor.Request, Diamond.Common.Services.Messages.SecurityService.IsSupervisor.Response, Diamond.Common.Services.Messages.SecurityService.IsSupervisor.RequestData>(proxy, proxy.IsSupervisor);
            return s;
        }
        ///<summary> Determines whether Login info furnished by the user is valid based on UserId, Password and Domain Name supplied </summary>///<param name="request">The wrapper request object containing the UserId, Password and Domain Name</param>///<returns> The wrapper response object containing a boolean indicating whether the login info supplied is valid </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidDiamondLogin" title="Code Example for calling IsValidDiamondLogin function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidDiamondLogin" title="Code Example for calling IsValidDiamondLogin function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.Request, Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.Response, Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.RequestData> IsValidDiamondLogin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.Request, Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.Response, Diamond.Common.Services.Messages.SecurityService.IsValidDiamondLogin.RequestData>(proxy, proxy.IsValidDiamondLogin);
            return s;
        }
        ///<summary> Determines whether Login info furnished is valid based on UserId, Password and Domain Name supplied for non-agency Diamond users against Diamond Security or based on UserId against Company specific Security for Agency users. </summary>///<param name="request">The wrapper request object containing the UserId, Password and Domain Name</param>///<returns> The wrapper response object containing a boolean indicating whether the login info supplied is valid </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidLogin" title="Code Example for calling IsValidLogin function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="IsValidLogin" title="Code Example for calling IsValidLogin function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsValidLogin.Request, Diamond.Common.Services.Messages.SecurityService.IsValidLogin.Response, Diamond.Common.Services.Messages.SecurityService.IsValidLogin.RequestData> IsValidLogin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.IsValidLogin.Request, Diamond.Common.Services.Messages.SecurityService.IsValidLogin.Response, Diamond.Common.Services.Messages.SecurityService.IsValidLogin.RequestData>(proxy, proxy.IsValidLogin);
            return s;
        }
        ///<summary> Load password policy </summary>///<param name="request">The request containing no input parameter.</param>///<returns>A wrapper object containing PasswordPolicy object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\PasswordPolicyControl.vb" region="LoadPasswordPolicy" title="Code Example for calling LoadPasswordPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\PasswordPolicyControl.vb" region="LoadPasswordPolicy" title="Code Example for calling LoadPasswordPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.Request, Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.Response, Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.RequestData> LoadPasswordPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.Request, Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.Response, Diamond.Common.Services.Messages.SecurityService.LoadPasswordPolicy.RequestData>(proxy, proxy.LoadPasswordPolicy);
            return s;
        }
        ///<summary> Load users user security question link for login name </summary>///<param name="request">The request object containing LoginName.</param>///<returns>A wrapper object containing collection of UsersUserSecurityQuestionLinkForLoginName</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Administration\ForgotPassword\VerifySecurityInformation.ascx.vb" region="LoadUsersUserSecurityQuestionLinkForLoginName" title="Code Example for calling LoadUsersUserSecurityQuestionLinkForLoginName function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Administration\ForgotPassword\VerifySecurityInformation.ascx.vb" region="LoadUsersUserSecurityQuestionLinkForLoginName" title="Code Example for calling LoadUsersUserSecurityQuestionLinkForLoginName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.Request, Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.Response, Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.RequestData> LoadUsersUserSecurityQuestionLinkForLoginName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.Request, Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.Response, Diamond.Common.Services.Messages.SecurityService.LoadUsersUserSecurityQuestionLinkForLoginName.RequestData>(proxy, proxy.LoadUsersUserSecurityQuestionLinkForLoginName);
            return s;
        }
        ///<summary> Save password policy </summary>///<param name="request">The request object containing PasswordPolicy object.</param>///<returns>A wrapper object containing boolean indicating success/failure</returns>///<example>  <code lang="vbnet" source="Diamond\UI\User\PasswordPolicyControl.vb" region="SavePasswordPolicy" title="Code Example for calling SavePasswordPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\User\PasswordPolicyControl.vb" region="SavePasswordPolicy" title="Code Example for calling SavePasswordPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.Request, Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.Response, Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.RequestData> SavePasswordPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.Request, Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.Response, Diamond.Common.Services.Messages.SecurityService.SavePasswordPolicy.RequestData>(proxy, proxy.SavePasswordPolicy);
            return s;
        }
        ///<summary> Returns the current user name </summary>///<param name="request">The wrapper request object</param>///<returns> The wrapper response object containing returned current user name </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SignedOnUserLogin" title="Code Example for calling SignedOnUserLogin function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SignedOnUserLogin" title="Code Example for calling SignedOnUserLogin function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.Request, Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.Response, Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.RequestData> SignedOnUserLogin()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.Request, Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.Response, Diamond.Common.Services.Messages.SecurityService.SignedOnUserLogin.RequestData>(proxy, proxy.SignedOnUserLogin);
            return s;
        }
        ///<summary> Determines whether login Users has a specific Diamond system authority based on Login Name, Login Domain, Authority group the User belongs to, the Diamond Authority within the group and the amount to be processed </summary>///<param name="request">The wrapper request object containing the Authority group the User belongs to, the Diamond Authority within the group and the amount to be processed</param>///<returns> The wrapper response object containing a boolean indicating whether the User has required authorization </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\UnderwriterReview\UnderwriterReview.vb" region="UserHasAuthority" title="Code Example for calling UserHasAuthority function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\UnderwriterReview\UnderwriterReview.vb" region="UserHasAuthority" title="Code Example for calling UserHasAuthority function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.Request, Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.Response, Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.RequestData> UserHasAuthority()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.Request, Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.Response, Diamond.Common.Services.Messages.SecurityService.UserHasAuthority.RequestData>(proxy, proxy.UserHasAuthority);
            return s;
        }
        ///<summary> Determines whether login Users has a specific Diamond system authority based on UserId, Authority group the User belongs to, the Diamond Authority within the group and the amount to be processed </summary>///<param name="request">The wrapper request object containing the UserId, the Authority group the User belongs to, the Diamond Authority within the group and the amount to be processed</param>///<returns> The wrapper response object containing a boolean indicating whether the User has required authorization </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UserHasAuthorityById" title="Code Example for calling UserHasAuthorityById function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="UserHasAuthorityById" title="Code Example for calling UserHasAuthorityById function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.Request, Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.Response, Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.RequestData> UserHasAuthorityById()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.Request, Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.Response, Diamond.Common.Services.Messages.SecurityService.UserHasAuthorityById.RequestData>(proxy, proxy.UserHasAuthorityById);
            return s;
        }
        ///<summary> Determines whether Login info furnished by the user is valid and authorized to access Application based on UserId, Password and Domain Name and Application Name supplied </summary>///<param name="request">The wrapper request object containing the UserId, Password, Application Name and Domain Name</param>///<returns> The wrapper response object containing a boolean indicating whether the login info supplied is valid and UserId if valid </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ValidUser" title="Code Example for calling ValidUser function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ValidUser" title="Code Example for calling ValidUser function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.ValidUser.Request, Diamond.Common.Services.Messages.SecurityService.ValidUser.Response, Diamond.Common.Services.Messages.SecurityService.ValidUser.RequestData> ValidUser()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.ValidUser.Request, Diamond.Common.Services.Messages.SecurityService.ValidUser.Response, Diamond.Common.Services.Messages.SecurityService.ValidUser.RequestData>(proxy, proxy.ValidUser);
            return s;
        }
        ///<summary> Verify answers users user security question link for login name </summary>///<param name="request">The request containing LoginName and UsersUserSecurityQuestionLinkForLoginName.</param>///<returns>A wrapper object containing boolean indicating success/failure</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\Administration\ForgotPassword\VerifySecurityInformation.ascx.vb" region="VerifyAnswersUsersUserSecurityQuestionLinkForLoginName" title="Code Example for calling VerifyAnswersUsersUserSecurityQuestionLinkForLoginName function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\Administration\ForgotPassword\VerifySecurityInformation.ascx.vb" region="VerifyAnswersUsersUserSecurityQuestionLinkForLoginName" title="Code Example for calling VerifyAnswersUsersUserSecurityQuestionLinkForLoginName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.Request, Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.Response, Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.RequestData> VerifyAnswersUsersUserSecurityQuestionLinkForLoginName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.Request, Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.Response, Diamond.Common.Services.Messages.SecurityService.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName.RequestData>(proxy, proxy.VerifyAnswersUsersUserSecurityQuestionLinkForLoginName);
            return s;
        }
        ///<summary> Determines if the <c>LoginDomain</c>, <c>LoginName</c> and <c>Email Address</c> combination are valid. </summary>///<c>LoginDomain</c>///<c>LoginName</c>///<c>Email Address</c>///<param name="request">The request containing the <c>LoginDomain</c>, <c>LoginName</c> and <c>EmailAddress</c> to validate.</param>///<c>LoginDomain</c>///<c>LoginName</c>///<c>EmailAddress</c>///<returns> A <c>Response</c> object containing the <c>Valid</c> flag indicating whether the <c>EmailAddress</c> is valid for the user information provided. </returns>///<c>Response</c>///<c>Valid</c>///<c>EmailAddress</c>
        public static ServiceCall<Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.Request, Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.Response, Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.RequestData> VerifyUsersEmailAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SecurityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.Request, Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.Response, Diamond.Common.Services.Messages.SecurityService.VerifyUsersEmailAddress.RequestData>(proxy, proxy.VerifyUsersEmailAddress);
            return s;
        }
    }
    ///<summary> Proxy class for Static Data Manager Service to load or clear Submit, System, User Authority and Version, UIConfig and UICoverage data </summary>
    public static class StaticDataManagerService
    {
        ///<summary> Clears the static data for the Contact Management component. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.RequestData> ClearContactManagementData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearContactManagementData.RequestData>(proxy, proxy.ClearContactManagementData);
            return s;
        }
        ///<summary> Clears all cached data from all of the static data managers. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\DataManager.vb" region="ClearDataFromAllManagers" title="Code Example for calling ClearDataFromAllManagers function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\DataManager.vb" region="ClearDataFromAllManagers" title="Code Example for calling ClearDataFromAllManagers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.RequestData> ClearDataFromAllManagers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearDataFromAllManagers.RequestData>(proxy, proxy.ClearDataFromAllManagers);
            return s;
        }
        ///<summary> Clears the Submit data such as LOB, Company, Agency, State, Quote Source etc </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SubmitDataManager.vb" region="ClearSubmitData" title="Code Example for calling ClearSubmitData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SubmitDataManager.vb" region="ClearSubmitData" title="Code Example for calling ClearSubmitData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.RequestData> ClearSubmitData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSubmitData.RequestData>(proxy, proxy.ClearSubmitData);
            return s;
        }
        ///<summary> Clears the system data. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDataManager.vb" region="ClearSystemData" title="Code Example for calling ClearSystemData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDataManager.vb" region="ClearSystemData" title="Code Example for calling ClearSystemData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.RequestData> ClearSystemData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemData.RequestData>(proxy, proxy.ClearSystemData);
            return s;
        }
        ///<summary> Clear system settings data </summary>///<param name="request">The request object containing nothing.</param>///<returns>A wrapper object containing nothing</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemSettingsDataManager.vb" region="ClearSystemSettingsData" title="Code Example for calling ClearSystemSettingsData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemSettingsDataManager.vb" region="ClearSystemSettingsData" title="Code Example for calling ClearSystemSettingsData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.RequestData> ClearSystemSettingsData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearSystemSettingsData.RequestData>(proxy, proxy.ClearSystemSettingsData);
            return s;
        }
        ///<summary> Clears the UIConfig data such as UIConfigObjectType, UIConfigParent etc </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\UIConfigDataManager.vb" region="ClearUIConfigData" title="Code Example for calling ClearUIConfigData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\UIConfigDataManager.vb" region="ClearUIConfigData" title="Code Example for calling ClearUIConfigData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.RequestData> ClearUIConfigData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearUIConfigData.RequestData>(proxy, proxy.ClearUIConfigData);
            return s;
        }
        ///<summary> Clears the UICoverage data from the Data Cache </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ClearUICoverageData" title="Code Example for calling ClearUICoverageData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ClearUICoverageData" title="Code Example for calling ClearUICoverageData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.RequestData> ClearUICoverageData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearUICoverageData.RequestData>(proxy, proxy.ClearUICoverageData);
            return s;
        }
        ///<summary> Clears the version data from the Data Cache </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\VersionDataManager.vb" region="ClearVersionData" title="Code Example for calling ClearVersionData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\VersionDataManager.vb" region="ClearVersionData" title="Code Example for calling ClearVersionData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.RequestData> ClearVersionData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.Request, Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.Response, Diamond.Common.Services.Messages.StaticDataManager.ClearVersionData.RequestData>(proxy, proxy.ClearVersionData);
            return s;
        }
        ///<summary> Gets the static data for the Contact Management component. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object containing the static data</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.RequestData> GetContactManagementData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetContactManagementData.RequestData>(proxy, proxy.GetContactManagementData);
            return s;
        }
        ///<summary> Gets the Submit data such as LOB, Company, Agency, State, Quote Source etc </summary>///<param name="request">A wrapper request object.</param>///<returns> A wrapper response object containing dataset including the submit static data </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SubmitDataManager.vb" region="GetSubmitData" title="Code Example for calling GetSubmitData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SubmitDataManager.vb" region="GetSubmitData" title="Code Example for calling GetSubmitData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.RequestData> GetSubmitData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSubmitData.RequestData>(proxy, proxy.GetSubmitData);
            return s;
        }
        ///<summary> Gets the system data. </summary>///<param name="request">A wrapper request object.</param>///<returns> A wrapper response object containing the static data </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDataManager.vb" region="GetSystemData" title="Code Example for calling GetSystemData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDataManager.vb" region="GetSystemData" title="Code Example for calling GetSystemData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.RequestData> GetSystemData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSystemData.RequestData>(proxy, proxy.GetSystemData);
            return s;
        }
        ///<summary> Get system settings data </summary>///<param name="request">The request object containing a boolean indicating how the data should be loaded</param>///<returns>A wrapper object containing containing StaticData and SystemSettingsData objects</returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemSettingsDataManager.vb" region="GetSystemSettingsData" title="Code Example for calling GetSystemSettingsData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemSettingsDataManager.vb" region="GetSystemSettingsData" title="Code Example for calling GetSystemSettingsData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.RequestData> GetSystemSettingsData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetSystemSettingsData.RequestData>(proxy, proxy.GetSystemSettingsData);
            return s;
        }
        ///<summary> Gets the UIConfig data such as UIConfigParent, UIConfigObjectType etc </summary>///<param name="request">A wrapper request object.</param>///<returns> A wrapper response object containing dataset including the UIConfig static data </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\UIConfigDataManager.vb" region="GetUIConfigData" title="Code Example for calling GetUIConfigData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\UIConfigDataManager.vb" region="GetUIConfigData" title="Code Example for calling GetUIConfigData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.RequestData> GetUIConfigData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetUIConfigData.RequestData>(proxy, proxy.GetUIConfigData);
            return s;
        }
        ///<summary> Returns the UICoverage data for the VersionId </summary>///<param name="request">A wrapper request object containing the VersionId.</param>///<returns> A wrapper response object containing returned UICoverage Data </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\UICoverageDataManager.vb" region="GetUICoverageData" title="Code Example for calling GetUICoverageData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\UICoverageDataManager.vb" region="GetUICoverageData" title="Code Example for calling GetUICoverageData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.RequestData> GetUICoverageData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetUICoverageData.RequestData>(proxy, proxy.GetUICoverageData);
            return s;
        }
        ///<summary> Returns the Version data for the VersionId </summary>///<param name="request">A wrapper request object containing the VersionId.</param>///<returns> A wrapper response object containing returned User AuthoritVersion Data </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\VersionDataManager.vb" region="GetVersionData" title="Code Example for calling GetVersionData function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\VersionDataManager.vb" region="GetVersionData" title="Code Example for calling GetVersionData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.RequestData> GetVersionData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.Request, Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.Response, Diamond.Common.Services.Messages.StaticDataManager.GetVersionData.RequestData>(proxy, proxy.GetVersionData);
            return s;
        }
        ///<summary> Loads the resolver config. </summary>///<param name="request">A wrapper request object.</param>///<returns> A wrapper response object containing the dataset including the updated hash values </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\ResolverSupport.vb" region="LoadResolverConfig" title="Code Example for calling LoadResolverConfig function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\ResolverSupport.vb" region="LoadResolverConfig" title="Code Example for calling LoadResolverConfig function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.RequestData> LoadResolverConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadResolverConfig.RequestData>(proxy, proxy.LoadResolverConfig);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.RequestData> LoadSelectedVersionConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadSelectedVersionConfig.RequestData>(proxy, proxy.LoadSelectedVersionConfig);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.RequestData> LoadVersionConfiguration()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.Request, Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.Response, Diamond.Common.Services.Messages.StaticDataManager.LoadVersionConfiguration.RequestData>(proxy, proxy.LoadVersionConfiguration);
            return s;
        }
        ///<summary> Resolves XML document passed in with static data (version and system) </summary>///<param name="request">A wrapper request object.</param>///<returns> A wrapper response object containing XML document with static data resolved </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.Request, Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.Response, Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.RequestData> ResolveXML()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.Request, Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.Response, Diamond.Common.Services.Messages.StaticDataManager.ResolveXML.RequestData>(proxy, proxy.ResolveXML);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.RequestData> SaveSelectedItemsForVersionConfig()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.Request, Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.Response, Diamond.Common.Services.Messages.StaticDataManager.SaveSelectedItemsForVersionConfig.RequestData>(proxy, proxy.SaveSelectedItemsForVersionConfig);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.Request, Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.Response, Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.RequestData> SupportLoadClaimPersonnel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.Request, Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.Response, Diamond.Common.Services.Messages.StaticDataManager.SupportLoadClaimPersonnel.RequestData>(proxy, proxy.SupportLoadClaimPersonnel);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.Request, Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.Response, Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.RequestData> ValidateVersionConfiguration()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.Request, Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.Response, Diamond.Common.Services.Messages.StaticDataManager.ValidateVersionConfiguration.RequestData>(proxy, proxy.ValidateVersionConfiguration);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.WakeUp.Request, Diamond.Common.Services.Messages.StaticDataManager.WakeUp.Response, Diamond.Common.Services.Messages.StaticDataManager.WakeUp.RequestData> WakeUp()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StaticDataManagerServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StaticDataManager.WakeUp.Request, Diamond.Common.Services.Messages.StaticDataManager.WakeUp.Response, Diamond.Common.Services.Messages.StaticDataManager.WakeUp.RequestData>(proxy, proxy.WakeUp);
            return s;
        }
    }
    ///<summary> Proxy class for Stats Export </summary>
    public static class StatsExportService
    {
        ///<summary> Function used to load stats for company LOB </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing StatSetup </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StatsExport\StatsExport.vb" region="LoadCompanyLOBStats" title="Code Example for calling LoadCompanyLOBStats function"></code></example>///<code lang="vbnet" source="Diamond\UI\StatsExport\StatsExport.vb" region="LoadCompanyLOBStats" title="Code Example for calling LoadCompanyLOBStats function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.Request, Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.Response, Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.RequestData> LoadCompanyLOBStats()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StatsExportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.Request, Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.Response, Diamond.Common.Services.Messages.StatsExportService.LoadCompanyLOBStats.RequestData>(proxy, proxy.LoadCompanyLOBStats);
            return s;
        }
        ///<summary> Function used to process stats </summary>///<param name="request">The wrapper request containing StartDate, EndDate, LobId, FileName, StatsBureauNum, StatsBureauName, StatsReportingOptionId.</param>///<returns> The wrapper response containing success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StatsExport\StatsExport.vb" region="ProcessStats" title="Code Example for calling ProcessStats function"></code></example>///<code lang="vbnet" source="Diamond\UI\StatsExport\StatsExport.vb" region="ProcessStats" title="Code Example for calling ProcessStats function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.StatsExportService.ProcessStats.Request, Diamond.Common.Services.Messages.StatsExportService.ProcessStats.Response, Diamond.Common.Services.Messages.StatsExportService.ProcessStats.RequestData> ProcessStats()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.StatsExportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.StatsExportService.ProcessStats.Request, Diamond.Common.Services.Messages.StatsExportService.ProcessStats.Response, Diamond.Common.Services.Messages.StatsExportService.ProcessStats.RequestData>(proxy, proxy.ProcessStats);
            return s;
        }
    }
    ///<summary> Proxy class for System Settings Service such as GetSystemSettings, add or remove System Settings  </summary>
    public static class SystemSettingsService
    {
        ///<summary> Deletes the specified system setting. </summary>///<param name="request">The wrapper request containing SettingId.</param>///<returns>The wrapper response containing Success</returns>///<example>  <code lang="vbnet" source="Diamond\UI\SystemSettings\SystemSettingsEditorDialog.vb" region="DeleteSetting" title="Code Example for calling Delete function"></code></example>///<code lang="vbnet" source="Diamond\UI\SystemSettings\SystemSettingsEditorDialog.vb" region="DeleteSetting" title="Code Example for calling Delete function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.Delete.Request, Diamond.Common.Services.Messages.SystemSettingsService.Delete.Response, Diamond.Common.Services.Messages.SystemSettingsService.Delete.RequestData> Delete()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SystemSettingsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.Delete.Request, Diamond.Common.Services.Messages.SystemSettingsService.Delete.Response, Diamond.Common.Services.Messages.SystemSettingsService.Delete.RequestData>(proxy, proxy.Delete);
            return s;
        }
        ///<summary> Gets the system settings. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing Success, SystemSettings </returns>///<example>  <code lang="vbnet" source="Diamond\UI\SystemSettings\SystemSettingsEditorDialog.vb" region="GetSystemSettings" title="Code Example for calling GetSystemSettings function"></code></example>///<code lang="vbnet" source="Diamond\UI\SystemSettings\SystemSettingsEditorDialog.vb" region="GetSystemSettings" title="Code Example for calling GetSystemSettings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.Request, Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.Response, Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.RequestData> GetSystemSettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SystemSettingsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.Request, Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.Response, Diamond.Common.Services.Messages.SystemSettingsService.GetSystemSettings.RequestData>(proxy, proxy.GetSystemSettings);
            return s;
        }
        ///<summary> Saves the specified system setting. </summary>///<param name="request">The wrapper request containing Setting.</param>///<returns> The wrapper response containing Success, Setting </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="SaveSettings" title="Code Example for calling Save function for saving Download setting"></code>  <code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="SaveSettings" title="Code Example for calling Save function for saving Color setting"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Download.vb" region="SaveSettings" title="Code Example for calling Save function for saving Download setting"></code>///<code lang="vbnet" source="Diamond\UI\Core\DiamondMainMdiParentForm.vb" region="SaveSettings" title="Code Example for calling Save function for saving Color setting"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.Save.Request, Diamond.Common.Services.Messages.SystemSettingsService.Save.Response, Diamond.Common.Services.Messages.SystemSettingsService.Save.RequestData> Save()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SystemSettingsServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SystemSettingsService.Save.Request, Diamond.Common.Services.Messages.SystemSettingsService.Save.Response, Diamond.Common.Services.Messages.SystemSettingsService.Save.RequestData>(proxy, proxy.Save);
            return s;
        }
    }
    ///<summary> Proxy class for Third Party Service </summary>
    public static class ThirdPartyService
    {

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.RequestData> ACDAutoLinkAppraisalAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.AppraisalAssignment.RequestData>(proxy, proxy.ACDAutoLinkAppraisalAssignment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.RequestData> APlusPropertyLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.APlusPropertyLookup.RequestData>(proxy, proxy.APlusPropertyLookup);
            return s;
        }
        ///<summary> Function orders credit scores automatically at renewal </summary>///<param name="request">The wrapper request containing Image.</param>///<returns>The wrapper response containing Image</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AutomaticRenewalCreditScoreOrder" title="Code Example for calling AutomaticRenewalCreditScoreOrder function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="AutomaticRenewalCreditScoreOrder" title="Code Example for calling AutomaticRenewalCreditScoreOrder function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.Request, Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.Response, Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.RequestData> AutomaticRenewalCreditScoreOrder()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.Request, Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.Response, Diamond.Common.Services.Messages.ThirdPartyService.AutomaticRenewalCreditScoreOrder.RequestData>(proxy, proxy.AutomaticRenewalCreditScoreOrder);
            return s;
        }
        ///<summary> Function adds ChoicePoint request to queue for batch processing </summary>///<param name="request">The wrapper request containing ThirdPartyData, RequestType, DriverNum.</param>///<returns>Diamond Validation</returns>///<example>  <code lang="vbnet" source="Diamond\Business\ThirdParty\ChoicePoint\ChoicePointScreenSupport.vb" region="BatchQueue" title="Code Example for calling BatchQueue function"></code></example>///<code lang="vbnet" source="Diamond\Business\ThirdParty\ChoicePoint\ChoicePointScreenSupport.vb" region="BatchQueue" title="Code Example for calling BatchQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.Request, Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.Response, Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.RequestData> BatchQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.Request, Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.Response, Diamond.Common.Services.Messages.ThirdPartyService.BatchQueue.RequestData>(proxy, proxy.BatchQueue);
            return s;
        }
        ///<summary> Function adds APS2 assignment to Copart auction </summary>///<param name="request">The wrapper request containing salvage vehicle info.</param>///<returns></returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.RequestData> CopartAddAPS2Assignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddAPS2Assignment.RequestData>(proxy, proxy.CopartAddAPS2Assignment);
            return s;
        }
        ///<summary> Function adds offsite assignment to Copart auction </summary>///<param name="request">The wrapper request containing salvage vehicle info.</param>///<returns></returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.RequestData> CopartAddOffsiteAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartAddOffsiteAssignment.RequestData>(proxy, proxy.CopartAddOffsiteAssignment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.RequestData> CopartCancelAPS2Assignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelAPS2Assignment.RequestData>(proxy, proxy.CopartCancelAPS2Assignment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.RequestData> CopartCancelOffsiteAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartCancelOffsiteAssignment.RequestData>(proxy, proxy.CopartCancelOffsiteAssignment);
            return s;
        }
        ///<summary> Function gets Copart code for the make </summary>///<param name="request">The wrapper request containing make.</param>///<returns></returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.RequestData> CopartGetMakeCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetMakeCode.RequestData>(proxy, proxy.CopartGetMakeCode);
            return s;
        }
        ///<summary> Function gets Copart static data </summary>///<param name="request">The wrapper request containing make.</param>///<returns></returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.RequestData> CopartGetStaticData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartGetStaticData.RequestData>(proxy, proxy.CopartGetStaticData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.RequestData> CopartProcessLotUpdates()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartProcessLotUpdates.RequestData>(proxy, proxy.CopartProcessLotUpdates);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.RequestData> CopartUpdateAPS2Assignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateAPS2Assignment.RequestData>(proxy, proxy.CopartUpdateAPS2Assignment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.RequestData> CopartUpdateOffsiteAssignment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.Request, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.Response, Diamond.Common.Services.Messages.ThirdPartyService.CopartUpdateOffsiteAssignment.RequestData>(proxy, proxy.CopartUpdateOffsiteAssignment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.RequestData> CreateAndSendEnvelope()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.CreateAndSendEnvelope.RequestData>(proxy, proxy.CreateAndSendEnvelope);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.Request, Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.Response, Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.RequestData> CreateIntegrationToken()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.Request, Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.Response, Diamond.Common.Services.Messages.ThirdPartyService.CreateIntegrationToken.RequestData>(proxy, proxy.CreateIntegrationToken);
            return s;
        }
        ///<summary> Deletes the specified Choicepoint Account. </summary>///<param name="request">The wrapper request object containing the Choicepoint Account to be deleted.</param>///<returns>The wrapper response containing a flag indicating if the Choicepoint Account was successfully deleted.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\AccountSetupControl.vb" region="DeleteAccount" title="Code Example for calling DeleteAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\AccountSetupControl.vb" region="DeleteAccount" title="Code Example for calling DeleteAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.Request, Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.Response, Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.RequestData> DeleteAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.Request, Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.Response, Diamond.Common.Services.Messages.ThirdPartyService.DeleteAccount.RequestData>(proxy, proxy.DeleteAccount);
            return s;
        }
        ///<summary> Deletes the report. </summary>///<param name="request">The wrapper request containing quoteback guid, UsersId.</param>///<returns>The wrapper response containing success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="DeleteReport" title="Code Example for calling DeleteReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ConfigurableReportsSetup\ReportList.vb" region="DeleteReport" title="Code Example for calling DeleteReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.RequestData> DeleteReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.DeleteReport.RequestData>(proxy, proxy.DeleteReport);
            return s;
        }
        ///<summary> Fills the ThirdPartyData with data from PolicyImage </summary>///<param name="request">The wrapper request containing PolicyImage.</param>///<returns> The wrapper response containing PolicyImage </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControls\BaseClasses\InsPolicyDetail.vb" region="FillPolicyImageData" title="Code Example for calling FillPolicyImageData function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControls\BaseClasses\InsPolicyDetail.vb" region="FillPolicyImageData" title="Code Example for calling FillPolicyImageData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Request, Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Response, Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.RequestData> FillPolicyImageData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Request, Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Response, Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.RequestData>(proxy, proxy.FillPolicyImageData);
            return s;
        }
        ///<summary> Function loads data for SAQ order </summary>///<param name="request">The wrapper request containing PolicyImage.</param>///<returns>PolicyImage</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="FillSAQData" title="Code Example for calling FillSAQData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="FillSAQData" title="Code Example for calling FillSAQData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.Request, Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.Response, Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.RequestData> FillSAQData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.Request, Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.Response, Diamond.Common.Services.Messages.ThirdPartyService.FillSAQData.RequestData>(proxy, proxy.FillSAQData);
            return s;
        }
        ///<summary> Function gathers information on Claims; nothing to do with ChoicePoint as used through Diamond </summary>///<param name="request">The wrapper request containing BeginningDate, EndDate, ClueCategory.</param>///<returns> The wrapper response containing CLUEAutoRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUEAutoRecords" title="Code Example for calling GatherCLUEAutoRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUEAutoRecords" title="Code Example for calling GatherCLUEAutoRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.RequestData> GatherCLUEAutoRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEAutoRecords.RequestData>(proxy, proxy.GatherCLUEAutoRecords);
            return s;
        }
        ///<summary> Function gathers information on Claims; nothing to do with ChoicePoint as used through Diamond </summary>///<param name="request">The wrapper request containing BeginningDate, EndDate, ClueCategory.</param>///<returns> The wrapper response containing CLUECommercialRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUECommercialRecords" title="Code Example for calling GatherCLUECommercialRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUECommercialRecords" title="Code Example for calling GatherCLUECommercialRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.RequestData> GatherCLUECommercialRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUECommercialRecords.RequestData>(proxy, proxy.GatherCLUECommercialRecords);
            return s;
        }
        ///<summary> Function gathers information on Claims; nothing to do with ChoicePoint as used through Diamond </summary>///<param name="request">The wrapper request containing BeginningDate, EndDate, ClueCategory.</param>///<returns> The wrapper response containing CLUEPropRecords </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUEPropRecords" title="Code Example for calling GatherCLUEPropRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\Clue.vb" region="GatherCLUEPropRecords" title="Code Example for calling GatherCLUEPropRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.RequestData> GatherCLUEPropRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCLUEPropRecords.RequestData>(proxy, proxy.GatherCLUEPropRecords);
            return s;
        }
        ///<summary> Function gathers information on Claims used for Corvel export </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing CorvelExportRecords </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.RequestData> GatherCorvelExportRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.GatherCorvelExportRecords.RequestData>(proxy, proxy.GatherCorvelExportRecords);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.RequestData> GenerateStaticData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.GenerateStaticData.RequestData>(proxy, proxy.GenerateStaticData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.RequestData> GeoTaxLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.GeoTaxLookup.RequestData>(proxy, proxy.GeoTaxLookup);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.RequestData> GetEnvelopeStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetEnvelopeStatus.RequestData>(proxy, proxy.GetEnvelopeStatus);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.RequestData> GetESignSourceDocument()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.GetESignSourceDocument.RequestData>(proxy, proxy.GetESignSourceDocument);
            return s;
        }
        ///<summary> Function retrieves specific ChoicePoint Test Cases that provide result </summary>///<param name="request">The wrapper request containing GetMVR, WhichMVR, GetCLUEAuto, GetCLUEProperty, GetNCF.</param>///<returns> The wrapper response containing TestCases </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\CPDataFill.vb" region="GetTestCases" title="Code Example for calling GetTestCases function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\CPDataFill.vb" region="GetTestCases" title="Code Example for calling GetTestCases function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.Request, Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.Response, Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.RequestData> GetTestCases()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.Request, Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.Response, Diamond.Common.Services.Messages.ThirdPartyService.GetTestCases.RequestData>(proxy, proxy.GetTestCases);
            return s;
        }
        ///<summary> Function orders weather reports from Weather Analytics </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response.</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.RequestData> GetWeatherAnalyticsReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.GetWeatherAnalyticsReport.RequestData>(proxy, proxy.GetWeatherAnalyticsReport);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.RequestData> IntegrationServicesCreateWorkflowForPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesCreateWorkflowForPolicy.RequestData>(proxy, proxy.IntegrationServicesCreateWorkflowForPolicy);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.RequestData> IntegrationServicesLoadDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLoadDCPolicy.RequestData>(proxy, proxy.IntegrationServicesLoadDCPolicy);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.RequestData> IntegrationServicesLookupDCPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesLookupDCPolicy.RequestData>(proxy, proxy.IntegrationServicesLookupDCPolicy);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.RequestData> IntegrationServicesPolicySearch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.Request, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.Response, Diamond.Common.Services.Messages.ThirdPartyService.IntegrationServicesPolicySearch.RequestData>(proxy, proxy.IntegrationServicesPolicySearch);
            return s;
        }
        ///<summary> Function used for Real-Time ChoicePoint requests. </summary>///<param name="request">The wrapper request containing ThirdPartyData, RequestType, SaveRequest.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="InteractiveRequest" title="Code Example for calling InteractiveRequest function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="InteractiveRequest" title="Code Example for calling InteractiveRequest function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.Request, Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.Response, Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.RequestData> InteractiveRequest()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.Request, Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.Response, Diamond.Common.Services.Messages.ThirdPartyService.InteractiveRequest.RequestData>(proxy, proxy.InteractiveRequest);
            return s;
        }
        ///<summary> ISO API to lookup Passport Location information. </summary>///<param name="request">A wrapper request object containing an address</param>///<returns>Collection of ISOPassportLocationInfo objects</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.RequestData> ISOPassportLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.ISOPassportLookup.RequestData>(proxy, proxy.ISOPassportLookup);
            return s;
        }
        ///<summary> Function loads Ky Tax Historical Import data to diamond </summary>///<param name="request">The wrapper request containing filename.</param>///<returns>Success</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.Request, Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.Response, Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.RequestData> KYTaxHistoricalImport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.Request, Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.Response, Diamond.Common.Services.Messages.ThirdPartyService.KYTaxHistoricalImport.RequestData>(proxy, proxy.KYTaxHistoricalImport);
            return s;
        }
        ///<summary> Loads all of the Choicepoint Accounts that are currently setup in the system. </summary>///<param name="request">The wrapper request object.</param>///<returns>The wrapper response containing the collection of Choicepoint Accounts.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\AccountSetupControl.vb" region="LoadAccountList" title="Code Example for calling LoadAccountList function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\AccountSetupControl.vb" region="LoadAccountList" title="Code Example for calling LoadAccountList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.RequestData> LoadAccountList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAccountList.RequestData>(proxy, proxy.LoadAccountList);
            return s;
        }
        ///<summary> Function load all Metro records for claim </summary>///<param name="request">The wrapper request containing order info.</param>///<returns>collection of metro records</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.RequestData> LoadAllMetroRecordsForClaim()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAllMetroRecordsForClaim.RequestData>(proxy, proxy.LoadAllMetroRecordsForClaim);
            return s;
        }
        ///<summary> Function loads Auto Data Prefill Commercial order for policy </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns>ThirdPartyData</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="LoadSAQOrder" title="Code Example for calling LoadSAQOrder function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="LoadSAQOrder" title="Code Example for calling LoadSAQOrder function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.RequestData> LoadAutoDataPrefillCommercial()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadAutoDataPrefillCommercial.RequestData>(proxy, proxy.LoadAutoDataPrefillCommercial);
            return s;
        }
        ///<summary> Function loads transmission for policy </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns>ChoicePointTransmissions</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadChoicePointTransmissions" title="Code Example for calling LoadChoicePointTransmissions function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadChoicePointTransmissions" title="Code Example for calling LoadChoicePointTransmissions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.RequestData> LoadChoicePointTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.RequestData>(proxy, proxy.LoadChoicePointTransmissions);
            return s;
        }
        ///<summary> Loads the CLUE Auto report data for a given <c>PolicyId</c>, <c>PolicyImageNum</c>, <c>UnitNum</c>(DriverNum), <c>ChoicePointTransmissionNum</c> and <c>ThirdPartyTypeId</c> (<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CLUEAuto" />). </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>UnitNum</c>///<c>ChoicePointTransmissionNum</c>///<c>ThirdPartyTypeId</c>///<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CLUEAuto" />///<param name="request">The wrapper containing the report identification information.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCLUEAutoReportObject" title="Code Example for calling LoadCLUEAutoReportObject function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCLUEAutoReportObject" title="Code Example for calling LoadCLUEAutoReportObject function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.RequestData> LoadCLUEAutoReportObject()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEAutoReportObject.RequestData>(proxy, proxy.LoadCLUEAutoReportObject);
            return s;
        }
        ///<summary> Loads the CLUE Property report data for a given <c>PolicyId</c>, <c>PolicyImageNum</c>, <c>UnitNum</c>(DriverNum), <c>ChoicePointTransmissionNum</c> and <c>ThirdPartyTypeId</c> (<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CLUEProp" />). </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>UnitNum</c>///<c>ChoicePointTransmissionNum</c>///<c>ThirdPartyTypeId</c>///<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CLUEProp" />///<param name="request">The wrapper containing the report identification information.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalProperty.ReportData" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalProperty.ReportData" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCLUEPropertyReportObject" title="Code Example for calling LoadCLUEPropertyReportObject function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadCLUEPropertyReportObject" title="Code Example for calling LoadCLUEPropertyReportObject function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.RequestData> LoadCLUEPropertyReportObject()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCLUEPropertyReportObject.RequestData>(proxy, proxy.LoadCLUEPropertyReportObject);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.RequestData> LoadCorvelMedicalBillingPrintLog()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadCorvelMedicalBillingPrintLog.RequestData>(proxy, proxy.LoadCorvelMedicalBillingPrintLog);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.RequestData> LoadDHITransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadDHITransmissions.RequestData>(proxy, proxy.LoadDHITransmissions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.RequestData> LoadEagleEyeTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadEagleEyeTransmissions.RequestData>(proxy, proxy.LoadEagleEyeTransmissions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.RequestData> LoadESign()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Load.RequestData>(proxy, proxy.LoadESign);
            return s;
        }
        ///<summary> Function LoadExistingBatchReceivedTransmissions: used with batch ChoicePoint data processing </summary>///<param name="request">The wrapper request containing date range.</param>///<returns> The wrapper response containing transmissions </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="LoadExistingBatchReceivedTransmissions" title="Code Example for calling LoadExistingBatchReceivedTransmissions function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="LoadExistingBatchReceivedTransmissions" title="Code Example for calling LoadExistingBatchReceivedTransmissions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.RequestData> LoadExistingBatchReceivedTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadExistingBatchReceivedTransmissions.RequestData>(proxy, proxy.LoadExistingBatchReceivedTransmissions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.RequestData> LoadInsightXMLs()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadInsightXMLs.RequestData>(proxy, proxy.LoadInsightXMLs);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.RequestData> LoadIntegrationToken()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.RequestData>(proxy, proxy.LoadIntegrationToken);
            return s;
        }
        ///<summary> Function loads transmission for policy </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns>ISOTransmissions</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadISOTransmissions" title="Code Example for calling LoadISOTransmissions function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadISOTransmissions" title="Code Example for calling LoadISOTransmissions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.RequestData> LoadISOTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadISOTransmissions.RequestData>(proxy, proxy.LoadISOTransmissions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.RequestData> LoadLexisNexisTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadLexisNexisTransmissions.RequestData>(proxy, proxy.LoadLexisNexisTransmissions);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.RequestData> LoadMVRDriverInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRDriverInformation.RequestData>(proxy, proxy.LoadMVRDriverInformation);
            return s;
        }
        ///<summary> Loads the MVR report data for a given <c>PolicyId</c>, <c>PolicyImageNum</c>, <c>UnitNum</c>(DriverNum), <c>ChoicePointTransmissionNum</c> and <c>ThirdPartyTypeId</c> (<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.MVR" />). </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>UnitNum</c>///<c>ChoicePointTransmissionNum</c>///<c>ThirdPartyTypeId</c>///<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.MVR" />///<param name="request">The wrapper containing the report identification information.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.MVR.MVRReportData" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.MVR.MVRReportData" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMVRReportObject" title="Code Example for calling LoadMVRReportObject function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMVRReportObject" title="Code Example for calling LoadMVRReportObject function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.RequestData> LoadMVRReportObject()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadMVRReportObject.RequestData>(proxy, proxy.LoadMVRReportObject);
            return s;
        }
        ///<summary> Loads the CLUE Property report data for a given <c>PolicyId</c>, <c>PolicyImageNum</c>, <c>UnitNum</c>(DriverNum), <c>ChoicePointTransmissionNum</c> and <c>ThirdPartyTypeId</c> (<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CreditLocation" /> or <see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CreditVehicle" />). </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>UnitNum</c>///<c>ChoicePointTransmissionNum</c>///<c>ThirdPartyTypeId</c>///<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CreditLocation" />///<see cref="F:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType.CreditVehicle" />///<param name="request">The wrapper containing the report identification information.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.NCF.RecordGroup" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportObjects.NCF.RecordGroup" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadNCFReportObject" title="Code Example for calling LoadNCFReportObject function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadNCFReportObject" title="Code Example for calling LoadNCFReportObject function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.RequestData> LoadNCFReportObject()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadNCFReportObject.RequestData>(proxy, proxy.LoadNCFReportObject);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.RequestData> LoadPPCBCEGInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadPPCBCEGInformation.RequestData>(proxy, proxy.LoadPPCBCEGInformation);
            return s;
        }
        ///<summary> Loads the raw report data for a given <c>PolicyId</c>, <c>PolicyImageNum</c>, <c>UnitNum</c>(DriverNum), <c>ChoicePointTransmissionNum</c> and <c>ThirdPartyTypeId</c> (<see cref="T:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType" />. </summary>///<c>PolicyId</c>///<c>PolicyImageNum</c>///<c>UnitNum</c>///<c>ChoicePointTransmissionNum</c>///<c>ThirdPartyTypeId</c>///<see cref="T:Diamond.Common.Enums.ThirdParty.ChoicePoint.ProductType" />///<param name="request">The wrapper containing the unique report identifier.</param>///<returns> The wrapper request containing unformatted report data as a <c>String</c>. </returns>///<c>String</c>///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="LoadRAWReportData" title="Code Example for calling LoadRAWReportData function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="LoadRAWReportData" title="Code Example for calling LoadRAWReportData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.RequestData> LoadRAWReportData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.RequestData>(proxy, proxy.LoadRAWReportData);
            return s;
        }
        ///<summary> Returns a listing of all ChoicePoint reports that have been ordered on all <c>In-Force</c>, <c>Pending</c> and <c>Future</c> policies belonging to the specified client. </summary>///<c>In-Force</c>///<c>Pending</c>///<c>Future</c>///<param name="request">The wrapper containing the client id.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportListingItem" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportListingItem" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="LoadReportListingForClientId" title="Code Example for calling LoadReportListingForClientId function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="LoadReportListingForClientId" title="Code Example for calling LoadReportListingForClientId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.RequestData> LoadReportListingForClientId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForClientId.RequestData>(proxy, proxy.LoadReportListingForClientId);
            return s;
        }
        ///<summary> Returns a listing of all ChoicePoint reports that have been ordered on all Vehicles, Drivers, Locations etc belonging to the specified policy. </summary>///<param name="request">The wrapper containing the policy id.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ReportListingItem" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ReportListingItem" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadReportListingForPolicyId" title="Code Example for calling LoadReportListingForPolicyId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadReportListingForPolicyId" title="Code Example for calling LoadReportListingForPolicyId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.RequestData> LoadReportListingForPolicyId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadReportListingForPolicyId.RequestData>(proxy, proxy.LoadReportListingForPolicyId);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.RequestData> LoadSAQImportedDriver()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQImportedDriver.RequestData>(proxy, proxy.LoadSAQImportedDriver);
            return s;
        }
        ///<summary> Function loads recent SAQ order for policy </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns>ThirdPartyData</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="LoadSAQOrder" title="Code Example for calling LoadSAQOrder function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="LoadSAQOrder" title="Code Example for calling LoadSAQOrder function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.RequestData> LoadSAQOrder()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadSAQOrder.RequestData>(proxy, proxy.LoadSAQOrder);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.RequestData> LoadTaxCodeKYByDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowes.LoadTaxCodeKYByDate.RequestData>(proxy, proxy.LoadTaxCodeKYByDate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.RequestData> LoadTransUnionTransmissions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadTransUnionTransmissions.RequestData>(proxy, proxy.LoadTransUnionTransmissions);
            return s;
        }
        ///<summary> Function loads data for datagridview on ViewReports screen </summary>///<param name="request">The wrapper request containing PolicyImage.</param>///<returns> The wrapper response containing collection of ReportItems </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\ViewReportsForm.vb" region="LoadViewReportsScreenData" title="Code Example for calling LoadViewReportsScreenData function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\ViewReportsForm.vb" region="LoadViewReportsScreenData" title="Code Example for calling LoadViewReportsScreenData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.RequestData> LoadViewReportsScreenData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Request, Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Response, Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.RequestData>(proxy, proxy.LoadViewReportsScreenData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.RequestData> LoginESign()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.Login.RequestData>(proxy, proxy.LoginESign);
            return s;
        }
        ///<summary> Provides failure information about a login failure. </summary>///<param name="request">The wrapper request containing the source data, originator and other applicable information.</param>///<returns>The wrapper response containing result of the <c>LoginFailure</c> request.</returns>///<c>LoginFailure</c>///<remarks>  <para> Used to indicate a login failure occured for a comparative rater call. </para></remarks>///<para> Used to indicate a login failure occured for a comparative rater call. </para>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.RequestData> LoginFailure()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.LoginFailure.RequestData>(proxy, proxy.LoginFailure);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.Request, Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.Response, Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.RequestData> MitchellMedicalAdd()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.Request, Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.Response, Diamond.Common.Services.Messages.ThirdPartyService.MitchellMedicalAdd.RequestData>(proxy, proxy.MitchellMedicalAdd);
            return s;
        }
        ///<summary> Adds pending ChoicePoint NCF batch request. </summary>///<param name="request">The wrapper request containing LobId.</param>///<returns>The wrapper request containing NumberOfRecordsProcessed.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchCreateTransRecords" title="Code Example for calling NCFBatchCreateTransRecords function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchCreateTransRecords" title="Code Example for calling NCFBatchCreateTransRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.RequestData> NCFBatchCreateTransRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchCreateTransRecords.RequestData>(proxy, proxy.NCFBatchCreateTransRecords);
            return s;
        }
        ///<summary> Populates ChoicePointNCFBatch table with applicants/drivers needing credit scores ordered </summary>///<param name="request"></param>///<returns>The wrapper request containing NumberOfRecordsProcessed.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchPreProcess" title="Code Example for calling NCFBatchPreProcess function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchPreProcess" title="Code Example for calling NCFBatchPreProcess function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.RequestData> NCFBatchPreProcess()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchPreProcess.RequestData>(proxy, proxy.NCFBatchPreProcess);
            return s;
        }
        ///<summary> Updates pending NCF Batch reuqests to a queued status. </summary>///<param name="request">The wrapper request containing Preview.</param>///<returns>The wrapper request containing NumberOfRecordsProcessed and NumberOfRecordsRemoved.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchSubmit" title="Code Example for calling NCFBatchSubmit function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchSubmit" title="Code Example for calling NCFBatchSubmit function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.RequestData> NCFBatchSubmit()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSubmit.RequestData>(proxy, proxy.NCFBatchSubmit);
            return s;
        }
        ///<summary> Retrives summary information about ncf batch requests </summary>///<param name="request"></param>///<returns>The wrapper request containing HomeUnprocessed, AutoUnprocessed, HomePendingBatch, AutoPendingBatch, HomePendingReturn, AutoPendingReturn, HomeErrors, and AutoErrors.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchSummary" title="Code Example for calling NCFBatchSummary function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="NCFBatchSummary" title="Code Example for calling NCFBatchSummary function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.RequestData> NCFBatchSummary()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.Request, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.Response, Diamond.Common.Services.Messages.ThirdPartyService.NCFBatchSummary.RequestData>(proxy, proxy.NCFBatchSummary);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.Request, Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.Response, Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.RequestData> NetsuiteAddJournalEntries()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.Request, Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.Response, Diamond.Common.Services.Messages.ThirdPartyService.NetsuiteAddJournalEntries.RequestData>(proxy, proxy.NetsuiteAddJournalEntries);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.RequestData> OrderAutoCheckVHR()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoCheckVHR.RequestData>(proxy, proxy.OrderAutoCheckVHR);
            return s;
        }
        ///<summary> Function OrderAutoDataPrefill: orders Auto Data Prefill </summary>///<param name="request">The wrapper request containing transmission id.</param>///<returns> The wrapper response containing OperationSuccessful </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderAutoDataPrefill" title="Code Example for calling OrderAutoDataPrefill function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderAutoDataPrefill" title="Code Example for calling OrderAutoDataPrefill function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.RequestData> OrderAutoDataPrefill()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.RequestData>(proxy, proxy.OrderAutoDataPrefill);
            return s;
        }
        ///<summary> Function OrderAutoDataPrefillCommercial: orders Auto Data Prefill Commercial </summary>///<param name="request">The wrapper request containing transmission id.</param>///<returns> The wrapper response containing OperationSuccessful </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderAutoDataPrefillCommercial" title="Code Example for calling OrderAutoDataPrefillCommercial function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderAutoDataPrefillCommercial" title="Code Example for calling OrderAutoDataPrefillCommercial function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.RequestData> OrderAutoDataPrefillCommercial()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefillCommercial.RequestData>(proxy, proxy.OrderAutoDataPrefillCommercial);
            return s;
        }
        ///<summary> Orders the CLUE auto. </summary>///<param name="request">The wrapper request containing BatchOrder, ManualClueSubmission, LastReportDate, AdditionalDriverDiscoverySearch, SaveRequest, PolicyImage.</param>///<returns> The wrapper response containing ThirdPartyData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderClueAuto" title="Code Example for calling OrderClueAuto function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderClueAuto" title="Code Example for calling OrderClueAuto function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.RequestData> OrderClueAuto()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.RequestData>(proxy, proxy.OrderClueAuto);
            return s;
        }
        ///<summary> Orders the CLUE property report. </summary>///<param name="request">The wrapper request containing CurrentAddressStateId, FormerAddressStateId, BatchOrder, ManualClueSubmission, LastReportDate, SaveRequest, PolicyImage, SelectRiskRow, MortgageGridInfo, UsersId.</param>///<returns> The wrapper response containing SentDate, ThirdPartyData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderCluePropertyReport" title="Code Example for calling OrderCluePropertyReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderCluePropertyReport" title="Code Example for calling OrderCluePropertyReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.RequestData> OrderCluePropertyReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCluePropertyReport.RequestData>(proxy, proxy.OrderCluePropertyReport);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.RequestData> OrderCoreLogic()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogic.RequestData>(proxy, proxy.OrderCoreLogic);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.RequestData> OrderCoreLogicResearchMode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCoreLogicResearchMode.RequestData>(proxy, proxy.OrderCoreLogicResearchMode);
            return s;
        }
        ///<summary> Orders the credit report. </summary>///<param name="request">The wrapper request containing Subject, SelectedRowNumber, CurrentAddressStateId, FormerAddressStateId, UserId, BatchOrder, SaveRequest, PolicyImage.</param>///<returns> The wrapper response containing ASDate, ThirdPartyData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderCreditReport" title="Code Example for calling OrderCreditReport function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderCreditReport" title="Code Example for calling OrderCreditReport function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.RequestData> OrderCreditReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderCreditReport.RequestData>(proxy, proxy.OrderCreditReport);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.RequestData> OrderDHIDriverSearch()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderDHIDriverSearch.RequestData>(proxy, proxy.OrderDHIDriverSearch);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.RequestData> OrderEagleEyeScore()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderEagleEyeScore.RequestData>(proxy, proxy.OrderEagleEyeScore);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.RequestData> OrderLexisNexisComprehensiveADL()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderLexisNexisComprehensiveADL.RequestData>(proxy, proxy.OrderLexisNexisComprehensiveADL);
            return s;
        }
        ///<summary> Orders the selected ChoicePoint reports specified by the ReportType and identifying information. </summary>///<param name="request">The wrapper containing the report type and identifying information.</param>///<returns> The wrapper request containing <see cref="T:Diamond.Common.Objects.ThirdParty.ThirdPartyData" />. </returns>///<see cref="T:Diamond.Common.Objects.ThirdParty.ThirdPartyData" />///<remarks></remarks>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="OrderMultipleReports" title="Code Example for calling OrderMultipleReports function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ClientChoicePointReports.vb" region="OrderMultipleReports" title="Code Example for calling OrderMultipleReports function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.RequestData> OrderMultipleReports()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderMultipleReports.RequestData>(proxy, proxy.OrderMultipleReports);
            return s;
        }
        ///<summary> Orders the MVR. </summary>///<param name="request">The wrapper request containing DriverNums, BatchOrder, ForcedMvr, SaveRequest, PolicyImage.</param>///<returns> The wrapper request containing ThirdPartyData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderMvr" title="Code Example for calling OrderMvr function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\ChoicePointControl1.vb" region="OrderMvr" title="Code Example for calling OrderMvr function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.RequestData> OrderMvr()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderMvr.RequestData>(proxy, proxy.OrderMvr);
            return s;
        }
        ///<summary> Function orders SAQ from ChoicePoint </summary>///<param name="request">The wrapper request containing order info.</param>///<returns>thirdpartydata</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderSAQ" title="Code Example for calling OrderSAQ function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="OrderSAQ" title="Code Example for calling OrderSAQ function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.RequestData> OrderSAQ()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderSAQ.RequestData>(proxy, proxy.OrderSAQ);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.RequestData> OrderTUNACreditReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNACreditReport.RequestData>(proxy, proxy.OrderTUNACreditReport);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.RequestData> OrderTUNAVehicleHistoryReport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.Request, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.Response, Diamond.Common.Services.Messages.ThirdPartyService.OrderTUNAVehicleHistoryReport.RequestData>(proxy, proxy.OrderTUNAVehicleHistoryReport);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.Request, Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.Response, Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.RequestData> PerformTUNAEchoTest()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.Request, Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.Response, Diamond.Common.Services.Messages.ThirdPartyService.PerformTUNAEchoTest.RequestData>(proxy, proxy.PerformTUNAEchoTest);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.RequestData> PitneyBowesVerifyAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.Request, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.Response, Diamond.Common.Services.Messages.ThirdPartyService.PitneyBowesVerifyAddress.RequestData>(proxy, proxy.PitneyBowesVerifyAddress);
            return s;
        }
        ///<summary> Lookup public protection class information. </summary>///<param name="request">A wrapper request object containing an image and an optional location index</param>///<returns>policy image</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Request, Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Response, Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.RequestData> PPCLookupByLocation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Request, Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Response, Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.RequestData>(proxy, proxy.PPCLookupByLocation);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.RequestData> ProcessACDAppraiserData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAppraiserData.RequestData>(proxy, proxy.ProcessACDAppraiserData);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.RequestData> ProcessACDAttachment()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDAttachment.RequestData>(proxy, proxy.ProcessACDAttachment);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.RequestData> ProcessACDEcho()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEcho.RequestData>(proxy, proxy.ProcessACDEcho);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.RequestData> ProcessACDEstimate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ACD.AutoLink.ProcessACDEstimate.RequestData>(proxy, proxy.ProcessACDEstimate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.RequestData> ProcessALI()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessALI.RequestData>(proxy, proxy.ProcessALI);
            return s;
        }
        ///<summary> Function ProcessAndImportBatchTransmission: used with batch ChoicePoint data processing </summary>///<param name="request">The wrapper request containing transmission.</param>///<returns> The wrapper response containing OperationSuccessful </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.RequestData> ProcessAndImportBatchTransmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportBatchTransmission.RequestData>(proxy, proxy.ProcessAndImportBatchTransmission);
            return s;
        }
        ///<summary> Function ProcessAndImportSpecificBatchTransmission: used with batch ChoicePoint data processing </summary>///<param name="request">The wrapper request containing transmission id.</param>///<returns> The wrapper response containing OperationSuccessful </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="ProcessAndImportSpecificBatchTransmission" title="Code Example for calling ProcessAndImportSpecificBatchTransmission function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="ProcessAndImportSpecificBatchTransmission" title="Code Example for calling ProcessAndImportSpecificBatchTransmission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.RequestData> ProcessAndImportSpecificBatchTransmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessAndImportSpecificBatchTransmission.RequestData>(proxy, proxy.ProcessAndImportSpecificBatchTransmission);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.RequestData> ProcessCCCBusinessEvent()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCBusinessEvent.RequestData>(proxy, proxy.ProcessCCCBusinessEvent);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.RequestData> ProcessCCCDocumentsImages()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCDocumentsImages.RequestData>(proxy, proxy.ProcessCCCDocumentsImages);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.RequestData> ProcessCCCEstimate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCCCEstimate.RequestData>(proxy, proxy.ProcessCCCEstimate);
            return s;
        }
        ///<summary> Processes the ChoicePoint CLUE Auto Data to objects that can be displayed on report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> The wrapper response containing ReportData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Clue.PersonalAuto\CluePersonalAutoReportUserControl.vb" region="ProcessCLUEAuto" title="Code Example for calling ProcessCLUEAuto function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Clue.PersonalAuto\CluePersonalAutoReportUserControl.vb" region="ProcessCLUEAuto" title="Code Example for calling ProcessCLUEAuto function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.RequestData> ProcessCLUEAuto()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEAuto.RequestData>(proxy, proxy.ProcessCLUEAuto);
            return s;
        }
        ///<summary> Processes the ChoicePoint CLUE Property Data to objects that can be displayed on report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> The wrapper response containing ReportData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Clue.PersonalProperty\CluePersonalPropertyUserControl.vb" region="ProcessCLUEProperty" title="Code Example for calling ProcessCLUEProperty function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Clue.PersonalProperty\CluePersonalPropertyUserControl.vb" region="ProcessCLUEProperty" title="Code Example for calling ProcessCLUEProperty function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.RequestData> ProcessCLUEProperty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessCLUEProperty.RequestData>(proxy, proxy.ProcessCLUEProperty);
            return s;
        }
        ///<summary> Processes the ChoicePoint NCF Data to objects that can be displayed on full NCF report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> Return parameter for ProcessFullNCF: object used to display Full Credit Report </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\FullNCF\FullNCFReport.vb" region="ProcessFullNCF" title="Code Example for calling ProcessFullNCF function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\FullNCF\FullNCFReport.vb" region="ProcessFullNCF" title="Code Example for calling ProcessFullNCF function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.RequestData> ProcessFullNCF()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessFullNCF.RequestData>(proxy, proxy.ProcessFullNCF);
            return s;
        }
        ///<summary> Processes the ISOPPC Data to objects that can be displayed on  ISOPPC report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> Return parameter for ProcessISOPPC: object used to display ISOPPC </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\ISOPPC\ISOPPCReport.vb" region="ProcessFullNCF" title="Code Example for calling ProcessISOPPC function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\ISOPPC\ISOPPCReport.vb" region="ProcessFullNCF" title="Code Example for calling ProcessISOPPC function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.RequestData> ProcessISOPPC()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.RequestData>(proxy, proxy.ProcessISOPPC);
            return s;
        }
        ///<summary> Function inquire about reports from Metro </summary>///<param name="request">The wrapper request containing order info.</param>///<returns>OrderAcknowledgement</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.RequestData> ProcessMetroRealTimeInquiry()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroRealTimeInquiry.RequestData>(proxy, proxy.ProcessMetroRealTimeInquiry);
            return s;
        }
        ///<summary> Function orders reports from Metro </summary>///<param name="request">The wrapper request containing order info.</param>///<returns>OrderAcknowledgement</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.RequestData> ProcessMetroReports()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMetroReports.RequestData>(proxy, proxy.ProcessMetroReports);
            return s;
        }
        ///<summary> Processes the ChoicePoint MVR Data to objects that can be displayed on report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> The wrapper response containing ReportData </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Mvr\MVRReportUserControl.vb" region="ProcessMVR" title="Code Example for calling ProcessMVR function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Mvr\MVRReportUserControl.vb" region="ProcessMVR" title="Code Example for calling ProcessMVR function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.RequestData> ProcessMVR()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessMVR.RequestData>(proxy, proxy.ProcessMVR);
            return s;
        }
        ///<summary> Processes the ChoicePoint NCF Data to objects that can be displayed on abbreviated NCF report </summary>///<param name="request">The wrapper request containing IncomingDataRaw, PolicyId.</param>///<returns> Return parameter for ProcessNCF: object used to display report </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Ncf\NCFReport.vb" region="ProcessNCF" title="Code Example for calling ProcessNCF function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\Reports\Ncf\NCFReport.vb" region="ProcessNCF" title="Code Example for calling ProcessNCF function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.RequestData> ProcessNCF()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessNCF.RequestData>(proxy, proxy.ProcessNCF);
            return s;
        }
        ///<summary> Function processes imported data based on ChoicePoint raw data </summary>///<param name="request">The wrapper request containing Image, PolicyId,  value.</param>///<returns> The wrapper response containing collection of LossHistory, collection of AccidentViolation, collection of CreditScoreReason, CreditScore </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\ViewReportsForm.vb" region="ProcessViewImported" title="Code Example for calling ProcessViewImported function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\ViewReportsForm.vb" region="ProcessViewImported" title="Code Example for calling ProcessViewImported function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.RequestData> ProcessViewImported()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProcessViewImported.RequestData>(proxy, proxy.ProcessViewImported);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.RequestData> ProtectionClassImport()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Request, Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Response, Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.RequestData>(proxy, proxy.ProtectionClassImport);
            return s;
        }
        ///<summary> Saves the specified Choicepoint Account. </summary>///<param name="request">The wrapper request object containing the Choicepoint Account to be saved.</param>///<returns>The wrapper response containing a flag indicating if the Choicepoint Account was successfully saved.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\AccountDetailsForm.vb" region="SaveAccount" title="Code Example for calling SaveAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\ModalDialogs\AccountDetailsForm.vb" region="SaveAccount" title="Code Example for calling SaveAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.Request, Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.Response, Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.RequestData> SaveAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.Request, Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.Response, Diamond.Common.Services.Messages.ThirdPartyService.SaveAccount.RequestData>(proxy, proxy.SaveAccount);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.RequestData> SaveCCCTransmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.Request, Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.Response, Diamond.Common.Services.Messages.ThirdPartyService.SaveCCCTransmission.RequestData>(proxy, proxy.SaveCCCTransmission);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.RequestData> SaveESign()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.Save.RequestData>(proxy, proxy.SaveESign);
            return s;
        }
        ///<summary> Provides rate information by submitting policy type data to <c>Diamond</c>. </summary>///<c>Diamond</c>///<param name="request">The wrapper request containing the source data, originator and other applicable information.</param>///<returns>The wrapper response containing result of the <c>SubmitRate</c> request.</returns>///<c>SubmitRate</c>///<remarks>  <para> Used by comparative rater services to get premium information back from Diamond. Provides quote information based on the source data provided. </para></remarks>///<para> Used by comparative rater services to get premium information back from Diamond. Provides quote information based on the source data provided. </para>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.RequestData> SubmitAndRate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitAndRate.RequestData>(proxy, proxy.SubmitAndRate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.RequestData> SubmitRateAndIssue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.SubmitRateAndIssue.RequestData>(proxy, proxy.SubmitRateAndIssue);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.RequestData> TranslateToImage()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToImage.RequestData>(proxy, proxy.TranslateToImage);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.RequestData> TranslateToString()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.TranslateToString.RequestData>(proxy, proxy.TranslateToString);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.Request, Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.Response, Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.RequestData> TriggerOrders()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.Request, Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.Response, Diamond.Common.Services.Messages.ThirdPartyService.TriggerOrders.RequestData>(proxy, proxy.TriggerOrders);
            return s;
        }
        ///<summary> Function UndoProcessingOfBatchFile: used with batch ChoicePoint data processing </summary>///<param name="request">The wrapper request containing transmission id.</param>///<returns> The wrapper response containing OperationSuccessful </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="UndoProcessingOfBatchFile" title="Code Example for calling UndoProcessingOfBatchFile function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\BatchChoicePointDataProcessing.vb" region="UndoProcessingOfBatchFile" title="Code Example for calling UndoProcessingOfBatchFile function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.Request, Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.Response, Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.RequestData> UndoProcessingOfBatchFile()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.Request, Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.Response, Diamond.Common.Services.Messages.ThirdPartyService.UndoProcessingOfBatchFile.RequestData>(proxy, proxy.UndoProcessingOfBatchFile);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.RequestData> UpdateALIMatchCodes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateALIMatchCodes.RequestData>(proxy, proxy.UpdateALIMatchCodes);
            return s;
        }
        ///<summary> Function OrderAutoDataPrefill: used with importing data from Auto Data Prefill </summary>///<param name="request">The wrapper request containing transmission id.</param>///<returns> The wrapper response containing Drivers and Vehicles </returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateAndProduceSAQImports" title="Code Example for calling UpdateAndProduceSAQImports function"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateAndProduceSAQImports" title="Code Example for calling UpdateAndProduceSAQImports function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.RequestData> UpdateAndProduceSAQImports()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateAndProduceSAQImports.RequestData>(proxy, proxy.UpdateAndProduceSAQImports);
            return s;
        }
        ///<summary> Function updates data imported from SAQ </summary>///<param name="request">The wrapper request containing ImportedDrivers, ImportedVehicles.</param>///<returns>boolean indicating success/failure of the import operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateSAQImports1" title="Code Example for calling UpdateSAQImports function - Part 1"></code>  <code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateSAQImports2" title="Code Example for calling UpdateSAQImports function - Part 2"></code></example>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateSAQImports1" title="Code Example for calling UpdateSAQImports function - Part 1"></code>///<code lang="vbnet" source="Diamond\UI\ThirdParty\UserControls\SAQControl.vb" region="UpdateSAQImports2" title="Code Example for calling UpdateSAQImports function - Part 2"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.RequestData> UpdateSAQImports()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.Request, Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.Response, Diamond.Common.Services.Messages.ThirdPartyService.UpdateSAQImports.RequestData>(proxy, proxy.UpdateSAQImports);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.Request, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.Response, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.RequestData> ValuationReturn()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.Request, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.Response, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationReturn.RequestData>(proxy, proxy.ValuationReturn);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.Request, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.Response, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.RequestData> ValuationStart()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.Request, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.Response, Diamond.Common.Services.Messages.ThirdPartyService.Valuation.ValuationStart.RequestData>(proxy, proxy.ValuationStart);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.RequestData> VehicleInformationLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.Request, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.Response, Diamond.Common.Services.Messages.ThirdPartyService.ComparativeRater.VehicleInformationLookup.RequestData>(proxy, proxy.VehicleInformationLookup);
            return s;
        }
        ///<summary> Insurance Verification </summary>///<param name="request">The wrapper request containing order info.</param>///<returns>OrderAcknowledgement</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.Request, Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.Response, Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.RequestData> VerifyInsurance()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.Request, Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.Response, Diamond.Common.Services.Messages.ThirdPartyService.InsuranceVerification.RequestData>(proxy, proxy.VerifyInsurance);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.RequestData> VoidEnvelope()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.ThirdPartyServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.Request, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.Response, Diamond.Common.Services.Messages.ThirdPartyService.ESign.API.VoidEnvelope.RequestData>(proxy, proxy.VoidEnvelope);
            return s;
        }
    }
    ///<summary> Class containing Services for supporting Transaction Operations - GetSubmitAppInfo, GetSubmitTransInfo etc </summary>
    public static class TransactionService
    {
        ///<summary> Adjusts the policy expiration date to match the original inception date. </summary>///<param name="request">The request contains Effective Date and first effective date</param>///<returns> Wrapper returns expiration date and success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="AdjustExpDateToMatchOriginalInceptionDate" title="Code Example for calling AdjustExpDateToMatchOriginalInceptionDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="AdjustExpDateToMatchOriginalInceptionDate" title="Code Example for calling AdjustExpDateToMatchOriginalInceptionDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.Request, Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.Response, Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.RequestData> AdjustExpDateToMatchOriginalInceptionDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.Request, Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.Response, Diamond.Common.Services.Messages.TransactionService.AdjustExpDateToMatchOriginalInceptionDate.RequestData>(proxy, proxy.AdjustExpDateToMatchOriginalInceptionDate);
            return s;
        }
        ///<summary> Returns various pieces of a policy based on numerous search fields </summary>///<param name="Request">Contains CompanyId, StateId, LobId, AgencyId, AgencyCode, StartDate, EndDate, IsCancelled</param>///<returns>A collection of CancelStatus objects</returns>///<example>  <code lang="vbnet" source="Diamond\ASPNET\PortalControls\PoliciesInNotice\PoliciesInNoticeList.ascx.vb" region="CancelStatusSearchResults" title="Code Example for calling CancelStatusSearchResults function"></code></example>///<code lang="vbnet" source="Diamond\ASPNET\PortalControls\PoliciesInNotice\PoliciesInNoticeList.ascx.vb" region="CancelStatusSearchResults" title="Code Example for calling CancelStatusSearchResults function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.Request, Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.Response, Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.RequestData> CancelStatusSearchResults()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.Request, Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.Response, Diamond.Common.Services.Messages.TransactionService.CancelStatusSearchResults.RequestData>(proxy, proxy.CancelStatusSearchResults);
            return s;
        }
        ///<summary> Determines if the policyimage still exists. </summary>///<param name="request">The request containing the policy id and policyimage num , policyimage_id.</param>///<returns>Wrapper returns a success indicator, PolicyStatusCodeId</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DoesPolicyImageStillExist" title="Code Example for calling DoesPolicyImageStillExist function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DoesPolicyImageStillExist" title="Code Example for calling DoesPolicyImageStillExist function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.Request, Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.Response, Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.RequestData> DoesPolicyImageStillExist()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.Request, Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.Response, Diamond.Common.Services.Messages.TransactionService.DoesPolicyImageStillExist.RequestData>(proxy, proxy.DoesPolicyImageStillExist);
            return s;
        }
        ///<summary> Loads all the policy ids int he system </summary>///<param name="request"></param>///<returns>List of Policy ids if successful, nothing if not. </returns>///<remarks></remarks>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.Request, Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.Response, Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.RequestData> GetAllPolicyIds()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.Request, Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.Response, Diamond.Common.Services.Messages.TransactionService.GetAllPolicyIds.RequestData>(proxy, proxy.GetAllPolicyIds);
            return s;
        }
        ///<summary> Gets the first non pro rata eff date. </summary>///<param name="request">The request contains PolicyId</param>///<returns> Wrapper returns first effective date and a success indicator </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetFirstNonProRataEffDate" title="Code Example for calling GetFirstNonProRataEffDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="GetFirstNonProRataEffDate" title="Code Example for calling GetFirstNonProRataEffDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.Request, Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.Response, Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.RequestData> GetFirstNonProRataEffDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.Request, Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.Response, Diamond.Common.Services.Messages.TransactionService.GetFirstNonProRataEffDate.RequestData>(proxy, proxy.GetFirstNonProRataEffDate);
            return s;
        }
        ///<summary> Gets the outof seq info. </summary>///<param name="request">The request.</param>///<returns>Wrapper returns a success indicator, IsOutOfSeq indicator and Transactions.SubmitTransInfo object</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="GetOutofSeqInfo" title="Code Example for calling GetOutofSeqInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="GetOutofSeqInfo" title="Code Example for calling GetOutofSeqInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.RequestData> GetOutofSeqInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetOutOfSeqInfo.RequestData>(proxy, proxy.GetOutofSeqInfo);
            return s;
        }
        ///<summary> Function to retrieve Application Data for Data Fill </summary>///<param name="request">A request message encapsulating Company Id, State Id, Lob Id, Agency Id, Agency Producer Id, First and Last Name and Policy term Id</param>///<returns> A response message encapsulating Policy information including sucess/failure of rate operation </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="GetSubmitAppInfo" title="Code Example for calling GetSubmitAppInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="GetSubmitAppInfo" title="Code Example for calling GetSubmitAppInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.RequestData> GetSubmitAppInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetSubmitAppInfo.RequestData>(proxy, proxy.GetSubmitAppInfo);
            return s;
        }
        ///<summary> Loads information to the transaction submit screen. </summary>///<param name="request">The request contains policyId, policyimageNum and isQuote indicator</param>///<returns> Wrapper returns Transaction.SubmitTransInfo object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="GetSubmitTransInfo" title="Code Example for calling GetSubmitTransInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="GetSubmitTransInfo" title="Code Example for calling GetSubmitTransInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.RequestData> GetSubmitTransInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.Request, Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.Response, Diamond.Common.Services.Messages.TransactionService.GetSubmitTransInfo.RequestData>(proxy, proxy.GetSubmitTransInfo);
            return s;
        }
        ///<summary> See if the new Expiration Date is valid. </summary>///<param name="request">The request contains the date that they want to change it too.</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="IsNewExpDateValid" title="Code Example for calling IsNewExpDateValid function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="IsNewExpDateValid" title="Code Example for calling IsNewExpDateValid function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.Request, Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.Response, Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.RequestData> IsNewExpDateValid()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.Request, Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.Response, Diamond.Common.Services.Messages.TransactionService.IsNewExpDateValid.RequestData>(proxy, proxy.IsNewExpDateValid);
            return s;
        }
        ///<summary> Determines if the specified policy image is out of sequence. </summary>///<param name="Request">The request containing the policy id and policy image number.</param>///<returns>&gt;The wrapper response object containing the result indicating if the policy image is out of sequence.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="IsTransactionOutOfSequence" title="Code Example for calling IsTransactionOutOfSequence function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMdiForm.vb" region="IsTransactionOutOfSequence" title="Code Example for calling IsTransactionOutOfSequence function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.Request, Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.Response, Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.RequestData> IsTransactionOutOfSequence()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.Request, Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.Response, Diamond.Common.Services.Messages.TransactionService.IsTransactionOutOfSequence.RequestData>(proxy, proxy.IsTransactionOutOfSequence);
            return s;
        }
        ///<summary> See if the new Effective Date will cause a version change. </summary>///<param name="request">The request contains the date that they want to change it too.</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="NewTEffDateWillResultInVersionChange" title="Code Example for calling NewTEffDateWillResultInVersionChange function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\ChangeEffectiveExpirationDateForm.vb" region="NewTEffDateWillResultInVersionChange" title="Code Example for calling NewTEffDateWillResultInVersionChange function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.Request, Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.Response, Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.RequestData> NewTEffDateWillResultInVersionChange()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.Request, Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.Response, Diamond.Common.Services.Messages.TransactionService.NewTEffDateWillResultInVersionChange.RequestData>(proxy, proxy.NewTEffDateWillResultInVersionChange);
            return s;
        }
        ///<summary> Starts the process to run automatic non-renewals. </summary>///<param name="request">The wrapper request object.</param>///<returns>The wrapper response object contains the result indicating if the process succeeded.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\NonRenewalProcessing.vb" region="ProcessAutomaticNonRenewals" title="Code Example for calling ProcessAutomaticNonRenewals function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\NonRenewalProcessing.vb" region="ProcessAutomaticNonRenewals" title="Code Example for calling ProcessAutomaticNonRenewals function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.Request, Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.Response, Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.RequestData> ProcessAutomaticNonRenewals()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.Request, Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.Response, Diamond.Common.Services.Messages.TransactionService.ProcessAutomaticNonRenewals.RequestData>(proxy, proxy.ProcessAutomaticNonRenewals);
            return s;
        }
        ///<summary> Processes the company specific warnings at submission. </summary>///<param name="request">The request contains versionId and Transaction.SubmitTransInfo object</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="ProcessCompanySpecificWarningsAtSubmission" title="Code Example for calling ProcessCompanySpecificWarningsAtSubmission function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\TransactionMdiForm.vb" region="ProcessCompanySpecificWarningsAtSubmission" title="Code Example for calling ProcessCompanySpecificWarningsAtSubmission function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.Request, Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.Response, Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.RequestData> ProcessCompanySpecificWarningsAtSubmission()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.Request, Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.Response, Diamond.Common.Services.Messages.TransactionService.ProcessCompanySpecificWarningsAtSubmission.RequestData>(proxy, proxy.ProcessCompanySpecificWarningsAtSubmission);
            return s;
        }
        ///<summary> Purges the policy from the system </summary>///<param name="request">The request contains policy Id</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\PurgeProcess.vb" region="ProcessPolicyPurge" title="Code Example for calling ProcessPolicyPurge function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\PurgeProcess.vb" region="ProcessPolicyPurge" title="Code Example for calling ProcessPolicyPurge function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.Request, Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.Response, Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.RequestData> ProcessPolicyPurge()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.Request, Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.Response, Diamond.Common.Services.Messages.TransactionService.ProcessPolicyPurge.RequestData>(proxy, proxy.ProcessPolicyPurge);
            return s;
        }
        ///<summary> Purges the quote from system </summary>///<param name="request">The request contains Quote ID</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\PurgeProcess.vb" region="ProcessQuotePurge" title="Code Example for calling ProcessQuotePurge function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\PurgeProcess.vb" region="ProcessQuotePurge" title="Code Example for calling ProcessQuotePurge function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.Request, Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.Response, Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.RequestData> ProcessQuotePurge()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.Request, Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.Response, Diamond.Common.Services.Messages.TransactionService.ProcessQuotePurge.RequestData>(proxy, proxy.ProcessQuotePurge);
            return s;
        }
        ///<summary> Processes the specific date agency book transfer plans </summary>///<param name="request">The request contains the date of the transfer</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ProcessSpecificDateABT.vb" region="ProcessSpecificDateABT" title="Code Example for calling ProcessSpecificDateABT function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ProcessSpecificDateABT.vb" region="ProcessSpecificDateABT" title="Code Example for calling ProcessSpecificDateABT function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Request, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Response, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.RequestData> ProcessSpecificDateABT()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Request, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Response, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.RequestData>(proxy, proxy.ProcessSpecificDateABT);
            return s;
        }
        ///<summary> Processes the specific date agency book transfer plans </summary>///<param name="request">The request contains the date of the transfer</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ProcessSpecificDateABT.vb" region="ProcessSpecificDateABT" title="Code Example for calling ProcessSpecificDateABT function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ProcessSpecificDateABT.vb" region="ProcessSpecificDateABT" title="Code Example for calling ProcessSpecificDateABT function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Request, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Response, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.RequestData> ProcessSpecificDateABTPlans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Request, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.Response, Diamond.Common.Services.Messages.TransactionService.ProcessSpecificDateABT.RequestData>(proxy, proxy.ProcessSpecificDateABTPlans);
            return s;
        }
        ///<summary> Recalculates the written premium on the specified policy </summary>///<param name="request">The request.</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecalculateWrittenPremiumForAllPolicies" title="Code Example for calling RecalculateWrittenPremiumForAllPolicies function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecalculateWrittenPremiumForAllPolicies" title="Code Example for calling RecalculateWrittenPremiumForAllPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.Request, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.Response, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.RequestData> RecalculateWrittenPremium()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.Request, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.Response, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremium.RequestData>(proxy, proxy.RecalculateWrittenPremium);
            return s;
        }
        ///<summary> Recalculates the written premium on the specified policy </summary>///<param name="request">The request.</param>///<returns>returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecalculateWrittenPremiumForAllPolicies" title="Code Example for calling RecalculateWrittenPremiumForAllPolicies function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RecalculateWrittenPremiumForAllPolicies" title="Code Example for calling RecalculateWrittenPremiumForAllPolicies function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.Request, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.Response, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.RequestData> RecalculateWrittenPremiumForAllPolicies()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.Request, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.Response, Diamond.Common.Services.Messages.TransactionService.RecalculateWrittenPremiumForAllPolicies.RequestData>(proxy, proxy.RecalculateWrittenPremiumForAllPolicies);
            return s;
        }
        ///<summary> This will save out Referred By changes. </summary>///<param name="request">The request contains the PolicyImage which holds ReferredBy that they want to change it too.</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ReferredByChangeSave" title="Code Example for calling ReferredByChangeSave function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ReferredByChangeSave" title="Code Example for calling ReferredByChangeSave function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.Request, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.Response, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.RequestData> ReferredByChangeSave()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.Request, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.Response, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeSave.RequestData>(proxy, proxy.ReferredByChangeSave);
            return s;
        }
        ///<summary> See if the new Referred By will cause a version change. </summary>///<param name="request">The request contains the PolicyImage which holds ReferredBy that they want to change it too.</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ReferredByChangeWillResultInVersionChange" title="Code Example for calling ReferredByChangeWillResultInVersionChange function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ReferredByChangeWillResultInVersionChange" title="Code Example for calling ReferredByChangeWillResultInVersionChange function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.Request, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.Response, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.RequestData> ReferredByChangeWillResultInVersionChange()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.Request, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.Response, Diamond.Common.Services.Messages.TransactionService.ReferredByChangeWillResultInVersionChange.RequestData>(proxy, proxy.ReferredByChangeWillResultInVersionChange);
            return s;
        }
        ///<summary> Determines if the policy has an issued renewal offer image that exists. </summary>///<param name="request">The request containing the policy id.</param>///<returns>Wrapper returns a success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RenewalOfferIssuedExists" title="Code Example for calling RenewalOfferIssuedExists function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RenewalOfferIssuedExists" title="Code Example for calling RenewalOfferIssuedExists function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.Request, Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.Response, Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.RequestData> RenewalOfferIssuedExists()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.Request, Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.Response, Diamond.Common.Services.Messages.TransactionService.RenewalOfferIssuedExists.RequestData>(proxy, proxy.RenewalOfferIssuedExists);
            return s;
        }
        ///<summary> Determines if the policy only has a renewal offer image that exists. </summary>///<param name="request">The request containing the policy id.</param>///<returns>Wrapper returns a success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RenewalOfferOnlyExists" title="Code Example for calling RenewalOfferOnlyExists function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="RenewalOfferOnlyExists" title="Code Example for calling RenewalOfferOnlyExists function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.Request, Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.Response, Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.RequestData> RenewalOfferOnlyExists()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.Request, Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.Response, Diamond.Common.Services.Messages.TransactionService.RenewalOfferOnlyExists.RequestData>(proxy, proxy.RenewalOfferOnlyExists);
            return s;
        }
        ///<summary> See if tthe system should ask if before deleteing an image. </summary>///<param name="request">The request contains the PolicyId, PolicyImageNum, Transtype and a DiamondValidation .</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyMDIForm.vb" region="ShouldAskToAllowImageToBeDeleted" title="Code Example for calling ShouldAskToAllowImageToBeDeleted function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyMDIForm.vb" region="ShouldAskToAllowImageToBeDeleted" title="Code Example for calling ShouldAskToAllowImageToBeDeleted function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.Request, Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.Response, Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.RequestData> ShouldAskToAllowImageToBeDeleted()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.Request, Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.Response, Diamond.Common.Services.Messages.TransactionService.ShouldAskToAllowImageToBeDeleted.RequestData>(proxy, proxy.ShouldAskToAllowImageToBeDeleted);
            return s;
        }
        ///<summary> See if the Referred By control should be enabled. </summary>///<param name="request">The request contains the PolicyImage.</param>///<returns>Wrapper returns no parameters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ShouldReferredByBeEnabled" title="Code Example for calling ShouldReferredByBeEnabled function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\PolicyControl.vb" region="ShouldReferredByBeEnabled" title="Code Example for calling ShouldReferredByBeEnabled function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.Request, Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.Response, Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.RequestData> ShouldReferredByBeEnabled()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.Request, Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.Response, Diamond.Common.Services.Messages.TransactionService.ShouldReferredByBeEnabled.RequestData>(proxy, proxy.ShouldReferredByBeEnabled);
            return s;
        }
        ///<summary> Submits the policy transaction (e.g. Endorsement, Cancellation, etc). </summary>///<param name="Request">Wrapper containing transaction information.</param>///<returns>Wrapper returns success indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SubmitTransaction" title="Code Example for calling SubmitTransaction function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SubmitTransaction" title="Code Example for calling SubmitTransaction function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.Request, Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.Response, Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.RequestData> SubmitTransaction()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.Request, Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.Response, Diamond.Common.Services.Messages.TransactionService.SubmitTransaction.RequestData>(proxy, proxy.SubmitTransaction);
            return s;
        }
        ///<summary> Returns a synchronized PolicyImage for Package Policies.  </summary>///<param name="request">The request containing the current image and updated package part.  Optionally, PDetailSyncversionId may also be included.  If not included, PDetailSyncVersionId will be looked up via stored procedure for the policy effective date.</param>///<returns>A synchronized policyimage</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SynchronizePackagePolicy" title="Code Example for calling SynchronizePackagePolicy function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SynchronizePackagePolicy" title="Code Example for calling SynchronizePackagePolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.Request, Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.Response, Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.RequestData> SynchronizePackagePolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Transaction.TransactionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.Request, Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.Response, Diamond.Common.Services.Messages.TransactionService.SynchronizePackagePolicy.RequestData>(proxy, proxy.SynchronizePackagePolicy);
            return s;
        }
    }
    ///<summary> Proxy class for Utility Service </summary>
    public static class UtilityService
    {
        ///<summary> Attempts to populate the TaxCode field for a given location.  If there is insufficient confidence to set the <see cref="P:Diamond.Common.Objects.Policy.Location.TaxCode">TaxCode</see>, the list of possible <see cref="T:Diamond.Common.Objects.TaxCode">TaxCodes</see> is returned. </summary>///<see cref="P:Diamond.Common.Objects.Policy.Location.TaxCode">TaxCode</see>///<see cref="T:Diamond.Common.Objects.TaxCode">TaxCodes</see>///<param name="request">The request containing the location.</param>///<returns> The location object with the populated tax code and/or a listing of potential tax codes. </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.Request, Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.Response, Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.RequestData> AddTaxCodeToLocation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.Request, Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.Response, Diamond.Common.Services.Messages.UtilityService.AddTaxCodeToLocation.RequestData>(proxy, proxy.AddTaxCodeToLocation);
            return s;
        }
        ///<summary> Looks up the AgencyTaxCodeSCLookup info. </summary>///<param name="request"> The <see cref="T:Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Request" /> containing the <see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" />. </param>///<see cref="T:Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Request" />///<see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" />///<returns>Address</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\TaxCodeLookupForm.vb" region="AgencyTaxCodeSCLookup" title="Code Example for calling AgencyTaxCodeSCLookup function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\TaxCodeLookupForm.vb" region="AgencyTaxCodeSCLookup" title="Code Example for calling AgencyTaxCodeSCLookup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Request, Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Response, Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.RequestData> AgencyTaxCodeSCLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Request, Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.Response, Diamond.Common.Services.Messages.UtilityService.AgencyTaxCodeSCLookup.RequestData>(proxy, proxy.AgencyTaxCodeSCLookup);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GenerateTestError.Request, Diamond.Common.Services.Messages.UtilityService.GenerateTestError.Response, Diamond.Common.Services.Messages.UtilityService.GenerateTestError.RequestData> GenerateTestError()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GenerateTestError.Request, Diamond.Common.Services.Messages.UtilityService.GenerateTestError.Response, Diamond.Common.Services.Messages.UtilityService.GenerateTestError.RequestData>(proxy, proxy.GenerateTestError);
            return s;
        }
        ///<summary> Retrieves an instance of the <see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" /> class that corresponds to the specified unique identifier. </summary>///<see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" />///<param name="request">A wrapper request object containing the unique identifier for the <see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" /> entry.</param>///<see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" />///<returns>A wrapper response object containing the <see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" /> log entry for the specified unique identifier.</returns>///<see cref="T:Diamond.Common.Objects.Processes.GenericProcessLog" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\Download.vb" region="GetGenericProcessStatus" title="Code Example for calling GetGenericProcessStatus function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\Download.vb" region="GetGenericProcessStatus" title="Code Example for calling GetGenericProcessStatus function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.Request, Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.Response, Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.RequestData> GetGenericProcessStatus()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.Request, Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.Response, Diamond.Common.Services.Messages.UtilityService.GetGenericProcessStatus.RequestData>(proxy, proxy.GetGenericProcessStatus);
            return s;
        }
        ///<summary> Gets the proximity types. </summary>///<param name="request">A wrapper request object</param>///<returns>Collection of Proximity Types</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetProximityTypes" title="Code Example for calling GetProximityTypes function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetProximityTypes" title="Code Example for calling GetProximityTypes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.Request, Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.Response, Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.RequestData> GetProximityTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.Request, Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.Response, Diamond.Common.Services.Messages.UtilityService.GetProximityTypes.RequestData>(proxy, proxy.GetProximityTypes);
            return s;
        }
        ///<summary> Gets the name of the server. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing ServerName </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetServerName" title="Code Example for calling GetServerName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetServerName" title="Code Example for calling GetServerName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetServerName.Request, Diamond.Common.Services.Messages.UtilityService.GetServerName.Response, Diamond.Common.Services.Messages.UtilityService.GetServerName.RequestData> GetServerName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetServerName.Request, Diamond.Common.Services.Messages.UtilityService.GetServerName.Response, Diamond.Common.Services.Messages.UtilityService.GetServerName.RequestData>(proxy, proxy.GetServerName);
            return s;
        }
        ///<summary> Gets the system date. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing SystemDate </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDateManager.vb" region="GetSystemDate" title="Code Example for calling GetSystemDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDateManager.vb" region="GetSystemDate" title="Code Example for calling GetSystemDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetSystemDate.Request, Diamond.Common.Services.Messages.UtilityService.GetSystemDate.Response, Diamond.Common.Services.Messages.UtilityService.GetSystemDate.RequestData> GetSystemDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetSystemDate.Request, Diamond.Common.Services.Messages.UtilityService.GetSystemDate.Response, Diamond.Common.Services.Messages.UtilityService.GetSystemDate.RequestData>(proxy, proxy.GetSystemDate);
            return s;
        }
        ///<summary> Gets the system time. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing SystemTime </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSystemTime" title="Code Example for calling GetSystemTime function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetSystemTime" title="Code Example for calling GetSystemTime function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetSystemTime.Request, Diamond.Common.Services.Messages.UtilityService.GetSystemTime.Response, Diamond.Common.Services.Messages.UtilityService.GetSystemTime.RequestData> GetSystemTime()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetSystemTime.Request, Diamond.Common.Services.Messages.UtilityService.GetSystemTime.Response, Diamond.Common.Services.Messages.UtilityService.GetSystemTime.RequestData>(proxy, proxy.GetSystemTime);
            return s;
        }
        ///<summary> Gets the user override enables. </summary>///<param name="request">A wrapper request object containing stateId</param>///<returns>Collection of UserOverrideEnables</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetUserOverrideEnables" title="Code Example for calling GetUserOverrideEnables function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetUserOverrideEnables" title="Code Example for calling GetUserOverrideEnables function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.Request, Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.Response, Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.RequestData> GetUserOverrideEnables()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.Request, Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.Response, Diamond.Common.Services.Messages.UtilityService.GetUserOverrideEnables.RequestData>(proxy, proxy.GetUserOverrideEnables);
            return s;
        }
        ///<summary> Gets the wind pools. </summary>///<param name="request">A wrapper request object</param>///<returns>Collection of Windpools</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetWindPools" title="Code Example for calling GetWindPools function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\GeographicInformationForm.vb" region="GetWindPools" title="Code Example for calling GetWindPools function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetWindPools.Request, Diamond.Common.Services.Messages.UtilityService.GetWindPools.Response, Diamond.Common.Services.Messages.UtilityService.GetWindPools.RequestData> GetWindPools()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.GetWindPools.Request, Diamond.Common.Services.Messages.UtilityService.GetWindPools.Response, Diamond.Common.Services.Messages.UtilityService.GetWindPools.RequestData>(proxy, proxy.GetWindPools);
            return s;
        }
        ///<summary> Sends an email message to a specified phone number </summary>///<param name="request">Request object containing the email message information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.Request, Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.Response, Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.RequestData> LoadEndpoints()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.Request, Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.Response, Diamond.Common.Services.Messages.UtilityService.LoadEndpoints.RequestData>(proxy, proxy.LoadEndpoints);
            return s;
        }
        ///<summary> Load existing error log records that match the specified criteria. </summary>///<param name="request">A wrapper request object containing the filter type, from date, start date, and policy id.</param>///<returns>A wrapper response object containing collection of <see cref="T:Diamond.Common.Objects.ErrorLog" /> records that match the specified criteria.</returns>///<see cref="T:Diamond.Common.Objects.ErrorLog" />///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ErrorLog\ErrorLogList.vb" region="LoadErrorLogRecords" title="Code Example for calling LoadErrorLog function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ErrorLog\ErrorLogList.vb" region="LoadErrorLogRecords" title="Code Example for calling LoadErrorLog function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.Request, Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.Response, Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.RequestData> LoadErrorLogRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.Request, Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.Response, Diamond.Common.Services.Messages.UtilityService.LoadErrorLogRecords.RequestData>(proxy, proxy.LoadErrorLogRecords);
            return s;
        }
        ///<summary> Loads the server data. </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing ServerName, FileVersion, ProductVersion, AssemblyVersion </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadServerData" title="Code Example for calling LoadServerData function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadServerData" title="Code Example for calling LoadServerData function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadServerData.Request, Diamond.Common.Services.Messages.UtilityService.LoadServerData.Response, Diamond.Common.Services.Messages.UtilityService.LoadServerData.RequestData> LoadServerData()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadServerData.Request, Diamond.Common.Services.Messages.UtilityService.LoadServerData.Response, Diamond.Common.Services.Messages.UtilityService.LoadServerData.RequestData>(proxy, proxy.LoadServerData);
            return s;
        }
        ///<summary> Load the system email key using the guid  </summary>///<param name="request">Request object that will have the guid and return the email key information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.Request, Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.Response, Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.RequestData> LoadSystemEmailKey()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.Request, Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.Response, Diamond.Common.Services.Messages.UtilityService.LoadSystemEmailKey.RequestData>(proxy, proxy.LoadSystemEmailKey);
            return s;
        }
        ///<summary> Creates an entry in the ErrorLog table that contains the information contained in the exception. </summary>///<example>  <code lang="vbnet" source="Diamond\Common\Diagnostics\ErrorLogExceptionHandler.vb" region="CreateErrorLogEntry" title="Code Example for calling CreateErrorLogEntry function"></code></example>///<code lang="vbnet" source="Diamond\Common\Diagnostics\ErrorLogExceptionHandler.vb" region="CreateErrorLogEntry" title="Code Example for calling CreateErrorLogEntry function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LogException.Request, Diamond.Common.Services.Messages.UtilityService.LogException.Response, Diamond.Common.Services.Messages.UtilityService.LogException.RequestData> LogException()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LogException.Request, Diamond.Common.Services.Messages.UtilityService.LogException.Response, Diamond.Common.Services.Messages.UtilityService.LogException.RequestData>(proxy, proxy.LogException);
            return s;
        }
        ///<summary> Looks up the geo info. </summary>///<param name="request"> The <see cref="T:Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Request" /> containing the <see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" />. </param>///<see cref="T:Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Request" />///<see cref="P:Diamond.Common.Services.Messages.RequestBase`1.RequestData" />///<returns>Address</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="LookupGeoInfo" title="Code Example for calling LookupGeoInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Policy\Controls\SubmitApplication.vb" region="LookupGeoInfo" title="Code Example for calling LookupGeoInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Request, Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Response, Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.RequestData> LookupGeoInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Request, Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.Response, Diamond.Common.Services.Messages.UtilityService.LookupGeoInfo.RequestData>(proxy, proxy.LookupGeoInfo);
            return s;
        }
        ///<summary> Parses the address. </summary>///<param name="request">The request containing the address to parse.</param>///<returns> A collection of <c>ParsedAddress</c> objects containing potential parsings. </returns>///<c>ParsedAddress</c>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.ParseAddress.Request, Diamond.Common.Services.Messages.UtilityService.ParseAddress.Response, Diamond.Common.Services.Messages.UtilityService.ParseAddress.RequestData> ParseAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.ParseAddress.Request, Diamond.Common.Services.Messages.UtilityService.ParseAddress.Response, Diamond.Common.Services.Messages.UtilityService.ParseAddress.RequestData>(proxy, proxy.ParseAddress);
            return s;
        }
        ///<summary> Sends an email message to a specified phone number </summary>///<param name="request">Request object containing the email message information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.Request, Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.Response, Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.RequestData> SaveEndpoint()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.Request, Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.Response, Diamond.Common.Services.Messages.UtilityService.SaveEndpoint.RequestData>(proxy, proxy.SaveEndpoint);
            return s;
        }
        ///<summary> Saves and returns the system email key guid to attach to the email </summary>///<param name="request">Request object that will save the email key and guid and return the guid information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.Request, Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.Response, Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.RequestData> SaveSystemEmailKey()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.Request, Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.Response, Diamond.Common.Services.Messages.UtilityService.SaveSystemEmailKey.RequestData>(proxy, proxy.SaveSystemEmailKey);
            return s;
        }
        ///<summary> Sends an email message to a specified email address </summary>///<param name="request">Request object containing the email message information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendEmail.Request, Diamond.Common.Services.Messages.UtilityService.SendEmail.Response, Diamond.Common.Services.Messages.UtilityService.SendEmail.RequestData> SendEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendEmail.Request, Diamond.Common.Services.Messages.UtilityService.SendEmail.Response, Diamond.Common.Services.Messages.UtilityService.SendEmail.RequestData>(proxy, proxy.SendEmail);
            return s;
        }
        ///<summary> SendPolicyNotification </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing SystemDate </returns>///<example>  <code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDateManager.vb" region="GetSystemDate" title="Code Example for calling GetSystemDate function"></code></example>///<code lang="vbnet" source="Diamond\UI\StaticDataManager\SystemDateManager.vb" region="GetSystemDate" title="Code Example for calling GetSystemDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.Request, Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.Response, Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.RequestData> SendPolicyNotification()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.Request, Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.Response, Diamond.Common.Services.Messages.UtilityService.SendPolicyNotification.RequestData>(proxy, proxy.SendPolicyNotification);
            return s;
        }
        ///<summary> Sends an email message to a specified phone number </summary>///<param name="request">Request object containing the email message information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.Request, Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.Response, Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.RequestData> SendSystemEmail()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.Request, Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.Response, Diamond.Common.Services.Messages.UtilityService.SendSystemEmail.RequestData>(proxy, proxy.SendSystemEmail);
            return s;
        }
        ///<summary> Sends a text message to a specified phone number </summary>///<param name="request">Request object containing the text message information.</param>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendText.Request, Diamond.Common.Services.Messages.UtilityService.SendText.Response, Diamond.Common.Services.Messages.UtilityService.SendText.RequestData> SendText()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SendText.Request, Diamond.Common.Services.Messages.UtilityService.SendText.Response, Diamond.Common.Services.Messages.UtilityService.SendText.RequestData>(proxy, proxy.SendText);
            return s;
        }
        ///<summary> Sets the system date. </summary>///<param name="request">The wrapper request containing SystemDate.</param>///<returns>The wrapper response</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SetSystemDate" title="Code Example for calling SetSystemDate function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SetSystemDate" title="Code Example for calling SetSystemDate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.SetSystemDate.Request, Diamond.Common.Services.Messages.UtilityService.SetSystemDate.Response, Diamond.Common.Services.Messages.UtilityService.SetSystemDate.RequestData> SetSystemDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.SetSystemDate.Request, Diamond.Common.Services.Messages.UtilityService.SetSystemDate.Response, Diamond.Common.Services.Messages.UtilityService.SetSystemDate.RequestData>(proxy, proxy.SetSystemDate);
            return s;
        }
        ///<summary> Taxes the code filter lookup. </summary>///<param name="request">A wrapper request object</param>///<returns>Collection of tax code filters</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsTaxCodeLookup.vb" region="TaxCodeFilterLookup" title="Code Example for calling TaxCodeFilterLookup function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsTaxCodeLookup.vb" region="TaxCodeFilterLookup" title="Code Example for calling TaxCodeFilterLookup function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.RequestData> TaxCodeFilterLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeFilterLookup.RequestData>(proxy, proxy.TaxCodeFilterLookup);
            return s;
        }
        ///<summary> Parses a given address and looks up the tax code based on the list of address parsings. </summary>///<param name="request">The request.</param>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.RequestData> TaxCodeLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookup.RequestData>(proxy, proxy.TaxCodeLookup);
            return s;
        }
        ///<summary> TaxCode lookup. </summary>///<param name="request">A wrapper request object containing StateId, StreetNumber, StreetName, ZipCode, PolicyId, PolicyImageNum</param>///<returns>Collection of TaxCodes</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="TaxCodeLookupExtended" title="Code Example for calling TaxCodeLookupExtended function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="TaxCodeLookupExtended" title="Code Example for calling TaxCodeLookupExtended function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.RequestData> TaxCodeLookupExtended()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupExtended.RequestData>(proxy, proxy.TaxCodeLookupExtended);
            return s;
        }
        ///<summary> Parses a given address and looks up the tax code based on the list of address parsings. </summary>///<param name="request">The request.</param>///<returns></returns>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.RequestData> TaxCodeLookupWithParse()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.Request, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.Response, Diamond.Common.Services.Messages.UtilityService.TaxCodeLookupWithParse.RequestData>(proxy, proxy.TaxCodeLookupWithParse);
            return s;
        }
        ///<summary> Attempts to validate the city, state, zip, county information. </summary>///<param name="request">Request object containing the address(s) to be verified.</param>///<returns>Response containing result flag.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.Request, Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.Response, Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.RequestData> ValidateCityStateZipCounty()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.Request, Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.Response, Diamond.Common.Services.Messages.UtilityService.ValidateCityStateZipCounty.RequestData>(proxy, proxy.ValidateCityStateZipCounty);
            return s;
        }
        ///<summary> Attempts to verify the specified address information. </summary>///<param name="request">Request object containing the address(s) to be verified.</param>///<returns>Response containing result flag as well as the verified address information.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress1" title="Code Example for calling VerifyAddress function"></code>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress2"></code>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress3"></code>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress4"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress1" title="Code Example for calling VerifyAddress function"></code>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress2"></code>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress3"></code>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsName.vb" region="VerifyAddress4"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.UtilityService.VerifyAddress.Request, Diamond.Common.Services.Messages.UtilityService.VerifyAddress.Response, Diamond.Common.Services.Messages.UtilityService.VerifyAddress.RequestData> VerifyAddress()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Utility.UtilityServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.UtilityService.VerifyAddress.Request, Diamond.Common.Services.Messages.UtilityService.VerifyAddress.Response, Diamond.Common.Services.Messages.UtilityService.VerifyAddress.RequestData>(proxy, proxy.VerifyAddress);
            return s;
        }
    }
    ///<summary> Proxy class for Version Service </summary>
    public static class VersionService
    {
        ///<summary> Checks the current system versions against the database to ensure that everything matches. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing a success flag that indicates whether the current system versions are valid.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Diamond\Initializer.vb" region="CheckSystemVersions" title="Code Example for calling CheckSystemVersions function"></code></example>///<code lang="vbnet" source="Diamond\UI\Diamond\Initializer.vb" region="CheckSystemVersions" title="Code Example for calling CheckSystemVersions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Request, Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Response, Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.RequestData> CheckSystemVersions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Request, Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Response, Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.RequestData>(proxy, proxy.CheckSystemVersions);
            return s;
        }
        ///<summary> Gets Diamond Version information from the database. </summary>///<param name="request">The wrapper request.</param>///<returns>The wrapper response containing Version information from the database.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.Request, Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.Response, Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.RequestData> GetADiamondVersion()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.Request, Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.Response, Diamond.Common.Services.Messages.VersionService.GetADiamondVersion.RequestData>(proxy, proxy.GetADiamondVersion);
            return s;
        }
        ///<summary> Loads version information for the specified assembly. </summary>///<param name="request">The wrapper request containing the name (including the path) of the assembly.</param>///<returns>The wrapper response containing version information for the assembly.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\VersionInformationForm.vb" region="GetAssemblyInfo" title="Code Example for calling GetAssemblyInfo function"></code></example>///<code lang="vbnet" source="Diamond\UI\Core\ModalDialogs\VersionInformationForm.vb" region="GetAssemblyInfo" title="Code Example for calling GetAssemblyInfo function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.Request, Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.Response, Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.RequestData> GetAssemblyInfo()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VersionServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.Request, Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.Response, Diamond.Common.Services.Messages.VersionService.GetAssemblyInfo.RequestData>(proxy, proxy.GetAssemblyInfo);
            return s;
        }
    }
    ///<summary> Proxy class for VIN Service </summary>
    public static class VinService
    {
        ///<summary> Deletes the model SQL script. </summary>///<param name="request">A wrapper request object containing the Model Script Id</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the script deletion </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\VinData\RunSQLScripts.vb" region="DeleteModelSqlScript" title="Code Example for calling DeleteModelSqlScript function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\VinData\RunSQLScripts.vb" region="DeleteModelSqlScript" title="Code Example for calling DeleteModelSqlScript function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.RequestData> DeleteModelSqlScript()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.DeleteModelSqlScript.RequestData>(proxy, proxy.DeleteModelSqlScript);
            return s;
        }
        ///<summary> Updates the ISO model value in the Diamond Database for a specific VIN # </summary>///<param name="request">A wrapper request object containing the new ISO model value and the VIN # for which it needs to be updated .</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the update </returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\EditModelIso.vb" region="EditISOModel" title="Code Example for calling EditISOModel function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\EditModelIso.vb" region="EditISOModel" title="Code Example for calling EditISOModel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.EditISOModel.Request, Diamond.Common.Services.Messages.VinService.EditISOModel.Response, Diamond.Common.Services.Messages.VinService.EditISOModel.RequestData> EditISOModel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.EditISOModel.Request, Diamond.Common.Services.Messages.VinService.EditISOModel.Response, Diamond.Common.Services.Messages.VinService.EditISOModel.RequestData>(proxy, proxy.EditISOModel);
            return s;
        }
        ///<summary> Performs a Make\Model Lookup for the specified criteria and returns the results. </summary>///<param name="request">A wrapper request object containing the type of lookup as well as the parameters necessary for each lookup type.</param>///<returns>A wrapper response object containing the collection of models that match the criteria.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\Vehicle\VehicleForm.vb" region="GetVehicleInfoLookupMappings" title="Code Example for calling GetVehicleInfoLookupMappings function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\Vehicle\VehicleForm.vb" region="GetVehicleInfoLookupMappings" title="Code Example for calling GetVehicleInfoLookupMappings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.Request, Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.Response, Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.RequestData> GetVehicleInfoLookupMappings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.Request, Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.Response, Diamond.Common.Services.Messages.VinService.GetVehicleInfoLookupMappings.RequestData>(proxy, proxy.GetVehicleInfoLookupMappings);
            return s;
        }
        ///<summary> Loads all of the Model Iso Indicators that are currently in the system. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object containing the collection of indicators.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndicators" title="Code Example for calling LoadIndicators function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadIndicators" title="Code Example for calling LoadIndicators function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.LoadIndicators.Request, Diamond.Common.Services.Messages.VinService.LoadIndicators.Response, Diamond.Common.Services.Messages.VinService.LoadIndicators.RequestData> LoadIndicators()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.LoadIndicators.Request, Diamond.Common.Services.Messages.VinService.LoadIndicators.Response, Diamond.Common.Services.Messages.VinService.LoadIndicators.RequestData>(proxy, proxy.LoadIndicators);
            return s;
        }
        ///<summary> Loads all of the Model Iso Makes that are currently in the system. </summary>///<param name="request">A wrapper request object.</param>///<returns>A wrapper response object containing the collection of makes.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\VehicleInfoLookup.vb" region="LoadMakes" title="Code Example for calling LoadMakes function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\VehicleInfoLookup.vb" region="LoadMakes" title="Code Example for calling LoadMakes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.LoadMakes.Request, Diamond.Common.Services.Messages.VinService.LoadMakes.Response, Diamond.Common.Services.Messages.VinService.LoadMakes.RequestData> LoadMakes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.LoadMakes.Request, Diamond.Common.Services.Messages.VinService.LoadMakes.Response, Diamond.Common.Services.Messages.VinService.LoadMakes.RequestData>(proxy, proxy.LoadMakes);
            return s;
        }
        ///<summary> Load the model SQL script. </summary>///<param name="request">A wrapper request object containing no value.</param>///<returns> A wrapper response object containing ModelSQLScript object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\VinData\RunSQLScripts.vb" region="LoadModelSqlScript" title="Code Example for calling LoadModelSqlScript function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\VinData\RunSQLScripts.vb" region="LoadModelSqlScript" title="Code Example for calling LoadModelSqlScript function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.RequestData> LoadModelSqlScript()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.LoadModelSqlScript.RequestData>(proxy, proxy.LoadModelSqlScript);
            return s;
        }
        ///<summary> Loads all of the <see cref="T:Diamond.Common.StaticDataManager.Objects.VersionData.VehicleInfoLookupType" /> setup in the system regardless of the <see cref="P:Diamond.Common.Objects.Administration.Version.VersionId" />. </summary>///<see cref="T:Diamond.Common.StaticDataManager.Objects.VersionData.VehicleInfoLookupType" />///<see cref="P:Diamond.Common.Objects.Administration.Version.VersionId" />///<param name="request">The wrapper request object.</param>///<returns>The wrapper response object containing a collection of all the <see cref="T:Diamond.Common.StaticDataManager.Objects.VersionData.VehicleInfoLookupType" /> setup in the system without specifying a particular <see cref="P:Diamond.Common.Objects.Administration.Version.VersionId" />.</returns>///<see cref="T:Diamond.Common.StaticDataManager.Objects.VersionData.VehicleInfoLookupType" />///<see cref="P:Diamond.Common.Objects.Administration.Version.VersionId" />///<example>  <code lang="vbnet" source="C:\TFS\Base\Code\515\515.510\Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\VehicleInfoLookup.vb" region="LoadVehicleInfoLookupTypes" title="Code Example for calling LoadVehicleInfoLookupTypes method"></code></example>///<code lang="vbnet" source="C:\TFS\Base\Code\515\515.510\Diamond\UI\DetailControlsNonProperty\VehicleInfoLookup\VehicleInfoLookup.vb" region="LoadVehicleInfoLookupTypes" title="Code Example for calling LoadVehicleInfoLookupTypes method"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.Request, Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.Response, Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.RequestData> LoadVehicleInfoLookupTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.Request, Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.Response, Diamond.Common.Services.Messages.VinService.LoadVehicleInfoLookupTypes.RequestData>(proxy, proxy.LoadVehicleInfoLookupTypes);
            return s;
        }
        ///<summary> Models the ISO load. </summary>///<param name="request">The wrapper request object containing PropertyVersion object.</param>///<returns> The wrapper response object containing the returned ModelISO object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoad" title="Code Example for calling ModelISOLoad function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoad" title="Code Example for calling ModelISOLoad function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoad.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoad.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoad.RequestData> ModelISOLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoad.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoad.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoad.RequestData>(proxy, proxy.ModelISOLoad);
            return s;
        }
        ///<summary> Models the ISO load next records. </summary>///<param name="request">The wrapper request object containing Vin value and PropertyVersion object.</param>///<returns> The wrapper response object containing the returned ModelISO object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoadNextRecords" title="Code Example for calling ModelISOLoadNextRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoadNextRecords" title="Code Example for calling ModelISOLoadNextRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.RequestData> ModelISOLoadNextRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoadNextRecords.RequestData>(proxy, proxy.ModelISOLoadNextRecords);
            return s;
        }
        ///<summary> Models the ISO load prev records. </summary>///<param name="request">The wrapper request object containing Vin value and PropertyVersion object.</param>///<returns> The wrapper response object containing the returned ModelISO object. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoadPrevRecords" title="Code Example for calling ModelISOLoadPrevRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOLoadPrevRecords" title="Code Example for calling ModelISOLoadPrevRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.RequestData> ModelISOLoadPrevRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.Request, Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.Response, Diamond.Common.Services.Messages.VinService.ModelISOLoadPrevRecords.RequestData>(proxy, proxy.ModelISOLoadPrevRecords);
            return s;
        }
        ///<summary> Models the ISO save. </summary>///<param name="request">The wrapper request object containing ModelISO object.</param>///<returns> The wrapper response object containing the returned OperationSuccessful value. </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOSave" title="Code Example for calling ModelISOSave function"></code></example>///<code lang="vbnet" source="Diamond\UI\Administration\ModelISO\ModelISO.vb" region="ModelISOSave" title="Code Example for calling ModelISOSave function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOSave.Request, Diamond.Common.Services.Messages.VinService.ModelISOSave.Response, Diamond.Common.Services.Messages.VinService.ModelISOSave.RequestData> ModelISOSave()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ModelISOSave.Request, Diamond.Common.Services.Messages.VinService.ModelISOSave.Response, Diamond.Common.Services.Messages.VinService.ModelISOSave.RequestData>(proxy, proxy.ModelISOSave);
            return s;
        }
        ///<summary> Imports the and validate VIN record. </summary>///<param name="request">A wrapper request object containing the VIN record</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the operation and any validation errors detected </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\VinData\VinImportProgress.vb" region="ProcessIsoUpdate" title="Code Example for calling ProcessIsoUpdate function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\VinData\VinImportProgress.vb" region="ProcessIsoUpdate" title="Code Example for calling ProcessIsoUpdate function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.Request, Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.Response, Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.RequestData> ProcessIsoUpdate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.Request, Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.Response, Diamond.Common.Services.Messages.VinService.ProcessIsoUpdate.RequestData>(proxy, proxy.ProcessIsoUpdate);
            return s;
        }
        ///<summary> Returns a collection of SQL scripts to update ISO Model Info for a given Model Script Id </summary>///<param name="request">A wrapper request object containing the Model Script Id</param>///<returns> A wrapper response object containing collection of SQL scripts </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessModelScript" title="Code Example for calling ProcessModelScript function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ProcessModelScript" title="Code Example for calling ProcessModelScript function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.ProcessModelScript.Request, Diamond.Common.Services.Messages.VinService.ProcessModelScript.Response, Diamond.Common.Services.Messages.VinService.ProcessModelScript.RequestData> ProcessModelScript()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.ProcessModelScript.Request, Diamond.Common.Services.Messages.VinService.ProcessModelScript.Response, Diamond.Common.Services.Messages.VinService.ProcessModelScript.RequestData>(proxy, proxy.ProcessModelScript);
            return s;
        }
        ///<summary> Saves the model SQL script. </summary>///<param name="request">A wrapper request object containing the Model SQL Script</param>///<returns> A wrapper response object containing a boolean value indicating the success/failure of the script save operation </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Processes\AddSQLScripts.vb" region="SaveModelSqlScript" title="Code Example for calling SaveModelSqlScript function"></code></example>///<code lang="vbnet" source="Diamond\UI\Processes\AddSQLScripts.vb" region="SaveModelSqlScript" title="Code Example for calling SaveModelSqlScript function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.RequestData> SaveModelSqlScript()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.Request, Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.Response, Diamond.Common.Services.Messages.VinService.SaveModelSqlScript.RequestData>(proxy, proxy.SaveModelSqlScript);
            return s;
        }
        ///<summary> Saves the specified <see cref="T:Diamond.Common.Objects.VehicleInfoLookup.RedbookLookup" /> entry. </summary>///<see cref="T:Diamond.Common.Objects.VehicleInfoLookup.RedbookLookup" />///<param name="request">The wrapper request object containing the entry to save.</param>///<returns>The wrapper response object containing a flag that indicates if the entry was successfully saved.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.Request, Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.Response, Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.RequestData> SaveRedbookEntry()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.Request, Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.Response, Diamond.Common.Services.Messages.VinService.SaveRedbookEntry.RequestData>(proxy, proxy.SaveRedbookEntry);
            return s;
        }
        ///<summary> Performs a Make\Model Lookup for the specified criteria and returns the results. </summary>///<param name="request">A wrapper request object containing the type of lookup as well as the parameters necessary for each lookup type.</param>///<returns>A wrapper response object containing the collection of models that match the criteria.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingYearMakeModel" title="Code Example for calling MakeModelLookup function using Vehicle Year, Make and Model"></code>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingVin" title="Code Example for calling MakeModelLookup function using Vehicle VIN"></code>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingVinSerialNum" title="Code Example for calling MakeModelLookup function using Vehicle VIN and Serial Number"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingYearMakeModel" title="Code Example for calling MakeModelLookup function using Vehicle Year, Make and Model"></code>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingVin" title="Code Example for calling MakeModelLookup function using Vehicle VIN"></code>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="VehicleInfoLookupUsingVinSerialNum" title="Code Example for calling MakeModelLookup function using Vehicle VIN and Serial Number"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Request, Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Response, Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.RequestData> VehicleInfoLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Request, Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.Response, Diamond.Common.Services.Messages.VinService.VehicleInfoLookup.RequestData>(proxy, proxy.VehicleInfoLookup);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.Request, Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.Response, Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.RequestData> VehicleInfoLookupResultsLoad()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.Request, Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.Response, Diamond.Common.Services.Messages.VinService.VehicleInfoLookupResultsLoad.RequestData>(proxy, proxy.VehicleInfoLookupResultsLoad);
            return s;
        }
        ///<summary> Performs a VehicleSymbolPlan Lookup and returns the results. </summary>///<param name="request">A wrapper request object containing the type of lookup as well as the LookupId parameter for each lookup type.</param>///<returns>A wrapper response object containing the collection of VehicleSymbolPlan that match the criteria.</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request, Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Response, Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.RequestData> VehicleSymbolPlanLookup()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VinServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Request, Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.Response, Diamond.Common.Services.Messages.VinService.VehicleSymbolPlanLookup.RequestData>(proxy, proxy.VehicleSymbolPlanLookup);
            return s;
        }
    }
    ///<summary> Proxy class for Visual Tree Service such as GetPolicyQuotes, GetPolicyHistory, GetClientByID etc </summary>
    public static class VisualTreeService
    {
        ///<summary> Gets collection of Client View object based on ClientId. </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing Collection of Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByID" title="Code Example for calling GetClientByID function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByID" title="Code Example for calling GetClientByID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.RequestData> GetClientByID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByID.RequestData>(proxy, proxy.GetClientByID);
            return s;
        }
        ///<summary> Gets collection of Client View object based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing Collection of Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByPolicyID" title="Code Example for calling GetClientByPolicyID function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByPolicyID" title="Code Example for calling GetClientByPolicyID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.RequestData> GetClientByPolicyID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyID.RequestData>(proxy, proxy.GetClientByPolicyID);
            return s;
        }
        ///<summary> Gets the client based on Policy Number </summary>///<param name="request">A wrapper request object containing Policy Number.</param>///<returns> A wrapper response object containing the Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByPolicyNumber" title="Code Example for calling GetClientByPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientByPolicyNumber" title="Code Example for calling GetClientByPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.RequestData> GetClientByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientByPolicyNumber.RequestData>(proxy, proxy.GetClientByPolicyNumber);
            return s;
        }
        ///<summary> Gets Client details based on ClientId. </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing Client Name1, Name2, Address, Client Id, Collection of policydetail, searched upon text </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPoliciesByID" title="Code Example for calling GetClientPoliciesByID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPoliciesByID" title="Code Example for calling GetClientPoliciesByID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.RequestData> GetClientPoliciesByID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPoliciesByID.RequestData>(proxy, proxy.GetClientPoliciesByID);
            return s;
        }
        ///<summary> Gets collection of Client and policy detail based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing Client Name1, Name2, Address, Client Id, Collection of policydetail, searched upon text </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyByPolicyID" title="Code Example for calling GetClientPolicyByPolicyID function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyByPolicyID" title="Code Example for calling GetClientPolicyByPolicyID function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.RequestData> GetClientPolicyByPolicyID()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyID.RequestData>(proxy, proxy.GetClientPolicyByPolicyID);
            return s;
        }
        ///<summary> Gets the client and policy detail based on Policy Number </summary>///<param name="request">A wrapper request object containing Policy Number.</param>///<returns> A wrapper response object containing Client Name1, Name2, Address, Client Id, Collection of policydetail, searched upon text </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyByPolicyNumber" title="Code Example for calling GetClientPolicyByPolicyNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientPolicyByPolicyNumber" title="Code Example for calling GetClientPolicyByPolicyNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.RequestData> GetClientPolicyByPolicyNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientPolicyByPolicyNumber.RequestData>(proxy, proxy.GetClientPolicyByPolicyNumber);
            return s;
        }
        ///<summary> Gets the client view objects based on AVS Client Code </summary>///<param name="request">A wrapper request object containing AVS Client Code</param>///<returns> A wrapper response object containing collection of Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientsByAVSClientCode" title="Code Example for calling GetClientsByAVSClientCode function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientsByAVSClientCode" title="Code Example for calling GetClientsByAVSClientCode function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.RequestData> GetClientsByAVSClientCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByAVSClientCode.RequestData>(proxy, proxy.GetClientsByAVSClientCode);
            return s;
        }
        ///<summary> Gets the client view objects based on Billing Account Number </summary>///<param name="request">A wrapper request object containing Billing Account Number.</param>///<returns> A wrapper response object containing collection of Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientsByBillingAcctNumber" title="Code Example for calling GetClientsByBillingAcctNumber function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetClientsByBillingAcctNumber" title="Code Example for calling GetClientsByBillingAcctNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.RequestData> GetClientsByBillingAcctNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsByBillingAcctNumber.RequestData>(proxy, proxy.GetClientsByBillingAcctNumber);
            return s;
        }
        ///<summary> Gets the client and policy details based on AVS Client Code </summary>///<param name="request">A wrapper request object containing AVS Client Code</param>///<returns> A wrapper response object containing searched upon text, collection of ClientPolicyDetail object which has Client Name1, Name2, Address, Client Id, Collection of policydetail </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientsPoliciesByAVSClientCode" title="Code Example for calling GetClientsPoliciesByAVSClientCode function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientsPoliciesByAVSClientCode" title="Code Example for calling GetClientsPoliciesByAVSClientCode function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.RequestData> GetClientsPoliciesByAVSClientCode()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByAVSClientCode.RequestData>(proxy, proxy.GetClientsPoliciesByAVSClientCode);
            return s;
        }
        ///<summary> Gets the client and policy details based on Billing Account Number </summary>///<param name="request">A wrapper request object containing Billing Account Number.</param>///<returns> A wrapper response object containing searched upon text, collection of ClientPolicyDetail object which has Client Name1, Name2, Address, Client Id, Collection of policydetail </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientsPoliciesByBillingAcctNumber" title="Code Example for calling GetClientsPoliciesByBillingAcctNumber function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetClientsPoliciesByBillingAcctNumber" title="Code Example for calling GetClientsPoliciesByBillingAcctNumber function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.RequestData> GetClientsPoliciesByBillingAcctNumber()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.Request, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.Response, Diamond.Common.Services.Messages.VisualTreeService.GetClientsPoliciesByBillingAcctNumber.RequestData>(proxy, proxy.GetClientsPoliciesByBillingAcctNumber);
            return s;
        }
        ///<summary> Gets client and policy details based on the last name or personal name or commercial name supplied  </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing searched upon text, collection of ClientPolicyDetail object which has Client Name1, Name2, Address, Client Id, Collection of policydetail </returns>///<remarks>The parameter for the business function is Personal Name or Commercial Name.   In order to page the visual tree data:  Call GetNextClientPolicyRecords initially with your client�s lastname:firstname.   Continue to call this method iteratively passing the last SortName in the list of sorted records until the returned collection has fewer than 1000 records.</remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNextClientPolicyRecords" title="Code Example for calling GetNextClientPolicyRecords function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNextClientPolicyRecords" title="Code Example for calling GetNextClientPolicyRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.RequestData> GetNextClientPolicyRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientPolicyRecords.RequestData>(proxy, proxy.GetNextClientPolicyRecords);
            return s;
        }
        ///<summary> This method calls a business function that returns up to 1000 sorted records from the assp_VisualTree_LookupByClientName stored proc.  </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing collection of Client View object </returns>///<remarks>The parameter for the business function is LastLoadedName.   In order to page the visual tree data:  Call GetNextClientRecords initially with your client�s lastname:firstname.   Continue to call this method iteratively passing the last SortName in the list of sorted records until the returned collection has fewer than 1000 records.</remarks>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetNextClientRecords" title="Code Example for calling GetNextClientRecords function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetNextClientRecords" title="Code Example for calling GetNextClientRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.RequestData> GetNextClientRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecords.RequestData>(proxy, proxy.GetNextClientRecords);
            return s;
        }
        ///<summary> Gets client details based on the last name or personal name or commercial name supplied  </summary>///<param name="request">A wrapper request object containing name and optional agency code</param>///<returns> A wrapper response object containing searched upon text, collection of ClientDetail object which has Client Name1, Name2, Address, and Client Id </returns>///<remarks>The parameter for the business function is personal name or commercial name and optional agency code </remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNextClientRecordsByName" title="Code Example for calling GetNextClientRecordsByName function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetNextClientRecordsByName" title="Code Example for calling GetNextClientRecordsByName function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.RequestData> GetNextClientRecordsByName()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.Request, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.Response, Diamond.Common.Services.Messages.VisualTreeService.GetNextClientRecordsByName.RequestData>(proxy, proxy.GetNextClientRecordsByName);
            return s;
        }
        ///<summary> Gets the policy archived quotes based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing the collection of Policy Images </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyArchivedQuotes" title="Code Example for calling GetPolicyArchivedQuotes function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyArchivedQuotes" title="Code Example for calling GetPolicyArchivedQuotes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.RequestData> GetPolicyArchivedQuotes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyArchivedQuotes.RequestData>(proxy, proxy.GetPolicyArchivedQuotes);
            return s;
        }
        ///<summary> Gets the policy history based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing the collection of Policy Images </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyHistory" title="Code Example for calling GetPolicyHistory function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyHistory" title="Code Example for calling GetPolicyHistory function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.RequestData> GetPolicyHistory()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyHistory.RequestData>(proxy, proxy.GetPolicyHistory);
            return s;
        }
        ///<summary> Gets information about the specified policy image. </summary>///<param name="Request">A wrapper request object containing the policy id and image number.</param>///<returns>A wrapper response object containing information about the policy image.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyProperties" title="Code Example for calling GetPolicyProperties function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyProperties" title="Code Example for calling GetPolicyProperties function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.RequestData> GetPolicyProperties()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyProperties.RequestData>(proxy, proxy.GetPolicyProperties);
            return s;
        }
        ///<summary> Gets the policy quotes based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing the collection of Policy Images </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyQuotes" title="Code Example for calling GetPolicyQuotes function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyQuotes" title="Code Example for calling GetPolicyQuotes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.RequestData> GetPolicyQuotes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyQuotes.RequestData>(proxy, proxy.GetPolicyQuotes);
            return s;
        }
        ///<summary> Gets the Accounts based on CliendId </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing the collection of Account View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyTopLevel" title="Code Example for calling GetPolicyTopLevel function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyTopLevel" title="Code Example for calling GetPolicyTopLevel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.RequestData> GetPolicyTopLevel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevel.RequestData>(proxy, proxy.GetPolicyTopLevel);
            return s;
        }
        ///<summary> Gets the Account View of Archived Quotes based on ClientId </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing the collection of Account View object </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyTopLevelArchivedQuote" title="Code Example for calling GetPolicyTopLevelArchivedQuote function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetPolicyTopLevelArchivedQuote" title="Code Example for calling GetPolicyTopLevelArchivedQuote function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.RequestData> GetPolicyTopLevelArchivedQuote()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPolicyTopLevelArchivedQuote.RequestData>(proxy, proxy.GetPolicyTopLevelArchivedQuote);
            return s;
        }
        ///<summary> Gets the prior set client records based on ClientId </summary>///<param name="request">A wrapper request object containing ClientId.</param>///<returns> A wrapper response object containing collection of Client View object </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPreviousClientRecords" title="Code Example for calling GetPreviousClientRecords function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetPreviousClientRecords" title="Code Example for calling GetPreviousClientRecords function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.RequestData> GetPreviousClientRecords()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.Request, Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.Response, Diamond.Common.Services.Messages.VisualTreeService.GetPreviousClientRecords.RequestData>(proxy, proxy.GetPreviousClientRecords);
            return s;
        }
        ///<summary> Gets the claim features based on ClaimId and Claim Number </summary>///<param name="request">A wrapper request object containing ClaimId and Claim Number.</param>///<returns> A wrapper response object containing the collection of Claim Feature objects </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreeClaimFeatures" title="Code Example for calling GetVTreeClaimFeatures function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreeClaimFeatures" title="Code Example for calling GetVTreeClaimFeatures function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.RequestData> GetVTreeClaimFeatures()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaimFeatures.RequestData>(proxy, proxy.GetVTreeClaimFeatures);
            return s;
        }
        ///<summary> Gets the claims based on PolicyId </summary>///<param name="request">A wrapper request object containing PolicyId.</param>///<returns> A wrapper response object containing the collection of Claims </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreeClaims" title="Code Example for calling GetVTreeClaims function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreeClaims" title="Code Example for calling GetVTreeClaims function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.RequestData> GetVTreeClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreeClaims.RequestData>(proxy, proxy.GetVTreeClaims);
            return s;
        }
        ///<summary> Gets the Accounts based on Billing Account Id </summary>///<param name="request">A wrapper request object containing Billing Account Id</param>///<returns> A wrapper response object containing the collection of Account view objects </returns>///<example>  <code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreePoliciesByBillingAccount" title="Code Example for calling GetVTreePoliciesByBillingAccount function"></code></example>///<code lang="vbnet" source="Diamond\UI\VisualTree\VTree.vb" region="GetVTreePoliciesByBillingAccount" title="Code Example for calling GetVTreePoliciesByBillingAccount function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.RequestData> GetVTreePoliciesByBillingAccount()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.VisualTreeServices.VisualTreeServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.Request, Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.Response, Diamond.Common.Services.Messages.VisualTreeService.GetVTreePoliciesByBillingAccount.RequestData>(proxy, proxy.GetVTreePoliciesByBillingAccount);
            return s;
        }
    }
    ///<summary> Proxy class for Workflow Service </summary>
    public static class WorkflowService
    {
        ///<summary> Approves the specified workflow item by the specified user. </summary>///<param name="request">The request containing the WorkflowId and UserId used for approving the workflow item.</param>///<returns>The wrapper response containing a boolean indicating success/failure of the operation.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\DetailControlsCore\UnderwriterReview\UnderwriterReview.vb" region="ApproveUnderwritingTask" title="Code Example for calling ApproveUnderwritingTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\DetailControlsCore\UnderwriterReview\UnderwriterReview.vb" region="ApproveUnderwritingTask" title="Code Example for calling ApproveUnderwritingTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.Request, Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.Response, Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.RequestData> ApproveUnderwritingTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.Request, Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.Response, Diamond.Common.Services.Messages.WorkflowService.ApproveUnderwritingTask.RequestData>(proxy, proxy.ApproveUnderwritingTask);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.RequestData> CanAcquirePolicyTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanAcquirePolicyTask.RequestData>(proxy, proxy.CanAcquirePolicyTask);
            return s;
        }
        ///<summary> Determines whether current user can delete task for given WorkflowId </summary>///<param name="request">The wrapper request containing WorkflowId.</param>///<returns> The wrapper response containing AllowDeletion </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="CanDeleteTask" title="Code Example for calling CanDeleteTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="CanDeleteTask" title="Code Example for calling CanDeleteTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.RequestData> CanDeleteTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanDeleteTask.RequestData>(proxy, proxy.CanDeleteTask);
            return s;
        }
        ///<summary> Determines whether current user can delete task </summary>///<param name="request">The wrapper request containing the WorkflowId.</param>///<returns> The wrapper response to determine if signed on user can delete task </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanUserDeleteTask" title="Code Example for calling CanUserDeleteTask function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanUserDeleteTask" title="Code Example for calling CanUserDeleteTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.RequestData> CanUserDeleteTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CanUserDeleteTask.RequestData>(proxy, proxy.CanUserDeleteTask);
            return s;
        }
        ///<summary> Determines whether current user can view others' workflow </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AuthorityGranted </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewOthersWorkflow" title="Code Example for calling CanViewOthersWorkflow function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewOthersWorkflow" title="Code Example for calling CanViewOthersWorkflow function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.Request, Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.Response, Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.RequestData> CanViewOthersWorkflow()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.Request, Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.Response, Diamond.Common.Services.Messages.WorkflowService.CanViewOthersWorkflow.RequestData>(proxy, proxy.CanViewOthersWorkflow);
            return s;
        }
        ///<summary> Determines whether current user can even view workflow </summary>///<param name="request">The wrapper request.</param>///<returns> The wrapper response containing AuthorityGranted </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewWorkflow" title="Code Example for calling CanViewWorkflow function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CanViewWorkflow" title="Code Example for calling CanViewWorkflow function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.Request, Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.Response, Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.RequestData> CanViewWorkflow()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.Request, Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.Response, Diamond.Common.Services.Messages.WorkflowService.CanViewWorkflow.RequestData>(proxy, proxy.CanViewWorkflow);
            return s;
        }
        ///<summary> Transfers the workflow task from current user to another user's queue </summary>///<param name="request">The wrapper request containing WorkflowId, WorkflowGroupId, CurrentUsersId, Urgent, Mandatory.</param>///<returns> The wrapper response containing OperationSuccessful, WorkflowId </returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CompleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CompleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CompleteTask.RequestData> CompleteTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CompleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.CompleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.CompleteTask.RequestData>(proxy, proxy.CompleteTask);
            return s;
        }
        ///<summary> Counts the policy workflow tasks for given PolicyId </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns> The wrapper response containing TaskCount </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CountPolicyTasks" title="Code Example for calling CountPolicyTasks function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="CountPolicyTasks" title="Code Example for calling CountPolicyTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.Request, Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.Response, Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.RequestData> CountPolicyTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.Request, Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.Response, Diamond.Common.Services.Messages.WorkflowService.CountPolicyTasks.RequestData>(proxy, proxy.CountPolicyTasks);
            return s;
        }
        ///<summary> Creates the workflow for claims for WorkflowId, ClaimControl, ClaimantNum, ClaimFeatureNum, ClaimTransactionNum </summary>///<param name="request">The wrapper request containing WorkflowId, ClaimControl, ClaimantNum, ClaimFeature, ClaimTransactionNum.</param>///<returns> The wrapper response containing Success, Workflows </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="CreateWorkflowForClaims" title="Code Example for calling CreateWorkflowForClaims function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="CreateWorkflowForClaims" title="Code Example for calling CreateWorkflowForClaims function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.RequestData> CreateWorkflowForClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClaims.RequestData>(proxy, proxy.CreateWorkflowForClaims);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.RequestData> CreateWorkflowForClient()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForClient.RequestData>(proxy, proxy.CreateWorkflowForClient);
            return s;
        }
        ///<summary> Creates the workflow for policy for given PolicyId, PolicyImageNum from Workflow </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum and Workflow object </param>///<returns>A response wrapper containing boolean indicating success/failure of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="CreateWorkflowForPolicy" title="Code Example for calling CreateWorkflowForPolicy function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="CreateWorkflowForPolicy" title="Code Example for calling CreateWorkflowForPolicy function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.RequestData> CreateWorkflowForPolicy()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.Request, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.Response, Diamond.Common.Services.Messages.WorkflowService.CreateWorkflowForPolicy.RequestData>(proxy, proxy.CreateWorkflowForPolicy);
            return s;
        }
        ///<summary> Deletes the claims workflow task for WorkflowType, ClaimControl, ClaimantNum, ClaimFeature, ClaimTransaction </summary>///<param name="request">The wrapper request containing WorkflowType, ClaimControl, ClaimantNum, ClaimFeature, ClaimTransactionNum.</param>///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteClaimTask" title="Code Example for calling DeleteClaimTask function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteClaimTask" title="Code Example for calling DeleteClaimTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.RequestData> DeleteClaimTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteClaimTask.RequestData>(proxy, proxy.DeleteClaimTask);
            return s;
        }
        ///<summary> Deletes the task for corresponding WorkflowId </summary>///<param name="request">The wrapper request containing WorkflowId, DenyOnly, OverrideAuthority.</param>///<returns> The wrapper response containing boolean to determine success </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="DeleteTask" title="Code Example for calling DeleteTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="DeleteTask" title="Code Example for calling DeleteTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteTask.RequestData> DeleteTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteTask.RequestData>(proxy, proxy.DeleteTask);
            return s;
        }
        ///<summary> Delete ToDo List Task </summary>///<param name="request">The request containing the WorkflowId</param>///<returns>The wrapper response containing boolean TaskDeleted</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteToDoListTask" title="Code Example for calling DeleteToDoListTask function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteToDoListTask" title="Code Example for calling DeleteToDoListTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.RequestData> DeleteToDoListTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteToDoListTask.RequestData>(proxy, proxy.DeleteToDoListTask);
            return s;
        }
        ///<summary> Deletes the workflow for claims based on the <c>ClaimControl</c>, <c>ClaimantNum</c>, <c>ClaimFeatureNum</c>, and <c>ClaimTransactionNum</c>. </summary>///<c>ClaimControl</c>///<c>ClaimantNum</c>///<c>ClaimFeatureNum</c>///<c>ClaimTransactionNum</c>///<param name="request">The request containing the <c>ClaimControl</c>, <c>ClaimantNum</c>, <c>ClaimFeatureNum</c>, and <c>ClaimTransactionNum</c>.</param>///<c>ClaimControl</c>///<c>ClaimantNum</c>///<c>ClaimFeatureNum</c>///<c>ClaimTransactionNum</c>///<returns>  <c>True</c> if the workflow was deleted successfully; <c>False</c> otherwise. </returns>///<c>True</c>///<c>False</c>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteWorkflowForClaims" title="Code Example for calling DeleteWorkflowForClaims function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="DeleteWorkflowForClaims" title="Code Example for calling DeleteWorkflowForClaims function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.RequestData> DeleteWorkflowForClaims()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.Request, Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.Response, Diamond.Common.Services.Messages.WorkflowService.DeleteWorkflowForClaims.RequestData>(proxy, proxy.DeleteWorkflowForClaims);
            return s;
        }
        ///<summary> Tests workflow functions </summary>///<param name="request">The request.</param>///<returns>Nothing</returns>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DoTests.Request, Diamond.Common.Services.Messages.WorkflowService.DoTests.Response, Diamond.Common.Services.Messages.WorkflowService.DoTests.RequestData> DoTests()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.DoTests.Request, Diamond.Common.Services.Messages.WorkflowService.DoTests.Response, Diamond.Common.Services.Messages.WorkflowService.DoTests.RequestData>(proxy, proxy.DoTests);
            return s;
        }
        ///<summary> Gets valid transfer queues for UsersId, AgencyId </summary>///<param name="request">The wrapper request containing UsersId, AgencyId.</param>///<returns> The wrapper response containing collection of WorkflowQueues </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetValidTransferQueues" title="Code Example for calling GetValidTransferQueues function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetValidTransferQueues" title="Code Example for calling GetValidTransferQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.Request, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.Response, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.RequestData> GetValidTransferQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.Request, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.Response, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferQueues.RequestData>(proxy, proxy.GetValidTransferQueues);
            return s;
        }
        ///<summary> Gets valid transfer users for UsersId, AgencyId </summary>///<param name="request">The wrapper request containing UsersId, AgencyId.</param>///<returns> The wrapper response containing collection of Users </returns>///<example>  <code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetValidTransferUsers" title="Code Example for calling GetValidTransferUsers function"></code></example>///<code lang="vbnet" source="Diamond\UI\BaseControls\InsUserCombo.vb" region="GetValidTransferUsers" title="Code Example for calling GetValidTransferUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.Request, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.Response, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.RequestData> GetValidTransferUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.Request, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.Response, Diamond.Common.Services.Messages.WorkflowService.GetValidTransferUsers.RequestData>(proxy, proxy.GetValidTransferUsers);
            return s;
        }
        ///<summary> Loads the pending WorkflowId for PolicyId, PolicyImageNum. </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum.</param>///<returns> The wrapper request containing WorkflowId, WorkflowQueueId, UsersId, PolicyImageNum </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetWorkflowId" title="Code Example for calling GetWorkflowId function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="GetWorkflowId" title="Code Example for calling GetWorkflowId function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.Request, Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.Response, Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.RequestData> GetWorkflowId()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.Request, Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.Response, Diamond.Common.Services.Messages.WorkflowService.GetWorkflowId.RequestData>(proxy, proxy.GetWorkflowId);
            return s;
        }
        ///<summary> Checks to see if the specified task has already been deleted. </summary>///<param name="request">The request containing the WorkflowId to be checked.</param>///<returns>The wrapper response containing the result indicating if the task is already deleted.</returns>///<example>  <exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>  <code lang="vbnet" source="Diamond\UI\Workflow\MdiForms\OpenTasksMdiForm.vb" region="IsTaskDeleted" title="Code Example for calling IsTaskDeleted function"></code></example>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<code lang="vbnet" source="Diamond\UI\Workflow\MdiForms\OpenTasksMdiForm.vb" region="IsTaskDeleted" title="Code Example for calling IsTaskDeleted function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.Request, Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.Response, Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.RequestData> IsTaskDeleted()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.Request, Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.Response, Diamond.Common.Services.Messages.WorkflowService.IsTaskDeleted.RequestData>(proxy, proxy.IsTaskDeleted);
            return s;
        }
        ///<summary> Loads the workflow tasks for given Claim Number </summary>///<param name="request">The wrapper request containing ClaimNumber.</param>///<returns> The wrapper response containing collection of ClaimTasksItems </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\MdiForms\OpenTasksMdiForm.vb" region="LoadClaimTasks" title="Code Example for calling LoadClaimTasks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\MdiForms\OpenTasksMdiForm.vb" region="LoadClaimTasks" title="Code Example for calling LoadClaimTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.RequestData> LoadClaimTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadClaimTasks.RequestData>(proxy, proxy.LoadClaimTasks);
            return s;
        }
        ///<summary> Loads the milestone type kpi metrics </summary>///<param name="request">The wrapper request containing UsersIds, LookupSupervisorAdjusters.</param>///<returns> The wrapper response containing MilestoneTypeKpiMetric collection </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMilestoneTypeKpiMetrics" title="Code Example for calling LoadMilestoneTypeKpiMetrics function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadMilestoneTypeKpiMetrics" title="Code Example for calling LoadMilestoneTypeKpiMetrics function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.Request, Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.Response, Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.RequestData> LoadMilestoneTypeKpiMetrics()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.Request, Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.Response, Diamond.Common.Services.Messages.WorkflowService.LoadMilestoneTypeKpiMetrics.RequestData>(proxy, proxy.LoadMilestoneTypeKpiMetrics);
            return s;
        }
        ///<summary> Loads user settings for the open tasks screen </summary>///<param name="request">The wrapper request containing the UserId.</param>///<returns> The wrapper response containing user settings for Open Tasks </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<remarks>Set UserId = 0 to retrieve default settings from Database</remarks>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOpenTasksUserSettings" title="Code Example for calling LoadOpenTasksUserSettings function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadOpenTasksUserSettings" title="Code Example for calling LoadOpenTasksUserSettings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.Request, Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.Response, Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.RequestData> LoadOpenTasksUserSettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.Request, Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.Response, Diamond.Common.Services.Messages.WorkflowService.LoadOpenTasksUserSettings.RequestData>(proxy, proxy.LoadOpenTasksUserSettings);
            return s;
        }
        ///<summary> Retrieves policy for claims information that is used for tasks and diary items. </summary>///<param name="request">The request containing the PolicyId and PolicyImageNum used for retrieving policy information.  Or, the ClaimControlId used for retrieving claim information.</param>///<returns>The wrapper response containing either policy or claim information.</returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadPolicyOrClaimInformation" title="Code Example for calling LoadPolicyOrClaimInformation function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadPolicyOrClaimInformation" title="Code Example for calling LoadPolicyOrClaimInformation function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.RequestData> LoadPolicyOrClaimInformation()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyOrClaimInformation.RequestData>(proxy, proxy.LoadPolicyOrClaimInformation);
            return s;
        }
        ///<summary> Loads the workflow tasks for given PolicyId </summary>///<param name="request">The wrapper request containing PolicyId.</param>///<returns> The wrapper response containing collection of PolicyTaskItems </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadPolicyTasks" title="Code Example for calling LoadPolicyTasks function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadPolicyTasks" title="Code Example for calling LoadPolicyTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.RequestData> LoadPolicyTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasks.RequestData>(proxy, proxy.LoadPolicyTasks);
            return s;
        }
        ///<summary> Loads all policy tasks for the client of the specified policy id. </summary>///<param name="request">The request containing the PolicyId to be used for determining the Client.</param>///<returns>The wrapper response containing the tasks for the client.</returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\Controls\PolicyTasksUserControl.vb" region="LoadPolicyTasksAtThisLevel" title="Code Example for calling LoadPolicyTasksAtThisLevel function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\Controls\PolicyTasksUserControl.vb" region="LoadPolicyTasksAtThisLevel" title="Code Example for calling LoadPolicyTasksAtThisLevel function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.RequestData> LoadPolicyTasksAtThisLevel()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.Request, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.Response, Diamond.Common.Services.Messages.WorkflowService.LoadPolicyTasksAtThisLevel.RequestData>(proxy, proxy.LoadPolicyTasksAtThisLevel);
            return s;
        }
        ///<summary> Loads the details of the workflow task for WorkflowId, PolicyId, WorkflowGroup, WorkflowType </summary>///<param name="request">The wrapper request containing WorkflowId, PolicyId, WorkflowGroup, WorkflowType.</param>///<returns> The wrapper response containing Workflow, AvailableActions </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadTaskDetails" title="Code Example for calling LoadTaskDetails function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="LoadTaskDetails" title="Code Example for calling LoadTaskDetails function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.Request, Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.Response, Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.RequestData> LoadTaskDetails()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.Request, Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.Response, Diamond.Common.Services.Messages.WorkflowService.LoadTaskDetails.RequestData>(proxy, proxy.LoadTaskDetails);
            return s;
        }
        ///<summary> Loads ToDo List of Agency List </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListAgencyList" title="Code Example for calling LoadToDoListAgencyList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListAgencyList" title="Code Example for calling LoadToDoListAgencyList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.RequestData> LoadToDoListAgencyList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListAgencyList.RequestData>(proxy, proxy.LoadToDoListAgencyList);
            return s;
        }
        ///<summary> Loads ToDo List of MyTasks List </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListMyTasksList" title="Code Example for calling LoadToDoListMyTasksList function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListMyTasksList" title="Code Example for calling LoadToDoListMyTasksList function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.RequestData> LoadToDoListMyTasksList()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListMyTasksList.RequestData>(proxy, proxy.LoadToDoListMyTasksList);
            return s;
        }
        ///<summary> Loads ToDo List of Pending Cancellations </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPendingCancellations" title="Code Example for calling LoadToDoListPendingCancellations function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPendingCancellations" title="Code Example for calling LoadToDoListPendingCancellations function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.RequestData> LoadToDoListPendingCancellations()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingCancellations.RequestData>(proxy, proxy.LoadToDoListPendingCancellations);
            return s;
        }
        ///<summary> Loads ToDo List of Pending Transactions </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPendingTransactions" title="Code Example for calling LoadToDoListPendingTransactions function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPendingTransactions" title="Code Example for calling LoadToDoListPendingTransactions function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.RequestData> LoadToDoListPendingTransactions()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPendingTransactions.RequestData>(proxy, proxy.LoadToDoListPendingTransactions);
            return s;
        }
        ///<summary> Loads ToDo List of Print Errors </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc  to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPrintErrors" title="Code Example for calling LoadToDoListPrintErrors function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPrintErrors" title="Code Example for calling LoadToDoListPrintErrors function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.RequestData> LoadToDoListPrintErrors()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintErrors.RequestData>(proxy, proxy.LoadToDoListPrintErrors);
            return s;
        }
        ///<summary> Loads ToDo List of Print Items </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPrintItems" title="Code Example for calling LoadToDoListPrintItems function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListPrintItems" title="Code Example for calling LoadToDoListPrintItems function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.RequestData> LoadToDoListPrintItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListPrintItems.RequestData>(proxy, proxy.LoadToDoListPrintItems);
            return s;
        }
        ///<summary> Load ToDo List of Quotes </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId, UsersId, FromUsersId, OrigUsersId, WorkflowTypeId,  WorkflowTypeDscr, AddDate, DueDate, ReviewDate, ReviewDays, Urgent, Diary, Remarks, DeletionUsersId, DeletionDate, Manditory,  DisplayNumber, PolicyNumber, ClaimNumber, PolicyId, PolicyImageNum etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListQuotes" title="Code Example for calling LoadToDoListQuotes function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListQuotes" title="Code Example for calling LoadToDoListQuotes function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.RequestData> LoadToDoListQuotes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListQuotes.RequestData>(proxy, proxy.LoadToDoListQuotes);
            return s;
        }
        ///<summary> Loads ToDo List of Rescission Items </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListRescissionItems" title="Code Example for calling LoadToDoListRescissionItems function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListRescissionItems" title="Code Example for calling LoadToDoListRescissionItems function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.RequestData> LoadToDoListRescissionItems()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListRescissionItems.RequestData>(proxy, proxy.LoadToDoListRescissionItems);
            return s;
        }
        ///<summary> Loads ToDo List of Transferred Tasks </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListTransferredTasks" title="Code Example for calling LoadToDoListTransferredTasks function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListTransferredTasks" title="Code Example for calling LoadToDoListTransferredTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.RequestData> LoadToDoListTransferredTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListTransferredTasks.RequestData>(proxy, proxy.LoadToDoListTransferredTasks);
            return s;
        }
        ///<summary> Loads ToDo List of Underwriter Review </summary>///<param name="request">The request containing the UsersId, AgencyCodeMatch, AgencyCode, NamedInsuredMatch, NamedInsured, PolicyNumberMatch, PolicyNumber, StartDate, EndDate</param>///<returns>The wrapper response Workflow Tasks containing WorkflowId, WorkflowQueueId etc to be displayed in Open Tasks screen</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListUnderwriterReview" title="Code Example for calling LoadToDoListUnderwriterReview function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadToDoListUnderwriterReview" title="Code Example for calling LoadToDoListUnderwriterReview function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.RequestData> LoadToDoListUnderwriterReview()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.Request, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.Response, Diamond.Common.Services.Messages.WorkflowService.LoadToDoListUnderwriterReview.RequestData>(proxy, proxy.LoadToDoListUnderwriterReview);
            return s;
        }
        ///<summary> Loads the workflow queues for UserId </summary>///<param name="request">The wrapper request containing UsersId, CheckAuthority.</param>///<returns> The wrapper response containing collection of WorkflowQueues </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Agency\AgencyQueue.vb" region="LoadWorkflowQueues" title="Code Example for calling LoadWorkflowQueues function"></code></example>///<code lang="vbnet" source="Diamond\UI\Agency\AgencyQueue.vb" region="LoadWorkflowQueues" title="Code Example for calling LoadWorkflowQueues function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.RequestData> LoadWorkflowQueues()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowQueues.RequestData>(proxy, proxy.LoadWorkflowQueues);
            return s;
        }
        ///<summary> Loads the workflow tasks for UserId, Date Range </summary>///<param name="request">The wrapper request containing UsersId, StartDate, EndDate, QuotesOnly.</param>///<returns> The wrapper response containing WorkflowCollection </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWorkflowTasks" title="Code Example for calling LoadWorkflowTasks function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWorkflowTasks" title="Code Example for calling LoadWorkflowTasks function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.RequestData> LoadWorkflowTasks()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasks.RequestData>(proxy, proxy.LoadWorkflowTasks);
            return s;
        }
        ///<summary> Loads the workflow tasks for UserIds, Date Range </summary>///<param name="request">The wrapper request containing UsersIds array, StartDate, EndDate, QuotesOnly.</param>///<returns> The wrapper response containing WorkflowCollection </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWorkflowTasksForMultipleUsers" title="Code Example for calling LoadWorkflowTasksForMultipleUsers function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="LoadWorkflowTasksForMultipleUsers" title="Code Example for calling LoadWorkflowTasksForMultipleUsers function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.RequestData> LoadWorkflowTasksForMultipleUsers()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.Request, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.Response, Diamond.Common.Services.Messages.WorkflowService.LoadWorkflowTasksForMultipleUsers.RequestData>(proxy, proxy.LoadWorkflowTasksForMultipleUsers);
            return s;
        }
        ///<summary> Recurs the task for WorkflowId </summary>///<param name="request">The wrapper request containing workflow object.</param>///<returns>The wrapper response returning only DiamondValidation</returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="RecurTask" title="Code Example for calling RecurTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\Globals.vb" region="RecurTask" title="Code Example for calling RecurTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.RecurTask.Request, Diamond.Common.Services.Messages.WorkflowService.RecurTask.Response, Diamond.Common.Services.Messages.WorkflowService.RecurTask.RequestData> RecurTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.RecurTask.Request, Diamond.Common.Services.Messages.WorkflowService.RecurTask.Response, Diamond.Common.Services.Messages.WorkflowService.RecurTask.RequestData>(proxy, proxy.RecurTask);
            return s;
        }
        ///<summary> Saves user settings for open tasks screen. </summary>///<param name="request">The wrapper request containing the user settings for Open Tasks.</param>///<returns> The wrapper response contain boolean to determine success </returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveOpenTasksUserSettings" title="Code Example for calling SaveOpenTasksUserSettings function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SaveOpenTasksUserSettings" title="Code Example for calling SaveOpenTasksUserSettings function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.Request, Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.Response, Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.RequestData> SaveOpenTasksUserSettings()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.Request, Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.Response, Diamond.Common.Services.Messages.WorkflowService.SaveOpenTasksUserSettings.RequestData>(proxy, proxy.SaveOpenTasksUserSettings);
            return s;
        }
        ///<summary> Saves the workflow task for given WorkflowId </summary>///<param name="request">The wrapper request containing WorkflowId, TaskActionData.</param>///<returns> The wrapper response containing OperationSuccessful, WorkflowId </returns>///<exception cref="T:System.ArgumentNullException">Thrown when request is Nothing</exception>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="SaveTask" title="Code Example for calling SaveTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="SaveTask" title="Code Example for calling SaveTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveTask.Request, Diamond.Common.Services.Messages.WorkflowService.SaveTask.Response, Diamond.Common.Services.Messages.WorkflowService.SaveTask.RequestData> SaveTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveTask.Request, Diamond.Common.Services.Messages.WorkflowService.SaveTask.Response, Diamond.Common.Services.Messages.WorkflowService.SaveTask.RequestData>(proxy, proxy.SaveTask);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.Request, Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.Response, Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.RequestData> SaveWorkflowTypes()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.Request, Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.Response, Diamond.Common.Services.Messages.WorkflowService.SaveWorkflowTypes.RequestData>(proxy, proxy.SaveWorkflowTypes);
            return s;
        }
        ///<summary> Sends to agency queue for given PolicyId, PolicyImageNum </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum.</param>///<returns>The wrapper response containing Success/Failure indicator of the operation</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SendToAgencyQueue" title="Code Example for calling SendToAgencyQueue function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SendToAgencyQueue" title="Code Example for calling SendToAgencyQueue function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.Request, Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.Response, Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.RequestData> SendToAgencyQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.Request, Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.Response, Diamond.Common.Services.Messages.WorkflowService.SendToAgencyQueue.RequestData>(proxy, proxy.SendToAgencyQueue);
            return s;
        }
        ///<summary> Sets the urgent field on Workflow for given WorkflowId </summary>///<param name="request">The wrapper request containing WorkflowId.</param>///<returns>The wrapper response containing Success/Failure indicator</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SetUrgent" title="Code Example for calling SetUrgent function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="SetUrgent" title="Code Example for calling SetUrgent function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SetUrgent.Request, Diamond.Common.Services.Messages.WorkflowService.SetUrgent.Response, Diamond.Common.Services.Messages.WorkflowService.SetUrgent.RequestData> SetUrgent()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.SetUrgent.Request, Diamond.Common.Services.Messages.WorkflowService.SetUrgent.Response, Diamond.Common.Services.Messages.WorkflowService.SetUrgent.RequestData>(proxy, proxy.SetUrgent);
            return s;
        }
        ///<summary> Should Policy Be Denied when being deleted </summary>///<param name="request">The request containing the PolicyId, PolicyImageNum</param>///<returns>The wrapper response Deny says if it shoul dbe denied.</returns>///<example>  <code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ShouldPolicyBeDenied" title="Code Example for calling ShouldPolicyBeDenied function"></code></example>///<code lang="vbnet" source="Diamond\Common\Services\CodeSamples\CodeSample.vb" region="ShouldPolicyBeDenied" title="Code Example for calling ShouldPolicyBeDenied function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.Request, Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.Response, Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.RequestData> ShouldPolicyBeDenied()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.Request, Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.Response, Diamond.Common.Services.Messages.WorkflowService.ShouldPolicyBeDenied.RequestData>(proxy, proxy.ShouldPolicyBeDenied);
            return s;
        }
        ///<summary> Transfers the policy workflow task from current user to another user's queue. </summary>///<param name="request">The wrapper request containing WorkflowId, WorkflowGroupId, NewUsersId, CurrentUsersId, Remarks, Urgent, Mandatory, PolicyId, PolicyImageNum, UsersId.</param>///<returns> The wrapper response containing Success, WorkflowId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferPolicyTask" title="Code Example for calling TransferPolicyTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferPolicyTask" title="Code Example for calling TransferPolicyTask function"></code>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferPolicyTask" title="Code Example for calling TransferPolicyTask function to acquire task from anotheruser to currentuser"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferPolicyTask" title="Code Example for calling TransferPolicyTask function to acquire task from anotheruser to currentuser"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.Request, Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.Response, Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.RequestData> TransferPolicyTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.Request, Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.Response, Diamond.Common.Services.Messages.WorkflowService.TransferPolicyTask.RequestData>(proxy, proxy.TransferPolicyTask);
            return s;
        }
        ///<summary> Transfers the workflow task from current user to another user's queue </summary>///<param name="request">The wrapper request containing WorkflowId, WorkflowGroupId, NewUsersId, CurrentUsersId, Remarks, Urgent, Mandatory.</param>///<returns> The wrapper response containing OperationSuccessful, WorkflowId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferTask" title="Code Example for calling TransferTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferTask" title="Code Example for calling TransferTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferTask.Request, Diamond.Common.Services.Messages.WorkflowService.TransferTask.Response, Diamond.Common.Services.Messages.WorkflowService.TransferTask.RequestData> TransferTask()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferTask.Request, Diamond.Common.Services.Messages.WorkflowService.TransferTask.Response, Diamond.Common.Services.Messages.WorkflowService.TransferTask.RequestData>(proxy, proxy.TransferTask);
            return s;
        }
        ///<summary> Transfers the workflow task from current user to another user's queue </summary>///<param name="request">The wrapper request containing PolicyId, PolicyImageNum, WorkflowId, WorkflowGroupId, NewUsersId, CurrentUsersId, Remarks, Urgent, Mandatory.</param>///<returns> The wrapper response containing OperationSuccessful, WorkflowId </returns>///<example>  <code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferTask" title="Code Example for calling TransferTask function"></code></example>///<code lang="vbnet" source="Diamond\UI\Workflow\ModalDialogs\ViewTaskForm.vb" region="TransferTask" title="Code Example for calling TransferTask function"></code>
        public static ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.Request, Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.Response, Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.RequestData> TransferTaskToAgencyQueue()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.Workflow.WorkflowServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.Request, Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.Response, Diamond.Common.Services.Messages.WorkflowService.TransferTaskToAgencyQueue.RequestData>(proxy, proxy.TransferTaskToAgencyQueue);
            return s;
        }
    }
    ///<summary> Proxy class for Support Service </summary>
    public static class SupportService
    {
        ///<summary> AutoTrans </summary>///<param name="request">A wrapper class for ResetPrint Request Data containing the PolicyId, PolicyImageNum, and ReattachForms object.</param>///<returns>The wrapper response containing success indicator</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.AutoTrans.Request, Diamond.Common.Services.Messages.SupportService.AutoTrans.Response, Diamond.Common.Services.Messages.SupportService.AutoTrans.RequestData> AutoTrans()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.AutoTrans.Request, Diamond.Common.Services.Messages.SupportService.AutoTrans.Response, Diamond.Common.Services.Messages.SupportService.AutoTrans.RequestData>(proxy, proxy.AutoTrans);
            return s;
        }
        ///<summary> CheckStatusReset </summary>///<param name="request">A wrapper class for ResetPrint Request Data containing the PolicyId, PolicyImageNum, and ReattachForms object.</param>///<returns>The wrapper response containing success indicator</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.CheckStatusReset.Request, Diamond.Common.Services.Messages.SupportService.CheckStatusReset.Response, Diamond.Common.Services.Messages.SupportService.CheckStatusReset.RequestData> CheckStatusReset()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.CheckStatusReset.Request, Diamond.Common.Services.Messages.SupportService.CheckStatusReset.Response, Diamond.Common.Services.Messages.SupportService.CheckStatusReset.RequestData>(proxy, proxy.CheckStatusReset);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.RequestData> PolicyPurgeByDate()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByDate.RequestData>(proxy, proxy.PolicyPurgeByDate);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.RequestData> PolicyPurgeByPercent()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeByPercent.RequestData>(proxy, proxy.PolicyPurgeByPercent);
            return s;
        }

        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.RequestData> PolicyPurgeWithExemption()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.Request, Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.Response, Diamond.Common.Services.Messages.SupportService.PolicyPurgeWithExemption.RequestData>(proxy, proxy.PolicyPurgeWithExemption);
            return s;
        }
        ///<summary> Reset Print </summary>///<param name="request">A wrapper class for ResetPrint Request Data containing the PolicyId, PolicyImageNum, and ReattachForms object.</param>///<returns>The wrapper response containing success indicator</returns>///<example></example>
        public static ServiceCall<Diamond.Common.Services.Messages.SupportService.ResetPrint.Request, Diamond.Common.Services.Messages.SupportService.ResetPrint.Response, Diamond.Common.Services.Messages.SupportService.ResetPrint.RequestData> ResetPrint()
        {
            var proxy = new global::Diamond.Common.Services.Proxies.SupportServiceProxy();
            var s = new ServiceCall<Diamond.Common.Services.Messages.SupportService.ResetPrint.Request, Diamond.Common.Services.Messages.SupportService.ResetPrint.Response, Diamond.Common.Services.Messages.SupportService.ResetPrint.RequestData>(proxy, proxy.ResetPrint);
            return s;
        }
    }
}

