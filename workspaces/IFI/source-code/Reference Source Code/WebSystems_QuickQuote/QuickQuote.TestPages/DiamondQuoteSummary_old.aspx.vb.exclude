Imports System.Data
Imports System.Xml
'added 12/20/2013
Imports QuickQuote.CommonObjects
Imports QuickQuote.CommonMethods

Partial Class DiamondQuoteSummary_old_new_website
    Inherits System.Web.UI.Page

    Dim quickQuote As QuickQuoteObject
    Dim QQxml As New QuickQuoteXML 'changed from 'New QuickQuoteXML' to 'QuickQuoteXML' 3/25/2014 for testing w/ QuickQuoteXML constructor (that logs test user into Diamond)
    Dim qqHelper As New QuickQuoteHelperClass

    Enum PrintType
        All = 1
        JustWorksheet = 2
    End Enum

    Protected Sub Page_PreInit(sender As Object, e As System.EventArgs) Handles Me.PreInit
        Me.MasterPageFile = ConfigurationManager.AppSettings("DiamondQuickQuoteMaster")
    End Sub
    Protected Sub Page_Load(sender As Object, e As System.EventArgs) Handles Me.Load
        If Page.IsPostBack = False Then
            Test() '10/14/2014 - added new call to Test Sub instead of having test code in Page_Load

            '--uncomment below section for normal page processing
            Me.QuoteErrorSection.Visible = False
            Me.QuoteSummarySection.Visible = False
            Me.lblQuoteErrors.Text = ""
            'Me.btnReturnToQuote.Enabled = False
            'Me.btnReturnToQuote.ToolTip = "No information found for LOB"
            'Me.lblReturnToQuoteLink.Text = "SavedQuotes.aspx"
            Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_SavedQuotes").ToString
            Me.btnReturnToQuote.Text = "Return to Saved Quotes"
            'Me.lblGoToPortalLink.Text = "https://www.ifmig.net/agentsonly/controlloader.aspx?QueryString=SavedQuotes"
            Me.lblGoToPortalLink.Text = ConfigurationManager.AppSettings("DiamondPortalSavedQuotesLink").ToString
            Me.btnGoToPortal.Text = "Go to Diamond Portal"
            Me.lblErrorQuoteNumber.Visible = False
            Me.lblErrorQuoteNumber.Text = ""
            Me.btnContinueToAppGap.Visible = False
            Me.lblQuoteMessages.Text = ""
            Me.QuoteMessagesSpacerRow.Visible = False
            Me.QuoteMessagesHeaderRow.Visible = False
            Me.QuoteMessagesValueRow.Visible = False
            Me.PrintHistoryRow.Visible = False
            Me.lblAppGapLink.Text = ""
            Me.btnContinueToAppGap.Text = "Continue to Application"
            Me.lblAppGapText.Text = ""
            Me.lblAppGapText.Visible = False

            Me.lblCreditsDebitsLink.Text = ConfigurationManager.AppSettings("QuickQuote_IRPM_Input").ToString
            Me.QuoteSuccessButtonsRow.Visible = False

            If Request.QueryString("QuoteId") IsNot Nothing AndAlso Request.QueryString("QuoteId").ToString <> "" AndAlso IsNumeric(Request.QueryString("QuoteId").ToString) = True Then
                GetQuoteFromDb(Request.QueryString("QuoteId").ToString)
            Else
                Me.QuoteErrorSection.Visible = True
                Me.lblQuoteErrors.Text = "A valid parameter for QuoteId was not sent thru the querystring."
            End If
        End If
    End Sub
    Private Sub HideVariableFields()
        'general
        Me.LegalEntityTypeRow.Visible = False 'WC
        Me.EmployersLiabilityRow.Visible = False 'WC
        Me.ExperienceModificationRow.Visible = False 'WC
        Me.OccLiabRow.Visible = False 'BOP
        Me.TenFireLiabRow.Visible = False 'BOP
        Me.PropDamLiabDeductRow.Visible = False 'BOP
        Me.BusMasterEnhRow.Visible = False 'BOP
        Me.BlanketRatingRow.Visible = False 'BOP

        'policy level
        Me.PolicyLevelCovOptionsSpacerRow.Visible = False 'BOP
        Me.PolicyLevelCovOptionsMainRow.Visible = False 'BOP
        Me.PolicyLevelCovOptionsQuotedPremRow.Visible = False 'BOP
        Me.AdditionalInsuredsRow.Visible = False 'BOP
        Me.EmpBenLiabRow.Visible = False 'BOP
        Me.ContractorsEquipInstallRow.Visible = False 'BOP
        Me.ContractorsEquipBlanketRow.Visible = False 'BOP
        Me.ContractorsEquipScheduledRow.Visible = False 'BOP
        Me.ContractorsEquipRentedRow.Visible = False 'BOP
        Me.ContractorsEmpToolsRow.Visible = False 'BOP
        Me.CrimeEmpDishonestyRow.Visible = False 'BOP
        Me.CrimeEmpDishonestyEmpNumRow.Visible = False 'BOP
        Me.CrimeEmpDishonestyLocNumRow.Visible = False 'BOP
        Me.CrimeEmpDishonestyLimitRow.Visible = False 'BOP
        Me.CrimeForgeryRow.Visible = False 'BOP
        Me.CrimeForgeryLimitRow.Visible = False 'BOP
        Me.EarthquakeRow.Visible = False 'BOP
        Me.HiredAutoRow.Visible = False 'BOP
        Me.NonOwnedAutoRow.Visible = False 'BOP

        'optional policy level
        Me.AdditionalOptionalCovsSpacerRow.Visible = False 'BOP
        Me.AdditionalOptionalCovsMainRow.Visible = False 'BOP
        Me.AdditionalOptionalCovsQuotedPremRow.Visible = False 'BOP
        Me.BarbProfLiabMainRow.Visible = False 'BOP
        Me.BarbProfLiabFullTimeEmpNumRow.Visible = False 'BOP
        Me.BarbProfLiabPartTimeEmpNumRow.Visible = False 'BOP
        Me.BeautProfLiabMainRow.Visible = False 'BOP
        Me.BeautProfLiabFullTimeEmpNumRow.Visible = False 'BOP
        Me.BeautProfLiabPartTimeEmpNumRow.Visible = False 'BOP
        Me.FuneralDirectProfLiabMainRow.Visible = False 'BOP
        Me.FuneralDirectProfLiabEmpNumRow.Visible = False 'BOP
        Me.PrintersProfLiabMainRow.Visible = False 'BOP
        Me.PrintersProfLiabLocNumRow.Visible = False 'BOP
        Me.SelfStorageFacilityMainRow.Visible = False 'BOP
        Me.SelfStorageFacilityLimitRow.Visible = False 'BOP
        Me.VetProfLiabMainRow.Visible = False 'BOP
        Me.VetProfLiabEmpNumRow.Visible = False 'BOP
        Me.OptAndHearingProfLiabMainRow.Visible = False 'BOP
        Me.OptAndHearingProfLiabEmpNumRow.Visible = False 'BOP

        'Named Individuals
        Me.NamedIndividualsSpacerRow.Visible = False 'WC
        Me.NamedIndividualsMainRow.Visible = False 'WC
        Me.NamedIndividualsIncOfSolePropMainRow.Visible = False 'WC
        Me.NamedIndividualsWaiverOfSubroMainRow.Visible = False 'WC
        Me.NamedIndividualsWaiverOfSubroWaiverNumRow.Visible = False 'WC
        Me.NamedIndividualsWaiverOfSubroWaiverAmtRow.Visible = False 'WC
        Me.NamedIndividualsExcOfAmishMainRow.Visible = False 'WC
        Me.NamedIndividualsExcOfSolePropMainRow.Visible = False 'WC

        'IRPM
        'made visible again 8/8/2012
        'Me.IrpmSpacerRow.Visible = False 'BOP
        'Me.IrpmMainRow.Visible = False 'BOP
        'Me.IrpmMgmtCoopRow.Visible = False 'BOP
        'Me.IrpmLocationRow.Visible = False 'BOP
        'Me.IrpmBuildingFeaturesRow.Visible = False 'BOP
        'Me.IrpmPremisesRow.Visible = False 'BOP
        'Me.IrpmEmployeesRow.Visible = False 'BOP
        'Me.IrpmProtectionRow.Visible = False 'BOP
        'Me.IrpmCatHazRow.Visible = False 'BOP
        'Me.IrpmMgmtExpRow.Visible = False 'BOP
    End Sub
    Private Sub ShowFieldsForEachLOB()
        If quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP Then
            'general
            Me.OccLiabRow.Visible = True
            Me.TenFireLiabRow.Visible = True
            Me.PropDamLiabDeductRow.Visible = True
            Me.BusMasterEnhRow.Visible = True
            Me.BlanketRatingRow.Visible = True

            'policy level
            Me.PolicyLevelCovOptionsSpacerRow.Visible = True
            Me.PolicyLevelCovOptionsMainRow.Visible = True
            Me.PolicyLevelCovOptionsQuotedPremRow.Visible = True
            Me.AdditionalInsuredsRow.Visible = True
            Me.EmpBenLiabRow.Visible = True
            Me.ContractorsEquipInstallRow.Visible = True
            Me.ContractorsEquipBlanketRow.Visible = True
            Me.ContractorsEquipScheduledRow.Visible = True
            Me.ContractorsEquipRentedRow.Visible = True
            Me.ContractorsEmpToolsRow.Visible = True
            Me.CrimeEmpDishonestyRow.Visible = True
            Me.CrimeEmpDishonestyEmpNumRow.Visible = True
            Me.CrimeEmpDishonestyLocNumRow.Visible = True
            Me.CrimeEmpDishonestyLimitRow.Visible = True
            Me.CrimeForgeryRow.Visible = True
            Me.CrimeForgeryLimitRow.Visible = True
            Me.EarthquakeRow.Visible = True
            Me.HiredAutoRow.Visible = True
            Me.NonOwnedAutoRow.Visible = True

            'optional policy level
            Me.AdditionalOptionalCovsSpacerRow.Visible = True
            Me.AdditionalOptionalCovsMainRow.Visible = True
            Me.AdditionalOptionalCovsQuotedPremRow.Visible = True
            Me.BarbProfLiabMainRow.Visible = True
            If quickQuote.HasBarbersProfessionalLiability = True Then
                Me.BarbProfLiabFullTimeEmpNumRow.Visible = True
                Me.BarbProfLiabPartTimeEmpNumRow.Visible = True
            End If
            Me.BeautProfLiabMainRow.Visible = True
            If quickQuote.HasBeauticiansProfessionalLiability = True Then
                Me.BeautProfLiabFullTimeEmpNumRow.Visible = True
                Me.BeautProfLiabPartTimeEmpNumRow.Visible = True
            End If
            Me.FuneralDirectProfLiabMainRow.Visible = True
            If quickQuote.HasFuneralDirectorsProfessionalLiability = True Then
                Me.FuneralDirectProfLiabEmpNumRow.Visible = True
            End If
            Me.PrintersProfLiabMainRow.Visible = True
            If quickQuote.HasPrintersProfessionalLiability = True Then
                Me.PrintersProfLiabLocNumRow.Visible = True
            End If
            Me.SelfStorageFacilityMainRow.Visible = True
            If quickQuote.HasSelfStorageFacility = True Then
                Me.SelfStorageFacilityLimitRow.Visible = True
            End If
            Me.VetProfLiabMainRow.Visible = True
            If quickQuote.HasVeterinariansProfessionalLiability = True Then
                Me.VetProfLiabEmpNumRow.Visible = True
            End If
            Me.OptAndHearingProfLiabMainRow.Visible = True
            If quickQuote.HasOpticalAndHearingAidProfessionalLiability = True Then
                Me.OptAndHearingProfLiabEmpNumRow.Visible = True
            End If
        ElseIf quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation Then
            'general
            Me.LegalEntityTypeRow.Visible = True
            Me.EmployersLiabilityRow.Visible = True
            Me.ExperienceModificationRow.Visible = True

            'Named Individuals
            Me.NamedIndividualsSpacerRow.Visible = True
            Me.NamedIndividualsMainRow.Visible = True
            Me.NamedIndividualsIncOfSolePropMainRow.Visible = True
            Me.NamedIndividualsWaiverOfSubroMainRow.Visible = True
            If quickQuote.HasWaiverOfSubrogation = True Then
                Me.NamedIndividualsWaiverOfSubroWaiverNumRow.Visible = True
                Me.NamedIndividualsWaiverOfSubroWaiverAmtRow.Visible = True
            End If
            Me.NamedIndividualsExcOfAmishMainRow.Visible = True
            Me.NamedIndividualsExcOfSolePropMainRow.Visible = True
        Else
            'no lob
        End If
    End Sub
    Private Sub LoadTestQuickQuote()
        quickQuote = New QuickQuoteObject
        quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)

        Dim l1 As New QuickQuoteLocation

        l1.Description = "Test Loc 1"
        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l1b1 As New QuickQuoteBuilding
        l1b1.Description = "Test Loc 1 Build 1"
        l1b1.PropertyDeductibleId = "22"
        Dim l1b2 As New QuickQuoteBuilding
        l1b2.Description = "Test Loc 1 Build 2"
        l1b2.PropertyDeductibleId = "22"
        l1.Buildings.Add(l1b1)
        l1.Buildings.Add(l1b2)

        Dim l2 As New QuickQuoteLocation
        l2.Description = "Test Loc 2"
        l2.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l2b1 As New QuickQuoteBuilding
        l2b1.Description = "Test Loc 2 Build 1"
        l2b1.PropertyDeductibleId = "22"
        Dim l2b2 As New QuickQuoteBuilding
        l2b2.Description = "Test Loc 2 Build 2"
        l2b2.PropertyDeductibleId = "22"
        l2.Buildings.Add(l2b1)
        l2.Buildings.Add(l2b2)

        quickQuote.Locations.Add(l1)
        quickQuote.Locations.Add(l2)

        LoadValuesFromquickQuote()

        Dim xmlDoc As XmlDocument
        QQxml.BuildXml(quickQuote, xmlDoc)
        'QQxml.OldBuildXml(quickQuote, xmlDoc)
        If xmlDoc IsNot Nothing Then
            xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test4\DonTest.xml")
        End If

    End Sub
    Private Sub LoadTestQuickQuote2()
        quickQuote = New QuickQuoteObject

        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP

        'test info for resubmitting QuoteNumber and/or Client (policy_id = 245246, policyimage_num = 1, quote = QBOP010512, client_id = 216844)
        'test info taken from DonDuplicationTest10_Results.xml
        'quickQuote.QuoteNumber = "QBOP010512"
        quickQuote.QuoteNumber = "QBOP010563" 'added 1 more AI (from 3 to 4); didn't work
        quickQuote.Client.ClientId = "216844"

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "7/1/2012"
        quickQuote.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        quickQuote.OccurrenceLiabilityLimitId = "34" '500,000
        quickQuote.TenantsFireLiabilityId = "10" '100,000
        'quickQuote.PropertyDamageLiabilityDeductibleId = "75" '2500
        'trying different value because ids appeared to be wrong before
        'quickQuote.PropertyDamageLiabilityDeductibleId = "9" '1000 (4=250, 8=500, 9=1000, 15=2500)'this didn't work so maybe they were already correct
        quickQuote.PropertyDamageLiabilityDeductibleId = "24" '1000 (21=250, 22=500, 24=1000, 75=2500)
        quickQuote.PropertyDamageLiabilityDeductibleOptionId = "1" 'Per Occurrence
        quickQuote.RiskGrade = "1" 'for this test, select something that will return this risk grade (Bakeries)
        quickQuote.RiskGradeLookupId = "74" 'added 11/5/2012 for testing
        quickQuote.HasBusinessMasterEnhancement = True
        quickQuote.AdditionalInsuredsCount = 4 'not working yet; working after I added Checkbox = true to coverage (setting up as Vendors for now)
        quickQuote.EmployeeBenefitsLiabilityText = "5" 'NumberOfEmployees
        quickQuote.ContractorsEquipmentInstallationLimitId = "15" '5,000 (added contractor stuff 6/27/2012)
        quickQuote.ContractorsToolsEquipmentBlanket = "1000"
        quickQuote.ContractorsToolsEquipmentScheduled = "1000"
        quickQuote.ContractorsToolsEquipmentRented = "1000" '(21005; maybe 21421)
        quickQuote.ContractorsEmployeeTools = "1000" '(21006; maybe 80225)
        quickQuote.CrimeEmpDisLimitId = "8" '25,000
        quickQuote.CrimeEmpDisEmployeeText = "5" 'NumberOfEmployees (not in example; added 6/27/2012)
        quickQuote.CrimeEmpDisLocationText = "2" 'NumberOfLocations (added 6/27/2012)
        quickQuote.CrimeForgeryLimitId = "8" '25,000
        quickQuote.HasEarthquake = True
        quickQuote.HasHiredAuto = True
        quickQuote.HasNonOwnedAuto = True
        'quickQuote.PropertyDeductibleId (80145)'not added until set on building

        'added 7/3/2012 (see QBOP010541 in prod patch for everything except self storage)
        quickQuote.HasBarbersProfessionalLiability = True
        quickQuote.BarbersProfessionalLiabilityFullTimeEmpNum = "2"
        quickQuote.BarbersProfessionalLiabilityPartTimeEmpNum = "2"

        quickQuote.HasBeauticiansProfessionalLiability = True
        quickQuote.BeauticiansProfessionalLiabilityFullTimeEmpNum = "1"
        quickQuote.BeauticiansProfessionalLiabilityPartTimeEmpNum = "1"

        quickQuote.HasFuneralDirectorsProfessionalLiability = True
        quickQuote.FuneralDirectorsProfessionalLiabilityEmpNum = "2"

        quickQuote.HasPrintersProfessionalLiability = True
        quickQuote.PrintersProfessionalLiabilityLocNum = "1"

        'self storage doesn't appear to be working; now returned in XML w/ Checkbox = true but different in Diamond (QBOP010542); previously always had limit shown but nothing now
        quickQuote.HasSelfStorageFacility = True
        'quickQuote.SelfStorageFacilityLocNum = "1"'removed 7/3/2012 since not available in UI
        'quickQuote.SelfStorageFacilityLimit = "1000" 'added 7/3/2012 since QuoteSummary requirements didn't have it
        quickQuote.SelfStorageFacilityLimit = "25000" '1000 limit resulted in negative premium; working now (QBOP010544)

        quickQuote.HasVeterinariansProfessionalLiability = True
        quickQuote.VeterinariansProfessionalLiabilityEmpNum = "2"

        quickQuote.HasOpticalAndHearingAidProfessionalLiability = True
        quickQuote.OpticalAndHearingAidProfessionalLiabilityEmpNum = "1"

        quickQuote.Client.Address.City = "Bloomington"
        quickQuote.Client.Address.County = "Monroe"
        quickQuote.Client.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Client.Address.HouseNum = "115"
        quickQuote.Client.Address.StreetName = "Main Street"
        quickQuote.Client.Address.Zip = "47401-0000"
        'quickQuote.Client.Address.territorycode = "0"

        quickQuote.Client.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Client.Name.FirstName = "Rating"
        quickQuote.Client.Name.LastName = "Farmers"
        quickQuote.Client.Name.MiddleName = "Indiana"
        quickQuote.Client.Name.SexId = "2"
        quickQuote.Client.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Client.Name.TypeId = "1" 'Personal

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Address.City = "Bloomington"
        quickQuote.Policyholder.Address.County = "Monroe"
        quickQuote.Policyholder.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Policyholder.Address.HouseNum = "115"
        quickQuote.Policyholder.Address.StreetName = "Main Street"
        quickQuote.Policyholder.Address.Zip = "47401-0000"
        'quickQuote.Policyholder.Address.territorycode = "0"

        quickQuote.Policyholder.Name.BirthDate = "10/12/1965"
        quickQuote.Policyholder.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Policyholder.Name.FirstName = "Rating"
        quickQuote.Policyholder.Name.LastName = "Farmers"
        quickQuote.Policyholder.Name.MiddleName = "Indiana"
        quickQuote.Policyholder.Name.SexId = "2"
        quickQuote.Policyholder.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Policyholder.Name.TypeId = "1" 'Personal

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.ProtectionClassId = "16" '05 (moved from building to location 6/27/2012; is actually added at building though)
        l1.NumberOfPools = "1"
        'l1.EquipmentBreakdownDeductibleId = "15" '5,000
        'trying different value because ids appeared to be wrong before
        l1.EquipmentBreakdownDeductibleId = "4" '250 (4=250, 8=500, 9=1000, 15=2500, 16=5000, 17=10000); correct now
        l1.MoneySecuritiesOnPremises = "20000"
        l1.MoneySecuritiesOffPremises = "20000"
        l1.OutdoorSignsLimit = "20000"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l1b1 As New QuickQuoteBuilding
        l1b1.Description = "Test Loc 1 Build 1"

        l1b1.PropertyDeductibleId = "24" '1000
        l1b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        'added more 7/5/2012
        l1b1.AnnualReceipts = "100000"
        l1b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        l1b1.EmployeePayroll = "60000"

        l1b1.ConstructionId = "7" 'Frame
        'l1b1.ProtectionClassId = "16" '05 (moved to location 6/27/2012; is actually added at building though)
        l1b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l1b1.HasSprinklered = True

        l1b1.Limit = "100000"
        l1b1.AutoIncreaseId = "2" '4%
        l1b1.IsBuildingValIncludedInBlanketRating = True
        l1b1.HasMineSubsidence = False
        l1b1.ValuationId = "2" 'Actual Cash Value
        l1b1.PersonalPropertyLimit = "100000"
        l1b1.IsValMethodIncludedInBlanketRating = True
        l1b1.ValuationMethodId = "2" 'Actual Cash Value
        l1b1.AccountsReceivableOnPremisesExcessLimit = "60000"
        l1b1.ValuablePapersOnPremisesExcessLimit = "30000"
        l1b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l1b1.HasOrdOrLawUndamagedPortion = True
        l1b1.OrdOrLawDemoCostLimit = "10000"
        l1b1.OrdOrLawIncreasedCostLimit = "30000"
        l1b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l1b1.HasSpoilage = True 'added spoilage to example 6/27/2012
        l1b1.SpoilageTotalLimit = "6000" '5000 is included so trying something other than 1000 7/5/2012; works correctly
        l1b1.SpoilagePropertyClassificationId = "1" 'Bakery Goods
        l1b1.IsSpoilageBreakdownOrContamination = True
        l1b1.IsSpoilagePowerOutage = True
        l1b1.IsSpoilageRefrigerationMaintenanceAgreement = True

        l1.Buildings.Add(l1b1)
        'Dim l1b2 As New QuickQuoteBuilding
        'l1b2.Description = "Test Loc 1 Build 2"
        'l1b2.PropertyDeductibleId = "22"
        'l1.Buildings.Add(l1b2)
        quickQuote.Locations.Add(l1)

        'Dim l2 As New QuickQuoteLocation
        'l2.Description = "Test Loc 2"
        'l2.Buildings = New Generic.List(Of QuickQuoteBuilding)
        'Dim l2b1 As New QuickQuoteBuilding
        'l2b1.Description = "Test Loc 2 Build 1"
        'l2b1.PropertyDeductibleId = "22"
        'l2.Buildings.Add(l2b1)
        'Dim l2b2 As New QuickQuoteBuilding
        'l2b2.Description = "Test Loc 2 Build 2"
        'l2b2.PropertyDeductibleId = "22"
        'l2.Buildings.Add(l2b2)
        'quickQuote.Locations.Add(l2)

        LoadValuesFromquickQuote()

        Dim xmlDoc As XmlDocument
        QQxml.BuildXml(quickQuote, xmlDoc)
        'QQxml.OldBuildXml(quickQuote, xmlDoc)
        If xmlDoc IsNot Nothing Then
            xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test2\DonDuplicationTest12_ResubmitQuoteNum4.1x.xml")
        End If

    End Sub
    Private Sub LoadTestQuickQuote3()
        Dim qq As New QuickQuoteObject

        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP

        'test info for resubmitting QuoteNumber and/or Client (policy_id = 245246, policyimage_num = 1, quote = QBOP010512, client_id = 216844)
        'test info taken from DonDuplicationTest10_Results.xml
        'qq.QuoteNumber = "QBOP010512"
        qq.Client.ClientId = "216844"

        'qq.QuoteNumber = "Test #"
        qq.QuoteDescription = "Test Desc"
        qq.EffectiveDate = "7/1/2012"
        qq.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.TenantsFireLiabilityId = "10" '100,000
        qq.PropertyDamageLiabilityDeductibleId = "24" '1000 (21=250, 22=500, 24=1000, 75=2500)
        qq.PropertyDamageLiabilityDeductibleOptionId = "1" 'Per Occurrence
        qq.RiskGrade = "1" 'for this test, select something that will return this risk grade (Bakeries)
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing
        qq.HasBusinessMasterEnhancement = True
        qq.AdditionalInsuredsCount = 3 'currently setting as Vendors
        qq.EmployeeBenefitsLiabilityText = "5" 'NumberOfEmployees
        qq.ContractorsEquipmentInstallationLimitId = "15" '5,000 (added contractor stuff 6/27/2012)
        qq.ContractorsToolsEquipmentBlanket = "1000"
        qq.ContractorsToolsEquipmentScheduled = "1000"
        qq.ContractorsToolsEquipmentRented = "1000" '(21005; maybe 21421)
        qq.ContractorsEmployeeTools = "1000" '(21006; maybe 80225)
        qq.CrimeEmpDisLimitId = "8" '25,000
        qq.CrimeEmpDisEmployeeText = "5" 'NumberOfEmployees (not in example; added 6/27/2012)
        qq.CrimeEmpDisLocationText = "2" 'NumberOfLocations (added 6/27/2012)
        qq.CrimeForgeryLimitId = "8" '25,000
        qq.HasEarthquake = True
        qq.HasHiredAuto = True
        qq.HasNonOwnedAuto = True

        'added 7/3/2012 (see QBOP010541 in prod patch for everything except self storage)
        qq.HasBarbersProfessionalLiability = True
        qq.BarbersProfessionalLiabilityFullTimeEmpNum = "2"
        qq.BarbersProfessionalLiabilityPartTimeEmpNum = "2"

        qq.HasBeauticiansProfessionalLiability = True
        qq.BeauticiansProfessionalLiabilityFullTimeEmpNum = "1"
        qq.BeauticiansProfessionalLiabilityPartTimeEmpNum = "1"

        qq.HasFuneralDirectorsProfessionalLiability = True
        qq.FuneralDirectorsProfessionalLiabilityEmpNum = "2"

        qq.HasPrintersProfessionalLiability = True
        qq.PrintersProfessionalLiabilityLocNum = "1"

        qq.HasSelfStorageFacility = True
        qq.SelfStorageFacilityLimit = "25000" '1000 limit resulted in negative premium; working now (QBOP010544)

        qq.HasVeterinariansProfessionalLiability = True
        qq.VeterinariansProfessionalLiabilityEmpNum = "2"

        qq.HasOpticalAndHearingAidProfessionalLiability = True
        qq.OpticalAndHearingAidProfessionalLiabilityEmpNum = "1"

        qq.Client.Address.City = "Bloomington"
        qq.Client.Address.County = "Monroe"
        qq.Client.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        qq.Client.Address.HouseNum = "115"
        qq.Client.Address.StreetName = "Main Street"
        qq.Client.Address.Zip = "47401-0000"

        qq.Client.Name.DisplayName = "Mrs Rating Indiana Farmers"
        qq.Client.Name.FirstName = "Rating"
        qq.Client.Name.LastName = "Farmers"
        qq.Client.Name.MiddleName = "Indiana"
        qq.Client.Name.SexId = "2"
        qq.Client.Name.SortName = "Farmers Rating Indiana Mrs"
        qq.Client.Name.TypeId = "1" 'Personal

        qq.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        qq.Client.Phones.Add(cp1)

        qq.Policyholder.Address.City = "Bloomington"
        qq.Policyholder.Address.County = "Monroe"
        qq.Policyholder.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        qq.Policyholder.Address.HouseNum = "115"
        qq.Policyholder.Address.StreetName = "Main Street"
        qq.Policyholder.Address.Zip = "47401-0000"

        qq.Policyholder.Name.BirthDate = "10/12/1965"
        qq.Policyholder.Name.DisplayName = "Mrs Rating Indiana Farmers"
        qq.Policyholder.Name.FirstName = "Rating"
        qq.Policyholder.Name.LastName = "Farmers"
        qq.Policyholder.Name.MiddleName = "Indiana"
        qq.Policyholder.Name.SexId = "2"
        qq.Policyholder.Name.SortName = "Farmers Rating Indiana Mrs"
        qq.Policyholder.Name.TypeId = "1" 'Personal

        qq.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        qq.Policyholder.Phones.Add(pp1)

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.ProtectionClassId = "16" '05 (moved from building to location 6/27/2012; is actually added at building though)
        l1.NumberOfPools = "1"
        l1.EquipmentBreakdownDeductibleId = "4" '250 (4=250, 8=500, 9=1000, 15=2500, 16=5000, 17=10000); correct now
        l1.MoneySecuritiesOnPremises = "20000"
        l1.MoneySecuritiesOffPremises = "20000"
        l1.OutdoorSignsLimit = "20000"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l1b1 As New QuickQuoteBuilding
        l1b1.Description = "Test Loc 1 Build 1"

        l1b1.PropertyDeductibleId = "24" '1000
        l1b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        'added more 7/5/2012
        l1b1.AnnualReceipts = "100000"
        l1b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        l1b1.EmployeePayroll = "60000"

        l1b1.ConstructionId = "7" 'Frame
        l1b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l1b1.HasSprinklered = True

        l1b1.Limit = "100000"
        l1b1.AutoIncreaseId = "2" '4%
        l1b1.IsBuildingValIncludedInBlanketRating = True
        l1b1.HasMineSubsidence = False
        l1b1.ValuationId = "2" 'Actual Cash Value
        l1b1.PersonalPropertyLimit = "100000"
        l1b1.IsValMethodIncludedInBlanketRating = True
        l1b1.ValuationMethodId = "2" 'Actual Cash Value
        l1b1.AccountsReceivableOnPremisesExcessLimit = "60000"
        l1b1.ValuablePapersOnPremisesExcessLimit = "30000"
        l1b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l1b1.HasOrdOrLawUndamagedPortion = True
        l1b1.OrdOrLawDemoCostLimit = "10000"
        l1b1.OrdOrLawIncreasedCostLimit = "30000"
        l1b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l1b1.HasSpoilage = True 'added spoilage to example 6/27/2012
        l1b1.SpoilageTotalLimit = "6000" '5000 is included so trying something other than 1000 7/5/2012; works correctly
        l1b1.SpoilagePropertyClassificationId = "1" 'Bakery Goods
        l1b1.IsSpoilageBreakdownOrContamination = True
        l1b1.IsSpoilagePowerOutage = True
        l1b1.IsSpoilageRefrigerationMaintenanceAgreement = True

        l1.Buildings.Add(l1b1)
        qq.Locations.Add(l1)

        Dim sendXml As String = ""
        Dim returnXml As String = ""
        Dim errorMsg As String = ""

        'qqHelper.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        QQxml.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        'QQxml.RateQuickQuote(qq, sendXml, returnXml, errorMsg)'to not populate a QuickQuoteObject for the return xml

        'LoadValuesFromQuickQuote()

        If quickQuote IsNot Nothing Then
            If quickQuote.PolicyBridgingURL <> "" Then
                Me.lblGoToPortalLink.Text = quickQuote.PolicyBridgingURL
                Me.btnGoToPortal.Text = "Finish Quote in Diamond Portal"
            End If
            If quickQuote.QuoteNumber <> "" Then
                Me.lblErrorQuoteNumber.Text = " (" & quickQuote.QuoteNumber & ")"
                Me.lblErrorQuoteNumber.Visible = True
            End If
            If quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                Select Case quickQuote.LobType
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                        Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                        Me.lblReturnToQuoteLink.Text = "BOP Pages/BOPQuoteInputPage.aspx?QuoteId=" ' & quoteId
                        'Me.btnContinueToAppGap.Visible = True'*set to True if there's a link
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto

                End Select
            End If
            If quickQuote.Success = True Then
                Me.QuoteSummarySection.Visible = True
                LoadValuesFromQuickQuote()
                If ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString) = "WORKSHEET" Then
                    Me.btnGoToPrintHistory.Text = "View Diamond Worksheet"
                    GetDiamondPrintHistory(quickQuote.PolicyId, PrintType.JustWorksheet)
                Else
                    Me.btnGoToPrintHistory.Text = "View Diamond Print"
                    GetDiamondPrintHistory(quickQuote.PolicyId)
                End If
                If quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                    Me.QuoteMessagesSpacerRow.Visible = True
                    Me.QuoteMessagesHeaderRow.Visible = True
                    Me.QuoteMessagesValueRow.Visible = True
                    For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                        Me.lblQuoteMessages.Text = qqHelper.appendText(Me.lblQuoteMessages.Text, vi.Message, "<br />")
                    Next
                End If
            ElseIf quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                Me.QuoteErrorSection.Visible = True
                For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                    Me.lblQuoteErrors.Text = qqHelper.appendText(Me.lblQuoteErrors.Text, vi.Message, "<br />")
                Next
            Else
                Me.QuoteErrorSection.Visible = True
                Me.lblQuoteErrors.Text = "The quote failed, but no validation items were found."
            End If

            quickQuote.Dispose()
        Else
            Me.QuoteErrorSection.Visible = True
            Me.lblQuoteErrors.Text = "The response xml from the database could not be parsed."
        End If



    End Sub
    Private Sub LoadTestQuickQuote4_old()
        quickQuote = New QuickQuoteObject

        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

        quickQuote.Client.ClientId = "216844"

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "7/1/2012"

        quickQuote.EmployersLiabilityId = "311" '100/500/100
        quickQuote.ExperienceModificationFactor = "1"

        'quickQuote.AnniversaryRatingEffectiveDate = "6/30/2012" 'added 7/17/2012'must be prior to effective date but not more than 1 year (rating success but doesn't set in Diamond)
        ''quickQuote.AnniversaryRatingEffectiveDate = "7/1/2012" 'gets set but rating fails
        'quickQuote.TransactionEffectiveDate = "7/10/2012"
        'quickQuote.GuaranteedRatePeriodEffectiveDate = "6/28/2012" 'added 7/17/2012
        quickQuote.RatingEffectiveDate = "12/1/2011"
        quickQuote.ModificationProductionDate = "11/1/2011"
        quickQuote.AnniversaryRatingEffectiveDate = "12/1/2011"

        'added 7/16/2012
        quickQuote.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
        quickQuote.HasWaiverOfSubrogation = True
        quickQuote.WaiverOfSubrogationNumberOfWaivers = "3"
        quickQuote.WaiverOfSubrogationPremiumId = "3" '50
        quickQuote.HasExclusionOfAmishWorkers = True
        quickQuote.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True

        quickQuote.Client.Address.City = "Bloomington"
        quickQuote.Client.Address.County = "Monroe"
        quickQuote.Client.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Client.Address.HouseNum = "115"
        quickQuote.Client.Address.StreetName = "Main Street"
        quickQuote.Client.Address.Zip = "47401-0000"

        quickQuote.Client.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Client.Name.FirstName = "Rating"
        quickQuote.Client.Name.LastName = "Farmers"
        quickQuote.Client.Name.MiddleName = "Indiana"
        quickQuote.Client.Name.SexId = "2"
        quickQuote.Client.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Client.Name.TypeId = "1" 'Personal

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Address.City = "Bloomington"
        quickQuote.Policyholder.Address.County = "Monroe"
        quickQuote.Policyholder.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Policyholder.Address.HouseNum = "115"
        quickQuote.Policyholder.Address.StreetName = "Main Street"
        quickQuote.Policyholder.Address.Zip = "47401-0000"

        quickQuote.Policyholder.Name.BirthDate = "10/12/1965"
        quickQuote.Policyholder.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Policyholder.Name.FirstName = "Rating"
        quickQuote.Policyholder.Name.LastName = "Farmers"
        quickQuote.Policyholder.Name.MiddleName = "Indiana"
        quickQuote.Policyholder.Name.SexId = "2"
        quickQuote.Policyholder.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Policyholder.Name.TypeId = "1" 'Personal

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        Dim c1 As New QuickQuoteClassification
        c1.ClassificationTypeId = "450"
        c1.Description = "Abrasive paper or cloth preparation"
        c1.NumberOfEmployees = "2"
        c1.Payroll = "30000"
        l1.Classifications.Add(c1)
        Dim c2 As New QuickQuoteClassification
        c2.ClassificationTypeId = "592"
        c2.Description = "Brandy distillery"
        c2.NumberOfEmployees = "3"
        c2.Payroll = "45000"
        l1.Classifications.Add(c2)

        'added loc name 7/10/2012
        'l1.Name.DisplayName = "Mrs Rating Indiana Farmers"
        'l1.Name.FirstName = "Rating"
        'l1.Name.LastName = "Farmers"
        'l1.Name.MiddleName = "Indiana"
        'l1.Name.SexId = "2"
        'l1.Name.SortName = "Farmers Rating Indiana Mrs"
        'l1.Name.TypeId = "1" 'Personal
        l1.Name.CommercialDBAname = "Test Commercial Name1"
        l1.Name.CommercialIRSname = "Test Commercial Name2"
        l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        l1.Name.TypeId = "2" 'Commercial

        quickQuote.Locations.Add(l1)

        LoadValuesFromQuickQuote()

        Dim xmlDoc As XmlDocument
        QQxml.BuildXml(quickQuote, xmlDoc)
        'QQxml.OldBuildXml(quickQuote, xmlDoc)
        If xmlDoc IsNot Nothing Then
            xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test2\WCTest6_WithInclusionsExclusionsAndAnniversaryDates6WithAnniversaryCredit.xml")
        End If

        Dim sendXml As String = ""
        Dim returnXml As String = ""
        Dim errorMsg As String = ""
        Dim ratedQuickQuote As QuickQuoteObject

        'QQxml.RateQuickQuote(quickQuote, sendXml, ratedQuickQuote, returnXml, errorMsg)
        ''QQxml.RateQuickQuote(quickQuote, sendXml, returnXml, errorMsg)
        'If ratedQuickQuote IsNot Nothing Then

        'End If

    End Sub
    Private Sub LoadTestQuickQuote4()
        quickQuote = New QuickQuoteObject

        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

        quickQuote.Client.ClientId = "217045" 'client record added 7/17/2012 in patch (for policy QWCP010637)

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "7/1/2012"

        quickQuote.EmployersLiabilityId = "311" '100/500/100
        quickQuote.ExperienceModificationFactor = "1.100"

        quickQuote.RatingEffectiveDate = "12/1/2011"
        quickQuote.ModificationProductionDate = "11/1/2011" '"12/1/2011"
        'quickQuote.AnniversaryRatingEffectiveDate = "12/1/2011"

        'added 7/16/2012
        quickQuote.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
        quickQuote.HasWaiverOfSubrogation = True
        quickQuote.WaiverOfSubrogationNumberOfWaivers = "3"
        quickQuote.WaiverOfSubrogationPremiumId = "3" '50
        quickQuote.HasExclusionOfAmishWorkers = True
        quickQuote.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True

        quickQuote.Client.Address.City = "Indianapolis"
        quickQuote.Client.Address.County = "Marion"
        'quickQuote.Client.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        quickQuote.Client.Address.HouseNum = "123"
        quickQuote.Client.Address.StreetName = "Test Street"
        quickQuote.Client.Address.Zip = "46227-0000"

        quickQuote.Client.Name.CommercialDBAname = "Don Test Name1"
        quickQuote.Client.Name.CommercialIRSname = "Don Test Name2"
        quickQuote.Client.Name.DoingBusinessAsName = "Don Test DBA"
        quickQuote.Client.Name.TypeId = "2" 'Commercial
        quickQuote.Client.Name.EntityTypeId = "3" 'Corporation

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(317)123-4567"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Address.City = "Indianapolis"
        quickQuote.Policyholder.Address.County = "Marion"
        'quickQuote.Policyholder.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        quickQuote.Policyholder.Address.HouseNum = "123"
        quickQuote.Policyholder.Address.StreetName = "Test Street"
        quickQuote.Policyholder.Address.Zip = "46227-0000"

        quickQuote.Policyholder.Name.CommercialDBAname = "Don Test Name1"
        quickQuote.Policyholder.Name.CommercialIRSname = "Don Test Name2"
        quickQuote.Policyholder.Name.DoingBusinessAsName = "Don Test DBA"
        quickQuote.Policyholder.Name.TypeId = "2" 'Commercial
        quickQuote.Policyholder.Name.EntityTypeId = "3" 'Corporation

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(317)123-4567"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        Dim c1 As New QuickQuoteClassification
        c1.ClassificationTypeId = "450"
        c1.Description = "Abrasive paper or cloth preparation"
        c1.NumberOfEmployees = "2"
        c1.Payroll = "30000"
        l1.Classifications.Add(c1)
        Dim c2 As New QuickQuoteClassification
        c2.ClassificationTypeId = "592"
        c2.Description = "Brandy distillery"
        c2.NumberOfEmployees = "3"
        c2.Payroll = "45000"
        l1.Classifications.Add(c2)

        l1.Name.CommercialDBAname = "Test Commercial Name1"
        l1.Name.CommercialIRSname = "Test Commercial Name2"
        l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        l1.Name.TypeId = "2" 'Commercial

        quickQuote.Locations.Add(l1)

        LoadValuesFromQuickQuote()

        Dim xmlDoc As XmlDocument
        QQxml.BuildXml(quickQuote, xmlDoc)
        'QQxml.OldBuildXml(quickQuote, xmlDoc)
        If xmlDoc IsNot Nothing Then
            xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test2\WCTest7_WithExpModAndEntityType6.1.xml")
        End If

        Dim sendXml As String = ""
        Dim returnXml As String = ""
        Dim errorMsg As String = ""
        Dim ratedQuickQuote As QuickQuoteObject

        'QQxml.RateQuickQuote(quickQuote, sendXml, ratedQuickQuote, returnXml, errorMsg)
        ''QQxml.RateQuickQuote(quickQuote, sendXml, returnXml, errorMsg)
        'If ratedQuickQuote IsNot Nothing Then

        'End If

    End Sub
    Private Sub LoadTestQuickQuote4_1() 'for QA (7/23/2012)
        Dim qq As New QuickQuoteObject

        qq.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

        qq.Client.ClientId = "217045" 'client record added 7/17/2012 in patch (for policy QWCP010637)

        'qq.QuoteNumber = "Test #"
        qq.QuoteDescription = "Test Desc"
        qq.EffectiveDate = "7/1/2012"

        qq.EmployersLiabilityId = "311" '100/500/100
        qq.ExperienceModificationFactor = "1.100"

        qq.RatingEffectiveDate = "12/1/2011"
        qq.ModificationProductionDate = "11/1/2011" '"12/1/2011"
        qq.AnniversaryRatingEffectiveDate = "12/1/2011"

        'added 7/16/2012
        qq.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
        qq.HasWaiverOfSubrogation = True
        qq.WaiverOfSubrogationNumberOfWaivers = "3"
        qq.WaiverOfSubrogationPremiumId = "3" '50
        qq.HasExclusionOfAmishWorkers = True
        qq.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True

        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.County = "Marion"
        'qq.Client.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.Zip = "46227-0000"

        qq.Client.Name.CommercialDBAname = "Don Test Name1"
        qq.Client.Name.CommercialIRSname = "Don Test Name2"
        qq.Client.Name.DoingBusinessAsName = "Don Test DBA"
        qq.Client.Name.TypeId = "2" 'Commercial
        qq.Client.Name.EntityTypeId = "3" 'Corporation

        qq.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(317)123-4567"
        qq.Client.Phones.Add(cp1)

        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.County = "Marion"
        'qq.Policyholder.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.Zip = "46227-0000"

        qq.Policyholder.Name.CommercialDBAname = "Don Test Name1"
        qq.Policyholder.Name.CommercialIRSname = "Don Test Name2"
        qq.Policyholder.Name.DoingBusinessAsName = "Don Test DBA"
        qq.Policyholder.Name.TypeId = "2" 'Commercial
        qq.Policyholder.Name.EntityTypeId = "3" 'Corporation

        qq.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(317)123-4567"
        qq.Policyholder.Phones.Add(pp1)

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        Dim c1 As New QuickQuoteClassification
        c1.ClassificationTypeId = "450"
        c1.Description = "Abrasive paper or cloth preparation"
        c1.NumberOfEmployees = "2"
        c1.Payroll = "30000"
        l1.Classifications.Add(c1)
        Dim c2 As New QuickQuoteClassification
        c2.ClassificationTypeId = "592"
        c2.Description = "Brandy distillery"
        c2.NumberOfEmployees = "3"
        c2.Payroll = "45000"
        l1.Classifications.Add(c2)

        l1.Name.CommercialDBAname = "Test Commercial Name1"
        l1.Name.CommercialIRSname = "Test Commercial Name2"
        l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        l1.Name.TypeId = "2" 'Commercial

        qq.Locations.Add(l1)

        Dim sendXml As String = ""
        Dim returnXml As String = ""
        Dim errorMsg As String = ""

        'qqHelper.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        QQxml.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        'QQxml.RateQuickQuote(qq, sendXml, returnXml, errorMsg)

        'LoadValuesFromQuickQuote()

        If quickQuote IsNot Nothing Then
            If quickQuote.PolicyBridgingURL <> "" Then
                Me.lblGoToPortalLink.Text = quickQuote.PolicyBridgingURL
                Me.btnGoToPortal.Text = "Finish Quote in Diamond Portal"
            End If
            If quickQuote.QuoteNumber <> "" Then
                Me.lblErrorQuoteNumber.Text = " (" & quickQuote.QuoteNumber & ")"
                Me.lblErrorQuoteNumber.Visible = True
            End If
            If quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                Select Case quickQuote.LobType
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                        Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                        Me.lblReturnToQuoteLink.Text = "BOP Pages/BOPQuoteInputPage.aspx?QuoteId=" ' & quoteId
                        'Me.btnContinueToAppGap.Visible = True'*set to True if there's a link
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto

                End Select
            End If
            If quickQuote.Success = True Then
                Me.QuoteSummarySection.Visible = True
                LoadValuesFromQuickQuote()
                If ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString) = "WORKSHEET" Then
                    Me.btnGoToPrintHistory.Text = "View Diamond Worksheet"
                    GetDiamondPrintHistory(quickQuote.PolicyId, PrintType.JustWorksheet)
                Else
                    Me.btnGoToPrintHistory.Text = "View Diamond Print"
                    GetDiamondPrintHistory(quickQuote.PolicyId)
                End If
                If quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                    Me.QuoteMessagesSpacerRow.Visible = True
                    Me.QuoteMessagesHeaderRow.Visible = True
                    Me.QuoteMessagesValueRow.Visible = True
                    For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                        Me.lblQuoteMessages.Text = qqHelper.appendText(Me.lblQuoteMessages.Text, vi.Message, "<br />")
                    Next
                End If
            ElseIf quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                Me.QuoteErrorSection.Visible = True
                For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                    Me.lblQuoteErrors.Text = qqHelper.appendText(Me.lblQuoteErrors.Text, vi.Message, "<br />")
                Next
            Else
                Me.QuoteErrorSection.Visible = True
                Me.lblQuoteErrors.Text = "The quote failed, but no validation items were found."
            End If

            quickQuote.Dispose()
        Else
            Me.QuoteErrorSection.Visible = True
            Me.lblQuoteErrors.Text = "The response xml from the database could not be parsed."
        End If



    End Sub
    Private Sub LoadTestQuickQuote5() 'for QA (7/10/2012)
        Dim qq As New QuickQuoteObject

        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP

        'qq.QuoteNumber = "QBOP010404" 'now trying to re-use # returned thru comparative rater
        'qq.QuoteNumber = "QBOP010408"
        'qq.QuoteNumber = "QBOP010410"
        qq.Client.ClientId = "218747" 'now trying to re-use # returned thru comparative rater

        'qq.QuoteNumber = "Test #"
        qq.QuoteDescription = "Test Desc"
        qq.EffectiveDate = "7/1/2012"
        qq.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.TenantsFireLiabilityId = "10" '100,000
        qq.PropertyDamageLiabilityDeductibleId = "24" '1000 (21=250, 22=500, 24=1000, 75=2500)
        'qq.PropertyDamageLiabilityDeductibleId = "75" '2500 (21=250, 22=500, 24=1000, 75=2500)
        qq.PropertyDamageLiabilityDeductibleOptionId = "1" 'Per Occurrence
        qq.RiskGrade = "1" 'for this test, select something that will return this risk grade (Bakeries)
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing
        qq.HasBusinessMasterEnhancement = True
        'qq.AdditionalInsuredsCount = 3 'currently setting as Vendors
        'qq.AdditionalInsuredsCount = 4 'now trying to change from 3 to 4 using same quote #
        qq.AdditionalInsuredsCount = 2
        qq.EmployeeBenefitsLiabilityText = "5" 'NumberOfEmployees
        qq.ContractorsEquipmentInstallationLimitId = "15" '5,000 (added contractor stuff 6/27/2012)
        qq.ContractorsToolsEquipmentBlanket = "1000"
        qq.ContractorsToolsEquipmentScheduled = "1000"
        qq.ContractorsToolsEquipmentRented = "1000" '(21005; maybe 21421)
        qq.ContractorsEmployeeTools = "1000" '(21006; maybe 80225)
        qq.CrimeEmpDisLimitId = "8" '25,000
        qq.CrimeEmpDisEmployeeText = "5" 'NumberOfEmployees (not in example; added 6/27/2012)
        qq.CrimeEmpDisLocationText = "2" 'NumberOfLocations (added 6/27/2012)
        qq.CrimeForgeryLimitId = "8" '25,000
        qq.HasEarthquake = True
        qq.HasHiredAuto = True
        qq.HasNonOwnedAuto = True

        'added 7/3/2012 (see QBOP010541 in prod patch for everything except self storage)
        qq.HasBarbersProfessionalLiability = True
        qq.BarbersProfessionalLiabilityFullTimeEmpNum = "2"
        qq.BarbersProfessionalLiabilityPartTimeEmpNum = "2"

        qq.HasBeauticiansProfessionalLiability = True
        qq.BeauticiansProfessionalLiabilityFullTimeEmpNum = "1"
        qq.BeauticiansProfessionalLiabilityPartTimeEmpNum = "1"

        qq.HasFuneralDirectorsProfessionalLiability = True
        qq.FuneralDirectorsProfessionalLiabilityEmpNum = "2"

        qq.HasPrintersProfessionalLiability = True
        qq.PrintersProfessionalLiabilityLocNum = "1"

        qq.HasSelfStorageFacility = True
        qq.SelfStorageFacilityLimit = "25000" '1000 limit resulted in negative premium; working now (QBOP010544)

        qq.HasVeterinariansProfessionalLiability = True
        qq.VeterinariansProfessionalLiabilityEmpNum = "2"

        qq.HasOpticalAndHearingAidProfessionalLiability = True
        qq.OpticalAndHearingAidProfessionalLiabilityEmpNum = "1"

        qq.Client.Address.City = "Bloomington"
        qq.Client.Address.County = "Monroe"
        qq.Client.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        qq.Client.Address.HouseNum = "115"
        qq.Client.Address.StreetName = "Main Street"
        qq.Client.Address.Zip = "47401-0000"

        qq.Client.Name.DisplayName = "Mrs Rating Indiana Farmers"
        qq.Client.Name.FirstName = "Rating"
        qq.Client.Name.LastName = "Farmers"
        qq.Client.Name.MiddleName = "Indiana"
        qq.Client.Name.SexId = "2"
        qq.Client.Name.SortName = "Farmers Rating Indiana Mrs"
        qq.Client.Name.TypeId = "1" 'Personal

        qq.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        qq.Client.Phones.Add(cp1)

        qq.Policyholder.Address.City = "Bloomington"
        qq.Policyholder.Address.County = "Monroe"
        qq.Policyholder.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        qq.Policyholder.Address.HouseNum = "115"
        qq.Policyholder.Address.StreetName = "Main Street"
        qq.Policyholder.Address.Zip = "47401-0000"

        qq.Policyholder.Name.BirthDate = "10/12/1965"
        qq.Policyholder.Name.DisplayName = "Mrs Rating Indiana Farmers"
        qq.Policyholder.Name.FirstName = "Rating"
        qq.Policyholder.Name.LastName = "Farmers"
        qq.Policyholder.Name.MiddleName = "Indiana"
        qq.Policyholder.Name.SexId = "2"
        qq.Policyholder.Name.SortName = "Farmers Rating Indiana Mrs"
        qq.Policyholder.Name.TypeId = "1" 'Personal

        qq.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        qq.Policyholder.Phones.Add(pp1)

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.ProtectionClassId = "16" '05 (moved from building to location 6/27/2012; is actually added at building though)
        l1.NumberOfPools = "1"
        l1.EquipmentBreakdownDeductibleId = "4" '250 (4=250, 8=500, 9=1000, 15=2500, 16=5000, 17=10000); correct now
        l1.MoneySecuritiesOnPremises = "20000"
        l1.MoneySecuritiesOffPremises = "20000"
        l1.OutdoorSignsLimit = "20000"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l1b1 As New QuickQuoteBuilding
        l1b1.Description = "Test Loc 1 Build 1"

        l1b1.PropertyDeductibleId = "24" '1000
        l1b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        'added more 7/5/2012
        l1b1.AnnualReceipts = "100000"
        l1b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        l1b1.EmployeePayroll = "60000"

        l1b1.ConstructionId = "7" 'Frame
        l1b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l1b1.HasSprinklered = True

        l1b1.Limit = "100000"
        l1b1.AutoIncreaseId = "2" '4%
        l1b1.IsBuildingValIncludedInBlanketRating = True
        l1b1.HasMineSubsidence = False
        l1b1.ValuationId = "2" 'Actual Cash Value
        l1b1.PersonalPropertyLimit = "100000"
        l1b1.IsValMethodIncludedInBlanketRating = True
        l1b1.ValuationMethodId = "2" 'Actual Cash Value
        l1b1.AccountsReceivableOnPremisesExcessLimit = "60000"
        l1b1.ValuablePapersOnPremisesExcessLimit = "30000"
        l1b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l1b1.HasOrdOrLawUndamagedPortion = True
        l1b1.OrdOrLawDemoCostLimit = "10000"
        l1b1.OrdOrLawIncreasedCostLimit = "30000"
        l1b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l1b1.HasSpoilage = True 'added spoilage to example 6/27/2012
        l1b1.SpoilageTotalLimit = "6000" '5000 is included so trying something other than 1000 7/5/2012; works correctly
        l1b1.SpoilagePropertyClassificationId = "1" 'Bakery Goods
        l1b1.IsSpoilageBreakdownOrContamination = True
        l1b1.IsSpoilagePowerOutage = True
        l1b1.IsSpoilageRefrigerationMaintenanceAgreement = True

        l1.Buildings.Add(l1b1)
        qq.Locations.Add(l1)

        Dim sendXml As String = ""
        Dim returnXml As String = ""
        Dim errorMsg As String = ""

        'qqHelper.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        QQxml.RateQuickQuote(qq, sendXml, quickQuote, returnXml, errorMsg)
        'QQxml.RateQuickQuote(qq, sendXml, returnXml, errorMsg)

        'LoadValuesFromQuickQuote()

        If quickQuote IsNot Nothing Then
            If quickQuote.PolicyBridgingURL <> "" Then
                Me.lblGoToPortalLink.Text = quickQuote.PolicyBridgingURL
                Me.btnGoToPortal.Text = "Finish Quote in Diamond Portal"
            End If
            If quickQuote.QuoteNumber <> "" Then
                Me.lblErrorQuoteNumber.Text = " (" & quickQuote.QuoteNumber & ")"
                Me.lblErrorQuoteNumber.Visible = True
            End If
            If quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                Select Case quickQuote.LobType
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                        Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                        Me.lblReturnToQuoteLink.Text = "BOP Pages/BOPQuoteInputPage.aspx?QuoteId=" ' & quoteId
                        'Me.btnContinueToAppGap.Visible = True'*set to True if there's a link
                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage

                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto

                End Select
            End If
            If quickQuote.Success = True Then
                Me.QuoteSummarySection.Visible = True
                LoadValuesFromQuickQuote()
                If ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString) = "WORKSHEET" Then
                    Me.btnGoToPrintHistory.Text = "View Diamond Worksheet"
                    GetDiamondPrintHistory(quickQuote.PolicyId, PrintType.JustWorksheet)
                Else
                    Me.btnGoToPrintHistory.Text = "View Diamond Print"
                    GetDiamondPrintHistory(quickQuote.PolicyId)
                End If
                If quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                    Me.QuoteMessagesSpacerRow.Visible = True
                    Me.QuoteMessagesHeaderRow.Visible = True
                    Me.QuoteMessagesValueRow.Visible = True
                    For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                        Me.lblQuoteMessages.Text = qqHelper.appendText(Me.lblQuoteMessages.Text, vi.Message, "<br />")
                    Next
                End If
            ElseIf quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                Me.QuoteErrorSection.Visible = True
                For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                    Me.lblQuoteErrors.Text = qqHelper.appendText(Me.lblQuoteErrors.Text, vi.Message, "<br />")
                Next
            Else
                Me.QuoteErrorSection.Visible = True
                Me.lblQuoteErrors.Text = "The quote failed, but no validation items were found."
            End If

            quickQuote.Dispose()
        Else
            Me.QuoteErrorSection.Visible = True
            Me.lblQuoteErrors.Text = "The response xml from the database could not be parsed."
        End If



    End Sub
    Private Sub LoadTestQuickQuote6()
        quickQuote = New QuickQuoteObject

        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

        quickQuote.Client.ClientId = "216844"

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "7/1/2012"

        'testing producer stuff 7/19/2012 for App Gap (not working)
        quickQuote.AgencyProducerId = "6946" 'for only producer tied to 3000 code (agency_id 441)
        quickQuote.AgencyProducerCode = "00" 'for only producer tied to 3000 code (agency_id 441)

        quickQuote.ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
        quickQuote.OccurrenceLiabilityLimitId = "34" '500,000
        quickQuote.GeneralAggregateLimitId = "178" '600,000
        quickQuote.ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
        quickQuote.PersonalAndAdvertisingInjuryLimitId = "34" '500,000
        quickQuote.DamageToPremisesRentedLimitId = "10" '100,000
        quickQuote.MedicalExpensesLimitId = "15" '5,000

        quickQuote.HasBusinessMasterEnhancement = True

        quickQuote.AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012

        quickQuote.EmployeeBenefitsLiabilityText = "5" 'number of employees
        quickQuote.EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
        quickQuote.HasHiredAuto = True
        quickQuote.HasNonOwnedAuto = True

        'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
        'fixed 7/18/2012
        quickQuote.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
        'quickQuote.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
        quickQuote.LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
        quickQuote.LiquorSales = "30000.00"

        quickQuote.ProfessionalLiabilityCemetaryNumberOfBurials = "100"
        quickQuote.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
        quickQuote.ProfessionalLiabilityPastoralNumberOfClergy = "5"

        quickQuote.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim gl As New QuickQuoteGLClassification
        gl.ClassCode = "50017"
        gl.ClassDescription = "Abrasives or Abrasive Products Mfg."
        gl.PremiumExposure = "10,000"
        gl.PremiumBase = "Gross Sales"
        gl.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        quickQuote.GLClassifications.Add(gl)
        Dim gl2 As New QuickQuoteGLClassification
        gl2.ClassCode = "51741"
        gl2.ClassDescription = "Candle Mfg"
        gl2.PremiumExposure = "20,000"
        gl2.PremiumBase = "Gross Sales"
        gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        quickQuote.GLClassifications.Add(gl2)

        quickQuote.Client.Address.City = "Indianapolis"
        quickQuote.Client.Address.County = "Marion"
        quickQuote.Client.Address.HouseNum = "123"
        quickQuote.Client.Address.StreetName = "Test Street"
        quickQuote.Client.Address.Zip = "46227-0000"

        quickQuote.Client.Name.FirstName = "Don"
        quickQuote.Client.Name.LastName = "Test"
        quickQuote.Client.Name.SexId = "1"
        quickQuote.Client.Name.TypeId = "1" 'Personal

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(317)111-2222"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Address.City = "Indianapolis"
        quickQuote.Policyholder.Address.County = "Marion"
        quickQuote.Policyholder.Address.HouseNum = "123"
        quickQuote.Policyholder.Address.StreetName = "Test Street"
        quickQuote.Policyholder.Address.Zip = "46227-0000"

        quickQuote.Policyholder.Name.BirthDate = "1/1/1982"
        quickQuote.Policyholder.Name.FirstName = "Don"
        quickQuote.Policyholder.Name.LastName = "Test"
        quickQuote.Policyholder.Name.SexId = "1"
        quickQuote.Policyholder.Name.TypeId = "1" 'Personal

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(317)111-2222"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim l1gl As New QuickQuoteGLClassification
        l1gl.ClassCode = "96611"
        l1gl.ClassDescription = "Interior Decorators"
        l1gl.PremiumExposure = "5,000"
        l1gl.PremiumBase = "Payroll"
        l1gl.PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl)
        Dim l1gl2 As New QuickQuoteGLClassification
        l1gl2.ClassCode = "57997"
        l1gl2.ClassDescription = "Photo Finishing Labs"
        l1gl2.PremiumExposure = "30,000"
        l1gl2.PremiumBase = "Gross Sales, Products/Complete"
        l1gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl2)

        'l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        'Dim c1 As New QuickQuoteClassification
        'c1.ClassificationTypeId = "450"
        'c1.Description = "Abrasive paper or cloth preparation"
        'c1.NumberOfEmployees = "2"
        'c1.Payroll = "30000"
        'l1.Classifications.Add(c1)
        'Dim c2 As New QuickQuoteClassification
        'c2.ClassificationTypeId = "592"
        'c2.Description = "Brandy distillery"
        'c2.NumberOfEmployees = "3"
        'c2.Payroll = "45000"
        'l1.Classifications.Add(c2)

        'l1.Name.CommercialDBAname = "Test Commercial Name1"
        'l1.Name.CommercialIRSname = "Test Commercial Name2"
        'l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        'l1.Name.TypeId = "2" 'Commercial

        quickQuote.Locations.Add(l1)

        'testing 8/1/2012
        Dim quoteId As String = ""
        Dim errorMsg As String = ""

        'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, quoteId, errorMsg)
        'If errorMsg = "" Then
        '    quickQuote = Nothing
        '    QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, errorMsg)
        '    If errorMsg = "" Then
        '        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, quoteId, errorMsg)
        '        If errorMsg = "" Then
        '            quickQuote = Nothing
        '            QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, errorMsg)
        '        End If
        '    End If
        'End If

        QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, quoteId, errorMsg)
        If errorMsg = "" Then

        End If

        'LoadValuesFromQuickQuote()

        'Dim xmlDoc As XmlDocument
        'QQxml.BuildXml(quickQuote, xmlDoc)
        ''QQxml.OldBuildXml(quickQuote, xmlDoc)
        'If xmlDoc IsNot Nothing Then
        '    xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test2\GLTest8_GLClasses5WithPremBaseAndOtherCovsAndProducer2.xml")
        'End If

    End Sub
    Private Sub LoadTestData()
        'agencyId = ResponseData/Image/Agency/AgencyId
        'agencyCode = ResponseData/Image/Agency/Code
        'portal URL = ResponseData/Image/PolicyBridgingUrl

        'general info
        Me.lblQuoteNumber.Text = "QBOP012345" 'ResponseData/Image/Policy/CurrentPolicy or ResponseData/Image/PolicyNumber or ResponseData/Image/Quote
        Me.lblQuoteDescription.Text = "Description Entered Through Quote Generator"
        Me.lblState.Text = "IN" 'can probably default to IN
        Me.lblEffectiveDate.Text = "05/10/2012" 'ResponseData/Image/EffectiveDate/DateTime (formatted like 2012-06-01T00:00:00)
        Me.lblTotalQuotedPremium.Text = "$15,000" 'ResponseData/Image/FullTermPremium
        Me.lblOccLiabilityLimit.Text = "300,000" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 70017; CoverageLimitId will map back to limit text (33=300,000; 34=500,000; 56=1,000,000)
        Me.lblTenFireLiability.Text = "100,000" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 80144; CoverageLimitId will map back to limit text (9=50,000; 10=100,000; 55=250,000; 266=500,000; 56=1,000,000)
        Me.lblTenFireLiabilityQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblPropDamLiabilityDeduct.Text = "250" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 80146; CoverageLimitId will map back to limit text (0=N/A; 21=250; 22=500; 24=1000; 75=2500)
        Me.lblPropDamLiabilityDeductPerClaimOrOccur.Text = "Per Occurrence" 'either at ResponseData/Image/LOB/PolicyLevel/DeductiblePerTypeId; will map back to text (0-N/A; 1=Per Occurrence; 2=Per Claim); node also found at ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnBuildings/BarnBuilding/Coverages/Coverage/CoverageDetail/DeductiblePerTypeId
        Me.lblBusMasterEnhancement.Text = "Selected" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 286; Checkbox will be true if selected
        Me.lblBusMasterEnhancementQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblBlanketRating.Text = "Combined Building and Personal Property" 'maybe ResponseData/Image/LOB/PolicyLevel/BlanketRating (probably BlanketRatingOptionTypeId node); should map back to text (0=N/A; 1=Combined Building and Personal Property; 2=Building Only; 3=Personal Property Only)
        Me.lblBlanketRatingQuotedPremium.Text = "250" 'wasn't in BlanketRating node

        'policy level coverage options - ResponseData/Image/LOB/PolicyLevel
        Me.lblAddInsureds.Text = "5" 'maybe ResponseData/Image/LOB/PolicyLevel/AdditionalInterests or Coverage w/ CoverageCodeID = 21021
        Me.lblAddInsuredsQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblEmpBenLiability.Text = "10 Employees" 'maybe ResponseData/Image/LOB/PolicyLevel/EmployeesFullTime, EmployeesPartTime1To40Days, EmployeesPartTime41To179Days or Coverage w/ CoverageCodeID = 185 (ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/CoverageDetail/NumberOfEmployees)
        Me.lblEmpBenLiabilityQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblContractEquipInstallLimit.Text = "300,000" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeId = 21004; probably need ManualLimitAmount since field is textbox instead of drop-down w/ value for CoverageLimitId
        Me.lblContractEquipInstallLimitQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblContractEquipBlanket.Text = "20,000" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeId = 21007; probably need ManualLimitAmount since field is textbox instead of drop-down w/ value for CoverageLimitId
        Me.lblContractEquipBlanketQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblContractEquipScheduled.Text = "10,000" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeId = 21008; probably need ManualLimitAmount since field is textbox instead of drop-down w/ value for CoverageLimitId
        Me.lblContractEquipScheduledQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblContractEquipRented.Text = "10,000" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeId = 21421 (Rented From; or 21422 for Rented To); probably need ManualLimitAmount since field is textbox instead of drop-down w/ value for CoverageLimitId
        Me.lblContractEquipRentedQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblContractEquipEmp.Text = "5,000" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeId = 80225 or 21006 (same dscr); probably need ManualLimitAmount since field is textbox instead of drop-down w/ value for CoverageLimitId
        Me.lblContractEquipEmpQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblCrimeEmp.Text = "10 Employees" 'employee dishonesty; ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 21009; (ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/CoverageDetail/NumberOfEmployees)
        Me.lblCrimeLoc.Text = "2 Locations" 'employee dishonesty; ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/CoverageDetail/NumberOfLocations
        Me.lblCrimeLimit.Text = "500,000" 'employee dishonesty; CoverageLimitId will map back to limit text (15=5,000; 7=10,000; 8=25,000; 9=50,000; 10=100,000)
        Me.lblCrimeLimitQuotedPremium.Text = "250" 'employee dishonesty; 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblForgeLimit.Text = "10,000" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 21010 (Forgery and Alterations); ; CoverageLimitId will map back to limit text (15=5,000; 7=10,000; 8=25,000; 9=50,000; 10=100,000)
        Me.lblForgeLimitQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblEarthquake.Text = "Selected" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 309; Checkbox will be true if selected
        Me.lblEarthquakeQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblHiredAuto.Text = "Not Selected" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 21029; Checkbox will be true if selected
        Me.lblHiredAutoQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost
        Me.lblNonOwnedAuto.Text = "Not Selected" 'check for ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage w/ CoverageCodeID = 21030; Checkbox will be true if selected
        Me.lblNonOwnedAutoQuotedPremium.Text = "250" 'ResponseData/Image/LOB/PolicyLevel/Coverages/Coverage/AnnualPremium or FullTermPremium or WrittenPremium or Total or OriginalCost

        Dim dt As New DataTable
        'location info (can have multiple) - ResponseData/Image/LOB/RiskLevel/Locations/Location
        dt.Columns.Add("LocIndex", System.Type.GetType("System.String"))
        dt.Columns.Add("LocDescription", System.Type.GetType("System.String"))
        dt.Columns.Add("LocName", System.Type.GetType("System.String"))
        dt.Columns.Add("LocHouseNum", System.Type.GetType("System.String"))
        dt.Columns.Add("LocStreet", System.Type.GetType("System.String"))
        dt.Columns.Add("LocPoBox", System.Type.GetType("System.String"))
        dt.Columns.Add("LocCity", System.Type.GetType("System.String"))
        dt.Columns.Add("LocState", System.Type.GetType("System.String"))
        dt.Columns.Add("LocZip", System.Type.GetType("System.String"))
        dt.Columns.Add("LocCounty", System.Type.GetType("System.String"))
        dt.Columns.Add("LocProtClass", System.Type.GetType("System.String"))
        dt.Columns.Add("LocNumOfPools", System.Type.GetType("System.String"))

        'optional location coverages
        dt.Columns.Add("EquipBreakDeduct", System.Type.GetType("System.String"))
        dt.Columns.Add("EquipBreakDeductQuotedPremium", System.Type.GetType("System.String"))
        dt.Columns.Add("MoneyOnPrem", System.Type.GetType("System.String"))
        dt.Columns.Add("MoneyOffPrem", System.Type.GetType("System.String"))
        dt.Columns.Add("MoneyOnOffPremQuotedPremium", System.Type.GetType("System.String"))
        dt.Columns.Add("OutdoorSigns", System.Type.GetType("System.String"))
        dt.Columns.Add("OutdoorSignsQuotedPremium", System.Type.GetType("System.String"))

        Dim newRow As DataRow = dt.NewRow

        newRow.Item("LocIndex") = "test"
        newRow.Item("LocDescription") = "Location # 1"
        newRow.Item("LocName") = "Loc 1 Name"
        newRow.Item("LocHouseNum") = "1223"
        newRow.Item("LocStreet") = "Any Street"
        newRow.Item("LocPoBox") = "N/A"
        newRow.Item("LocCity") = "Any Town"
        newRow.Item("LocState") = "IN"
        newRow.Item("LocZip") = "46000"
        newRow.Item("LocCounty") = "Adams"
        newRow.Item("LocProtClass") = "10"
        newRow.Item("LocNumOfPools") = "0"

        newRow.Item("EquipBreakDeduct") = "250"
        newRow.Item("EquipBreakDeductQuotedPremium") = "250"
        newRow.Item("MoneyOnPrem") = "20,000"
        newRow.Item("MoneyOffPrem") = "20,000"
        newRow.Item("MoneyOnOffPremQuotedPremium") = "250"
        newRow.Item("OutdoorSigns") = "10,000"
        newRow.Item("OutdoorSignsQuotedPremium") = "250"
        dt.Rows.Add(newRow)


        Me.rptLocations.DataSource = dt
        Me.rptLocations.DataBind()

        ''location info (can have multiple) - ResponseData/Image/LOB/RiskLevel/Locations/Location
        'Me.lblLocDescription.Text = "Location # 1"
        'Me.lblLocHouseNum.Text = "1223" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/HouseNumber
        'Me.lblLocStreet.Text = "Any Street" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/StreetName
        'Me.lblLocCity.Text = "Any Town" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/City
        'Me.lblLocState.Text = "IN" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/StateId (16 = IN)
        'Me.lblLocZip.Text = "46000" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/Zip
        'Me.lblLocCounty.Text = "Adams" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Address/County
        'Me.lblLocProtClass.Text = "10"
        'Me.lblLocNumOfPools.Text = "0" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Coverage w/ CoverageCodeId = 21059; NumberOfSwimmingPools

        ''optional location coverages
        'Me.lblEquipBreakDeduct.Text = "250" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Coverage w/ CoverageCodeId = 21042; DeductibleId maps to text (21=250; 22=500; 11=1,000; 134=2,500; 15=5,000; 288=10,000)
        'Me.lblEquipBreakDeductQuotedPremium.Text = "250"
        'Me.lblMoneyOnPrem.Text = "20,000" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Coverage w/ CoverageCodeId = 21040; ManualLimitAmount
        'Me.lblMoneyOffPrem.Text = "20,000" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Coverage w/ CoverageCodeId = 21041; ManualLimitAmount
        'Me.lblMoneyOnOffPremQuotedPremium.Text = "250"
        'Me.lblOutdoorSigns.Text = "10,000" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/Coverage w/ CoverageCodeId = 149; ManualLimitAmount
        'Me.lblOutdoorSignsQuotedPremium.Text = "250"

        ''building information (can have multiple per location) - ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding
        'Me.lblBuildingDescription.Text = "Building #1 and Location #1"
        'Me.lblBuildingProgram.Text = "Apartment" 'SetBuildingClassificationType (use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Classifications/Classification/ClassificationTypeId)
        'Me.lblBuildingClassification.Text = "Apart - < 4 families - Merc/Office - Lessors Risk - Incl. 3/4 family &" 'SetBuildingClassificationType (use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Classifications/Classification/ClassificationTypeId)
        'Me.lblBuildingClassCode.Text = "65141" 'SetBuildingClassificationType (use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Classifications/Classification/ClassificationTypeId)
        'Me.lblBuildingOccupancy.Text = "Non-Owner Occupied Bldg/Lessor's" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/OccupancyCodeId; maps to text (16=Non-Owner Occupied Bldg / Lessor's; 17=Owner Occupied Bldg 75% or Less / Lessor's; 18=Owner Occupied Bldg 76% or More / Occupant; 19=Tenant / Occupant)
        'Me.lblBuildingConstruction.Text = "Frame" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/FarmConstructionTypeId; maps to text (7=Frame; 12=Jointed Masonry; 13=Non-Combustible; 14=Masonry Non-Combustible; 15=Modified Fire Resistive; 16=Fire Resistive)
        'Me.lblBuildingAutoIncrease.Text = "4%" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 165; CoverageDetail/AutomaticIncreasePercentTypeId; maps to text (1=2; 2=4; 3=6; 4=8; 5=10; 6=12; 7=14; 8=16)
        'Me.lblBuildingPropDeduct.Text = "$250" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 80145; CoverageLimitId maps to text (21=250; 22=500; 24=1000; 75=2500); this may not be correct since xml is currently adding it at policy level
        'Me.lblBuildingLimit.Text = "100000" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 165; ManualLimitAmount
        'Me.lblBuildingLimitQuotedPremium.Text = "250"
        'Me.lblBuildingValuation.Text = "Replacement Cost" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 165; CoverageDetail/ValuationMethodTypeId maps to text (1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation)
        'Me.lblBuildingIncludedInBlanket.Text = "Not Selected" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 165; CoverageDetail/IsIncludedInBlanketRating (true or false)
        'Me.lblBuildingMineSubsidence.Text = "Selected" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 165; CoverageDetail/IsMineSubsidence (true or false)
        'Me.lblBuildingMineSubsidenceQuotedPremium.Text = "250"
        'Me.lblBuildingSprinklered.Text = "Selected" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Sprinklered (true or false)
        'Me.lblPersPropLimit.Text = "100000" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 21037; ManualLimitAmount
        'Me.lblPersPropLimitQuotedPremium.Text = "250"
        'Me.lblBuildingValuationMethod.Text = "Replacement Cost" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 21037; CoverageDetail/ValuationMethodTypeId maps to text (1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation); only 1 and 2 are shown in drop-down
        'Me.lblBuildingIncludedInBlanket2.Text = "Selected" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 21037; CoverageDetail/IsIncludedInBlanketRating (true or false)

        ''optional location coverages (building)
        'Me.lblAcctsRecOnPrem.Text = "60000" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 150; ManualLimitAmount for AccountsReceivableTotalLimit
        'Me.lblAcctsRecQuotedPremium.Text = "250"
        'Me.lblAcctsRecOffPrem.Text = "25000"
        'Me.lblValPapersOnPrem.Text = "25000" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 151; ManualLimitAmount for ValuablePapersTotalLimit
        'Me.lblValPapersQuotedPremium.Text = "250"
        'Me.lblValPapersOffPrem.Text = "10000"
        'Me.lblCondoCommUnitOwners.Text = "25000" 'use ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 21038 (CoverageDetail/IsCondoCommercialUnitOwnersCoverage should be true); CoverageLimitId maps to text (11=1,000; 15=5,000; 7=10,000; 48=15,000; 49=20,000; 8=25,000)
        'Me.lblCondoCommUnitOwnersQuotedPremium.Text = "250"
        'Me.lblOrdOrLaw.Text = "Selected"
        'Me.lblOrdOrLawCov1.Text = "Not Selected" 'loss to the undamaged portion; ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 173; Checkbox will be true or false
        'Me.lblOrdOrLawCov1QuotedPremium.Text = "?"
        'Me.lblOrdOrLawCov2.Text = "50000" 'demolition cost; ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 161; ManualLimitAmount
        'Me.lblOrdOrLawCov2QuotedPremium.Text = "250"
        'Me.lblOrdOrLawCov3.Text = "50000" 'increased cost of construction; ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 167; ManualLimitAmount
        'Me.lblOrdOrLawCov3QuotedPremium.Text = "250"
        'Me.lblOrdOrLawCov4.Text = "100000" 'demo and increased cost combined; ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 21045; ManualLimitAmount
        'Me.lblOrdOrLawCov4QuotedPremium.Text = "250"
        'Me.lblSpoilage.Text = "Not Selected" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066
        'Me.lblSpoilageQuotedPremium.Text = "?"
        'Me.lblSpoilagePropClass.Text = "?" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066; CoverageDetail/PropertyClassificationTypeId maps to text (1=Bakery Goods; 2=Cheese Goods; 3=Convenience Food Stores; 4=Dairy Products, excluding Ice Cream; 5=Dairy Products, including Ice Cream; 6=Delicatessens; 7=Florists; 8=Fruits and Vegetables; 9=Grocery Stores; 10=Meat and Poultry Markets; 11=Other; 12=Pharmaceuticals; 13=Restaurants (limited cooking only); 14=Seafood; 15=Supermarkets)
        'Me.lblSpoilageTotLimit.Text = "?" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066; ManualLimitAmount
        'Me.lblSpoilageRefrig.Text = "?" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066; CoverageDetail/IsRefrigerationMaintenanceAgreement will be true or false
        'Me.lblSpoilageBreakdown.Text = "?" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066; CoverageDetail/IsBreakdownOrContamination will be true or false
        'Me.lblSpoilagePowerOutage.Text = "?" 'ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding/Coverages/Coverage w/ CoverageCodeID = 70066; CoverageDetail/IsPowerOutage will be true or false

        'additional optional coverages
        Me.lblBarbProfLiab.Text = "Not Selected"
        Me.lblBarbProfLiabQuotedPremium.Text = "250"
        Me.lblBarbProfLiabFullEmpNum.Text = "?"
        Me.lblBarbProfLiabPartEmpNum.Text = "?"
        Me.lblBeautProfLiab.Text = "Not Selected"
        Me.lblBeautProfLiabQuotedPremium.Text = "250"
        Me.lblBeautProfLiabFullEmpNum.Text = "?"
        Me.lblBeautProfLiabPartEmpNum.Text = "?"
        Me.lblFunDirProfLiab.Text = "Not Selected"
        Me.lblFunDirProfLiabQuotedPremium.Text = "250"
        Me.lblFunDirProfLiabEmpNum.Text = "?"
        Me.lblPrintProfLiab.Text = "Not Selected"
        Me.lblPrintProfLiabQuotedPremium.Text = "250"
        Me.lblPrintProfLiabLocNum.Text = "?"
        Me.lblSelfStoreFac.Text = "Not Selected"
        Me.lblSelfStoreFacQuotedPremium.Text = "250"
        'Me.lblSelfStoreFacLocNum.Text = "?"
        Me.lblSelfStoreFacLimit.Text = "?"
        Me.lblVetProfLiab.Text = "Not Selected"
        Me.lblVetProfLiabQuotedPremium.Text = "250"
        Me.lblVetProfLiabEmpNum.Text = "?"
        Me.lblOptAndHearProfLiab.Text = "Not Selected"
        Me.lblOptAndHearProfLiabQuotedPremium.Text = "250"
        Me.lblOptAndHearProfLiabEmpNum.Text = "?"

        'IRPM
        Me.lblIRPM_MgmtCoop.Text = "0.90"
        Me.lblIRPM_MgmtCoopDesc.Text = "Pleasant and polite"
        Me.lblIRPM_Loc.Text = "0.00"
        Me.lblIRPM_LocDesc.Text = "?"
        Me.lblIRPM_BuildFeat.Text = "0.90"
        Me.lblIRPM_BuildFeatDesc.Text = "Sleek and Modern"
        Me.lblIRPM_Premises.Text = "1.10"
        Me.lblIRPM_PremisesDesc.Text = "Trash in places - weeds in sidewalk"
        Me.lblIRPM_Emp.Text = "1.10"
        Me.lblIRPM_EmpDesc.Text = "Rude and Abrasive"
        Me.lblIRPM_Prot.Text = "0.00"
        Me.lblIRPM_ProtDesc.Text = "?"
        Me.lblIRPM_CatHaz.Text = "0.95"
        Me.lblIRPM_CatHazDesc.Text = "Storm Cellar nearby"
        Me.lblIRPM_MgmtExp.Text = "0.00"
        Me.lblIRPM_MgmtExpDesc.Text = "?"
    End Sub
    Private Sub BOP_TestSave()
        quickQuote = New QuickQuoteObject

        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP

        'quickQuote.AgencyCode = "6000-3000" '*defaulting to test agency for now
        'quickQuote.AgencyId = "441" '*defaulting to test agency for now

        'quickQuote.QuoteNumber = "QBOP010563" 'added 1 more AI (from 3 to 4); didn't work
        'quickQuote.Client.ClientId = "216844"
        'quickQuote.QuoteNumber = "QBOP010704"
        'quickQuote.Client.ClientId = "217436"

        quickQuote.QuoteDescription = "Test Desc"
        'quickQuote.EffectiveDate = "7/1/2012"
        'updated 5/31/2017
        quickQuote.EffectiveDate = Date.Today.ToShortDateString
        quickQuote.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        quickQuote.OccurrenceLiabilityLimitId = "34" '500,000
        quickQuote.TenantsFireLiabilityId = "10" '100,000
        quickQuote.PropertyDamageLiabilityDeductibleId = "24" '1000 (21=250, 22=500, 24=1000, 75=2500)
        quickQuote.PropertyDamageLiabilityDeductibleOptionId = "1" 'Per Occurrence
        quickQuote.RiskGrade = "1" 'for this test, select something that will return this risk grade (Bakeries)
        quickQuote.RiskGradeLookupId = "74" 'added 11/5/2012 for testing
        quickQuote.HasBusinessMasterEnhancement = True
        quickQuote.AdditionalInsuredsCount = 4 'not working yet; working after I added Checkbox = true to coverage (setting up as Vendors for now)
        quickQuote.EmployeeBenefitsLiabilityText = "5" 'NumberOfEmployees
        quickQuote.ContractorsEquipmentInstallationLimitId = "15" '5,000 (added contractor stuff 6/27/2012)
        quickQuote.ContractorsToolsEquipmentBlanket = "1000"
        quickQuote.ContractorsToolsEquipmentScheduled = "1000"
        quickQuote.ContractorsToolsEquipmentRented = "1000" '(21005; maybe 21421)
        quickQuote.ContractorsEmployeeTools = "1000" '(21006; maybe 80225)
        quickQuote.CrimeEmpDisLimitId = "8" '25,000
        quickQuote.CrimeEmpDisEmployeeText = "5" 'NumberOfEmployees (not in example; added 6/27/2012)
        quickQuote.CrimeEmpDisLocationText = "2" 'NumberOfLocations (added 6/27/2012)
        quickQuote.CrimeForgeryLimitId = "8" '25,000
        quickQuote.HasEarthquake = True
        quickQuote.HasHiredAuto = True
        quickQuote.HasNonOwnedAuto = True

        quickQuote.HasBarbersProfessionalLiability = True
        quickQuote.BarbersProfessionalLiabilityFullTimeEmpNum = "2"
        quickQuote.BarbersProfessionalLiabilityPartTimeEmpNum = "2"

        quickQuote.HasBeauticiansProfessionalLiability = True
        quickQuote.BeauticiansProfessionalLiabilityFullTimeEmpNum = "1"
        quickQuote.BeauticiansProfessionalLiabilityPartTimeEmpNum = "1"

        quickQuote.HasFuneralDirectorsProfessionalLiability = True
        quickQuote.FuneralDirectorsProfessionalLiabilityEmpNum = "2"

        quickQuote.HasPrintersProfessionalLiability = True
        quickQuote.PrintersProfessionalLiabilityLocNum = "1"

        quickQuote.HasSelfStorageFacility = True
        quickQuote.SelfStorageFacilityLimit = "25000" '1000 limit resulted in negative premium; working now (QBOP010544)

        quickQuote.HasVeterinariansProfessionalLiability = True
        quickQuote.VeterinariansProfessionalLiabilityEmpNum = "2"

        quickQuote.HasOpticalAndHearingAidProfessionalLiability = True
        quickQuote.OpticalAndHearingAidProfessionalLiabilityEmpNum = "1"

        quickQuote.Client.Address.City = "Bloomington"
        quickQuote.Client.Address.County = "Monroe"
        quickQuote.Client.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Client.Address.HouseNum = "115"
        quickQuote.Client.Address.StreetName = "Main Street"
        quickQuote.Client.Address.Zip = "47401-0000"

        quickQuote.Client.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Client.Name.FirstName = "Rating"
        quickQuote.Client.Name.LastName = "Farmers"
        quickQuote.Client.Name.MiddleName = "Indiana"
        quickQuote.Client.Name.SexId = "2"
        quickQuote.Client.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Client.Name.TypeId = "1" 'Personal

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Address.City = "Bloomington"
        quickQuote.Policyholder.Address.County = "Monroe"
        quickQuote.Policyholder.Address.DisplayAddress = "115 Main Street, Bllomington IN 47401-0000"
        quickQuote.Policyholder.Address.HouseNum = "115"
        quickQuote.Policyholder.Address.StreetName = "Main Street"
        quickQuote.Policyholder.Address.Zip = "47401-0000"

        quickQuote.Policyholder.Name.BirthDate = "10/12/1965"
        quickQuote.Policyholder.Name.DisplayName = "Mrs Rating Indiana Farmers"
        quickQuote.Policyholder.Name.FirstName = "Rating"
        quickQuote.Policyholder.Name.LastName = "Farmers"
        quickQuote.Policyholder.Name.MiddleName = "Indiana"
        quickQuote.Policyholder.Name.SexId = "2"
        quickQuote.Policyholder.Name.SortName = "Farmers Rating Indiana Mrs"
        quickQuote.Policyholder.Name.TypeId = "1" 'Personal

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.DisplayAddress = "123 Test Street Indy, Indiana"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.ProtectionClassId = "16" '05 (moved from building to location 6/27/2012; is actually added at building though)
        l1.NumberOfPools = "1"
        l1.EquipmentBreakdownDeductibleId = "4" '250 (4=250, 8=500, 9=1000, 15=2500, 16=5000, 17=10000); correct now
        l1.MoneySecuritiesOnPremises = "20000"
        l1.MoneySecuritiesOffPremises = "20000"
        l1.OutdoorSignsLimit = "20000"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l1b1 As New QuickQuoteBuilding
        l1b1.Description = "Test Loc 1 Build 1"

        l1b1.PropertyDeductibleId = "24" '1000
        l1b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        l1b1.AnnualReceipts = "100000"
        l1b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        l1b1.EmployeePayroll = "60000"

        l1b1.ConstructionId = "7" 'Frame
        l1b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l1b1.HasSprinklered = True

        l1b1.Limit = "100000"
        l1b1.AutoIncreaseId = "2" '4%
        l1b1.IsBuildingValIncludedInBlanketRating = True
        l1b1.HasMineSubsidence = False
        l1b1.ValuationId = "2" 'Actual Cash Value
        l1b1.PersonalPropertyLimit = "100000"
        l1b1.IsValMethodIncludedInBlanketRating = True
        l1b1.ValuationMethodId = "2" 'Actual Cash Value
        l1b1.AccountsReceivableOnPremisesExcessLimit = "60000"
        l1b1.ValuablePapersOnPremisesExcessLimit = "30000"
        l1b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l1b1.HasOrdOrLawUndamagedPortion = True
        l1b1.OrdOrLawDemoCostLimit = "10000"
        l1b1.OrdOrLawIncreasedCostLimit = "30000"
        l1b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l1b1.HasSpoilage = True 'added spoilage to example 6/27/2012
        l1b1.SpoilageTotalLimit = "6000" '5000 is included so trying something other than 1000 7/5/2012; works correctly
        l1b1.SpoilagePropertyClassificationId = "1" 'Bakery Goods
        l1b1.IsSpoilageBreakdownOrContamination = True
        l1b1.IsSpoilagePowerOutage = True
        l1b1.IsSpoilageRefrigerationMaintenanceAgreement = True

        qqHelper.CheckBuildingClassifications(l1b1) 'added 5/31/2017

        l1.Buildings.Add(l1b1)
        quickQuote.Locations.Add(l1)

        Dim quoteId As String = "" 'test w/ and w/o value to make sure update works
        Dim errorMsg As String = ""
        'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, quoteId, errorMsg)
        QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, quoteId, errorMsg)
        If errorMsg <> "" Then
            errorMsg = errorMsg
        Else
            quoteId = quoteId

            quickQuote = Nothing
            'QQxml.GetQuote(quoteId, quickQuote, errorMsg)
            QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, errorMsg)
            If errorMsg <> "" Then
                errorMsg = errorMsg
            Else
                quickQuote = quickQuote
                QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, quoteId, errorMsg)
                If errorMsg <> "" Then
                    errorMsg = errorMsg
                Else
                    quickQuote = quickQuote
                End If
            End If
        End If
    End Sub
    Private Sub BOP_TestGets()
        Dim errMsg As String = ""
        Dim strXml As String = ""

        'QQxml.GetQuote("21", quickQuote, errMsg)
        'If errMsg <> "" Then

        'End If
        'quickQuote.AdditionalInsuredsManualCharge = "100"
        'quickQuote.AgencyCode = "6000-3000"
        'quickQuote.AgencyId = "441"
        'quickQuote.TransactionUsersId = "3033"
        'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, "21", errMsg)
        'If errMsg <> "" Then
        '    errMsg = errMsg
        'End If

        'quickQuote = Nothing
        'QQxml.GetQuote("21", quickQuote, errMsg)
        'If errMsg <> "" Then
        '    errMsg = errMsg
        'End If


        'QQxml.GetQuote("3", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, errMsg)
        'QQxml.GetQuote("1200", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1172", "1803", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1148", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1234", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1248", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1319", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1258", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1376", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1464", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1519", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1542", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1548", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("909", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1558", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1603", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1382", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1660", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1664", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1711", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1706", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("132", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1822", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1996", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1957", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("16", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("848", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1004", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("472", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("523", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        QQxml.GetQuote("984", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        'QQxml.GetQuote("3", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, errMsg)
        'QQxml.GetQuote("1200", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1172", "1803", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1148", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1234", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1248", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1319", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1258", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1376", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1464", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1519", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1542", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1548", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("909", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1558", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1603", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1382", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1660", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1664", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1711", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1706", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("132", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1822", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1996", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1957", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("16", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("848", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1004", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("472", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("523", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        QQxml.GetQuote("984", QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        'QQxml.GetQuote("3", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, errMsg)
        'QQxml.GetQuote("1200", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1172", "1803", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1148", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1234", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1248", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1319", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1258", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1376", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1464", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1519", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1542", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1548", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("909", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1558", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1603", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1382", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1660", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1664", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1711", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1706", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("132", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1822", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1966", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1957", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("16", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("848", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1004", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("472", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("523", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        QQxml.GetQuote("984", QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        'QQxml.GetQuoteForSaveType("1172", QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, errMsg)
        'If errMsg <> "" Then
        '    errMsg = errMsg
        'End If
        'Dim ratedQQ As QuickQuoteObject = Nothing
        'Dim ratedXml As String = ""
        ''quickQuote.Client.Address.County = "Marion"
        ''quickQuote.Policyholder.Address.County = "Marion"
        'If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations(0) IsNot Nothing Then
        '    quickQuote.Locations(0).Name.CommercialName2 = "TEST WC RATER 13"
        '    quickQuote.Locations(0).Name.DoingBusinessAsName = "TEST DBA FIELD 13"
        '    quickQuote.Locations(0).Name.TaxNumber = "35-1234567"
        '    quickQuote.Locations(0).Name.TaxTypeId = "2"
        '    If quickQuote.Locations(0).Classifications Is Nothing Then
        '        quickQuote.Locations(0).Classifications = New Generic.List(Of QuickQuoteClassification)
        '        Dim c As New QuickQuoteClassification
        '        c.ClassificationTypeId = "3646"
        '        c.Description = "SHOE REPAIR STORE"
        '        c.NumberOfEmployees = "0"
        '        c.Payroll = "150000"
        '        quickQuote.Locations(0).Classifications.Add(c)
        '    End If
        'End If
        'QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strXml, ratedQQ, ratedXml, "1172", errMsg)
        'If errMsg <> "" Then
        '    errMsg = errMsg
        'End If
        'QQxml.GetQuote("3", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, errMsg)
        'QQxml.GetQuote("1200", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1172", "1803", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1148", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1234", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1248", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1319", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1258", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1376", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1464", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1519", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1542", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1548", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("909", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1558", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1603", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1382", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1660", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1664", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1711", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1706", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("132", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1822", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1966", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1957", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("16", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("848", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("1004", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("472", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        'QQxml.GetQuote("523", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        QQxml.GetQuote("984", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
    End Sub
    Private Sub ParseXmlString(ByVal strXML As String)
        'Dim xmlDoc As New XmlDocument()
        'xmlDoc.LoadXml(strXML)

        'Dim ResponseSection As XmlNode
        'ResponseSection = xmlDoc.SelectSingleNode("/ResponseData")

        'If ResponseSection Is Nothing Then
        '    ResponseSection = xmlDoc.Item("ResponseData")
        'End If

        'If ResponseSection Is Nothing Then
        '    ResponseSection = xmlDoc.GetElementsByTagName("ResponseData").Item(0)
        'End If

        'If ResponseSection IsNot Nothing AndAlso ResponseSection.HasChildNodes = True Then

        '    quickQuote = New QuickQuoteObject

        '    Dim responseNodes As XmlNodeList = ResponseSection.ChildNodes
        '    For Each node As XmlNode In responseNodes
        '        Select Case node.NodeType
        '            Case XmlNodeType.Element
        '                Select Case UCase(node.Name)
        '                    Case "SUCCESS"
        '                        'True or False
        '                    Case "DIAMONDVALIDATION"
        '                        'has sub-section
        '                        ParseDiamondValidation(node, quickQuote)
        '                    Case "IMAGE"
        '                        'has sub-section
        '                        ParseImage(node, quickQuote)
        '                End Select
        '        End Select
        '    Next

        '    LoadValuesFromquickQuote()
        'End If

        QQxml.ParseXmlString(strXML, quickQuote)
        If quickQuote IsNot Nothing Then
            LoadValuesFromquickQuote()
            quickQuote.Dispose()
        End If

    End Sub
    Private Sub ParseXML(ByVal strXmlFilePath As String)

        QQxml.ParseXML(strXmlFilePath, quickQuote)
        If quickQuote IsNot Nothing Then

            'Dim xmlDoc As XmlDocument
            'QQxml.BuildXml(quickQuote, xmlDoc)
            ''QQxml.OldBuildXml(quickQuote, xmlDoc)
            'If xmlDoc IsNot Nothing Then
            '    xmlDoc.Save("C:\Users\domin\Documents\QuickQuoteTests\Test1\testtest3.xml")
            'End If

            LoadValuesFromquickQuote()
            quickQuote.Dispose()
        End If

    End Sub
    Private Sub ParseXML(ByVal xmlDoc As XmlDocument)

        QQxml.ParseXML(xmlDoc, quickQuote)
        If quickQuote IsNot Nothing Then
            LoadValuesFromquickQuote()
            quickQuote.Dispose()
        End If

    End Sub
    Private Sub LoadValuesFromQuickQuote()
        HideVariableFields()

        If quickQuote IsNot Nothing Then
            'agencyId = ResponseData/Image/Agency/AgencyId
            'agencyCode = quickQuote.AgencyCode
            'portal URL = ResponseData/Image/PolicyBridgingUrl

            'general info
            Me.lblQuoteNumber.Text = quickQuote.QuoteNumber
            Me.lblName.Text = quickQuote.Policyholder.Name.DisplayName.Replace(vbCrLf, "<br />&nbsp;").Replace(vbLf, "<br />&nbsp;") '&nbsp; for space added to each table column before the label
            Me.lblQuoteDescription.Text = quickQuote.QuoteDescription
            Me.lblState.Text = quickQuote.State
            Me.lblEffectiveDate.Text = quickQuote.EffectiveDate 'probably need to format
            Me.lblTotalQuotedPremium.Text = quickQuote.TotalQuotedPremium
            Me.lblLegalEntityType.Text = quickQuote.Policyholder.Name.EntityType
            Me.lblEmployersLiability.Text = quickQuote.EmployersLiability
            Me.lblExperienceModification.Text = quickQuote.ExperienceModificationFactor
            Me.lblExperienceModificationEffDate.Text = quickQuote.RatingEffectiveDate
            Me.lblOccLiabilityLimit.Text = quickQuote.OccurrenceLiabilityLimit
            Me.lblTenFireLiability.Text = quickQuote.TenantsFireLiability
            Me.lblTenFireLiabilityQuotedPremium.Text = quickQuote.TenantsFireLiabilityQuotedPremium
            Me.lblPropDamLiabilityDeduct.Text = quickQuote.PropertyDamageLiabilityDeductible
            Me.lblPropDamLiabilityDeductPerClaimOrOccur.Text = quickQuote.PropertyDamageLiabilityDeductibleOption
            Me.lblBusMasterEnhancement.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasBusinessMasterEnhancement)
            Me.lblBusMasterEnhancementQuotedPremium.Text = quickQuote.BusinessMasterEnhancementQuotedPremium
            Me.lblBlanketRating.Text = quickQuote.BlanketRatingOption
            Me.lblBlanketRatingQuotedPremium.Text = quickQuote.BlanketRatingQuotedPremium

            'policy level coverage options - ResponseData/Image/LOB/PolicyLevel
            'Me.lblAddInsureds.Text = quickQuote.AdditionalInsuredsText
            Me.lblAddInsureds.Text = quickQuote.AdditionalInsuredsCount.ToString
            Me.lblAddInsuredsQuotedPremium.Text = quickQuote.AdditionalInsuredsQuotedPremium
            Me.lblEmpBenLiability.Text = quickQuote.EmployeeBenefitsLiabilityText
            'added text appending 8/6/2012
            If IsNumeric(Me.lblEmpBenLiability.Text) = True Then
                Me.lblEmpBenLiability.Text &= " Employee" & If(CInt(Me.lblEmpBenLiability.Text) = 1, "", "s")
            End If
            Me.lblEmpBenLiabilityQuotedPremium.Text = quickQuote.EmployeeBenefitsLiabilityQuotedPremium
            Me.lblContractEquipInstallLimit.Text = quickQuote.ContractorsEquipmentInstallationLimit
            Me.lblContractEquipInstallLimitQuotedPremium.Text = quickQuote.ContractorsEquipmentInstallationLimitQuotedPremium
            Me.lblContractEquipBlanket.Text = quickQuote.ContractorsToolsEquipmentBlanket
            Me.lblContractEquipBlanketQuotedPremium.Text = quickQuote.ContractorsToolsEquipmentBlanketQuotedPremium
            Me.lblContractEquipScheduled.Text = quickQuote.ContractorsToolsEquipmentScheduled
            Me.lblContractEquipScheduledQuotedPremium.Text = quickQuote.ContractorsToolsEquipmentScheduledQuotedPremium
            Me.lblContractEquipRented.Text = quickQuote.ContractorsToolsEquipmentRented
            Me.lblContractEquipRentedQuotedPremium.Text = quickQuote.ContractorsToolsEquipmentRentedQuotedPremium
            Me.lblContractEquipEmp.Text = quickQuote.ContractorsEmployeeTools
            Me.lblContractEquipEmpQuotedPremium.Text = quickQuote.ContractorsEmployeeToolsQuotedPremium
            Me.lblCrimeEmp.Text = quickQuote.CrimeEmpDisEmployeeText
            'added text appending 8/6/2012
            If IsNumeric(Me.lblCrimeEmp.Text) = True Then
                Me.lblCrimeEmp.Text &= " Employee" & If(CInt(Me.lblCrimeEmp.Text) = 1, "", "s")
            End If
            Me.lblCrimeLoc.Text = quickQuote.CrimeEmpDisLocationText
            'added text appending 8/6/2012
            If IsNumeric(Me.lblCrimeLoc.Text) = True Then
                Me.lblCrimeLoc.Text &= " Location" & If(CInt(Me.lblCrimeLoc.Text) = 1, "", "s")
            End If
            Me.lblCrimeLimit.Text = quickQuote.CrimeEmpDisLimit
            Me.lblCrimeLimitQuotedPremium.Text = quickQuote.CrimeEmpDisQuotedPremium
            Me.lblForgeLimit.Text = quickQuote.CrimeForgeryLimit
            Me.lblForgeLimitQuotedPremium.Text = quickQuote.CrimeForgeryQuotedPremium
            Me.lblEarthquake.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasEarthquake)
            Me.lblEarthquakeQuotedPremium.Text = quickQuote.EarthquakeQuotedPremium
            Me.lblHiredAuto.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasHiredAuto)
            Me.lblHiredAutoQuotedPremium.Text = quickQuote.HiredAutoQuotedPremium
            Me.lblNonOwnedAuto.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasNonOwnedAuto)
            Me.lblNonOwnedAutoQuotedPremium.Text = quickQuote.NonOwnedAutoQuotedPremium

            If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
                Me.LocationInformationRepeaterRow.Visible = True

                Dim dt As New DataTable
                'location info (can have multiple) - ResponseData/Image/LOB/RiskLevel/Locations/Location
                dt.Columns.Add("LocIndex", System.Type.GetType("System.String"))
                dt.Columns.Add("LocDescription", System.Type.GetType("System.String"))
                dt.Columns.Add("LocName", System.Type.GetType("System.String"))
                dt.Columns.Add("LocHouseNum", System.Type.GetType("System.String"))
                dt.Columns.Add("LocStreet", System.Type.GetType("System.String"))
                dt.Columns.Add("LocPoBox", System.Type.GetType("System.String"))
                dt.Columns.Add("LocCity", System.Type.GetType("System.String"))
                dt.Columns.Add("LocState", System.Type.GetType("System.String"))
                dt.Columns.Add("LocZip", System.Type.GetType("System.String"))
                dt.Columns.Add("LocCounty", System.Type.GetType("System.String"))
                dt.Columns.Add("LocProtClass", System.Type.GetType("System.String"))
                dt.Columns.Add("LocNumOfPools", System.Type.GetType("System.String"))

                'optional location coverages
                dt.Columns.Add("EquipBreakDeduct", System.Type.GetType("System.String"))
                dt.Columns.Add("EquipBreakDeductQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("MoneyOnPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("MoneyOffPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("MoneyOnOffPremQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("OutdoorSigns", System.Type.GetType("System.String"))
                dt.Columns.Add("OutdoorSignsQuotedPremium", System.Type.GetType("System.String"))

                For i As Integer = 0 To quickQuote.Locations.Count - 1
                    Dim newRow As DataRow = dt.NewRow
                    newRow.Item("LocIndex") = i
                    newRow.Item("LocDescription") = quickQuote.Locations(i).Description
                    newRow.Item("LocName") = quickQuote.Locations(i).Name.DisplayName.Replace(vbCrLf, "<br />&nbsp;").Replace(vbLf, "<br />&nbsp;") '&nbsp; for space added to each table column before the label
                    newRow.Item("LocHouseNum") = quickQuote.Locations(i).Address.HouseNum
                    newRow.Item("LocStreet") = quickQuote.Locations(i).Address.StreetName
                    newRow.Item("LocPoBox") = quickQuote.Locations(i).Address.POBox
                    newRow.Item("LocCity") = quickQuote.Locations(i).Address.City
                    newRow.Item("LocState") = quickQuote.Locations(i).Address.State
                    newRow.Item("LocZip") = quickQuote.Locations(i).Address.Zip
                    newRow.Item("LocCounty") = quickQuote.Locations(i).Address.County
                    newRow.Item("LocProtClass") = quickQuote.Locations(i).ProtectionClass
                    newRow.Item("LocNumOfPools") = quickQuote.Locations(i).NumberOfPools

                    newRow.Item("EquipBreakDeduct") = quickQuote.Locations(i).EquipmentBreakdownDeductible
                    newRow.Item("EquipBreakDeductQuotedPremium") = quickQuote.Locations(i).EquipmentBreakdownDeductibleQuotedPremium
                    newRow.Item("MoneyOnPrem") = quickQuote.Locations(i).MoneySecuritiesOnPremises
                    newRow.Item("MoneyOffPrem") = quickQuote.Locations(i).MoneySecuritiesOffPremises
                    newRow.Item("MoneyOnOffPremQuotedPremium") = quickQuote.Locations(i).MoneySecuritiesQuotedPremium
                    newRow.Item("OutdoorSigns") = quickQuote.Locations(i).OutdoorSignsLimit
                    newRow.Item("OutdoorSignsQuotedPremium") = quickQuote.Locations(i).OutdoorSignsQuotedPremium
                    dt.Rows.Add(newRow)
                Next

                Me.rptLocations.DataSource = dt
                Me.rptLocations.DataBind()
            Else
                Me.LocationInformationRepeaterRow.Visible = False
            End If


            'additional optional coverages
            Me.lblBarbProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasBarbersProfessionalLiability)
            Me.lblBarbProfLiabQuotedPremium.Text = quickQuote.BarbersProfessionalLiabiltyQuotedPremium
            Me.lblBarbProfLiabFullEmpNum.Text = quickQuote.BarbersProfessionalLiabilityFullTimeEmpNum
            Me.lblBarbProfLiabPartEmpNum.Text = quickQuote.BarbersProfessionalLiabilityPartTimeEmpNum
            Me.lblBeautProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasBeauticiansProfessionalLiability)
            Me.lblBeautProfLiabQuotedPremium.Text = quickQuote.BeauticiansProfessionalLiabilityQuotedPremium
            Me.lblBeautProfLiabFullEmpNum.Text = quickQuote.BeauticiansProfessionalLiabilityFullTimeEmpNum
            Me.lblBeautProfLiabPartEmpNum.Text = quickQuote.BeauticiansProfessionalLiabilityPartTimeEmpNum
            Me.lblFunDirProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasFuneralDirectorsProfessionalLiability)
            Me.lblFunDirProfLiabQuotedPremium.Text = quickQuote.FuneralDirectorsProfessionalLiabilityQuotedPremium
            Me.lblFunDirProfLiabEmpNum.Text = quickQuote.FuneralDirectorsProfessionalLiabilityEmpNum
            Me.lblPrintProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasPrintersProfessionalLiability)
            Me.lblPrintProfLiabQuotedPremium.Text = quickQuote.PrintersProfessionalLiabilityQuotedPremium
            Me.lblPrintProfLiabLocNum.Text = quickQuote.PrintersProfessionalLiabilityLocNum
            Me.lblSelfStoreFac.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasSelfStorageFacility)
            Me.lblSelfStoreFacQuotedPremium.Text = quickQuote.SelfStorageFacilityQuotedPremium
            'Me.lblSelfStoreFacLocNum.Text = quickQuote.SelfStorageFacilityLocNum'removed 7/3/2012
            Me.lblSelfStoreFacLimit.Text = quickQuote.SelfStorageFacilityLimit 'added 7/3/2012
            'added 7/3/2012
            Me.lblVetProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasVeterinariansProfessionalLiability)
            Me.lblVetProfLiabQuotedPremium.Text = quickQuote.VeterinariansProfessionalLiabilityQuotedPremium
            Me.lblVetProfLiabEmpNum.Text = quickQuote.VeterinariansProfessionalLiabilityEmpNum
            Me.lblOptAndHearProfLiab.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasOpticalAndHearingAidProfessionalLiability)
            Me.lblOptAndHearProfLiabQuotedPremium.Text = quickQuote.OpticalAndHearingAidProfessionalLiabilityQuotedPremium
            Me.lblOptAndHearProfLiabEmpNum.Text = quickQuote.OpticalAndHearingAidProfessionalLiabilityEmpNum

            'Named Individuals
            Me.lblNamedIndividualsIncOfSoleProp.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers)
            Me.lblNamedIndividualsWaiverOfSubro.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasWaiverOfSubrogation)
            Me.lblNamedIndividualsWaiverOfSubroWaiverNum.Text = quickQuote.WaiverOfSubrogationNumberOfWaivers
            Me.lblNamedIndividualsWaiverOfSubroWaiverAmt.Text = quickQuote.WaiverOfSubrogationPremium
            Me.lblNamedIndividualsExcOfAmish.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasExclusionOfAmishWorkers)
            Me.lblNamedIndividualsExcOfSoleProp.Text = qqHelper.getSelectedOrNotSelectedText(quickQuote.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers)

            'IRPM
            Me.lblIRPM_MgmtCoop.Text = quickQuote.IRPM_ManagementCooperation
            Me.lblIRPM_MgmtCoopDesc.Text = quickQuote.IRPM_ManagementCooperationDesc
            Me.lblIRPM_Loc.Text = quickQuote.IRPM_Location
            Me.lblIRPM_LocDesc.Text = quickQuote.IRPM_LocationDesc
            Me.lblIRPM_BuildFeat.Text = quickQuote.IRPM_BuildingFeatures
            Me.lblIRPM_BuildFeatDesc.Text = quickQuote.IRPM_BuildingFeaturesDesc
            Me.lblIRPM_Premises.Text = quickQuote.IRPM_Premises
            Me.lblIRPM_PremisesDesc.Text = quickQuote.IRPM_PremisesDesc
            Me.lblIRPM_Emp.Text = quickQuote.IRPM_Employees
            Me.lblIRPM_EmpDesc.Text = quickQuote.IRPM_EmployeesDesc
            Me.lblIRPM_Prot.Text = quickQuote.IRPM_Protection
            Me.lblIRPM_ProtDesc.Text = quickQuote.IRPM_ProtectionDesc
            Me.lblIRPM_CatHaz.Text = quickQuote.IRPM_CatostrophicHazards
            Me.lblIRPM_CatHazDesc.Text = quickQuote.IRPM_CatostrophicHazardsDesc
            Me.lblIRPM_MgmtExp.Text = quickQuote.IRPM_ManagementExperience
            Me.lblIRPM_MgmtExpDesc.Text = quickQuote.IRPM_ManagementExperienceDesc

            ShowFieldsForEachLOB()
        End If
    End Sub

    Protected Sub rptLocations_ItemDataBound(sender As Object, e As System.Web.UI.WebControls.RepeaterItemEventArgs) Handles rptLocations.ItemDataBound
        If e.Item.ItemType = ListItemType.Item OrElse e.Item.ItemType = ListItemType.AlternatingItem Then
            Dim lblLocIndex As Label = e.Item.FindControl("lblLocIndex")
            'Dim BuildingInformationRepeaterRow As TableRow = e.Item.FindControl("BuildingInformationRepeaterRow")
            Dim BuildingInformationRepeaterRow As HtmlControls.HtmlTableRow = e.Item.FindControl("BuildingInformationRepeaterRow")
            Dim rptBuildings As Repeater = e.Item.FindControl("rptBuildings")

            Dim LocDescriptionRow As HtmlTableRow = e.Item.FindControl("LocDescriptionRow")
            Dim LocNameRow As HtmlTableRow = e.Item.FindControl("LocNameRow")
            Dim LocStreetNumRow As HtmlTableRow = e.Item.FindControl("LocStreetNumRow")
            Dim LocStreetNameRow As HtmlTableRow = e.Item.FindControl("LocStreetNameRow")
            Dim LocPoBoxRow As HtmlTableRow = e.Item.FindControl("LocPoBoxRow")
            Dim LocProtClassRow As HtmlTableRow = e.Item.FindControl("LocProtClassRow")
            Dim LocNumberOfPoolsRow As HtmlTableRow = e.Item.FindControl("LocNumberOfPoolsRow")

            Dim OptionalLocationCoveragesSpacerRow As HtmlTableRow = e.Item.FindControl("OptionalLocationCoveragesSpacerRow")
            Dim OptionalLocationCoveragesMainRow As HtmlTableRow = e.Item.FindControl("OptionalLocationCoveragesMainRow")
            Dim OptionalLocationCoveragesQuotedPremRow As HtmlTableRow = e.Item.FindControl("OptionalLocationCoveragesQuotedPremRow")
            Dim LocEquipBreakDeductRow As HtmlTableRow = e.Item.FindControl("LocEquipBreakDeductRow")
            Dim LocMoneySecuritiesOnPremisesRow As HtmlTableRow = e.Item.FindControl("LocMoneySecuritiesOnPremisesRow")
            Dim LocMoneySecuritiesOffPremisesRow As HtmlTableRow = e.Item.FindControl("LocMoneySecuritiesOffPremisesRow")
            Dim LocOutdoorSignsRow As HtmlTableRow = e.Item.FindControl("LocOutdoorSignsRow")

            Dim rptClassCodes As Repeater = e.Item.FindControl("rptClassCodes")
            Dim ClassCodesInformationRepeaterRow As HtmlTableRow = e.Item.FindControl("ClassCodesInformationRepeaterRow")

            Dim lblLocHouseNum As Label = e.Item.FindControl("lblLocHouseNum")
            Dim lblLocStreet As Label = e.Item.FindControl("lblLocStreet")
            Dim lblLocPoBox As Label = e.Item.FindControl("lblLocPoBox")

            LocDescriptionRow.Visible = False 'BOP
            LocNameRow.Visible = False 'WC
            LocStreetNumRow.Visible = False 'all
            LocStreetNameRow.Visible = False 'all
            LocPoBoxRow.Visible = False 'all
            LocProtClassRow.Visible = False 'BOP
            LocNumberOfPoolsRow.Visible = False 'BOP

            OptionalLocationCoveragesSpacerRow.Visible = False 'BOP
            OptionalLocationCoveragesMainRow.Visible = False 'BOP
            OptionalLocationCoveragesQuotedPremRow.Visible = False 'BOP
            LocEquipBreakDeductRow.Visible = False 'BOP
            LocMoneySecuritiesOnPremisesRow.Visible = False 'BOP
            LocMoneySecuritiesOffPremisesRow.Visible = False 'BOP
            LocOutdoorSignsRow.Visible = False 'BOP

            If lblLocPoBox.Text <> "" AndAlso (lblLocHouseNum.Text = "" OrElse lblLocStreet.Text = "") Then
                LocPoBoxRow.Visible = True
            Else
                LocStreetNumRow.Visible = True
                LocStreetNameRow.Visible = True
            End If

            If quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP Then
                LocDescriptionRow.Visible = True
                LocProtClassRow.Visible = True
                LocNumberOfPoolsRow.Visible = True
                OptionalLocationCoveragesSpacerRow.Visible = True
                OptionalLocationCoveragesMainRow.Visible = True
                OptionalLocationCoveragesQuotedPremRow.Visible = True
                LocEquipBreakDeductRow.Visible = True
                LocMoneySecuritiesOnPremisesRow.Visible = True
                LocMoneySecuritiesOffPremisesRow.Visible = True
                LocOutdoorSignsRow.Visible = True
            ElseIf quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation Then
                LocNameRow.Visible = True
            Else
                'no lob
            End If

            If lblLocIndex.Text = "test" OrElse (quickQuote IsNot Nothing AndAlso quickQuote.Locations IsNot Nothing AndAlso IsNumeric(lblLocIndex.Text) = True AndAlso (quickQuote.Locations.Count - 1) >= CInt(lblLocIndex.Text) AndAlso quickQuote.Locations(CInt(lblLocIndex.Text)).Buildings IsNot Nothing AndAlso quickQuote.Locations(CInt(lblLocIndex.Text)).Buildings.Count > 0) Then
                BuildingInformationRepeaterRow.Visible = True

                Dim dt As New DataTable
                'building information (can have multiple per location) - ResponseData/Image/LOB/RiskLevel/Locations/Location/BarnsBuildings/BarnBuilding
                dt.Columns.Add("BuildingDescription", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingProgram", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingClassification", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingClassCode", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingOccupancy", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingConstruction", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingAutoIncrease", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingPropDeduct", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingLimit", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingLimitQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingValuation", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingIncludedInBlanket", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingMineSubsidence", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingMineSubsidenceQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingSprinklered", System.Type.GetType("System.String"))
                dt.Columns.Add("PersPropLimit", System.Type.GetType("System.String"))
                dt.Columns.Add("PersPropLimitQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingValuationMethod", System.Type.GetType("System.String"))
                dt.Columns.Add("BuildingIncludedInBlanket2", System.Type.GetType("System.String"))

                'optional location coverages (building)
                dt.Columns.Add("AcctsRecOnPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("AcctsRecQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("AcctsRecOffPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("ValPapersOnPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("ValPapersQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("ValPapersOffPrem", System.Type.GetType("System.String"))
                dt.Columns.Add("CondoCommUnitOwners", System.Type.GetType("System.String"))
                dt.Columns.Add("CondoCommUnitOwnersQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLaw", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov1", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov1QuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov2", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov2QuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov3", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov3QuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov4", System.Type.GetType("System.String"))
                dt.Columns.Add("OrdOrLawCov4QuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("Spoilage", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilageQuotedPremium", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilagePropClass", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilageTotLimit", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilageRefrig", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilageBreakdown", System.Type.GetType("System.String"))
                dt.Columns.Add("SpoilagePowerOutage", System.Type.GetType("System.String"))

                If lblLocIndex.Text = "test" Then
                    Dim newRow As DataRow = dt.NewRow
                    newRow.Item("BuildingDescription") = "Building #1 and Location #1"
                    newRow.Item("BuildingProgram") = "Apartment"
                    newRow.Item("BuildingClassification") = "Apart - < 4 families - Merc/Office - Lessors Risk - Incl. 3/4 family &"
                    newRow.Item("BuildingClassCode") = "65141"
                    newRow.Item("BuildingOccupancy") = "Non-Owner Occupied Bldg/Lessor's"
                    newRow.Item("BuildingConstruction") = "Frame"
                    newRow.Item("BuildingAutoIncrease") = "4%"
                    newRow.Item("BuildingPropDeduct") = "$250"
                    newRow.Item("BuildingLimit") = "100000"
                    newRow.Item("BuildingLimitQuotedPremium") = "250"
                    newRow.Item("BuildingValuation") = "Replacement Cost"
                    newRow.Item("BuildingIncludedInBlanket") = "Not Selected"
                    newRow.Item("BuildingMineSubsidence") = "Selected"
                    newRow.Item("BuildingMineSubsidenceQuotedPremium") = "250"
                    newRow.Item("BuildingSprinklered") = "Selected"
                    newRow.Item("PersPropLimit") = "100000"
                    newRow.Item("PersPropLimitQuotedPremium") = "250"
                    newRow.Item("BuildingValuationMethod") = "Replacement Cost"
                    newRow.Item("BuildingIncludedInBlanket2") = "Selected"

                    newRow.Item("AcctsRecOnPrem") = "60000"
                    newRow.Item("AcctsRecQuotedPremium") = "250"
                    newRow.Item("AcctsRecOffPrem") = "25000"
                    newRow.Item("ValPapersOnPrem") = "25000"
                    newRow.Item("ValPapersQuotedPremium") = "250"
                    newRow.Item("ValPapersOffPrem") = "10000"
                    newRow.Item("CondoCommUnitOwners") = "25000"
                    newRow.Item("CondoCommUnitOwnersQuotedPremium") = "250"
                    newRow.Item("OrdOrLaw") = "Selected"
                    newRow.Item("OrdOrLawCov1") = "Not Selected"
                    newRow.Item("OrdOrLawCov1QuotedPremium") = "?"
                    newRow.Item("OrdOrLawCov2") = "50000"
                    newRow.Item("OrdOrLawCov2QuotedPremium") = "250"
                    newRow.Item("OrdOrLawCov3") = "50000"
                    newRow.Item("OrdOrLawCov3QuotedPremium") = "250"
                    newRow.Item("OrdOrLawCov4") = "100000"
                    newRow.Item("OrdOrLawCov4QuotedPremium") = "250"
                    newRow.Item("Spoilage") = "Not Selected"
                    newRow.Item("SpoilageQuotedPremium") = "?"
                    newRow.Item("SpoilagePropClass") = "?"
                    newRow.Item("SpoilageTotLimit") = "?"
                    newRow.Item("SpoilageRefrig") = "?"
                    newRow.Item("SpoilageBreakdown") = "?"
                    newRow.Item("SpoilagePowerOutage") = "?"
                    dt.Rows.Add(newRow)
                Else
                    For Each b As QuickQuoteBuilding In quickQuote.Locations(CInt(lblLocIndex.Text)).Buildings
                        Dim newRow As DataRow = dt.NewRow
                        newRow.Item("BuildingDescription") = b.Description
                        newRow.Item("BuildingProgram") = b.Program
                        newRow.Item("BuildingClassification") = b.Classification
                        newRow.Item("BuildingClassCode") = b.ClassCode
                        newRow.Item("BuildingOccupancy") = b.Occupancy
                        newRow.Item("BuildingConstruction") = b.Construction
                        newRow.Item("BuildingAutoIncrease") = b.AutoIncrease
                        newRow.Item("BuildingPropDeduct") = b.PropertyDeductible
                        newRow.Item("BuildingLimit") = b.Limit
                        newRow.Item("BuildingLimitQuotedPremium") = b.LimitQuotedPremium
                        newRow.Item("BuildingValuation") = b.Valuation
                        newRow.Item("BuildingIncludedInBlanket") = qqHelper.getSelectedOrNotSelectedText(b.IsBuildingValIncludedInBlanketRating)
                        newRow.Item("BuildingMineSubsidence") = qqHelper.getSelectedOrNotSelectedText(b.HasMineSubsidence)
                        newRow.Item("BuildingMineSubsidenceQuotedPremium") = b.MineSubsidenceQuotedPremium
                        newRow.Item("BuildingSprinklered") = qqHelper.getSelectedOrNotSelectedText(b.HasSprinklered)
                        newRow.Item("PersPropLimit") = b.PersonalPropertyLimit
                        newRow.Item("PersPropLimitQuotedPremium") = b.PersonalPropertyLimitQuotedPremium
                        newRow.Item("BuildingValuationMethod") = b.ValuationMethod
                        newRow.Item("BuildingIncludedInBlanket2") = qqHelper.getSelectedOrNotSelectedText(b.IsValMethodIncludedInBlanketRating)

                        newRow.Item("AcctsRecOnPrem") = b.AccountsReceivableOnPremises
                        newRow.Item("AcctsRecQuotedPremium") = b.AccountsReceivableQuotedPremium
                        newRow.Item("AcctsRecOffPrem") = b.AccountsReceivableOffPremises
                        newRow.Item("ValPapersOnPrem") = b.ValuablePapersOnPremises
                        newRow.Item("ValPapersQuotedPremium") = b.ValuablePapersQuotedPremium
                        newRow.Item("ValPapersOffPrem") = b.ValuablePapersOffPremises
                        newRow.Item("CondoCommUnitOwners") = b.CondoCommercialUnitOwnersLimit
                        newRow.Item("CondoCommUnitOwnersQuotedPremium") = b.CondoCommercialUnitOwnersLimitQuotedPremium
                        newRow.Item("OrdOrLaw") = qqHelper.getSelectedOrNotSelectedText(b.HasOrdinanceOrLaw)
                        newRow.Item("OrdOrLawCov1") = qqHelper.getSelectedOrNotSelectedText(b.HasOrdOrLawUndamagedPortion)
                        newRow.Item("OrdOrLawCov1QuotedPremium") = b.OrdOrLawUndamagedPortionQuotedPremium
                        newRow.Item("OrdOrLawCov2") = b.OrdOrLawDemoCostLimit
                        newRow.Item("OrdOrLawCov2QuotedPremium") = b.OrdOrLawDemoCostLimitQuotedPremium
                        newRow.Item("OrdOrLawCov3") = b.OrdOrLawIncreasedCostLimit
                        newRow.Item("OrdOrLawCov3QuotedPremium") = b.OrdOrLawIncreaseCostLimitQuotedPremium
                        newRow.Item("OrdOrLawCov4") = b.OrdOrLawDemoAndIncreasedCostLimit
                        newRow.Item("OrdOrLawCov4QuotedPremium") = b.OrdOrLawDemoAndIncreasedCostLimitQuotedPremium
                        newRow.Item("Spoilage") = qqHelper.getSelectedOrNotSelectedText(b.HasSpoilage)
                        newRow.Item("SpoilageQuotedPremium") = b.SpoilageQuotedPremium
                        newRow.Item("SpoilagePropClass") = b.SpoilagePropertyClassification
                        newRow.Item("SpoilageTotLimit") = b.SpoilageTotalLimit
                        newRow.Item("SpoilageRefrig") = qqHelper.getSelectedOrNotSelectedText(b.IsSpoilageRefrigerationMaintenanceAgreement)
                        newRow.Item("SpoilageBreakdown") = qqHelper.getSelectedOrNotSelectedText(b.IsSpoilageBreakdownOrContamination)
                        newRow.Item("SpoilagePowerOutage") = qqHelper.getSelectedOrNotSelectedText(b.IsSpoilagePowerOutage)
                        dt.Rows.Add(newRow)
                    Next
                End If

                rptBuildings.DataSource = dt
                rptBuildings.DataBind()
                SetupBuildingsRepeater(rptBuildings)
            Else
                BuildingInformationRepeaterRow.Visible = False
            End If

            If lblLocIndex.Text = "test" OrElse (quickQuote IsNot Nothing AndAlso quickQuote.Locations IsNot Nothing AndAlso IsNumeric(lblLocIndex.Text) = True AndAlso (quickQuote.Locations.Count - 1) >= CInt(lblLocIndex.Text) AndAlso quickQuote.Locations(CInt(lblLocIndex.Text)).Classifications IsNot Nothing AndAlso quickQuote.Locations(CInt(lblLocIndex.Text)).Classifications.Count > 0) Then
                ClassCodesInformationRepeaterRow.Visible = True

                Dim dt As New DataTable
                dt.Columns.Add("ClassCode", System.Type.GetType("System.String"))
                dt.Columns.Add("ClassCodeDescription", System.Type.GetType("System.String"))
                dt.Columns.Add("ClassCodeEmpPayroll", System.Type.GetType("System.String"))
                dt.Columns.Add("ClassCodeEmpNum", System.Type.GetType("System.String"))

                If lblLocIndex.Text = "test" Then
                    Dim newRow As DataRow = dt.NewRow
                    newRow.Item("ClassCode") = ""
                    newRow.Item("ClassCodeDescription") = "Abrasive paper or cloth preparation"
                    newRow.Item("ClassCodeEmpPayroll") = "30000"
                    newRow.Item("ClassCodeEmpNum") = "2"
                    dt.Rows.Add(newRow)
                Else
                    For Each cls As QuickQuoteClassification In quickQuote.Locations(CInt(lblLocIndex.Text)).Classifications
                        Dim newRow As DataRow = dt.NewRow
                        newRow.Item("ClassCode") = cls.ClassCode
                        newRow.Item("ClassCodeDescription") = cls.Description
                        newRow.Item("ClassCodeEmpPayroll") = cls.Payroll
                        newRow.Item("ClassCodeEmpNum") = cls.NumberOfEmployees
                        dt.Rows.Add(newRow)
                    Next
                End If

                rptClassCodes.DataSource = dt
                rptClassCodes.DataBind()
                SetupLocClassCodesRepeater(rptClassCodes)
            Else
                ClassCodesInformationRepeaterRow.Visible = False
            End If


        End If
    End Sub
    Private Sub SetupBuildingsRepeater(ByVal rptBuildings As Repeater)
        For Each i As RepeaterItem In rptBuildings.Items
            Dim BuildProgramRow As HtmlTableRow = i.FindControl("BuildProgramRow")
            Dim BuildClassificationRow As HtmlTableRow = i.FindControl("BuildClassificationRow")
            Dim BuildClassCodeRow As HtmlTableRow = i.FindControl("BuildClassCodeRow")
            Dim BuildConstructionRow As HtmlTableRow = i.FindControl("BuildConstructionRow")
            Dim BuildAutoIncreaseRow As HtmlTableRow = i.FindControl("BuildAutoIncreaseRow")
            Dim BuildPropDeductRow As HtmlTableRow = i.FindControl("BuildPropDeductRow")
            Dim BuildLimitRow As HtmlTableRow = i.FindControl("BuildLimitRow")
            Dim BuildValuationRow As HtmlTableRow = i.FindControl("BuildValuationRow")
            Dim BuildValuationBlanketRow As HtmlTableRow = i.FindControl("BuildValuationBlanketRow")
            Dim BuildMineSubsidenceRow As HtmlTableRow = i.FindControl("BuildMineSubsidenceRow")
            Dim BuildSprinkleredRow As HtmlTableRow = i.FindControl("BuildSprinkleredRow")
            Dim BuildPersPropLimitRow As HtmlTableRow = i.FindControl("BuildPersPropLimitRow")
            Dim BuildValuationMethodRow As HtmlTableRow = i.FindControl("BuildValuationMethodRow")
            Dim BuildValuationMethodBlanketRow As HtmlTableRow = i.FindControl("BuildValuationMethodBlanketRow")

            Dim BuildAcctsRecOnPremisesRow As HtmlTableRow = i.FindControl("BuildAcctsRecOnPremisesRow")
            Dim BuildAcctsRecOffPremisesRow As HtmlTableRow = i.FindControl("BuildAcctsRecOffPremisesRow")
            Dim BuildValuablePapersOnPremisesRow As HtmlTableRow = i.FindControl("BuildValuablePapersOnPremisesRow")
            Dim BuildValuablePapersOffPremisesRow As HtmlTableRow = i.FindControl("BuildValuablePapersOffPremisesRow")
            Dim BuildCondoCommercialUnitLimitRow As HtmlTableRow = i.FindControl("BuildCondoCommercialUnitLimitRow")
            Dim BuildOrdOrLawMainRow As HtmlTableRow = i.FindControl("BuildOrdOrLawMainRow")
            Dim BuildOrdOrLawUndamagedRow As HtmlTableRow = i.FindControl("BuildOrdOrLawUndamagedRow")
            Dim BuildOrdOrLawDemoRow As HtmlTableRow = i.FindControl("BuildOrdOrLawDemoRow")
            Dim BuildOrdOrLawIncreasedCostRow As HtmlTableRow = i.FindControl("BuildOrdOrLawIncreasedCostRow")
            Dim BuildOrdOrLawDemoAndIncreasedCostRow As HtmlTableRow = i.FindControl("BuildOrdOrLawDemoAndIncreasedCostRow")
            Dim BuildSpoilageMainRow As HtmlTableRow = i.FindControl("BuildSpoilageMainRow")
            Dim BuildSpoilagePropClassificationRow As HtmlTableRow = i.FindControl("BuildSpoilagePropClassificationRow")
            Dim BuildSpoilageLimitRow As HtmlTableRow = i.FindControl("BuildSpoilageLimitRow")
            Dim BuildSpoilageRefrigRow As HtmlTableRow = i.FindControl("BuildSpoilageRefrigRow")
            Dim BuildSpoilageBreakdownRow As HtmlTableRow = i.FindControl("BuildSpoilageBreakdownRow")
            Dim BuildSpoilagePowerOutageRow As HtmlTableRow = i.FindControl("BuildSpoilagePowerOutageRow")

            Dim lblOrdOrLaw As Label = i.FindControl("lblOrdOrLaw")
            Dim lblSpoilage As Label = i.FindControl("lblSpoilage")

            BuildProgramRow.Visible = False 'BOP
            BuildClassificationRow.Visible = False 'BOP
            BuildClassCodeRow.Visible = False 'BOP
            BuildConstructionRow.Visible = False 'BOP
            BuildAutoIncreaseRow.Visible = False 'BOP
            BuildPropDeductRow.Visible = False 'BOP
            BuildLimitRow.Visible = False 'BOP
            BuildValuationRow.Visible = False 'BOP
            BuildValuationBlanketRow.Visible = False 'BOP
            BuildMineSubsidenceRow.Visible = False 'BOP
            BuildSprinkleredRow.Visible = False 'BOP
            BuildPersPropLimitRow.Visible = False 'BOP
            BuildValuationMethodRow.Visible = False 'BOP
            BuildValuationMethodBlanketRow.Visible = False 'BOP

            BuildAcctsRecOnPremisesRow.Visible = False 'BOP
            BuildAcctsRecOffPremisesRow.Visible = False 'BOP
            BuildValuablePapersOnPremisesRow.Visible = False 'BOP
            BuildValuablePapersOffPremisesRow.Visible = False 'BOP
            BuildCondoCommercialUnitLimitRow.Visible = False 'BOP
            BuildOrdOrLawMainRow.Visible = False 'BOP
            BuildOrdOrLawUndamagedRow.Visible = False 'BOP
            BuildOrdOrLawDemoRow.Visible = False 'BOP
            BuildOrdOrLawIncreasedCostRow.Visible = False 'BOP
            BuildOrdOrLawDemoAndIncreasedCostRow.Visible = False 'BOP
            BuildSpoilageMainRow.Visible = False 'BOP
            BuildSpoilagePropClassificationRow.Visible = False 'BOP
            BuildSpoilageLimitRow.Visible = False 'BOP
            BuildSpoilageRefrigRow.Visible = False 'BOP
            BuildSpoilageBreakdownRow.Visible = False 'BOP
            BuildSpoilagePowerOutageRow.Visible = False 'BOP

            If quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP Then
                BuildProgramRow.Visible = True
                BuildClassificationRow.Visible = True
                BuildClassCodeRow.Visible = True
                BuildConstructionRow.Visible = True
                BuildAutoIncreaseRow.Visible = True
                BuildPropDeductRow.Visible = True
                BuildLimitRow.Visible = True
                BuildValuationRow.Visible = True
                BuildValuationBlanketRow.Visible = True
                BuildMineSubsidenceRow.Visible = True
                BuildSprinkleredRow.Visible = True
                BuildPersPropLimitRow.Visible = True
                BuildValuationMethodRow.Visible = True
                BuildValuationMethodBlanketRow.Visible = True

                BuildAcctsRecOnPremisesRow.Visible = True
                BuildAcctsRecOffPremisesRow.Visible = True
                BuildValuablePapersOnPremisesRow.Visible = True
                BuildValuablePapersOffPremisesRow.Visible = True
                BuildCondoCommercialUnitLimitRow.Visible = True
                BuildOrdOrLawMainRow.Visible = True
                If UCase(lblOrdOrLaw.Text) = "SELECTED" Then
                    BuildOrdOrLawUndamagedRow.Visible = True
                    BuildOrdOrLawDemoRow.Visible = True
                    BuildOrdOrLawIncreasedCostRow.Visible = True
                    BuildOrdOrLawDemoAndIncreasedCostRow.Visible = True
                End If
                BuildSpoilageMainRow.Visible = True
                If UCase(lblSpoilage.Text) = "SELECTED" Then
                    BuildSpoilagePropClassificationRow.Visible = True
                    BuildSpoilageLimitRow.Visible = True
                    BuildSpoilageRefrigRow.Visible = True
                    BuildSpoilageBreakdownRow.Visible = True
                    BuildSpoilagePowerOutageRow.Visible = True
                End If
            End If
        Next
    End Sub
    Private Sub SetupLocClassCodesRepeater(ByVal rptClassCodes As Repeater)
        For Each i As RepeaterItem In rptClassCodes.Items
            Dim ClassCodeRow As HtmlTableRow = i.FindControl("ClassCodeRow")
            Dim ClassCodeDescriptionRow As HtmlTableRow = i.FindControl("ClassCodeDescriptionRow")
            Dim ClassCodeEmpPayrollRow As HtmlTableRow = i.FindControl("ClassCodeEmpPayrollRow")
            Dim ClassCodeEmpNumRow As HtmlTableRow = i.FindControl("ClassCodeEmpNumRow")

            ClassCodeRow.Visible = False 'WC
            ClassCodeDescriptionRow.Visible = False 'WC
            ClassCodeEmpPayrollRow.Visible = False 'WC
            ClassCodeEmpNumRow.Visible = False 'WC

            If quickQuote IsNot Nothing AndAlso quickQuote.LobType <> Nothing AndAlso quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation Then
                ClassCodeRow.Visible = True
                ClassCodeDescriptionRow.Visible = True
                ClassCodeEmpPayrollRow.Visible = True
                ClassCodeEmpNumRow.Visible = True
            End If
        Next
    End Sub

    Public Sub GetQuoteFromDbOld(ByVal quoteId As String)
        If IsNumeric(quoteId) = True Then
            Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                'sql.queryOrStoredProc = "SELECT QuoteID, ClientID, dia_UserID, UserName, AgencyCode, DiamondClientID, QuoteDate, QuoteXML, QuoteGUID, ResponseXML, StatusID, LastModifiedDate, QuoteDescription FROM Quote WHERE QuoteId = " & CInt(quoteId)
                sql.queryOrStoredProc = "SELECT QuoteID, AgencyID, dia_UserID, UserName, AgencyCode, DiamondClientID, QuoteDate, QuoteXML, QuoteGUID, ResponseXML, StatusID, LastModifiedDate, QuoteDescription FROM Quote WHERE QuoteId = " & CInt(quoteId)
                Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                If dr IsNot Nothing AndAlso dr.HasRows = True Then
                    dr.Read()
                    Dim quoteXML As Byte() = Nothing
                    Dim responseXML As Byte() = Nothing
                    Dim strQuoteXML As String = ""
                    Dim strResponseXML As String = ""
                    If dr.Item("QuoteXML") IsNot DBNull.Value Then
                        quoteXML = dr.Item("QuoteXML")
                        strQuoteXML = qqHelper.StringFromBytes(quoteXML)
                        Dim quote As QuickQuoteObject
                        QQxml.ParseXmlString(strQuoteXML, quote)
                        If quote IsNot Nothing Then
                            Dim effdt As String = quote.EffectiveDate
                            If quote.Locations IsNot Nothing AndAlso quote.Locations.Count > 0 Then
                                For Each Loc As QuickQuoteLocation In quote.Locations

                                Next
                            End If
                            quote.Dispose()
                        End If
                    End If
                    If dr.Item("ResponseXML") IsNot DBNull.Value Then
                        responseXML = dr.Item("ResponseXML")
                        strResponseXML = qqHelper.StringFromBytes(responseXML)
                        Dim response As QuickQuoteObject
                        QQxml.ParseXmlString(strResponseXML, response)
                        If response IsNot Nothing Then
                            response.Dispose()
                        End If
                    End If
                End If
            End Using
        End If
    End Sub
    Public Sub GetQuoteFromDbOld2(ByVal quoteId As String)
        If IsNumeric(quoteId) = True Then
            Dim quoteDescription As String = ""
            Using sql As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
                'sql.queryOrStoredProc = "SELECT QuoteID, ClientID, dia_UserID, UserName, AgencyCode, DiamondClientID, QuoteDate, QuoteXML, QuoteGUID, ResponseXML, StatusID, LastModifiedDate, QuoteDescription FROM Quote WHERE QuoteId = " & CInt(quoteId)
                sql.queryOrStoredProc = "SELECT QuoteID, AgencyID, dia_UserID, UserName, AgencyCode, DiamondClientID, QuoteDate, QuoteXML, QuoteGUID, ResponseXML, StatusID, LastModifiedDate, QuoteDescription FROM Quote WHERE QuoteId = " & CInt(quoteId)
                Dim dr As SqlClient.SqlDataReader = sql.GetDataReader
                If dr IsNot Nothing AndAlso dr.HasRows = True Then
                    dr.Read()
                    'added quote description 7/18/2012
                    quoteDescription = dr.Item("QuoteDescription").ToString.Trim
                    Dim responseXML As Byte() = Nothing
                    Dim strResponseXML As String = ""
                    If dr.Item("ResponseXML") IsNot DBNull.Value Then
                        responseXML = dr.Item("ResponseXML")
                        strResponseXML = qqHelper.StringFromBytes(responseXML)
                        QQxml.ParseXmlString(strResponseXML, quickQuote)
                        If quickQuote IsNot Nothing Then
                            If quickQuote.QuoteDescription = "" AndAlso quoteDescription <> "" Then
                                quickQuote.QuoteDescription = quoteDescription
                            End If
                            If quickQuote.PolicyBridgingURL <> "" Then
                                Me.lblGoToPortalLink.Text = quickQuote.PolicyBridgingURL
                                Me.btnGoToPortal.Text = "Finish Quote in Diamond Portal"
                            End If
                            If quickQuote.QuoteNumber <> "" Then
                                Me.lblErrorQuoteNumber.Text = " (" & quickQuote.QuoteNumber & ")"
                                Me.lblErrorQuoteNumber.Visible = True
                            End If
                            If quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                                Select Case quickQuote.LobType
                                    Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                                        Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                        Me.lblReturnToQuoteLink.Text = "BOP Pages/BOPQuoteInputPage.aspx?QuoteId=" & quoteId
                                        'Me.btnContinueToAppGap.Visible = True'*set to True if there's a link
                                    Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

                                    Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

                                    Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty

                                    Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage

                                    Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto

                                End Select
                            End If
                            If quickQuote.Success = True Then
                                Me.QuoteSummarySection.Visible = True
                                LoadValuesFromQuickQuote()
                                If ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString) = "WORKSHEET" Then
                                    Me.btnGoToPrintHistory.Text = "View Diamond Worksheet"
                                    GetDiamondPrintHistory(quickQuote.PolicyId, PrintType.JustWorksheet)
                                Else
                                    Me.btnGoToPrintHistory.Text = "View Diamond Print"
                                    GetDiamondPrintHistory(quickQuote.PolicyId)
                                End If
                                If quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                                    Me.QuoteMessagesSpacerRow.Visible = True
                                    Me.QuoteMessagesHeaderRow.Visible = True
                                    Me.QuoteMessagesValueRow.Visible = True
                                    For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                                        Me.lblQuoteMessages.Text = qqHelper.appendText(Me.lblQuoteMessages.Text, vi.Message, "<br />")
                                    Next
                                End If
                            ElseIf quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                                Me.QuoteErrorSection.Visible = True
                                For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                                    Me.lblQuoteErrors.Text = qqHelper.appendText(Me.lblQuoteErrors.Text, vi.Message, "<br />")
                                Next
                            Else
                                Me.QuoteErrorSection.Visible = True
                                Me.lblQuoteErrors.Text = "The quote failed, but no validation items were found."
                            End If

                            quickQuote.Dispose()
                        Else
                            Me.QuoteErrorSection.Visible = True
                            Me.lblQuoteErrors.Text = "The response xml from the database could not be parsed."
                        End If
                    Else
                        Me.QuoteErrorSection.Visible = True
                        Me.lblQuoteErrors.Text = "No response xml was found in the database for that QuoteId."
                    End If
                Else
                    Me.QuoteErrorSection.Visible = True
                    Me.lblQuoteErrors.Text = "Nothing was found for that QuoteId in the database."
                End If
            End Using
        Else
            Me.QuoteErrorSection.Visible = True
            Me.lblQuoteErrors.Text = "A valid parameter for QuoteId was not sent thru the querystring."
        End If
    End Sub
    Public Sub GetQuoteFromDb(ByVal quoteId As String)
        If IsNumeric(quoteId) = True Then
            Dim errorMsg As String = ""
            'QQxml.GetQuote(quoteId, QuickQuoteXML.QuickQuoteXmlType.RatedQuote, quickQuote, errorMsg)
            Dim rateType As QuickQuoteXML.QuickQuoteSaveType = Nothing
            QQxml.GetRatedQuote(quoteId, quickQuote, rateType, errorMsg)
            If quickQuote IsNot Nothing Then
                If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                    Me.lblAppGapText.Text = "&nbsp;(Application)"
                    Me.lblAppGapText.Visible = True
                End If
                If quickQuote.PolicyBridgingURL <> "" Then
                    Me.lblGoToPortalLink.Text = quickQuote.PolicyBridgingURL
                    Me.btnGoToPortal.Text = "Finish Quote in Diamond Portal"
                End If
                If quickQuote.QuoteNumber <> "" Then
                    Me.lblErrorQuoteNumber.Text = " (" & quickQuote.QuoteNumber & ")"
                    Me.lblErrorQuoteNumber.Visible = True
                End If
                If quickQuote.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    Select Case quickQuote.LobType
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialBOP
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                'Me.lblReturnToQuoteLink.Text = "BOP Pages/BOPQuoteInputPage.aspx?QuoteId=" & quoteId
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_BOP_Input").ToString & "?QuoteId=" & quoteId
                                'Me.btnContinueToAppGap.Visible = True'*set to True if there's a link
                            End If
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_CGL_Input").ToString & "?QuoteId=" & quoteId
                            End If
                        Case QuickQuoteObject.QuickQuoteLobType.WorkersCompensation
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_WC_Input").ToString & "?QuoteId=" & quoteId
                            End If
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialProperty
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_CPR_Input").ToString & "?QuoteId=" & quoteId
                            End If
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialPackage
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_CPP_Input").ToString & "?QuoteId=" & quoteId
                            End If
                        Case QuickQuoteObject.QuickQuoteLobType.CommercialAuto
                            If rateType = QuickQuoteXML.QuickQuoteSaveType.AppGap Then
                                Me.btnReturnToQuote.Text = "Return to Application and Edit"
                                Me.btnReturnToQuote.Enabled = False
                                Me.lblReturnToQuoteLink.Text = "" & "?QuoteId=" & quoteId
                            Else
                                Me.btnReturnToQuote.Text = "Return to Quote and Edit"
                                Me.lblReturnToQuoteLink.Text = ConfigurationManager.AppSettings("QuickQuote_CAP_Input").ToString & "?QuoteId=" & quoteId
                            End If
                    End Select
                End If
                If quickQuote.Success = True Then
                    Me.QuoteSummarySection.Visible = True
                    LoadValuesFromQuickQuote()
                    If ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All") IsNot Nothing AndAlso ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("QuickQuotePrintHistory_Worksheet_or_All").ToString) = "WORKSHEET" Then
                        Me.btnGoToPrintHistory.Text = "View Diamond Worksheet"
                        GetDiamondPrintHistory(quickQuote.PolicyId, PrintType.JustWorksheet)
                    Else
                        Me.btnGoToPrintHistory.Text = "View Diamond Print"
                        GetDiamondPrintHistory(quickQuote.PolicyId)
                    End If
                    If quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                        Me.QuoteMessagesSpacerRow.Visible = True
                        Me.QuoteMessagesHeaderRow.Visible = True
                        Me.QuoteMessagesValueRow.Visible = True
                        For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                            Me.lblQuoteMessages.Text = qqHelper.appendText(Me.lblQuoteMessages.Text, vi.Message, "<br />")
                        Next
                    End If
                    'added 8/8/2012
                    If rateType = QuickQuoteXML.QuickQuoteSaveType.Quote Then
                        Me.QuoteSuccessButtonsRow.Visible = True
                    End If
                ElseIf quickQuote.ValidationItems IsNot Nothing AndAlso quickQuote.ValidationItems.Count > 0 Then
                    Me.QuoteErrorSection.Visible = True
                    For Each vi As QuickQuoteValidationItem In quickQuote.ValidationItems
                        Me.lblQuoteErrors.Text = qqHelper.appendText(Me.lblQuoteErrors.Text, vi.Message, "<br />")
                    Next
                Else
                    Me.QuoteErrorSection.Visible = True
                    Me.lblQuoteErrors.Text = "The quote failed, but no validation items were found."
                End If

                quickQuote.Dispose()
            Else
                If errorMsg <> "" Then
                    Me.QuoteErrorSection.Visible = True
                    Me.lblQuoteErrors.Text = errorMsg
                Else
                    Me.QuoteErrorSection.Visible = True
                    Me.lblQuoteErrors.Text = "There was a problem locating that quoteId in the database."
                End If
            End If
        Else
            Me.QuoteErrorSection.Visible = True
            Me.lblQuoteErrors.Text = "A valid parameter for QuoteId was not sent thru the querystring."
        End If
    End Sub

    Protected Sub btnReturnToQuote_Click(sender As Object, e As System.EventArgs) Handles btnReturnToQuote.Click
        If Me.lblReturnToQuoteLink.Text <> "" Then
            Response.Redirect(Me.lblReturnToQuoteLink.Text)
        End If

    End Sub

    Protected Sub btnGoToPortal_Click(sender As Object, e As System.EventArgs) Handles btnGoToPortal.Click
        If Me.lblGoToPortalLink.Text <> "" Then
            Response.Redirect(Me.lblGoToPortalLink.Text)
        End If
    End Sub

    Protected Sub btnContinueToAppGap_Click(sender As Object, e As System.EventArgs) Handles btnContinueToAppGap.Click
        If Me.lblAppGapLink.Text <> "" Then
            Response.Redirect(Me.lblAppGapLink.Text)
        End If
    End Sub

    Private Sub GetDiamondPrintHistory(ByVal policyId As String, Optional ByVal pType As PrintType = PrintType.All)
        If policyId <> "" AndAlso IsNumeric(policyId) = True Then
            Using dia As New DiamondWebClass.DiamondPrinting
                Dim forms As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Printing.PrintForm)
                'forms = dia.getPrintFormsForPolicyId(dia.loginDiamond("PrintServices", "PrintServices"), 245276) 'policy id for QBOP010535 test on prodpatch
                'forms = dia.getPrintFormsForPolicyId(dia.loginDiamond("PrintServices", "PrintServices"), CInt(policyId))
                'updated 3/12/2013 to not send new credentials to Diamond
                Dim loginName As String = ""
                Dim loginPassword As String = ""
                If System.Web.HttpContext.Current.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondUsername").ToString <> "" Then
                    loginName = System.Web.HttpContext.Current.Session("DiamondUsername").ToString
                ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                    loginName = ConfigurationManager.AppSettings("QuickQuoteTestUsername").ToString
                End If
                If System.Web.HttpContext.Current.Session("DiamondPassword") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondPassword").ToString <> "" Then
                    loginPassword = System.Web.HttpContext.Current.Session("DiamondPassword").ToString
                ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                    loginPassword = ConfigurationManager.AppSettings("QuickQuoteTestPassword").ToString
                End If
                If loginName <> "" AndAlso loginPassword <> "" Then
                    forms = dia.getPrintFormsForPolicyId(dia.loginDiamond(loginName, loginPassword), CInt(policyId))
                End If

                If forms IsNot Nothing Then
                    If pType = PrintType.JustWorksheet Then
                        For Each pf As Diamond.Common.Objects.Printing.PrintForm In forms
                            If UCase(pf.Description).Contains("WORKSHEET") Then
                                Session("DiamondPrintFormBytes") = GetPrintForm(pf)
                                Exit For
                            End If
                        Next
                    Else
                        'all
                        Dim pfs As Generic.List(Of Diamond.Common.Objects.Printing.PrintForm)
                        For Each pf As Diamond.Common.Objects.Printing.PrintForm In forms
                            If pfs Is Nothing Then
                                pfs = New Generic.List(Of Diamond.Common.Objects.Printing.PrintForm)
                            End If
                            pfs.Add(pf)
                        Next
                        If pfs IsNot Nothing Then
                            Session("DiamondPrintFormBytes") = GetPrintForm(pfs)
                        End If
                    End If
                    'For Each pf As Diamond.Common.Objects.Printing.PrintForm In forms
                    '    ''If UCase(pf.Description).Contains("DECLA") = True Then
                    '    'Me.lblLogger.Text &= "<br><br>"
                    '    'Me.lblLogger.Text &= "TypeId=" & pf.FormCategoryTypeId
                    '    'Me.lblLogger.Text &= "<br>Type=" & pf.FormCategoryTypeDescription
                    '    'Me.lblLogger.Text &= "<br>Desc=" & pf.Description
                    '    'Me.lblLogger.Text &= "<br>PrintXMLid=" & pf.PrintXmlId
                    '    'Me.lblLogger.Text &= "<br>Form #=" & pf.FormNumber
                    '    'Me.lblLogger.Text &= "<br>Added=" & pf.AddedDate.ToString
                    '    ''End If

                    '    'to just get Worksheet
                    '    'If UCase(pf.Description).Contains("WORKSHEET") Then
                    '    '    Session("DiamondPrintFormBytes") = GetPrintForm(pf)
                    '    '    Exit For
                    '    'End If


                    'Next
                End If
            End Using
            If Session("DiamondPrintFormBytes") IsNot Nothing Then
                'Response.Redirect("DiamondPrintForm.aspx")
                Me.PrintHistoryRow.Visible = True

                'Me.lblByteString.Text = qqHelper.StringFromBytes(CType(Session("DiamondPrintFormBytes"), Byte()))
                'Session("DiamondPrintFormBytes") = Nothing

                'using the querystring overloads max url length; may try POSTing to print page

            End If
        End If
    End Sub
    Private Function GetPrintForm(ByVal pf As Diamond.Common.Objects.Printing.PrintForm) As Byte()
        Dim reprintRequest As New Diamond.Common.Services.Messages.PrintingService.ReprintJob.Request
        Dim reprintResponse As New Diamond.Common.Services.Messages.PrintingService.ReprintJob.Response

        With reprintRequest.RequestData
            '.PolicyId = policyID
            '.PolicyImageNum = imageNum

            .PolicyId = pf.PolicyId
            .PolicyImageNum = pf.PolicyImageNum

            .PrintForms = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Printing.PrintForm)
            .PrintForms.Add(New Diamond.Common.Objects.Printing.PrintForm() {pf})
        End With

        Using reprintProxy As New Diamond.Common.Services.Proxies.PrintingServiceProxy
            reprintResponse = reprintProxy.ReprintJob(reprintRequest)
        End Using

        If reprintResponse IsNot Nothing AndAlso reprintResponse.ResponseData IsNot Nothing AndAlso reprintResponse.ResponseData.Data IsNot Nothing Then
            Return reprintResponse.ResponseData.Data
        Else
            If reprintResponse.DiamondValidation.HasErrors Then
                For Each diaVal As Diamond.Common.Objects.ValidationItem In reprintResponse.DiamondValidation.ValidationItems
                    If diaVal.ItemType = Diamond.Common.Objects.ValidationItemType.ValidationError Then
                        'errMsg &= diaVal.Message & Environment.NewLine & Environment.NewLine
                    End If
                Next
            End If
            Return Nothing
        End If
    End Function
    Private Function GetPrintForm(ByVal pfs As Generic.List(Of Diamond.Common.Objects.Printing.PrintForm)) As Byte()
        If pfs IsNot Nothing AndAlso pfs.Count > 0 Then
            Dim reprintRequest As New Diamond.Common.Services.Messages.PrintingService.ReprintJob.Request
            Dim reprintResponse As New Diamond.Common.Services.Messages.PrintingService.ReprintJob.Response

            With reprintRequest.RequestData
                .PrintForms = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Printing.PrintForm)
                For Each pf As Diamond.Common.Objects.Printing.PrintForm In pfs
                    .PolicyId = pf.PolicyId
                    .PolicyImageNum = pf.PolicyImageNum

                    .PrintForms.Add(New Diamond.Common.Objects.Printing.PrintForm() {pf})
                Next
            End With

            Using reprintProxy As New Diamond.Common.Services.Proxies.PrintingServiceProxy
                reprintResponse = reprintProxy.ReprintJob(reprintRequest)
            End Using

            If reprintResponse IsNot Nothing AndAlso reprintResponse.ResponseData IsNot Nothing AndAlso reprintResponse.ResponseData.Data IsNot Nothing Then
                Return reprintResponse.ResponseData.Data
            Else
                If reprintResponse.DiamondValidation.HasErrors Then
                    For Each diaVal As Diamond.Common.Objects.ValidationItem In reprintResponse.DiamondValidation.ValidationItems
                        If diaVal.ItemType = Diamond.Common.Objects.ValidationItemType.ValidationError Then
                            'errMsg &= diaVal.Message & Environment.NewLine & Environment.NewLine
                        End If
                    Next
                End If
                Return Nothing
            End If
        Else
            Return Nothing
        End If
    End Function

    Protected Sub btnGoToPrintHistory_Click(sender As Object, e As System.EventArgs) Handles btnGoToPrintHistory.Click
        'Response.Redirect("DiamondPrintForm.aspx" & If(Me.lblByteString.Text <> "", "?DiamondPrintFormBytes=" & Me.lblByteString.Text, ""))
        'Response.Redirect("DiamondPrintForm.aspx" & If(Me.lblByteString.Text <> "", "?DiamondPrintFormBytes=" & Server.UrlEncode(Me.lblByteString.Text), ""))
        Response.Redirect("DiamondPrintForm.aspx")
    End Sub



    ''These are just test methods
    'Public Function AcquireQuote(ByVal policyID As Integer, ByVal policyImageNum As Integer) As Diamond.Common.Objects.Policy.Image
    '    Try
    '        'Dim dwc As New DiamondWebClass.DiamondSecurity
    '        'dwc.LoginDiamond("ryboy", "test123")

    '        Dim request As New Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Request
    '        Dim response As New Diamond.Common.Services.Messages.PolicyService.AcquirePendingImage.Response

    '        request.RequestData.PolicyId = policyID
    '        request.RequestData.PolicyImageNum = policyImageNum
    '        request.RequestData.UsersId = Diamond.Web.BaseControls.SignedOnUserID

    '        Using prx As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy
    '            response = prx.AcquirePendingImage(request)
    '        End Using

    '        If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing AndAlso response.ResponseData.PolicyImage IsNot Nothing Then
    '            Return response.ResponseData.PolicyImage
    '        Else
    '            'couldn't get image
    '            Return Nothing
    '        End If
    '    Catch ex As Exception

    '    End Try
    'End Function

    'Public Function IssueQuote(ByVal img As Diamond.Common.Objects.Policy.Image) As Diamond.Common.Services.Messages.PolicyService.Issue.Response
    '    Try
    '        Dim request As New Diamond.Common.Services.Messages.PolicyService.Issue.Request()
    '        Dim response As Diamond.Common.Services.Messages.PolicyService.Issue.Response = Nothing

    '        request.RequestData.PolicyImage = img
    '        request.RequestData.Rate = True
    '        request.RequestData.AlreadyValidated = True

    '        Using prx As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy()
    '            response = prx.Issue(request)
    '        End Using

    '        If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing Then
    '            Return response
    '        End If
    '    Catch ex As Exception
    '        Return Nothing
    '    End Try
    'End Function
    'Public Function RouteToUnderwriting(ByVal policyID As Integer, ByVal policyImageNum As Integer, Optional ByRef errorMsg As String = "") As Boolean
    '    Dim success As Boolean = False
    '    Try
    '        Dim req As New Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Request
    '        Dim res As New Diamond.Common.Services.Messages.PolicyService.RouteQuoteToUnderwriting.Response
    '        req.RequestData.PolicyId = policyID
    '        req.RequestData.PolicyImageNum = policyImageNum
    '        Using proxy As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy
    '            res = proxy.RouteQuoteToUnderwriting(req)
    '        End Using
    '        If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
    '            success = res.ResponseData.Success
    '            If res.DiamondValidation IsNot Nothing AndAlso res.DiamondValidation.ValidationItems IsNot Nothing AndAlso res.DiamondValidation.ValidationItems.Count > 0 Then
    '                For Each vi As Diamond.Common.Objects.ValidationItem In res.DiamondValidation.ValidationItems
    '                    If errorMsg <> "" Then
    '                        errorMsg &= "<br />"
    '                    End If
    '                    errorMsg &= vi.Message
    '                Next
    '            End If
    '        Else
    '            'no response data
    '        End If
    '    Catch ex As Exception
    '        'unhandled error
    '    End Try
    '    Return success
    'End Function

    Private Sub TestInsert()
        'testing new db table structure
        quickQuote = New QuickQuoteObject
        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP
        Dim xmlDoc As XmlDocument
        QQxml.BuildXml(quickQuote, xmlDoc)
        If xmlDoc IsNot Nothing Then
            Dim strXml As String = xmlDoc.InnerXml
            Dim quoteXML As Byte() = qqHelper.BytesFromString(strXml)
            If quoteXML IsNot Nothing Then
                'QQxml.InsertQuoteXml("", quoteXML, Nothing, "", Nothing, Nothing, "", "1")
            End If
        End If
    End Sub
    Private Sub TestGet()
        'QQxml.GetQuote("1", quickQuote)
    End Sub

    Private Sub TestAdditionalInterests()
        'for top grid
        Dim NamesAndAddresses As New Generic.List(Of QuickQuoteGenericNameAddress)

        'for initial loading of top grid on edit
        If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
            For Each Loc As QuickQuoteLocation In quickQuote.Locations
                If Loc.Buildings IsNot Nothing AndAlso Loc.Buildings.Count > 0 Then
                    For Each b As QuickQuoteBuilding In Loc.Buildings
                        If b.AdditionalInterests IsNot Nothing AndAlso b.AdditionalInterests.Count > 0 Then
                            For Each ai As QuickQuoteAdditionalInterest In b.AdditionalInterests
                                If ai.Name.HasData = True Then
                                    Dim na As New QuickQuoteGenericNameAddress
                                    na.Name = ai.Name
                                    na.Address = ai.Address
                                    NamesAndAddresses.Add(na)
                                End If
                            Next
                        End If
                    Next
                End If
            Next
        End If

        'adding new records (top grid and name drop-downs need to be rebound after a new one is added)
        Dim na1 As New QuickQuoteGenericNameAddress
        na1.Name.CommercialDBAname = "Rob Test 1"
        na1.Address.HouseNum = "123"
        na1.Address.StreetName = "Test Street"
        na1.Address.City = "Indy"
        na1.Address.County = "Marion"
        na1.Address.Zip = "46227"
        NamesAndAddresses.Add(na1)

        Dim na2 As New QuickQuoteGenericNameAddress
        na2.Name.CommercialDBAname = "Rob Test 2"
        na2.Address.HouseNum = "123"
        na2.Address.StreetName = "Test Street"
        na2.Address.City = "Indy"
        na2.Address.County = "Marion"
        na2.Address.Zip = "46227"
        NamesAndAddresses.Add(na2)

        'binding top grid and populating name drop-down for Contractors Equip or Building
        If NamesAndAddresses IsNot Nothing AndAlso NamesAndAddresses.Count > 0 Then
            For Each na As QuickQuoteGenericNameAddress In NamesAndAddresses
                Dim name As String = na.Name.CommercialDBAname
                Dim addHouseNum As String = na.Address.HouseNum
                Dim addStreetName As String = na.Address.StreetName
                Dim addCity As String = na.Address.City
                'for name drop-down, set name as text and NameAndAddresses index as value
            Next
        End If

        'when saving Contractors Equipment Scheduled Items
        'if additionalInterest on ce1 (all ce additionalInterests will be stored under location 1 building 1)
        If quickQuote.Locations(0).Buildings(0).AdditionalInterests Is Nothing Then
            quickQuote.Locations(0).Buildings(0).AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        End If
        Dim addInt As New QuickQuoteAdditionalInterest
        addInt.Name = na1.Name 'or name at NameAddresses index
        addInt.Address = na1.Address 'or address at NameAddresses index
        addInt.Description = "" 'description for ce1
        addInt.Other = "ce1"
        quickQuote.Locations(0).Buildings(0).AdditionalInterests.Add(addInt)

        'when saving buildings
        If quickQuote.Locations(0).Buildings(0).AdditionalInterests Is Nothing Then 'do this for whatever building you're on (probably just b.AdditionalInterests at that point)
            quickQuote.Locations(0).Buildings(0).AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        End If
        Dim addInt2 As New QuickQuoteAdditionalInterest
        addInt2.Name = na1.Name 'or name at NameAddresses index
        addInt2.Address = na1.Address 'or address at NameAddresses index
        addInt2.Description = "" 'either Building, Personal Property, or Other Optional Coverages
        addInt2.Other = "" 'if blank, we can assume it's just tied to the building
        quickQuote.Locations(0).Buildings(0).AdditionalInterests.Add(addInt2)

        'for initial loading of ais at ce or building level
        'for ce
        If quickQuote.Locations(0).Buildings(0).AdditionalInterests IsNot Nothing AndAlso quickQuote.Locations(0).Buildings(0).AdditionalInterests.Count > 0 Then
            'these are all either ce or ones tied to building 1
            For Each ai As QuickQuoteAdditionalInterest In quickQuote.Locations(0).Buildings(0).AdditionalInterests
                If ai.Other = "ce1" Then
                    'set ce1's name drop-down to ai name and ATIMA/ISAOA drop-down based on ai's ATIMA and ISAOA boolean props
                    'if ATIMA = True andalso ISAOA = True then
                    'selected text = ATIMA/ISAOA
                    'elseif ATIMA = True then
                    'selected text = ATIMA
                    'elseif ISAOA = True then
                    'selected text = "ISAOA"
                    'endif
                ElseIf ai.Other = "ce2" Then
                    'set ce2's drop-downs
                ElseIf ai.Other = "" Then
                    'then ai is just tied to building
                    'if ai.description = "Building" then
                    'set at Building level
                    'elseif ai.description = "Personal Property" then
                    'set at PersProp level
                    'elseif ai.description = "Other Optional Coverages" then
                    'set at OthOptionalCovs level
                    'endif
                End If
            Next
        End If

    End Sub
    Private Sub BOP_save_test()
        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP
        qq.EffectiveDate = "8/1/2012"
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        qq.HasBusinessMasterEnhancement = True
        qq.AdditionalInsuredsCount = 4
        qq.TenantsFireLiabilityId = "34" '500,000

        'this is only valid for Brewton 1840 (added for testing 8/16/2012)
        qq.AgencyProducerId = "6525"
        qq.AgencyProducerCode = "00"

        'added 8/17/2012
        qq.PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
        Dim uw1 As New QuickQuotePolicyUnderwriting
        uw1.PolicyUnderwritingCodeId = "9003"
        uw1.PolicyUnderwritingAnswerTypeId = "0" '
        uw1.PolicyUnderwritingAnswer = "-1" 'No
        uw1.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw1.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw1)
        Dim uw2 As New QuickQuotePolicyUnderwriting
        uw2.PolicyUnderwritingCodeId = "9006"
        uw2.PolicyUnderwritingAnswerTypeId = "0"
        uw2.PolicyUnderwritingAnswer = "1" 'Yes
        uw2.PolicyUnderwritingExtraAnswerTypeId = "0"
        uw2.PolicyUnderwritingExtraAnswer = "policy declined"
        uw2.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw2.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw2)
        Dim uw3 As New QuickQuotePolicyUnderwriting
        uw3.PolicyUnderwritingCodeId = "9007"
        uw3.PolicyUnderwritingAnswerTypeId = "0"
        uw3.PolicyUnderwritingAnswer = "-1" 'No
        uw3.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw3.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw3)
        Dim uw4 As New QuickQuotePolicyUnderwriting
        uw4.PolicyUnderwritingCodeId = "9008"
        uw4.PolicyUnderwritingAnswerTypeId = "0"
        uw4.PolicyUnderwritingAnswer = "-1" 'No
        uw4.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw4.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw4)
        Dim uw5 As New QuickQuotePolicyUnderwriting
        uw5.PolicyUnderwritingCodeId = "9009"
        uw5.PolicyUnderwritingAnswerTypeId = "0"
        uw5.PolicyUnderwritingAnswer = "-1" 'No
        uw5.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw5.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw5)
        Dim uw6 As New QuickQuotePolicyUnderwriting
        uw6.PolicyUnderwritingCodeId = "9010"
        uw6.PolicyUnderwritingAnswerTypeId = "0"
        uw6.PolicyUnderwritingAnswer = "1" 'Yes
        uw6.PolicyUnderwritingExtraAnswerTypeId = "0"
        uw6.PolicyUnderwritingExtraAnswer = "test judgement"
        uw6.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw6.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw6)

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "Test PH description of operations"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, qId, err)
        If err = "" Then
            qq = Nothing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            If err = "" Then
                qq.Locations = New Generic.List(Of QuickQuoteLocation)
                Dim l1 As New QuickQuoteLocation
                l1.Description = "Loc 1"
                l1.Address.HouseNum = "123"
                l1.Address.StreetName = "Test Street"
                l1.Address.City = "Indianapolis"
                l1.Address.Zip = "46227"
                l1.Address.County = "Marion"
                l1.ProtectionClassId = "12" '01
                l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
                Dim b1 As New QuickQuoteBuilding
                b1.Description = "Loc 1 Build 1"
                b1.PropertyDeductibleId = "24" '1000
                b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
                b1.AnnualReceipts = "100000"
                b1.NumberOfOfficersAndPartnersAndInsureds = "4"
                b1.EmployeePayroll = "60000"

                b1.ConstructionId = "7" 'Frame
                b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
                b1.HasSprinklered = True

                b1.Limit = "100000"
                b1.AutoIncreaseId = "2" '4%
                b1.IsBuildingValIncludedInBlanketRating = True
                b1.HasMineSubsidence = False
                b1.ValuationId = "2" 'Actual Cash Value
                b1.PersonalPropertyLimit = "100000"
                b1.IsValMethodIncludedInBlanketRating = True
                b1.ValuationMethodId = "2" 'Actual Cash Value
                b1.AccountsReceivableOnPremisesExcessLimit = "60000"
                b1.ValuablePapersOnPremisesExcessLimit = "30000"
                b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
                b1.HasOrdOrLawUndamagedPortion = True
                b1.OrdOrLawDemoCostLimit = "10000"
                b1.OrdOrLawIncreasedCostLimit = "30000"
                b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"

                'added 8/24/2012 to test updates(improvements)
                b1.YearBuilt = "1990"
                b1.WindowsUpdateYear = "1991"
                b1.ElectricUpdateYear = "1992"
                b1.ElectricUpdateTypeId = "2" 'Complete
                b1.ElectricCircuitBreaker = True
                b1.CentralHeatUpdateYear = "1993"
                b1.PlumbingUpdateYear = "1994"
                b1.PlumbingUpdateTypeId = "2" 'Complete
                b1.RoofUpdateYear = "1995"
                b1.SupplementalHeatUpdateYear = "1996"

                l1.Buildings.Add(b1)
                Dim b2 As New QuickQuoteBuilding
                b2.Description = "Loc 1 Build 2"
                b2.PropertyDeductibleId = "24" '1000
                b2.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
                b2.AnnualReceipts = "100000"
                b2.NumberOfOfficersAndPartnersAndInsureds = "4"
                b2.EmployeePayroll = "60000"

                b2.ConstructionId = "7" 'Frame
                b2.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
                b2.HasSprinklered = True

                b2.Limit = "100000"
                b2.AutoIncreaseId = "2" '4%
                b2.IsBuildingValIncludedInBlanketRating = True
                b2.HasMineSubsidence = False
                b2.ValuationId = "2" 'Actual Cash Value
                b2.PersonalPropertyLimit = "100000"
                b2.IsValMethodIncludedInBlanketRating = True
                b2.ValuationMethodId = "2" 'Actual Cash Value
                b2.AccountsReceivableOnPremisesExcessLimit = "60000"
                b2.ValuablePapersOnPremisesExcessLimit = "30000"
                b2.CondoCommercialUnitOwnersLimitId = "15" '5,000
                b2.HasOrdOrLawUndamagedPortion = True
                b2.OrdOrLawDemoCostLimit = "10000"
                b2.OrdOrLawIncreasedCostLimit = "30000"
                b2.OrdOrLawDemoAndIncreasedCostLimit = "75000"
                l1.Buildings.Add(b2)
                qq.Locations.Add(l1)

                Dim l2 As New QuickQuoteLocation
                l2.Description = "Loc 2"
                l2.Address.HouseNum = "123"
                l2.Address.StreetName = "Test Street"
                l2.Address.City = "Indianapolis"
                l2.Address.Zip = "46227"
                l2.Address.County = "Marion"
                l2.ProtectionClassId = "16" '05
                l2.Buildings = New Generic.List(Of QuickQuoteBuilding)
                Dim l2b1 As New QuickQuoteBuilding
                l2b1.Description = "Loc 2 Build 1"
                l2b1.PropertyDeductibleId = "24" '1000
                l2b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
                l2b1.AnnualReceipts = "100000"
                l2b1.NumberOfOfficersAndPartnersAndInsureds = "4"
                l2b1.EmployeePayroll = "60000"

                l2b1.ConstructionId = "7" 'Frame
                l2b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
                l2b1.HasSprinklered = True

                l2b1.Limit = "100000"
                l2b1.AutoIncreaseId = "2" '4%
                l2b1.IsBuildingValIncludedInBlanketRating = True
                l2b1.HasMineSubsidence = False
                l2b1.ValuationId = "2" 'Actual Cash Value
                l2b1.PersonalPropertyLimit = "100000"
                l2b1.IsValMethodIncludedInBlanketRating = True
                l2b1.ValuationMethodId = "2" 'Actual Cash Value
                l2b1.AccountsReceivableOnPremisesExcessLimit = "55000"
                l2b1.ValuablePapersOnPremisesExcessLimit = "35000"
                l2b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
                l2b1.HasOrdOrLawUndamagedPortion = True
                l2b1.OrdOrLawDemoCostLimit = "10000"
                l2b1.OrdOrLawIncreasedCostLimit = "30000"
                l2b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
                l2.Buildings.Add(l2b1)
                Dim l2b2 As New QuickQuoteBuilding
                l2b2.Description = "Loc 2 Build 2"
                l2b2.PropertyDeductibleId = "24" '1000
                l2b2.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
                l2b2.AnnualReceipts = "100000"
                l2b2.NumberOfOfficersAndPartnersAndInsureds = "4"
                l2b2.EmployeePayroll = "60000"

                l2b2.ConstructionId = "7" 'Frame
                l2b2.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
                l2b2.HasSprinklered = True

                l2b2.Limit = "100000"
                l2b2.AutoIncreaseId = "2" '4%
                l2b2.IsBuildingValIncludedInBlanketRating = True
                l2b2.HasMineSubsidence = False
                l2b2.ValuationId = "2" 'Actual Cash Value
                l2b2.PersonalPropertyLimit = "100000"
                l2b2.IsValMethodIncludedInBlanketRating = True
                l2b2.ValuationMethodId = "2" 'Actual Cash Value
                l2b2.AccountsReceivableOnPremisesExcessLimit = "70000"
                l2b2.ValuablePapersOnPremisesExcessLimit = "40000"
                l2b2.CondoCommercialUnitOwnersLimitId = "15" '5,000
                l2b2.HasOrdOrLawUndamagedPortion = True
                l2b2.OrdOrLawDemoCostLimit = "10000"
                l2b2.OrdOrLawIncreasedCostLimit = "30000"
                l2b2.OrdOrLawDemoAndIncreasedCostLimit = "75000"
                l2.Buildings.Add(l2b2)
                qq.Locations.Add(l2)

                'qq.AdditionalInsuredsCount = 2

                'added 8/6/2012
                qq.LossHistoryRecords = New Generic.List(Of QuickQuoteLossHistoryRecord)
                Dim lh As New QuickQuoteLossHistoryRecord
                lh.ClaimNumber = "1234"
                lh.LossDate = "1/1/2012"
                lh.TypeOfLossId = "69" 'Explosion; get types/ids from Diamond's TypeOfLoss table
                lh.Amount = "2000"
                lh.ReserveAmount = "2000"
                lh.LossDescription = "Test Loss Description"
                lh.Comments = "Test Comments"
                qq.LossHistoryRecords.Add(lh)

                'added 8/6/2012
                qq.PriorCarrier.PreviousInsurerTypeId = "81" 'GEICO; get types/ids from Diamond's PreviousInsurer table
                qq.PriorCarrier.PriorDurationTypeId = "1" 'Years; get types/ids from Diamond's PriorCarrierDurationType table
                qq.PriorCarrier.PriorDurationWithCompany = "10"
                qq.PriorCarrier.RolloverId = "7" 'Yes; 8=No; get types/ids from Diamond's PriorCarrierRollover table
                qq.PriorCarrier.PriorPolicy = "1234567890"
                qq.PriorCarrier.PriorExpirationDate = "1/1/2012"
                qq.PriorCarrier.Remarks = "Test Remarks"

                'qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, qId, err)
                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, qId, err)
                If err = "" Then
                    qq = Nothing
                    qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
                    If err = "" Then
                        'qq.AdditionalInsuredsCount = 0
                        'qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, qId, err)
                        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, qId, err)
                        If err = "" Then
                            qq = Nothing
                            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
                            If err = "" Then
                                'added for testing 8/23/2012
                                'qq = Nothing
                                'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
                                'If err = "" Then
                                '    If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
                                '        For Each Loc As QuickQuoteLocation In qq.Locations
                                '            If Loc.Buildings IsNot Nothing AndAlso Loc.Buildings.Count > 0 Then
                                '                For Each b As QuickQuoteBuilding In Loc.Buildings
                                '                    b.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                                '                    Dim ai As New QuickQuoteAdditionalInterest
                                '                    ai.Name.CommercialDBAname = "Test Name"
                                '                    ai.Name.TypeId = "2"
                                '                    ai.Name.TaxNumber = "12-3456789"
                                '                    ai.Name.TaxTypeId = "2"
                                '                    ai.Address.HouseNum = "123"
                                '                    ai.Address.StreetName = "Test Street"
                                '                    ai.Address.City = "Indy"
                                '                    ai.Address.Zip = "46227"
                                '                    ai.Address.County = "Marion"
                                '                    ai.Description = "Test AI"
                                '                    ai.TypeId = "8" 'Loss Payee
                                '                    b.AdditionalInterests.Add(ai)

                                '                    'added 8/29/2012 for testing; was already being done above w/ 8/24/2012 testing
                                '                    'b.ElectricUpdateYear = "1990"
                                '                    'b.PlumbingUpdateYear = "1991"
                                '                    'b.PlumbingCopper = True
                                '                    'b.PlumbingUpdateTypeId = "2" 'Complete
                                '                    'b.RoofAsphaltShingle = True
                                '                Next
                                '            End If
                                '        Next
                                '    End If
                                'End If
                                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, qId, err)
                                'If err = "" Then
                                '    Dim strXml As String = ""
                                '    qqxml.GetQuote(qId, QuickQuoteXML.QuickQuoteXmlType.AppGap, quickQuote, strXml, err)
                                '    If err <> "" Then
                                '        err = err
                                '    End If
                                '    'QQxml.GetQuote("3", QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, errMsg)
                                '    qqxml.GetQuote(qId, QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, quickQuote, strXml, err)
                                '    If err <> "" Then
                                '        err = err
                                '    End If
                                'End If
                            End If
                        End If
                    End If
                End If
            End If

        End If
    End Sub
    Private Sub BOP_save_test_short()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP
        qq.EffectiveDate = Date.Today '"1/1/2013" 'updated 12/20/2013
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        qq.HasBusinessMasterEnhancement = True
        qq.AdditionalInsuredsCount = 4
        qq.TenantsFireLiabilityId = "34" '500,000

        'this is only valid for Brewton 1840 (added for testing 8/16/2012)
        'qq.AgencyProducerId = "6525"
        'qq.AgencyProducerCode = "00"

        'this was used for testing DonKitchellTest login (main code = 1002; secondary code = 2998)
        'qq.AgencyId = "501"
        'qq.AgencyCode = "6103-2998"

        'added 9/4/2012 for quote or issue/bound
        qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.IssueBound
        qq.IssueBoundEffectiveDate = qq.EffectiveDate

        'added 8/17/2012
        qq.PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
        Dim uw1 As New QuickQuotePolicyUnderwriting
        uw1.PolicyUnderwritingCodeId = "9003"
        uw1.PolicyUnderwritingAnswerTypeId = "0" '
        uw1.PolicyUnderwritingAnswer = "-1" 'No
        uw1.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw1.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw1)
        Dim uw2 As New QuickQuotePolicyUnderwriting
        uw2.PolicyUnderwritingCodeId = "9006"
        uw2.PolicyUnderwritingAnswerTypeId = "0"
        'uw2.PolicyUnderwritingAnswer = "1" 'Yes
        uw2.PolicyUnderwritingAnswer = "-1" 'No
        uw2.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw2.PolicyUnderwritingExtraAnswer = "policy declined"
        uw2.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw2.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw2)
        Dim uw3 As New QuickQuotePolicyUnderwriting
        uw3.PolicyUnderwritingCodeId = "9007"
        uw3.PolicyUnderwritingAnswerTypeId = "0"
        uw3.PolicyUnderwritingAnswer = "-1" 'No
        uw3.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw3.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw3)
        Dim uw4 As New QuickQuotePolicyUnderwriting
        uw4.PolicyUnderwritingCodeId = "9008"
        uw4.PolicyUnderwritingAnswerTypeId = "0"
        uw4.PolicyUnderwritingAnswer = "-1" 'No
        uw4.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw4.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw4)
        Dim uw5 As New QuickQuotePolicyUnderwriting
        uw5.PolicyUnderwritingCodeId = "9009"
        uw5.PolicyUnderwritingAnswerTypeId = "0"
        uw5.PolicyUnderwritingAnswer = "-1" 'No
        uw5.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw5.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw5)
        Dim uw6 As New QuickQuotePolicyUnderwriting
        uw6.PolicyUnderwritingCodeId = "9010"
        uw6.PolicyUnderwritingAnswerTypeId = "0"
        'uw6.PolicyUnderwritingAnswer = "1" 'Yes
        uw6.PolicyUnderwritingAnswer = "-1" 'No
        uw6.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw6.PolicyUnderwritingExtraAnswer = "test judgement"
        uw6.PolicyUnderwritingLevelId = "1" 'Policy Image
        uw6.PolicyUnderwritingTabId = "2" 'UW # 2
        qq.PolicyUnderwritings.Add(uw6)

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        l1.ProtectionClassId = "12" '01
        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim b1 As New QuickQuoteBuilding
        b1.Description = "Loc 1 Build 1"
        b1.PropertyDeductibleId = "24" '1000
        b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        b1.AnnualReceipts = "100000"
        b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        b1.EmployeePayroll = "60000"

        b1.ConstructionId = "7" 'Frame
        b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        b1.HasSprinklered = True

        b1.Limit = "100000"
        b1.AutoIncreaseId = "2" '4%
        b1.IsBuildingValIncludedInBlanketRating = True
        b1.HasMineSubsidence = False
        b1.ValuationId = "2" 'Actual Cash Value
        b1.PersonalPropertyLimit = "100000"
        b1.IsValMethodIncludedInBlanketRating = True
        b1.ValuationMethodId = "2" 'Actual Cash Value
        b1.AccountsReceivableOnPremisesExcessLimit = "60000"
        b1.ValuablePapersOnPremisesExcessLimit = "30000"
        b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        b1.HasOrdOrLawUndamagedPortion = True
        b1.OrdOrLawDemoCostLimit = "10000"
        b1.OrdOrLawIncreasedCostLimit = "30000"
        b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"

        'added 8/24/2012 to test updates(improvements)
        b1.YearBuilt = "1990"
        b1.WindowsUpdateYear = "1991"
        b1.ElectricUpdateYear = "1992"
        b1.ElectricUpdateTypeId = "2" 'Complete
        b1.ElectricCircuitBreaker = True
        b1.CentralHeatUpdateYear = "1993"
        b1.PlumbingUpdateYear = "1994"
        b1.PlumbingUpdateTypeId = "2" 'Complete
        b1.RoofUpdateYear = "1995"
        b1.SupplementalHeatUpdateYear = "1996"

        l1.Buildings.Add(b1)
        Dim b2 As New QuickQuoteBuilding
        b2.Description = "Loc 1 Build 2"
        b2.PropertyDeductibleId = "24" '1000
        b2.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        b2.AnnualReceipts = "100000"
        b2.NumberOfOfficersAndPartnersAndInsureds = "4"
        b2.EmployeePayroll = "60000"

        b2.ConstructionId = "7" 'Frame
        b2.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        b2.HasSprinklered = True

        b2.Limit = "100000"
        b2.AutoIncreaseId = "2" '4%
        b2.IsBuildingValIncludedInBlanketRating = True
        b2.HasMineSubsidence = False
        b2.ValuationId = "2" 'Actual Cash Value
        b2.PersonalPropertyLimit = "100000"
        b2.IsValMethodIncludedInBlanketRating = True
        b2.ValuationMethodId = "2" 'Actual Cash Value
        b2.AccountsReceivableOnPremisesExcessLimit = "60000"
        b2.ValuablePapersOnPremisesExcessLimit = "30000"
        b2.CondoCommercialUnitOwnersLimitId = "15" '5,000
        b2.HasOrdOrLawUndamagedPortion = True
        b2.OrdOrLawDemoCostLimit = "10000"
        b2.OrdOrLawIncreasedCostLimit = "30000"
        b2.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l1.Buildings.Add(b2)
        qq.Locations.Add(l1)

        Dim l2 As New QuickQuoteLocation
        l2.Description = "Loc 2"
        l2.Address.HouseNum = "123"
        l2.Address.StreetName = "Test Street"
        l2.Address.City = "Indianapolis"
        l2.Address.Zip = "46227"
        l2.Address.County = "Marion"
        l2.ProtectionClassId = "16" '05
        l2.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim l2b1 As New QuickQuoteBuilding
        l2b1.Description = "Loc 2 Build 1"
        l2b1.PropertyDeductibleId = "24" '1000
        l2b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        l2b1.AnnualReceipts = "100000"
        l2b1.NumberOfOfficersAndPartnersAndInsureds = "4"
        l2b1.EmployeePayroll = "60000"

        l2b1.ConstructionId = "7" 'Frame
        l2b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l2b1.HasSprinklered = True

        l2b1.Limit = "100000"
        l2b1.AutoIncreaseId = "2" '4%
        l2b1.IsBuildingValIncludedInBlanketRating = True
        l2b1.HasMineSubsidence = False
        l2b1.ValuationId = "2" 'Actual Cash Value
        l2b1.PersonalPropertyLimit = "100000"
        l2b1.IsValMethodIncludedInBlanketRating = True
        l2b1.ValuationMethodId = "2" 'Actual Cash Value
        l2b1.AccountsReceivableOnPremisesExcessLimit = "55000"
        l2b1.ValuablePapersOnPremisesExcessLimit = "35000"
        l2b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l2b1.HasOrdOrLawUndamagedPortion = True
        l2b1.OrdOrLawDemoCostLimit = "10000"
        l2b1.OrdOrLawIncreasedCostLimit = "30000"
        l2b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l2.Buildings.Add(l2b1)
        Dim l2b2 As New QuickQuoteBuilding
        l2b2.Description = "Loc 2 Build 2"
        l2b2.PropertyDeductibleId = "24" '1000
        l2b2.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
        l2b2.AnnualReceipts = "100000"
        l2b2.NumberOfOfficersAndPartnersAndInsureds = "4"
        l2b2.EmployeePayroll = "60000"

        l2b2.ConstructionId = "7" 'Frame
        l2b2.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
        l2b2.HasSprinklered = True

        l2b2.Limit = "100000"
        l2b2.AutoIncreaseId = "2" '4%
        l2b2.IsBuildingValIncludedInBlanketRating = True
        l2b2.HasMineSubsidence = False
        l2b2.ValuationId = "2" 'Actual Cash Value
        l2b2.PersonalPropertyLimit = "100000"
        l2b2.IsValMethodIncludedInBlanketRating = True
        l2b2.ValuationMethodId = "2" 'Actual Cash Value
        l2b2.AccountsReceivableOnPremisesExcessLimit = "70000"
        l2b2.ValuablePapersOnPremisesExcessLimit = "40000"
        l2b2.CondoCommercialUnitOwnersLimitId = "15" '5,000
        l2b2.HasOrdOrLawUndamagedPortion = True
        l2b2.OrdOrLawDemoCostLimit = "10000"
        l2b2.OrdOrLawIncreasedCostLimit = "30000"
        l2b2.OrdOrLawDemoAndIncreasedCostLimit = "75000"
        l2.Buildings.Add(l2b2)
        qq.Locations.Add(l2)

        qq.AdditionalPolicyholders = New Generic.List(Of QuickQuoteAdditionalPolicyholder)
        Dim ph As New QuickQuoteAdditionalPolicyholder
        ph.Name.CommercialDBAname = "Test PH2"
        'ph.Name.TypeId = "2"
        ph.Name.TaxTypeId = "1"
        ph.Name.TaxNumber = "111-22-3333"
        qq.AdditionalPolicyholders.Add(ph)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                qq.Client.Name.EntityTypeId = "3" 'Corporation
                qq.Client.Name.DescriptionOfOperations = "Client Test"
                If qq.AdditionalInsureds IsNot Nothing AndAlso qq.AdditionalInsureds.Count > 0 Then
                    Dim counter As Integer = 1
                    For Each ai As QuickQuoteAdditionalInsured In qq.AdditionalInsureds
                        If counter = 1 Then
                            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.ControllingInterest
                        ElseIf counter = 2 Then
                            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                        ElseIf counter = 3 Then
                            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.LessorOfLeasedEquipment
                        End If
                        counter += 1
                        If counter = 4 Then
                            counter = 1
                        End If
                    Next
                End If
                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                If err = "" Then

                End If
            End If
        End If
    End Sub
    Private Sub BOP_save_test_short2()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP
        qq.EffectiveDate = "4/1/2013"
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.BlanketRatingOptionId = "1" 'Combined Building and Personal Property
        qq.HasBusinessMasterEnhancement = True
        qq.AdditionalInsuredsCount = 4
        qq.TenantsFireLiabilityId = "34" '500,000

        'this is only valid for Brewton 1840 (added for testing 8/16/2012)
        'qq.AgencyProducerId = "6525"
        'qq.AgencyProducerCode = "00"

        'this was used for testing DonKitchellTest login (main code = 1002; secondary code = 2998)
        'qq.AgencyId = "501"
        'qq.AgencyCode = "6103-2998"

        'added 9/4/2012 for quote or issue/bound
        qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.IssueBound
        qq.IssueBoundEffectiveDate = qq.EffectiveDate

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        l1.ProtectionClassId = "12" '01        
        qq.Locations.Add(l1)

        qq.AdditionalPolicyholders = New Generic.List(Of QuickQuoteAdditionalPolicyholder)
        Dim ph As New QuickQuoteAdditionalPolicyholder
        ph.Name.CommercialDBAname = "Test PH2"
        'ph.Name.TypeId = "2"
        ph.Name.TaxTypeId = "1"
        ph.Name.TaxNumber = "111-22-3333"
        qq.AdditionalPolicyholders.Add(ph)
        'testing tax number stuff 4/11/2013
        'Dim ph2 As New QuickQuoteAdditionalPolicyholder
        'ph2.Name.CommercialDBAname = "Test PH3"
        'ph2.Name.TaxTypeId = "1"
        'ph2.Name.TaxNumber = "123456789"
        'qq.AdditionalPolicyholders.Add(ph2)
        'Dim ph3 As New QuickQuoteAdditionalPolicyholder
        'ph3.Name.CommercialDBAname = "Test PH4"
        ''ph3.Name.TaxTypeId = "1"
        'ph3.Name.TaxNumber = "12-3456789"
        'qq.AdditionalPolicyholders.Add(ph3)

        'testing tax number stuff 4/11/2013
        'Dim nm As String = ""
        'Dim tId As String = ""
        'Dim tIdEntered As String = ""
        'Dim tNum As String = ""
        'Dim tEntered As String = ""
        'Dim tNoHyphens As String = ""
        'Dim tHyphens As String = ""
        'If qq.AdditionalPolicyholders IsNot Nothing AndAlso qq.AdditionalPolicyholders.Count > 0 Then
        '    For Each ap As QuickQuoteAdditionalPolicyholder In qq.AdditionalPolicyholders
        '        nm = ap.Name.CommercialDBAname
        '        tId = ap.Name.TaxTypeId
        '        tIdEntered = ap.Name.TaxTypeId_Entered
        '        tNum = ap.Name.TaxNumber
        '        tEntered = ap.Name.TaxNumber_Entered
        '        tNoHyphens = ap.Name.TaxNumber_NoHyphens
        '        tHyphens = ap.Name.TaxNumber_Hyphens
        '    Next
        'End If

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                'testing tax number stuff 4/11/2013
                'Dim nm As String = ""
                'Dim tId As String = ""
                'Dim tIdEntered As String = ""
                'Dim tNum As String = ""
                'Dim tEntered As String = ""
                'Dim tNoHyphens As String = ""
                'Dim tHyphens As String = ""
                'nm = ""
                'tId = ""
                'tIdEntered = ""
                'tNum = ""
                'tEntered = ""
                'tNoHyphens = ""
                'tHyphens = ""
                'If qq.AdditionalPolicyholders IsNot Nothing AndAlso qq.AdditionalPolicyholders.Count > 0 Then
                '    For Each ap As QuickQuoteAdditionalPolicyholder In qq.AdditionalPolicyholders
                '        nm = ap.Name.CommercialDBAname
                '        tId = ap.Name.TaxTypeId
                '        tIdEntered = ap.Name.TaxTypeId_Entered
                '        tNum = ap.Name.TaxNumber
                '        tEntered = ap.Name.TaxNumber_Entered
                '        tNoHyphens = ap.Name.TaxNumber_NoHyphens
                '        tHyphens = ap.Name.TaxNumber_Hyphens
                '    Next
                'End If

                If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
                    For Each l As QuickQuoteLocation In qq.Locations
                        If l.Buildings Is Nothing OrElse l.Buildings.Count = 0 Then
                            If l.Buildings Is Nothing Then
                                l.Buildings = New Generic.List(Of QuickQuoteBuilding)
                            End If
                            Dim b1 As New QuickQuoteBuilding
                            b1.Description = "Loc 1 Build 1"
                            b1.PropertyDeductibleId = "24" '1000
                            b1.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
                            b1.AnnualReceipts = "100000"
                            b1.NumberOfOfficersAndPartnersAndInsureds = "4"
                            b1.EmployeePayroll = "60000"

                            b1.ConstructionId = "7" 'Frame
                            b1.OccupancyId = "17" 'Owner Occupied Bldg 75% or Less / Lessor's
                            b1.HasSprinklered = True

                            b1.Limit = "100000"
                            b1.AutoIncreaseId = "2" '4%
                            b1.IsBuildingValIncludedInBlanketRating = True
                            b1.HasMineSubsidence = False
                            b1.ValuationId = "2" 'Actual Cash Value
                            b1.PersonalPropertyLimit = "100000"
                            b1.IsValMethodIncludedInBlanketRating = True
                            b1.ValuationMethodId = "2" 'Actual Cash Value
                            b1.AccountsReceivableOnPremisesExcessLimit = "60000"
                            b1.ValuablePapersOnPremisesExcessLimit = "30000"
                            b1.CondoCommercialUnitOwnersLimitId = "15" '5,000
                            b1.HasOrdOrLawUndamagedPortion = True
                            b1.OrdOrLawDemoCostLimit = "10000"
                            b1.OrdOrLawIncreasedCostLimit = "30000"
                            b1.OrdOrLawDemoAndIncreasedCostLimit = "75000"

                            'added 8/24/2012 to test updates(improvements)
                            b1.YearBuilt = "1990"
                            b1.WindowsUpdateYear = "1991"
                            b1.ElectricUpdateYear = "1992"
                            b1.ElectricUpdateTypeId = "2" 'Complete
                            b1.ElectricCircuitBreaker = True
                            b1.CentralHeatUpdateYear = "1993"
                            b1.PlumbingUpdateYear = "1994"
                            b1.PlumbingUpdateTypeId = "2" 'Complete
                            b1.RoofUpdateYear = "1995"
                            b1.SupplementalHeatUpdateYear = "1996"

                            l.Buildings.Add(b1)
                        End If
                    Next
                End If

                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                If err = "" Then

                End If
            End If
        End If
    End Sub
    Private Sub CAP_save_test_short()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto
        qq.EffectiveDate = "8/1/2012"

        'this is only valid for Brewton 1840 (added for testing 8/16/2012)
        'qq.AgencyProducerId = "6525"
        'qq.AgencyProducerCode = "00"

        'added 9/4/2012 for quote or issue/bound
        'qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.Quote
        'qq.IssueBoundEffectiveDate = ""
        qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.IssueBound
        qq.IssueBoundEffectiveDate = qq.EffectiveDate

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        qq.Liability_UM_UIM_LimitId = "34" '500,000
        qq.MedicalPaymentsLimitid = "12" '2,000
        qq.HasBusinessMasterEnhancement = True
        'qq.HasFarmPollutionLiability = True 'Farm Truck Pollution Liability requires at least one Truck, Tractor, and Trailer with a Secondary Class of Farmers.
        qq.HasNonOwnershipLiability = True
        qq.NonOwnership_ENO_RatingTypeId = "1" 'Employees Only
        qq.NonOwnershipLiabilityNumberOfEmployees = "3"
        qq.HasHiredBorrowedLiability = True
        qq.ComprehensiveDeductibleId = "10" 'Full
        qq.CollisionDeductibleId = "8" '500
        qq.HasHiredCarPhysicalDamage = True

        'not sure if this will be used but there's a spot to enter locations from the UI
        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        qq.Locations.Add(l1)

        qq.Vehicles = New Generic.List(Of QuickQuoteVehicle)
        Dim v1 As New QuickQuoteVehicle
        v1.Make = "Chevy"
        v1.Model = "Corvette"
        v1.Year = "2005"
        v1.ClassCode = "0108851"
        v1.Vin = "1G1YY24U655117542"
        v1.CostNew = "40000"
        v1.CostUsed = "28000"
        v1.AnnualMiles = "10000"
        v1.DaysPerWeek = "5"
        v1.MilesOneWay = "100"
        v1.OdometerReading = "67000"
        v1.VehicleRatingTypeId = "1" 'Private Passenger Type (added 9/25/2012)
        'v1.VehicleUseTypeId = "-1" 'N/A"; Vehicle Num #1 Vehicle Use is required when the Vehicle Rating Type = Private Passenger Type. (message is referring to UseCodeType)
        'v1.VehicleUsageTypeId = "0" 'None; Vehicle Num #1 Vehicle Use is required when the Vehicle Rating Type = Private Passenger Type. (message is referring to UseCodeType)
        v1.UseCodeTypeId = "21" 'Personal
        'v1.OperatorTypeId = "0" 'N/A; Vehicle Num #1 Operator Type is required when the Vehicle Rating Type = Private Passenger Type and the Vehicle Use = Personal.
        'v1.OperatorUseTypeId = "0" 'N/A; Vehicle Num #1 Operator Use is required when the Vehicle Rating Type = Private Passenger Type and the Vehicle Use = Personal.
        v1.OperatorTypeId = "3" 'Owner or principal operator licensed less than 5 years
        v1.OperatorUseTypeId = "3" 'To or from work 15 miles or more

        'v1.HasCollision = True 'Collision Coverage requires Covered Auto Symbol.
        'v1.CollisionDeductibleId = "9" '1,000
        'v1.HasComprehensive = True 'Other Than Collision Coverage requires Covered Auto Symbol.
        'v1.ComprehensiveDeductibleId = "8" '500
        v1.HasLiability_UM_UIM = True
        v1.HasMedicalPayments = True
        'v1.HasRentalReimbursement = True 'Vehicle Num #1 Other Than Collision and Collision Coverage are required when Rental Reimbursement coverage is selected.
        'v1.RentalReimbursementDailyReimbursement = "30"
        'v1.RentalReimbursementNumberOfDays = "15"
        'v1.HasTowingAndLabor = True 'Vehicle Num #1 Towing and Labor is valid only if Vehicle Rating Type equal Private Passenger Type.

        '9/5/2012 - will get error if garaging address isn't populated
        v1.GaragingAddress.WithinCity = True
        v1.GaragingAddress.Address.HouseNum = "123"
        v1.GaragingAddress.Address.StreetName = "Test Street"
        v1.GaragingAddress.Address.City = "Indianapolis"
        v1.GaragingAddress.Address.Zip = "46227"
        v1.GaragingAddress.Address.County = "Marion"
        qq.Vehicles.Add(v1)

        qq.Drivers = New Generic.List(Of QuickQuoteDriver)
        Dim d1 As New QuickQuoteDriver
        d1.Name.CommercialDBAname = "Don Test Driver"
        d1.Name.TypeId = "2"
        d1.Name.TaxNumber = "123456789"
        d1.Name.TaxTypeId = "2"

        'added 9/25/2012
        d1.Name.BirthDate = "1/1/1982"
        d1.Name.DriversLicenseDate = "1/1/2013"
        d1.Name.DriversLicenseNumber = "1234-56-7890"
        d1.LicenseStatusId = "2" 'Valid
        d1.DriverExcludeTypeId = "4" 'Included

        d1.Address.HouseNum = "123"
        d1.Address.StreetName = "Test Street"
        d1.Address.City = "Indianapolis"
        d1.Address.Zip = "46227"
        d1.Address.County = "Marion"
        qq.Drivers.Add(d1)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            If err = "" Then
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If
            End If
        End If
    End Sub
    Private Sub CAP_save_test_short2()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto
        qq.EffectiveDate = Date.Today.ToShortDateString '"4/1/2013"'updated 2/3/2014

        'this is only valid for Brewton 1840 (added for testing 8/16/2012)
        'qq.AgencyProducerId = "6525"
        'qq.AgencyProducerCode = "00"

        'added 9/4/2012 for quote or issue/bound
        'qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.Quote
        'qq.IssueBoundEffectiveDate = ""
        qq.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.IssueBound
        qq.IssueBoundEffectiveDate = qq.EffectiveDate

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        qq.Liability_UM_UIM_LimitId = "34" '500,000
        qq.MedicalPaymentsLimitid = "12" '2,000
        qq.HasBusinessMasterEnhancement = True
        'qq.HasFarmPollutionLiability = True 'Farm Truck Pollution Liability requires at least one Truck, Tractor, and Trailer with a Secondary Class of Farmers.
        qq.HasNonOwnershipLiability = True
        qq.NonOwnership_ENO_RatingTypeId = "1" 'Employees Only
        qq.NonOwnershipLiabilityNumberOfEmployees = "3"
        qq.HasHiredBorrowedLiability = True
        qq.ComprehensiveDeductibleId = "10" 'Full
        qq.CollisionDeductibleId = "8" '500
        qq.HasHiredCarPhysicalDamage = True

        'not sure if this will be used but there's a spot to enter locations from the UI
        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        qq.Locations.Add(l1)

        qq.Vehicles = New Generic.List(Of QuickQuoteVehicle)
        Dim v1 As New QuickQuoteVehicle
        v1.Make = "CHEVROLET"
        v1.Model = "1500"
        v1.Year = "1992"
        v1.ClassCode = "01199"
        v1.Vin = "1GCKC39FGNJ109116"
        v1.CostNew = "18000"
        v1.VehicleRatingTypeId = "9" 'Truck, Tractor, or Trailer
        v1.UseCodeTypeId = "28" 'Service
        v1.OperatorTypeId = "0"
        v1.OperatorUseTypeId = "0"
        v1.RadiusTypeId = "1" 'Local, up to 50 miles
        v1.SecondaryClassTypeId = "30" 'Not Otherwise Specified
        v1.SecondaryClassUsageTypeId = "9" 'All Other
        v1.SizeTypeId = "18" 'Light Truck < or equal 10,000 Pounds GVW

        v1.HasCollision = True 'Collision Coverage requires Covered Auto Symbol.
        v1.CollisionDeductibleId = "8" '500
        v1.HasComprehensive = True 'Other Than Collision Coverage requires Covered Auto Symbol.; commented 3/28/2013 to test rental reimbursement
        v1.ComprehensiveDeductibleId = "2" '100
        v1.HasLiability_UM_UIM = True
        v1.HasMedicalPayments = True
        v1.HasRentalReimbursement = True 'Vehicle Num #1 Other Than Collision and Collision Coverage are required when Rental Reimbursement coverage is selected.
        v1.RentalReimbursementDailyReimbursement = "30"
        v1.RentalReimbursementNumberOfDays = "15"
        'v1.HasTowingAndLabor = True 'Vehicle Num #1 Towing and Labor is valid only if Vehicle Rating Type equal Private Passenger Type.

        ''started testing auto symbols 9/26/2012
        'qq.AutoSymbols = New Generic.List(Of QuickQuoteAutoSymbol)
        'Dim s1 As New QuickQuoteAutoSymbol
        's1.AutoSymbolTypeId = "7"
        's1.CoverageCodeId = "3" 'v.HasComprehensive
        'qq.AutoSymbols.Add(s1)
        'Dim s2 As New QuickQuoteAutoSymbol
        's2.AutoSymbolTypeId = "7"
        's2.CoverageCodeId = "5" 'v.HasCollision
        'qq.AutoSymbols.Add(s2)
        ''Dim s3 As New QuickQuoteAutoSymbol 'no error w/ this one, but Liability cov doesn't seem to be on vehicle (might need checkbox = true)
        ''s3.AutoSymbolTypeId = "7"
        ''s3.CoverageCodeId = "2" 'v.HasLiability_UM_UIM
        ''qq.AutoSymbols.Add(s3)
        ' ''appears to be issue adding Medical Payments coverage (might need checkbox = true)
        ''Dim s4 As New QuickQuoteAutoSymbol 'A Covered Auto Symbol was entered for Medical Payments without selecting any Medical Payments Coverage. Remove the Symbol or add a Medical Payments Coverage.
        ''s4.AutoSymbolTypeId = "7"
        ''s4.CoverageCodeId = "60006" 'v.HasMedicalPayments
        ''qq.AutoSymbols.Add(s4)

        'received these messages w/ symbols 3 and 4 and having checkbox = true on vehicle coverages in xml
        'Vehicle #1 - Uninsured Motorist Coverage requires Covered Auto Symbol.
        'Vehicle #1 - Underinsured Motorist Coverage requires Covered Auto Symbol.



        '.WriteStartElement("Coverages")
        'If v.HasLiability_UM_UIM = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "2")
        '    .WriteEndElement() 'Coverage
        'End If
        'If v.HasMedicalPayments = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "60006")
        '    .WriteEndElement() 'Coverage
        'End If
        'If v.HasComprehensive = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("Checkbox", "true")
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "3")
        '    .WriteStartElement("CoverageDetail")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("OtherThanCollisionSubTypeId", "6") 'Comprehensive
        '    .WriteEndElement() 'CoverageDetail
        '    If v.ComprehensiveDeductibleId <> "" Then
        '        .WriteElementString("DeductibleId", v.ComprehensiveDeductibleId)
        '    End If
        '    .WriteEndElement() 'Coverage
        'End If
        'If v.HasCollision = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("Checkbox", "true")
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "5")
        '    If v.CollisionDeductibleId <> "" Then
        '        .WriteElementString("DeductibleId", v.CollisionDeductibleId)
        '    End If
        '    .WriteEndElement() 'Coverage
        'End If
        'If v.HasTowingAndLabor = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("Checkbox", "true")
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "60008")
        '    .WriteEndElement() 'Coverage
        'End If
        'If v.HasRentalReimbursement = True Then
        '    .WriteStartElement("Coverage")
        '    .WriteElementString("IsNew", "true") 'for new quote
        '    .WriteElementString("Checkbox", "true")
        '    .WriteElementString("DetailStatusCode", "1")
        '    .WriteElementString("CoverageCodeID", "10095")
        '    If (v.RentalReimbursementDailyReimbursement <> "" AndAlso IsNumeric(v.RentalReimbursementDailyReimbursement) = True) OrElse (v.RentalReimbursementNumberOfDays <> "" AndAlso IsNumeric(v.RentalReimbursementNumberOfDays) = True) Then
        '        .WriteStartElement("CoverageDetail")
        '        .WriteElementString("IsNew", "true") 'for new quote
        '        If v.RentalReimbursementDailyReimbursement <> "" AndAlso IsNumeric(v.RentalReimbursementDailyReimbursement) = True Then
        '            .WriteElementString("DailyReimbursement", qqHelper.DiamondAmountFormat(v.RentalReimbursementDailyReimbursement))
        '        End If
        '        If v.RentalReimbursementNumberOfDays <> "" AndAlso IsNumeric(v.RentalReimbursementNumberOfDays) = True Then
        '            .WriteElementString("NumberOfDays", v.RentalReimbursementNumberOfDays)
        '        End If
        '        .WriteEndElement() 'CoverageDetail
        '    End If
        '    .WriteEndElement() 'Coverage
        'End If
        '.WriteEndElement() 'Coverages

        '9/5/2012 - will get error if garaging address isn't populated
        v1.GaragingAddress.WithinCity = True
        v1.GaragingAddress.Address.HouseNum = "123"
        v1.GaragingAddress.Address.StreetName = "Test Street"
        v1.GaragingAddress.Address.City = "Indianapolis"
        v1.GaragingAddress.Address.Zip = "46227"
        v1.GaragingAddress.Address.County = "Marion"
        qq.Vehicles.Add(v1)

        'added 2nd vehicle 10/4/2012 (to test IRPM)
        Dim v2 As New QuickQuoteVehicle
        v2.Make = "CHEVY"
        v2.Model = "CORVETTE"
        v2.Year = "1973"
        v2.ClassCode = "7398"
        v2.Vin = "1Z37J354324831111"
        v2.CostNew = "12000"
        v2.VehicleRatingTypeId = "1" 'Private Passenger Type
        v2.UseCodeTypeId = "20" 'Business
        v2.OperatorTypeId = "0"
        v2.OperatorUseTypeId = "0"
        v2.RadiusTypeId = "0" 'N/A
        v2.SecondaryClassTypeId = "0" 'N/A
        v2.SecondaryClassUsageTypeId = "0" 'N/A
        v2.SizeTypeId = "0" 'N/A

        v2.HasCollision = True 'Collision Coverage requires Covered Auto Symbol.; commented 3/28/2013 to test rental reimbursement
        v2.CollisionDeductibleId = "8" '500
        v2.HasComprehensive = True 'Other Than Collision Coverage requires Covered Auto Symbol.
        v2.ComprehensiveDeductibleId = "2" '100
        v2.HasLiability_UM_UIM = True
        v2.HasMedicalPayments = True
        v2.HasRentalReimbursement = True 'Vehicle Num #1 Other Than Collision and Collision Coverage are required when Rental Reimbursement coverage is selected.
        v2.RentalReimbursementDailyReimbursement = "30"
        v2.RentalReimbursementNumberOfDays = "15"
        v2.HasTowingAndLabor = True 'Vehicle Num #1 Towing and Labor is valid only if Vehicle Rating Type equal Private Passenger Type.

        v2.GaragingAddress.WithinCity = True
        v2.GaragingAddress.Address.HouseNum = "123"
        v2.GaragingAddress.Address.StreetName = "Test Street"
        v2.GaragingAddress.Address.City = "Indianapolis"
        v2.GaragingAddress.Address.Zip = "46227"
        v2.GaragingAddress.Address.County = "Marion"
        qq.Vehicles.Add(v2)

        qq.Drivers = New Generic.List(Of QuickQuoteDriver)
        Dim d1 As New QuickQuoteDriver
        'd1.Name.CommercialDBAname = "Don Test Driver"
        'd1.Name.TypeId = "2"
        d1.Name.FirstName = "Don" 'updated to use personal name 10/2/2012
        d1.Name.LastName = "Test"
        d1.Name.TypeId = "1"
        d1.Name.TaxNumber = "123456789"
        'd1.Name.TaxTypeId = "2"
        d1.Name.TaxTypeId = "1"

        'added 9/25/2012
        d1.Name.BirthDate = "1/1/1982"
        d1.Name.DriversLicenseDate = "1/1/2013"
        d1.Name.DriversLicenseNumber = "1234-56-7890"
        d1.LicenseStatusId = "2" 'Valid
        d1.DriverExcludeTypeId = "4" 'Included

        d1.Address.HouseNum = "123"
        d1.Address.StreetName = "Test Street"
        d1.Address.City = "Indianapolis"
        d1.Address.Zip = "46227"
        d1.Address.County = "Marion"
        qq.Drivers.Add(d1)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            If err = "" Then
                'qq = Nothing
                'strQQ = ""
                'ratedQQ = Nothing
                'strRatedQQ = ""
                'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err) 'added to test auto symbols
                'If err = "" Then
                '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                '    If err = "" Then

                '    End If
                'End If
                
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If
            End If
        End If
    End Sub
    Private Sub GL_save_test_short()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

        'qq.Client.ClientId = "216844"'commented out on 8/27/2012

        'qq.QuoteNumber = "Test #"
        qq.QuoteDescription = "Test Desc"
        qq.EffectiveDate = "11/1/2012"

        'added 12/11/2012 for testing
        'qq.BillMethodId = "1" 'Agency Bill
        'qq.BillingPayPlanId = "22" '"14" 'Quarterly 2 (14 must've been for a previous version)
        'qq.CurrentPayplanId = "22" '"14" 'Quarterly 2 (14 must've been for a previous version); this is the one that triggers in Diamond (not BillingPayPlanId)
        ''Agency Bill Options:  20 = Annual 2; 22 = Semi Annual 2; 22 = Quarterly 2
        ''Direct Bill Options:  12 - Annual 2; 13 = Semi Annual 2; 14 = Quarterly 2; 15 = Monthly 2; 16 = EFT Monthly 2; 17 = Credit Card Monthly 2; 18 = Renewal Credit Card Monthly 2; 19 = Renewal EFT Monthly 2; 23 = Annual MTG
        'qq.BillToId = "4" 'Agent

        'test 2 12/11/2012 (to see if EFT would require additional info like acct and routing #; it didn't)
        qq.BillMethodId = "2" 'Direct Bill
        qq.BillingPayPlanId = "19" 'Renewal EFT Monthly 2
        qq.CurrentPayplanId = "19" 'Renewal EFT Monthly 2
        'Agency Bill Options:  20 = Annual 2; 22 = Semi Annual 2; 22 = Quarterly 2
        'Direct Bill Options:  12 - Annual 2; 13 = Semi Annual 2; 14 = Quarterly 2; 15 = Monthly 2; 16 = EFT Monthly 2; 17 = Credit Card Monthly 2; 18 = Renewal Credit Card Monthly 2; 19 = Renewal EFT Monthly 2; 23 = Annual MTG
        qq.BillToId = "1" 'Insured
        'more added 12/12/2012
        qq.EFT_BankAccountNumber = "123"
        qq.EFT_BankAccountTypeId = "2" 'Savings
        qq.EFT_DeductionDay = "5"
        qq.EFT_BankRoutingNumber = "123123123"

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 10/31/2012 for testing

        qq.ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.GeneralAggregateLimitId = "178" '600,000
        qq.ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
        qq.PersonalAndAdvertisingInjuryLimitId = "34" '500,000
        qq.DamageToPremisesRentedLimitId = "10" '100,000
        qq.MedicalExpensesLimitId = "15" '5,000
        'qq.DamageToPremisesRentedLimitId = "33" '300,000 '"177" '400,000
        'qq.MedicalExpensesLimitId = "7" '10,000

        qq.HasBusinessMasterEnhancement = True

        'qq.AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012; commented 11/26/2012 for easier testing

        qq.EmployeeBenefitsLiabilityText = "5" 'number of employees
        qq.EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
        qq.HasHiredAuto = True
        qq.HasNonOwnedAuto = True

        'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
        'fixed 7/18/2012
        'qq.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
        'updated 12/3/2012 to get past liquor liability message
        qq.LiquorLiabilityOccurrenceLimitId = "34" '500,000
        'qq.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
        qq.LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
        qq.LiquorSales = "30000.00"

        qq.ProfessionalLiabilityCemetaryNumberOfBurials = "100"
        qq.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
        qq.ProfessionalLiabilityPastoralNumberOfClergy = "5"

        'added 8/22/2012
        qq.GL_PremisesAndProducts_DeductibleId = "9" '1,000
        qq.GL_PremisesAndProducts_DeductibleCategoryTypeId = "6" 'Property Damage
        qq.GL_PremisesAndProducts_DeductiblePerTypeId = "1" 'Per Occurrence
        qq.GL_PremisesAndProducts_Description = "test description"

        qq.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim gl As New QuickQuoteGLClassification
        gl.ClassCode = "50017"
        gl.ClassDescription = "Abrasives or Abrasive Products Mfg."
        gl.PremiumExposure = "10,000"
        gl.PremiumBase = "Gross Sales"
        gl.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl)
        Dim gl2 As New QuickQuoteGLClassification
        gl2.ClassCode = "51741"
        gl2.ClassDescription = "Candle Mfg"
        gl2.PremiumExposure = "20,000"
        gl2.PremiumBase = "Gross Sales"
        gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl2)
        'added for testing 12/6/2012 (99310 Snow and Ice Removal - contractor); not working (casing on ClassDescription doesn't make a difference)
        'Dim gl3 As New QuickQuoteGLClassification
        'gl3.ClassCode = "99310"
        'gl3.ClassDescription = "Snow and Ice Removal - contractor"
        'gl3.PremiumExposure = "20,000"
        'gl3.PremiumBase = "Payroll"
        'gl3.PremiumBaseShort = "p"
        'qq.GLClassifications.Add(gl3)

        qq.Client.Name.CommercialDBAname = "Don Test DBA"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        qq.Client.Phones.Add(cp1)

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"

        qq.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        qq.Policyholder.Phones.Add(pp1)

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim l1gl As New QuickQuoteGLClassification
        l1gl.ClassCode = "96611"
        l1gl.ClassDescription = "Interior Decorators"
        l1gl.PremiumExposure = "5,000"
        l1gl.PremiumBase = "Payroll"
        l1gl.PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl)
        Dim l1gl2 As New QuickQuoteGLClassification
        l1gl2.ClassCode = "57997"
        l1gl2.ClassDescription = "Photo Finishing Labs"
        l1gl2.PremiumExposure = "30,000"
        l1gl2.PremiumBase = "Gross Sales, Products/Complete"
        l1gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl2)

        qq.Locations.Add(l1)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err) 'added 11/16/2012 to create sample xmls demonstrating re-rate xmls
                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err) 'added 11/16/2012 to create sample xmls demonstrating re-rate xmls
                If err = "" Then

                End If
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"
                'If qq.AdditionalInsureds IsNot Nothing AndAlso qq.AdditionalInsureds.Count > 0 Then
                '    Dim counter As Integer = 1
                '    For Each ai As QuickQuoteAdditionalInsured In qq.AdditionalInsureds
                '        If counter = 1 Then
                '            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.ControllingInterest
                '        ElseIf counter = 2 Then
                '            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors
                '        ElseIf counter = 3 Then
                '            ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.LessorOfLeasedEquipment
                '        End If
                '        counter += 1
                '        If counter = 4 Then
                '            counter = 1
                '        End If
                '    Next
                'End If
                'If qq.AdditionalInsureds IsNot Nothing AndAlso qq.AdditionalInsureds.Count = 1 AndAlso qq.AdditionalInsureds(0).AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.Vendors Then
                '    qq.AdditionalInsureds(0).ManualPremiumAmount = "65.00"

                '    Dim ai2 As New QuickQuoteAdditionalInsured
                '    ai2.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.TownhouseAssociations
                '    ai2.ManualPremiumAmount = "20"
                '    qq.AdditionalInsureds.Add(ai2)
                '    Dim ai3 As New QuickQuoteAdditionalInsured
                '    ai3.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.EngineersArchitectsOrSurveyors
                '    qq.AdditionalInsureds.Add(ai3)
                'End If
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If

                'qq.AdditionalInsuredsManualCharge = ""
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then
                '    qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
                '    If err = "" Then

                '    End If
                'End If
            End If
        End If
    End Sub
    Private Sub WC_save_test()
        quickQuote = New QuickQuoteObject
        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

        'quickQuote.Client.ClientId = "216844"

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "12/13/2012"

        quickQuote.RiskGrade = "1"
        quickQuote.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        quickQuote.EmployersLiabilityId = "311" '100/500/100
        quickQuote.ExperienceModificationFactor = "1.1" 'testing 1.1 on 10/30/2012; was 1
        quickQuote.ExperienceModificationBureauTypeId = "1" 'NCCI; added 11/13/2012
        quickQuote.ExperienceModificationRiskIdentifier = "123" 'added 11/13/2012

        'quickQuote.AnniversaryRatingEffectiveDate = "6/30/2012" 'added 7/17/2012'must be prior to effective date but not more than 1 year (rating success but doesn't set in Diamond)
        ''quickQuote.AnniversaryRatingEffectiveDate = "7/1/2012" 'gets set but rating fails
        'quickQuote.TransactionEffectiveDate = "7/10/2012"
        'quickQuote.GuaranteedRatePeriodEffectiveDate = "6/28/2012" 'added 7/17/2012
        quickQuote.RatingEffectiveDate = "12/13/2011" 'commented for testing 10/30/2012; only use when expModFactor <> 1
        quickQuote.ModificationProductionDate = "12/13/2011" 'commented for testing 10/30/2012
        'quickQuote.AnniversaryRatingEffectiveDate = "12/1/2011" 'commented for testing 10/30/2012

        'added 7/16/2012
        quickQuote.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
        quickQuote.HasWaiverOfSubrogation = True
        quickQuote.WaiverOfSubrogationNumberOfWaivers = "3"
        quickQuote.WaiverOfSubrogationPremiumId = "3" '50
        quickQuote.HasExclusionOfAmishWorkers = True
        quickQuote.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True

        quickQuote.Client.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Client.Name.TypeId = "2"
        quickQuote.Client.Name.TaxNumber = "123456789"
        quickQuote.Client.Name.TaxTypeId = "2"
        quickQuote.Client.Address.HouseNum = "123"
        quickQuote.Client.Address.StreetName = "Test Street"
        quickQuote.Client.Address.City = "Indianapolis"
        quickQuote.Client.Address.Zip = "46227"
        quickQuote.Client.Address.County = "Marion"

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Policyholder.Name.TypeId = "2"
        quickQuote.Policyholder.Name.TaxNumber = "123456789"
        quickQuote.Policyholder.Name.TaxTypeId = "2"
        quickQuote.Policyholder.Address.HouseNum = "123"
        quickQuote.Policyholder.Address.StreetName = "Test Street"
        quickQuote.Policyholder.Address.City = "Indianapolis"
        quickQuote.Policyholder.Address.Zip = "46227"
        quickQuote.Policyholder.Address.County = "Marion"

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"

        l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        Dim c1 As New QuickQuoteClassification
        c1.ClassificationTypeId = "450"
        c1.Description = "Abrasive paper or cloth preparation"
        c1.NumberOfEmployees = "2"
        c1.Payroll = "30000"
        l1.Classifications.Add(c1)
        Dim c2 As New QuickQuoteClassification
        c2.ClassificationTypeId = "592"
        c2.Description = "Brandy distillery"
        c2.NumberOfEmployees = "3"
        c2.Payroll = "45000"
        l1.Classifications.Add(c2)

        'added loc name 7/10/2012
        'l1.Name.DisplayName = "Mrs Rating Indiana Farmers"
        'l1.Name.FirstName = "Rating"
        'l1.Name.LastName = "Farmers"
        'l1.Name.MiddleName = "Indiana"
        'l1.Name.SexId = "2"
        'l1.Name.SortName = "Farmers Rating Indiana Mrs"
        'l1.Name.TypeId = "1" 'Personal
        l1.Name.CommercialDBAname = "Test Commercial Name1"
        l1.Name.CommercialIRSname = "Test Commercial Name2"
        l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        l1.Name.TypeId = "2" 'Commercial

        quickQuote.Locations.Add(l1)

        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
        If err = "" Then
            'okay
            quickQuote = Nothing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err = "" Then
                'okay getting
                quickQuote = Nothing
                qqxml.GetRatedQuote(qId, quickQuote, QuickQuoteXML.QuickQuoteSaveType.Quote, err)
                If err = "" Then
                    'okay
                End If
            End If
            'testing 9/7/2012
            quickQuote = Nothing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
            If err = "" Then
                'quickQuote.PriorCarrier.PreviousInsurerTypeId = "81" 'GEICO; get types/ids from Diamond's PreviousInsurer table
                'quickQuote.PriorCarrier.PriorDurationTypeId = "1" 'Years; get types/ids from Diamond's PriorCarrierDurationType table
                'quickQuote.PriorCarrier.PriorDurationWithCompany = "10"
                'quickQuote.PriorCarrier.RolloverId = "7" 'Yes; 8=No; get types/ids from Diamond's PriorCarrierRollover table
                'quickQuote.PriorCarrier.PriorPolicy = "1234567890"
                'quickQuote.PriorCarrier.PriorExpirationDate = "1/1/2012"
                'quickQuote.PriorCarrier.Remarks = "Test Remarks"
                quickQuote.PriorCarrier.PreviousInsurerTypeId = "0" 'None
                quickQuote.PriorCarrier.Name.CommercialDBAname = "None"
                quickQuote.InclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
                Dim isp As New QuickQuoteInclusionOfSoleProprietorRecord
                isp.Name.CommercialDBAname = "Don isp Test"
                isp.Name.TypeId = "2"
                isp.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.InclusionOfSoleProprietorRecords.Add(isp)
                quickQuote.ExclusionOfAmishWorkerRecords = New Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
                Dim eaw As New QuickQuoteExclusionOfAmishWorkerRecord
                eaw.Name.CommercialDBAname = "Don eaw Test"
                eaw.Name.TypeId = "2"
                eaw.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.ExclusionOfAmishWorkerRecords.Add(eaw)
                quickQuote.ExclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
                Dim esp As New QuickQuoteExclusionOfSoleProprietorRecord
                esp.Name.CommercialDBAname = "Don esp Test"
                esp.Name.TypeId = "2"
                esp.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.ExclusionOfSoleProprietorRecords.Add(esp)
                quickQuote.WaiverOfSubrogationRecords = New Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
                Dim ws As New QuickQuoteWaiverOfSubrogationRecord
                ws.Name.CommercialDBAname = "Don ws Test"
                ws.Name.TypeId = "2"
                ws.PremiumId = "2" '25; added 11/13/2012 for testing
                quickQuote.WaiverOfSubrogationRecords.Add(ws)

                ''9/10/2012 - test (trying to break and duplicate what Rob's app was doing)
                'quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
                'l1 = New QuickQuoteLocation
                'l1.Address.HouseNum = "123"
                'l1.Address.StreetName = "Test Street"
                'l1.Address.City = "Indianapolis"
                'l1.Address.Zip = "46227"
                'l1.Address.County = "Marion"
                'quickQuote.Locations.Add(l1)

                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, qId, err)
                If err = "" Then
                    'quickQuote = Nothing
                    'qqxml.GetRatedQuote(qId, quickQuote, QuickQuoteXML.QuickQuoteSaveType.AppGap, err)
                    'If err = "" Then
                    '    'okay
                    '    quickQuote = Nothing
                    '    qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
                    '    If err = "" Then
                    '        'okay
                    '        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, qId, err)
                    '        If err = "" Then
                    '            quickQuote = Nothing
                    '            qqxml.GetRatedQuote(qId, quickQuote, QuickQuoteXML.QuickQuoteSaveType.AppGap, err)
                    '            If err = "" Then

                    '            End If
                    '        End If
                    '    End If
                    'End If
                End If
            End If
        Else
            'error
        End If
    End Sub
    Private Sub WC_save_test_new()
        quickQuote = New QuickQuoteObject
        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.WorkersCompensation

        'quickQuote.Client.ClientId = "216844"

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "6/20/2013" '"12/13/2012"

        quickQuote.RiskGrade = "1"
        quickQuote.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        quickQuote.EmployersLiabilityId = "311" '100/500/100
        quickQuote.ExperienceModificationFactor = "1.1" 'testing 1.1 on 10/30/2012; was 1
        quickQuote.ExperienceModificationBureauTypeId = "1" 'NCCI; added 11/13/2012
        quickQuote.ExperienceModificationRiskIdentifier = "123" 'added 11/13/2012

        'quickQuote.AnniversaryRatingEffectiveDate = "6/30/2012" 'added 7/17/2012'must be prior to effective date but not more than 1 year (rating success but doesn't set in Diamond)
        ''quickQuote.AnniversaryRatingEffectiveDate = "7/1/2012" 'gets set but rating fails
        'quickQuote.TransactionEffectiveDate = "7/10/2012"
        'quickQuote.GuaranteedRatePeriodEffectiveDate = "6/28/2012" 'added 7/17/2012
        quickQuote.RatingEffectiveDate = "12/13/2012" 'commented for testing 10/30/2012; only use when expModFactor <> 1
        quickQuote.ModificationProductionDate = "12/13/2012" 'commented for testing 10/30/2012
        quickQuote.AnniversaryRatingEffectiveDate = "12/13/2012" 'commented for testing 10/30/2012

        'added 7/16/2012
        quickQuote.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
        quickQuote.HasWaiverOfSubrogation = True
        quickQuote.WaiverOfSubrogationNumberOfWaivers = "3"
        quickQuote.WaiverOfSubrogationPremiumId = "3" '50
        quickQuote.HasExclusionOfAmishWorkers = True
        quickQuote.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True

        quickQuote.Client.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Client.Name.TypeId = "2"
        quickQuote.Client.Name.TaxNumber = "123456789"
        quickQuote.Client.Name.TaxTypeId = "2"
        quickQuote.Client.Address.HouseNum = "123"
        quickQuote.Client.Address.StreetName = "Test Street"
        quickQuote.Client.Address.City = "Indianapolis"
        quickQuote.Client.Address.Zip = "46227"
        quickQuote.Client.Address.County = "Marion"

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Policyholder.Name.TypeId = "2"
        quickQuote.Policyholder.Name.TaxNumber = "123456789"
        quickQuote.Policyholder.Name.TaxTypeId = "2"
        quickQuote.Policyholder.Address.HouseNum = "123"
        quickQuote.Policyholder.Address.StreetName = "Test Street"
        quickQuote.Policyholder.Address.City = "Indianapolis"
        quickQuote.Policyholder.Address.Zip = "46227"
        quickQuote.Policyholder.Address.County = "Marion"

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"

        l1.Classifications = New Generic.List(Of QuickQuoteClassification)
        Dim c1 As New QuickQuoteClassification
        c1.ClassificationTypeId = "450"
        c1.Description = "Abrasive paper or cloth preparation"
        c1.NumberOfEmployees = "2"
        c1.Payroll = "30000"
        l1.Classifications.Add(c1)
        Dim c2 As New QuickQuoteClassification
        c2.ClassificationTypeId = "592"
        c2.Description = "Brandy distillery"
        c2.NumberOfEmployees = "3"
        c2.Payroll = "45000"
        l1.Classifications.Add(c2)

        'added loc name 7/10/2012
        'l1.Name.DisplayName = "Mrs Rating Indiana Farmers"
        'l1.Name.FirstName = "Rating"
        'l1.Name.LastName = "Farmers"
        'l1.Name.MiddleName = "Indiana"
        'l1.Name.SexId = "2"
        'l1.Name.SortName = "Farmers Rating Indiana Mrs"
        'l1.Name.TypeId = "1" 'Personal
        l1.Name.CommercialDBAname = "Test Commercial Name1"
        l1.Name.CommercialIRSname = "Test Commercial Name2"
        l1.Name.DoingBusinessAsName = "Test Commercial DBA name"
        l1.Name.TypeId = "2" 'Commercial

        quickQuote.Locations.Add(l1)

        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        'testing 7/2/2013
        Dim policyId As String = ""
        Dim policyImageNum As String = ""
        Dim policyImageId As String = ""

        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            'okay

            'testing 7/2/2013
            policyId = ratedQQ.PolicyId
            policyImageNum = ratedQQ.PolicyImageNum
            policyImageId = ratedQQ.PolicyImageId

            quickQuote = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
            If err = "" Then
                'testing 7/2/2013
                quickQuote.PolicyId = policyId
                quickQuote.PolicyImageNum = policyImageNum
                quickQuote.PolicyImageId = policyImageId

                'quickQuote.PriorCarrier.PreviousInsurerTypeId = "81" 'GEICO; get types/ids from Diamond's PreviousInsurer table
                'quickQuote.PriorCarrier.PriorDurationTypeId = "1" 'Years; get types/ids from Diamond's PriorCarrierDurationType table
                'quickQuote.PriorCarrier.PriorDurationWithCompany = "10"
                'quickQuote.PriorCarrier.RolloverId = "7" 'Yes; 8=No; get types/ids from Diamond's PriorCarrierRollover table
                'quickQuote.PriorCarrier.PriorPolicy = "1234567890"
                'quickQuote.PriorCarrier.PriorExpirationDate = "1/1/2012"
                'quickQuote.PriorCarrier.Remarks = "Test Remarks"
                quickQuote.PriorCarrier.PreviousInsurerTypeId = "0" 'None
                quickQuote.PriorCarrier.Name.CommercialDBAname = "None"

                'testing 1/10/2013 to see if setting name would make it show on Acord app (it does; uses displayName, which we set when name is set)
                'quickQuote.PriorCarrier.PreviousInsurerTypeId = "22" 'FRANKENMUTH
                'quickQuote.PriorCarrier.Name.CommercialDBAname = "FRANKENMUTH"
                'quickQuote.PriorCarrier.PriorDurationTypeId = "1" 'years
                'quickQuote.PriorCarrier.PriorDurationWithCompany = "3"
                'quickQuote.PriorCarrier.RolloverId = "8" 'No
                'quickQuote.PriorCarrier.PriorPolicy = "ABCDEFG"
                'quickQuote.PriorCarrier.Remarks = "Test"
                'quickQuote.PriorCarrier.PriorExpirationDate = "1/1/2013"

                quickQuote.InclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
                Dim isp As New QuickQuoteInclusionOfSoleProprietorRecord
                isp.Name.CommercialDBAname = "Don isp Test"
                isp.Name.TypeId = "2"
                isp.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.InclusionOfSoleProprietorRecords.Add(isp)
                quickQuote.ExclusionOfAmishWorkerRecords = New Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
                Dim eaw As New QuickQuoteExclusionOfAmishWorkerRecord
                eaw.Name.CommercialDBAname = "Don eaw Test"
                eaw.Name.TypeId = "2"
                eaw.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.ExclusionOfAmishWorkerRecords.Add(eaw)
                quickQuote.ExclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
                Dim esp As New QuickQuoteExclusionOfSoleProprietorRecord
                esp.Name.CommercialDBAname = "Don esp Test"
                esp.Name.TypeId = "2"
                esp.PositionTitleTypeId = "0" 'Not Assigned; added 11/13/2012 for testing
                quickQuote.ExclusionOfSoleProprietorRecords.Add(esp)
                quickQuote.WaiverOfSubrogationRecords = New Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
                Dim ws As New QuickQuoteWaiverOfSubrogationRecord
                ws.Name.CommercialDBAname = "Don ws Test"
                ws.Name.TypeId = "2"
                ws.PremiumId = "2" '25; added 11/13/2012 for testing
                quickQuote.WaiverOfSubrogationRecords.Add(ws)

                ''9/10/2012 - test (trying to break and duplicate what Rob's app was doing)
                'quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
                'l1 = New QuickQuoteLocation
                'l1.Address.HouseNum = "123"
                'l1.Address.StreetName = "Test Street"
                'l1.Address.City = "Indianapolis"
                'l1.Address.Zip = "46227"
                'l1.Address.County = "Marion"
                'quickQuote.Locations.Add(l1)

                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
                If err = "" Then

                End If
            End If
        Else
            'error
        End If
    End Sub
    Private Sub GL_save_test()
        quickQuote = New QuickQuoteObject
        quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability

        'quickQuote.Client.ClientId = "216844"'commented out on 8/27/2012

        'quickQuote.QuoteNumber = "Test #"
        quickQuote.QuoteDescription = "Test Desc"
        quickQuote.EffectiveDate = "7/1/2012"

        quickQuote.RiskGrade = "1"
        quickQuote.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        quickQuote.ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
        quickQuote.OccurrenceLiabilityLimitId = "34" '500,000
        quickQuote.GeneralAggregateLimitId = "178" '600,000
        quickQuote.ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
        quickQuote.PersonalAndAdvertisingInjuryLimitId = "34" '500,000
        quickQuote.DamageToPremisesRentedLimitId = "10" '100,000
        quickQuote.MedicalExpensesLimitId = "15" '5,000

        quickQuote.HasBusinessMasterEnhancement = True

        quickQuote.AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012

        quickQuote.EmployeeBenefitsLiabilityText = "5" 'number of employees
        quickQuote.EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
        quickQuote.HasHiredAuto = True
        quickQuote.HasNonOwnedAuto = True

        'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
        'fixed 7/18/2012
        quickQuote.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
        'quickQuote.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
        quickQuote.LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
        quickQuote.LiquorSales = "30000.00"

        quickQuote.ProfessionalLiabilityCemetaryNumberOfBurials = "100"
        quickQuote.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
        quickQuote.ProfessionalLiabilityPastoralNumberOfClergy = "5"

        'added 8/22/2012
        quickQuote.GL_PremisesAndProducts_DeductibleId = "9" '1,000
        quickQuote.GL_PremisesAndProducts_DeductibleCategoryTypeId = "6" 'Property Damage
        quickQuote.GL_PremisesAndProducts_DeductiblePerTypeId = "1" 'Per Occurrence
        quickQuote.GL_PremisesAndProducts_Description = "test description"

        quickQuote.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim gl As New QuickQuoteGLClassification
        gl.ClassCode = "50017"
        gl.ClassDescription = "Abrasives or Abrasive Products Mfg."
        gl.PremiumExposure = "10,000"
        gl.PremiumBase = "Gross Sales"
        gl.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        quickQuote.GLClassifications.Add(gl)
        Dim gl2 As New QuickQuoteGLClassification
        gl2.ClassCode = "51741"
        gl2.ClassDescription = "Candle Mfg"
        gl2.PremiumExposure = "20,000"
        gl2.PremiumBase = "Gross Sales"
        gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        quickQuote.GLClassifications.Add(gl2)

        quickQuote.Client.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Client.Name.TypeId = "2"
        quickQuote.Client.Name.TaxNumber = "123456789"
        quickQuote.Client.Name.TaxTypeId = "2"
        quickQuote.Client.Address.HouseNum = "123"
        quickQuote.Client.Address.StreetName = "Test Street"
        quickQuote.Client.Address.City = "Indianapolis"
        quickQuote.Client.Address.Zip = "46227"
        quickQuote.Client.Address.County = "Marion"

        quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
        Dim cp1 As New QuickQuotePhone
        cp1.Number = "(312)555-5557"
        quickQuote.Client.Phones.Add(cp1)

        quickQuote.Policyholder.Name.CommercialDBAname = "Don Test DBA"
        quickQuote.Policyholder.Name.TypeId = "2"
        quickQuote.Policyholder.Name.TaxNumber = "123456789"
        quickQuote.Policyholder.Name.TaxTypeId = "2"
        quickQuote.Policyholder.Address.HouseNum = "123"
        quickQuote.Policyholder.Address.StreetName = "Test Street"
        quickQuote.Policyholder.Address.City = "Indianapolis"
        quickQuote.Policyholder.Address.Zip = "46227"
        quickQuote.Policyholder.Address.County = "Marion"

        quickQuote.Policyholder.Phones = New Generic.List(Of QuickQuotePhone)
        Dim pp1 As New QuickQuotePhone
        pp1.Number = "(312)555-5557"
        quickQuote.Policyholder.Phones.Add(pp1)

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Test Loc 1"

        l1.Address.City = "Indianapolis"
        l1.Address.County = "Marion"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.Zip = "46227-0000"

        l1.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim l1gl As New QuickQuoteGLClassification
        l1gl.ClassCode = "96611"
        l1gl.ClassDescription = "Interior Decorators"
        l1gl.PremiumExposure = "5,000"
        l1gl.PremiumBase = "Payroll"
        l1gl.PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl)
        Dim l1gl2 As New QuickQuoteGLClassification
        l1gl2.ClassCode = "57997"
        l1gl2.ClassDescription = "Photo Finishing Labs"
        l1gl2.PremiumExposure = "30,000"
        l1gl2.PremiumBase = "Gross Sales, Products/Complete"
        l1gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl2)

        quickQuote.Locations.Add(l1)

        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
        If err = "" Then
            'okay
            quickQuote = Nothing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err = "" Then
                'okay getting
                quickQuote = Nothing
                qqxml.GetRatedQuote(qId, quickQuote, QuickQuoteXML.QuickQuoteSaveType.Quote, err)
                If err = "" Then
                    'okay
                End If
            End If
        Else
            'error
        End If
    End Sub
    Private Sub CPR_save_test_short()
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialProperty
        qq.EffectiveDate = Date.Today '"4/1/2013" 'updated 12/20/2013
        'qq.ExpirationDate = "5/1/2013"'11/15/2012 - test for Sherry to see if Diamond would take 6-month term; problem came from user going thru comparative rater services (Diamond did allow and returned 6-month rate)

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.PolicyTypeId = "60" 'Standard
        qq.HasBusinessMasterEnhancement = True

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"
        'testing 2/15/2013
        'qq.Client.Address.County = "La Porte"'works; can't use LaPorte (should only make difference on Location)
        'qq.Client.Address.County = "Davies" 'doesn't work; need to use Daviess (should only make difference on Location)

        '*added 3/5/2013 for testing arbitrary fields in xml
        'qq.Client.Name.TestNameField = "Don Test Client Name Field"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'testing 2/15/2013
        'qq.Policyholder.Address.County = "La Porte"'works; can't use LaPorte (should only make difference on Location)
        'qq.Policyholder.Address.County = "Davies" 'doesn't work; need to use Daviess (should only make difference on Location)
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        '*added 3/5/2013 for testing arbitrary fields in xml
        'qq.Policyholder.Name.TestNameField = "Don Test Policyholder Name Field"

        '*added 3/5/2013 for testing arbitrary fields in xml
        'qq.TestObjects = New Generic.List(Of TestObject)
        'Dim t1 As New TestObject
        't1.Description = "Don Test Object 1"
        't1.TestFlag = True
        't1.TestDate = "1/1/1990"
        'qq.TestObjects.Add(t1)
        'Dim t2 As New TestObject
        't2.Description = "Don Test Object 2"
        't2.TestFlag = False
        't2.TestDate = "1/1/1980"
        'qq.TestObjects.Add(t2)

        'added 3/26/2013 for Blanket
        'qq.HasBlanketBuilding = True
        'qq.HasBlanketContents = True
        qq.HasBlanketBuildingAndContents = True
        'qq.HasBlanketBusinessIncome = True
        'qq.BlanketBuildingCauseOfLossTypeId = "3" 'Special Form Including Theft
        'qq.BlanketContentsCauseOfLossTypeId = "3" 'Special Form Including Theft
        'qq.BlanketBuildingAndContentsCauseOfLossTypeId = "3" 'Special Form Including Theft
        'qq.BlanketBusinessIncomeCauseOfLossTypeId = "3" 'Special Form Including Theft

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        'testing 2/15/2013
        'l1.Address.County = "La Porte"'works; can't use LaPorte (should only make difference on Location)
        'l1.Address.County = "Davies" 'doesn't work; need to use Daviess (should only make difference on Location)
        l1.ProtectionClassId = "12" '01

        'l1.CauseOfLossTypeId = "1" 'Basic Form (At least one location must have a Special Form Cause of Loss.)
        l1.CauseOfLossTypeId = "3" 'Special Form Including Theft
        l1.DeductibleId = "9" '1,000
        'l1.CoinsuranceTypeId = "2" '50% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        l1.CoinsuranceTypeId = "0" 'N/A
        l1.ValuationMethodTypeId = "2" 'Actual Cash Value
        l1.EquipmentBreakdownDeductibleId = "8" '500
        l1.EquipmentBreakdownOccupancyTypeId = "8" 'Athletic Clubs
        l1.ClassificationCode.ClassCode = "0844"
        l1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        l1.ClassificationCode.PMA = "Service"

        'added 3/20/2013 for testing
        l1.PropertyInTheOpenRecords = New Generic.List(Of QuickQuotePropertyInTheOpenRecord)
        Dim p As New QuickQuotePropertyInTheOpenRecord
        p.Description = "Test Desc"
        p.Limit = "1000"
        p.IncludedInBlanketCoverage = True
        p.ConstructionTypeId = "1" 'Frame '"2" 'Frame
        p.EarthquakeApplies = True
        p.RatingTypeId = "3" 'Special Class Rate
        p.CauseOfLossTypeId = "3" 'Special Form Including Theft
        p.DeductibleId = "15" '2,500
        p.CoinsuranceTypeId = "5" '80% '"4" '70%
        p.ValuationId = "1" 'Replacement Cost
        p.OptionalTheftDeductibleId = "8" '500
        p.OptionalWindstormOrHailDeductibleId = "8" '500
        p.InflationGuardTypeId = "1" '2
        p.FeetToFireHydrant = "50"
        p.MilesToFireDepartment = "1"
        p.SpecialClassCodeTypeId = "1" 'Masonry or Metal with no combustible wrapping or pallets
        p.ProtectionClassId = "12" '01
        l1.PropertyInTheOpenRecords.Add(p)
        Dim p2 As New QuickQuotePropertyInTheOpenRecord
        p2.Description = "Test Desc2"
        p2.Limit = "2000"
        p2.IncludedInBlanketCoverage = True
        p2.ConstructionTypeId = "1" 'Frame '"2" 'Frame
        p2.EarthquakeApplies = True
        p2.RatingTypeId = "3" 'Special Class Rate
        p2.CauseOfLossTypeId = "3" 'Special Form Including Theft
        p2.DeductibleId = "15" '2,500
        p2.CoinsuranceTypeId = "5" '80% '"4" '70%
        p2.ValuationId = "1" 'Replacement Cost
        p2.OptionalTheftDeductibleId = "8" '500
        p2.OptionalWindstormOrHailDeductibleId = "8" '500
        p2.InflationGuardTypeId = "1" '2
        p2.FeetToFireHydrant = "50"
        p2.MilesToFireDepartment = "1"
        p2.SpecialClassCodeTypeId = "4" 'Aircraft Stored In The Open
        p2.ProtectionClassId = "12" '01
        l1.PropertyInTheOpenRecords.Add(p2)


        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim b1 As New QuickQuoteBuilding
        b1.Description = "Loc 1 Build 1"
        'could set b1.ClassificationCode(Can't calculate Building Coverage without specified Class Code for location #1, building #1.)
        b1.ClassificationCode.ClassCode = "0844"
        'b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.ClassificationCode.PMA = "Service"
        'b1.ConstructionId = "7" 'Frame (10/18/2012:  7 is only valid for BOP)
        b1.ConstructionId = "2" 'Frame
        'b1.EarthquakeBuildingClassificationTypeId = "0" 'N/A
        b1.EarthquakeBuildingClassificationTypeId = "12" '2A - All-metal buildings which are one story in height and 20,000 sq. ft. or less of ground floor space. (testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012)
        b1.PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores (rate_grade = 1); added 10/23/2012

        b1.Limit = "120000"
        b1.InflationGuardTypeId = "1" '2
        b1.EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.RatingTypeId = "2" 'Specific Rated
        'b1.RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012); 10/11/2012 - There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.
        b1.CauseOfLossTypeId = "2" 'Broad Form
        b1.DeductibleId = "8" '500
        b1.CoinsuranceTypeId = "3" '60%
        b1.ValuationId = "1" 'Replacement Cost
        b1.IsBuildingValIncludedInBlanketRating = True 'added 3/26/2013 for Blanket

        b1.PersPropCov_PersonalPropertyLimit = "110000"
        b1.PersPropCov_PropertyTypeId = "7" 'Personal Property - Including Stock
        b1.PersPropCov_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        'b1.PersPropCov_EarthquakeApplies = False
        b1.PersPropCov_EarthquakeApplies = True 'testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012
        'b1.PersPropCov_RatingTypeId = "1" 'Class Rated (10/15/2012 error:  Location #1 - Building #1 - Personal Property Coverage with Risk Type 'Type 3 - All Other Personal Property' must be Specific Rated for Class Code 0844.)
        b1.PersPropCov_RatingTypeId = "2" 'Specific Rated
        b1.PersPropCov_CauseOfLossTypeId = "3" 'Special Form Including Theft
        b1.PersPropCov_DeductibleId = "15" '2,500
        b1.PersPropCov_CoinsuranceTypeId = "4" '70%
        b1.PersPropCov_ValuationId = "1" 'Replacement Cost
        'could set b1.PersPropCov_ClassificationCode
        b1.PersPropCov_ClassificationCode.ClassCode = "0844"
        b1.PersPropCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropCov_ClassificationCode.PMA = "Service"
        '10/15/2012 - testing after error:  Location #1 - Building #1 - Personal Property - Unable to get territory factor: Invalid PMA for class code 0844.
        'b1.PersPropCov_ClassificationCode.ClassCode = "0311"
        'b1.PersPropCov_ClassificationCode.ClassDescription = "Apartment Buildings"
        'b1.PersPropCov_ClassificationCode.PMA = "Apartment House"
        b1.PersPropCov_DoesYardRateApplyTypeId = "1" 'Yes (0=N/A; 1=Yes; 2=No); added 1/2/2013
        b1.PersPropCov_IncludedInBlanketCoverage = True 'added 3/26/2013 for Blanket

        b1.PersPropOfOthers_PersonalPropertyLimit = "127000"
        b1.PersPropOfOthers_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        b1.PersPropOfOthers_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.PersPropOfOthers_RatingTypeId = "2" 'Specific Rated
        'b1.PersPropOfOthers_RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012)
        b1.PersPropOfOthers_CauseOfLossTypeId = "4" 'Special Form Excluding Theft
        b1.PersPropOfOthers_DeductibleId = "16" '5,000
        b1.PersPropOfOthers_CoinsuranceTypeId = "5" '80%
        'b1.PersPropOfOthers_ValuationId = "3" 'Functional Building Valuation
        b1.PersPropOfOthers_ValuationId = "7" 'Functional Replacement Cost
        'could set b1.PersPropOfOthers_ClassificationCode
        b1.PersPropOfOthers_ClassificationCode.ClassCode = "0844"
        'b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropOfOthers_ClassificationCode.PMA = "Service"
        b1.PersPropOfOthers_DoesYardRateApplyTypeId = "1" 'Yes (0=N/A; 1=Yes; 2=No); added 1/2/2013
        b1.PersPropOfOthers_IncludedInBlanketCoverage = True 'added 3/26/2013 for Blanket

        'Error as-of 10/15/2012:  Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        b1.BusinessIncomeCov_Limit = "117000"
        'b1.BusinessIncomeCov_CoinsuranceTypeId = "6" '90% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        b1.BusinessIncomeCov_CoinsuranceTypeId = "0" 'N/A (commented 11/13/2012 to see if it matters)
        b1.BusinessIncomeCov_MonthlyPeriodTypeId = "2" '1/4; note 3/26/2013:  can't use w/ included in blanket (Cannot have Blanket checked if Monthly Period or Maximum Period was selected.)
        b1.BusinessIncomeCov_BusinessIncomeTypeId = "3" 'Business Income Other than Rental Value With Extra Expense
        'b1.BusinessIncomeCov_RiskTypeId = "7" 'Manufacturing; Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        'b1.BusinessIncomeCov_RiskTypeId = "0" 'N/A; Location #1 - Building #1 - A valid Risk Type must be selected for Business Income Coverage.
        b1.BusinessIncomeCov_RiskTypeId = "9" 'Rental Properties
        b1.BusinessIncomeCov_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012 (error:  Error in CalculateBusinessIncomeTimeElementEarthquakePremium: Object reference not set to an instance of an object.)
        b1.NumberOfStories = "2" 'added 11/13/2012 to hopefully work w/ business income EQ (this is needed (also needed to set CoverageBasisTypeId):  Error calculating Business Income Time Element Earthquake coverage for location #1, building #1: Number of stories cannot be 0.)
        'testing 11/9/2012 to see if I can add it after getting into Diamond and find difference in XML
        'b1.BusinessIncomeCov_EarthquakeApplies = False
        'b1.BusinessIncomeCov_RatingTypeId = "1" 'Class Rated (There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.)
        b1.BusinessIncomeCov_RatingTypeId = "2" 'Specific Rated
        b1.BusinessIncomeCov_CauseOfLossTypeId = "1" 'Basic form
        'could set b1.BusinessIncomeCov_ClassificationCode
        b1.BusinessIncomeCov_ClassificationCode.ClassCode = "0844"
        'b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.BusinessIncomeCov_ClassificationCode.PMA = "Service"
        b1.BusinessIncomeCov_WaitingPeriodTypeId = "3" '72 (previous validation message:  Location #1 - Building #1 - Please select Waiting Period on Business Income Coverage.)
        'b1.BusinessIncomeCov_IncludedInBlanketCoverage = True 'added 3/26/2013 for Blanket; note 3/26/2013:  can't use w/ BusinessIncomeCov_MonthlyPeriodTypeId (Cannot have Blanket checked if Monthly Period or Maximum Period was selected.)

        'commented out 10/10/2012 since they're not working right now
        'b1.Building_BusinessIncome_Group1_Rate = ".924" '".7"
        'b1.Building_BusinessIncome_Group2_Rate = ".924" '".2"
        'b1.PersonalProperty_Group1_Rate = ".924" '".6"
        'b1.PersonalProperty_Group2_Rate = ".924" '".15"

        'works when just setting LossCost (as-of 11/5/2012)
        b1.Building_BusinessIncome_Group1_LossCost = "0.450" '".4"
        b1.Building_BusinessIncome_Group2_LossCost = "0.450" '".1"
        b1.PersonalProperty_Group1_LossCost = "0.450" '".3"
        b1.PersonalProperty_Group2_LossCost = "0.450" '".05"

        'added 11/29/2012 for testing
        b1.OptionalTheftDeductibleId = "8" '500
        b1.OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropCov_OptionalTheftDeductibleId = "8" '500
        b1.PersPropCov_OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalTheftDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalWindstormOrHailDeductibleId = "8" '500

        'added for testing 12/5/2012; isn't working yet for CPP (works here for CPR though)
        'b1.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        'Dim ai As New QuickQuoteAdditionalInterest
        'ai.Name = qq.Client.Name
        'ai.Address = qq.Client.Address
        'ai.Description = "Test AI Description"
        'ai.Other = ""
        'ai.TypeId = "65" 'Loss Payable - Loss Payable
        'b1.AdditionalInterests.Add(ai)

        l1.Buildings.Add(b1)

        qq.Locations.Add(l1)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            If err = "" Then
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"
                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If
                'Response.Redirect("DiamondQuoteSummary.aspx?quoteId=" & qId)
            End If
        End If
    End Sub
    Private Sub CPP_save_test_short() 'created 11/14/2012 - basically CPR w/ CGL mixed in
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage
        qq.QuoteDescription = "Test GL Prem/Products deductible 2 (on GL packagepart only)" 'added 3/8/2013 to specify for testing
        qq.EffectiveDate = "3/1/2013"
        qq.PackageTypeId = "1" 'CPP
        'qq.PackageTypeId = "2" 'POP
        'qq.PackageModificationAssignmentTypeId = "0" 'N/A
        '11/19/2012 errors (okay now that these are just being added to main package part type section):  Property Detail #2: Please select a Package Modification Assignment Type; General Liability Detail #3: Error in GetCPPPackageModificationFactor: Unable to locate Y Axis (Table[PackageFactors] Value[0])
        '11/29/2012 - updated logic to only send package type and PMA on main package part unless PMA id is something other than 0
        'qq.PackageModificationAssignmentTypeId = "1" 'Apartment House Risk
        qq.PackageModificationAssignmentTypeId = "4" 'Industrial and Processing Risk (testing 11/27/2012)

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.PolicyTypeId = "60" 'Standard
        'qq.HasBusinessMasterEnhancement = True
        qq.Has_PackageCPR_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

        '--------------CGL start-------------------
        qq.ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.GeneralAggregateLimitId = "178" '600,000
        qq.ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
        qq.PersonalAndAdvertisingInjuryLimitId = "34" '500,000
        qq.DamageToPremisesRentedLimitId = "10" '100,000
        qq.MedicalExpensesLimitId = "15" '5,000
        'qq.DamageToPremisesRentedLimitId = "33" '300,000 '"177" '400,000
        'qq.MedicalExpensesLimitId = "7" '10,000

        'qq.HasBusinessMasterEnhancement = True
        qq.Has_PackageGL_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

        qq.AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012

        qq.EmployeeBenefitsLiabilityText = "5" 'number of employees
        qq.EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
        qq.HasHiredAuto = True
        qq.HasNonOwnedAuto = True

        'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
        'fixed 7/18/2012
        'qq.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
        'updated 12/3/2012 to get past liquor liability message
        qq.LiquorLiabilityOccurrenceLimitId = "34" '500,000
        'qq.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
        qq.LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
        qq.LiquorSales = "30000.00"

        qq.ProfessionalLiabilityCemetaryNumberOfBurials = "100"
        qq.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
        qq.ProfessionalLiabilityPastoralNumberOfClergy = "5"

        'added 8/22/2012
        qq.GL_PremisesAndProducts_DeductibleId = "9" '1,000
        qq.GL_PremisesAndProducts_DeductibleCategoryTypeId = "6" 'Property Damage
        qq.GL_PremisesAndProducts_DeductiblePerTypeId = "1" 'Per Occurrence
        qq.GL_PremisesAndProducts_Description = "test description"

        qq.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim gl As New QuickQuoteGLClassification
        gl.ClassCode = "50017"
        gl.ClassDescription = "Abrasives or Abrasive Products Mfg."
        gl.PremiumExposure = "10,000"
        gl.PremiumBase = "Gross Sales"
        gl.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl)
        Dim gl2 As New QuickQuoteGLClassification
        gl2.ClassCode = "51741"
        gl2.ClassDescription = "Candle Mfg"
        gl2.PremiumExposure = "20,000"
        gl2.PremiumBase = "Gross Sales"
        gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl2)
        '--------------CGL end-------------------

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        l1.ProtectionClassId = "12" '01

        'l1.CauseOfLossTypeId = "1" 'Basic Form (At least one location must have a Special Form Cause of Loss.)
        l1.CauseOfLossTypeId = "3" 'Special Form Including Theft
        l1.DeductibleId = "9" '1,000
        'l1.CoinsuranceTypeId = "2" '50% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        l1.CoinsuranceTypeId = "0" 'N/A
        l1.ValuationMethodTypeId = "2" 'Actual Cash Value
        l1.EquipmentBreakdownDeductibleId = "8" '500
        l1.EquipmentBreakdownOccupancyTypeId = "8" 'Athletic Clubs
        l1.ClassificationCode.ClassCode = "0844"
        l1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        l1.ClassificationCode.PMA = "Service"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim b1 As New QuickQuoteBuilding
        b1.Description = "Loc 1 Build 1"
        'could set b1.ClassificationCode(Can't calculate Building Coverage without specified Class Code for location #1, building #1.)
        b1.ClassificationCode.ClassCode = "0844"
        'b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.ClassificationCode.PMA = "Service"
        'b1.ConstructionId = "7" 'Frame (10/18/2012:  7 is only valid for BOP)
        b1.ConstructionId = "2" 'Frame
        'b1.EarthquakeBuildingClassificationTypeId = "0" 'N/A
        b1.EarthquakeBuildingClassificationTypeId = "12" '2A - All-metal buildings which are one story in height and 20,000 sq. ft. or less of ground floor space. (testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012)
        b1.PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores (rate_grade = 1); added 10/23/2012

        b1.Limit = "120000"
        b1.InflationGuardTypeId = "1" '2
        b1.EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.RatingTypeId = "2" 'Specific Rated
        'b1.RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012); 10/11/2012 - There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.
        b1.CauseOfLossTypeId = "2" 'Broad Form
        b1.DeductibleId = "8" '500
        b1.CoinsuranceTypeId = "3" '60%
        b1.ValuationId = "1" 'Replacement Cost

        b1.PersPropCov_PersonalPropertyLimit = "110000"
        b1.PersPropCov_PropertyTypeId = "7" 'Personal Property - Including Stock
        b1.PersPropCov_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        'b1.PersPropCov_EarthquakeApplies = False
        b1.PersPropCov_EarthquakeApplies = True 'testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012
        'b1.PersPropCov_RatingTypeId = "1" 'Class Rated (10/15/2012 error:  Location #1 - Building #1 - Personal Property Coverage with Risk Type 'Type 3 - All Other Personal Property' must be Specific Rated for Class Code 0844.)
        b1.PersPropCov_RatingTypeId = "2" 'Specific Rated
        b1.PersPropCov_CauseOfLossTypeId = "3" 'Special Form Including Theft
        b1.PersPropCov_DeductibleId = "15" '2,500
        b1.PersPropCov_CoinsuranceTypeId = "4" '70%
        b1.PersPropCov_ValuationId = "1" 'Replacement Cost
        'could set b1.PersPropCov_ClassificationCode
        b1.PersPropCov_ClassificationCode.ClassCode = "0844"
        b1.PersPropCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropCov_ClassificationCode.PMA = "Service"
        '10/15/2012 - testing after error:  Location #1 - Building #1 - Personal Property - Unable to get territory factor: Invalid PMA for class code 0844.
        'b1.PersPropCov_ClassificationCode.ClassCode = "0311"
        'b1.PersPropCov_ClassificationCode.ClassDescription = "Apartment Buildings"
        'b1.PersPropCov_ClassificationCode.PMA = "Apartment House"

        b1.PersPropOfOthers_PersonalPropertyLimit = "127000"
        b1.PersPropOfOthers_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        b1.PersPropOfOthers_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.PersPropOfOthers_RatingTypeId = "2" 'Specific Rated
        'b1.PersPropOfOthers_RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012)
        b1.PersPropOfOthers_CauseOfLossTypeId = "4" 'Special Form Excluding Theft
        b1.PersPropOfOthers_DeductibleId = "16" '5,000
        b1.PersPropOfOthers_CoinsuranceTypeId = "5" '80%
        'b1.PersPropOfOthers_ValuationId = "3" 'Functional Building Valuation
        b1.PersPropOfOthers_ValuationId = "7" 'Functional Replacement Cost
        'could set b1.PersPropOfOthers_ClassificationCode
        b1.PersPropOfOthers_ClassificationCode.ClassCode = "0844"
        'b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropOfOthers_ClassificationCode.PMA = "Service"

        'Error as-of 10/15/2012:  Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        b1.BusinessIncomeCov_Limit = "117000"
        'b1.BusinessIncomeCov_CoinsuranceTypeId = "6" '90% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        b1.BusinessIncomeCov_CoinsuranceTypeId = "0" 'N/A (commented 11/13/2012 to see if it matters)
        b1.BusinessIncomeCov_MonthlyPeriodTypeId = "2" '1/4
        b1.BusinessIncomeCov_BusinessIncomeTypeId = "3" 'Business Income Other than Rental Value With Extra Expense
        'b1.BusinessIncomeCov_RiskTypeId = "7" 'Manufacturing; Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        'b1.BusinessIncomeCov_RiskTypeId = "0" 'N/A; Location #1 - Building #1 - A valid Risk Type must be selected for Business Income Coverage.
        b1.BusinessIncomeCov_RiskTypeId = "9" 'Rental Properties
        b1.BusinessIncomeCov_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012 (error:  Error in CalculateBusinessIncomeTimeElementEarthquakePremium: Object reference not set to an instance of an object.)
        b1.NumberOfStories = "2" 'added 11/13/2012 to hopefully work w/ business income EQ (this is needed (also needed to set CoverageBasisTypeId):  Error calculating Business Income Time Element Earthquake coverage for location #1, building #1: Number of stories cannot be 0.)
        'testing 11/9/2012 to see if I can add it after getting into Diamond and find difference in XML
        'b1.BusinessIncomeCov_EarthquakeApplies = False
        'b1.BusinessIncomeCov_RatingTypeId = "1" 'Class Rated (There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.)
        b1.BusinessIncomeCov_RatingTypeId = "2" 'Specific Rated
        b1.BusinessIncomeCov_CauseOfLossTypeId = "1" 'Basic form
        'could set b1.BusinessIncomeCov_ClassificationCode
        b1.BusinessIncomeCov_ClassificationCode.ClassCode = "0844"
        'b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.BusinessIncomeCov_ClassificationCode.PMA = "Service"
        b1.BusinessIncomeCov_WaitingPeriodTypeId = "3" '72 (previous validation message:  Location #1 - Building #1 - Please select Waiting Period on Business Income Coverage.)

        'commented out 10/10/2012 since they're not working right now
        'b1.Building_BusinessIncome_Group1_Rate = ".924" '".7"
        'b1.Building_BusinessIncome_Group2_Rate = ".924" '".2"
        'b1.PersonalProperty_Group1_Rate = ".924" '".6"
        'b1.PersonalProperty_Group2_Rate = ".924" '".15"

        'works when just setting LossCost (as-of 11/5/2012)
        b1.Building_BusinessIncome_Group1_LossCost = "0.450" '".4"
        b1.Building_BusinessIncome_Group2_LossCost = "0.450" '".1"
        b1.PersonalProperty_Group1_LossCost = "0.450" '".3"
        b1.PersonalProperty_Group2_LossCost = "0.450" '".05"

        'added 11/29/2012 for testing
        b1.OptionalTheftDeductibleId = "8" '500
        b1.OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropCov_OptionalTheftDeductibleId = "8" '500
        b1.PersPropCov_OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalTheftDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalWindstormOrHailDeductibleId = "8" '500

        'added for testing 12/4/2012; isn't working yet
        'b1.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        'Dim ai As New QuickQuoteAdditionalInterest
        'ai.Name = qq.Client.Name
        'ai.Address = qq.Client.Address
        'ai.Description = "Test AI Description"
        'ai.Other = ""
        'ai.TypeId = "65" 'Loss Payable - Loss Payable
        'b1.AdditionalInterests.Add(ai)


        l1.Buildings.Add(b1)

        '---------more CGL--------
        l1.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim l1gl As New QuickQuoteGLClassification
        l1gl.ClassCode = "96611"
        l1gl.ClassDescription = "Interior Decorators"
        l1gl.PremiumExposure = "5,000"
        l1gl.PremiumBase = "Payroll"
        l1gl.PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl)
        Dim l1gl2 As New QuickQuoteGLClassification
        l1gl2.ClassCode = "57997"
        l1gl2.ClassDescription = "Photo Finishing Labs"
        l1gl2.PremiumExposure = "30,000"
        l1gl2.PremiumBase = "Gross Sales, Products/Complete"
        l1gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl2)
        '------end more CGL-------

        qq.Locations.Add(l1)

        'added for new rule 11/27/2012; rule removed 11/28/2012
        'qq.PriorCarrier.PreviousInsurerTypeId = "0" 'None
        'qq.PriorCarrier.PreviousInsurerTypeId = "81" 'GEICO

        'added for UW Questions Testing 12/26/2012
        'qq.PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
        ''1st w/ CPP part
        'Dim uw As New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9403"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9006"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9007"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9008"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9009"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9400"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9010"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        ''now for CGL and CPR parts
        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9003"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9006"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9007"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9008"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9009"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9400"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9010"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"

                ''testing 12/3/2012 to bypass validation
                'qq.AdditionalInsuredsManualCharge = ""
                'qq.AdditionalInsureds = Nothing
                'qq.AdditionalInsuredsCount = 0

                ''12/3/2012 - testing loss history modifier
                'qq.LossHistoryRecords = New Generic.List(Of QuickQuoteLossHistoryRecord)
                'Dim lh As New QuickQuoteLossHistoryRecord
                'lh.ClaimNumber = "1234"
                'lh.LossDate = "1/1/2012"
                'lh.TypeOfLossId = "69" 'Explosion; get types/ids from Diamond's TypeOfLoss table
                'lh.Amount = "2000"
                'lh.ReserveAmount = "2000"
                'lh.LossDescription = "Test Loss Description"
                'lh.Comments = "Test Comments"
                'qq.LossHistoryRecords.Add(lh)

                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If
            End If
        End If
    End Sub
    Private Sub TestCodeForRob()
        Dim qqxml As New QuickQuoteXML

        Dim qq As QuickQuoteObject
        Dim qId As String = ""
        Dim err As String = ""

        If Request.QueryString("QuoteId") IsNot Nothing AndAlso Request.QueryString("QuoteId").ToString <> "" AndAlso IsNumeric(Request.QueryString("QuoteId").ToString) = True Then
            qId = Request.QueryString("QuoteId").ToString
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                'retrieval was okay and qq should now be populated

                'once you're ready to Save and possibly Rate, you'll call one of the following 2 methods
                'qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, qId, err)
                'If err = "" Then
                '    'save was okay
                'Else
                '    'show user error
                'End If

                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, qId, err)
                'If err = "" Then
                '    'rate and save was okay
                'Else
                '    'show user error
                'End If
            Else
                'show error
            End If
        Else
            err = "A valid parameter for QuoteId was not sent thru the querystring."
            'show error
        End If
    End Sub
    Private Sub PPA_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate) 'added 7/24/2013; added optional param 8/8/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal

            'quickQuote.Client.ClientId = "216844"

            quickQuote.QuoteDescription = "Test Desc"
            quickQuote.EffectiveDate = "7/20/2013"

            quickQuote.RiskGrade = "1"
            quickQuote.RiskGradeLookupId = "74"

            quickQuote.Client.Name.FirstName = "Don"
            quickQuote.Client.Name.LastName = "Auto"
            quickQuote.Client.Name.SexId = "1"
            quickQuote.Client.Name.TypeId = "1"
            quickQuote.Client.Name.TaxNumber = "123456789"
            quickQuote.Client.Name.TaxTypeId = "1"
            quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            quickQuote.Client.Name.BirthDate = "1/1/1982"
            quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            quickQuote.Client.Name.DriversLicenseNumber = "1234-56-7890"
            quickQuote.Client.Name.MaritalStatusId = "1" 'Single
            quickQuote.Client.Address.HouseNum = "123"
            quickQuote.Client.Address.StreetName = "Auto Street"
            quickQuote.Client.Address.City = "Indianapolis"
            quickQuote.Client.Address.Zip = "46227"
            quickQuote.Client.Address.County = "Marion"

            'real data (didn't work)
            'quickQuote.Client.Name.FirstName = "JUNIOR"
            'quickQuote.Client.Name.MiddleName = "W"
            'quickQuote.Client.Name.LastName = "BROWN"
            'quickQuote.Client.Name.SexId = "1"
            'quickQuote.Client.Name.TypeId = "1"
            'quickQuote.Client.Name.TaxNumber = "666648093"
            'quickQuote.Client.Name.TaxTypeId = "1"
            'quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            'quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            'quickQuote.Client.Name.BirthDate = "10/26/1956"
            'quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            'quickQuote.Client.Name.DriversLicenseNumber = "8902605449"
            'quickQuote.Client.Name.MaritalStatusId = "1" 'Single
            'quickQuote.Client.Address.HouseNum = "7025"
            'quickQuote.Client.Address.StreetName = "MARINERS LN"
            'quickQuote.Client.Address.ApartmentNumber = "B"
            'quickQuote.Client.Address.City = "INDIANAPOLIS"
            'quickQuote.Client.Address.Zip = "462141789"
            'quickQuote.Client.Address.County = "MARION"

            quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
            Dim cp1 As New QuickQuotePhone
            cp1.Number = "(312)555-5557"
            quickQuote.Client.Phones.Add(cp1)
            'Policyholder information will automatically be populated by Client
        End If

        'for tier override (should only be used for testing)
        quickQuote.TierTypeId = "1" 'Uniform (probably not needed)
        quickQuote.UseTierOverride = True
        quickQuote.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

        'from CAP
        'quickQuote.Liability_UM_UIM_LimitId = "34" '500,000
        'quickQuote.MedicalPaymentsLimitid = "12" '2,000
        'quickQuote.HasBusinessMasterEnhancement = True
        ''quickQuote.HasFarmPollutionLiability = True 'Farm Truck Pollution Liability requires at least one Truck, Tractor, and Trailer with a Secondary Class of Farmers.
        'quickQuote.HasNonOwnershipLiability = True
        'quickQuote.NonOwnership_ENO_RatingTypeId = "1" 'Employees Only
        'quickQuote.NonOwnershipLiabilityNumberOfEmployees = "3"
        'quickQuote.HasHiredBorrowedLiability = True
        'quickQuote.ComprehensiveDeductibleId = "10" 'Full
        'quickQuote.CollisionDeductibleId = "8" '500
        'quickQuote.HasHiredCarPhysicalDamage = True

        'specific to PPA (property already existed for other LOBs but will use a different coveragecode_id)
        quickQuote.HasBusinessMasterEnhancement = True 'added logic 8/12/2013

        quickQuote.Drivers = New Generic.List(Of QuickQuoteDriver)
        Dim d1 As New QuickQuoteDriver
        d1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'quickQuote.Client.Name
        d1.Name.NameAddressSourceId = "6" 'Driver
        d1.Address = qqHelper.CloneObject(quickQuote.Client.Address) 'quickQuote.Client.Address
        d1.LicenseStatusId = "2" 'Valid
        d1.DriverExcludeTypeId = "1" 'Rated
        d1.RelationshipTypeId = "8" 'Policyholder (needed to order reports)
        quickQuote.Drivers.Add(d1)

        quickQuote.Vehicles = New Generic.List(Of QuickQuoteVehicle)
        Dim v1 As New QuickQuoteVehicle
        v1.PrincipalDriverNum = "1"
        v1.Make = "CHEVROLET"
        v1.Model = "1500"
        v1.Year = "1992"
        v1.ClassCode = "01199"
        v1.Vin = "1GCKC39FGNJ109116"
        v1.CostNew = "18000"
        v1.VehicleRatingTypeId = "9" 'Truck, Tractor, or Trailer
        'v1.UseCodeTypeId = "28" 'Service (for commercial only)
        v1.VehicleUseTypeId = "6" 'Personal
        v1.OperatorTypeId = "0"
        v1.OperatorUseTypeId = "0"
        v1.RadiusTypeId = "1" 'Local, up to 50 miles
        v1.SecondaryClassTypeId = "30" 'Not Otherwise Specified
        v1.SecondaryClassUsageTypeId = "9" 'All Other
        v1.SizeTypeId = "18" 'Light Truck < or equal 10,000 Pounds GVW
        v1.PerformanceTypeId = 1 'Standard
        v1.BodyTypeId = "14" 'Car
        v1.AntiLockTypeId = "1" 'Rear-Wheel Anti-Lock Brakes
        'added 8/7/2013
        v1.RegisteredStateId = "16" 'IN
        v1.RestraintTypeId = "1" 'Passive Seat Belts
        v1.AntiTheftTypeId = "0" 'None
        v1.VehicleValueId = "2" 'Used
        v1.GrossVehicleWeight = "4150"
        v1.VehicleTypeId = "" 'for motorcycles
        v1.OdometerReading = "136127"
        v1.AnnualMiles = "13500"
        v1.MilesOneWay = "77"
        v1.DaysPerWeek = "6"
        v1.ActualCashValue = "16000" 'problem field... int in database; had to remove money formatting from property
        v1.StatedAmount = "14500"
        v1.PurchasedDate = "2/10/1996"
        v1.CubicCentimeters = "300"
        v1.CustomEquipmentAmount = "600"
        v1.MultiCar = True
        v1.DriverOutOfStateSurcharge = False
        v1.DamageYesNoId = "1" 'Yes
        v1.DamageRemarks = "Test Damage Remarks"
        v1.NonOwnedNamed = False 'Named Non-Owned Non-Specific Vehicle
        v1.NonOwned = False 'Extended Non-Owned

        'v1.HasCollision = True 'Collision Coverage requires Covered Auto Symbol.
        'v1.CollisionDeductibleId = "8" '500
        'v1.HasComprehensive = True 'Other Than Collision Coverage requires Covered Auto Symbol.; commented 3/28/2013 to test rental reimbursement
        'v1.ComprehensiveDeductibleId = "2" '100
        'v1.HasLiability_UM_UIM = True
        'v1.HasMedicalPayments = True
        'v1.HasRentalReimbursement = True 'Vehicle Num #1 Other Than Collision and Collision Coverage are required when Rental Reimbursement coverage is selected.
        'v1.RentalReimbursementDailyReimbursement = "30"
        'v1.RentalReimbursementNumberOfDays = "15"
        ''v1.HasTowingAndLabor = True 'Vehicle Num #1 Towing and Labor is valid only if Vehicle Rating Type equal Private Passenger Type.

        'new PPA props
        v1.Liability_UM_UIM_LimitId = "10" '100,000; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
        v1.MedicalPaymentsLimitId = "170" '1,000; N/A=0
        v1.ComprehensiveDeductibleLimitId = "18" '100
        v1.CollisionDeductibleLimitId = "20" '200
        v1.TowingAndLaborDeductibleLimitId = "27" '25; 50=41
        v1.UninsuredMotoristLiabilityLimitId = "0" '100/300=4; N/A=0 (UM/UIM BI limit cannot exceed Bodily Injury limit.)(Bodily Injury is required when selecting UM/UIM BI coverage.)
        v1.BodilyInjuryLiabilityLimitId = "0" '100/200=135; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
        v1.PropertyDamageLimitId = "0" '25,000=8; N/A=0 (Property Damage is not available with Single Limit Liability.)
        v1.UninsuredCombinedSingleLimitId = "10" '100,000; N/A=0
        v1.UninsuredMotoristPropertyDamageLimitId = "0" '25,000=8; N/A=0 (UM PD limit cannot exceed Property Damage limit.)
        v1.UninsuredMotoristPropertyDamageDeductibleLimitId = "155" '300; N/A=0
        v1.HasPollutionLiabilityBroadenedCoverage = False 'Pollution Liability Broadened Coverage is only available for Pickups with Farm use.
        v1.TransportationExpenseLimitId = "80" '30/900; 20/600=30
        v1.HasAutoLoanOrLease = False 'Auto Loan/Lease is only available for vehicles 5 years old or newer.
        v1.TapesAndRecordsLimitId = "212" '200; 400=219
        v1.SoundEquipmentLimit = "200"
        v1.ElectronicEquipmentLimit = "300"
        v1.TripInterruptionLimitId = "0" '300=25; N/A=0 (Interruption of Travel coverage is only available on Motorcycles.)

        '9/5/2012 - will get error if garaging address isn't populated
        v1.GaragingAddress.WithinCity = True
        v1.GaragingAddress.Address = qqHelper.CloneObject(quickQuote.Client.Address) 'quickQuote.Client.Address
        v1.GaragingAddress.GaragedInside = False

        'added 7/26/2013: Scheduled Items are only available on Motorcycles.
        'v1.ScheduledItems = New List(Of QuickQuoteScheduledItem)
        'Dim si As New QuickQuoteScheduledItem
        'si.Amount = "100.00"
        'si.Breakage = True
        'si.Description = "test trailer"
        'si.Dscr2 = "trailer notes"
        'si.ItemDate = "7/1/2013"
        'si.ScheduledItemsCategoryId = "2" 'Coverage
        'si.ScheduledItemsComboId = "0" 'None
        'si.ScheduledItemsTypeId = "21" 'Trailers
        'v1.ScheduledItems.Add(si)
        'Dim si2 As New QuickQuoteScheduledItem
        'si2.Amount = "150.00"
        'si2.Breakage = False
        'si2.Description = "test sidecar"
        'si2.Dscr2 = "sidecar notes"
        'si2.ItemDate = "7/3/2013"
        'si2.ScheduledItemsCategoryId = "2" 'Coverage
        'si2.ScheduledItemsComboId = "0" 'None
        'si2.ScheduledItemsTypeId = "22" 'Sidecars
        'si2.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        'Dim ai As New QuickQuoteAdditionalInterest
        'ai.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'quickQuote.Client.Name
        'ai.Address = quickQuote.Client.Address
        'ai.Description = "Test AI Description"
        'ai.Other = ""
        'ai.TypeId = "65" 'Loss Payable - Loss Payable
        'si2.AdditionalInterests.Add(ai)
        'v1.ScheduledItems.Add(si2)

        quickQuote.Vehicles.Add(v1)

        Dim v2 As New QuickQuoteVehicle
        v2.PrincipalDriverNum = "1"
        v2.Make = "CHEVY"
        v2.Model = "CORVETTE"
        v2.Year = "1973"
        v2.ClassCode = "7398"
        v2.Vin = "1Z37J354324831111"
        v2.CostNew = "12000"
        v2.VehicleRatingTypeId = "1" 'Private Passenger Type
        'v2.UseCodeTypeId = "20" 'Business (for commercial only)
        v2.VehicleUseTypeId = "2" 'Business
        v2.OperatorTypeId = "0"
        v2.OperatorUseTypeId = "0"
        v2.RadiusTypeId = "0" 'N/A
        v2.SecondaryClassTypeId = "0" 'N/A
        v2.SecondaryClassUsageTypeId = "0" 'N/A
        v2.SizeTypeId = "0" 'N/A
        v2.PerformanceTypeId = "2" 'High
        v2.BodyTypeId = "14" 'Car
        v2.AntiLockTypeId = "2" 'All-Wheel Anti-Lock Brakes
        'added 8/7/2013
        v2.RegisteredStateId = "16" 'IN
        v2.RestraintTypeId = "1" 'Passive Seat Belts
        v2.AntiTheftTypeId = "1" 'Alarm Only
        v2.VehicleValueId = "2" 'Used
        v2.GrossVehicleWeight = "2650"
        v2.VehicleTypeId = "" 'for motorcycles
        v2.OdometerReading = "87569"
        v2.AnnualMiles = "8300"
        v2.MilesOneWay = "34"
        v2.DaysPerWeek = "5"
        v2.ActualCashValue = "10800" 'problem field... int in database; had to remove money formatting from property
        v2.StatedAmount = "10500"
        v2.PurchasedDate = "6/1/1988"
        v2.CubicCentimeters = "350"
        v2.CustomEquipmentAmount = "13500"
        v2.MultiCar = True
        v2.DriverOutOfStateSurcharge = False
        v2.DamageYesNoId = "2" 'No
        v2.DamageRemarks = ""
        v2.NonOwnedNamed = False 'Named Non-Owned Non-Specific Vehicle
        v2.NonOwned = False 'Extended Non-Owned

        'v2.HasCollision = True 'Collision Coverage requires Covered Auto Symbol.; commented 3/28/2013 to test rental reimbursement
        'v2.CollisionDeductibleId = "8" '500
        'v2.HasComprehensive = True 'Other Than Collision Coverage requires Covered Auto Symbol.
        'v2.ComprehensiveDeductibleId = "2" '100
        'v2.HasLiability_UM_UIM = True
        'v2.HasMedicalPayments = True
        'v2.HasRentalReimbursement = True 'Vehicle Num #1 Other Than Collision and Collision Coverage are required when Rental Reimbursement coverage is selected.
        'v2.RentalReimbursementDailyReimbursement = "30"
        'v2.RentalReimbursementNumberOfDays = "15"
        'v2.HasTowingAndLabor = True 'Vehicle Num #1 Towing and Labor is valid only if Vehicle Rating Type equal Private Passenger Type.

        'new PPA props
        v2.Liability_UM_UIM_LimitId = "0" 'N/A; 100,000=10
        v2.MedicalPaymentsLimitId = "0" 'N/A; 1,000=170
        v2.ComprehensiveDeductibleLimitId = "18" '100
        v2.CollisionDeductibleLimitId = "20" '200
        v2.TowingAndLaborDeductibleLimitId = "41" '50; 25=27
        v2.UninsuredMotoristLiabilityLimitId = "0" 'N/A; 100/300=4
        v2.BodilyInjuryLiabilityLimitId = "0" 'N/A; 100/200=135
        v2.PropertyDamageLimitId = "0" 'N/A; 25,000=8
        v2.UninsuredCombinedSingleLimitId = "0" 'N/A; 100,000=10
        v2.UninsuredMotoristPropertyDamageLimitId = "0" 'N/A; 25,000=8
        v2.UninsuredMotoristPropertyDamageDeductibleLimitId = "0" 'N/A; 300=155
        v2.HasPollutionLiabilityBroadenedCoverage = False
        v2.TransportationExpenseLimitId = "30" '20/600; 30/900=80
        v2.HasAutoLoanOrLease = False
        v2.TapesAndRecordsLimitId = "219" '400; 200=212
        v2.SoundEquipmentLimit = "50"
        v2.ElectronicEquipmentLimit = "75"
        v2.TripInterruptionLimitId = "0" 'N/A; 300=25

        v2.GaragingAddress.WithinCity = True
        v2.GaragingAddress.Address = qqHelper.CloneObject(quickQuote.Client.Address) 'quickQuote.Client.Address
        v2.GaragingAddress.GaragedInside = True

        'added 7/26/2013: Scheduled Items are only available on Motorcycles.
        'v2.ScheduledItems = New List(Of QuickQuoteScheduledItem)
        'Dim si3 As New QuickQuoteScheduledItem
        'si3.Amount = "200.00"
        'si3.Breakage = False
        'si3.Description = "test windshield"
        'si3.Dscr2 = "windshield notes"
        'si3.ItemDate = "7/5/2013"
        'si3.ScheduledItemsCategoryId = "2" 'Coverage
        'si3.ScheduledItemsComboId = "0" 'None
        'si3.ScheduledItemsTypeId = "23" 'Windshield
        'v2.ScheduledItems.Add(si3)

        quickQuote.Vehicles.Add(v2)

        'added(8 / 7 / 2013)
        quickQuote.Exclusions = New List(Of QuickQuoteExclusion)
        Dim e1 As New QuickQuoteExclusion
        e1.ExclusionTypeId = "1" 'Exclusion
        e1.Description = "exc desc"
        quickQuote.Exclusions.Add(e1)
        Dim e2 As New QuickQuoteExclusion
        e2.ExclusionTypeId = "3" 'Restriction
        e2.Description = "rest desc"
        quickQuote.Exclusions.Add(e2)
        Dim e3 As New QuickQuoteExclusion
        e3.ExclusionTypeId = "4" 'Comment
        e3.Description = "comm desc"
        quickQuote.Exclusions.Add(e3)

        'added 8/7/2013
        quickQuote.HouseholdMembers = New List(Of QuickQuoteHouseholdMember)
        Dim m As New QuickQuoteHouseholdMember
        m.DOB = "1/2/1980"
        m.MemberName = "Add Res1"
        m.RelationshipTypeId = "11" 'Not Related to Policyholder
        quickQuote.HouseholdMembers.Add(m)
        Dim m2 As New QuickQuoteHouseholdMember
        m2.DOB = "5/1/2005"
        m2.MemberName = "Pol Child1"
        m2.RelationshipTypeId = "2" 'Child of Policyholder
        quickQuote.HouseholdMembers.Add(m2)

        'added 8/7/2013
        With quickQuote.ResidenceInfo
            .CurrentResidenceTypeId = "4" 'Apartment
            .Owned = False

            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
            Dim d As New QuickQuoteResidenceInfoDetail
            d.Address = qqHelper.CloneObject(quickQuote.Client.Address)
            d.Address.StreetName &= " Prev1"
            d.ResidenceInfoDetailTypeId = "1" 'Previous1
            d.YearsAtPreviousAddress = "1"
            .ResidenceInfoDetails.Add(d)
            Dim d2 As New QuickQuoteResidenceInfoDetail
            d2.Address = qqHelper.CloneObject(quickQuote.Client.Address)
            d2.Address.StreetName &= " Prev2"
            d2.ResidenceInfoDetailTypeId = "2" 'Previous2
            d2.YearsAtPreviousAddress = "3"
            .ResidenceInfoDetails.Add(d2)
            Dim d3 As New QuickQuoteResidenceInfoDetail
            d3.Address = qqHelper.CloneObject(quickQuote.Client.Address)
            d3.Address.StreetName &= " Prev3"
            d3.ResidenceInfoDetailTypeId = "3" 'Previous3
            d3.YearsAtPreviousAddress = "2"
            .ResidenceInfoDetails.Add(d3)

            .YearsAtCurrentAddress = "2"
            .ExpirationDate = "8/31/2013"
            .HomeDiscount = True
            .PolicyNum = "HOM1234567"
        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay
                
            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

                'quickQuote = Nothing
                'strQQ = ""
                'ratedQQ = Nothing
                'strRatedQQ = ""
                'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
                'If err = "" Then

                '    'stuff for app gap

                '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
                '    If err = "" Then

                '    End If
                'End If
            Else
                'error
            End If
        End If
        
    End Sub
    'added for testing 9/24/2013
    Private Sub PPA_save_test_minimum(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal

        End If

        With quickQuote
            .EffectiveDate = Date.Today.ToString

            quickQuote.UseTierOverride = True 'should only be used for testing

            With .Client
                With .Name
                    .FirstName = "Don"
                    .LastName = "Auto"
                    .SexId = "1"
                    .TypeId = "1"
                    .TaxNumber = "123456789"
                    .TaxTypeId = "1"
                    .EntityTypeId = "1" 'Individual
                    .DescriptionOfOperations = "PH test"
                    .BirthDate = "1/1/1982"
                    .DriversLicenseDate = "1/1/2013"
                    .DriversLicenseNumber = "1234-56-7890"
                    .MaritalStatusId = "1" 'Single
                End With
                With .Address
                    .HouseNum = "123"
                    .StreetName = "Auto Street"
                    .City = "Indianapolis"
                    .Zip = "46227"
                    .County = "Marion"
                End With
            End With

            .Drivers = New List(Of QuickQuoteDriver)
            With .Drivers
                Dim d1 As New QuickQuoteDriver
                With d1
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    .Name.NameAddressSourceId = "6" 'Driver
                    d1.DriverExcludeTypeId = "1" 'Rated
                End With
                .Add(d1)
            End With

            .Vehicles = New List(Of QuickQuoteVehicle)
            With .Vehicles
                Dim v1 As New QuickQuoteVehicle
                With v1
                    .PrincipalDriverNum = "1"
                    .Make = "CHEVROLET"
                    .Model = "1500"
                    .Year = "1992"
                    .VehicleUseTypeId = "6" 'Personal
                    .PerformanceTypeId = 1 'Standard
                    .BodyTypeId = "40" 'Pickup w/o Camper

                    .Liability_UM_UIM_LimitId = "10" '100,000
                End With
                .Add(v1)
            End With
        End With


        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If
    End Sub
    'added 9/26/2013 for testing
    Private Sub PPA_save_test_new(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate) 'added 7/24/2013; added optional param 8/8/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
            'added 2/5/2014 for testing Diamond services; removed 4/7/2014
            'If quickQuote IsNot Nothing AndAlso quickQuote.QuoteNumber <> "" AndAlso (quickQuote.PolicyId = "" OrElse quickQuote.PolicyImageNum = "") Then
            '    QuickQuoteHelperClass.SetPolicyIdAndImageNumberForPolicyNumber(quickQuote.QuoteNumber, quickQuote.PolicyId, quickQuote.PolicyImageNum)
            'End If
        Else
            'get new
        End If
        'With quickQuote 'removed 12/5/2013
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote 'added 12/5/2013
                .LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                With .Client
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Auto"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234567890" 'changed 11/10/2016 from "1234-56-7890"
                        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                        .MaritalStatusId = "2" '1=Single, 2=Married; updated 4/11/2014 to use Married
                    End With
                    With .Address
                        .HouseNum = "123"
                        .StreetName = "Auto Street"
                        .City = "Indianapolis"
                        .Zip = "46227"
                        .County = "Marion"
                    End With

                    'real data (didn't work)
                    'With .Name
                    '    .FirstName = "JUNIOR"
                    '    .MiddleName = "W"
                    '    .LastName = "BROWN"
                    '    .SexId = "1"
                    '    .TypeId = "1"
                    '    .TaxNumber = "666648093"
                    '    .TaxTypeId = "1"
                    '    .EntityTypeId = "1" 'Individual
                    '    .DescriptionOfOperations = "PH test"
                    '    .BirthDate = "10/26/1956"
                    '    .DriversLicenseDate = "1/1/2013"
                    '    .DriversLicenseNumber = "8902605449"
                    '    .MaritalStatusId = "1" 'Single
                    'End With
                    'With .Address
                    '    .HouseNum = "7025"
                    '    .StreetName = "MARINERS LN"
                    '    .ApartmentNumber = "B"
                    '    .City = "INDIANAPOLIS"
                    '    .Zip = "462141789"
                    '    .County = "MARION"
                    'End With

                    .Phones = New List(Of QuickQuotePhone)
                    Dim cp1 As New QuickQuotePhone
                    cp1.Number = "(312)555-5557"
                    cp1.TypeId = "1" 'Home; added 2/7/2014
                    .Phones.Add(cp1)
                    'added 2/7/2014
                    Dim cp2 As New QuickQuotePhone 'not sure if this will get added to db since the field doesn't show in the UI
                    With cp2
                        .Number = "(317)123-4567"
                        .TypeId = "2" 'Business
                    End With
                    .Phones.Add(cp2)
                    Dim cp3 As New QuickQuotePhone 'not sure if this will get added to db since the field doesn't show in the UI
                    With cp3
                        .TypeId = "3" 'Fax
                        .Number = "(317)345-6789"
                        .Extension = "111"
                    End With
                    .Phones.Add(cp3)

                    'added 2/7/2014
                    .Emails = New List(Of QuickQuoteEmail)
                    Dim em As New QuickQuoteEmail
                    With em
                        .Address = "test@test.com"
                        .TypeId = "3" 'Other
                    End With
                    .Emails.Add(em)

                End With
                'Policyholder information will automatically be populated by Client
                'added 4/11/2014 to have 2nd driver that's a PH to see if it orders credit
                With .Policyholder2
                    With .Name
                        .FirstName = "Lady"
                        .LastName = "Auto"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "523456780"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "5234567891" 'changed 11/10/2016 from "5234-56-7891"
                        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                        .MaritalStatusId = "2" '1=Single, 2=Married
                    End With
                    With .Address
                        .HouseNum = "123"
                        .StreetName = "Auto Street"
                        .City = "Indianapolis"
                        .Zip = "46227"
                        .County = "Marion"
                    End With
                End With
            End With
        End If

        With quickQuote 'added 12/5/2013

            'testing client name change 4/24/2014... updated existing name record; maintained same clientId and nameId
            'If .Client IsNot Nothing AndAlso .Client.Name IsNot Nothing AndAlso .Client.ClientId <> "" AndAlso IsNumeric(.Client.ClientId) = True Then
            '    'default code is overwriting client name w/ policyholder name
            '    'If UCase(.Client.Name.FirstName) = "DON" Then
            '    '    .Client.Name.FirstName = "DON_UPDATED"
            '    'ElseIf UCase(.Client.Name.FirstName) = "DON_UPDATED" Then
            '    '    .Client.Name.FirstName = "DON"
            '    'End If
            '    If .Policyholder IsNot Nothing AndAlso .Policyholder.Name IsNot Nothing Then
            '        If UCase(.Policyholder.Name.FirstName) = "DON" Then
            '            .Policyholder.Name.FirstName = "DON_UPDATED"
            '        ElseIf UCase(.Policyholder.Name.FirstName) = "DON_UPDATED" Then
            '            .Policyholder.Name.FirstName = "DON"
            '        End If
            '    End If
            'End If

            'test code 2/27/2014... remove after testing is complete
            'If .Client IsNot Nothing Then
            '    If .Client.Phones IsNot Nothing AndAlso .Client.Phones.Count > 0 Then
            '        For Each p As QuickQuotePhone In .Client.Phones
            '            p.Dispose()
            '            p = Nothing
            '        Next
            '        .Client.Phones.Clear()
            '        .Client.Phones = Nothing
            '    End If
            'End If
            'If .Policyholder IsNot Nothing Then
            '    If .Policyholder.Phones IsNot Nothing AndAlso .Policyholder.Phones.Count > 0 Then
            '        For Each p As QuickQuotePhone In .Policyholder.Phones
            '            p.Dispose()
            '            p = Nothing
            '        Next
            '        .Policyholder.Phones.Clear()
            '        .Policyholder.Phones = Nothing
            '    End If
            'End If

            'testing 4/14/2014; not needed after fixing Policyholder.HasData property
            'With .Policyholder2
            '    With .Name
            '        .FirstName = "Lady"
            '        .LastName = "Auto"
            '        .SexId = "2"
            '        .TypeId = "1"
            '        .TaxNumber = "523456780"
            '        .TaxTypeId = "1"
            '        .EntityTypeId = "1" 'Individual
            '        .DescriptionOfOperations = "PH2 test"
            '        .BirthDate = "2/1/1982"
            '        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
            '        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
            '        .DriversLicenseDate = "2/1/2013"
            '        .DriversLicenseNumber = "5234-56-7891"
            '        .MaritalStatusId = "2" '1=Single, 2=Married
            '    End With
            '    With .Address
            '        .HouseNum = "123"
            '        .StreetName = "Auto Street"
            '        .City = "Indianapolis"
            '        .Zip = "46227"
            '        .County = "Marion"
            '    End With
            'End With

            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 4/8/2014 to test Credit report ordering
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'property already existed for other LOBs, but PPA will use a different coveragecode_id
            .HasBusinessMasterEnhancement = True
            'updated 1/27/2014
            .AutoHome = False
            .EmployeeDiscount = False
            .FacultativeReinsurance = False
            .SelectMarketCredit = False

            If .CanUseDriverNumForDriverReconciliation = False Then 'added 4/22/2014 so it will re-use the same drivers... will need ELSE if anything needs to be modified/added/removed
                .Drivers = New Generic.List(Of QuickQuoteDriver)
                Dim dr1 As New QuickQuoteDriver
                With dr1
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name) '.Client.Name
                    .Name.NameAddressSourceId = "6" 'Driver
                    If .Name.DriversLicenseStateId = "" Then 'added 4/17/2014; needed for MVR
                        .Name.DriversLicenseStateId = "16"
                    End If
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                    .LicenseStatusId = "2" 'Valid
                    .DriverExcludeTypeId = "1" 'Rated
                    .RelationshipTypeId = "8" 'Policyholder (needed to order reports)

                    'added 2/7/2014
                    .GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                    .AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                    ''added 2/7/2014; doesn't do anything
                    '.Emails = New List(Of QuickQuoteEmail)
                    'Dim em As New QuickQuoteEmail
                    'With em
                    '    .Address = "test@test.com"
                    '    .TypeId = "3" 'Other
                    'End With
                    '.Emails.Add(em)

                    ''added 2/7/2014; doesn't do anything
                    '.Phones = New List(Of QuickQuotePhone)
                    'Dim ph As New QuickQuotePhone
                    'With ph
                    '    .TypeId = "1" 'Home
                    '    .Number = "(317)123-4567"
                    'End With
                    '.Phones.Add(ph)
                    'Dim ph2 As New QuickQuotePhone
                    'With ph2
                    '    .TypeId = "2" 'Business
                    '    .Number = "(317)234-5678"
                    'End With
                    '.Phones.Add(ph2)
                    'Dim ph3 As New QuickQuotePhone
                    'With ph3
                    '    .TypeId = "3" 'Fax
                    '    .Number = "(317)345-6789"
                    '    .Extension = "111"
                    'End With
                    '.Phones.Add(ph3)

                    If .CanUseViolationNumForAccidentViolationReconciliation = True Then 'added 4/24/2014 so it will re-use the same accViols... will need ELSE if anything needs to be modified/added/removed; 8/1/2014 - this should probably be checking for False, but may not matter because it would only check this logic when .CanUseDriverNumForDriverReconciliation = False
                        'added 1/27/2014
                        .AccidentViolations = New List(Of QuickQuoteAccidentViolation)
                        Dim av1 As New QuickQuoteAccidentViolation
                        With av1
                            .AccidentsViolationsTypeId = 1 'Speeding (15 mph or less over the legal limit)
                            .AvDate = "6/1/2013"
                            .Description = "speeding to get to work"
                            .AmountProperty = ""
                            .Comments = "won't do it again"
                            .SpeedLimit = "55"
                            .Mph = "65"
                            .Place = "I465"
                            .LicenseSuspended = False
                            .ConvictionDate = "7/1/2013"
                            .ViolationConvictionTypeId = "2" 'Minor Violation
                            .ViolationSourceId = "1" 'MVR
                            .Points = "2"
                            .PaidDate = "7/10/2013"
                            .PostDate = "7/17/2013"
                            .BiDeath = False
                            .Surcharge = False
                        End With
                        .AccidentViolations.Add(av1)

                        'commented 1/31/2014 because of message that they should be added to LossHistories... probably specific to AccidentsViolationsTypeId
                        'Dim av2 As New QuickQuoteAccidentViolation
                        'With av2
                        '    .AccidentsViolationsTypeId = 43 'At Fault Accident
                        '    .AvDate = "9/1/2013"
                        '    .Description = "t-boned minivan"
                        '    .AmountProperty = "9500.00"
                        '    .Comments = "ouch"
                        '    .SpeedLimit = "35"
                        '    .Mph = "42"
                        '    .Place = "Meridian / 106th"
                        '    .LicenseSuspended = False
                        '    .ConvictionDate = "10/1/2013"
                        '    .ViolationConvictionTypeId = "1" 'No Charge
                        '    .ViolationSourceId = "2" 'Manual
                        '    .Points = "0"
                        '    .PaidDate = ""
                        '    .PostDate = ""
                        '    .BiDeath = False
                        '    .Surcharge = True
                        'End With
                        '.AccidentViolations.Add(av2)
                    End If

                    If .CanUseLossHistoryNumForLossHistoryReconciliation = True Then 'added 4/24/2014 so it will re-use the same lossHists... will need ELSE if anything needs to be modified/added/removed; 8/1/2014 - this should probably be checking for False, but may not matter because it would only check this logic when .CanUseDriverNumForDriverReconciliation = False
                        'added 3/3/2014
                        .LossHistoryRecords = New List(Of QuickQuoteLossHistoryRecord)
                        Dim lh As New QuickQuoteLossHistoryRecord
                        lh.ClaimNumber = "1234"
                        lh.LossDate = "1/1/2012"
                        lh.TypeOfLossId = "69" 'Explosion; get types/ids from Diamond's TypeOfLoss table
                        lh.Amount = "2000"
                        lh.ReserveAmount = "2000"
                        lh.LossDescription = "Test Loss Description"
                        lh.Comments = "Test Comments"
                        .LossHistoryRecords.Add(lh)
                    End If

                End With
                .Drivers.Add(dr1)

                'added 4/9/2014 for testing on re-rate w/ reconciliation logic... {All rated drivers must be assigned to a vehicle. Driver #2 is not assigned to a vehicle., Error}; 4/11/2014 note: will only order credit report if driver is policyholder
                'Dim dr2 As New QuickQuoteDriver
                'With dr2
                '    With .Name
                '        .FirstName = "Relative"
                '        .LastName = "Auto"
                '        .SexId = "2"
                '        .TypeId = "1"
                '        .TaxNumber = "223456780"
                '        .TaxTypeId = "1"
                '        .EntityTypeId = "1" 'Individual
                '        .DescriptionOfOperations = "Rel test"
                '        .BirthDate = "3/1/1984"
                '        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                '        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                '        .DriversLicenseDate = "3/1/2013"
                '        .DriversLicenseNumber = "2234-56-7899"
                '        .MaritalStatusId = "1" 'Single
                '    End With
                '    .Name.NameAddressSourceId = "6" 'Driver
                '    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                '    .LicenseStatusId = "2" 'Valid
                '    .DriverExcludeTypeId = "1" 'Rated
                '    .RelationshipTypeId = "7" 'Other Relation to Policyholder (needed to order reports)

                '    '.GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                '    '.AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                'End With
                '.Drivers.Add(dr2)

                'updated 4/11/2014 to use 2nd policyholder
                If .Policyholder2 IsNot Nothing AndAlso .Policyholder2.Name IsNot Nothing AndAlso .Policyholder2.Name.HasData = True Then
                    Dim dr2 As New QuickQuoteDriver
                    With dr2
                        .Name = qqHelper.CloneObject(quickQuote.Policyholder2.Name) '.Client.Name
                        .Name.NameAddressSourceId = "6" 'Driver
                        If .Name.DriversLicenseStateId = "" Then 'added 4/17/2014; needed for MVR
                            .Name.DriversLicenseStateId = "16"
                        End If
                        .Address = qqHelper.CloneObject(quickQuote.Policyholder2.Address) '.Client.Address
                        .LicenseStatusId = "2" 'Valid
                        .DriverExcludeTypeId = "1" 'Rated
                        .RelationshipTypeId = "5" 'Policyholder #2 (needed to order reports)

                        'added 2/7/2014
                        '.GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                        '.AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                    End With
                    .Drivers.Add(dr2)
                End If

                'also added 4/9/2014 for testing; 4/11/2014 note: will only order credit report if driver is policyholder
                'Dim dr3 As New QuickQuoteDriver
                'With dr3
                '    With .Name
                '        .FirstName = "OtherRelative"
                '        .LastName = "Auto"
                '        .SexId = "2"
                '        .TypeId = "1"
                '        .TaxNumber = "323456781"
                '        .TaxTypeId = "1"
                '        .EntityTypeId = "1" 'Individual
                '        .DescriptionOfOperations = "Rel2 test"
                '        .BirthDate = "4/1/1985"
                '        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                '        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                '        .DriversLicenseDate = "4/1/2013"
                '        .DriversLicenseNumber = "3234-56-7891"
                '        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                '        .MaritalStatusId = "1" 'Single
                '    End With
                '    .Name.NameAddressSourceId = "6" 'Driver
                '    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                '    .LicenseStatusId = "2" 'Valid
                '    .DriverExcludeTypeId = "1" 'Rated
                '    .RelationshipTypeId = "7" 'Other Relation to Policyholder (needed to order reports)

                '    '.GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                '    '.AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                'End With
                '.Drivers.Add(dr3)

                'added 4/11/2014 for testing re-rate... to see if credit report would be ordered for just this driver; 4/11/2014 note: will only order credit report if driver is policyholder
                'Dim dr4 As New QuickQuoteDriver
                'With dr4
                '    With .Name
                '        .FirstName = "OtherRelative2"
                '        .LastName = "Auto"
                '        .SexId = "1"
                '        .TypeId = "1"
                '        .TaxNumber = "423456782"
                '        .TaxTypeId = "1"
                '        .EntityTypeId = "1" 'Individual
                '        .DescriptionOfOperations = "Rel3 test"
                '        .BirthDate = "6/1/1986"
                '        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                '        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                '        .DriversLicenseDate = "6/1/2013"
                '        .DriversLicenseNumber = "4234-56-7892"
                '        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                '        .MaritalStatusId = "1" 'Single
                '    End With
                '    .Name.NameAddressSourceId = "6" 'Driver
                '    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                '    .LicenseStatusId = "2" 'Valid
                '    .DriverExcludeTypeId = "1" 'Rated
                '    .RelationshipTypeId = "7" 'Other Relation to Policyholder (needed to order reports)

                '    '.GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                '    '.AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                'End With
                '.Drivers.Add(dr4)
            End If

            'testing 4/24/2014 to see what happens when changing a name on an existing driver... to see if name_id changes and if not, if name changes... will 1st add 3rd driver, and will then change name on subsequent rate... results: existing name record was updated... maintained same name_id... may need to test on client also
            'code for initial rate
            'Dim dr3 As New QuickQuoteDriver
            'With dr3
            '    With .Name
            '        .FirstName = "OtherRelative"
            '        .LastName = "Auto"
            '        .SexId = "2"
            '        .TypeId = "1"
            '        .TaxNumber = "323456781"
            '        .TaxTypeId = "1"
            '        .EntityTypeId = "1" 'Individual
            '        .DescriptionOfOperations = "Rel2 test"
            '        .BirthDate = "4/1/1985"
            '        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
            '        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
            '        .DriversLicenseDate = "4/1/2013"
            '        .DriversLicenseNumber = "3234-56-7891"
            '        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
            '        .MaritalStatusId = "1" 'Single
            '    End With
            '    .Name.NameAddressSourceId = "6" 'Driver
            '    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
            '    .LicenseStatusId = "2" 'Valid
            '    .DriverExcludeTypeId = "1" 'Rated
            '    .RelationshipTypeId = "7" 'Other Relation to Policyholder (needed to order reports)

            '    '.GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
            '    '.AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

            'End With
            '.Drivers.Add(dr3)
            'code for subsequent rate
            'If .Drivers IsNot Nothing AndAlso .Drivers.Count >= 3 Then
            '    With .Drivers(2) '3rd driver
            '        With .Name
            '            '.FirstName = .FirstName.Replace("OtherRelative", "OtherRelative_changed")
            '            '.FirstName = .FirstName.Replace("OTHERRELATIVE", "OtherRelative_changed") 'since replace is case-sensitive
            '            If UCase(.FirstName) = "OTHERRELATIVE" Then
            '                .FirstName = "OTHERRELATIVE_CHANGED"
            '            ElseIf UCase(.FirstName) = "OTHERRELATIVE_CHANGED" Then
            '                .FirstName = "OTHERRELATIVE"
            '            End If
            '        End With
            '    End With
            'End If

            If .CanUseVehicleNumForVehicleReconciliation = False Then 'added 4/22/2014 so it will re-use the same vehicles... will need ELSE if anything needs to be modified/added/removed
                .Vehicles = New Generic.List(Of QuickQuoteVehicle)
                Dim v1 As New QuickQuoteVehicle
                With v1
                    .PrincipalDriverNum = "1"
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 2 Then 'added IF 4/11/2014
                        .OccasionalDriver1Num = "2" 'added 4/9/2014 since new test driver has to be assigned to something
                    End If
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 3 Then 'added IF 4/11/2014
                        .OccasionalDriver2Num = "3" 'added 4/9/2014 for testing
                    End If
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 4 Then 'added IF 4/11/2014
                        .OccasionalDriver3Num = "4" 'added 4/11/2014 for testing
                    End If
                    .Make = "CHEVROLET"
                    .Model = "1500"
                    .Year = "1992"
                    .ClassCode = "01199"
                    .Vin = "1GCKC39FGNJ109116"
                    .CostNew = "18000"
                    .VehicleRatingTypeId = "9" 'Truck, Tractor, or Trailer
                    '.UseCodeTypeId = "28" 'Service (for commercial only)
                    .VehicleUseTypeId = "6" 'Personal
                    .OperatorTypeId = "0"
                    .OperatorUseTypeId = "0"
                    .RadiusTypeId = "1" 'Local, up to 50 miles
                    .SecondaryClassTypeId = "30" 'Not Otherwise Specified
                    .SecondaryClassUsageTypeId = "9" 'All Other
                    .SizeTypeId = "18" 'Light Truck < or equal 10,000 Pounds GVW
                    .PerformanceTypeId = 1 'Standard
                    .BodyTypeId = "40" 'Pickup w/o Camper
                    .AntiLockTypeId = "1" 'Rear-Wheel Anti-Lock Brakes
                    .RegisteredStateId = "16" 'IN
                    .RestraintTypeId = "1" 'Passive Seat Belts
                    .AntiTheftTypeId = "0" 'None
                    .VehicleValueId = "2" 'Used
                    .GrossVehicleWeight = "4150"
                    .VehicleTypeId = "" 'for motorcycles
                    .OdometerReading = "136127"
                    .AnnualMiles = "13500"
                    .MilesOneWay = "77"
                    .DaysPerWeek = "6"
                    .ActualCashValue = "16000" 'problem field... int in database; had to remove money formatting from property
                    .StatedAmount = "14500"
                    .PurchasedDate = "2/10/1996"
                    .CubicCentimeters = "300"
                    .CustomEquipmentAmount = "600"
                    .MultiCar = True
                    .DriverOutOfStateSurcharge = False
                    .DamageYesNoId = "1" 'Yes
                    .DamageRemarks = "Test Damage Remarks"
                    .NonOwnedNamed = False 'Named Non-Owned Non-Specific Vehicle
                    .NonOwned = False 'Extended Non-Owned

                    'new PPA props
                    .Liability_UM_UIM_LimitId = "10" '100,000; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
                    .MedicalPaymentsLimitId = "170" '1,000; N/A=0
                    .ComprehensiveDeductibleLimitId = "18" '100
                    .CollisionDeductibleLimitId = "20" '200
                    .TowingAndLaborDeductibleLimitId = "27" '25; 50=41
                    .UninsuredMotoristLiabilityLimitId = "0" '100/300=4; N/A=0 (UM/UIM BI limit cannot exceed Bodily Injury limit.)(Bodily Injury is required when selecting UM/UIM BI coverage.)
                    .BodilyInjuryLiabilityLimitId = "0" '100/200=135; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
                    .PropertyDamageLimitId = "0" '25,000=8; N/A=0 (Property Damage is not available with Single Limit Liability.)
                    .UninsuredCombinedSingleLimitId = "10" '100,000; N/A=0
                    .UninsuredMotoristPropertyDamageLimitId = "0" '25,000=8; N/A=0 (UM PD limit cannot exceed Property Damage limit.)
                    .UninsuredMotoristPropertyDamageDeductibleLimitId = "155" '300; N/A=0
                    .HasPollutionLiabilityBroadenedCoverage = False 'Pollution Liability Broadened Coverage is only available for Pickups with Farm use.
                    .TransportationExpenseLimitId = "80" '30/900; 20/600=30
                    .HasAutoLoanOrLease = False 'Auto Loan/Lease is only available for vehicles 5 years old or newer.
                    .TapesAndRecordsLimitId = "212" '200; 400=219; 4/15/2014 note: cannot be higher than 200 (in some cases) unless sound equipment is at least 1500
                    .SoundEquipmentLimit = "1500" 'changed 4/1/2014 for testing (from 200) since rating doesn't start until after $1000
                    .ElectronicEquipmentLimit = "300"
                    .TripInterruptionLimitId = "0" '300=25; N/A=0 (Interruption of Travel coverage is only available on Motorcycles.)

                    '9/5/2012 - will get error if garaging address isn't populated
                    With .GaragingAddress
                        .WithinCity = True
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .GaragedInside = False
                    End With

                    'Scheduled Items are only available on Motorcycles.
                    '.ScheduledItems = New List(Of QuickQuoteScheduledItem)
                    'With .ScheduledItems
                    '    Dim si As New QuickQuoteScheduledItem
                    '    With si
                    '        .Amount = "100.00"
                    '        .Breakage = True
                    '        .Description = "test trailer"
                    '        .Dscr2 = "trailer notes"
                    '        .ItemDate = "7/1/2013"
                    '        .ScheduledItemsCategoryId = "2" 'Coverage
                    '        .ScheduledItemsComboId = "0" 'None
                    '        .ScheduledItemsTypeId = "21" 'Trailers
                    '    End With
                    '    .Add(si)
                    '    Dim si2 As New QuickQuoteScheduledItem
                    '    With si2
                    '        .Amount = "150.00"
                    '        .Breakage = False
                    '        .Description = "test sidecar"
                    '        .Dscr2 = "sidecar notes"
                    '        .ItemDate = "7/3/2013"
                    '        .ScheduledItemsCategoryId = "2" 'Coverage
                    '        .ScheduledItemsComboId = "0" 'None
                    '        .ScheduledItemsTypeId = "22" 'Sidecars
                    '        .AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                    '        Dim ai As New QuickQuoteAdditionalInterest
                    '        With ai
                    '            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    '            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                    '            .Description = "Test AI Description"
                    '            .Other = ""
                    '            .TypeId = "65" 'Loss Payable - Loss Payable
                    '        End With
                    '        .AdditionalInterests.Add(ai)
                    '    End With
                    '    .Add(si2)
                    'End With
                End With
                .Vehicles.Add(v1)

                Dim v2 As New QuickQuoteVehicle
                With v2
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 2 Then 'added IF 4/11/2014; was previously always setting Principal to 1 w/o any Occs
                        .PrincipalDriverNum = "2"
                        .OccasionalDriver1Num = "1"
                    Else
                        .PrincipalDriverNum = "1"
                    End If
                    .Make = "CHEVY"
                    .Model = "CORVETTE"
                    .Year = "1973"
                    .ClassCode = "7398"
                    .Vin = "1Z37J354324831111"
                    .CostNew = "12000"
                    .VehicleRatingTypeId = "1" 'Private Passenger Type
                    '.UseCodeTypeId = "20" 'Business (for commercial only)
                    .VehicleUseTypeId = "2" 'Business
                    .OperatorTypeId = "0"
                    .OperatorUseTypeId = "0"
                    .RadiusTypeId = "0" 'N/A
                    .SecondaryClassTypeId = "0" 'N/A
                    .SecondaryClassUsageTypeId = "0" 'N/A
                    .SizeTypeId = "0" 'N/A
                    .PerformanceTypeId = "2" 'High
                    .BodyTypeId = "14" 'Car
                    .AntiLockTypeId = "2" 'All-Wheel Anti-Lock Brakes
                    .RegisteredStateId = "16" 'IN
                    .RestraintTypeId = "1" 'Passive Seat Belts
                    .AntiTheftTypeId = "1" 'Alarm Only
                    .VehicleValueId = "2" 'Used
                    .GrossVehicleWeight = "2650"
                    .VehicleTypeId = "" 'for motorcycles
                    .OdometerReading = "87569"
                    .AnnualMiles = "8300"
                    .MilesOneWay = "34"
                    .DaysPerWeek = "5"
                    .ActualCashValue = "10800" 'problem field... int in database; had to remove money formatting from property
                    .StatedAmount = "10500"
                    .PurchasedDate = "6/1/1988"
                    .CubicCentimeters = "350"
                    .CustomEquipmentAmount = "13500"
                    .MultiCar = True
                    .DriverOutOfStateSurcharge = False
                    .DamageYesNoId = "2" 'No
                    .DamageRemarks = ""
                    .NonOwnedNamed = False 'Named Non-Owned Non-Specific Vehicle
                    .NonOwned = False 'Extended Non-Owned

                    'new PPA props
                    .Liability_UM_UIM_LimitId = "0" 'N/A; 100,000=10
                    .MedicalPaymentsLimitId = "0" 'N/A; 1,000=170
                    .ComprehensiveDeductibleLimitId = "18" '100
                    .CollisionDeductibleLimitId = "20" '200
                    .TowingAndLaborDeductibleLimitId = "41" '50; 25=27
                    .UninsuredMotoristLiabilityLimitId = "0" 'N/A; 100/300=4
                    .BodilyInjuryLiabilityLimitId = "0" 'N/A; 100/200=135
                    .PropertyDamageLimitId = "0" 'N/A; 25,000=8
                    .UninsuredCombinedSingleLimitId = "0" 'N/A; 100,000=10
                    .UninsuredMotoristPropertyDamageLimitId = "0" 'N/A; 25,000=8
                    .UninsuredMotoristPropertyDamageDeductibleLimitId = "0" 'N/A; 300=155
                    .HasPollutionLiabilityBroadenedCoverage = False
                    .TransportationExpenseLimitId = "30" '20/600; 30/900=80
                    .HasAutoLoanOrLease = False
                    .TapesAndRecordsLimitId = "219" '400; 200=212; 4/15/2014 note: cannot be higher than 200 (in some cases) unless sound equipment is at least 1500
                    .SoundEquipmentLimit = "2000" 'changed 4/1/2014 for testing (from 50) since rating doesn't start until after $1000
                    .ElectronicEquipmentLimit = "75"
                    .TripInterruptionLimitId = "0" 'N/A; 300=25

                    With .GaragingAddress
                        .WithinCity = True
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .GaragedInside = True
                    End With

                    'Scheduled Items are only available on Motorcycles.
                    '.ScheduledItems = New List(Of QuickQuoteScheduledItem)
                    'Dim si3 As New QuickQuoteScheduledItem
                    'With si3
                    '    .Amount = "200.00"
                    '    .Breakage = False
                    '    .Description = "test windshield"
                    '    .Dscr2 = "windshield notes"
                    '    .ItemDate = "7/5/2013"
                    '    .ScheduledItemsCategoryId = "2" 'Coverage
                    '    .ScheduledItemsComboId = "0" 'None
                    '    .ScheduledItemsTypeId = "23" 'Windshield
                    'End With
                    '.ScheduledItems.Add(si3)
                End With
                .Vehicles.Add(v2)
            Else 'added 4/24/2014 so code can set veh.driverNum props if a driver is added for testing
                'commenting to test vehicle.driverNum props since xml will now be from image (instead of BuildXml method) and driverNum properties may not match the incremental QQ driver #s... results w/ 3 drivers (diaDriverNums 1, 2, and 4): actually worked fine since nothing changed but wouldn't display correctly in tree or on page... need to determine if xml returned is from image and reconcile vehicle.driverNum props if so (use Driver.DriverNum props that are set from Diamond to match up w/ correct sequential QQ driver #)... now fixed in QuickQuoteObject.FinalizeQuickQuote method (specifically ParseThruVehicles method)
                'If .Vehicles IsNot Nothing AndAlso .Vehicles.Count > 0 Then
                '    With .Vehicles(0) '1st vehicle
                '        If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 2 Then
                '            .OccasionalDriver1Num = "2"
                '        Else
                '            .OccasionalDriver1Num = ""
                '        End If
                '        If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 3 Then
                '            .OccasionalDriver2Num = "3"
                '        Else
                '            .OccasionalDriver2Num = ""
                '        End If
                '        If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 4 Then
                '            .OccasionalDriver3Num = "4"
                '        Else
                '            .OccasionalDriver3Num = ""
                '        End If
                '    End With
                'End If
                '4/28/2014 motorcycle test (C:\Users\domin\Documents\QA_QPPA111512_motorcycle.xml)
                If .Vehicles IsNot Nothing AndAlso .Vehicles.Count = 2 Then
                    Dim v3 As New QuickQuoteVehicle
                    With v3
                        If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 1 Then
                            .PrincipalDriverNum = "1"
                        End If
                        .AnnualMiles = "5700"
                        .AntiLockTypeId = "3" 'None
                        .BodyTypeId = "42" 'Motorcycle
                        .ClassCode = "0998961"
                        .CostNew = "17000"
                        .CubicCentimeters = "200" 'Horsepower/CC's
                        .DaysPerWeek = "5"
                        .Make = "Harley-Davidson"
                        .MilesOneWay = "20"
                        .Model = "Heritage Softail Classic FLSTC"
                        .MultiCar = True
                        .OdometerReading = "23000"
                        .PerformanceTypeId = "1" 'Standard
                        .RegisteredStateId = "16"
                        .VehicleTypeId = "1" 'Cruiser
                        .VehicleUseTypeId = "6" 'Personal
                        .VehicleValueId = "1" 'New
                        .Vin = "1ABCD1234EFGH5678"
                        .Year = "2010"

                        'covCodeId 2; covLimitId 10; exposure 12
                        'covCodeId 6; covLimitId 170; exposure 12
                        'covCodeId 10007; covLimitId 10; exposure 12
                        'covCodeId 293; covLimitId 155; exposure 12
                        'covCodeId 80031; covLimitId 25; exposure 12
                        'covCodeId 1; covLimitId 0; exposure 0; new covNum
                        'covCodeId 4; covLimitId 0; exposure 0; new covNum
                        'covCodeId 8; covLimitId 0; exposure 0; new covNum
                        'covCodeId 9; covLimitId 0; exposure 0; new covNum
                        'covCodeId 3; covLimitId 0; exposure 0; new covNum
                        'covCodeId 5; covLimitId 0; exposure 0; new covNum
                        'covCodeId 80056; covLimitId 0; exposure 0; new covNum
                        'covCodeId 60008; covLimitId 0; exposure 0; new covNum
                        'covCodeId 66; covLimitId 0; exposure 0; new covNum
                        'covCodeId 10044; covLimitId 0; exposure 0; new covNum
                        'covCodeId 16; covLimitId 0; exposure 0; new covNum
                        'covCodeId 15; covLimitId 0; exposure 0; new covNum
                        'covCodeId 57; covLimitId 0; exposure 0; new covNum
                        'covCodeId 313; covLimitId 0; exposure 0; new covNum

                        .Liability_UM_UIM_LimitId = "10" '100,000
                        .MedicalPaymentsLimitId = "170" '1,000
                        .UninsuredCombinedSingleLimitId = "10" '100,000
                        .UninsuredMotoristPropertyDamageDeductibleLimitId = "155" '300
                        .TripInterruptionLimitId = "300" '25

                        .AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        Dim ai As New QuickQuoteAdditionalInterest
                        With ai
                            .ListId = "100930"
                            .ATIMA = False
                            .TypeId = "53" 'First Lienholder
                            .BillTo = False
                            .Description = "desc"
                            .HasWaiverOfSubrogation = False
                            .ISAOA = False
                            .InterestInProperty = "6.00"
                            .LoanAmount = "10000.00"
                            .LoanNumber = "123ABC"
                            .Other = "other"

                            With .Address 'original AddressId = 2647463
                                .City = "INDIANAPOLIS"
                                .HouseNum = "8675"
                                .Other = "GREENWOOD CORNER OFFICE"
                                .StateId = "16"
                                .StreetName = "S US 31"
                                .Zip = "46227-0000"
                            End With
                            With .Name 'original NameId = 2511911
                                .CommercialName1 = "FIRST INDIANA BANK NA"
                                .TaxNumber = "000000000"
                                .TaxTypeId = "0"
                                .TypeId = "2"
                            End With

                            'old test w/ AdditionalInterestListId 163457
                            'With .Address 'original AddressId = 14275330
                            '    .City = "Indianapolis"
                            '    .County = "Marion"
                            '    .HouseNum = "123"
                            '    .StateId = "16"
                            '    .StreetName = "Finance Drive"
                            '    .Zip = "46227-0000"
                            'End With
                            'With .Name 'original NameId = 14316536
                            '    .CommercialName1 = "Test Finance Company"
                            '    .TaxNumber = "123456789"
                            '    .TaxTypeId = "2"
                            '    .TypeId = "2"
                            'End With
                            '.Phones = New List(Of QuickQuotePhone)
                            'Dim p As New QuickQuotePhone
                            'With p 'original phoneId = 1097783
                            '    p.Number = "(317)111-2222"
                            '    p.TypeId = "2"
                            'End With
                            '.Phones.Add(p)
                            '.Emails = New List(Of QuickQuoteEmail)
                            'Dim e As New QuickQuoteEmail
                            'With e
                            '    e.Address = "test@test.com"
                            '    e.TypeId = "2"
                            'End With
                            '.Emails.Add(e)
                        End With
                        .AdditionalInterests.Add(ai)
                    End With
                    .Vehicles.Add(v3)
                ElseIf .Vehicles IsNot Nothing AndAlso .Vehicles.Count = 3 Then
                    With .Vehicles(2) '3rd vehicle
                        '.PrincipalDriverNum = "1" '4/30/2014 - changing to empty string and then back to 1 to test successful save but failed rate... to verify subsequent Rate service call (as opposed to Save/Rate) works... worked correctly
                        'If .AdditionalInterests IsNot Nothing AndAlso .AdditionalInterests.Count = 1 Then
                        '    With .AdditionalInterests(0) '1st AI
                        '        .ListId = "" 'testing to see if it blows up when reconciling existing AI and not sending listId (since we're not setting any IsNew flags or anything)... didn't work; 5/6/2014 - trying again after adding logic to create AIList record... worked successfully... new AIList record id = 168850; used agencyId 21 since that's what was stored on the previous one... may need to clear out... code will now overwrite w/ quote's agencyId if possible
                        '        '.SingleEntry = True 'testing to see if it will only generate a new one if it's singleEntry
                        '        '.ListId = "168850" '"100930"
                        '        .SingleEntry = False
                        '        '5/6/2014 note: DisplayName and DisplayAddress have ReadOnly props on AdditionalInterestList (along w/ the ones that are already on the Name and Address sub-objects)... they don't seem to be populated whenever SingleEntry is set to True or False; might need to set OpenToAdditionalInterestLookupOnAdd to True
                        '    End With
                        'End If
                        'testing scheduled items logic 5/14/2014... worked successfully... increased premium from $1749 to $1757
                        If .BodyTypeId = "42" Then 'Motorcycle
                            If .ScheduledItems Is Nothing OrElse .ScheduledItems.Count = 0 Then
                                If .ScheduledItems Is Nothing Then
                                    .ScheduledItems = New List(Of QuickQuoteScheduledItem)
                                End If
                                With .ScheduledItems
                                    Dim si As New QuickQuoteScheduledItem
                                    With si
                                        .Amount = "100.00"
                                        .Breakage = True
                                        .Description = "test trailer"
                                        .Dscr2 = "trailer notes"
                                        .ItemDate = "7/1/2013"
                                        .ScheduledItemsCategoryId = "2" 'Coverage
                                        .ScheduledItemsComboId = "0" 'None
                                        .ScheduledItemsTypeId = "21" 'Trailers
                                    End With
                                    .Add(si)
                                    Dim si2 As New QuickQuoteScheduledItem
                                    With si2
                                        .Amount = "150.00"
                                        .Breakage = False
                                        .Description = "test sidecar"
                                        .Dscr2 = "sidecar notes"
                                        .ItemDate = "7/3/2013"
                                        .ScheduledItemsCategoryId = "2" 'Coverage
                                        .ScheduledItemsComboId = "0" 'None
                                        .ScheduledItemsTypeId = "22" 'Sidecars
                                        .AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                                        Dim ai As New QuickQuoteAdditionalInterest
                                        With ai
                                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                                            .Description = "Test AI Description"
                                            .Other = ""
                                            .TypeId = "65" 'Loss Payable - Loss Payable
                                        End With
                                        .AdditionalInterests.Add(ai)
                                    End With
                                    .Add(si2)
                                End With
                            End If
                        End If
                    End With
                End If
            End If

            If .CanUseExclusionNumForExclusionReconciliation = True Then 'added 4/24/2014 so it will re-use the same excls... will need ELSE if anything needs to be modified/added/removed
                .Exclusions = New List(Of QuickQuoteExclusion)
                With .Exclusions
                    Dim e1 As New QuickQuoteExclusion
                    With e1
                        .ExclusionTypeId = "1" 'Exclusion
                        .Description = "exc desc"
                    End With
                    .Add(e1)
                    Dim e2 As New QuickQuoteExclusion
                    With e2
                        .ExclusionTypeId = "3" 'Restriction
                        .Description = "rest desc"
                    End With
                    .Add(e2)
                    Dim e3 As New QuickQuoteExclusion
                    With e3
                        .ExclusionTypeId = "4" 'Comment
                        .Description = "comm desc"
                    End With
                    .Add(e3)
                End With
            End If

            .HouseholdMembers = New List(Of QuickQuoteHouseholdMember)
            With .HouseholdMembers
                Dim m As New QuickQuoteHouseholdMember
                With m
                    .DOB = "1/2/1980"
                    .MemberName = "Add Res1"
                    .RelationshipTypeId = "11" 'Not Related to Policyholder
                End With
                .Add(m)
                Dim m2 As New QuickQuoteHouseholdMember
                With m2
                    .DOB = "5/1/2005"
                    .MemberName = "Pol Child1"
                    .RelationshipTypeId = "2" 'Child of Policyholder
                End With
                .Add(m2)
            End With

            With .ResidenceInfo
                .CurrentResidenceTypeId = "4" 'Apartment
                .Owned = False

                .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                With .ResidenceInfoDetails
                    Dim d As New QuickQuoteResidenceInfoDetail
                    With d
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .Address.StreetName &= " Prev1"
                        .ResidenceInfoDetailTypeId = "1" 'Previous1
                        .YearsAtPreviousAddress = "1"
                    End With
                    .Add(d)
                    Dim d2 As New QuickQuoteResidenceInfoDetail
                    With d2
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .Address.StreetName &= " Prev2"
                        .ResidenceInfoDetailTypeId = "2" 'Previous2
                        .YearsAtPreviousAddress = "3"
                    End With
                    .Add(d2)
                    Dim d3 As New QuickQuoteResidenceInfoDetail
                    With d3
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .Address.StreetName &= " Prev3"
                        .ResidenceInfoDetailTypeId = "3" 'Previous3
                        .YearsAtPreviousAddress = "2"
                    End With
                    .Add(d3)
                End With

                .YearsAtCurrentAddress = "2"
                .ExpirationDate = "8/31/2013"
                .HomeDiscount = True
                .PolicyNum = "HOM1234567"
            End With
        End With
        'End With 'removed 12/5/2013

        'testing 4/18/2014 to see how reconciliation logic can affect the order of items in Diamond and potentially throw off other things... like Vehicle.PrincipalDriverNum, etc.
        'results... driver order changed in QQ (so vehicle driverNum properties reflected the opposite), but everything stayed the same in Diamond
        'If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 2 Then
        '    Dim testDriver As QuickQuoteDriver = qqHelper.CloneObject(quickQuote.Drivers(0))
        '    If testDriver IsNot Nothing Then
        '        quickQuote.Drivers.Insert(2, testDriver) 'add in 3rd position... after 2nd driver
        '        quickQuote.Drivers.RemoveAt(0) 'remove 1st driver... since he was just inserted after 2nd driver
        '        If quickQuote.Drivers.Count >= 2 Then 'just used as a marker; should always be true if testDriver is something

        '        End If
        '        'Exit Sub 'for testing 1st go-around to make sure it looks correct; everything looks as expected
        '    End If
        'End If

        'testing 4/23/2014 to remove all VehicleSymbols... since previous parsing logic (w/ rated xml) was always maintaining ones flagged for delete... logic since updated to only add to QQVehicle if not deleted
        'If quickQuote.Vehicles IsNot Nothing AndAlso quickQuote.Vehicles.Count > 0 Then
        '    For Each v As QuickQuoteVehicle In quickQuote.Vehicles
        '        If v.VehicleSymbols IsNot Nothing AndAlso v.VehicleSymbols.Count > 0 Then
        '            For Each vs As QuickQuoteVehicleSymbol In v.VehicleSymbols
        '                vs.Dispose()
        '                vs = Nothing
        '            Next
        '            v.VehicleSymbols.Clear()
        '            v.VehicleSymbols = Nothing
        '        End If
        '    Next
        'End If

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

                
            Else
                'error
            End If
        End If

    End Sub
    'added 8/1/2014 for simple quote testing
    Private Sub PPA_save_test_new_simple(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False) 'added 7/24/2013; added optional param 8/8/2013; 12/23/2014 - added optional updateQuickQuoteEntities param
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'start new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote 'added 12/5/2013
                .LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal

                '.Client.ClientId = ""

                '.QuoteDescription = "Testing Rate Diffs 1" 'removed 12/23/2014
                .QuoteDescription = "Test Desc"

                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Auto"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234567890" 'changed 11/10/2016 from "1234-56-7890"
                        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                        .MaritalStatusId = "2" '1=Single, 2=Married; updated 4/11/2014 to use Married
                    End With
                    With .Address
                        .HouseNum = "123"
                        .StreetName = "Auto Street"
                        .City = "Indianapolis"
                        .Zip = "46227"
                        .County = "Marion"
                    End With

                    .Phones = New List(Of QuickQuotePhone)
                    Dim cp1 As New QuickQuotePhone
                    cp1.Number = "(312)555-5557"
                    cp1.TypeId = "1" 'Home; added 2/7/2014
                    .Phones.Add(cp1)
                    'added 2/7/2014
                    Dim cp2 As New QuickQuotePhone 'not sure if this will get added to db since the field doesn't show in the UI
                    With cp2
                        .Number = "(317)123-4567"
                        .TypeId = "2" 'Business
                    End With
                    .Phones.Add(cp2)
                    Dim cp3 As New QuickQuotePhone 'not sure if this will get added to db since the field doesn't show in the UI
                    With cp3
                        .TypeId = "3" 'Fax
                        .Number = "(317)345-6789"
                        .Extension = "111"
                    End With
                    .Phones.Add(cp3)

                    'added 2/7/2014
                    .Emails = New List(Of QuickQuoteEmail)
                    Dim em As New QuickQuoteEmail
                    With em
                        .Address = "test@test.com"
                        .TypeId = "3" 'Other
                    End With
                    .Emails.Add(em)

                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "Lady"
                        .LastName = "Auto"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "523456780"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        '.BirthDate = "1/1/1996" '2/10/2014 - updated to test Driver.GoodStudent... works
                        '.BirthDate = "1/1/1950" '2/10/2014 - updated to test Driver.AccPreventionCourse... works
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "5234567891" 'changed 11/10/2016 from "5234-56-7891"
                        .DriversLicenseStateId = "16" 'added 4/17/2014; needed for MVR
                        .MaritalStatusId = "2" '1=Single, 2=Married
                    End With
                    With .Address
                        .HouseNum = "123"
                        .StreetName = "Auto Street"
                        .City = "Indianapolis"
                        .Zip = "46227"
                        .County = "Marion"
                    End With
                End With

                .CopyPolicyholdersToClients() 'added 8/1/2014
            End With
        End If

        With quickQuote 'added 12/5/2013

            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 4/8/2014 to test Credit report ordering
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'property already existed for other LOBs, but PPA will use a different coveragecode_id
            .HasBusinessMasterEnhancement = True
            'updated 1/27/2014
            .AutoHome = False
            .EmployeeDiscount = False
            .FacultativeReinsurance = False
            .SelectMarketCredit = False

            'added 8/1/2014 for testing; removing all Modifiers caused an error and somehow unlinked principal driver # on veh... 4 validationItems ('Must enter Primary Driver for Vehicle #1.'; 'All rated drivers must be assigned to a vehicle. Driver #1 is not assigned to a vehicle.'; 'Object reference not set to an instance of an object. (in ConfigurableBookEngine.InsRateScriptHost.InternalCalculateRate)'; 'Rating failed.'; 8/4/2014 - must've been a fluke... wasn't able to duplicate when attempted again on 8/4/2014
            'If .QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.Quote Then
            '    .QuoteOrIssueBound = Nothing
            'End If

            If .CanUseDriverNumForDriverReconciliation = False Then 'added 4/22/2014 so it will re-use the same drivers... will need ELSE if anything needs to be modified/added/removed
                .Drivers = New Generic.List(Of QuickQuoteDriver)
                Dim dr1 As New QuickQuoteDriver
                With dr1
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name) '.Client.Name
                    .Name.NameAddressSourceId = "6" 'Driver
                    If .Name.DriversLicenseStateId = "" Then 'added 4/17/2014; needed for MVR
                        .Name.DriversLicenseStateId = "16"
                    End If
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                    .LicenseStatusId = "2" 'Valid
                    .DriverExcludeTypeId = "1" 'Rated
                    .RelationshipTypeId = "8" 'Policyholder (needed to order reports)

                    'added 2/7/2014
                    .GoodStudent = True '2/10/2014 note: only works w/ student-aged driver
                    .AccPreventionCourse = "1/1/2013" '2/10/2014 note: only works w/ older driver (probably 55+)

                    If quickQuote.Policyholder IsNot Nothing Then 'added 12/22/2014 for testing Driver emails/phones (should have same problem as BillingAddressee and Operator... since Diamond doesn't load them into the image)
                        .Emails = quickQuote.Policyholder.Emails
                        .Phones = quickQuote.Policyholder.Phones
                    End If
                End With
                .Drivers.Add(dr1)
            Else
                'add logic here to change existing driver(s)
                If .Drivers IsNot Nothing AndAlso .Drivers.Count = 1 Then
                    With .Drivers(0)
                        .Preferred = False 'added 8/1/2014 for testing; True didn't seem to make a difference
                        .LicenseStatusId = "2" '2 = Valid

                        If quickQuote.Policyholder IsNot Nothing Then 'added 12/22/2014 for testing Driver emails/phones (should have same problem as BillingAddressee and Operator... since Diamond doesn't load them into the image)
                            .Emails = quickQuote.Policyholder.Emails
                            .Phones = quickQuote.Policyholder.Phones
                        End If
                    End With
                End If
            End If

            If .CanUseVehicleNumForVehicleReconciliation = False Then 'added 4/22/2014 so it will re-use the same vehicles... will need ELSE if anything needs to be modified/added/removed
                .Vehicles = New Generic.List(Of QuickQuoteVehicle)
                Dim v1 As New QuickQuoteVehicle
                With v1
                    .PrincipalDriverNum = "1"
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 2 Then 'added IF 4/11/2014
                        .OccasionalDriver1Num = "2" 'added 4/9/2014 since new test driver has to be assigned to something
                    End If
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 3 Then 'added IF 4/11/2014
                        .OccasionalDriver2Num = "3" 'added 4/9/2014 for testing
                    End If
                    If quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count >= 4 Then 'added IF 4/11/2014
                        .OccasionalDriver3Num = "4" 'added 4/11/2014 for testing
                    End If
                    .Make = "CHEVROLET"
                    .Model = "1500"
                    .Year = "1992"
                    .ClassCode = "01199"
                    .Vin = "1GCKC39FGNJ109116"
                    .CostNew = "18000"
                    .VehicleRatingTypeId = "9" 'Truck, Tractor, or Trailer
                    '.UseCodeTypeId = "28" 'Service (for commercial only)
                    .VehicleUseTypeId = "6" 'Personal
                    .OperatorTypeId = "0"
                    .OperatorUseTypeId = "0"
                    .RadiusTypeId = "1" 'Local, up to 50 miles
                    .SecondaryClassTypeId = "30" 'Not Otherwise Specified
                    .SecondaryClassUsageTypeId = "9" 'All Other
                    .SizeTypeId = "18" 'Light Truck < or equal 10,000 Pounds GVW
                    .PerformanceTypeId = 1 'Standard
                    .BodyTypeId = "40" 'Pickup w/o Camper
                    .AntiLockTypeId = "1" 'Rear-Wheel Anti-Lock Brakes
                    .RegisteredStateId = "16" 'IN
                    .RestraintTypeId = "1" 'Passive Seat Belts
                    .AntiTheftTypeId = "0" 'None
                    .VehicleValueId = "2" 'Used
                    .GrossVehicleWeight = "4150"
                    .VehicleTypeId = "" 'for motorcycles
                    .OdometerReading = "136127"
                    .AnnualMiles = "13500"
                    .MilesOneWay = "77"
                    .DaysPerWeek = "6"
                    .ActualCashValue = "16000" 'problem field... int in database; had to remove money formatting from property
                    .StatedAmount = "14500"
                    .PurchasedDate = "2/10/1996"
                    .CubicCentimeters = "300"
                    .CustomEquipmentAmount = "600"
                    .MultiCar = True
                    .DriverOutOfStateSurcharge = False
                    .DamageYesNoId = "1" 'Yes
                    .DamageRemarks = "Test Damage Remarks"
                    .NonOwnedNamed = False 'Named Non-Owned Non-Specific Vehicle
                    .NonOwned = False 'Extended Non-Owned

                    'new PPA props
                    .Liability_UM_UIM_LimitId = "10" '100,000; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
                    .MedicalPaymentsLimitId = "170" '1,000; N/A=0
                    .ComprehensiveDeductibleLimitId = "18" '100
                    .CollisionDeductibleLimitId = "20" '200
                    .TowingAndLaborDeductibleLimitId = "27" '25; 50=41
                    .UninsuredMotoristLiabilityLimitId = "0" '100/300=4; N/A=0 (UM/UIM BI limit cannot exceed Bodily Injury limit.)(Bodily Injury is required when selecting UM/UIM BI coverage.)
                    .BodilyInjuryLiabilityLimitId = "0" '100/200=135; N/A=0 (Single Limit Liability and Bodily Injury are not available together.)
                    .PropertyDamageLimitId = "0" '25,000=8; N/A=0 (Property Damage is not available with Single Limit Liability.)
                    .UninsuredCombinedSingleLimitId = "10" '100,000; N/A=0
                    .UninsuredMotoristPropertyDamageLimitId = "0" '25,000=8; N/A=0 (UM PD limit cannot exceed Property Damage limit.)
                    .UninsuredMotoristPropertyDamageDeductibleLimitId = "155" '300; N/A=0
                    .HasPollutionLiabilityBroadenedCoverage = False 'Pollution Liability Broadened Coverage is only available for Pickups with Farm use.
                    .TransportationExpenseLimitId = "80" '30/900; 20/600=30
                    .HasAutoLoanOrLease = False 'Auto Loan/Lease is only available for vehicles 5 years old or newer.
                    .TapesAndRecordsLimitId = "212" '200; 400=219; 4/15/2014 note: cannot be higher than 200 (in some cases) unless sound equipment is at least 1500
                    .SoundEquipmentLimit = "1500" 'changed 4/1/2014 for testing (from 200) since rating doesn't start until after $1000
                    .ElectronicEquipmentLimit = "300"
                    .TripInterruptionLimitId = "0" '300=25; N/A=0 (Interruption of Travel coverage is only available on Motorcycles.)

                    '9/5/2012 - will get error if garaging address isn't populated
                    With .GaragingAddress
                        .WithinCity = True
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .GaragedInside = False
                    End With

                End With
                .Vehicles.Add(v1)

            Else
                'add logic here to change existing vehicle(s)
                If .Vehicles IsNot Nothing AndAlso .Vehicles.Count = 1 Then
                    With .Vehicles(0)
                        .AntiLockTypeId = "1" '1 = Rear-Wheel Anti-Lock Brakes
                        If (.PrincipalDriverNum = "" OrElse .PrincipalDriverNum = "0") AndAlso quickQuote.Drivers IsNot Nothing AndAlso quickQuote.Drivers.Count > 0 Then
                            .PrincipalDriverNum = "1"
                        End If
                    End With
                End If
            End If

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    Private Sub HOM_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate) 'added 7/26/2013; added optional param 8/8/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

            'quickQuote.Client.ClientId = "216844"'old
            'quickQuote.Client.ClientId = "358559"'recently used for HOM

            quickQuote.QuoteDescription = "Test Desc"
            quickQuote.EffectiveDate = "7/20/2013"

            quickQuote.RiskGrade = "1"
            quickQuote.RiskGradeLookupId = "74"

            quickQuote.Client.Name.FirstName = "Don"
            quickQuote.Client.Name.LastName = "Home"
            quickQuote.Client.Name.SexId = "1"
            quickQuote.Client.Name.TypeId = "1"
            quickQuote.Client.Name.TaxNumber = "123456789"
            quickQuote.Client.Name.TaxTypeId = "1"
            quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            quickQuote.Client.Name.BirthDate = "1/1/1982"
            quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            quickQuote.Client.Name.DriversLicenseNumber = "1234-56-7890"
            quickQuote.Client.Name.MaritalStatusId = "2" '1=Single; 2=Married
            'quickQuote.Client.Address.HouseNum = "123"
            'quickQuote.Client.Address.StreetName = "Test Street"
            'quickQuote.Client.Address.City = "Indianapolis"
            'quickQuote.Client.Address.Zip = "46227"
            'quickQuote.Client.Address.County = "Marion"
            'changed to make different than address for PPA quote
            quickQuote.Client.Address.HouseNum = "567"
            quickQuote.Client.Address.StreetName = "Home Boulevard"
            quickQuote.Client.Address.City = "Fishers"
            quickQuote.Client.Address.Zip = "46038"
            quickQuote.Client.Address.County = "Hamilton"

            'real data (didn't work)
            'quickQuote.Client.Name.FirstName = "JUNIOR"
            'quickQuote.Client.Name.MiddleName = "W"
            'quickQuote.Client.Name.LastName = "BROWN"
            'quickQuote.Client.Name.SexId = "1"
            'quickQuote.Client.Name.TypeId = "1"
            'quickQuote.Client.Name.TaxNumber = "666648093"
            'quickQuote.Client.Name.TaxTypeId = "1"
            'quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            'quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            'quickQuote.Client.Name.BirthDate = "10/26/1956"
            'quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            'quickQuote.Client.Name.DriversLicenseNumber = "8902605449"
            'quickQuote.Client.Name.MaritalStatusId = "1" '1=Single; 2=Married
            'quickQuote.Client.Address.HouseNum = "7025"
            'quickQuote.Client.Address.StreetName = "MARINERS LN"
            'quickQuote.Client.Address.ApartmentNumber = "B"
            'quickQuote.Client.Address.City = "INDIANAPOLIS"
            'quickQuote.Client.Address.Zip = "462141789"
            'quickQuote.Client.Address.County = "MARION"

            quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
            Dim cp1 As New QuickQuotePhone
            cp1.Number = "(312)555-5557"
            quickQuote.Client.Phones.Add(cp1)
            'Policyholder information will automatically be populated by Client

            '7/31/2013 - policyholder2 not working yet; now working after updating node from Policyholder2 to PolicyHolder2 (also changed Policyholder to PolicyHolder)
            quickQuote.Policyholder2.Name.FirstName = "#2"
            quickQuote.Policyholder2.Name.LastName = "Home"
            quickQuote.Policyholder2.Name.SexId = "2"
            quickQuote.Policyholder2.Name.TypeId = "1"
            quickQuote.Policyholder2.Name.TaxNumber = "223456789"
            quickQuote.Policyholder2.Name.TaxTypeId = "1"
            quickQuote.Policyholder2.Name.EntityTypeId = "1" 'Individual
            quickQuote.Policyholder2.Name.DescriptionOfOperations = "PH2 test"
            quickQuote.Policyholder2.Name.BirthDate = "2/1/1982"
            quickQuote.Policyholder2.Name.DriversLicenseDate = "2/1/2013"
            quickQuote.Policyholder2.Name.DriversLicenseNumber = "2234-56-7890"
            quickQuote.Policyholder2.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Policyholder2.Address = quickQuote.Client.Address
            quickQuote.Policyholder2.Phones = quickQuote.Client.Phones

            quickQuote.Applicants = New List(Of QuickQuoteApplicant)
            Dim a As New QuickQuoteApplicant
            a.Name = quickQuote.Client.Name 'copied from Client
            a.Name.NameAddressSourceId = "28" 'Applicant
            a.Address = quickQuote.Client.Address 'copied from Client
            a.BusinessStartedDate = "8/1/2012"
            a.EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
            a.Employer = "Test Employer"
            a.OccupationTypeId = "23" 'Professional
            a.PurchaseDate = "7/1/2012"
            a.RelationshipTypeId = "8" 'Policyholder
            With a.ResidenceInfo
                .CurrentResidenceTypeId = "4" 'Apartment
                .Owned = False

                .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                Dim d1 As New QuickQuoteResidenceInfoDetail
                d1.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d1.Address.StreetName &= " Prev1"
                d1.ResidenceInfoDetailTypeId = "1" 'Previous1
                d1.YearsAtPreviousAddress = "1"
                .ResidenceInfoDetails.Add(d1)
                Dim d2 As New QuickQuoteResidenceInfoDetail
                d2.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d2.Address.StreetName &= " Prev2"
                d2.ResidenceInfoDetailTypeId = "2" 'Previous2
                d2.YearsAtPreviousAddress = "3"
                .ResidenceInfoDetails.Add(d2)
                Dim d3 As New QuickQuoteResidenceInfoDetail
                d3.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d3.Address.StreetName &= " Prev3"
                d3.ResidenceInfoDetailTypeId = "3" 'Previous3
                d3.YearsAtPreviousAddress = "2"
                .ResidenceInfoDetails.Add(d3)

                .YearsAtCurrentAddress = "2"
            End With
            a.SelfEmployedInfo = "self employment info"
            a.SpouseEmployer = "N/A"
            a.SpouseOccupationTypeId = "30" 'Unemployed
            a.StandardIndustrialClassification = "sic"
            a.USCitizenTypeId = "1" 'Yes
            a.YearsWithCurrentEmployer = "8"
            a.YearsWithPriorEmployer = "2"
            quickQuote.Applicants.Add(a)
        End If

        'for tier override (should only be used for testing)
        quickQuote.TierTypeId = "1" 'Uniform (probably not needed)
        quickQuote.UseTierOverride = True
        quickQuote.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

        'testing to make sure I can get a different credit message when I change the address to not match the last auto quote I did (Credit Ordering Informational Message: Credit Report - DON TEST AUTO - Unscored Report); worked
        'quickQuote.Policyholder.Address.AddressNum = "567"'should be HouseNum
        'quickQuote.Policyholder.Address.StreetName = "Home Boulevard"
        'quickQuote.Policyholder.Address.City = "Fishers"
        'quickQuote.Policyholder.Address.Zip = "46038"

        'policy level covs
        'quickQuote.PersonalLiabilityLimitId = "259" '25,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        'quickQuote.MedicalPaymentsLimitid = "166" '500 (Location #1 - Invalid Coverage F limit selected for Homeowners form.)
        quickQuote.PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        quickQuote.MedicalPaymentsLimitid = "170" '1,000

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'quickQuote.Client.Name
        l1.Name.NameAddressSourceId = "13" 'Location
        l1.Address = qqHelper.CloneObject(quickQuote.Client.Address) 'quickQuote.Client.Address
        l1.ProtectionClassId = "1" '1

        l1.Acreage = "2"
        l1.CondoRentedTypeId = "2" 'No
        l1.ConstructionTypeId = "1" 'Frame
        l1.DeductibleLimitId = "22" '500 (coverage)
        l1.WindHailDeductibleLimitId = "24" '1000 (coverage)
        l1.DayEmployees = False
        l1.DaytimeOccupancy = True
        l1.FamilyUnitsId = "1" '1
        l1.FireDepartmentDistanceId = "2" '5 Miles or Less
        l1.FireHydrantDistanceId = "4" 'Within 1,000 feet
        l1.FormTypeId = "1" 'HO-2 - Homeowners Broad Form
        l1.FoundationTypeId = "2" 'Closed
        l1.LastCostEstimatorDate = "12/1/2012"
        l1.MarketValue = "140000"
        l1.NumberOfFamiliesId = "1" '1
        l1.OccupancyCodeId = "1" 'Owner
        l1.PrimaryResidence = True
        l1.ProgramTypeId = "1" 'Homeowners
        l1.NumberOfApartments = "0"
        l1.NumberOfSolidFuelBurningUnits = "0"
        l1.RebuildCost = "150000"
        l1.Remarks = "test loc prop remarks"
        l1.SquareFeet = "4500"
        l1.StructureTypeId = "13" 'Conventionally Built
        l1.YearBuilt = "1990"

        'updates
        l1.Updates.WindowsUpdateYear = "1991"
        l1.Updates.ElectricUpdateYear = "1992"
        l1.Updates.ElectricUpdateTypeId = "2" 'Complete
        l1.Updates.ElectricCircuitBreaker = True
        l1.Updates.CentralHeatUpdateYear = "1993"
        l1.Updates.PlumbingUpdateYear = "1994"
        l1.Updates.PlumbingUpdateTypeId = "2" 'Complete
        l1.Updates.RoofUpdateYear = "1995"
        l1.Updates.SupplementalHeatUpdateYear = "1996"

        'coverages
        'l1.A_Dwelling_Limit = "1000" 'RE: Coverage A limit is less than $60,000.00
        'l1.A_Dwelling_LimitIncluded = "0"
        'l1.A_Dwelling_LimitIncreased = "1000"
        'l1.B_OtherStructures_Limit = "600"
        'l1.B_OtherStructures_LimitIncluded = "100"
        'l1.B_OtherStructures_LimitIncreased = "500"
        'l1.C_PersonalProperty_Limit = "900"
        'l1.C_PersonalProperty_LimitIncluded = "600"
        'l1.C_PersonalProperty_LimitIncreased = "300"
        'l1.D_LossOfUse_Limit = "200" 'not able to set for some reason (didn't work in UI either)
        'l1.D_LossOfUse_LimitIncluded = "0"
        'l1.D_LossOfUse_LimitIncreased = "0"
        l1.A_Dwelling_Limit = "60000"
        l1.A_Dwelling_LimitIncluded = "0"
        l1.A_Dwelling_LimitIncreased = "60000"
        l1.B_OtherStructures_Limit = "6500"
        l1.B_OtherStructures_LimitIncluded = "6000"
        l1.B_OtherStructures_LimitIncreased = "500"
        l1.C_PersonalProperty_Limit = "42300"
        l1.C_PersonalProperty_LimitIncluded = "42000"
        l1.C_PersonalProperty_LimitIncreased = "300"
        l1.D_LossOfUse_Limit = "0"
        l1.D_LossOfUse_LimitIncluded = "0"
        l1.D_LossOfUse_LimitIncreased = "0"

        l1.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        Dim ai As New QuickQuoteAdditionalInterest
        ai.Name.CommercialName1 = "Test Finance Company"
        ai.Name.TypeId = "2"
        ai.Name.TaxNumber = "123456789"
        ai.Name.TaxTypeId = "2"
        ai.Address.HouseNum = "123"
        ai.Address.StreetName = "Finance Drive"
        ai.Address.City = "Indianapolis"
        ai.Address.StateId = "16" 'automatically defaulted anyway
        ai.Address.Zip = "46227" 'should automatically append -0000
        ai.Address.County = "Marion"
        ai.Emails = New List(Of QuickQuoteEmail)
        Dim e As New QuickQuoteEmail
        e.Address = "test@test.com"
        e.TypeId = "2"
        ai.Emails.Add(e)
        ai.Phones = New List(Of QuickQuotePhone)
        Dim p As New QuickQuotePhone
        p.Number = "(317)111-2222"
        p.TypeId = "2"
        ai.Phones.Add(p)
        ai.ATIMA = False
        ai.GroupTypeId = "2" 'Finance Company
        ai.Description = "desc"
        ai.Other = "other"
        ai.TypeId = "42" 'First Mortgagee
        l1.AdditionalInterests.Add(ai)

        'credits and surcharges
        l1.MultiPolicyDiscount = True
        'l1.MatureHomeownerDiscount = True
        'l1.FireSmokeAlarm_LocalAlarmSystem = True
        l1.NewHomeDiscount = True
        'l1.FireSmokeAlarm_CentralStationAlarmSystem = True
        'l1.SelectMarketCredit = True
        'l1.FireSmokeAlarm_SmokeAlarm = True
        l1.BurglarAlarm_LocalAlarmSystem = True
        l1.SprinklerSystem_AllExcept = True
        'l1.BurglarAlarm_CentralStationAlarmSystem = True
        'l1.SprinklerSystem_AllIncluding = True
        l1.TrampolineSurcharge = True
        'l1.WoodOrFuelBurningApplianceSurcharge = True

        'currently killing quote for future use, even after removing and trying to re-rate (Unable to successfully translate source data to policy image.); 8/12/2013 - 'unable to translate' error is caused on re-rate after operators is set
        l1.InlandMarines = New List(Of QuickQuoteInlandMarine)
        Dim im As New QuickQuoteInlandMarine
        im.ArtistName = "BikeArtist"
        im.ConsentToRateCoverageEliminated = "cov eliminated"
        im.ConsentToRateCoverageInvolved = "cov involved"
        'im.Coverage'CoverageCodeId 70077-Inland_Marine_Bicycles (CoverageLimitId 18 - Deductible 100; ManualLimitAmount/ManualLimitIncreased 500.00; ManualLimitIncluded 0
        'im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
        'updated 12/5/2013 to use coverage code desc instead of caption
        im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
        im.DeductibleLimitId = 18 '100
        im.IncreasedLimit = "500.00"
        im.Description = "IM Bicycles Desc"
        im.MakeBrand = "BikeMake"
        im.Model = "BikeModel"
        im.RateInfoAmount = "3.00"
        im.RateInfoDescription = "rate info desc"
        im.RateInformationTypeId = "2" 'Consent to Rate
        im.SerialNumber = "SERIALNUM1"
        im.StatedAmount = True
        im.StorageLocation = "storage loc"
        im.Year = "2010"
        l1.InlandMarines.Add(im)

        ''did same thing as IM; killed for future use (Unable to successfully translate source data to policy image.); 8/12/2013 - 'unable to translate' error is caused on re-rate after operators is set
        l1.RvWatercrafts = New List(Of QuickQuoteRvWatercraft)
        Dim rv As New QuickQuoteRvWatercraft

        '8/15/2013 note: not working (adds but fails on subsequent rate attempt); 8/19/2013 clarification: Operators can be added but fails on subsequent rate attempt; AddedOperators always gets OperatorLink foreign key error
        'rv.AddedOperators = New List(Of QuickQuoteOperator)
        'Dim op As New QuickQuoteOperator
        'op.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        'op.Name.NameAddressSourceId = "60"
        'op.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op.RelationshipTypeId = "8" 'Policyholder
        'rv.AddedOperators.Add(op)

        '8/20/2013 - updated to match updated logic for DFR
        rv.Operators = New List(Of QuickQuoteOperator)
        Dim op As New QuickQuoteOperator
        op.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        op.Name.NameAddressSourceId = "60"
        op.Name.LastName &= "_op"
        op.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        op.Address.StreetName &= "_op"
        'op.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        op.OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
        op.RelationshipTypeId = "11" 'Not Related to Policyholder
        rv.Operators.Add(op)
        Dim op_P1 As New QuickQuoteOperator
        op_P1.OperatorNum = "2"
        op_P1.RelationshipTypeId = "8" 'Policyholder
        rv.Operators.Add(op_P1)

        rv.CostNew = "3300.00"
        'rv.Coverages 'CoverageCodeId 70097-Inland_Marine_Watercraft_Property (CoverageLimitId 21 - Deductible 250), CoverageCodeId 294-Uninsured Bodily Injury (CoverageLimitId 7; ManualLimitAmount 10000), CoverageCodeId 20167-Location - Watercraft Liability (CoverageLimitId -1; Checkbox true)
        rv.PropertyDeductibleLimitId = "21" '250
        rv.UninsuredMotoristBodilyInjuryLimitId = "7" '10,000
        rv.HasLiability = True
        rv.HasLiabilityOnly = False
        rv.Description = "Desc"
        rv.HorsepowerCC = "100"
        rv.Length = "9"
        rv.Manufacturer = "RvManufacturer"
        rv.Model = "RvModel"
        rv.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        rv.Name.NameAddressSourceId = ""
        rv.Name.LastName &= "_rv"
        rv.OwnerOtherThanInsured = True
        rv.RatedSpeed = "18"

        rv.RvWatercraftMotors = New List(Of QuickQuoteRvWatercraftMotor)
        Dim m As New QuickQuoteRvWatercraftMotor
        m.CostNew = "900.00"
        m.Manufacturer = "MotorManufacturer"
        m.Model = "MotorModel"
        m.MotorTypeId = "1" 'Inboard
        m.SerialNumber = "MotorSERIALNUM3"
        m.Year = "1997"
        rv.RvWatercraftMotors.Add(m)

        rv.RvWatercraftTypeId = "6" 'Golf Cart
        rv.SerialNumber = "RvSERIALNUM2"
        rv.Year = "1997"
        l1.RvWatercrafts.Add(rv)

        l1.Exclusions = New List(Of QuickQuoteExclusion)
        Dim e1 As New QuickQuoteExclusion
        e1.ExclusionTypeId = "1" 'Exclusion
        e1.Description = "exc desc"
        l1.Exclusions.Add(e1)
        Dim e2 As New QuickQuoteExclusion
        e2.ExclusionTypeId = "3" 'Restriction
        e2.Description = "rest desc"
        l1.Exclusions.Add(e2)
        Dim e3 As New QuickQuoteExclusion
        e3.ExclusionTypeId = "4" 'Comment
        e3.Description = "comm desc"
        l1.Exclusions.Add(e3)

        'added 8/14/2013
        l1.SectionICoverages = New List(Of QuickQuoteSectionICoverage)
        Dim sIc As New QuickQuoteSectionICoverage
        With sIc
            '.CoverageType = QuickQuoteSectionICoverage.SectionICoverageType.LossAssessment_HO_35
            '8/16/2013 - switched to LOB-specific property
            '.HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_HO_35
            'updated 12/2/2013 to use coverage code desc instead of caption
            .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment
            .IncreasedLimitId = "221" '4,000
            .Description = "Section I (Loss Assessment) desc"
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_sectionI"
            .EffectiveDate = "7/30/2013"
            .ConstructionTypeId = "1" 'Frame
            .DescribedLocation = True
            .TheftExtension = False
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionICoverages.Add(sIc)
        'Dim sIc2 As New QuickQuoteSectionICoverage
        'With sIc2
        '    '.CoverageType = QuickQuoteSectionICoverage.SectionICoverageType.LossAssessment_Earthquake_HO_35B
        '    '8/16/2013 - switched to LOB-specific property
        '    '.HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_Earthquake_HO_35B
        '    'updated 12/2/2013 to use coverage code desc instead of caption
        '    .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_Earthquake
        '    .IncreasedLimit = "3200.00"
        '    .Description = "section I - loss assess - EQ (HO-35B)"
        '    .Address = qqHelper.CloneObject(quickQuote.Client.Address)
        '    .Address.StreetName &= "_sectionI"
        '    .EffectiveDate = "7/30/2013"
        '    .ConstructionTypeId = "1" 'Frame
        '    .DescribedLocation = True
        '    .TheftExtension = False
        '    '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        'End With
        'l1.SectionICoverages.Add(sIc2)

        l1.SectionIICoverages = New List(Of QuickQuoteSectionIICoverage)
        'Dim sIIc As New QuickQuoteSectionIICoverage
        'With sIIc
        '    '.CoverageType = QuickQuoteSectionIICoverage.SectionIICoverageType.HomeDayCare_HO_323
        '    '8/16/2013 - switched to LOB-specific property
        '    '.HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.HomeDayCare_HO_323
        '    'updated 12/5/2013 to use coverage code desc instead of caption
        '    .HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.HomeDayCareLiability
        '    .Description = "Section II (Home Day Care) desc"
        '    .Name = qqHelper.CloneObject(quickQuote.Client.Name)
        '    .Name.LastName &= "_sectionII"
        '    .Name.NameAddressSourceId = "10022" 'Section Coverage
        '    .Address = qqHelper.CloneObject(quickQuote.Client.Address)
        '    .Address.StreetName &= "_sectionII"
        '    .NumberOfPersonsReceivingCare = "4"
        '    .NumberOfFamilies = "1"
        '    .NumberOfFullTimeEmployees_180plus_days = "1"
        '    .NumberOfPartTimeEmployees_41_to_180_days = "2"
        '    .NumberOfPartTimeEmployees_40_or_less_days = "3"
        '    .EstimatedNumberOfHead = "1"
        '    .BusinessType = "BusType"
        '    .InitialFarmPremises = True
        '    .EventFrom = "8/1/2013"
        '    .EventTo = "8/2/2013"
        '    .BusinessName = "BusName"
        '    '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        'End With
        'l1.SectionIICoverages.Add(sIIc)
        Dim sIIc2 As New QuickQuoteSectionIICoverage
        With sIIc2
            '.CoverageType = QuickQuoteSectionIICoverage.SectionIICoverageType.BusinessPursuits_Clerical_HO_71
            '8/16/2013 - switched to LOB-specific property
            '.HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical_HO_71
            'updated 12/5/2013 to use coverage code desc instead of caption
            .HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical
            .Description = "sectionII - bus pursuits - clerical (HO-71)"
            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            .Name.LastName &= "_sectionII"
            .Name.NameAddressSourceId = "10022" 'Section Coverage
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_sectionII"
            .NumberOfPersonsReceivingCare = "4"
            .NumberOfFamilies = "1"
            .NumberOfFullTimeEmployees_180plus_days = "1"
            .NumberOfPartTimeEmployees_41_to_180_days = "2"
            .NumberOfPartTimeEmployees_40_or_less_days = "3"
            .EstimatedNumberOfHead = "1"
            .BusinessType = "BusType"
            .InitialFarmPremises = True
            .EventFrom = "8/1/2013"
            .EventTo = "8/2/2013"
            .BusinessName = "BusName"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionIICoverages.Add(sIIc2)

        l1.SectionIAndIICoverages = New List(Of QuickQuoteSectionIAndIICoverage)
        Dim sIandIIc As New QuickQuoteSectionIAndIICoverage
        With sIandIIc
            '.MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures_HO_42
            'updated 12/5/2013 to use coverage code desc instead of caption
            .MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures
            .PropertyIncreasedLimit = "1000.00"
            .Description = "Section I and II (Permitted Incidental Occupancies Residence) desc"
            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            .Name.LastName &= "_sectionIandII"
            .Name.NameAddressSourceId = "10022" 'Section Coverage
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_sectionIandII"
            .NumberOfFamilies = "1"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionIAndIICoverages.Add(sIandIIc)

        HOM_AddPolicyUnderwritingsToLocation(l1) 'added 8/15/2013

        quickQuote.Locations.Add(l1)

        'operators can be added at any point but the subsequent rate always fails regardless if operators is still there or not
        'quickQuote.Operators = Nothing'test to set back to nothing
        'quickQuote.Operators = New List(Of QuickQuoteOperator)
        'Dim op1 As New QuickQuoteOperator
        'op1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'changed to Client; Policyholder wasn't coming thru on 1st attempt (since it's not set until saved)
        'op1.Name.NameAddressSourceId = "60"
        'op1.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op1.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op1.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op1.RelationshipTypeId = "8" 'Policyholder
        'quickQuote.Operators.Add(op1)
        'If quickQuote.Policyholder2 IsNot Nothing AndAlso quickQuote.Policyholder2.HasData = True Then
        '    Dim op2 As New QuickQuoteOperator
        '    op2.Name = qqHelper.CloneObject(quickQuote.Policyholder2.Name)
        '    op2.Name.NameAddressSourceId = "60"
        '    op2.Address = qqHelper.CloneObject(quickQuote.Policyholder2.Address)
        '    op2.Emails = qqHelper.CloneObject(quickQuote.Policyholder2.Emails)
        '    op2.Phones = qqHelper.CloneObject(quickQuote.Policyholder2.Phones)
        '    op2.RelationshipTypeId = "5" 'Policyholder #2
        '    quickQuote.Operators.Add(op2)
        'End If

        '8/20/2013 - updated to match updated logic for DFR
        quickQuote.Operators = New List(Of QuickQuoteOperator)
        Dim op1 As New QuickQuoteOperator
        op1.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        op1.Name.NameAddressSourceId = "60"
        op1.Name.LastName &= "_op"
        op1.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        op1.Address.StreetName &= "_op"
        'op1.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op1.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        op1.OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
        op1.RelationshipTypeId = "11" 'Not Related to Policyholder
        quickQuote.Operators.Add(op1)
        Dim op1_P1 As New QuickQuoteOperator
        op1_P1.OperatorNum = "2"
        op1_P1.RelationshipTypeId = "8" 'Policyholder
        quickQuote.Operators.Add(op1_P1)

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay
                
            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

                'quickQuote = Nothing
                'strQQ = ""
                'ratedQQ = Nothing
                'strRatedQQ = ""
                'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
                'If err = "" Then

                '    'stuff for app gap

                '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
                '    If err = "" Then

                '    End If
                'End If
            Else
                'error
            End If
        End If
        
    End Sub
    'added 9/24/2013 for testing
    'Private Sub HOM_save_test_minimum(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate)
    'updated 9/16/2016 w/ optional param to redirectToQuoteSummary (defaulted to True since that's what was always happening before)
    '9/16/2016 - also updated qId param from ByVal to ByRef and also added optional params for effDate and changeLocationAddress (changeLocationAddress bool changed to changeLocationAddressType)
    Public Enum LocationAddressType
        None = 0
        UseClientAddress = 1
        UseClientAddressWithDate = 2
        UseExistingAddressWithDate = 3
        UseVeriskTestAddress = 4 'see examples at C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx
        UseVeriskSplitClassTestAddress = 5 'see examples at C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx
        UseVeriskTestAddressWithExtendedZip = 6 'see examples at C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx; extended zip returned from ISO
        UseVeriskSplitClassTestAddressWithExtendedZip = 7 'see examples at C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx; extended zip returned from ISO
    End Enum
    'Private Sub HOM_save_test_minimum(ByRef qId As String, Optional ByVal effDate As String = "", Optional ByVal changeLocationAddress As Boolean = False, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal redirectToQuoteSummaryOnSuccessfulRate As Boolean = True)
    'Private Sub HOM_save_test_minimum(ByRef qId As String, Optional ByVal effDate As String = "", Optional ByVal changeLocationAddressType As LocationAddressType = LocationAddressType.None, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal redirectToQuoteSummaryOnSuccessfulRate As Boolean = True)
    'updated 9/25/2016 w/ optional expDate to test CompRater 6-month term issue
    'Private Sub HOM_save_test_minimum(ByRef qId As String, Optional ByVal effDate As String = "", Optional ByVal expDate As String = "", Optional ByVal changeLocationAddressType As LocationAddressType = LocationAddressType.None, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal redirectToQuoteSummaryOnSuccessfulRate As Boolean = True)
    'updated 9/25/2016 w/ optional usePoBoxForClientAndPolicyholderAddress
    Private Sub HOM_save_test_minimum(ByRef qId As String, Optional ByVal effDate As String = "", Optional ByVal expDate As String = "", Optional ByVal changeLocationAddressType As LocationAddressType = LocationAddressType.None, Optional ByVal usePoBoxForClientAndPolicyholderAddress As Boolean = False, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal redirectToQuoteSummaryOnSuccessfulRate As Boolean = True)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

        End If

        With quickQuote
            If String.IsNullOrWhiteSpace(effDate) = False AndAlso IsDate(effDate) = True Then 'added IF 9/16/2016; original logic in ELSE
                .EffectiveDate = CDate(effDate).ToShortDateString
            Else
                .EffectiveDate = Date.Today.ToString
            End If

            'added 9/25/2016 to test CompRater 6-month term issue
            If String.IsNullOrWhiteSpace(expDate) = False AndAlso IsDate(expDate) = True Then
                .ExpirationDate = CDate(expDate).ToShortDateString
            End If

            'quickQuote.UseTierOverride = True 'should only be used for testing; removed 9/25/2016... can result in some crazy high premiums

            With .Client
                With .Name
                    .FirstName = "Don"
                    .LastName = "Home"
                    .SexId = "1"
                    .TypeId = "1"
                    .TaxNumber = "223456789"
                    .TaxTypeId = "1"
                    .EntityTypeId = "1" 'Individual
                    .DescriptionOfOperations = "PH test"
                    .BirthDate = "2/1/1982"
                    .DriversLicenseDate = "2/1/2013"
                    .DriversLicenseNumber = "2234-56-7890"
                    .MaritalStatusId = "2" '1=Single; 2=Married
                End With
                With .Address
                    If usePoBoxForClientAndPolicyholderAddress = True Then 'added IF 9/25/2016; original logic in ELSE
                        .POBox = "123"
                    Else
                        .HouseNum = "567"
                        .StreetName = "Home Boulevard"
                    End If
                    .City = "Fishers"
                    .Zip = "46038"
                    .County = "Hamilton"
                End With
            End With
            .CopyClientNameAddressEmailsAndPhonesToPolicyholder1() 'added 9/25/2016

            'added 9/16/2016
            Dim existingStreetName As String = ""
            If .Locations IsNot Nothing AndAlso .Locations.Count >= 1 AndAlso .Locations(0).Address IsNot Nothing AndAlso .Locations(0).Address.StreetName <> "" Then
                existingStreetName = .Locations(0).Address.StreetName

                Dim addressToVerify As QuickQuoteAddress = .Locations(0).Address
                If addressToVerify IsNot Nothing Then

                End If
            End If
            'If changeLocationAddress = True AndAlso existingStreetName = "" Then
            '    changeLocationAddress = False
            'End If
            If changeLocationAddressType = LocationAddressType.UseExistingAddressWithDate AndAlso existingStreetName = "" Then
                changeLocationAddressType = LocationAddressType.UseClientAddressWithDate
            End If

            If .Locations Is Nothing Then 'added IF 9/16/2016
                .Locations = New List(Of QuickQuoteLocation)
            End If
            With .Locations
                'Dim l1 As New QuickQuoteLocation
                'updated 9/16/2016
                Dim l1 As QuickQuoteLocation = Nothing
                If .Count >= 1 Then
                    l1 = .Item(0)
                Else
                    l1 = New QuickQuoteLocation
                    .Add(l1)
                End If
                With l1
                    If .Address Is Nothing OrElse .Address.StreetName = "" OrElse changeLocationAddressType = LocationAddressType.UseClientAddress OrElse changeLocationAddressType = LocationAddressType.UseClientAddressWithDate Then 'added IF 9/17/2016; previously happening every time
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        If .Address IsNot Nothing AndAlso .Address.StreetName = "" Then 'added 9/25/2016
                            'assume client has PO box and use street address here
                            With .Address
                                .POBox = ""
                                .HouseNum = "567"
                                .StreetName = "Home Boulevard"
                            End With
                        End If
                    End If
                    'If changeLocationAddress = True AndAlso .Address IsNot Nothing AndAlso .Address.StreetName <> "" Then
                    '    .Address.StreetName = quickQuote.Client.Address.StreetName & "_chg" & Date.Now.ToString
                    'End If
                    'assumes address is something (Clone functionality above should work fine as long as Client is already set)
                    If (changeLocationAddressType = LocationAddressType.UseExistingAddressWithDate OrElse changeLocationAddressType = LocationAddressType.None) AndAlso existingStreetName <> "" Then
                        .Address.StreetName = existingStreetName
                    End If
                    If changeLocationAddressType = LocationAddressType.UseClientAddressWithDate OrElse changeLocationAddressType = LocationAddressType.UseExistingAddressWithDate Then
                        .Address.StreetName &= "_chg" & Date.Now.ToString
                    End If
                    'added 9/17/2016
                    If changeLocationAddressType = LocationAddressType.UseVeriskTestAddress OrElse changeLocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddress OrElse changeLocationAddressType = LocationAddressType.UseVeriskTestAddressWithExtendedZip OrElse changeLocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddressWithExtendedZip Then
                        'see examples at C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx
                        .Address = New QuickQuoteAddress
                        With .Address
                            If changeLocationAddressType = LocationAddressType.UseVeriskTestAddress OrElse changeLocationAddressType = LocationAddressType.UseVeriskTestAddressWithExtendedZip Then
                                .HouseNum = "1043"
                                .StreetName = "Park Place Ct"
                                .City = "Terre Haute"
                                .State = "IN"
                                .Zip = "47802"
                                If changeLocationAddressType = LocationAddressType.UseVeriskTestAddressWithExtendedZip Then
                                    '.Zip &= "-7877" 'since Zip prop actually appends -0000 to the end if the length is only 5, this actually makes it 47802-0000-7877
                                    .Zip = "47802-7877"
                                End If
                                .County = "Vigo"
                            ElseIf changeLocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddress OrElse changeLocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddressWithExtendedZip Then
                                .HouseNum = "7083"
                                .StreetName = "W 650S"
                                .City = "Huntingburg"
                                .State = "IN"
                                .Zip = "47542"
                                If changeLocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddressWithExtendedZip Then
                                    '.Zip &= "-9776" 'since Zip prop actually appends -0000 to the end if the length is only 5, this actually makes it 47542-0000-9776
                                    .Zip = "47542-9776"
                                End If
                                .County = "Dubois"
                            End If
                        End With
                    End If
                    Dim addressToVerify As QuickQuoteAddress = .Address
                    If addressToVerify IsNot Nothing Then

                    End If

                    .NumberOfFamiliesId = "1" '1
                    .YearBuilt = "1990"
                    .ProgramTypeId = "1" 'Homeowners
                    .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                    .OccupancyCodeId = "1" 'Owner
                    .StructureTypeId = "13" 'Conventionally Built
                    If String.IsNullOrWhiteSpace(.ProtectionClassId) = False AndAlso IsNumeric(.ProtectionClassId) = True Then 'added IF 9/16/2016; original logic in ELSE
                        'already set; can't overwrite in Diamond if system generated (would need to refer to UW)

                    Else
                        .ProtectionClassId = "1" '1
                    End If
                    .ConstructionTypeId = "1" 'Frame

                    'added 9/16/2016 for Verisk Protection Class testing (to get past validations introduced w/ 531's 600 build)
                    .FoundationTypeId = "2" 'Closed
                    'updated for new Verisk Protection Class version
                    '.FeetToFireHydrant = ""
                    .FireHydrantDistanceId = "1" 'Over 1,000 Feet

                    l1.A_Dwelling_LimitIncreased = "60000"

                    .DeductibleLimitId = "22" '500 (coverage)
                End With
                '.Add(l1) 'removed 9/16/2016; now above if needed
            End With
        End With


        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay

                'added 9/25/2016 to verify things for Verisk Protection Class
                Dim qqLoc As QuickQuoteLocation = Nothing
                Dim qqAdd As QuickQuoteAddress = Nothing
                Dim qqProtClassId As String = ""
                Dim qqProtClass As String = ""
                Dim qqProtClassSysGenId As String = ""
                Dim qqProtClassSysGen As String = ""

                Dim rqqLoc As QuickQuoteLocation = Nothing
                Dim rqqAdd As QuickQuoteAddress = Nothing
                Dim rqqProtClassId As String = ""
                Dim rqqProtClass As String = ""
                Dim rqqProtClassSysGenId As String = ""
                Dim rqqProtClassSysGen As String = ""
                If quickQuote IsNot Nothing AndAlso quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
                    qqLoc = quickQuote.Locations(0)
                    If qqLoc IsNot Nothing Then
                        qqAdd = qqLoc.Address
                        qqProtClassId = qqLoc.ProtectionClassId
                        qqProtClass = qqLoc.ProtectionClass
                        qqProtClassSysGenId = qqLoc.ProtectionClassSystemGeneratedId
                        qqProtClassSysGen = qqLoc.ProtectionClassSystemGenerated
                    End If
                End If
                If ratedQQ IsNot Nothing AndAlso ratedQQ.Locations IsNot Nothing AndAlso ratedQQ.Locations.Count > 0 Then
                    rqqLoc = ratedQQ.Locations(0)
                    If rqqLoc IsNot Nothing Then
                        rqqAdd = rqqLoc.Address
                        rqqProtClassId = rqqLoc.ProtectionClassId
                        rqqProtClass = rqqLoc.ProtectionClass
                        rqqProtClassSysGenId = rqqLoc.ProtectionClassSystemGeneratedId
                        rqqProtClassSysGen = rqqLoc.ProtectionClassSystemGenerated
                    End If
                End If
                If qqLoc IsNot Nothing OrElse rqqLoc IsNot Nothing Then

                End If

                If redirectToQuoteSummaryOnSuccessfulRate = True Then 'added IF 9/16/2016; previously happening every time
                    Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)
                End If


            Else
                'error
            End If
        End If
    End Sub
    'added 9/26/2013 for testing
    Private Sub HOM_save_test_new(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate) 'added 7/26/2013; added optional param 8/8/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        'With quickQuote 'removed 12/5/2013
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote '12/5/2013: added inner WITH block because started getting object reference error when setting a property on 1st-time quote; still caught error after completing inner WITH block; switched to 2 separate ones
                .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'removed 7/30/2014; now setting PH info and using copy method to set client
                'With .Client
                '    With .Name
                '        .FirstName = "Don"
                '        .LastName = "Home"
                '        .SexId = "1"
                '        .TypeId = "1"
                '        .TaxNumber = "123456789"
                '        .TaxTypeId = "1"
                '        .EntityTypeId = "1" 'Individual
                '        .DescriptionOfOperations = "PH test"
                '        .BirthDate = "1/1/1982"
                '        .DriversLicenseDate = "1/1/2013"
                '        .DriversLicenseNumber = "1234-56-7890"
                '        .MaritalStatusId = "2" '1=Single; 2=Married
                '    End With
                '    With .Address
                '        .HouseNum = "567"
                '        .StreetName = "Home Boulevard"
                '        .City = "Fishers"
                '        .Zip = "46038"
                '        .County = "Hamilton"
                '    End With

                '    'real data (didn't work)
                '    'With .Name
                '    '    .FirstName = "JUNIOR"
                '    '    .MiddleName = "W"
                '    '    .LastName = "BROWN"
                '    '    .SexId = "1"
                '    '    .TypeId = "1"
                '    '    .TaxNumber = "666648093"
                '    '    .TaxTypeId = "1"
                '    '    .EntityTypeId = "1" 'Individual
                '    '    .DescriptionOfOperations = "PH test"
                '    '    .BirthDate = "10/26/1956"
                '    '    .DriversLicenseDate = "1/1/2013"
                '    '    .DriversLicenseNumber = "8902605449"
                '    '    .MaritalStatusId = "1" '1=Single; 2=Married
                '    'End With
                '    'With .Address
                '    '    .HouseNum = "7025"
                '    '    .StreetName = "MARINERS LN"
                '    '    .ApartmentNumber = "B"
                '    '    .City = "INDIANAPOLIS"
                '    '    .Zip = "462141789"
                '    '    .County = "MARION"
                '    'End With

                '    .Phones = New Generic.List(Of QuickQuotePhone)
                '    Dim cp1 As New QuickQuotePhone
                '    cp1.Number = "(312)555-5557"
                '    .Phones.Add(cp1)
                'End With

                'Policyholder information will automatically be populated by Client
                'updated 7/30/2014 to set policyholder information... and then use Copy method below to set Client info
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Home"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "Home Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    'real data (didn't work)
                    'With .Name
                    '    .FirstName = "JUNIOR"
                    '    .MiddleName = "W"
                    '    .LastName = "BROWN"
                    '    .SexId = "1"
                    '    .TypeId = "1"
                    '    .TaxNumber = "666648093"
                    '    .TaxTypeId = "1"
                    '    .EntityTypeId = "1" 'Individual
                    '    .DescriptionOfOperations = "PH test"
                    '    .BirthDate = "10/26/1956"
                    '    .DriversLicenseDate = "1/1/2013"
                    '    .DriversLicenseNumber = "8902605449"
                    '    .MaritalStatusId = "1" '1=Single; 2=Married
                    'End With
                    'With .Address
                    '    .HouseNum = "7025"
                    '    .StreetName = "MARINERS LN"
                    '    .ApartmentNumber = "B"
                    '    .City = "INDIANAPOLIS"
                    '    .Zip = "462141789"
                    '    .County = "MARION"
                    'End With

                    .Phones = New Generic.List(Of QuickQuotePhone)
                    Dim cp1 As New QuickQuotePhone
                    cp1.Number = "(312)555-5557"
                    .Phones.Add(cp1)
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "Home"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    '.Address = quickQuote.Client.Address
                    '.Phones = quickQuote.Client.Phones
                    'updated 8/7/2014 to use Policyholder
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients() 'added 7/30/2014

                .CopyPolicyholdersToApplicants() 'added 7/30/2014; original logic is in IF below
                If .Applicants Is Nothing Then
                    .Applicants = New List(Of QuickQuoteApplicant)
                    Dim a As New QuickQuoteApplicant
                    With a
                        .Name = quickQuote.Client.Name 'copied from Client
                        .Name.NameAddressSourceId = "28" 'Applicant
                        .Address = quickQuote.Client.Address 'copied from Client
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        .RelationshipTypeId = "8" 'Policyholder
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                    .Applicants.Add(a)
                ElseIf .Applicants.Count > 0 Then
                    With .Applicants(0) 'should already have name, address, and relationshiptypeid set from Copy method above
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                End If
            End With
        End If

        With quickQuote 'added 12/5/2013 (needed 2 separate ones to encapsulate 1st time instantiation IF block and regular stuff)
            .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal 'added 12/5/2013 to see if latest failure was due to changing HOM version_id from 11 to 45; changed back to 11 in xml and reset type here so it would use 11 again; EOD was running when latest attempt happened; didn't make a difference so changed back to 45
            .EffectiveDate = Date.Today.ToString

            '.CopyPolicyholdersToApplicants() 'added 7/30/2014 for testing... after correcting copy logic
            'Dim okayToContinue As Boolean = False
            'Dim applicantRemoved As Boolean = False
            'Do While okayToContinue = False
            '    If .Applicants IsNot Nothing AndAlso .Applicants.Count > 0 Then
            '        For Each a As QuickQuoteApplicant In .Applicants
            '            applicantRemoved = False
            '            If a.RelationshipTypeId = "" Then
            '                applicantRemoved = True
            '                .Applicants.Remove(a)
            '                Exit For
            '            End If
            '        Next
            '        If applicantRemoved = False Then
            '            okayToContinue = True
            '        End If
            '    End If
            'Loop

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'policy level covs
            .PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
            .MedicalPaymentsLimitid = "170" '1,000

            .Locations = New Generic.List(Of QuickQuoteLocation)
            Dim l1 As New QuickQuoteLocation
            With l1
                .Description = "Loc 1"
                .Name = qqHelper.CloneObject(quickQuote.Client.Name) '.Client.Name
                .Name.NameAddressSourceId = "13" 'Location
                .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                .ProtectionClassId = "1" '1

                .Acreage = "2"
                .CondoRentedTypeId = "2" 'No
                .ConstructionTypeId = "1" 'Frame
                .DeductibleLimitId = "22" '500 (coverage)
                .WindHailDeductibleLimitId = "24" '1000 (coverage)
                .DayEmployees = False
                .DaytimeOccupancy = True
                .FamilyUnitsId = "1" '1
                .FireDepartmentDistanceId = "2" '5 Miles or Less
                .FireHydrantDistanceId = "4" 'Within 1,000 feet
                .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                .FoundationTypeId = "2" 'Closed
                .LastCostEstimatorDate = "12/1/2012"
                .MarketValue = "140000"
                .NumberOfFamiliesId = "1" '1
                .OccupancyCodeId = "1" 'Owner
                .PrimaryResidence = True
                .ProgramTypeId = "1" 'Homeowners
                .NumberOfApartments = "0"
                .NumberOfSolidFuelBurningUnits = "0"
                .RebuildCost = "150000"
                .Remarks = "test loc prop remarks"
                .SquareFeet = "4500"
                .StructureTypeId = "13" 'Conventionally Built
                .YearBuilt = "1990"

                'updates
                .Updates.WindowsUpdateYear = "1991"
                .Updates.ElectricUpdateYear = "1992"
                .Updates.ElectricUpdateTypeId = "2" 'Complete
                .Updates.ElectricCircuitBreaker = True
                .Updates.CentralHeatUpdateYear = "1993"
                .Updates.PlumbingUpdateYear = "1994"
                .Updates.PlumbingUpdateTypeId = "2" 'Complete
                .Updates.RoofUpdateYear = "1995"
                .Updates.SupplementalHeatUpdateYear = "1996"

                'coverages; LimitIncreased values should be the only ones that are needed
                .A_Dwelling_Limit = "60000"
                .A_Dwelling_LimitIncluded = "0"
                .A_Dwelling_LimitIncreased = "60000"
                .B_OtherStructures_Limit = "6500"
                .B_OtherStructures_LimitIncluded = "6000"
                .B_OtherStructures_LimitIncreased = "500"
                .C_PersonalProperty_Limit = "42300"
                .C_PersonalProperty_LimitIncluded = "42000"
                .C_PersonalProperty_LimitIncreased = "300"
                .D_LossOfUse_Limit = "0"
                .D_LossOfUse_LimitIncluded = "0"
                .D_LossOfUse_LimitIncreased = "0"

                .AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                Dim ai As New QuickQuoteAdditionalInterest
                With ai
                    With .Name
                        .CommercialName1 = "Test Finance Company"
                        .TypeId = "2"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "2"
                    End With
                    With .Address
                        .HouseNum = "123"
                        .StreetName = "Finance Drive"
                        .City = "Indianapolis"
                        .StateId = "16" 'automatically defaulted anyway
                        .Zip = "46227" 'should automatically append -0000
                        .County = "Marion"
                    End With
                    .Emails = New List(Of QuickQuoteEmail)
                    Dim e As New QuickQuoteEmail
                    With e
                        .Address = "test@test.com"
                        .TypeId = "2"
                    End With
                    .Emails.Add(e)
                    .Phones = New List(Of QuickQuotePhone)
                    Dim p As New QuickQuotePhone
                    With p
                        .Number = "(317)111-2222"
                        .TypeId = "2"
                    End With
                    .Phones.Add(p)
                    .ATIMA = False
                    .GroupTypeId = "2" 'Finance Company
                    .Description = "desc"
                    .Other = "other"
                    .TypeId = "42" 'First Mortgagee
                End With
                .AdditionalInterests.Add(ai)

                'credits and surcharges
                .MultiPolicyDiscount = True
                '.MatureHomeownerDiscount = True
                '.FireSmokeAlarm_LocalAlarmSystem = True
                .NewHomeDiscount = True
                '.FireSmokeAlarm_CentralStationAlarmSystem = True
                '.SelectMarketCredit = True
                '.FireSmokeAlarm_SmokeAlarm = True
                .BurglarAlarm_LocalAlarmSystem = True
                .SprinklerSystem_AllExcept = True
                '.BurglarAlarm_CentralStationAlarmSystem = True
                '.SprinklerSystem_AllIncluding = True
                .TrampolineSurcharge = True
                '.WoodOrFuelBurningApplianceSurcharge = True

                .InlandMarines = New List(Of QuickQuoteInlandMarine)
                Dim im As New QuickQuoteInlandMarine
                With im
                    .ArtistName = "BikeArtist"
                    .ConsentToRateCoverageEliminated = "cov eliminated"
                    .ConsentToRateCoverageInvolved = "cov involved"
                    '.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
                    'updated 12/5/2013 to use coverage code desc instead of caption
                    .InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
                    .DeductibleLimitId = 18 '100
                    .IncreasedLimit = "500.00"
                    .Description = "IM Bicycles Desc"
                    .MakeBrand = "BikeMake"
                    .Model = "BikeModel"
                    .RateInfoAmount = "3.00"
                    .RateInfoDescription = "rate info desc"
                    .RateInformationTypeId = "2" 'Consent to Rate
                    .SerialNumber = "SERIALNUM1"
                    .StatedAmount = True
                    .StorageLocation = "storage loc"
                    .Year = "2010"
                End With
                .InlandMarines.Add(im)

                .RvWatercrafts = New List(Of QuickQuoteRvWatercraft)
                Dim rv As New QuickQuoteRvWatercraft
                With rv
                    '9/27/2013 note: these need to be added to the policy Operators to be added here; you just need to set the OperatorNum at that point
                    '7/30/2014 note: commenting operator logic for now
                    '.Operators = New List(Of QuickQuoteOperator)
                    'With .Operators
                    '    Dim r_op1 As New QuickQuoteOperator
                    '    With r_op1
                    '        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    '        .Name.NameAddressSourceId = "60"
                    '        .Name.LastName &= "_op"
                    '        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                    '        .Address.StreetName &= "_op"
                    '        '.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
                    '        '.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
                    '        .OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
                    '        .RelationshipTypeId = "11" 'Not Related to Policyholder
                    '    End With
                    '    .Add(r_op1)
                    '    Dim r_op_p1 As New QuickQuoteOperator
                    '    With r_op_p1
                    '        .OperatorNum = "2"
                    '        .RelationshipTypeId = "8" 'Policyholder
                    '    End With
                    '    .Add(r_op_p1)
                    '    'testing 9/27/2013
                    '    Dim r_op2 As New QuickQuoteOperator 'if you just enter the OperatorNum w/o anything else, it picks up the 1 entered for policy Operators
                    '    With r_op2
                    '        .OperatorNum = "3"
                    '    End With
                    '    .Add(r_op2)
                    '    Dim r_op_p2 As New QuickQuoteOperator 'can't just add policyholder 2 by specifying the RelationshipTypeId if it hasn't already been added to the policy Operators
                    '    With r_op_p2
                    '        .OperatorNum = "4"
                    '        '.RelationshipTypeId = "5" 'Policyholder #2
                    '    End With
                    '    .Add(r_op_p2)
                    '    'Dim r_op3 As New QuickQuoteOperator
                    '    'With r_op3
                    '    '    .OperatorNum = "5"
                    '    'End With
                    '    '.Add(r_op3)
                    'End With

                    .CostNew = "3300.00"
                    .PropertyDeductibleLimitId = "21" '250
                    .UninsuredMotoristBodilyInjuryLimitId = "7" '10,000
                    .HasLiability = True
                    .HasLiabilityOnly = False
                    .Description = "Desc"
                    .HorsepowerCC = "100"
                    .Length = "9"
                    .Manufacturer = "RvManufacturer"
                    .Model = "RvModel"
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    .Name.NameAddressSourceId = ""
                    .Name.LastName &= "_rv"
                    .OwnerOtherThanInsured = True
                    .RatedSpeed = "18"

                    .RvWatercraftMotors = New List(Of QuickQuoteRvWatercraftMotor)
                    Dim m As New QuickQuoteRvWatercraftMotor
                    With m
                        .CostNew = "900.00"
                        .Manufacturer = "MotorManufacturer"
                        .Model = "MotorModel"
                        .MotorTypeId = "1" 'Inboard
                        .SerialNumber = "MotorSERIALNUM3"
                        .Year = "1997"
                    End With
                    .RvWatercraftMotors.Add(m)

                    .RvWatercraftTypeId = "6" 'Golf Cart
                    .SerialNumber = "RvSERIALNUM2"
                    .Year = "1997"
                End With
                .RvWatercrafts.Add(rv)

                .Exclusions = New List(Of QuickQuoteExclusion)
                With .Exclusions
                    Dim e1 As New QuickQuoteExclusion
                    With e1
                        .ExclusionTypeId = "1" 'Exclusion
                        .Description = "exc desc"
                    End With
                    .Add(e1)
                    Dim e2 As New QuickQuoteExclusion
                    With e2
                        .ExclusionTypeId = "3" 'Restriction
                        .Description = "rest desc"
                    End With
                    .Add(e2)
                    Dim e3 As New QuickQuoteExclusion
                    With e3
                        .ExclusionTypeId = "4" 'Comment
                        .Description = "comm desc"
                    End With
                    .Add(e3)
                End With

                .SectionICoverages = New List(Of QuickQuoteSectionICoverage)
                Dim sIc As New QuickQuoteSectionICoverage
                With sIc
                    '.HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_HO_35
                    'updated 12/2/2013 to use coverage code desc instead of caption
                    .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment
                    .IncreasedLimitId = "221" '4,000
                    .Description = "Section I (Loss Assessment) desc"
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                    .Address.StreetName &= "_sectionI"
                    .EffectiveDate = "7/30/2013"
                    .ConstructionTypeId = "1" 'Frame
                    .DescribedLocation = True
                    .TheftExtension = False
                    '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                End With
                .SectionICoverages.Add(sIc)

                .SectionIICoverages = New List(Of QuickQuoteSectionIICoverage)
                Dim sIIc As New QuickQuoteSectionIICoverage
                With sIIc
                    '.HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical_HO_71
                    'updated 12/5/2013 to use coverage code desc instead of caption
                    .HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical
                    .Description = "sectionII - bus pursuits - clerical (HO-71)"
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    .Name.LastName &= "_sectionII"
                    .Name.NameAddressSourceId = "10022" 'Section Coverage
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                    .Address.StreetName &= "_sectionII"
                    .NumberOfPersonsReceivingCare = "4"
                    .NumberOfFamilies = "1"
                    .NumberOfFullTimeEmployees_180plus_days = "1"
                    .NumberOfPartTimeEmployees_41_to_180_days = "2"
                    .NumberOfPartTimeEmployees_40_or_less_days = "3"
                    .EstimatedNumberOfHead = "1"
                    .BusinessType = "BusType"
                    .InitialFarmPremises = True
                    .EventFrom = "8/1/2013"
                    .EventTo = "8/2/2013"
                    .BusinessName = "BusName"
                    '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                End With
                .SectionIICoverages.Add(sIIc)

                .SectionIAndIICoverages = New List(Of QuickQuoteSectionIAndIICoverage)
                Dim sIandIIc As New QuickQuoteSectionIAndIICoverage
                With sIandIIc
                    '.MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures_HO_42
                    'updated 12/5/2013 to use coverage code desc instead of caption
                    .MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures
                    .PropertyIncreasedLimit = "1000.00"
                    .Description = "Section I and II (Permitted Incidental Occupancies Residence) desc"
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                    .Name.LastName &= "_sectionIandII"
                    .Name.NameAddressSourceId = "10022" 'Section Coverage
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                    .Address.StreetName &= "_sectionIandII"
                    .NumberOfFamilies = "1"
                    '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                End With
                .SectionIAndIICoverages.Add(sIandIIc)
            End With
            HOM_AddPolicyUnderwritingsToLocation(l1)
            .Locations.Add(l1)

            '9/27/2013 note: this adds selections to the available operators list on the RvWatercraft entry page (Policyholders are automatically added but have to be explicitly added w/ a unique OperatorNum to be used on RvWatercraft above)
            '7/30/2014 note: commenting operator logic for now
            '.Operators = New List(Of QuickQuoteOperator)
            'With .Operators
            '    Dim op1 As New QuickQuoteOperator
            '    With op1
            '        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            '        .Name.NameAddressSourceId = "60"
            '        .Name.LastName &= "_op"
            '        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            '        .Address.StreetName &= "_op"
            '        .OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
            '        .RelationshipTypeId = "11" 'Not Related to Policyholder
            '    End With
            '    .Add(op1)
            '    Dim op_p1 As New QuickQuoteOperator
            '    With op_p1
            '        .OperatorNum = "2"
            '        .RelationshipTypeId = "8" 'Policyholder
            '    End With
            '    .Add(op_p1)
            '    'testing 9/27/2013
            '    Dim op2 As New QuickQuoteOperator
            '    With op2
            '        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            '        .Name.NameAddressSourceId = "60"
            '        .Name.LastName &= "_op2"
            '        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            '        .Address.StreetName &= "_op2"
            '        .OperatorNum = "3"
            '        .RelationshipTypeId = "11" 'Not Related to Policyholder
            '    End With
            '    .Add(op2)
            '    Dim op_p2 As New QuickQuoteOperator
            '    With op_p2
            '        .OperatorNum = "4"
            '        .RelationshipTypeId = "5" 'Policyholder #2
            '    End With
            '    .Add(op_p2)
            '    Dim op3 As New QuickQuoteOperator 'see if I can add here w/o adding to policy Operators
            '    With op3
            '        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            '        .Name.NameAddressSourceId = "60"
            '        .Name.LastName &= "_op3"
            '        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            '        .Address.StreetName &= "_op3"
            '        .OperatorNum = "5"
            '        .RelationshipTypeId = "11" 'Not Related to Policyholder
            '    End With
            '    .Add(op3)
            'End With
        End With
        'End With 'removed 12/5/2013

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    'added 8/7/2014 for simple quote testing
    Private Sub HOM_save_test_new_simple(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False) 'added 7/26/2013; added optional param 8/8/2013; 12/23/2014 - added optional updateQuickQuoteEntities param
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote '12/5/2013: added inner WITH block because started getting object reference error when setting a property on 1st-time quote; still caught error after completing inner WITH block; switched to 2 separate ones
                .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'Policyholder information will automatically be populated by Client
                'updated 7/30/2014 to set policyholder information... and then use Copy method below to set Client info
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Home"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "Home Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    'added 12/22/2014 for testing Operator emails/phones... getting PK constraint errors when PHs get copied to Ops
                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "Home"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients() 'added 7/30/2014

                .CopyPolicyholdersToApplicants() 'added 7/30/2014; original logic is in IF below
                '10/15/2014 note: could also use .CanUseApplicantNumForApplicantReconciliation prop if needed
                If .Applicants Is Nothing Then
                    .Applicants = New List(Of QuickQuoteApplicant)
                    Dim a As New QuickQuoteApplicant
                    With a
                        .Name = quickQuote.Client.Name 'copied from Client
                        .Name.NameAddressSourceId = "28" 'Applicant
                        .Address = quickQuote.Client.Address 'copied from Client
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        .RelationshipTypeId = "8" 'Policyholder
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                    .Applicants.Add(a)
                ElseIf .Applicants.Count > 0 Then
                    With .Applicants(0) 'should already have name, address, and relationshiptypeid set from Copy method above
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                End If
                'added 10/30/2014
                .CopyPolicyholdersToOperators()
                If .Operators Is Nothing Then
                    'could manually add if above fails
                ElseIf .Operators.Count > 0 Then
                    'could add more information if needed
                End If
            End With
        End If

        With quickQuote 'added 12/5/2013 (needed 2 separate ones to encapsulate 1st time instantiation IF block and regular stuff)
            .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal 'added 12/5/2013 to see if latest failure was due to changing HOM version_id from 11 to 45; changed back to 11 in xml and reset type here so it would use 11 again; EOD was running when latest attempt happened; didn't make a difference so changed back to 45
            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'policy level covs
            .PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
            .MedicalPaymentsLimitid = "170" '1,000

            'added 12/22/2014 for testing... since code will automatically pull ratedXml (when available), which doesn't include Operator emails/phones; 12/22/2014 note: would have same problem w/ Applicants except for the fact that the PK is policyId/policyImageNum/applicantNum/emailId for that one instead of policyId/policyImageNum/applicantNum/emailTypeId like the rest (drivers should have same problem as BillingAddressee and Operators)
            '.CopyPolicyholdersToApplicants()
            '.CopyPolicyholdersToOperators()

            'added 10/30/2014
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)
                Dim hasNonPolicyholderOperator As Boolean = False
                Dim nonPolicyholderOperatorCount As Integer = 0
                If .Operators IsNot Nothing AndAlso .Operators.Count > 0 Then
                    For Each o As QuickQuoteOperator In .Operators
                        If o.RelationshipTypeId <> "" AndAlso IsNumeric(o.RelationshipTypeId) = True AndAlso (CInt(o.RelationshipTypeId) = 8 OrElse CInt(o.RelationshipTypeId) = 5) Then 'Policyholder or Policyholder #2

                        Else
                            hasNonPolicyholderOperator = True
                            nonPolicyholderOperatorCount += 1
                        End If
                    Next
                End If
                If hasNonPolicyholderOperator = False Then
                    If .Operators Is Nothing Then
                        .Operators = New List(Of QuickQuoteOperator)
                    End If
                    Dim opNew As New QuickQuoteOperator
                    With opNew
                        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                        .Name.NameAddressSourceId = "60"
                        .Name.LastName &= "_opNew"
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .Address.StreetName &= "_opNew"
                        .RelationshipTypeId = "11" 'Not Related to Policyholder
                    End With
                    .Operators.Add(opNew)
                Else
                    If nonPolicyholderOperatorCount = 1 Then
                        Dim opNew2 As New QuickQuoteOperator
                        With opNew2
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = "60"
                            .Name.LastName &= "_opNew2"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_opNew2"
                            .RelationshipTypeId = "11" 'Not Related to Policyholder
                        End With
                        .Operators.Add(opNew2)
                    ElseIf nonPolicyholderOperatorCount = 2 Then 'added 10/31/2014
                        Dim opNew3 As New QuickQuoteOperator
                        With opNew3
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = "60"
                            .Name.LastName &= "_opNew3"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_opNew3"
                            .RelationshipTypeId = "11" 'Not Related to Policyholder
                        End With
                        .Operators.Add(opNew3)
                    ElseIf nonPolicyholderOperatorCount = 3 Then 'added 10/31/2014 for testing minimum fields allowed
                        Dim opNew4 As New QuickQuoteOperator
                        With opNew4

                        End With
                        .Operators.Add(opNew4)
                    ElseIf nonPolicyholderOperatorCount = 4 Then 'added 10/31/2014 to go w/ previous ELSEIF for editing the blank one
                        With .Operators(.Operators.Count - 1) 'last one

                        End With
                    End If
                End If
            End If

            If .CanUseLocationNumForLocationReconciliation = False Then 'added so it will re-use the same locations... will need ELSE if anything needs to be modified/added/removed
                .Locations = New Generic.List(Of QuickQuoteLocation)
                Dim l1 As New QuickQuoteLocation
                With l1
                    .Description = "Loc 1"
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name) '.Client.Name
                    .Name.NameAddressSourceId = "13" 'Location
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                    .ProtectionClassId = "1" '1

                    .Acreage = "2"
                    .CondoRentedTypeId = "2" 'No
                    .ConstructionTypeId = "1" 'Frame
                    .DeductibleLimitId = "22" '500 (coverage)
                    .WindHailDeductibleLimitId = "24" '1000 (coverage)
                    .DayEmployees = False
                    .DaytimeOccupancy = True
                    .FamilyUnitsId = "1" '1
                    .FireDepartmentDistanceId = "2" '5 Miles or Less
                    .FireHydrantDistanceId = "4" 'Within 1,000 feet
                    .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                    .FoundationTypeId = "2" 'Closed
                    .LastCostEstimatorDate = "12/1/2012"
                    .MarketValue = "140000"
                    .NumberOfFamiliesId = "1" '1
                    .OccupancyCodeId = "1" 'Owner
                    .PrimaryResidence = True
                    .ProgramTypeId = "1" 'Homeowners
                    .NumberOfApartments = "0"
                    .NumberOfSolidFuelBurningUnits = "0"
                    .RebuildCost = "150000"
                    .Remarks = "test loc prop remarks"
                    .SquareFeet = "4500"
                    .StructureTypeId = "13" 'Conventionally Built
                    .YearBuilt = "1990"
                    .ArchitecturalStyle = "Basic" 'added 8/27/2014 for e2Value testing; see DiamondStaticData for values

                    'updates
                    .Updates.WindowsUpdateYear = "1991"
                    .Updates.ElectricUpdateYear = "1992"
                    .Updates.ElectricUpdateTypeId = "2" 'Complete
                    .Updates.ElectricCircuitBreaker = True
                    .Updates.CentralHeatUpdateYear = "1993"
                    .Updates.PlumbingUpdateYear = "1994"
                    .Updates.PlumbingUpdateTypeId = "2" 'Complete
                    .Updates.RoofUpdateYear = "1995"
                    .Updates.SupplementalHeatUpdateYear = "1996"

                    'coverages; LimitIncreased values should be the only ones that are needed
                    .A_Dwelling_Limit = "60000"
                    .A_Dwelling_LimitIncluded = "0"
                    .A_Dwelling_LimitIncreased = "60000"
                    .B_OtherStructures_Limit = "6500"
                    .B_OtherStructures_LimitIncluded = "6000"
                    .B_OtherStructures_LimitIncreased = "500"
                    .C_PersonalProperty_Limit = "42300"
                    .C_PersonalProperty_LimitIncluded = "42000"
                    .C_PersonalProperty_LimitIncreased = "300"
                    .D_LossOfUse_Limit = "0"
                    .D_LossOfUse_LimitIncluded = "0"
                    .D_LossOfUse_LimitIncreased = "0"

                    If .CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False Then
                        .AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        Dim ai As New QuickQuoteAdditionalInterest
                        With ai
                            With .Name
                                .CommercialName1 = "Test Finance Company"
                                .TypeId = "2"
                                .TaxNumber = "123456789"
                                .TaxTypeId = "2"
                            End With
                            With .Address
                                .HouseNum = "123"
                                .StreetName = "Finance Drive"
                                .City = "Indianapolis"
                                .StateId = "16" 'automatically defaulted anyway
                                .Zip = "46227" 'should automatically append -0000
                                .County = "Marion"
                            End With
                            .Emails = New List(Of QuickQuoteEmail)
                            Dim e As New QuickQuoteEmail
                            With e
                                .Address = "test@test.com"
                                .TypeId = "2"
                            End With
                            .Emails.Add(e)
                            .Phones = New List(Of QuickQuotePhone)
                            Dim p As New QuickQuotePhone
                            With p
                                .Number = "(317)111-2222"
                                .TypeId = "2"
                            End With
                            .Phones.Add(p)
                            .ATIMA = False
                            .GroupTypeId = "2" 'Finance Company
                            .Description = "desc"
                            .Other = "other"
                            .TypeId = "42" 'First Mortgagee
                        End With
                        .AdditionalInterests.Add(ai)
                    Else
                        'add logic here to change existing additional interests

                    End If

                    'credits and surcharges
                    .MultiPolicyDiscount = True
                    '.MatureHomeownerDiscount = True
                    '.FireSmokeAlarm_LocalAlarmSystem = True
                    .NewHomeDiscount = True
                    '.FireSmokeAlarm_CentralStationAlarmSystem = True
                    '.SelectMarketCredit = True
                    '.FireSmokeAlarm_SmokeAlarm = True
                    .BurglarAlarm_LocalAlarmSystem = True
                    .SprinklerSystem_AllExcept = True
                    '.BurglarAlarm_CentralStationAlarmSystem = True
                    '.SprinklerSystem_AllIncluding = True
                    .TrampolineSurcharge = True
                    '.WoodOrFuelBurningApplianceSurcharge = True

                    'If .InlandMarines Is Nothing Then '8/7/2014 note: need prop for .CanUseInlandMarineNumForInlandMarineReconciliation
                    'updated 10/15/2014
                    If .CanUseInlandMarineNumForInlandMarineReconciliation = False Then
                        .InlandMarines = New List(Of QuickQuoteInlandMarine)
                        Dim im As New QuickQuoteInlandMarine
                        With im
                            .ArtistName = "BikeArtist"
                            .ConsentToRateCoverageEliminated = "cov eliminated"
                            .ConsentToRateCoverageInvolved = "cov involved"
                            '.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
                            .DeductibleLimitId = 18 '100
                            .IncreasedLimit = "500.00"
                            .Description = "IM Bicycles Desc"
                            .MakeBrand = "BikeMake"
                            .Model = "BikeModel"
                            .RateInfoAmount = "3.00"
                            .RateInfoDescription = "rate info desc"
                            .RateInformationTypeId = "2" 'Consent to Rate
                            .SerialNumber = "SERIALNUM1"
                            .StatedAmount = True
                            .StorageLocation = "storage loc"
                            .Year = "2010"
                        End With
                        .InlandMarines.Add(im)
                    Else
                        'add logic here to change existing inland marines

                    End If

                    'If .RvWatercrafts Is Nothing Then '8/7/2014 note: need prop for .CanUseRvWatercraftNumForRvWatercraftReconciliation
                    'updated 10/15/2014
                    If .CanUseRvWatercraftNumForRvWatercraftReconciliation = False Then
                        .RvWatercrafts = New List(Of QuickQuoteRvWatercraft)
                        Dim rv As New QuickQuoteRvWatercraft
                        With rv

                            .CostNew = "3300.00"
                            .PropertyDeductibleLimitId = "21" '250
                            .UninsuredMotoristBodilyInjuryLimitId = "7" '10,000
                            .HasLiability = True
                            .HasLiabilityOnly = False
                            .Description = "Desc"
                            .HorsepowerCC = "100"
                            .Length = "9"
                            .Manufacturer = "RvManufacturer"
                            .Model = "RvModel"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = ""
                            .Name.LastName &= "_rv"
                            .OwnerOtherThanInsured = True
                            .RatedSpeed = "18"

                            .RvWatercraftMotors = New List(Of QuickQuoteRvWatercraftMotor)
                            Dim m As New QuickQuoteRvWatercraftMotor
                            With m
                                .CostNew = "900.00"
                                .Manufacturer = "MotorManufacturer"
                                .Model = "MotorModel"
                                .MotorTypeId = "1" 'Inboard
                                .SerialNumber = "MotorSERIALNUM3"
                                .Year = "1997"
                            End With
                            .RvWatercraftMotors.Add(m)

                            .RvWatercraftTypeId = "6" 'Golf Cart
                            .SerialNumber = "RvSERIALNUM2"
                            .Year = "1997"

                            'added 10/30/2014
                            If .AssignedOperatorNums Is Nothing Then
                                .AssignedOperatorNums = New List(Of Integer)
                            End If
                            .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                            .AssignedOperatorNums.Add(1)
                            .AssignedOperatorNums.Add(2)
                            .AssignedOperatorNums.Add(3)
                            .AssignedOperatorNums.Add(4)
                            .AssignedOperatorNums.Add(5) 'added 10/31/2014
                            .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                        End With
                        .RvWatercrafts.Add(rv)
                    Else
                        'add logic here to change existing rv watercrafts
                        'added logic 10/30/2014
                        If .RvWatercrafts IsNot Nothing AndAlso .RvWatercrafts.Count = 1 Then
                            With .RvWatercrafts(0)
                                If .AssignedOperatorNums Is Nothing Then
                                    .AssignedOperatorNums = New List(Of Integer)
                                End If
                                .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                                .AssignedOperatorNums.Add(1)
                                .AssignedOperatorNums.Add(2)
                                .AssignedOperatorNums.Add(3)
                                .AssignedOperatorNums.Add(4)
                                .AssignedOperatorNums.Add(5) 'added 10/31/2014
                                .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                            End With
                        End If
                    End If

                    'If .Exclusions Is Nothing Then '8/7/2014 note: need prop for .CanUseExclusionNumForExclusionReconciliation
                    'updated 10/15/2014
                    If .CanUseExclusionNumForExclusionReconciliation = False Then
                        .Exclusions = New List(Of QuickQuoteExclusion)
                        With .Exclusions
                            Dim e1 As New QuickQuoteExclusion
                            With e1
                                .ExclusionTypeId = "1" 'Exclusion
                                .Description = "exc desc"
                            End With
                            .Add(e1)
                            Dim e2 As New QuickQuoteExclusion
                            With e2
                                .ExclusionTypeId = "3" 'Restriction
                                .Description = "rest desc"
                            End With
                            .Add(e2)
                            Dim e3 As New QuickQuoteExclusion
                            With e3
                                .ExclusionTypeId = "4" 'Comment
                                .Description = "comm desc"
                            End With
                            .Add(e3)
                        End With
                    Else
                        'add logic here to change existing exclusions

                    End If

                    'If .SectionICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionICoverages = New List(Of QuickQuoteSectionICoverage)
                        Dim sIc As New QuickQuoteSectionICoverage
                        With sIc
                            '.HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_HO_35
                            'updated 12/2/2013 to use coverage code desc instead of caption
                            .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment
                            .IncreasedLimitId = "221" '4,000
                            .Description = "Section I (Loss Assessment) desc"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionI_lossAssessment" 'updated 10/14/2014 to include lossAssessment
                            .EffectiveDate = "7/30/2013"
                            .ConstructionTypeId = "1" 'Frame
                            .DescribedLocation = True
                            .TheftExtension = False
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionICoverages.Add(sIc)

                        'added for testing 9/10/2014 to see if setting increasedLimit (ManualLimitIncreased) will also default included (ManualLimitIncluded) and total (ManualLimitAmount) limit amounts
                        '9/10/2014 note: didn't work... will need props to set ManualLimitIncluded and ManualLimitAmount fields
                        Dim sIcTest As New QuickQuoteSectionICoverage
                        With sIcTest
                            .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.SilverwareGoldwarePewterware
                            .IncreasedLimit = "100"
                            .Description = "Test for Silverware"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionI_silverware" 'updated 10/14/2014 to include silverware
                            .EffectiveDate = "7/30/2013"
                            .ConstructionTypeId = "1" 'Frame
                            .DescribedLocation = True
                            .TheftExtension = False
                        End With
                        .SectionICoverages.Add(sIcTest)
                    Else
                        'add logic here to change existing section I Coverages

                    End If

                    'If .SectionIICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionIICoverages = New List(Of QuickQuoteSectionIICoverage)
                        Dim sIIc As New QuickQuoteSectionIICoverage
                        With sIIc
                            '.HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical_HO_71
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical
                            .Description = "sectionII - bus pursuits - clerical (HO-71)"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.LastName &= "_sectionII"
                            .Name.NameAddressSourceId = "10022" 'Section Coverage
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionII"
                            .NumberOfPersonsReceivingCare = "4"
                            .NumberOfFamilies = "1"
                            .NumberOfFullTimeEmployees_180plus_days = "1"
                            .NumberOfPartTimeEmployees_41_to_180_days = "2"
                            .NumberOfPartTimeEmployees_40_or_less_days = "3"
                            .EstimatedNumberOfHead = "1"
                            .BusinessType = "BusType"
                            .InitialFarmPremises = True
                            .EventFrom = "8/1/2013"
                            .EventTo = "8/2/2013"
                            .BusinessName = "BusName"
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionIICoverages.Add(sIIc)
                    Else
                        'add logic here to change existing section II Coverages

                    End If

                    'If .SectionIAndIICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionIAndIICoverages = New List(Of QuickQuoteSectionIAndIICoverage)
                        Dim sIandIIc As New QuickQuoteSectionIAndIICoverage
                        With sIandIIc
                            '.MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures_HO_42
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures
                            .PropertyIncreasedLimit = "1000.00"
                            .Description = "Section I and II (Permitted Incidental Occupancies Residence) desc"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.LastName &= "_sectionIandII"
                            .Name.NameAddressSourceId = "10022" 'Section Coverage
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionIandII"
                            .NumberOfFamilies = "1"
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionIAndIICoverages.Add(sIandIIc)
                    Else
                        'add logic here to change existing section I and II Coverages

                    End If

                End With
                'If l1.PolicyUnderwritings Is Nothing Then 'need prop for .CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation
                'updated 10/15/2014
                If l1.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = False Then
                    HOM_AddPolicyUnderwritingsToLocation(l1)
                Else
                    'add logic here to change existing UW Questions

                End If
                .Locations.Add(l1)
            Else
                'add logic here to change existing location(s)
                'added logic 10/30/2014
                If .Locations IsNot Nothing AndAlso .Locations.Count = 1 Then
                    With .Locations(0)
                        If .RvWatercrafts IsNot Nothing AndAlso .RvWatercrafts.Count = 1 Then
                            With .RvWatercrafts(0)
                                If .AssignedOperatorNums Is Nothing Then
                                    .AssignedOperatorNums = New List(Of Integer)
                                End If
                                .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                                .AssignedOperatorNums.Add(1)
                                .AssignedOperatorNums.Add(2)
                                .AssignedOperatorNums.Add(3)
                                .AssignedOperatorNums.Add(4)
                                .AssignedOperatorNums.Add(5) 'added 10/31/2014
                                .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                            End With
                        End If
                    End With
                End If
            End If

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        'added 10/31/2014 for testing; next run will add it back
        'If quickQuote IsNot Nothing AndAlso quickQuote.Operators IsNot Nothing AndAlso quickQuote.Operators.Count = 5 Then
        '    'quickQuote.Operators(4).Dispose()
        '    'quickQuote.Operators.RemoveAt(4)
        'End If

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    Private Sub DFR_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate) 'added 7/26/2013; added optional param 8/8/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal

            'quickQuote.Client.ClientId = "358559"'recently used for HOM

            quickQuote.QuoteDescription = "Test Desc"
            'quickQuote.EffectiveDate = "7/20/2013" 'moved below 12/20/2013

            quickQuote.RiskGrade = "1"
            quickQuote.RiskGradeLookupId = "74"

            quickQuote.Client.Name.FirstName = "Don"
            quickQuote.Client.Name.LastName = "Dwelling"
            quickQuote.Client.Name.SexId = "1"
            quickQuote.Client.Name.TypeId = "1"
            quickQuote.Client.Name.TaxNumber = "123456789"
            quickQuote.Client.Name.TaxTypeId = "1"
            quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            quickQuote.Client.Name.BirthDate = "1/1/1982"
            quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            quickQuote.Client.Name.DriversLicenseNumber = "1234-56-7890"
            quickQuote.Client.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Client.Address.HouseNum = "890"
            quickQuote.Client.Address.StreetName = "Dwelling Boulevard"
            quickQuote.Client.Address.City = "Fishers"
            quickQuote.Client.Address.Zip = "46038"
            quickQuote.Client.Address.County = "Hamilton"

            quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
            Dim cp1 As New QuickQuotePhone
            cp1.Number = "(312)555-5557"
            quickQuote.Client.Phones.Add(cp1)
            'Policyholder information will automatically be populated by Client

            quickQuote.Policyholder2.Name.FirstName = "#2"
            quickQuote.Policyholder2.Name.LastName = "Dwelling"
            quickQuote.Policyholder2.Name.SexId = "2"
            quickQuote.Policyholder2.Name.TypeId = "1"
            quickQuote.Policyholder2.Name.TaxNumber = "223456789"
            quickQuote.Policyholder2.Name.TaxTypeId = "1"
            quickQuote.Policyholder2.Name.EntityTypeId = "1" 'Individual
            quickQuote.Policyholder2.Name.DescriptionOfOperations = "PH2 test"
            quickQuote.Policyholder2.Name.BirthDate = "2/1/1982"
            quickQuote.Policyholder2.Name.DriversLicenseDate = "2/1/2013"
            quickQuote.Policyholder2.Name.DriversLicenseNumber = "2234-56-7890"
            quickQuote.Policyholder2.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Policyholder2.Address = quickQuote.Client.Address
            quickQuote.Policyholder2.Phones = quickQuote.Client.Phones

            quickQuote.Applicants = New List(Of QuickQuoteApplicant)
            Dim a As New QuickQuoteApplicant
            a.Name = quickQuote.Client.Name 'copied from Client
            a.Name.NameAddressSourceId = "28" 'Applicant
            a.Address = quickQuote.Client.Address 'copied from Client
            a.BusinessStartedDate = "8/1/2012"
            a.EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
            a.Employer = "Test Employer"
            a.OccupationTypeId = "23" 'Professional
            a.PurchaseDate = "7/1/2012"
            a.RelationshipTypeId = "8" 'Policyholder
            With a.ResidenceInfo
                .CurrentResidenceTypeId = "4" 'Apartment
                .Owned = False

                .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                Dim d1 As New QuickQuoteResidenceInfoDetail
                d1.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d1.Address.StreetName &= " Prev1"
                d1.ResidenceInfoDetailTypeId = "1" 'Previous1
                d1.YearsAtPreviousAddress = "1"
                .ResidenceInfoDetails.Add(d1)
                Dim d2 As New QuickQuoteResidenceInfoDetail
                d2.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d2.Address.StreetName &= " Prev2"
                d2.ResidenceInfoDetailTypeId = "2" 'Previous2
                d2.YearsAtPreviousAddress = "3"
                .ResidenceInfoDetails.Add(d2)
                Dim d3 As New QuickQuoteResidenceInfoDetail
                d3.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d3.Address.StreetName &= " Prev3"
                d3.ResidenceInfoDetailTypeId = "3" 'Previous3
                d3.YearsAtPreviousAddress = "2"
                .ResidenceInfoDetails.Add(d3)

                .YearsAtCurrentAddress = "2"
            End With
            a.SelfEmployedInfo = "self employment info"
            a.SpouseEmployer = "N/A"
            a.SpouseOccupationTypeId = "30" 'Unemployed
            a.StandardIndustrialClassification = "sic"
            a.USCitizenTypeId = "1" 'Yes
            a.YearsWithCurrentEmployer = "8"
            a.YearsWithPriorEmployer = "2"
            quickQuote.Applicants.Add(a)
        End If

        quickQuote.EffectiveDate = Date.Today 'moved here from above 12/20/2013

        'for tier override (should only be used for testing); not available for DFR yet
        'quickQuote.TierTypeId = "1" 'Uniform (probably not needed)
        'quickQuote.UseTierOverride = True
        'quickQuote.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

        'policy level covs
        quickQuote.PersonalLiabilityLimitId = "262" '100,000
        quickQuote.MedicalPaymentsLimitid = "170" '1,000

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'quickQuote.Client.Name
        l1.Name.NameAddressSourceId = "13" 'Location
        l1.Address = qqHelper.CloneObject(quickQuote.Client.Address) 'quickQuote.Client.Address
        l1.ProtectionClassId = "1" '1

        l1.Acreage = "2"
        l1.CondoRentedTypeId = "2" 'No
        l1.ConstructionTypeId = "1" 'Frame
        l1.DeductibleLimitId = "22" '500 (coverage)
        'l1.WindHailDeductibleLimitId = "24" '1000 (coverage); not for DFR
        l1.DayEmployees = False
        l1.DaytimeOccupancy = True
        'l1.FamilyUnitsId = "1" '1; not sure for DFR
        l1.FireDepartmentDistanceId = "2" '5 Miles or Less
        l1.FireHydrantDistanceId = "4" 'Within 1,000 feet
        l1.FormTypeId = "11" 'DP 00 02 - Broad
        l1.FoundationTypeId = "2" 'Closed
        l1.LastCostEstimatorDate = "12/1/2012"
        l1.MarketValue = "140000"
        l1.NumberOfFamiliesId = "1" '1
        l1.OccupancyCodeId = "14" 'Owner Occupied
        'l1.PrimaryResidence = True; not sure for DFR
        l1.ProgramTypeId = "3" 'Dwelling Fire
        l1.NumberOfApartments = "0"
        l1.NumberOfSolidFuelBurningUnits = "0"
        l1.RebuildCost = "150000"
        l1.Remarks = "test loc prop remarks"
        l1.SquareFeet = "4500"
        l1.StructureTypeId = "13" 'Conventionally Built
        l1.YearBuilt = "1990"
        'added 8/15/2013 for DFR
        l1.NumberOfDaysRented = "0"
        l1.NumberOfUnitsId = "1" '1
        l1.UsageTypeId = "2" 'Non-Seasonal
        l1.VacancyFromDate = ""
        l1.VacancyToDate = ""

        'updates
        l1.Updates.WindowsUpdateYear = "1991"
        l1.Updates.ElectricUpdateYear = "1992"
        l1.Updates.ElectricUpdateTypeId = "2" 'Complete
        l1.Updates.ElectricCircuitBreaker = True
        l1.Updates.CentralHeatUpdateYear = "1993"
        l1.Updates.PlumbingUpdateYear = "1994"
        l1.Updates.PlumbingUpdateTypeId = "2" 'Complete
        l1.Updates.RoofUpdateYear = "1995"
        l1.Updates.SupplementalHeatUpdateYear = "1996"

        'coverages
        l1.A_Dwelling_Limit = "60000"
        l1.A_Dwelling_LimitIncluded = "0"
        l1.A_Dwelling_LimitIncreased = "60000"
        l1.B_OtherStructures_Limit = "6500"
        l1.B_OtherStructures_LimitIncluded = "6000"
        l1.B_OtherStructures_LimitIncreased = "500"
        'l1.C_PersonalProperty_Limit = "42300"
        'l1.C_PersonalProperty_LimitIncluded = "42000"
        'l1.C_PersonalProperty_LimitIncreased = "300"
        '8/15/2013 note: cov C not working for DFR... PerformTableLookupRowInterpolation - Unable to locate Y Axis (Table[FireKeyLimitFactors_CovC] Value[300.0000]) (in ConfigurableBookEngine.InsRateScriptHost.InternalCalculateRate)
        l1.C_PersonalProperty_Limit = "0"
        l1.C_PersonalProperty_LimitIncluded = "0" 'different than HOM; nothing included for DFR
        l1.C_PersonalProperty_LimitIncreased = "0"
        l1.D_LossOfUse_Limit = "6200"
        l1.D_LossOfUse_LimitIncluded = "6000" 'different than HOM; something included for DFR
        l1.D_LossOfUse_LimitIncreased = "200"

        l1.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        Dim ai As New QuickQuoteAdditionalInterest
        ai.Name.CommercialName1 = "Test Finance Company"
        ai.Name.TypeId = "2"
        ai.Name.TaxNumber = "123456789"
        ai.Name.TaxTypeId = "2"
        ai.Address.HouseNum = "123"
        ai.Address.StreetName = "Finance Drive"
        ai.Address.City = "Indianapolis"
        ai.Address.StateId = "16" 'automatically defaulted anyway
        ai.Address.Zip = "46227" 'should automatically append -0000
        ai.Address.County = "Marion"
        ai.Emails = New List(Of QuickQuoteEmail)
        Dim e As New QuickQuoteEmail
        e.Address = "test@test.com"
        e.TypeId = "2"
        ai.Emails.Add(e)
        ai.Phones = New List(Of QuickQuotePhone)
        Dim p As New QuickQuotePhone
        p.Number = "(317)111-2222"
        p.TypeId = "2"
        ai.Phones.Add(p)
        ai.ATIMA = False
        ai.GroupTypeId = "2" 'Finance Company
        ai.Description = "desc"
        ai.Other = "other"
        ai.TypeId = "42" 'First Mortgagee
        l1.AdditionalInterests.Add(ai)

        'credits and surcharges; not sure for DFR
        'l1.MultiPolicyDiscount = True
        ''l1.MatureHomeownerDiscount = True
        ''l1.FireSmokeAlarm_LocalAlarmSystem = True
        'l1.NewHomeDiscount = True
        ''l1.FireSmokeAlarm_CentralStationAlarmSystem = True
        ''l1.SelectMarketCredit = True
        ''l1.FireSmokeAlarm_SmokeAlarm = True
        'l1.BurglarAlarm_LocalAlarmSystem = True
        'l1.SprinklerSystem_AllExcept = True
        ''l1.BurglarAlarm_CentralStationAlarmSystem = True
        ''l1.SprinklerSystem_AllIncluding = True
        'l1.TrampolineSurcharge = True
        ''l1.WoodOrFuelBurningApplianceSurcharge = True

        'currently killing quote for future use, even after removing and trying to re-rate (Unable to successfully translate source data to policy image.); 8/12/2013 - 'unable to translate' error is caused on re-rate after operators is set
        l1.InlandMarines = New List(Of QuickQuoteInlandMarine)
        Dim im As New QuickQuoteInlandMarine
        im.ArtistName = "BikeArtist"
        im.ConsentToRateCoverageEliminated = "cov eliminated"
        im.ConsentToRateCoverageInvolved = "cov involved"
        'im.Coverage'CoverageCodeId 70077-Inland_Marine_Bicycles (CoverageLimitId 18 - Deductible 100; ManualLimitAmount/ManualLimitIncreased 500.00; ManualLimitIncluded 0
        'im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
        'updated 12/5/2013 to use coverage code desc instead of caption
        im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
        im.DeductibleLimitId = 18 '100
        im.IncreasedLimit = "500.00"
        im.Description = "IM Bicycles Desc"
        im.MakeBrand = "BikeMake"
        im.Model = "BikeModel"
        im.RateInfoAmount = "3.00"
        im.RateInfoDescription = "rate info desc"
        im.RateInformationTypeId = "2" 'Consent to Rate
        im.SerialNumber = "SERIALNUM1"
        im.StatedAmount = True
        im.StorageLocation = "storage loc"
        im.Year = "2010"
        l1.InlandMarines.Add(im)

        ''did same thing as IM; killed for future use (Unable to successfully translate source data to policy image.); 8/12/2013 - 'unable to translate' error is caused on re-rate after operators is set
        l1.RvWatercrafts = New List(Of QuickQuoteRvWatercraft)
        Dim rv As New QuickQuoteRvWatercraft

        '8/15/2013 note: not working (adds but fails on subsequent rate attempt); 8/19/2013 clarification: Operators can be added but fails on subsequent rate attempt; AddedOperators always gets OperatorLink foreign key error
        'rv.AddedOperators = New List(Of QuickQuoteOperator)
        'Dim op As New QuickQuoteOperator
        'op.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        'op.Name.NameAddressSourceId = "60"
        'op.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op.OperatorNum = "1" 'added 8/19/2013
        'op.RelationshipTypeId = "8" 'Policyholder
        'rv.AddedOperators.Add(op)

        'testing 8/19/2013; was able to successfully set (w/o setting AddedOperators or adding Operators at RiskLevel) but received 'Unable to successfully translate source data to policy image. ' error when attempting re-rate
        'rv.Operators = New List(Of QuickQuoteOperator)
        'Dim op As New QuickQuoteOperator
        'op.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        'op.Name.NameAddressSourceId = "60"
        'op.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op.OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
        'op.RelationshipTypeId = "8" 'Policyholder
        'rv.Operators.Add(op)

        '2nd test 8/19/2013; able to successfully re-rate when Operator isn't Policyholder1 or 2
        rv.Operators = New List(Of QuickQuoteOperator)
        Dim op As New QuickQuoteOperator
        op.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        op.Name.NameAddressSourceId = "60"
        op.Name.LastName &= "_op"
        op.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        op.Address.StreetName &= "_op"
        'op.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        op.OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
        op.RelationshipTypeId = "11" 'Not Related to Policyholder
        rv.Operators.Add(op)
        'now testing more...; able to successfully re-rate w/ Policyholder when name/address is omitted
        Dim op_P1 As New QuickQuoteOperator
        op_P1.OperatorNum = "2"
        op_P1.RelationshipTypeId = "8" 'Policyholder
        rv.Operators.Add(op_P1)

        rv.CostNew = "3300.00"
        'rv.Coverages 'CoverageCodeId 70097-Inland_Marine_Watercraft_Property (CoverageLimitId 21 - Deductible 250), CoverageCodeId 294-Uninsured Bodily Injury (CoverageLimitId 7; ManualLimitAmount 10000), CoverageCodeId 20167-Location - Watercraft Liability (CoverageLimitId -1; Checkbox true)
        rv.PropertyDeductibleLimitId = "21" '250
        rv.UninsuredMotoristBodilyInjuryLimitId = "7" '10,000
        rv.HasLiability = True
        rv.HasLiabilityOnly = False
        rv.Description = "Desc"
        rv.HorsepowerCC = "100"
        rv.Length = "9"
        rv.Manufacturer = "RvManufacturer"
        rv.Model = "RvModel"
        rv.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        rv.Name.NameAddressSourceId = ""
        rv.Name.LastName &= "_rv"
        rv.OwnerOtherThanInsured = True
        rv.RatedSpeed = "18"

        rv.RvWatercraftMotors = New List(Of QuickQuoteRvWatercraftMotor)
        Dim m As New QuickQuoteRvWatercraftMotor
        m.CostNew = "900.00"
        m.Manufacturer = "MotorManufacturer"
        m.Model = "MotorModel"
        m.MotorTypeId = "1" 'Inboard
        m.SerialNumber = "MotorSERIALNUM3"
        m.Year = "1997"
        rv.RvWatercraftMotors.Add(m)

        rv.RvWatercraftTypeId = "1" '6=Golf Cart; 1=Watercraft
        rv.SerialNumber = "RvSERIALNUM2"
        rv.Year = "1997"
        l1.RvWatercrafts.Add(rv)

        l1.Exclusions = New List(Of QuickQuoteExclusion)
        Dim e1 As New QuickQuoteExclusion
        e1.ExclusionTypeId = "1" 'Exclusion
        e1.Description = "exc desc"
        l1.Exclusions.Add(e1)
        Dim e2 As New QuickQuoteExclusion
        e2.ExclusionTypeId = "3" 'Restriction
        e2.Description = "rest desc"
        l1.Exclusions.Add(e2)
        Dim e3 As New QuickQuoteExclusion
        e3.ExclusionTypeId = "4" 'Comment
        e3.Description = "comm desc"
        l1.Exclusions.Add(e3)

        'Optional Property Coverages
        l1.SectionICoverages = New List(Of QuickQuoteSectionICoverage)
        Dim sIc As New QuickQuoteSectionICoverage
        With sIc
            .DFR_CoverageType = QuickQuoteSectionICoverage.DFR_SectionICoverageType.Earthquake 'updated 12/2/2013 to use coverage code desc instead of caption (didn't affect this one)
            .DeductibleLimitId = "223" '2% (uses CoverageLimitId; same as IncreasedLimitId property)
            .Description = "EQ desc"
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_optionalProp1"
            .EffectiveDate = "8/15/2013"
            .UsageTypeId = "1" 'Seasonal
            .OccupancyCodeId = "14" 'Owner Occupied
            .ProtectionClassId = "1" '1
            .ConstructionTypeId = "1" 'Frame
            .NumberOfFamilies = "1"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionICoverages.Add(sIc)
        Dim sIc2 As New QuickQuoteSectionICoverage
        With sIc2
            '.DFR_CoverageType = QuickQuoteSectionICoverage.DFR_SectionICoverageType.AwningssignsAndoutdoorradioAndTVEquipment
            'updated 12/2/2013 to use coverage code desc instead of caption
            .DFR_CoverageType = QuickQuoteSectionICoverage.DFR_SectionICoverageType.Farm_Outdoor_Antenna_Satellite_Dish
            .IncreasedLimit = "300.00"
            .Description = "Awnings desc"
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_optionalProp2"
            .EffectiveDate = "8/14/2013"
            .UsageTypeId = "2" 'Non-Seasonal
            .OccupancyCodeId = "15" 'Tenant Occupied
            .ProtectionClassId = "2" '2
            .ConstructionTypeId = "2" 'Masonry
            .NumberOfFamilies = "2"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionICoverages.Add(sIc2)

        'Optional Liability Coverages
        l1.SectionIICoverages = New List(Of QuickQuoteSectionIICoverage)
        Dim sIIc As New QuickQuoteSectionIICoverage
        With sIIc
            .DFR_CoverageType = QuickQuoteSectionIICoverage.DFR_SectionIICoverageType.LossAssessmentLiability 'updated 12/2/2013 to use coverage code desc instead of caption (didn't affect this one)
            .IncreasedLimit = "200.00"
            .Description = "loss assess desc"
            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            .Name.LastName &= "_optionalLiab1"
            .Name.NameAddressSourceId = "10022" 'Section Coverage
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_optionalLiab1"
            .NumberOfPersonsReceivingCare = "2"
            .NumberOfFamilies = "1"
            .NumberOfEmployees = "3"
            .BusinessType = "BusType"
            .BusinessName = "BusName"
            .NavigationPeriodEffDate = "8/13/2013"
            .NavigationPeriodExpDate = "8/15/2013"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionIICoverages.Add(sIIc)
        Dim sIIc2 As New QuickQuoteSectionIICoverage
        With sIIc2
            '.DFR_CoverageType = QuickQuoteSectionIICoverage.DFR_SectionIICoverageType.EmployersLiability
            'updated 12/5/2013 to use coverage code desc instead of caption
            .DFR_CoverageType = QuickQuoteSectionIICoverage.DFR_SectionIICoverageType.EmployerLiability
            .Description = "emp liab desc"
            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
            .Name.LastName &= "_optionalLiab2"
            .Name.NameAddressSourceId = "10022" 'Section Coverage
            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
            .Address.StreetName &= "_optionalLiab2"
            .NumberOfPersonsReceivingCare = "4"
            .NumberOfFamilies = "3"
            .NumberOfEmployees = "2"
            .BusinessType = "busType"
            .BusinessName = "busName"
            .NavigationPeriodEffDate = "7/28/2013"
            .NavigationPeriodExpDate = "7/29/2013"
            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        End With
        l1.SectionIICoverages.Add(sIIc2)

        DFR_AddPolicyUnderwritingsToLocation(l1) 'added 8/15/2013

        quickQuote.Locations.Add(l1)

        'operators can be added at any point but the subsequent rate always fails regardless if operators is still there or not
        'quickQuote.Operators = Nothing 'test to set back to nothing
        'quickQuote.Operators = New List(Of QuickQuoteOperator)
        'Dim op1 As New QuickQuoteOperator
        'op1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'changed to Client; Policyholder wasn't coming thru on 1st attempt (since it's not set until saved)
        'op1.Name.NameAddressSourceId = "60"
        'op1.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op1.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op1.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op1.OperatorNum = "1" 'added 8/19/2013
        'op1.RelationshipTypeId = "8" 'Policyholder
        'quickQuote.Operators.Add(op1)
        'If quickQuote.Policyholder2 IsNot Nothing AndAlso quickQuote.Policyholder2.HasData = True Then
        '    Dim op2 As New QuickQuoteOperator
        '    op2.Name = qqHelper.CloneObject(quickQuote.Policyholder2.Name)
        '    op2.Name.NameAddressSourceId = "60"
        '    op2.Address = qqHelper.CloneObject(quickQuote.Policyholder2.Address)
        '    op2.Emails = qqHelper.CloneObject(quickQuote.Policyholder2.Emails)
        '    op2.Phones = qqHelper.CloneObject(quickQuote.Policyholder2.Phones)
        '    op2.OperatorNum = "2" 'added 8/19/2013
        '    op2.RelationshipTypeId = "5" 'Policyholder #2
        '    quickQuote.Operators.Add(op2)
        'End If

        '2nd test 8/19/2013; able to successfully re-rate when Operator isn't Policyholder1 or 2
        quickQuote.Operators = New List(Of QuickQuoteOperator)
        Dim op1 As New QuickQuoteOperator
        op1.Name = qqHelper.CloneObject(quickQuote.Client.Name)
        op1.Name.NameAddressSourceId = "60"
        op1.Name.LastName &= "_op"
        op1.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        op1.Address.StreetName &= "_op"
        'op1.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op1.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        op1.OperatorNum = "1" 'added 8/19/2013; fixes SQL foreign key error
        op1.RelationshipTypeId = "11" 'Not Related to Policyholder
        quickQuote.Operators.Add(op1)
        'now testing more...; able to successfully re-rate w/ Policyholder when name/address is omitted
        Dim op1_P1 As New QuickQuoteOperator
        op1_P1.OperatorNum = "2"
        op1_P1.RelationshipTypeId = "8" 'Policyholder
        quickQuote.Operators.Add(op1_P1)

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

                'quickQuote = Nothing
                'strQQ = ""
                'ratedQQ = Nothing
                'strRatedQQ = ""
                'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
                'If err = "" Then

                '    'stuff for app gap

                '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
                '    If err = "" Then

                '    End If
                'End If
            Else
                'error
            End If
        End If

    End Sub
    Private Sub HOM_AddPolicyUnderwritingsToLocation(ByRef l As QuickQuoteLocation) 'added 8/15/2013
        If l IsNot Nothing Then
            l.PolicyUnderwritings = New List(Of QuickQuotePolicyUnderwriting)
            With l.PolicyUnderwritings
                Dim pu1 As New QuickQuotePolicyUnderwriting
                With pu1
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9324" '1. Any farming or other business conducted on premises? (Including day/child care)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu1)
                Dim pu2 As New QuickQuotePolicyUnderwriting
                With pu2
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9299" '2. Any residence employees? (Number and type of full and part time employees)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu2)
                Dim pu3 As New QuickQuotePolicyUnderwriting
                With pu3
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9300" '3. Any flooding, brush, forest fire hazard, landslide, etc?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu3)
                Dim pu4 As New QuickQuotePolicyUnderwriting
                With pu4
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9301" '4. Any other residence owned, occupied or rented?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu4)
                Dim pu5 As New QuickQuotePolicyUnderwriting
                With pu5
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9302" '5. Any other insurance with this company? (List policy numbers)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu5)
                Dim pu6 As New QuickQuotePolicyUnderwriting
                With pu6
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9303" '6. Has insurance been transferred within agency?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu6)
                Dim pu7 As New QuickQuotePolicyUnderwriting
                With pu7
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9304" '7. Any coverage declined, cancelled, or non-renewed during the last three (3) years.
                    .PolicyUnderwritingExtraAnswer = "" 'no spot for additional info in UI
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu7)
                Dim pu8 As New QuickQuotePolicyUnderwriting
                With pu8
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9305" '8. Has applicant had a foreclosure, repossession, bankruptcy, judgment or lien during the last five (5) years?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu8)
                Dim pu9 As New QuickQuotePolicyUnderwriting
                With pu9
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9306" '9. Are there any animals or exotic pets kept on premises? (Note breed and bite history)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu9)
                Dim pu10 As New QuickQuotePolicyUnderwriting
                With pu10
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9307" '10. Distance to Tidal Water? (Miles or Feet)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu10)
                Dim pu11 As New QuickQuotePolicyUnderwriting
                With pu11
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9308" '11. Is property situated on more than five (5) acres? (If yes, describe land use)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu11)
                Dim pu12 As New QuickQuotePolicyUnderwriting
                With pu12
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9309" '12. Does applicant own any recreational vehicles (snow mobiles, dunebuggys, mini bikes, ATV's, etc)? (List year, type, make, model)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu12)
                Dim pu13 As New QuickQuotePolicyUnderwriting
                With pu13
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9310" '13. Is building retrofitted for earthquake? (if applicable)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu13)
                Dim pu14 As New QuickQuotePolicyUnderwriting
                With pu14
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9311" '14. During the last five (5) years, has any applicant been indicted for or convicted of any degree of the crime of fraud, arson, or any other arson related crime in connection with this or any other property?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu14)
                Dim pu15 As New QuickQuotePolicyUnderwriting
                With pu15
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9312" '15. Is there a manager on the premises? (Renters and Condos only)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu15)
                Dim pu16 As New QuickQuotePolicyUnderwriting
                With pu16
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9313" '16. Is there a security attendant? (Renters and Condos only)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu16)
                Dim pu17 As New QuickQuotePolicyUnderwriting
                With pu17
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9314" '17. Is the building entrance locked? (Renters and Condos only)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu17)
                Dim pu18 As New QuickQuotePolicyUnderwriting
                With pu18
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9315" '18. Any uncorrected fire or building code violations?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu18)
                Dim pu19 As New QuickQuotePolicyUnderwriting
                With pu19
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9316" '19. Is house for sale?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu19)
                Dim pu20 As New QuickQuotePolicyUnderwriting
                With pu20
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9317" '20. Is property within 300 feet of a commercial or non-residential property?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu20)
                Dim pu21 As New QuickQuotePolicyUnderwriting
                With pu21
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9318" '21. Is there a trampoline of the premises?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu21)
                Dim pu22 As New QuickQuotePolicyUnderwriting
                With pu22
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9319" '22. Was the structure originally built for other than a private residence and then converted?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu22)
                Dim pu23 As New QuickQuotePolicyUnderwriting
                With pu23
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9320" '23. Any lead paint hazard?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu23)
                Dim pu24 As New QuickQuotePolicyUnderwriting
                With pu24
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9321" '24. If a fuel oil tank is on premises, has other insurance been obtained for the tank? (Give First Party and limit, and Third party and limit)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu24)
                Dim pu25 As New QuickQuotePolicyUnderwriting
                With pu25
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9322" '25. Is the building under construction or undergoing renovation or reconstruction? (Give estimated completion date and dollar value)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu25)
                Dim pu26 As New QuickQuotePolicyUnderwriting
                With pu26
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    .PolicyUnderwritingCodeId = "9323" '26. If building is under construction, is the applicant the general contractor?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu26)
            End With
        End If
    End Sub
    Private Sub DFR_AddPolicyUnderwritingsToLocation(ByRef l As QuickQuoteLocation) 'added 8/15/2013
        If l IsNot Nothing Then
            l.PolicyUnderwritings = New List(Of QuickQuotePolicyUnderwriting)
            With l.PolicyUnderwritings
                Dim pu1 As New QuickQuotePolicyUnderwriting
                With pu1
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9324" '1. Any farming or other business conducted on premises? (Including day/child care)
                    .PolicyUnderwritingCodeId = "9415" '1. Any Farming or Other Business Conducted on Premises? (Including Day/Child Care) If "Yes", list gross receipts: $
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu1)
                Dim pu2 As New QuickQuotePolicyUnderwriting
                With pu2
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9299" '2. Any residence employees? (Number and type of full and part time employees)
                    .PolicyUnderwritingCodeId = "9416" '2. Any Residence Employees? (Number and type of full and part time employees)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu2)
                Dim pu3 As New QuickQuotePolicyUnderwriting
                With pu3
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9300" '3. Any flooding, brush, forest fire hazard, landslide, etc?
                    .PolicyUnderwritingCodeId = "9417" '3. Any Flooding, Brush, Forest Fire Hazard, Landslide, etc.?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu3)
                Dim pu4 As New QuickQuotePolicyUnderwriting
                With pu4
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9301" '4. Any other residence owned, occupied or rented?
                    .PolicyUnderwritingCodeId = "9418" '4. Any other residence owned, occupied or rented?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu4)
                Dim pu5 As New QuickQuotePolicyUnderwriting
                With pu5
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9302" '5. Any other insurance with this company? (List policy numbers)
                    .PolicyUnderwritingCodeId = "9419" '5. Any other insurance with this company? (List policy numbers) 
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu5)
                Dim pu6 As New QuickQuotePolicyUnderwriting
                With pu6
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9303" '6. Has insurance been transferred within agency?
                    .PolicyUnderwritingCodeId = "9420" '6. Has insurance been transferred within agency?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu6)
                Dim pu7 As New QuickQuotePolicyUnderwriting
                With pu7
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9304" '7. Any coverage declined, cancelled, or non-renewed during the last three (3) years.
                    .PolicyUnderwritingCodeId = "9421" '7. Any coverage declined, cancelled or non-renewed during the last 3 years? (Not applicable in MO)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info; no spot for additional info in UI for HOM; spot is there for DFR
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu7)
                Dim pu8 As New QuickQuotePolicyUnderwriting
                With pu8
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9305" '8. Has applicant had a foreclosure, repossession, bankruptcy, judgment or lien during the last five (5) years?
                    .PolicyUnderwritingCodeId = "9422" '8. Has applicant had a foreclosure, repossession, bankruptcy, judgment or lien during the past 5 years?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu8)
                Dim pu9 As New QuickQuotePolicyUnderwriting
                With pu9
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9306" '9. Are there any animals or exotic pets kept on premises? (Note breed and bite history)
                    .PolicyUnderwritingCodeId = "9423" '9. Are there any animals or exotic pets kept on the premises? (Note breed and bite history)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu9)
                Dim pu10 As New QuickQuotePolicyUnderwriting
                With pu10
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9307" '10. Distance to Tidal Water? (Miles or Feet)
                    .PolicyUnderwritingCodeId = "9424" '10. Is property located within two miles of tidal water?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu10)
                Dim pu11 As New QuickQuotePolicyUnderwriting
                With pu11
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9308" '11. Is property situated on more than five (5) acres? (If yes, describe land use)
                    .PolicyUnderwritingCodeId = "9425" '11. Is property situated on more than five acres?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu11)
                Dim pu12 As New QuickQuotePolicyUnderwriting
                With pu12
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9309" '12. Does applicant own any recreational vehicles (snow mobiles, dunebuggys, mini bikes, ATV's, etc)? (List year, type, make, model)
                    .PolicyUnderwritingCodeId = "9426" '12. Does applicant own any recreational vehicles (snow mobiles, dune buggys, mini bikes, ATVs, etc.)? (List year,  type, make, model)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu12)
                Dim pu13 As New QuickQuotePolicyUnderwriting
                With pu13
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9310" '13. Is building retrofitted for earthquake? (if applicable)
                    .PolicyUnderwritingCodeId = "9427" '13. Is building retrofitted for earthquake? (if applicable)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu13)
                Dim pu14 As New QuickQuotePolicyUnderwriting
                With pu14
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9311" '14. During the last five (5) years, has any applicant been indicted for or convicted of any degree of the crime of fraud, arson, or any other arson related crime in connection with this or any other property?
                    .PolicyUnderwritingCodeId = "9428" '14. During the last five years, has any applicant been convicted of any degree of the crime of arson? (In RI, failure to disclose the existence of an arson conviction or is a misdemeanor punishable by a sentence of up to one year of imprisonment.)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu14)
                Dim pu15 As New QuickQuotePolicyUnderwriting
                With pu15
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9312" '15. Is there a manager on the premises? (Renters and Condos only)
                    .PolicyUnderwritingCodeId = "9429" '15. Renters and Condos Only: Is there a manager on the premises?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu15)
                Dim pu16 As New QuickQuotePolicyUnderwriting
                With pu16
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9313" '16. Is there a security attendant? (Renters and Condos only)
                    .PolicyUnderwritingCodeId = "9430" '16. Renters and Condos Only: Is there a security attendant?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu16)
                Dim pu17 As New QuickQuotePolicyUnderwriting
                With pu17
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9314" '17. Is the building entrance locked? (Renters and Condos only)
                    .PolicyUnderwritingCodeId = "9431" '17. Renters and Condos Only: Is the building entrance locked?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu17)
                Dim pu18 As New QuickQuotePolicyUnderwriting
                With pu18
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9315" '18. Any uncorrected fire or building code violations?
                    .PolicyUnderwritingCodeId = "9432" '18. Any uncorrected fire or building code violations?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu18)
                Dim pu19 As New QuickQuotePolicyUnderwriting
                With pu19
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9316" '19. Is house for sale?
                    .PolicyUnderwritingCodeId = "9433" '19. Is building undergoing renovation or reconstruction? (Give estimated completion date and dollar value)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu19)
                Dim pu20 As New QuickQuotePolicyUnderwriting
                With pu20
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9317" '20. Is property within 300 feet of a commercial or non-residential property?
                    .PolicyUnderwritingCodeId = "9434" '20. Is house for sale?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu20)
                Dim pu21 As New QuickQuotePolicyUnderwriting
                With pu21
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9318" '21. Is there a trampoline of the premises?
                    .PolicyUnderwritingCodeId = "9435" '21. Is property w/in 300 ft of a commercial or non-residential property?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu21)
                Dim pu22 As New QuickQuotePolicyUnderwriting
                With pu22
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9319" '22. Was the structure originally built for other than a private residence and then converted?
                    .PolicyUnderwritingCodeId = "9436" '22. Is there a trampoline on the premises?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu22)
                Dim pu23 As New QuickQuotePolicyUnderwriting
                With pu23
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9320" '23. Any lead paint hazard?
                    .PolicyUnderwritingCodeId = "9437" '23. Was the structure originally built for other than a private residence and then converted?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu23)
                Dim pu24 As New QuickQuotePolicyUnderwriting
                With pu24
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9321" '24. If a fuel oil tank is on premises, has other insurance been obtained for the tank? (Give First Party and limit, and Third party and limit)
                    .PolicyUnderwritingCodeId = "9438" '24. Any lead paint hazard?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu24)
                Dim pu25 As New QuickQuotePolicyUnderwriting
                With pu25
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9322" '25. Is the building under construction or undergoing renovation or reconstruction? (Give estimated completion date and dollar value)
                    .PolicyUnderwritingCodeId = "9439" '25. If a fuel oil tank is on premises, has other insurance been obtained for the tank? (Give first party and limit, and third party and limit)
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu25)
                Dim pu26 As New QuickQuotePolicyUnderwriting
                With pu26
                    .PolicyUnderwritingAnswer = "-1" '-1 for No or 1 for Yes
                    .PolicyUnderwritingAnswerTypeId = "0" 'N/A
                    '.PolicyUnderwritingCodeId = "9323" '26. If building is under construction, is the applicant the general contractor?
                    .PolicyUnderwritingCodeId = "9440" '26. If building is under construction, is the applicant the general contractor?
                    .PolicyUnderwritingExtraAnswer = "" 'additional info
                    .PolicyUnderwritingExtraAnswerTypeId = "0" 'not in ExtraAnswerType table (would've thought it would be 1 - Text)
                    .PolicyUnderwritingLevelId = "3" 'Location
                    .PolicyUnderwritingTabId = "1" 'UW # 1
                End With
                .Add(pu26)
            End With
        End If
    End Sub
    Private Sub HOM_save_test_old(ByVal qId As String) 'originally added 7/26/2013
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

            'quickQuote.Client.ClientId = "216844"

            quickQuote.QuoteDescription = "Test Desc"
            quickQuote.EffectiveDate = "7/20/2013"

            quickQuote.RiskGrade = "1"
            quickQuote.RiskGradeLookupId = "74"

            quickQuote.Client.Name.FirstName = "Don"
            quickQuote.Client.Name.LastName = "Home"
            quickQuote.Client.Name.SexId = "1"
            quickQuote.Client.Name.TypeId = "1"
            quickQuote.Client.Name.TaxNumber = "123456789"
            quickQuote.Client.Name.TaxTypeId = "1"
            quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            quickQuote.Client.Name.BirthDate = "1/1/1982"
            quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            quickQuote.Client.Name.DriversLicenseNumber = "1234-56-7890"
            quickQuote.Client.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Client.Address.HouseNum = "123"
            quickQuote.Client.Address.StreetName = "Test Street"
            quickQuote.Client.Address.City = "Indianapolis"
            quickQuote.Client.Address.Zip = "46227"
            quickQuote.Client.Address.County = "Marion"

            'real data (didn't work)
            'quickQuote.Client.Name.FirstName = "JUNIOR"
            'quickQuote.Client.Name.MiddleName = "W"
            'quickQuote.Client.Name.LastName = "BROWN"
            'quickQuote.Client.Name.SexId = "1"
            'quickQuote.Client.Name.TypeId = "1"
            'quickQuote.Client.Name.TaxNumber = "666648093"
            'quickQuote.Client.Name.TaxTypeId = "1"
            'quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            'quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            'quickQuote.Client.Name.BirthDate = "10/26/1956"
            'quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            'quickQuote.Client.Name.DriversLicenseNumber = "8902605449"
            'quickQuote.Client.Name.MaritalStatusId = "1" '1=Single; 2=Married
            'quickQuote.Client.Address.HouseNum = "7025"
            'quickQuote.Client.Address.StreetName = "MARINERS LN"
            'quickQuote.Client.Address.ApartmentNumber = "B"
            'quickQuote.Client.Address.City = "INDIANAPOLIS"
            'quickQuote.Client.Address.Zip = "462141789"
            'quickQuote.Client.Address.County = "MARION"

            quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
            Dim cp1 As New QuickQuotePhone
            cp1.Number = "(312)555-5557"
            quickQuote.Client.Phones.Add(cp1)
            'Policyholder information will automatically be populated by Client

            '7/31/2013 - policyholder2 not working yet; now working after updating node from Policyholder2 to PolicyHolder2 (also changed Policyholder to PolicyHolder)
            quickQuote.Policyholder2.Name.FirstName = "#2"
            quickQuote.Policyholder2.Name.LastName = "Home"
            quickQuote.Policyholder2.Name.SexId = "2"
            quickQuote.Policyholder2.Name.TypeId = "1"
            quickQuote.Policyholder2.Name.TaxNumber = "223456789"
            quickQuote.Policyholder2.Name.TaxTypeId = "1"
            quickQuote.Policyholder2.Name.EntityTypeId = "1" 'Individual
            quickQuote.Policyholder2.Name.DescriptionOfOperations = "PH2 test"
            quickQuote.Policyholder2.Name.BirthDate = "2/1/1982"
            quickQuote.Policyholder2.Name.DriversLicenseDate = "2/1/2013"
            quickQuote.Policyholder2.Name.DriversLicenseNumber = "2234-56-7890"
            quickQuote.Policyholder2.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Policyholder2.Address = quickQuote.Client.Address
            quickQuote.Policyholder2.Phones = quickQuote.Client.Phones
        End If

        'for tier override (should only be used for testing)
        quickQuote.TierTypeId = "1" 'Uniform (probably not needed)
        quickQuote.UseTierOverride = True
        quickQuote.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

        'policy level covs
        'quickQuote.PersonalLiabilityLimitId = "259" '25,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        'quickQuote.MedicalPaymentsLimitid = "166" '500 (Location #1 - Invalid Coverage F limit selected for Homeowners form.)
        quickQuote.PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        quickQuote.MedicalPaymentsLimitid = "170" '1,000

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Name = quickQuote.Client.Name
        l1.Name.NameAddressSourceId = "13" 'Location
        l1.Address = quickQuote.Client.Address
        l1.ProtectionClassId = "1" '1

        l1.Acreage = "2"
        l1.CondoRentedTypeId = "2" 'No
        l1.ConstructionTypeId = "1" 'Frame
        l1.DeductibleLimitId = "22" '500 (coverage)
        l1.WindHailDeductibleLimitId = "24" '1000 (coverage)
        l1.DayEmployees = False
        l1.DaytimeOccupancy = True
        l1.FamilyUnitsId = "1" '1
        l1.FireDepartmentDistanceId = "2" '5 Miles or Less
        l1.FireHydrantDistanceId = "4" 'Within 1,000 feet
        l1.FormTypeId = "1" 'HO-2 - Homeowners Broad Form
        l1.FoundationTypeId = "2" 'Closed
        l1.LastCostEstimatorDate = "12/1/2012"
        l1.MarketValue = "140000"
        l1.NumberOfFamiliesId = "1" '1
        l1.OccupancyCodeId = "1" 'Owner
        l1.PrimaryResidence = True
        l1.ProgramTypeId = "1" 'Homeowners
        l1.NumberOfApartments = "0"
        l1.NumberOfSolidFuelBurningUnits = "0"
        l1.RebuildCost = "150000"
        l1.Remarks = "test loc prop remarks"
        l1.SquareFeet = "4500"
        l1.StructureTypeId = "13" 'Conventionally Built
        l1.YearBuilt = "1990"

        'updates
        l1.Updates.WindowsUpdateYear = "1991"
        l1.Updates.ElectricUpdateYear = "1992"
        l1.Updates.ElectricUpdateTypeId = "2" 'Complete
        l1.Updates.ElectricCircuitBreaker = True
        l1.Updates.CentralHeatUpdateYear = "1993"
        l1.Updates.PlumbingUpdateYear = "1994"
        l1.Updates.PlumbingUpdateTypeId = "2" 'Complete
        l1.Updates.RoofUpdateYear = "1995"
        l1.Updates.SupplementalHeatUpdateYear = "1996"

        'coverages
        'l1.A_Dwelling_Limit = "1000" 'RE: Coverage A limit is less than $60,000.00
        'l1.A_Dwelling_LimitIncluded = "0"
        'l1.A_Dwelling_LimitIncreased = "1000"
        'l1.B_OtherStructures_Limit = "600"
        'l1.B_OtherStructures_LimitIncluded = "100"
        'l1.B_OtherStructures_LimitIncreased = "500"
        'l1.C_PersonalProperty_Limit = "900"
        'l1.C_PersonalProperty_LimitIncluded = "600"
        'l1.C_PersonalProperty_LimitIncreased = "300"
        'l1.D_LossOfUse_Limit = "200" 'not able to set for some reason (didn't work in UI either)
        'l1.D_LossOfUse_LimitIncluded = "0"
        'l1.D_LossOfUse_LimitIncreased = "0"
        l1.A_Dwelling_Limit = "60000"
        l1.A_Dwelling_LimitIncluded = "0"
        l1.A_Dwelling_LimitIncreased = "60000"
        l1.B_OtherStructures_Limit = "6500"
        l1.B_OtherStructures_LimitIncluded = "6000"
        l1.B_OtherStructures_LimitIncreased = "500"
        l1.C_PersonalProperty_Limit = "42300"
        l1.C_PersonalProperty_LimitIncluded = "42000"
        l1.C_PersonalProperty_LimitIncreased = "300"
        l1.D_LossOfUse_Limit = "0"
        l1.D_LossOfUse_LimitIncluded = "0"
        l1.D_LossOfUse_LimitIncreased = "0"

        l1.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        Dim ai As New QuickQuoteAdditionalInterest
        ai.Name.CommercialName1 = "Test Finance Company"
        ai.Name.TypeId = "2"
        ai.Name.TaxNumber = "123456789"
        ai.Name.TaxTypeId = "2"
        ai.Address.HouseNum = "123"
        ai.Address.StreetName = "Finance Drive"
        ai.Address.City = "Indianapolis"
        ai.Address.StateId = "16" 'automatically defaulted anyway
        ai.Address.Zip = "46227" 'should automatically append -0000
        ai.Address.County = "Marion"
        ai.Emails = New List(Of QuickQuoteEmail)
        Dim e As New QuickQuoteEmail
        e.Address = "test@test.com"
        e.TypeId = "2"
        ai.Emails.Add(e)
        ai.Phones = New List(Of QuickQuotePhone)
        Dim p As New QuickQuotePhone
        p.Number = "(317)111-2222"
        p.TypeId = "2"
        ai.Phones.Add(p)
        ai.ATIMA = False
        ai.GroupTypeId = "2" 'Finance Company
        ai.Description = "desc"
        ai.Other = "other"
        ai.TypeId = "42" 'First Mortgagee
        l1.AdditionalInterests.Add(ai)

        'credits and surcharges
        l1.MultiPolicyDiscount = True
        'l1.MatureHomeownerDiscount = True
        'l1.FireSmokeAlarm_LocalAlarmSystem = True
        l1.NewHomeDiscount = True
        'l1.FireSmokeAlarm_CentralStationAlarmSystem = True
        'l1.SelectMarketCredit = True
        'l1.FireSmokeAlarm_SmokeAlarm = True
        l1.BurglarAlarm_LocalAlarmSystem = True
        l1.SprinklerSystem_AllExcept = True
        'l1.BurglarAlarm_CentralStationAlarmSystem = True
        'l1.SprinklerSystem_AllIncluding = True
        l1.TrampolineSurcharge = True
        'l1.WoodOrFuelBurningApplianceSurcharge = True

        quickQuote.Locations.Add(l1)

        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            'okay
            Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

            'quickQuote = Nothing
            'strQQ = ""
            'ratedQQ = Nothing
            'strRatedQQ = ""
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
            'If err = "" Then

            '    'stuff for app gap

            '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
            '    If err = "" Then

            '    End If
            'End If
        Else
            'error
        End If
    End Sub
    Private Sub HOM_save_test_old2(ByVal qId As String) 'originally added 7/26/2013; used to test differences between old method and current one
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

            'quickQuote.Client.ClientId = "216844"

            quickQuote.QuoteDescription = "Test Desc"
            quickQuote.EffectiveDate = "7/20/2013"

            quickQuote.RiskGrade = "1"
            quickQuote.RiskGradeLookupId = "74"

            quickQuote.Client.Name.FirstName = "Don"
            quickQuote.Client.Name.LastName = "Home"
            quickQuote.Client.Name.SexId = "1"
            quickQuote.Client.Name.TypeId = "1"
            quickQuote.Client.Name.TaxNumber = "123456789"
            quickQuote.Client.Name.TaxTypeId = "1"
            quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            quickQuote.Client.Name.BirthDate = "1/1/1982"
            quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            quickQuote.Client.Name.DriversLicenseNumber = "1234-56-7890"
            quickQuote.Client.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Client.Address.HouseNum = "123"
            quickQuote.Client.Address.StreetName = "Test Street"
            quickQuote.Client.Address.City = "Indianapolis"
            quickQuote.Client.Address.Zip = "46227"
            quickQuote.Client.Address.County = "Marion"

            'real data (didn't work)
            'quickQuote.Client.Name.FirstName = "JUNIOR"
            'quickQuote.Client.Name.MiddleName = "W"
            'quickQuote.Client.Name.LastName = "BROWN"
            'quickQuote.Client.Name.SexId = "1"
            'quickQuote.Client.Name.TypeId = "1"
            'quickQuote.Client.Name.TaxNumber = "666648093"
            'quickQuote.Client.Name.TaxTypeId = "1"
            'quickQuote.Client.Name.EntityTypeId = "1" 'Individual
            'quickQuote.Client.Name.DescriptionOfOperations = "PH test"
            'quickQuote.Client.Name.BirthDate = "10/26/1956"
            'quickQuote.Client.Name.DriversLicenseDate = "1/1/2013"
            'quickQuote.Client.Name.DriversLicenseNumber = "8902605449"
            'quickQuote.Client.Name.MaritalStatusId = "1" '1=Single; 2=Married
            'quickQuote.Client.Address.HouseNum = "7025"
            'quickQuote.Client.Address.StreetName = "MARINERS LN"
            'quickQuote.Client.Address.ApartmentNumber = "B"
            'quickQuote.Client.Address.City = "INDIANAPOLIS"
            'quickQuote.Client.Address.Zip = "462141789"
            'quickQuote.Client.Address.County = "MARION"

            quickQuote.Client.Phones = New Generic.List(Of QuickQuotePhone)
            Dim cp1 As New QuickQuotePhone
            cp1.Number = "(312)555-5557"
            quickQuote.Client.Phones.Add(cp1)
            'Policyholder information will automatically be populated by Client

            '7/31/2013 - policyholder2 not working yet; now working after updating node from Policyholder2 to PolicyHolder2 (also changed Policyholder to PolicyHolder)
            quickQuote.Policyholder2.Name.FirstName = "#2"
            quickQuote.Policyholder2.Name.LastName = "Home"
            quickQuote.Policyholder2.Name.SexId = "2"
            quickQuote.Policyholder2.Name.TypeId = "1"
            quickQuote.Policyholder2.Name.TaxNumber = "223456789"
            quickQuote.Policyholder2.Name.TaxTypeId = "1"
            quickQuote.Policyholder2.Name.EntityTypeId = "1" 'Individual
            quickQuote.Policyholder2.Name.DescriptionOfOperations = "PH2 test"
            quickQuote.Policyholder2.Name.BirthDate = "2/1/1982"
            quickQuote.Policyholder2.Name.DriversLicenseDate = "2/1/2013"
            quickQuote.Policyholder2.Name.DriversLicenseNumber = "2234-56-7890"
            quickQuote.Policyholder2.Name.MaritalStatusId = "2" '1=Single; 2=Married
            quickQuote.Policyholder2.Address = quickQuote.Client.Address
            quickQuote.Policyholder2.Phones = quickQuote.Client.Phones

            'added for testing
            quickQuote.Applicants = New List(Of QuickQuoteApplicant)
            Dim a As New QuickQuoteApplicant
            a.Name = quickQuote.Client.Name 'copied from Client
            a.Name.NameAddressSourceId = "28" 'Applicant
            a.Address = quickQuote.Client.Address 'copied from Client
            a.BusinessStartedDate = "8/1/2012"
            a.EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
            a.Employer = "Test Employer"
            a.OccupationTypeId = "23" 'Professional
            a.PurchaseDate = "7/1/2012"
            a.RelationshipTypeId = "8" 'Policyholder
            With a.ResidenceInfo
                .CurrentResidenceTypeId = "4" 'Apartment
                .Owned = False

                .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                Dim d1 As New QuickQuoteResidenceInfoDetail
                d1.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d1.Address.StreetName &= " Prev1"
                d1.ResidenceInfoDetailTypeId = "1" 'Previous1
                d1.YearsAtPreviousAddress = "1"
                .ResidenceInfoDetails.Add(d1)
                Dim d2 As New QuickQuoteResidenceInfoDetail
                d2.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d2.Address.StreetName &= " Prev2"
                d2.ResidenceInfoDetailTypeId = "2" 'Previous2
                d2.YearsAtPreviousAddress = "3"
                .ResidenceInfoDetails.Add(d2)
                Dim d3 As New QuickQuoteResidenceInfoDetail
                d3.Address = qqHelper.CloneObject(a.Address) 'a.Address 'need to clone to prevent changes from overwriting the original object too
                d3.Address.StreetName &= " Prev3"
                d3.ResidenceInfoDetailTypeId = "3" 'Previous3
                d3.YearsAtPreviousAddress = "2"
                .ResidenceInfoDetails.Add(d3)

                .YearsAtCurrentAddress = "2"
            End With
            a.SelfEmployedInfo = "self employment info"
            a.SpouseEmployer = "N/A"
            a.SpouseOccupationTypeId = "30" 'Unemployed
            a.StandardIndustrialClassification = "sic"
            a.USCitizenTypeId = "1" 'Yes
            a.YearsWithCurrentEmployer = "8"
            a.YearsWithPriorEmployer = "2"
            quickQuote.Applicants.Add(a)
        End If

        'for tier override (should only be used for testing)
        quickQuote.TierTypeId = "1" 'Uniform (probably not needed)
        quickQuote.UseTierOverride = True
        quickQuote.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

        'policy level covs
        'quickQuote.PersonalLiabilityLimitId = "259" '25,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        'quickQuote.MedicalPaymentsLimitid = "166" '500 (Location #1 - Invalid Coverage F limit selected for Homeowners form.)
        quickQuote.PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
        quickQuote.MedicalPaymentsLimitid = "170" '1,000

        quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Name = quickQuote.Client.Name
        l1.Name.NameAddressSourceId = "13" 'Location
        l1.Address = quickQuote.Client.Address
        l1.ProtectionClassId = "1" '1

        l1.Acreage = "2"
        l1.CondoRentedTypeId = "2" 'No
        l1.ConstructionTypeId = "1" 'Frame
        l1.DeductibleLimitId = "22" '500 (coverage)
        l1.WindHailDeductibleLimitId = "24" '1000 (coverage)
        l1.DayEmployees = False
        l1.DaytimeOccupancy = True
        l1.FamilyUnitsId = "1" '1
        l1.FireDepartmentDistanceId = "2" '5 Miles or Less
        l1.FireHydrantDistanceId = "4" 'Within 1,000 feet
        l1.FormTypeId = "1" 'HO-2 - Homeowners Broad Form
        l1.FoundationTypeId = "2" 'Closed
        l1.LastCostEstimatorDate = "12/1/2012"
        l1.MarketValue = "140000"
        l1.NumberOfFamiliesId = "1" '1
        l1.OccupancyCodeId = "1" 'Owner
        l1.PrimaryResidence = True
        l1.ProgramTypeId = "1" 'Homeowners
        l1.NumberOfApartments = "0"
        l1.NumberOfSolidFuelBurningUnits = "0"
        l1.RebuildCost = "150000"
        l1.Remarks = "test loc prop remarks"
        l1.SquareFeet = "4500"
        l1.StructureTypeId = "13" 'Conventionally Built
        l1.YearBuilt = "1990"

        'updates
        l1.Updates.WindowsUpdateYear = "1991"
        l1.Updates.ElectricUpdateYear = "1992"
        l1.Updates.ElectricUpdateTypeId = "2" 'Complete
        l1.Updates.ElectricCircuitBreaker = True
        l1.Updates.CentralHeatUpdateYear = "1993"
        l1.Updates.PlumbingUpdateYear = "1994"
        l1.Updates.PlumbingUpdateTypeId = "2" 'Complete
        l1.Updates.RoofUpdateYear = "1995"
        l1.Updates.SupplementalHeatUpdateYear = "1996"

        'coverages
        'l1.A_Dwelling_Limit = "1000" 'RE: Coverage A limit is less than $60,000.00
        'l1.A_Dwelling_LimitIncluded = "0"
        'l1.A_Dwelling_LimitIncreased = "1000"
        'l1.B_OtherStructures_Limit = "600"
        'l1.B_OtherStructures_LimitIncluded = "100"
        'l1.B_OtherStructures_LimitIncreased = "500"
        'l1.C_PersonalProperty_Limit = "900"
        'l1.C_PersonalProperty_LimitIncluded = "600"
        'l1.C_PersonalProperty_LimitIncreased = "300"
        'l1.D_LossOfUse_Limit = "200" 'not able to set for some reason (didn't work in UI either)
        'l1.D_LossOfUse_LimitIncluded = "0"
        'l1.D_LossOfUse_LimitIncreased = "0"
        l1.A_Dwelling_Limit = "60000"
        l1.A_Dwelling_LimitIncluded = "0"
        l1.A_Dwelling_LimitIncreased = "60000"
        l1.B_OtherStructures_Limit = "6500"
        l1.B_OtherStructures_LimitIncluded = "6000"
        l1.B_OtherStructures_LimitIncreased = "500"
        l1.C_PersonalProperty_Limit = "42300"
        l1.C_PersonalProperty_LimitIncluded = "42000"
        l1.C_PersonalProperty_LimitIncreased = "300"
        l1.D_LossOfUse_Limit = "0"
        l1.D_LossOfUse_LimitIncluded = "0"
        l1.D_LossOfUse_LimitIncreased = "0"

        l1.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        Dim ai As New QuickQuoteAdditionalInterest
        ai.Name.CommercialName1 = "Test Finance Company"
        ai.Name.TypeId = "2"
        ai.Name.TaxNumber = "123456789"
        ai.Name.TaxTypeId = "2"
        ai.Address.HouseNum = "123"
        ai.Address.StreetName = "Finance Drive"
        ai.Address.City = "Indianapolis"
        ai.Address.StateId = "16" 'automatically defaulted anyway
        ai.Address.Zip = "46227" 'should automatically append -0000
        ai.Address.County = "Marion"
        ai.Emails = New List(Of QuickQuoteEmail)
        Dim e As New QuickQuoteEmail
        e.Address = "test@test.com"
        e.TypeId = "2"
        ai.Emails.Add(e)
        ai.Phones = New List(Of QuickQuotePhone)
        Dim p As New QuickQuotePhone
        p.Number = "(317)111-2222"
        p.TypeId = "2"
        ai.Phones.Add(p)
        ai.ATIMA = False
        ai.GroupTypeId = "2" 'Finance Company
        ai.Description = "desc"
        ai.Other = "other"
        ai.TypeId = "42" 'First Mortgagee
        l1.AdditionalInterests.Add(ai)

        'credits and surcharges
        l1.MultiPolicyDiscount = True
        'l1.MatureHomeownerDiscount = True
        'l1.FireSmokeAlarm_LocalAlarmSystem = True
        l1.NewHomeDiscount = True
        'l1.FireSmokeAlarm_CentralStationAlarmSystem = True
        'l1.SelectMarketCredit = True
        'l1.FireSmokeAlarm_SmokeAlarm = True
        l1.BurglarAlarm_LocalAlarmSystem = True
        l1.SprinklerSystem_AllExcept = True
        'l1.BurglarAlarm_CentralStationAlarmSystem = True
        'l1.SprinklerSystem_AllIncluding = True
        l1.TrampolineSurcharge = True
        'l1.WoodOrFuelBurningApplianceSurcharge = True

        'added for testing
        l1.Exclusions = New List(Of QuickQuoteExclusion)
        Dim e1 As New QuickQuoteExclusion
        e1.ExclusionTypeId = "1" 'Exclusion
        e1.Description = "exc desc"
        l1.Exclusions.Add(e1)
        Dim e2 As New QuickQuoteExclusion
        e2.ExclusionTypeId = "3" 'Restriction
        e2.Description = "rest desc"
        l1.Exclusions.Add(e2)
        Dim e3 As New QuickQuoteExclusion
        e3.ExclusionTypeId = "4" 'Comment
        e3.Description = "comm desc"
        l1.Exclusions.Add(e3)

        'added for testing
        l1.InlandMarines = New List(Of QuickQuoteInlandMarine)
        Dim im As New QuickQuoteInlandMarine
        im.ArtistName = "BikeArtist"
        im.ConsentToRateCoverageEliminated = "cov eliminated"
        im.ConsentToRateCoverageInvolved = "cov involved"
        'im.Coverage'CoverageCodeId 70077-Inland_Marine_Bicycles (CoverageLimitId 18 - Deductible 100; ManualLimitAmount/ManualLimitIncreased 500.00; ManualLimitIncluded 0
        'im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
        'updated 12/5/2013 to use coverage code desc instead of caption
        im.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
        im.DeductibleLimitId = 18 '100
        im.IncreasedLimit = "500.00"
        im.Description = "IM Bicycles Desc"
        im.MakeBrand = "BikeMake"
        im.Model = "BikeModel"
        im.RateInfoAmount = "3.00"
        im.RateInfoDescription = "rate info desc"
        im.RateInformationTypeId = "2" 'Consent to Rate
        im.SerialNumber = "SERIALNUM1"
        im.StatedAmount = True
        im.StorageLocation = "storage loc"
        im.Year = "2010"
        l1.InlandMarines.Add(im)

        quickQuote.Locations.Add(l1)

        'added for testing; seems to fail when added on initial rate and then re-rated; okay when added at any point but fails when re-rated afterwards
        'quickQuote.Operators = Nothing'test to reset back to nothing
        'quickQuote.Operators = New List(Of QuickQuoteOperator)
        'Dim op1 As New QuickQuoteOperator
        'op1.Name = qqHelper.CloneObject(quickQuote.Client.Name) 'changed to Client; Policyholder wasn't coming thru on 1st attempt (since it's not set until saved)
        'op1.Name.NameAddressSourceId = "60"
        'op1.Address = qqHelper.CloneObject(quickQuote.Client.Address)
        'op1.Emails = qqHelper.CloneObject(quickQuote.Client.Emails)
        'op1.Phones = qqHelper.CloneObject(quickQuote.Client.Phones)
        'op1.RelationshipTypeId = "8" 'Policyholder
        'quickQuote.Operators.Add(op1)
        'If quickQuote.Policyholder2 IsNot Nothing AndAlso quickQuote.Policyholder2.HasData = True Then
        '    Dim op2 As New QuickQuoteOperator
        '    op2.Name = qqHelper.CloneObject(quickQuote.Policyholder2.Name)
        '    op2.Name.NameAddressSourceId = "60"
        '    op2.Address = qqHelper.CloneObject(quickQuote.Policyholder2.Address)
        '    op2.Emails = qqHelper.CloneObject(quickQuote.Policyholder2.Emails)
        '    op2.Phones = qqHelper.CloneObject(quickQuote.Policyholder2.Phones)
        '    op2.RelationshipTypeId = "5" 'Policyholder #2
        '    quickQuote.Operators.Add(op2)
        'End If

        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            'okay
            Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

            'quickQuote = Nothing
            'strQQ = ""
            'ratedQQ = Nothing
            'strRatedQQ = ""
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
            'If err = "" Then

            '    'stuff for app gap

            '    qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err)
            '    If err = "" Then

            '    End If
            'End If
        Else
            'error
        End If
    End Sub
    'added 1/26/2015 for CIM
    Private Sub CIM_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote
                .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'Policyholder information will automatically be populated by Client
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "IM"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "IM Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "IM"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients()

                '.CopyPolicyholdersToApplicants()
                '.CopyPolicyholdersToOperators()
                
            End With
        End If

        With quickQuote
            .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            If .CanUseApplicantNumForApplicantReconciliation = False Then

            Else
                'add logic here to change existing applicant(s)

            End If
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)

            End If
            If .CanUseLocationNumForLocationReconciliation = False Then

            Else
                'add logic here to change existing location(s)

            End If
            If .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False Then

            Else
                'add logic here to change existing scheduled coverage(s)

            End If

            'policy level covs
            .ContractorsEquipmentScheduleCoinsuranceTypeId = "5" '80%
            .ContractorsEquipmentScheduleDeductibleId = "9" '8=500; 9=1,000
            .ContractorsEquipmentScheduleRate = "1.250"
            '.ContractorsEquipmentScheduleCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1

            'moved from below 2/10/2015
            .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False 'so DiamondNums won't be used for reconciliation
            .ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage)
            Dim ce As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce
                '.AdditionalInterests
                .Description = "CE #1"
                .ManualLimitAmount = "1500"
                .ManufacturerName = "CE #1 ManName"
                .Model = "CE #1 Model"
                .SerialNumber = "CE #1 Serial"
                .ValuationMethodTypeId = "2" 'Actual Cash Value
                .Year = "2010"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce)
            Dim ce2 As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce2
                '.AdditionalInterests
                .Description = "CE #2"
                .ManualLimitAmount = "2400"
                .ManufacturerName = "CE #2 ManName"
                .Model = "CE #2 Model"
                .SerialNumber = "CE #2 Serial"
                .ValuationMethodTypeId = "1" 'Replacement Cost
                .Year = "2012"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce2)

            'added 1/27/2015
            .ContractorsEquipmentLeasedRentedFromOthersLimit = "20000"
            '.ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = "8" '25,000; not sure where this shows
            .ContractorsEquipmentLeasedRentedFromOthersRate = "1.250"
            .ContractorsToolsEquipmentRented = "" 'added 4/1/2015 to clear out wrong coverage that was inadvertently pulled in on Edit since the same CASE was handling the BOP cov (21005) and the CIM cov (21421)

            'added 1/27/2015; currently gets stopped at quote rate: {(R-632) Inland Marine Contractors Equipment Rental Reimbursement&nbsp; requires Underwriting Approval., Error}
            '.ContractorsEquipmentRentalReimbursementLimit = "10000"
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentRentalReimbursementRate = "1.750"
            'code below will remove cov
            .ContractorsEquipmentRentalReimbursementLimit = ""
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentRentalReimbursementRate = ""

            'added 1/27/2015
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = "5000"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = "2.500"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = "8" '500
            '.ContractorsEquipmentSmallToolsEndorsementPerToolLimit = "1000"
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "1" 'per 100
            'code below will remove cov
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = ""
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = ""
            .ContractorsEquipmentSmallToolsEndorsementPerToolLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1

            'added 1/27/2015; currently gets stopped at quote rate if small tools entered for CE: {(R-636) Cannot add Small Tools Floater coverage if they have already entered this same coverage in the Contractor’s Equipment coverage area, Error}
            .SmallToolsLimit = "1000"
            '.SmallToolsCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsRate = "2.500"
            .SmallToolsDeductibleId = "8" '500
            .SmallToolsAnyOneLossCatastropheLimit = "5000"
            '.SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim ai1 As New QuickQuoteAdditionalInterest
            With ai1
                .ListId = "178757" 'commented for testing 6/16/2015
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.50"
                .LoanAmount = "1200.00"
                .LoanNumber = "loan1"
                .Other = "other"

                With .Address
                    .City = "INDIANAPOLIS"
                    .HouseNum = "2564"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "N MAIN AVE"
                    .Zip = "46219-0000"
                End With
                With .Name
                    .CommercialName1 = "TESTING ADD AI"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai1)
            Dim ai2 As New QuickQuoteAdditionalInterest
            With ai2
                .ListId = "178699" 'commented for testing 6/16/2015
                .ATIMA = True
                .TypeId = "66" 'Loss Payable - Lenders Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = True
                .InterestInProperty = "4.00"
                .LoanAmount = "700.00"
                .LoanNumber = "loan2"
                .Other = "other"

                With .Address
                    .City = "INDY"
                    .HouseNum = "123"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "MAIN"
                    .Zip = "46032-0000"
                End With
                With .Name
                    .FirstName = "TEST"
                    .LastName = "TEST"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "1"
                    .TypeId = "1"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai2)

            'added 1/28/2015
            .InstallationBlanketLimit = "5000" 'won't use this if using InstallationScheduledLocations and summing up those limits in a different cov; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            '.InstallationBlanketLimit = ""
            .InstallationBlanketCoinsuranceTypeId = "5" '80%
            .InstallationBlanketDeductibleId = "8" '500
            .InstallationBlanketRate = "0.750"
            '.InstallationBlanketCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationBlanketAnyOneLossCatastropheLimit = "15000"
            '.InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim iAI As New QuickQuoteAdditionalInterest
            With iAI
                .ListId = "3735" 'commented for testing 6/16/2015
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.00"
                .LoanAmount = "1600.00"
                .LoanNumber = "loan/acct"
                .Other = "other"

                With .Address
                    .City = "Tipton"
                    .HouseNum = "852"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "Main St"
                    .Zip = "46072-0000"
                End With
                With .Name
                    .CommercialName1 = "Test Lienholder for Regression"
                    .CommercialName2 = "test"
                    .TaxNumber = "123456789"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .InstallationAdditionalInterests.Add(iAI)
            .InstallationScheduledLocations = New List(Of QuickQuoteInstallationScheduledLocation) 'won't use this if using InstallationBlanketLimit; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            Dim sl As New QuickQuoteInstallationScheduledLocation
            With sl
                .Limit = "200"
                .AddressInfo = "Test Add1"
            End With
            .InstallationScheduledLocations.Add(sl)
            Dim sl2 As New QuickQuoteInstallationScheduledLocation
            With sl2
                .Limit = "900"
                .AddressInfo = "Test Add2"
            End With
            .InstallationScheduledLocations.Add(sl2)
            .InstallationScheduledLocations = Nothing 'added 6/18/2015 for testing Blanket
            'added 2/2/2015
            .InstallationAdditionalDebrisRemovalExpenseLimit = "6500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationStorageLocationsLimit = "6000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTransitLimit = "6200" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTestingLimit = "6100" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupLimit = "1000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupDeductible = "100"
            .InstallationSewerBackupCatastropheLimit = "2000"
            'added 2/3/2015
            .InstallationEarthquakeLimit = "1500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationEarthquakeDeductible = "200"
            .InstallationEarthquakeCatastropheLimit = "3000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            'added 2/9/2015
            .BusinessPersonalPropertyLimit = "25000" 'may also need to set Coverage.CoverageBasisTypeId to 1; note: on Installation Floater Coverage Extensions screen, but may not be specific to Installation
            .ScheduledPropertyAdditionalInterests = Nothing 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ScheduledPropertyCoinsuranceTypeId = "5" '80%
            .ScheduledPropertyNamedPerils = True
            .ScheduledPropertyRate = "1.750"
            .ScheduledPropertyDeductibleId = "8" '500
            .ScheduledPropertyItems = New List(Of QuickQuoteScheduledPropertyItem)
            Dim sp1 As New QuickQuoteScheduledPropertyItem
            With sp1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000"
                .Description = "Test Scheduled Property Item #1"
            End With
            .ScheduledPropertyItems.Add(sp1)
            'added 2/10/2015
            .ComputerCoinsuranceTypeId = "5" '80%; may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerExcludeEarthquake = True
            .ComputerValuationMethodTypeId = "2" 'Actual Cash Value
            .ComputerAdditionalInterests = Nothing
            .ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ComputerAllPerilsDeductibleId = "8" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage
            .ComputerEarthquakeVolcanicEruptionDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            .ComputerMechanicalBreakdownDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            'added 2/19/2015
            .BuildersRiskDeductibleId = "15" '2,500; may also need to set Coverage.CoverageBasisTypeId to 1
            .BuildersRiskRate = "0.900"
            .BuildersRiskAdditionalInterests = Nothing
            .BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .BuildersRiskScheduledLocations = New List(Of QuickQuoteBuildersRiskScheduledLocation)
            Dim sl1 As New QuickQuoteBuildersRiskScheduledLocation
            With sl1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000.00"
                .AddressInfo = "123 MAIN ST, CARMEL BY THE SEA, IN 46033"
            End With
            .BuildersRiskScheduledLocations.Add(sl1)
            'added 3/16/2016
            'may also need to set Coverage.CoverageBasisTypeId to 1
            .FineArtsDeductibleCategoryTypeId = "3" 'All Perils
            .FineArtsRate = "2.300"
            .FineArtsDeductibleId = "8" '500
            .FineArtsAdditionalInterests = Nothing
            .FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .FineArtsBreakageMarringOrScratching = False 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching
            'added 3/17/2015
            'may also need to set Coverage.CoverageBasisTypeId to 1 for owner's cargo covs
            .OwnersCargoAnyOneOwnedVehicleLimit = "22000"
            .OwnersCargoAnyOneOwnedVehicleDeductibleId = "8" 'static data; 500
            .OwnersCargoAnyOneOwnedVehicleRate = "2.300"
            .OwnersCargoAnyOneOwnedVehicleDescription = "owners cargo prop desc"
            .OwnersCargoAnyOneOwnedVehicleAdditionalInterests = Nothing
            .OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .OwnersCargoAnyOneOwnedVehicleLoadingUnloading = True
            .OwnersCargoAnyOneOwnedVehicleNamedPerils = True
            .OwnersCargoCatastropheLimit = "40000"
            'may also need to set Coverage.CoverageBasisTypeId to 1 for transportation covs
            .TransportationCatastropheLimit = "5000"
            .TransportationCatastropheDeductibleId = "8" '500; static data
            .TransportationCatastropheDescription = "Trans prop desc"
            .TransportationCatastropheAdditionalInterests = Nothing
            .TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .TransportationCatastropheLoadingUnloading = True
            .TransportationCatastropheNamedPerils = True
            'added 3/25/2015
            .TransportationAnyOneOwnedVehicleLimit = "12000" 'note: cov also has CoverageBasisTypeId set to 1; fyi this value may not make sense since cat limit is lower
            .TransportationAnyOneOwnedVehicleNumberOfVehicles = "2" 'CoverageDetail
            .TransportationAnyOneOwnedVehicleRate = "3.300"
            .MotorTruckCargoScheduledVehicles = New List(Of QuickQuoteScheduledVehicle)
            Dim sv1 As New QuickQuoteScheduledVehicle
            With sv1
                .Make = "Chevy"
                .Model = "Camaro"
                .VIN = "1234"
                .Year = "1999"
                .Limit = "2000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv1)
            Dim sv2 As New QuickQuoteScheduledVehicle
            With sv2
                .Make = "Chevy"
                .Model = "Beretta"
                .VIN = "8888"
                .Year = "1990"
                .Limit = "1000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv2)
            .MotorTruckCargoScheduledVehicleAdditionalInterests = Nothing
            .MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .MotorTruckCargoScheduledVehicleLoadingUnloading = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleNamedPerils = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleOperatingRadius = "55" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleRate = "2.300" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleDeductibleId = "8" 'static data; 500
            .MotorTruckCargoScheduledVehicleDescription = "prop desc"
            .MotorTruckCargoScheduledVehicleCatastropheLimit = "5000"
            'added 3/26/2015
            .SignsAdditionalInterests = Nothing
            .SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .SignsMaximumDeductible = "500" 'CoverageDetail
            .SignsMinimumDeductible = "50" 'CoverageDetail
            .SignsValuationMethodTypeId = "2" 'Actual Cash Value
            .SignsDeductibleId = "34" '5%
            .SignsAnyOneLossCatastropheLimit = "5000"

            'added 2/10/2015
            If .Locations Is Nothing Then
                .Locations = New List(Of QuickQuoteLocation)
            End If
            If .Locations.Count = 0 Then
                Dim l As New QuickQuoteLocation
                .Locations.Add(l)
            End If
            With .Locations(0)
                .Address = qqHelper.CloneObject(quickQuote.Policyholder.Address)

                If .Buildings Is Nothing Then
                    .Buildings = New List(Of QuickQuoteBuilding)
                End If
                If .Buildings.Count = 0 Then
                    Dim b As New QuickQuoteBuilding
                    .Buildings.Add(b)
                End If
                With .Buildings(0)
                    .YearBuilt = "1995"
                    .SquareFeet = "1800"
                    .ConstructionId = "2" 'Frame; added 4/1/2015 to get past validation

                    .ComputerHardwareLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerHardwareRate = "0.500"
                    .ComputerProgramsApplicationsAndMediaLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerProgramsApplicationsAndMediaRate = "0.450"
                    .ComputerBusinessIncomeLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerBusinessIncomeRate = "0.400"

                    'added 3/16/2015
                    .FineArtsScheduledItems = New List(Of QuickQuoteFineArtsScheduledItem)
                    Dim fa1 As New QuickQuoteFineArtsScheduledItem
                    With fa1
                        .Description = "Fine Arts #1"
                        .Limit = "2000"
                    End With
                    .FineArtsScheduledItems.Add(fa1)
                    Dim fa2 As New QuickQuoteFineArtsScheduledItem
                    With fa2
                        .Description = "Fine Arts #2"
                        .Limit = "3500"
                    End With
                    .FineArtsScheduledItems.Add(fa2)

                    'added 3/26/2015
                    .ScheduledSigns = New List(Of QuickQuoteScheduledSign)
                    Dim ss1 As New QuickQuoteScheduledSign
                    With ss1
                        .Limit = "1000"
                        .IsIndoor = True
                        .Description = "Scheduled sign #1"
                    End With
                    .ScheduledSigns.Add(ss1)
                    Dim ss2 As New QuickQuoteScheduledSign
                    With ss2
                        .Limit = "900"
                        .IsIndoor = False
                        .Description = "Scheduled sign #2"
                    End With
                    .ScheduledSigns.Add(ss2)
                    .UnscheduledSignsLimit = "2000"

                End With
            End With

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    'added 1/27/2015 for Farm
    Private Sub Farm_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote
                .LobType = QuickQuoteObject.QuickQuoteLobType.Farm

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'Policyholder information will automatically be populated by Client
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Farm"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "Farm Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "Farm"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients()

                .CopyPolicyholdersToApplicants() 'un-commented 4/28/2015
                '.CopyPolicyholdersToOperators()

            End With
        End If

        With quickQuote
            .LobType = QuickQuoteObject.QuickQuoteLobType.Farm
            .EffectiveDate = Date.Today.ToString
            '.EffectiveDate = "4/20/2015"

            'added 4/28/2015
            .ProgramTypeId = "6" '6=Farmowners; 7=Select-O-Matic; 8=Farm Liability; 4/28/2015 note: set in Diamond UI on 1st location... UI defaults subsequent locations to have the same program type... no option to change from UI... probably why it's also at the policy level

            If .Applicants Is Nothing OrElse .Applicants.Count = 0 Then 'added 4/28/2015
                .CopyPolicyholdersToApplicants()
            End If

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'policy level covs/options
            .AggregateLiabilityIncrementTypeId = 1 '2
            .EmployeesFullTime = "2"
            .EmployeesPartTime1To40Days = "2"
            .EmployeesPartTime41To179Days = "2"
            .EntityTypeId = 2 'Partnership
            .LiabilityOptionId = "1" 'Farm Personal; 2 = Farm Commercial
            '.LimitedPerilsCategoryTypeId = "3" 'Both; removed 4/28/2015... only available w/ Select-o-matic
            .LimitedPerilsCategoryTypeId = ""
            'added 4/28/2015
            .OccurrenceLiabilityLimitId = "10" '100,000; note: setting this will also set Aggregate Liability cov (397) behind the scenes... ManualLimitAmount = double Occurrence Liability Limit
            .MedicalPaymentsLimitid = "14" '4,000; note: may create separate property since this one is already being used for CAP and HOM
            '.MedicalPaymentsLimitid = ""
            'added 4/30/2015
            .Farm_F_and_G_DeductibleLimitId = "22" '500
            '.Farm_F_and_G_DeductibleLimitId = ""
            '.HasFarmEquipmentBreakdown = True '{At least one location must be listed with form FO-03 or FO 00 05 when Equipment Breakdown is selected., Error}
            .HasFarmEquipmentBreakdown = False
            .HasFarmExtender = True
            '.HasFarmExtender = False
            .FarmAllStarLimitId = "7" '10,000
            '.FarmAllStarLimitId = ""
            'added 5/5/2015
            .HasFarmEmployersLiability = True
            '.HasFarmEmployersLiability = False
            .FarmFireLegalLiabilityLimitId = "9" '50,000
            '.FarmFireLegalLiabilityLimitId = ""
            '.HasFarmPersonalAndAdvertisingInjury = True '{Personal and Advertising Injury is only available on Farm Commercial., Error}
            .HasFarmPersonalAndAdvertisingInjury = False
            .FarmContractGrowersCareCustodyControlLimitId = "34" '500,000
            .FarmContractGrowersCareCustodyControlDescription = "test contract growers desc"
            '.FarmContractGrowersCareCustodyControlLimitId = ""
            '.FarmContractGrowersCareCustodyControlDescription = ""
            '.HasFarmExclusionOfProductsCompletedWork = True '{Exclusion of Products/Completed Work (GL615) is not available for selected Liabiltiy Option., Error}
            .HasFarmExclusionOfProductsCompletedWork = False
            .HasEPLI = False 'added 5/13/2015 to remove this on subsequent rates... Diamond automatically adds it on submission but then gets a rating error that says it's not valid

            'added 5/11/2015
            'Farm Property --> Coverage F in Diamond UI
            .ScheduledPersonalPropertyCoverages = New List(Of QuickQuoteScheduledPersonalPropertyCoverage)
            Dim sppc1 As New QuickQuoteScheduledPersonalPropertyCoverage
            With sppc1
                .CoverageType = QuickQuoteScheduledPersonalPropertyCoverage.QuickQuoteScheduledPersonalPropertyCoverageType.Farm_F_Hay_in_the_Open
                .IncreasedLimit = "2000"
                .Description = "test hay in the open w/ EQ; 2 peak season covs"
                .HasEarthquakeCoverage = True
                .PeakSeasons = New List(Of QuickQuotePeakSeason)
                Dim ps1 As New QuickQuotePeakSeason
                With ps1
                    .IncreasedLimit = "500"
                    .Description = "peak season 1"
                    .EffectiveDate = "5/7/2015"
                    .ExpirationDate = "6/7/2015"
                End With
                .PeakSeasons.Add(ps1)
                Dim ps2 As New QuickQuotePeakSeason
                With ps2
                    .IncreasedLimit = "150"
                    .Description = "peak season 2"
                    .EffectiveDate = "7/1/2015"
                    .ExpirationDate = "9/1/2015"
                End With
                .PeakSeasons.Add(ps2)
            End With
            .ScheduledPersonalPropertyCoverages.Add(sppc1)
            Dim sppc2 As New QuickQuoteScheduledPersonalPropertyCoverage
            With sppc2
                .CoverageType = QuickQuoteScheduledPersonalPropertyCoverage.QuickQuoteScheduledPersonalPropertyCoverageType.ATV
                .IncreasedLimit = "1000"
                .Description = "test ATV w/o EQ; 0 peak season"
            End With
            .ScheduledPersonalPropertyCoverages.Add(sppc2)
            Dim sppc3 As New QuickQuoteScheduledPersonalPropertyCoverage
            With sppc3
                .CoverageType = QuickQuoteScheduledPersonalPropertyCoverage.QuickQuoteScheduledPersonalPropertyCoverageType.Livestock
                .IncreasedLimit = "4000"
                .Description = "test livestock... needed to add livestock/sheep optional covs"
            End With
            .ScheduledPersonalPropertyCoverages.Add(sppc3)

            'added 5/12/2015
            'Farm Property --> Coverage G in Diamond UI
            .UnscheduledPersonalPropertyCoverage = New QuickQuoteUnscheduledPersonalPropertyCoverage
            With .UnscheduledPersonalPropertyCoverage
                .IncreasedLimit = "15000" '{Minimum Limit for Cov G Blanket is 15,000., Error}; originally tested w/ 5000
                .Description = "cov G; 2 exclusions; 2 peak season"
                .HasEarthquakeCoverage = True
                .IncludeTheft = True
                .Exclusions = New List(Of QuickQuoteExclusion)
                Dim e1 As New QuickQuoteExclusion
                With e1
                    .ExclusionTypeId = "2" 'Exclusion Cov G
                    .Description = "test exclusion cov g"
                End With
                .Exclusions.Add(e1)
                Dim e2 As New QuickQuoteExclusion
                With e2
                    .ExclusionTypeId = "3" 'Restriction
                    .Description = "test restriction"
                End With
                .Exclusions.Add(e2)
                .PeakSeasons = New List(Of QuickQuotePeakSeason)
                Dim ps1 As New QuickQuotePeakSeason
                With ps1
                    .IncreasedLimit = "350"
                    .Description = "Cov G peak season 1"
                    .EffectiveDate = "5/11/2015"
                    .ExpirationDate = "6/22/2015"
                End With
                .PeakSeasons.Add(ps1)
                Dim ps2 As New QuickQuotePeakSeason
                With ps2
                    .IncreasedLimit = "1200"
                    .Description = "cov G peak season 2"
                    .EffectiveDate = "7/1/2015"
                    .ExpirationDate = "10/1/2015"
                End With
                .PeakSeasons.Add(ps2)
            End With

            'Farm Property --> F and G Add'l/Opt. Coverages in Diamond UI
            .OptionalCoverages = New List(Of QuickQuoteOptionalCoverage)
            Dim oc1 As New QuickQuoteOptionalCoverage
            With oc1
                .CoverageType = QuickQuoteOptionalCoverage.QuickQuoteOptionalCoverageType.Farm_Suffocation_of_Livestock 'requires livestock scheduled personal property cov
                .IncreasedLimit = "3000"
                .OriginalCost = "4500"
                .Description = "test suffocation of livestock"
            End With
            .OptionalCoverages.Add(oc1)
            Dim oc2 As New QuickQuoteOptionalCoverage
            With oc2
                .CoverageType = QuickQuoteOptionalCoverage.QuickQuoteOptionalCoverageType.Farm_Sheep 'requires livestock scheduled personal property cov
                .IncreasedLimit = "1600"
                .OriginalCost = "2400"
                .Description = "sheep additional perils"
            End With
            .OptionalCoverages.Add(oc2)
            Dim oc3 As New QuickQuoteOptionalCoverage
            With oc3
                .CoverageType = QuickQuoteOptionalCoverage.QuickQuoteOptionalCoverageType.Farm_Property_in_Transit
                .IncludedLimit = "5000" 'default in Diamond UI; no increase available
                .OriginalCost = "3200"
                .Description = "prop in transit; 5000 included... no increase available"
            End With
            .OptionalCoverages.Add(oc3)

            'Farm Property --> Farm Incidental Limits in Diamond UI
            .FarmIncidentalLimits = New List(Of QuickQuoteFarmIncidentalLimit)
            Dim fil1 As New QuickQuoteFarmIncidentalLimit
            With fil1
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Farm_Records
                .IncludedLimit = "2500"
                .IncreasedLimit = "500"
                .TotalLimit = "3000"
            End With
            .FarmIncidentalLimits.Add(fil1)
            Dim fil2 As New QuickQuoteFarmIncidentalLimit
            With fil2
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Pollutant_Clean_Up_and_Removal
                .IncludedLimit = "10000"
                .IncreasedLimitId = "48" '15,000
                .TotalLimit = "25000"
            End With
            .FarmIncidentalLimits.Add(fil2)
            Dim fil3 As New QuickQuoteFarmIncidentalLimit
            With fil3
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Property_in_Care_Custody_or_Control_of_Common_Carrier
                .IncludedLimit = "1500"
                .IncreasedLimit = "600"
                .TotalLimit = "2100"
            End With
            .FarmIncidentalLimits.Add(fil3)
            Dim fil4 As New QuickQuoteFarmIncidentalLimit
            With fil4
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Glass_Breakage_in_Cabs
                .IncludedLimit = "500"
                .IncreasedLimit = "150"
                .TotalLimit = "650"
            End With
            .FarmIncidentalLimits.Add(fil4)
            Dim fil5 As New QuickQuoteFarmIncidentalLimit
            With fil5
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Signs
                .IncludedLimit = "500"
                .IncreasedLimit = "100"
                .TotalLimit = "600"
            End With
            .FarmIncidentalLimits.Add(fil5)
            Dim fil6 As New QuickQuoteFarmIncidentalLimit
            With fil6
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Signs_Electric
                .IncludedLimit = "500"
                .IncreasedLimit = "200"
                .TotalLimit = "700"
            End With
            .FarmIncidentalLimits.Add(fil6)
            Dim fil7 As New QuickQuoteFarmIncidentalLimit
            With fil7
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Fire_Department_Service_Charge
                .IncludedLimit = "500"
                .IncreasedLimit = "50"
                .TotalLimit = "550"
            End With
            .FarmIncidentalLimits.Add(fil7)
            Dim fil8 As New QuickQuoteFarmIncidentalLimit
            With fil8
                .CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Debris_Removal
                'nothing else is editable in the Diamond UI; our logic will set Checkbox = true on the coverage
            End With
            .FarmIncidentalLimits.Add(fil8)

            If .CanUseApplicantNumForApplicantReconciliation = False Then

            Else
                'add logic here to change existing applicant(s)

            End If
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)

            End If
            If .CanUseLocationNumForLocationReconciliation = False Then

            Else
                'add logic here to change existing location(s)

            End If
            If .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False Then

            Else
                'add logic here to change existing scheduled coverage(s)

            End If

            'added 4/28/2015
            If .Locations Is Nothing Then
                .Locations = New List(Of QuickQuoteLocation)
            End If
            If .Locations.Count = 0 Then
                .Locations.Add(New QuickQuoteLocation)
            End If
            With .Locations(0)
                .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                .ProtectionClassId = "10" '10; 4/28/2015 note: UI only shows a selection for 10
                .NumberOfFamiliesId = "1" '1
                .DwellingTypeId = "22" '22=Type 1; 23=Type 2
                .YearBuilt = "1990"
                .ProgramTypeId = "6" '6=Farmowners; 7=Select-O-Matic; 8=Farm Liability; 4/28/2015 note: UI defaults subsequent locations to have the same program type... no option to change from UI... probably why it's also at the policy level
                .FormTypeId = "14" '14=FO-1 Dwelling Coverage - Basic Form; 15=FO-2 Dwelling Coverage - Broad Form
                .DeductibleLimitId = "22" '22=500; 286=1,000
                .PrimaryResidence = True
                'added 6/24/2015
                .AcreageOnly = False
                .LegalDescription = ""

                If .Acreages Is Nothing Then
                    .Acreages = New List(Of QuickQuoteAcreage)
                End If
                If .Acreages.Count = 0 Then
                    .Acreages.Add(New QuickQuoteAcreage)
                End If
                With .Acreages(0)
                    .Acreage = "3"
                    .County = "Hamilton"
                    .Description = "primary location acreage"
                    .LocationAcreageTypeId = "1" '-1=N/A; 0=N/A; 1=Primary Location; 2=Additional Location; 3=Acreage Only
                    .Range = "range"
                    .Section = "sect"
                    .StateId = "16"
                    .TownshipCodeTypeId = "156" 'see Diamond's TownshipCodeType table; 156=Hamilton; 291=Perry
                    .Twp = "twp"
                End With

                .FarmTypeBees = False
                .FarmTypeDairy = False
                .FarmTypeFeedLot = False
                .FarmTypeFieldCrops = False
                .FarmTypeFlowers = False
                .FarmTypeFruits = False
                .FarmTypeFurbearingAnimals = False
                .FarmTypeGreenhouses = False
                .FarmTypeHobby = False 'note: requires Hobby Farm Credit when True
                .FarmTypeHorse = False
                .FarmTypeLivestock = False
                .FarmTypeMushrooms = False
                .FarmTypeNurseryStock = False
                .FarmTypeNuts = False
                .FarmTypeOtherDescription = "other"
                .FarmTypePoultry = False
                .FarmTypeSod = False
                .FarmTypeSwine = False
                .FarmTypeTobacco = True
                .FarmTypeTurkey = False
                .FarmTypeVegetables = False
                .FarmTypeVineyards = False
                .FarmTypeWorms = False

                'added 5/20/2015 to clean up bad section covs... ones that were saved w/ bad data because the coverages weren't mapped
                If .SectionICoverages IsNot Nothing AndAlso .SectionICoverages.Count > 0 Then
                    Dim sectionICovIndexesToRemove As New List(Of Integer)
                    Dim sectionICovIndex As Integer = 0
                    For Each sc As QuickQuoteSectionICoverage In .SectionICoverages
                        If qqHelper.IsNumericString(sc.CoverageCodeId) = False Then
                            sectionICovIndexesToRemove.Add(sectionICovIndex)
                        End If
                        sectionICovIndex += 1
                    Next
                    If sectionICovIndexesToRemove IsNot Nothing AndAlso sectionICovIndexesToRemove.Count > 0 Then
                        sectionICovIndexesToRemove.Reverse()
                        For Each i As Integer In sectionICovIndexesToRemove
                            If .SectionICoverages.Item(i) IsNot Nothing Then
                                .SectionICoverages.Item(i).Dispose()
                                .SectionICoverages.Item(i) = Nothing
                            End If
                            .SectionICoverages.RemoveAt(i)
                        Next
                    End If
                End If
                If .SectionIICoverages IsNot Nothing AndAlso .SectionIICoverages.Count > 0 Then
                    Dim sectionIICovIndexesToRemove As New List(Of Integer)
                    Dim sectionIICovIndex As Integer = 0
                    For Each sc As QuickQuoteSectionIICoverage In .SectionIICoverages
                        If qqHelper.IsNumericString(sc.CoverageCodeId) = False Then
                            sectionIICovIndexesToRemove.Add(sectionIICovIndex)
                        End If
                        sectionIICovIndex += 1
                    Next
                    If sectionIICovIndexesToRemove IsNot Nothing AndAlso sectionIICovIndexesToRemove.Count > 0 Then
                        sectionIICovIndexesToRemove.Reverse()
                        For Each i As Integer In sectionIICovIndexesToRemove
                            If .SectionIICoverages.Item(i) IsNot Nothing Then
                                .SectionIICoverages.Item(i).Dispose()
                                .SectionIICoverages.Item(i) = Nothing
                            End If
                            .SectionIICoverages.RemoveAt(i)
                        Next
                    End If
                End If

                'added 6/24/2015
                .HobbyFarmCredit = False
                .FireDepartmentAlarm = False
                .PoliceDepartmentTheftAlarm = False
                .BurglarAlarm_CentralAlarmSystem = False
                .FireSmokeAlarm_CentralAlarmSystem = False

                'added 6/22/2015
                If .Buildings Is Nothing Then
                    .Buildings = New List(Of QuickQuoteBuilding)
                End If
                If .Buildings.Count = 0 Then
                    .Buildings.Add(New QuickQuoteBuilding)
                End If
                With .Buildings(0)
                    'updated 6/24/2015
                    .FarmStructureTypeId = "10" 'Barn
                    .ConstructionId = "1" 'Cement
                    .FarmTypeId = "1" 'Type 1
                    .Description = "barn; cement; type 1"
                    .Dimensions = "50 x 40"
                    .SquareFeet = "2000"
                    .ProtectionClassId = "10" '10; only one valid for FAR

                    'coverages
                    .E_Farm_Limit = "110000"
                    .E_Farm_DeductibleLimitId = "24" '1000
                    .HouseholdContentsLimit = "25000"
                    
                End With
                'added 7/29/2015
                If .Buildings.Count = 1 Then
                    .Buildings.Add(New QuickQuoteBuilding)
                End If
                With .Buildings(1)
                    .FarmStructureTypeId = "12" 'Grain Bin
                    .ConstructionId = "3" 'Masonry
                    .FarmTypeId = "1" 'Type 1
                    .Description = "grain bin; masonry; type 1"
                    .Dimensions = "30 x 20"
                    .SquareFeet = "600"
                    .ProtectionClassId = "10" '10; only one valid for FAR

                    'coverages
                    .E_Farm_Limit = "110000"
                    .E_Farm_DeductibleLimitId = "24" '1000
                    .HouseholdContentsLimit = "25000"
                End With
            End With

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    'added 3/3/2015 for Crime
    Private Sub CRM_save_test(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote
                .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialCrime

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                '.RiskGradeLookupId = "74" 'test has 947 (probably shoe stores)
                .RiskGradeLookupId = "947"

                'Policyholder information will automatically be populated by Client
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "CRM"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "CRM Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "CRM"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients()

                '.CopyPolicyholdersToApplicants()
                '.CopyPolicyholdersToOperators()

            End With
        End If

        With quickQuote
            .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialCrime
            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'added 3/31/2015
            'policy-level fields
            .AggregateLimit = "20000"
            .NumberOfEmployees = "11"
            '.ProgramTypeId = "50" 'Employee Theft & Forgery
            .ProgramTypeId = "48" 'Commercial Crime
            '.ProgramTypeId = "49" 'Government Crime

            .ClassificationCodes = New List(Of QuickQuoteClassificationCode)
            Dim cc As New QuickQuoteClassificationCode
            With cc
                .ClassCode = "4480"
                .ClassDescription = "Shoe Stores"
                .PMA = "Mercantile"
            End With
            .ClassificationCodes.Add(cc)

            If .CanUseApplicantNumForApplicantReconciliation = False Then

            Else
                'add logic here to change existing applicant(s)

            End If
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)

            End If
            If .CanUseLocationNumForLocationReconciliation = False Then '3/26/2015 note: no loc or building covs for CRM

            Else
                'add logic here to change existing location(s)

            End If
            If .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False Then

            Else
                'add logic here to change existing scheduled coverage(s)

            End If

            'policy level covs
            'added 3/31/2015
            .EmployeeTheftLimit = "50000" 'note: cov also has CoverageBasisTypeId 1
            .EmployeeTheftDeductibleId = "9" '1,000
            .EmployeeTheftNumberOfRatableEmployees = "11"
            .EmployeeTheftNumberOfAdditionalPremises = "1"
            .EmployeeTheftFaithfulPerformanceOfDutyTypeId = "1" 'Other Than Benefits Plan as Sole Insured
            .EmployeeTheftScheduledEmployeeBenefitPlans = New List(Of String)
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 1")
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 2")
            .EmployeeTheftIncludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 1")
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 2")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = New List(Of String)
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 1")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 2")
            .EmployeeTheftScheduledPartners = New List(Of String)
            .EmployeeTheftScheduledPartners.Add("partner 1")
            .EmployeeTheftScheduledPartners.Add("partner 2")
            .EmployeeTheftScheduledLLCMembers = New List(Of String)
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 1")
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 2")
            .EmployeeTheftScheduledNonCompensatedOfficers = New List(Of String)
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 1")
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 2")
            .EmployeeTheftExcludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 1")
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 2")
            .InsidePremisesTheftOfMoneyAndSecuritiesLimit = "20000" 'note: cov also has CoverageBasisTypeId 1
            .InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = "9" 'static data; 1,000
            .InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = "3" 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = True 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = True 'CoverageDetail
            .OutsideThePremisesLimit = "30000" 'note: cov also has CoverageBasisTypeId 1
            .OutsideThePremisesDeductibleId = "15" 'static data; 2,500
            .OutsideThePremisesNumberOfPremises = "2" 'CoverageDetail
            .OutsideThePremisesIncludeSellingPrice = True 'CoverageDetail
            .OutsideThePremisesLimitToRobberyOnly = True 'CoverageDetail
            .OutsideThePremisesRequireRecordOfChecks = True 'CoverageDetail

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    'added 4/23/2015 for newer CPP package parts
    Private Sub CPP_save_test_all_parts() 'CPR w/ CGL, CIM, and CRM
        Dim qqxml As New QuickQuoteXML
        Dim qId As String = ""
        Dim err As String = ""

        Dim qq As New QuickQuoteObject
        qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage
        qq.QuoteDescription = "Test GL Prem/Products deductible 2 (on GL packagepart only)" 'added 3/8/2013 to specify for testing
        qq.EffectiveDate = Date.Today.ToShortDateString
        qq.PackageTypeId = "1" 'CPP
        'qq.PackageTypeId = "2" 'POP
        'qq.PackageModificationAssignmentTypeId = "0" 'N/A
        '11/19/2012 errors (okay now that these are just being added to main package part type section):  Property Detail #2: Please select a Package Modification Assignment Type; General Liability Detail #3: Error in GetCPPPackageModificationFactor: Unable to locate Y Axis (Table[PackageFactors] Value[0])
        '11/29/2012 - updated logic to only send package type and PMA on main package part unless PMA id is something other than 0
        'qq.PackageModificationAssignmentTypeId = "1" 'Apartment House Risk
        qq.PackageModificationAssignmentTypeId = "4" 'Industrial and Processing Risk (testing 11/27/2012)

        qq.RiskGrade = "1"
        qq.RiskGradeLookupId = "74" 'added 11/5/2012 for testing

        qq.PolicyTypeId = "60" 'Standard
        'qq.HasBusinessMasterEnhancement = True
        qq.Has_PackageCPR_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

        '--------------CGL start-------------------
        qq.ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
        qq.OccurrenceLiabilityLimitId = "34" '500,000
        qq.GeneralAggregateLimitId = "178" '600,000
        qq.ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
        qq.PersonalAndAdvertisingInjuryLimitId = "34" '500,000
        qq.DamageToPremisesRentedLimitId = "10" '100,000
        qq.MedicalExpensesLimitId = "15" '5,000
        'qq.DamageToPremisesRentedLimitId = "33" '300,000 '"177" '400,000
        'qq.MedicalExpensesLimitId = "7" '10,000

        'qq.HasBusinessMasterEnhancement = True
        qq.Has_PackageGL_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

        qq.AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012

        qq.EmployeeBenefitsLiabilityText = "5" 'number of employees
        qq.EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
        qq.HasHiredAuto = True
        qq.HasNonOwnedAuto = True

        'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
        'fixed 7/18/2012
        'qq.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
        'updated 12/3/2012 to get past liquor liability message
        qq.LiquorLiabilityOccurrenceLimitId = "34" '500,000
        'qq.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
        qq.LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
        qq.LiquorSales = "30000.00"

        qq.ProfessionalLiabilityCemetaryNumberOfBurials = "100"
        qq.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
        qq.ProfessionalLiabilityPastoralNumberOfClergy = "5"

        'added 8/22/2012
        qq.GL_PremisesAndProducts_DeductibleId = "9" '1,000
        qq.GL_PremisesAndProducts_DeductibleCategoryTypeId = "6" 'Property Damage
        qq.GL_PremisesAndProducts_DeductiblePerTypeId = "1" 'Per Occurrence
        qq.GL_PremisesAndProducts_Description = "test description"

        qq.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim gl As New QuickQuoteGLClassification
        gl.ClassCode = "50017"
        gl.ClassDescription = "Abrasives or Abrasive Products Mfg."
        gl.PremiumExposure = "10,000"
        gl.PremiumBase = "Gross Sales"
        gl.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl)
        Dim gl2 As New QuickQuoteGLClassification
        gl2.ClassCode = "51741"
        gl2.ClassDescription = "Candle Mfg"
        gl2.PremiumExposure = "20,000"
        gl2.PremiumBase = "Gross Sales"
        gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        qq.GLClassifications.Add(gl2)
        '--------------CGL end-------------------

        qq.Client.Name.CommercialDBAname = "Don Test DBA (Client)"
        qq.Client.Name.TypeId = "2"
        qq.Client.Name.TaxNumber = "123456789"
        qq.Client.Name.TaxTypeId = "2"
        qq.Client.Address.HouseNum = "123"
        qq.Client.Address.StreetName = "Test Street"
        qq.Client.Address.City = "Indianapolis"
        qq.Client.Address.Zip = "46227"
        qq.Client.Address.County = "Marion"

        qq.Policyholder.Name.CommercialDBAname = "Don Test DBA (PH)"
        qq.Policyholder.Name.TypeId = "2"
        qq.Policyholder.Name.TaxNumber = "123456789"
        qq.Policyholder.Name.TaxTypeId = "2"
        qq.Policyholder.Address.HouseNum = "123"
        qq.Policyholder.Address.StreetName = "Test Street"
        qq.Policyholder.Address.City = "Indianapolis"
        qq.Policyholder.Address.Zip = "46227"
        qq.Policyholder.Address.County = "Marion"
        'added 8/29/2012 to test
        qq.Policyholder.Name.DescriptionOfOperations = "PH test"
        qq.Policyholder.Name.EntityTypeId = "1" 'Individual

        '--------------CIM policy level covs--------------
        With qq
            'policy level covs
            .CPP_Has_InlandMarine_PackagePart = True 'needed for CIM packagePart on CPP
            .ContractorsEquipmentScheduleCoinsuranceTypeId = "5" '80%
            .ContractorsEquipmentScheduleDeductibleId = "9" '8=500; 9=1,000
            .ContractorsEquipmentScheduleRate = "1.250"
            '.ContractorsEquipmentScheduleCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1

            'moved from below 2/10/2015
            .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False 'so DiamondNums won't be used for reconciliation
            .ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage)
            Dim ce As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce
                '.AdditionalInterests
                .Description = "CE #1"
                .ManualLimitAmount = "1500"
                .ManufacturerName = "CE #1 ManName"
                .Model = "CE #1 Model"
                .SerialNumber = "CE #1 Serial"
                .ValuationMethodTypeId = "2" 'Actual Cash Value
                .Year = "2010"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce)
            Dim ce2 As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce2
                '.AdditionalInterests
                .Description = "CE #2"
                .ManualLimitAmount = "2400"
                .ManufacturerName = "CE #2 ManName"
                .Model = "CE #2 Model"
                .SerialNumber = "CE #2 Serial"
                .ValuationMethodTypeId = "1" 'Replacement Cost
                .Year = "2012"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce2)

            'added 1/27/2015
            .ContractorsEquipmentLeasedRentedFromOthersLimit = "20000"
            '.ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = "8" '25,000; not sure where this shows
            .ContractorsEquipmentLeasedRentedFromOthersRate = "1.250"
            .ContractorsToolsEquipmentRented = "" 'added 4/1/2015 to clear out wrong coverage that was inadvertently pulled in on Edit since the same CASE was handling the BOP cov (21005) and the CIM cov (21421)

            'added 1/27/2015; currently gets stopped at quote rate: {(R-632) Inland Marine Contractors Equipment Rental Reimbursement&nbsp; requires Underwriting Approval., Error}
            '.ContractorsEquipmentRentalReimbursementLimit = "10000"
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentRentalReimbursementRate = "1.750"
            'code below will remove cov
            .ContractorsEquipmentRentalReimbursementLimit = ""
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentRentalReimbursementRate = ""

            'added 1/27/2015
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = "5000"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = "2.500"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = "8" '500
            '.ContractorsEquipmentSmallToolsEndorsementPerToolLimit = "1000"
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "1" 'per 100
            'code below will remove cov
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = ""
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = ""
            .ContractorsEquipmentSmallToolsEndorsementPerToolLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1

            'added 1/27/2015; currently gets stopped at quote rate if small tools entered for CE: {(R-636) Cannot add Small Tools Floater coverage if they have already entered this same coverage in the Contractor’s Equipment coverage area, Error}
            .SmallToolsLimit = "1000"
            '.SmallToolsCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsRate = "2.500"
            .SmallToolsDeductibleId = "8" '500
            .SmallToolsAnyOneLossCatastropheLimit = "5000"
            '.SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim ai1 As New QuickQuoteAdditionalInterest
            With ai1
                .ListId = "178757"
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.50"
                .LoanAmount = "1200.00"
                .LoanNumber = "loan1"
                .Other = "other"

                With .Address
                    .City = "INDIANAPOLIS"
                    .HouseNum = "2564"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "N MAIN AVE"
                    .Zip = "46219-0000"
                End With
                With .Name
                    .CommercialName1 = "TESTING ADD AI"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai1)
            Dim ai2 As New QuickQuoteAdditionalInterest
            With ai2
                .ListId = "178699"
                .ATIMA = True
                .TypeId = "66" 'Loss Payable - Lenders Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = True
                .InterestInProperty = "4.00"
                .LoanAmount = "700.00"
                .LoanNumber = "loan2"
                .Other = "other"

                With .Address
                    .City = "INDY"
                    .HouseNum = "123"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "MAIN"
                    .Zip = "46032-0000"
                End With
                With .Name
                    .FirstName = "TEST"
                    .LastName = "TEST"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "1"
                    .TypeId = "1"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai2)

            'added 1/28/2015
            '.InstallationBlanketLimit = "5000" 'won't use this if using InstallationScheduledLocations and summing up those limits in a different cov; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            .InstallationBlanketLimit = ""
            .InstallationBlanketCoinsuranceTypeId = "5" '80%
            .InstallationBlanketDeductibleId = "8" '500
            .InstallationBlanketRate = "0.750"
            '.InstallationBlanketCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationBlanketAnyOneLossCatastropheLimit = "15000"
            '.InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim iAI As New QuickQuoteAdditionalInterest
            With iAI
                .ListId = "3735"
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.00"
                .LoanAmount = "1600.00"
                .LoanNumber = "loan/acct"
                .Other = "other"

                With .Address
                    .City = "Tipton"
                    .HouseNum = "852"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "Main St"
                    .Zip = "46072-0000"
                End With
                With .Name
                    .CommercialName1 = "Test Lienholder for Regression"
                    .CommercialName2 = "test"
                    .TaxNumber = "123456789"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .InstallationAdditionalInterests.Add(iAI)
            .InstallationScheduledLocations = New List(Of QuickQuoteInstallationScheduledLocation) 'won't use this if using InstallationBlanketLimit; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            Dim sl As New QuickQuoteInstallationScheduledLocation
            With sl
                .Limit = "200"
                .AddressInfo = "Test Add1"
            End With
            .InstallationScheduledLocations.Add(sl)
            Dim sl2 As New QuickQuoteInstallationScheduledLocation
            With sl2
                .Limit = "900"
                .AddressInfo = "Test Add2"
            End With
            .InstallationScheduledLocations.Add(sl2)
            'added 2/2/2015
            .InstallationAdditionalDebrisRemovalExpenseLimit = "6500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationStorageLocationsLimit = "6000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTransitLimit = "6200" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTestingLimit = "6100" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupLimit = "1000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupDeductible = "100"
            .InstallationSewerBackupCatastropheLimit = "2000"
            'added 2/3/2015
            .InstallationEarthquakeLimit = "1500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationEarthquakeDeductible = "200"
            .InstallationEarthquakeCatastropheLimit = "3000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            'added 2/9/2015
            .BusinessPersonalPropertyLimit = "25000" 'may also need to set Coverage.CoverageBasisTypeId to 1; note: on Installation Floater Coverage Extensions screen, but may not be specific to Installation
            .ScheduledPropertyAdditionalInterests = Nothing 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ScheduledPropertyCoinsuranceTypeId = "5" '80%
            .ScheduledPropertyNamedPerils = True
            .ScheduledPropertyRate = "1.750"
            .ScheduledPropertyDeductibleId = "8" '500
            .ScheduledPropertyItems = New List(Of QuickQuoteScheduledPropertyItem)
            Dim sp1 As New QuickQuoteScheduledPropertyItem
            With sp1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000"
                .Description = "Test Scheduled Property Item #1"
            End With
            .ScheduledPropertyItems.Add(sp1)
            'added 2/10/2015
            .ComputerCoinsuranceTypeId = "5" '80%; may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerExcludeEarthquake = True
            .ComputerValuationMethodTypeId = "2" 'Actual Cash Value
            .ComputerAdditionalInterests = Nothing
            .ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ComputerAllPerilsDeductibleId = "8" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage
            .ComputerEarthquakeVolcanicEruptionDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            .ComputerMechanicalBreakdownDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            'added 2/19/2015
            .BuildersRiskDeductibleId = "15" '2,500; may also need to set Coverage.CoverageBasisTypeId to 1
            .BuildersRiskRate = "0.900"
            .BuildersRiskAdditionalInterests = Nothing
            .BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .BuildersRiskScheduledLocations = New List(Of QuickQuoteBuildersRiskScheduledLocation)
            Dim sl1 As New QuickQuoteBuildersRiskScheduledLocation
            With sl1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000.00"
                .AddressInfo = "123 MAIN ST, CARMEL BY THE SEA, IN 46033"
            End With
            .BuildersRiskScheduledLocations.Add(sl1)
            'added 3/16/2016
            'may also need to set Coverage.CoverageBasisTypeId to 1
            .FineArtsDeductibleCategoryTypeId = "3" 'All Perils
            .FineArtsRate = "2.300"
            .FineArtsDeductibleId = "8" '500
            .FineArtsAdditionalInterests = Nothing
            .FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .FineArtsBreakageMarringOrScratching = False 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching
            'added 3/17/2015
            'may also need to set Coverage.CoverageBasisTypeId to 1 for owner's cargo covs
            .OwnersCargoAnyOneOwnedVehicleLimit = "22000"
            .OwnersCargoAnyOneOwnedVehicleDeductibleId = "8" 'static data; 500
            .OwnersCargoAnyOneOwnedVehicleRate = "2.300"
            .OwnersCargoAnyOneOwnedVehicleDescription = "owners cargo prop desc"
            .OwnersCargoAnyOneOwnedVehicleAdditionalInterests = Nothing
            .OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .OwnersCargoAnyOneOwnedVehicleLoadingUnloading = True
            .OwnersCargoAnyOneOwnedVehicleNamedPerils = True
            .OwnersCargoCatastropheLimit = "40000"
            'may also need to set Coverage.CoverageBasisTypeId to 1 for transportation covs
            .TransportationCatastropheLimit = "5000"
            .TransportationCatastropheDeductibleId = "8" '500; static data
            .TransportationCatastropheDescription = "Trans prop desc"
            .TransportationCatastropheAdditionalInterests = Nothing
            .TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .TransportationCatastropheLoadingUnloading = True
            .TransportationCatastropheNamedPerils = True
            'added 3/25/2015
            .TransportationAnyOneOwnedVehicleLimit = "12000" 'note: cov also has CoverageBasisTypeId set to 1; fyi this value may not make sense since cat limit is lower
            .TransportationAnyOneOwnedVehicleNumberOfVehicles = "2" 'CoverageDetail
            .TransportationAnyOneOwnedVehicleRate = "3.300"
            .MotorTruckCargoScheduledVehicles = New List(Of QuickQuoteScheduledVehicle)
            Dim sv1 As New QuickQuoteScheduledVehicle
            With sv1
                .Make = "Chevy"
                .Model = "Camaro"
                .VIN = "1234"
                .Year = "1999"
                .Limit = "2000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv1)
            Dim sv2 As New QuickQuoteScheduledVehicle
            With sv2
                .Make = "Chevy"
                .Model = "Beretta"
                .VIN = "8888"
                .Year = "1990"
                .Limit = "1000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv2)
            .MotorTruckCargoScheduledVehicleAdditionalInterests = Nothing
            .MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .MotorTruckCargoScheduledVehicleLoadingUnloading = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleNamedPerils = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleOperatingRadius = "55" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleRate = "2.300" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleDeductibleId = "8" 'static data; 500
            .MotorTruckCargoScheduledVehicleDescription = "prop desc"
            .MotorTruckCargoScheduledVehicleCatastropheLimit = "5000"
            'added 3/26/2015
            .SignsAdditionalInterests = Nothing
            .SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .SignsMaximumDeductible = "500" 'CoverageDetail
            .SignsMinimumDeductible = "50" 'CoverageDetail
            .SignsValuationMethodTypeId = "2" 'Actual Cash Value
            .SignsDeductibleId = "34" '5%
            .SignsAnyOneLossCatastropheLimit = "5000"
        End With
        '-------------end CIM policy level covs-------------------

        '-----------CRM policy level fields/covs-----------------
        With qq
            'added 3/31/2015
            'policy-level fields
            .CPP_Has_Crime_PackagePart = True 'needed for CRM packagePart on CPP
            .AggregateLimit = "20000"
            .NumberOfEmployees = "11"
            ''.ProgramTypeId = "50" 'Employee Theft & Forgery
            '.ProgramTypeId = "48" 'Commercial Crime
            ''.ProgramTypeId = "49" 'Government Crime
            'note: different property when part of package (since GL already uses ProgramTypeId)
            '.CPP_CRM_ProgramTypeId = "50" 'Employee Theft & Forgery
            .CPP_CRM_ProgramTypeId = "48" 'Commercial Crime
            '.CPP_CRM_ProgramTypeId = "49" 'Government Crime

            .ClassificationCodes = New List(Of QuickQuoteClassificationCode)
            Dim cc As New QuickQuoteClassificationCode
            With cc
                .ClassCode = "4480"
                .ClassDescription = "Shoe Stores"
                .PMA = "Mercantile"
            End With
            .ClassificationCodes.Add(cc)

            'policy level covs
            'added 3/31/2015
            .EmployeeTheftLimit = "50000" 'note: cov also has CoverageBasisTypeId 1
            .EmployeeTheftDeductibleId = "9" '1,000
            .EmployeeTheftNumberOfRatableEmployees = "11"
            .EmployeeTheftNumberOfAdditionalPremises = "1"
            .EmployeeTheftFaithfulPerformanceOfDutyTypeId = "1" 'Other Than Benefits Plan as Sole Insured
            .EmployeeTheftScheduledEmployeeBenefitPlans = New List(Of String)
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 1")
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 2")
            .EmployeeTheftIncludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 1")
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 2")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = New List(Of String)
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 1")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 2")
            .EmployeeTheftScheduledPartners = New List(Of String)
            .EmployeeTheftScheduledPartners.Add("partner 1")
            .EmployeeTheftScheduledPartners.Add("partner 2")
            .EmployeeTheftScheduledLLCMembers = New List(Of String)
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 1")
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 2")
            .EmployeeTheftScheduledNonCompensatedOfficers = New List(Of String)
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 1")
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 2")
            .EmployeeTheftExcludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 1")
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 2")
            .InsidePremisesTheftOfMoneyAndSecuritiesLimit = "20000" 'note: cov also has CoverageBasisTypeId 1
            .InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = "9" 'static data; 1,000
            .InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = "3" 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = True 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = True 'CoverageDetail
            .OutsideThePremisesLimit = "30000" 'note: cov also has CoverageBasisTypeId 1
            .OutsideThePremisesDeductibleId = "15" 'static data; 2,500
            .OutsideThePremisesNumberOfPremises = "2" 'CoverageDetail
            .OutsideThePremisesIncludeSellingPrice = True 'CoverageDetail
            .OutsideThePremisesLimitToRobberyOnly = True 'CoverageDetail
            .OutsideThePremisesRequireRecordOfChecks = True 'CoverageDetail
        End With
        '-----------end CRM policy level fields/covs-----------------

        qq.Locations = New Generic.List(Of QuickQuoteLocation)
        Dim l1 As New QuickQuoteLocation
        l1.Description = "Loc 1"
        l1.Address.HouseNum = "123"
        l1.Address.StreetName = "Test Street"
        l1.Address.City = "Indianapolis"
        l1.Address.Zip = "46227"
        l1.Address.County = "Marion"
        l1.ProtectionClassId = "12" '01

        'l1.CauseOfLossTypeId = "1" 'Basic Form (At least one location must have a Special Form Cause of Loss.)
        l1.CauseOfLossTypeId = "3" 'Special Form Including Theft
        l1.DeductibleId = "9" '1,000
        'l1.CoinsuranceTypeId = "2" '50% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        l1.CoinsuranceTypeId = "0" 'N/A
        l1.ValuationMethodTypeId = "2" 'Actual Cash Value
        l1.EquipmentBreakdownDeductibleId = "8" '500
        l1.EquipmentBreakdownOccupancyTypeId = "8" 'Athletic Clubs
        l1.ClassificationCode.ClassCode = "0844"
        l1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        l1.ClassificationCode.PMA = "Service"

        l1.Buildings = New Generic.List(Of QuickQuoteBuilding)
        Dim b1 As New QuickQuoteBuilding
        b1.Description = "Loc 1 Build 1"
        'could set b1.ClassificationCode(Can't calculate Building Coverage without specified Class Code for location #1, building #1.)
        b1.ClassificationCode.ClassCode = "0844"
        'b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.ClassificationCode.PMA = "Service"
        'b1.ConstructionId = "7" 'Frame (10/18/2012:  7 is only valid for BOP)
        b1.ConstructionId = "2" 'Frame
        'b1.EarthquakeBuildingClassificationTypeId = "0" 'N/A
        b1.EarthquakeBuildingClassificationTypeId = "12" '2A - All-metal buildings which are one story in height and 20,000 sq. ft. or less of ground floor space. (testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012)
        b1.PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores (rate_grade = 1); added 10/23/2012

        b1.Limit = "120000"
        b1.InflationGuardTypeId = "1" '2
        b1.EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.RatingTypeId = "2" 'Specific Rated
        'b1.RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012); 10/11/2012 - There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.
        b1.CauseOfLossTypeId = "2" 'Broad Form
        b1.DeductibleId = "8" '500
        b1.CoinsuranceTypeId = "3" '60%
        b1.ValuationId = "1" 'Replacement Cost

        b1.PersPropCov_PersonalPropertyLimit = "110000"
        b1.PersPropCov_PropertyTypeId = "7" 'Personal Property - Including Stock
        b1.PersPropCov_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        'b1.PersPropCov_EarthquakeApplies = False
        b1.PersPropCov_EarthquakeApplies = True 'testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012
        'b1.PersPropCov_RatingTypeId = "1" 'Class Rated (10/15/2012 error:  Location #1 - Building #1 - Personal Property Coverage with Risk Type 'Type 3 - All Other Personal Property' must be Specific Rated for Class Code 0844.)
        b1.PersPropCov_RatingTypeId = "2" 'Specific Rated
        b1.PersPropCov_CauseOfLossTypeId = "3" 'Special Form Including Theft
        b1.PersPropCov_DeductibleId = "15" '2,500
        b1.PersPropCov_CoinsuranceTypeId = "4" '70%
        b1.PersPropCov_ValuationId = "1" 'Replacement Cost
        'could set b1.PersPropCov_ClassificationCode
        b1.PersPropCov_ClassificationCode.ClassCode = "0844"
        b1.PersPropCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropCov_ClassificationCode.PMA = "Service"
        '10/15/2012 - testing after error:  Location #1 - Building #1 - Personal Property - Unable to get territory factor: Invalid PMA for class code 0844.
        'b1.PersPropCov_ClassificationCode.ClassCode = "0311"
        'b1.PersPropCov_ClassificationCode.ClassDescription = "Apartment Buildings"
        'b1.PersPropCov_ClassificationCode.PMA = "Apartment House"

        b1.PersPropOfOthers_PersonalPropertyLimit = "127000"
        b1.PersPropOfOthers_RiskTypeId = "5" 'Type 3 - All Other Personal Property
        b1.PersPropOfOthers_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
        b1.PersPropOfOthers_RatingTypeId = "2" 'Specific Rated
        'b1.PersPropOfOthers_RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012)
        b1.PersPropOfOthers_CauseOfLossTypeId = "4" 'Special Form Excluding Theft
        b1.PersPropOfOthers_DeductibleId = "16" '5,000
        b1.PersPropOfOthers_CoinsuranceTypeId = "5" '80%
        'b1.PersPropOfOthers_ValuationId = "3" 'Functional Building Valuation
        b1.PersPropOfOthers_ValuationId = "7" 'Functional Replacement Cost
        'could set b1.PersPropOfOthers_ClassificationCode
        b1.PersPropOfOthers_ClassificationCode.ClassCode = "0844"
        'b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.PersPropOfOthers_ClassificationCode.PMA = "Service"

        'Error as-of 10/15/2012:  Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        b1.BusinessIncomeCov_Limit = "117000"
        'b1.BusinessIncomeCov_CoinsuranceTypeId = "6" '90% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
        b1.BusinessIncomeCov_CoinsuranceTypeId = "0" 'N/A (commented 11/13/2012 to see if it matters)
        b1.BusinessIncomeCov_MonthlyPeriodTypeId = "2" '1/4
        b1.BusinessIncomeCov_BusinessIncomeTypeId = "3" 'Business Income Other than Rental Value With Extra Expense
        'b1.BusinessIncomeCov_RiskTypeId = "7" 'Manufacturing; Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
        'b1.BusinessIncomeCov_RiskTypeId = "0" 'N/A; Location #1 - Building #1 - A valid Risk Type must be selected for Business Income Coverage.
        b1.BusinessIncomeCov_RiskTypeId = "9" 'Rental Properties
        b1.BusinessIncomeCov_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012 (error:  Error in CalculateBusinessIncomeTimeElementEarthquakePremium: Object reference not set to an instance of an object.)
        b1.NumberOfStories = "2" 'added 11/13/2012 to hopefully work w/ business income EQ (this is needed (also needed to set CoverageBasisTypeId):  Error calculating Business Income Time Element Earthquake coverage for location #1, building #1: Number of stories cannot be 0.)
        'testing 11/9/2012 to see if I can add it after getting into Diamond and find difference in XML
        'b1.BusinessIncomeCov_EarthquakeApplies = False
        'b1.BusinessIncomeCov_RatingTypeId = "1" 'Class Rated (There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.)
        b1.BusinessIncomeCov_RatingTypeId = "2" 'Specific Rated
        b1.BusinessIncomeCov_CauseOfLossTypeId = "1" 'Basic form
        'could set b1.BusinessIncomeCov_ClassificationCode
        b1.BusinessIncomeCov_ClassificationCode.ClassCode = "0844"
        'b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
        b1.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
        b1.BusinessIncomeCov_ClassificationCode.PMA = "Service"
        b1.BusinessIncomeCov_WaitingPeriodTypeId = "3" '72 (previous validation message:  Location #1 - Building #1 - Please select Waiting Period on Business Income Coverage.)

        'commented out 10/10/2012 since they're not working right now
        'b1.Building_BusinessIncome_Group1_Rate = ".924" '".7"
        'b1.Building_BusinessIncome_Group2_Rate = ".924" '".2"
        'b1.PersonalProperty_Group1_Rate = ".924" '".6"
        'b1.PersonalProperty_Group2_Rate = ".924" '".15"

        'works when just setting LossCost (as-of 11/5/2012)
        b1.Building_BusinessIncome_Group1_LossCost = "0.450" '".4"
        b1.Building_BusinessIncome_Group2_LossCost = "0.450" '".1"
        b1.PersonalProperty_Group1_LossCost = "0.450" '".3"
        b1.PersonalProperty_Group2_LossCost = "0.450" '".05"

        'added 11/29/2012 for testing
        b1.OptionalTheftDeductibleId = "8" '500
        b1.OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropCov_OptionalTheftDeductibleId = "8" '500
        b1.PersPropCov_OptionalWindstormOrHailDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalTheftDeductibleId = "8" '500
        b1.PersPropOfOthers_OptionalWindstormOrHailDeductibleId = "8" '500

        'added for testing 12/4/2012; isn't working yet
        'b1.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
        'Dim ai As New QuickQuoteAdditionalInterest
        'ai.Name = qq.Client.Name
        'ai.Address = qq.Client.Address
        'ai.Description = "Test AI Description"
        'ai.Other = ""
        'ai.TypeId = "65" 'Loss Payable - Loss Payable
        'b1.AdditionalInterests.Add(ai)

        '-------------CIM building covs-------------
        With b1
            .YearBuilt = "1995"
            .SquareFeet = "1800"
            .ConstructionId = "2" 'Frame; added 4/1/2015 to get past validation; already being set above w/ prev CPP code

            .ComputerHardwareLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerHardwareRate = "0.500"
            .ComputerProgramsApplicationsAndMediaLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerProgramsApplicationsAndMediaRate = "0.450"
            .ComputerBusinessIncomeLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerBusinessIncomeRate = "0.400"

            'added 3/16/2015
            .FineArtsScheduledItems = New List(Of QuickQuoteFineArtsScheduledItem)
            Dim fa1 As New QuickQuoteFineArtsScheduledItem
            With fa1
                .Description = "Fine Arts #1"
                .Limit = "2000"
            End With
            .FineArtsScheduledItems.Add(fa1)
            Dim fa2 As New QuickQuoteFineArtsScheduledItem
            With fa2
                .Description = "Fine Arts #2"
                .Limit = "3500"
            End With
            .FineArtsScheduledItems.Add(fa2)

            'added 3/26/2015
            .ScheduledSigns = New List(Of QuickQuoteScheduledSign)
            Dim ss1 As New QuickQuoteScheduledSign
            With ss1
                .Limit = "1000"
                .IsIndoor = True
                .Description = "Scheduled sign #1"
            End With
            .ScheduledSigns.Add(ss1)
            Dim ss2 As New QuickQuoteScheduledSign
            With ss2
                .Limit = "900"
                .IsIndoor = False
                .Description = "Scheduled sign #2"
            End With
            .ScheduledSigns.Add(ss2)
            .UnscheduledSignsLimit = "2000"
        End With
        '-----------end CIM building covs-----------


        l1.Buildings.Add(b1)

        '---------more CGL--------
        l1.GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
        Dim l1gl As New QuickQuoteGLClassification
        l1gl.ClassCode = "96611"
        l1gl.ClassDescription = "Interior Decorators"
        l1gl.PremiumExposure = "5,000"
        l1gl.PremiumBase = "Payroll"
        l1gl.PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl)
        Dim l1gl2 As New QuickQuoteGLClassification
        l1gl2.ClassCode = "57997"
        l1gl2.ClassDescription = "Photo Finishing Labs"
        l1gl2.PremiumExposure = "30,000"
        l1gl2.PremiumBase = "Gross Sales, Products/Complete"
        l1gl2.PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
        l1.GLClassifications.Add(l1gl2)
        '------end more CGL-------

        qq.Locations.Add(l1)

        'added for new rule 11/27/2012; rule removed 11/28/2012
        'qq.PriorCarrier.PreviousInsurerTypeId = "0" 'None
        'qq.PriorCarrier.PreviousInsurerTypeId = "81" 'GEICO

        'added for UW Questions Testing 12/26/2012
        'qq.PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
        ''1st w/ CPP part
        'Dim uw As New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9403"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9006"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9007"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9008"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9009"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9400"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9010"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "2"
        'qq.PolicyUnderwritings.Add(uw)

        ''now for CGL and CPR parts
        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9003"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9006"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9007"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9008"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9009"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9400"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        'uw = New QuickQuotePolicyUnderwriting
        'uw.PolicyUnderwritingAnswer = "-1"
        'uw.PolicyUnderwritingAnswerTypeId = "0"
        'uw.PolicyUnderwritingCodeId = "9010"
        'uw.PolicyUnderwritingExtraAnswerTypeId = "0"
        'uw.PolicyUnderwritingLevelId = "1"
        'uw.PolicyUnderwritingTabId = "3"
        'qq.PolicyUnderwritings.Add(uw)

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
        If err = "" Then
            qq = Nothing
            strQQ = ""
            ratedQQ = Nothing
            strRatedQQ = ""
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, err)
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, err)
            If err = "" Then
                'qq.Client.Name.EntityTypeId = "3" 'Corporation
                'qq.Client.Name.DescriptionOfOperations = "Client Test"

                ''testing 12/3/2012 to bypass validation
                'qq.AdditionalInsuredsManualCharge = ""
                'qq.AdditionalInsureds = Nothing
                'qq.AdditionalInsuredsCount = 0

                ''12/3/2012 - testing loss history modifier
                'qq.LossHistoryRecords = New Generic.List(Of QuickQuoteLossHistoryRecord)
                'Dim lh As New QuickQuoteLossHistoryRecord
                'lh.ClaimNumber = "1234"
                'lh.LossDate = "1/1/2012"
                'lh.TypeOfLossId = "69" 'Explosion; get types/ids from Diamond's TypeOfLoss table
                'lh.Amount = "2000"
                'lh.ReserveAmount = "2000"
                'lh.LossDescription = "Test Loss Description"
                'lh.Comments = "Test Comments"
                'qq.LossHistoryRecords.Add(lh)

                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, strQQ, ratedQQ, strRatedQQ, qId, err)
                'If err = "" Then

                'End If
            End If
        End If
    End Sub
    'added 4/23/2015 for CIM and CRM on CPP
    'Private Sub CPP_save_test_all_parts_new(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False)
    'updated 6/10/2015 to send optional effDate param
    Private Sub CPP_save_test_all_parts_new(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False, Optional ByVal effDate As String = "")
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote
                .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'Policyholder information will automatically be populated by Client
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "CPP"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "CPP Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "CPP"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients()

                '.CopyPolicyholdersToApplicants()
                '.CopyPolicyholdersToOperators()

            End With
        End If

        With quickQuote
            .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage
            '.EffectiveDate = Date.Today.ToShortDateString
            '.EffectiveDate = "7/1/2015" 'for testing Manufacturers Enhancement (eff 6/30/2015)
            'updated 6/10/2015 to use optional effDate param
            If qqHelper.IsDateString(effDate) = True Then
                .EffectiveDate = CDate(effDate).ToShortDateString
            Else
                .EffectiveDate = Date.Today.ToShortDateString
            End If

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            If .CanUseApplicantNumForApplicantReconciliation = False Then

            Else
                'add logic here to change existing applicant(s)

            End If
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)

            End If
            If .CanUseLocationNumForLocationReconciliation = False Then

            Else
                'add logic here to change existing location(s)

            End If
            If .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False Then

            Else
                'add logic here to change existing scheduled coverage(s)

            End If

            'policy level fields/covs
            .PackageTypeId = "1" 'CPP
            '.PackageTypeId = "2" 'POP
            '.PackageModificationAssignmentTypeId = "0" 'N/A
            '11/19/2012 errors (okay now that these are just being added to main package part type section):  Property Detail #2: Please select a Package Modification Assignment Type; General Liability Detail #3: Error in GetCPPPackageModificationFactor: Unable to locate Y Axis (Table[PackageFactors] Value[0])
            '11/29/2012 - updated logic to only send package type and PMA on main package part unless PMA id is something other than 0
            '.PackageModificationAssignmentTypeId = "1" 'Apartment House Risk
            .PackageModificationAssignmentTypeId = "4" 'Industrial and Processing Risk (testing 11/27/2012)

            .PolicyTypeId = "60" 'Standard
            '.HasBusinessMasterEnhancement = True
            .Has_PackageCPR_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

            'added 6/8/2015 for new CPP endorsements
            .HasContractorsEnhancement = True
            .HasManufacturersEnhancement = True

            'added 3/26/2013 for Blanket
            '.HasBlanketBuilding = True
            '.HasBlanketContents = True
            '.HasBlanketBuildingAndContents = True 'was included in test CPR code, but decided to exclude here
            '.HasBlanketBusinessIncome = True
            '.BlanketBuildingCauseOfLossTypeId = "3" 'Special Form Including Theft
            '.BlanketContentsCauseOfLossTypeId = "3" 'Special Form Including Theft
            '.BlanketBuildingAndContentsCauseOfLossTypeId = "3" 'Special Form Including Theft
            '.BlanketBusinessIncomeCauseOfLossTypeId = "3" 'Special Form Including Theft

            '--------------CGL start-------------------
            .ProgramTypeId = "54" 'CGL - Commercial General Liability - Standard
            .OccurrenceLiabilityLimitId = "34" '500,000
            .GeneralAggregateLimitId = "178" '600,000
            .ProductsCompletedOperationsAggregateLimitId = "185" '1,500,000
            .PersonalAndAdvertisingInjuryLimitId = "34" '500,000
            .DamageToPremisesRentedLimitId = "10" '100,000
            .MedicalExpensesLimitId = "15" '5,000
            '.DamageToPremisesRentedLimitId = "33" '300,000 '"177" '400,000
            '.MedicalExpensesLimitId = "7" '10,000

            '.HasBusinessMasterEnhancement = True
            .Has_PackageGL_EnhancementEndorsement = True 'updated 11/14/2012 for new properties

            .AdditionalInsuredsManualCharge = "85.00" 'not setting prem in Diamond; okay now as-of 7/12/2012

            .EmployeeBenefitsLiabilityText = "5" 'number of employees
            .EmployeeBenefitsLiabilityOccurrenceLimitId = "34" '500,000
            .HasHiredAuto = True
            .HasNonOwnedAuto = True

            'liquor stuff isn't working as-of 7/13/2012 (Error in CalculateLiquorLiabilityPremium: Object reference not set to an instance of an object.)
            'fixed 7/18/2012
            '.LiquorLiabilityOccurrenceLimitId = "56" '1,000,000
            'updated 12/3/2012 to get past liquor liability message
            .LiquorLiabilityOccurrenceLimitId = "34" '500,000
            '.LiquorLiabilityClassificationId = "58161" 'Restaurants or Hotels
            .LiquorLiabilityClassificationId = "50911" 'Manufacturer, Wholesalers & Distributors
            .LiquorSales = "30000.00"

            .ProfessionalLiabilityCemetaryNumberOfBurials = "100"
            .ProfessionalLiabilityFuneralDirectorsNumberOfBodies = "200"
            .ProfessionalLiabilityPastoralNumberOfClergy = "5"

            'added 8/22/2012
            .GL_PremisesAndProducts_DeductibleId = "9" '1,000
            .GL_PremisesAndProducts_DeductibleCategoryTypeId = "6" 'Property Damage
            .GL_PremisesAndProducts_DeductiblePerTypeId = "1" 'Per Occurrence
            .GL_PremisesAndProducts_Description = "test description"

            .GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
            Dim gl As New QuickQuoteGLClassification
            With gl
                .ClassCode = "50017"
                .ClassDescription = "Abrasives or Abrasive Products Mfg."
                .PremiumExposure = "10,000"
                .PremiumBase = "Gross Sales"
                .PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
            End With
            .GLClassifications.Add(gl)
            Dim gl2 As New QuickQuoteGLClassification
            With gl2
                .ClassCode = "51741"
                .ClassDescription = "Candle Mfg"
                .PremiumExposure = "20,000"
                .PremiumBase = "Gross Sales"
                .PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
            End With
            .GLClassifications.Add(gl2)
            '--------------CGL end-------------------

            '--------------CIM policy level covs--------------
            .CPP_Has_InlandMarine_PackagePart = True 'needed for CIM packagePart on CPP
            .ContractorsEquipmentScheduleCoinsuranceTypeId = "5" '80%
            .ContractorsEquipmentScheduleDeductibleId = "9" '8=500; 9=1,000
            .ContractorsEquipmentScheduleRate = "1.250"
            '.ContractorsEquipmentScheduleCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1

            'moved from below 2/10/2015
            .CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False 'so DiamondNums won't be used for reconciliation
            .ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage)
            Dim ce As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce
                '.AdditionalInterests
                .Description = "CE #1"
                .ManualLimitAmount = "1500"
                .ManufacturerName = "CE #1 ManName"
                .Model = "CE #1 Model"
                .SerialNumber = "CE #1 Serial"
                .ValuationMethodTypeId = "2" 'Actual Cash Value
                .Year = "2010"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce)
            Dim ce2 As New QuickQuoteContractorsEquipmentScheduledCoverage
            With ce2
                '.AdditionalInterests
                .Description = "CE #2"
                .ManualLimitAmount = "2400"
                .ManufacturerName = "CE #2 ManName"
                .Model = "CE #2 Model"
                .SerialNumber = "CE #2 Serial"
                .ValuationMethodTypeId = "1" 'Replacement Cost
                .Year = "2012"
            End With
            .ContractorsEquipmentScheduledCoverages.Add(ce2)

            'added 1/27/2015
            .ContractorsEquipmentLeasedRentedFromOthersLimit = "20000"
            '.ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = "8" '25,000; not sure where this shows
            .ContractorsEquipmentLeasedRentedFromOthersRate = "1.250"
            .ContractorsToolsEquipmentRented = "" 'added 4/1/2015 to clear out wrong coverage that was inadvertently pulled in on Edit since the same CASE was handling the BOP cov (21005) and the CIM cov (21421)

            'added 1/27/2015; currently gets stopped at quote rate: {(R-632) Inland Marine Contractors Equipment Rental Reimbursement&nbsp; requires Underwriting Approval., Error}
            '.ContractorsEquipmentRentalReimbursementLimit = "10000"
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentRentalReimbursementRate = "1.750"
            'code below will remove cov
            .ContractorsEquipmentRentalReimbursementLimit = ""
            '.ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentRentalReimbursementRate = ""

            'added 1/27/2015
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = "5000"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "1" 'per 100
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = "2.500"
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = "8" '500
            '.ContractorsEquipmentSmallToolsEndorsementPerToolLimit = "1000"
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "1" 'per 100
            'code below will remove cov
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = ""
            .ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = ""
            .ContractorsEquipmentSmallToolsEndorsementPerToolLimit = ""
            '.ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1

            'added 1/27/2015; currently gets stopped at quote rate if small tools entered for CE: {(R-636) Cannot add Small Tools Floater coverage if they have already entered this same coverage in the Contractor’s Equipment coverage area, Error}
            .SmallToolsLimit = "1000"
            '.SmallToolsCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsRate = "2.500"
            .SmallToolsDeductibleId = "8" '500
            .SmallToolsAnyOneLossCatastropheLimit = "5000"
            '.SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .SmallToolsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim ai1 As New QuickQuoteAdditionalInterest
            With ai1
                .ListId = "178757" 'commented 5/29/2015 for testing
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.50"
                .LoanAmount = "1200.00"
                .LoanNumber = "loan1"
                .Other = "other"

                With .Address
                    .City = "INDIANAPOLIS"
                    .HouseNum = "2564"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "N MAIN AVE"
                    .Zip = "46219-0000"
                End With
                With .Name
                    .CommercialName1 = "TESTING ADD AI"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai1)
            Dim ai2 As New QuickQuoteAdditionalInterest
            With ai2
                .ListId = "178699" 'commented 5/29/2015 for testing
                .ATIMA = True
                .TypeId = "66" 'Loss Payable - Lenders Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = True
                .InterestInProperty = "4.00"
                .LoanAmount = "700.00"
                .LoanNumber = "loan2"
                .Other = "other"

                With .Address
                    .City = "INDY"
                    .HouseNum = "123"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "MAIN"
                    .Zip = "46032-0000"
                End With
                With .Name
                    .FirstName = "TEST"
                    .LastName = "TEST"
                    .TaxNumber = "000000000"
                    .TaxTypeId = "1"
                    .TypeId = "1"
                End With
            End With
            .SmallToolsAdditionalInterests.Add(ai2)

            'added 1/28/2015
            '.InstallationBlanketLimit = "5000" 'won't use this if using InstallationScheduledLocations and summing up those limits in a different cov; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            .InstallationBlanketLimit = ""
            .InstallationBlanketCoinsuranceTypeId = "5" '80%
            .InstallationBlanketDeductibleId = "8" '500
            .InstallationBlanketRate = "0.750"
            '.InstallationBlanketCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationBlanketAnyOneLossCatastropheLimit = "15000"
            '.InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = "1" 'per 100; removed 4/2/2015... will default to 1
            .InstallationAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            .InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False 'so it will ignore Diamond nums
            Dim iAI As New QuickQuoteAdditionalInterest
            With iAI
                .ListId = "3735" 'commented 5/29/2015 for testing
                .ATIMA = False
                .TypeId = "65" 'Loss Payable - Loss Payable
                .BillTo = False
                .Description = "desc"
                .HasWaiverOfSubrogation = False
                .ISAOA = False
                .InterestInProperty = "3.00"
                .LoanAmount = "1600.00"
                .LoanNumber = "loan/acct"
                .Other = "other"

                With .Address
                    .City = "Tipton"
                    .HouseNum = "852"
                    .Other = ""
                    .StateId = "16"
                    .StreetName = "Main St"
                    .Zip = "46072-0000"
                End With
                With .Name
                    .CommercialName1 = "Test Lienholder for Regression"
                    .CommercialName2 = "test"
                    .TaxNumber = "123456789"
                    .TaxTypeId = "2"
                    .TypeId = "2"
                End With
            End With
            .InstallationAdditionalInterests.Add(iAI)
            .InstallationScheduledLocations = New List(Of QuickQuoteInstallationScheduledLocation) 'won't use this if using InstallationBlanketLimit; {Cannot have Unscheduled Limits with Scheduled limits., Error}
            Dim sl As New QuickQuoteInstallationScheduledLocation
            With sl
                .Limit = "200"
                .AddressInfo = "Test Add1"
            End With
            .InstallationScheduledLocations.Add(sl)
            Dim sl2 As New QuickQuoteInstallationScheduledLocation
            With sl2
                .Limit = "900"
                .AddressInfo = "Test Add2"
            End With
            .InstallationScheduledLocations.Add(sl2)
            'added 2/2/2015
            .InstallationAdditionalDebrisRemovalExpenseLimit = "6500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationStorageLocationsLimit = "6000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTransitLimit = "6200" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationTestingLimit = "6100" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupLimit = "1000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationSewerBackupDeductible = "100"
            .InstallationSewerBackupCatastropheLimit = "2000"
            'added 2/3/2015
            .InstallationEarthquakeLimit = "1500" 'may also need to set Coverage.CoverageBasisTypeId to 1
            .InstallationEarthquakeDeductible = "200"
            .InstallationEarthquakeCatastropheLimit = "3000" 'may also need to set Coverage.CoverageBasisTypeId to 1
            'added 2/9/2015
            .BusinessPersonalPropertyLimit = "25000" 'may also need to set Coverage.CoverageBasisTypeId to 1; note: on Installation Floater Coverage Extensions screen, but may not be specific to Installation
            .ScheduledPropertyAdditionalInterests = Nothing 'may also need to set Coverage.CoverageBasisTypeId to 1
            .ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ScheduledPropertyCoinsuranceTypeId = "5" '80%
            .ScheduledPropertyNamedPerils = True
            .ScheduledPropertyRate = "1.750"
            .ScheduledPropertyDeductibleId = "8" '500
            .ScheduledPropertyItems = New List(Of QuickQuoteScheduledPropertyItem)
            Dim sp1 As New QuickQuoteScheduledPropertyItem
            With sp1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000"
                .Description = "Test Scheduled Property Item #1"
            End With
            .ScheduledPropertyItems.Add(sp1)
            'added 2/10/2015
            .ComputerCoinsuranceTypeId = "5" '80%; may also need to set Coverage.CoverageBasisTypeId to 1
            .ComputerExcludeEarthquake = True
            .ComputerValuationMethodTypeId = "2" 'Actual Cash Value
            .ComputerAdditionalInterests = Nothing
            .ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .ComputerAllPerilsDeductibleId = "8" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage
            .ComputerEarthquakeVolcanicEruptionDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            .ComputerMechanicalBreakdownDeductible = "0" 'may also need to set Coverage.CoverageBasisTypeId to 1; may also need boolean prop for hasCoverage... code may only add it if it's > 0
            'added 2/19/2015
            .BuildersRiskDeductibleId = "15" '2,500; may also need to set Coverage.CoverageBasisTypeId to 1
            .BuildersRiskRate = "0.900"
            .BuildersRiskAdditionalInterests = Nothing
            .BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .BuildersRiskScheduledLocations = New List(Of QuickQuoteBuildersRiskScheduledLocation)
            Dim sl1 As New QuickQuoteBuildersRiskScheduledLocation
            With sl1
                'may also need to set Coverage.CoverageBasisTypeId to 1
                .Limit = "150000.00"
                .AddressInfo = "123 MAIN ST, CARMEL BY THE SEA, IN 46033"
            End With
            .BuildersRiskScheduledLocations.Add(sl1)
            'added 3/16/2016
            'may also need to set Coverage.CoverageBasisTypeId to 1
            .FineArtsDeductibleCategoryTypeId = "3" 'All Perils
            .FineArtsRate = "2.300"
            .FineArtsDeductibleId = "8" '500
            .FineArtsAdditionalInterests = Nothing
            .FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .FineArtsBreakageMarringOrScratching = False 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching
            'added 3/17/2015
            'may also need to set Coverage.CoverageBasisTypeId to 1 for owner's cargo covs
            .OwnersCargoAnyOneOwnedVehicleLimit = "22000"
            .OwnersCargoAnyOneOwnedVehicleDeductibleId = "8" 'static data; 500
            .OwnersCargoAnyOneOwnedVehicleRate = "2.300"
            .OwnersCargoAnyOneOwnedVehicleDescription = "owners cargo prop desc"
            .OwnersCargoAnyOneOwnedVehicleAdditionalInterests = Nothing
            .OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .OwnersCargoAnyOneOwnedVehicleLoadingUnloading = True
            .OwnersCargoAnyOneOwnedVehicleNamedPerils = True
            .OwnersCargoCatastropheLimit = "40000"
            'may also need to set Coverage.CoverageBasisTypeId to 1 for transportation covs
            .TransportationCatastropheLimit = "5000"
            .TransportationCatastropheDeductibleId = "8" '500; static data
            .TransportationCatastropheDescription = "Trans prop desc"
            .TransportationCatastropheAdditionalInterests = Nothing
            .TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .TransportationCatastropheLoadingUnloading = True
            .TransportationCatastropheNamedPerils = True
            'added 3/25/2015
            .TransportationAnyOneOwnedVehicleLimit = "12000" 'note: cov also has CoverageBasisTypeId set to 1; fyi this value may not make sense since cat limit is lower
            .TransportationAnyOneOwnedVehicleNumberOfVehicles = "2" 'CoverageDetail
            .TransportationAnyOneOwnedVehicleRate = "3.300"
            .MotorTruckCargoScheduledVehicles = New List(Of QuickQuoteScheduledVehicle)
            Dim sv1 As New QuickQuoteScheduledVehicle
            With sv1
                .Make = "Chevy"
                .Model = "Camaro"
                .VIN = "1234"
                .Year = "1999"
                .Limit = "2000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv1)
            Dim sv2 As New QuickQuoteScheduledVehicle
            With sv2
                .Make = "Chevy"
                .Model = "Beretta"
                .VIN = "8888"
                .Year = "1990"
                .Limit = "1000" 'added 4/2/2015
            End With
            .MotorTruckCargoScheduledVehicles.Add(sv2)
            .MotorTruckCargoScheduledVehicleAdditionalInterests = Nothing
            .MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .MotorTruckCargoScheduledVehicleLoadingUnloading = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleNamedPerils = True 'CoverageDetail
            .MotorTruckCargoScheduledVehicleOperatingRadius = "55" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleRate = "2.300" 'CoverageDetail
            .MotorTruckCargoScheduledVehicleDeductibleId = "8" 'static data; 500
            .MotorTruckCargoScheduledVehicleDescription = "prop desc"
            .MotorTruckCargoScheduledVehicleCatastropheLimit = "5000"
            'added 3/26/2015
            .SignsAdditionalInterests = Nothing
            .SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            .SignsMaximumDeductible = "500" 'CoverageDetail
            .SignsMinimumDeductible = "50" 'CoverageDetail
            .SignsValuationMethodTypeId = "2" 'Actual Cash Value
            .SignsDeductibleId = "34" '5%
            .SignsAnyOneLossCatastropheLimit = "5000"
            '-------------end CIM policy level covs-------------------

            '-----------CRM policy level fields/covs-----------------
            'added 3/31/2015
            'policy-level fields
            .CPP_Has_Crime_PackagePart = True 'needed for CRM packagePart on CPP
            .AggregateLimit = "20000"
            .NumberOfEmployees = "11"
            ''.ProgramTypeId = "50" 'Employee Theft & Forgery
            '.ProgramTypeId = "48" 'Commercial Crime
            ''.ProgramTypeId = "49" 'Government Crime
            'note: different property when part of package (since GL already uses ProgramTypeId)
            '.CPP_CRM_ProgramTypeId = "50" 'Employee Theft & Forgery
            .CPP_CRM_ProgramTypeId = "48" 'Commercial Crime
            '.CPP_CRM_ProgramTypeId = "49" 'Government Crime

            .ClassificationCodes = New List(Of QuickQuoteClassificationCode)
            Dim cc As New QuickQuoteClassificationCode
            With cc
                .ClassCode = "4480"
                .ClassDescription = "Shoe Stores"
                .PMA = "Mercantile"
            End With
            .ClassificationCodes.Add(cc)

            'policy level covs
            'added 3/31/2015
            .EmployeeTheftLimit = "50000" 'note: cov also has CoverageBasisTypeId 1
            .EmployeeTheftDeductibleId = "9" '1,000
            .EmployeeTheftNumberOfRatableEmployees = "11"
            .EmployeeTheftNumberOfAdditionalPremises = "1"
            .EmployeeTheftFaithfulPerformanceOfDutyTypeId = "1" 'Other Than Benefits Plan as Sole Insured
            .EmployeeTheftScheduledEmployeeBenefitPlans = New List(Of String)
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 1")
            .EmployeeTheftScheduledEmployeeBenefitPlans.Add("employee benefits plans 2")
            .EmployeeTheftIncludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 1")
            .EmployeeTheftIncludedPersonsOrClasses.Add("designated person 2")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = New List(Of String)
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 1")
            .EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add("chairperson 2")
            .EmployeeTheftScheduledPartners = New List(Of String)
            .EmployeeTheftScheduledPartners.Add("partner 1")
            .EmployeeTheftScheduledPartners.Add("partner 2")
            .EmployeeTheftScheduledLLCMembers = New List(Of String)
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 1")
            .EmployeeTheftScheduledLLCMembers.Add("LLC member 2")
            .EmployeeTheftScheduledNonCompensatedOfficers = New List(Of String)
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 1")
            .EmployeeTheftScheduledNonCompensatedOfficers.Add("non-compensated officer 2")
            .EmployeeTheftExcludedPersonsOrClasses = New List(Of String)
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 1")
            .EmployeeTheftExcludedPersonsOrClasses.Add("excluded person 2")
            .InsidePremisesTheftOfMoneyAndSecuritiesLimit = "20000" 'note: cov also has CoverageBasisTypeId 1
            .InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = "9" 'static data; 1,000
            .InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = "3" 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = True 'CoverageDetail
            .InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = True 'CoverageDetail
            .OutsideThePremisesLimit = "30000" 'note: cov also has CoverageBasisTypeId 1
            .OutsideThePremisesDeductibleId = "15" 'static data; 2,500
            .OutsideThePremisesNumberOfPremises = "2" 'CoverageDetail
            .OutsideThePremisesIncludeSellingPrice = True 'CoverageDetail
            .OutsideThePremisesLimitToRobberyOnly = True 'CoverageDetail
            .OutsideThePremisesRequireRecordOfChecks = True 'CoverageDetail
            '-----------end CRM policy level fields/covs-----------------

            'added 2/10/2015
            If .Locations Is Nothing Then
                .Locations = New List(Of QuickQuoteLocation)
            End If
            If .Locations.Count = 0 Then
                Dim l As New QuickQuoteLocation
                .Locations.Add(l)
            End If
            With .Locations(0)
                .Address = qqHelper.CloneObject(quickQuote.Policyholder.Address)
                .Description = "Loc 1"
                .ProtectionClassId = "12" '01
                '.CauseOfLossTypeId = "1" 'Basic Form (At least one location must have a Special Form Cause of Loss.)
                .CauseOfLossTypeId = "3" 'Special Form Including Theft
                .DeductibleId = "9" '1,000
                '.CoinsuranceTypeId = "2" '50% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
                .CoinsuranceTypeId = "0" 'N/A
                .ValuationMethodTypeId = "2" 'Actual Cash Value
                .EquipmentBreakdownDeductibleId = "8" '500
                .EquipmentBreakdownOccupancyTypeId = "8" 'Athletic Clubs
                .ClassificationCode.ClassCode = "0844"
                .ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
                .ClassificationCode.PMA = "Service"

                '---------more CGL--------
                .GLClassifications = New Generic.List(Of QuickQuoteGLClassification) 'not getting rated prem in Diamond
                Dim l1gl As New QuickQuoteGLClassification
                With l1gl
                    .ClassCode = "96611"
                    .ClassDescription = "Interior Decorators"
                    .PremiumExposure = "5,000"
                    .PremiumBase = "Payroll"
                    .PremiumBaseShort = "p" 'added 11/26/2012 for testing (needed for dec)
                End With
                .GLClassifications.Add(l1gl)
                Dim l1gl2 As New QuickQuoteGLClassification
                With l1gl2
                    .ClassCode = "57997"
                    .ClassDescription = "Photo Finishing Labs"
                    .PremiumExposure = "30,000"
                    .PremiumBase = "Gross Sales, Products/Complete"
                    .PremiumBaseShort = "s" 'added 11/26/2012 for testing (needed for dec)
                End With
                .GLClassifications.Add(l1gl2)
                '------end more CGL-------

                '-----------more CPR---------
                'added 3/20/2013 for testing
                .PropertyInTheOpenRecords = New Generic.List(Of QuickQuotePropertyInTheOpenRecord)
                Dim p As New QuickQuotePropertyInTheOpenRecord
                With p
                    .Description = "Test Desc"
                    .Limit = "1000"
                    .IncludedInBlanketCoverage = True
                    .ConstructionTypeId = "1" 'Frame '"2" 'Frame
                    .EarthquakeApplies = True
                    .RatingTypeId = "3" 'Special Class Rate
                    .CauseOfLossTypeId = "3" 'Special Form Including Theft
                    .DeductibleId = "15" '2,500
                    .CoinsuranceTypeId = "5" '80% '"4" '70%
                    .ValuationId = "1" 'Replacement Cost
                    .OptionalTheftDeductibleId = "8" '500
                    .OptionalWindstormOrHailDeductibleId = "8" '500
                    .InflationGuardTypeId = "1" '2
                    .FeetToFireHydrant = "50"
                    .MilesToFireDepartment = "1"
                    .SpecialClassCodeTypeId = "1" 'Masonry or Metal with no combustible wrapping or pallets
                    .ProtectionClassId = "12" '01
                End With
                .PropertyInTheOpenRecords.Add(p)
                Dim p2 As New QuickQuotePropertyInTheOpenRecord
                With p2
                    .Description = "Test Desc2"
                    .Limit = "2000"
                    .IncludedInBlanketCoverage = True
                    .ConstructionTypeId = "1" 'Frame '"2" 'Frame
                    .EarthquakeApplies = True
                    .RatingTypeId = "3" 'Special Class Rate
                    .CauseOfLossTypeId = "3" 'Special Form Including Theft
                    .DeductibleId = "15" '2,500
                    .CoinsuranceTypeId = "5" '80% '"4" '70%
                    .ValuationId = "1" 'Replacement Cost
                    .OptionalTheftDeductibleId = "8" '500
                    .OptionalWindstormOrHailDeductibleId = "8" '500
                    .InflationGuardTypeId = "1" '2
                    .FeetToFireHydrant = "50"
                    .MilesToFireDepartment = "1"
                    .SpecialClassCodeTypeId = "4" 'Aircraft Stored In The Open
                    .ProtectionClassId = "12" '01
                End With
                .PropertyInTheOpenRecords.Add(p2)
                '---------end more CRP---------

                If .Buildings Is Nothing Then
                    .Buildings = New List(Of QuickQuoteBuilding)
                End If
                If .Buildings.Count = 0 Then
                    Dim b As New QuickQuoteBuilding
                    .Buildings.Add(b)
                End If
                With .Buildings(0)
                    .YearBuilt = "1995"
                    .SquareFeet = "1800"
                    .ConstructionId = "2" 'Frame; added 4/1/2015 to get past validation

                    .Description = "Loc 1 Build 1"
                    'could set .ClassificationCode(Can't calculate Building Coverage without specified Class Code for location #1, building #1.)
                    .ClassificationCode.ClassCode = "0844"
                    '.ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
                    .ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
                    .ClassificationCode.PMA = "Service"
                    '.ConstructionId = "7" 'Frame (10/18/2012:  7 is only valid for BOP)
                    '.ConstructionId = "2" 'Frame; already set above
                    '.EarthquakeBuildingClassificationTypeId = "0" 'N/A
                    .EarthquakeBuildingClassificationTypeId = "12" '2A - All-metal buildings which are one story in height and 20,000 sq. ft. or less of ground floor space. (testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012)
                    .PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores (rate_grade = 1); added 10/23/2012

                    .Limit = "120000"
                    .InflationGuardTypeId = "1" '2
                    .EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
                    .RatingTypeId = "2" 'Specific Rated
                    '.RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012); 10/11/2012 - There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.
                    .CauseOfLossTypeId = "2" 'Broad Form
                    .DeductibleId = "8" '500
                    .CoinsuranceTypeId = "3" '60%
                    .ValuationId = "1" 'Replacement Cost

                    .PersPropCov_PersonalPropertyLimit = "110000"
                    .PersPropCov_PropertyTypeId = "7" 'Personal Property - Including Stock
                    .PersPropCov_RiskTypeId = "5" 'Type 3 - All Other Personal Property
                    '.PersPropCov_EarthquakeApplies = False
                    .PersPropCov_EarthquakeApplies = True 'testing PersonalProperty_EarthquakeRateGradeTypeId 10/23/2012
                    '.PersPropCov_RatingTypeId = "1" 'Class Rated (10/15/2012 error:  Location #1 - Building #1 - Personal Property Coverage with Risk Type 'Type 3 - All Other Personal Property' must be Specific Rated for Class Code 0844.)
                    .PersPropCov_RatingTypeId = "2" 'Specific Rated
                    .PersPropCov_CauseOfLossTypeId = "3" 'Special Form Including Theft
                    .PersPropCov_DeductibleId = "15" '2,500
                    .PersPropCov_CoinsuranceTypeId = "4" '70%
                    .PersPropCov_ValuationId = "1" 'Replacement Cost
                    'could set .PersPropCov_ClassificationCode
                    .PersPropCov_ClassificationCode.ClassCode = "0844"
                    .PersPropCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
                    .PersPropCov_ClassificationCode.PMA = "Service"
                    '10/15/2012 - testing after error:  Location #1 - Building #1 - Personal Property - Unable to get territory factor: Invalid PMA for class code 0844.
                    '.PersPropCov_ClassificationCode.ClassCode = "0311"
                    '.PersPropCov_ClassificationCode.ClassDescription = "Apartment Buildings"
                    '.PersPropCov_ClassificationCode.PMA = "Apartment House"

                    .PersPropOfOthers_PersonalPropertyLimit = "127000"
                    .PersPropOfOthers_RiskTypeId = "5" 'Type 3 - All Other Personal Property
                    .PersPropOfOthers_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012
                    .PersPropOfOthers_RatingTypeId = "2" 'Specific Rated
                    '.PersPropOfOthers_RatingTypeId = "1" 'Class Rated (just trying to get it to work - 10/10/2012)
                    .PersPropOfOthers_CauseOfLossTypeId = "4" 'Special Form Excluding Theft
                    .PersPropOfOthers_DeductibleId = "16" '5,000
                    .PersPropOfOthers_CoinsuranceTypeId = "5" '80%
                    '.PersPropOfOthers_ValuationId = "3" 'Functional Building Valuation
                    .PersPropOfOthers_ValuationId = "7" 'Functional Replacement Cost
                    'could set .PersPropOfOthers_ClassificationCode
                    .PersPropOfOthers_ClassificationCode.ClassCode = "0844"
                    '.PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
                    .PersPropOfOthers_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
                    .PersPropOfOthers_ClassificationCode.PMA = "Service"

                    'Error as-of 10/15/2012:  Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
                    .BusinessIncomeCov_Limit = "117000"
                    '.BusinessIncomeCov_CoinsuranceTypeId = "6" '90% (Location #1 - Building #1 - Business Income Coinsurance set to N/A because Monthly Period or Maximum Period was selected.)
                    .BusinessIncomeCov_CoinsuranceTypeId = "0" 'N/A (commented 11/13/2012 to see if it matters)
                    .BusinessIncomeCov_MonthlyPeriodTypeId = "2" '1/4
                    .BusinessIncomeCov_BusinessIncomeTypeId = "3" 'Business Income Other than Rental Value With Extra Expense
                    '.BusinessIncomeCov_RiskTypeId = "7" 'Manufacturing; Error in GetProtectionClassMultiplier: Unable to locate X Axis (Table[ProtectionClassMultiplier] Value[7])
                    '.BusinessIncomeCov_RiskTypeId = "0" 'N/A; Location #1 - Building #1 - A valid Risk Type must be selected for Business Income Coverage.
                    .BusinessIncomeCov_RiskTypeId = "9" 'Rental Properties
                    .BusinessIncomeCov_EarthquakeApplies = True 'False'changed to True for testing 11/5/2012 (error:  Error in CalculateBusinessIncomeTimeElementEarthquakePremium: Object reference not set to an instance of an object.)
                    .NumberOfStories = "2" 'added 11/13/2012 to hopefully work w/ business income EQ (this is needed (also needed to set CoverageBasisTypeId):  Error calculating Business Income Time Element Earthquake coverage for location #1, building #1: Number of stories cannot be 0.)
                    'testing 11/9/2012 to see if I can add it after getting into Diamond and find difference in XML
                    '.BusinessIncomeCov_EarthquakeApplies = False
                    '.BusinessIncomeCov_RatingTypeId = "1" 'Class Rated (There was a problem getting Building Loss Cost factor for Location #1, Building #1: Class Code '0844' must be Specific Rated.)
                    .BusinessIncomeCov_RatingTypeId = "2" 'Specific Rated
                    .BusinessIncomeCov_CauseOfLossTypeId = "1" 'Basic form
                    'could set .BusinessIncomeCov_ClassificationCode
                    .BusinessIncomeCov_ClassificationCode.ClassCode = "0844"
                    '.BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For_Profit only"
                    .BusinessIncomeCov_ClassificationCode.ClassDescription = "Athletic or Sports Contests - in buildings - lessees - Not-For-Profit only"
                    .BusinessIncomeCov_ClassificationCode.PMA = "Service"
                    .BusinessIncomeCov_WaitingPeriodTypeId = "3" '72 (previous validation message:  Location #1 - Building #1 - Please select Waiting Period on Business Income Coverage.)

                    'commented out 10/10/2012 since they're not working right now
                    '.Building_BusinessIncome_Group1_Rate = ".924" '".7"
                    '.Building_BusinessIncome_Group2_Rate = ".924" '".2"
                    '.PersonalProperty_Group1_Rate = ".924" '".6"
                    '.PersonalProperty_Group2_Rate = ".924" '".15"

                    'works when just setting LossCost (as-of 11/5/2012)
                    .Building_BusinessIncome_Group1_LossCost = "0.450" '".4"
                    .Building_BusinessIncome_Group2_LossCost = "0.450" '".1"
                    .PersonalProperty_Group1_LossCost = "0.450" '".3"
                    .PersonalProperty_Group2_LossCost = "0.450" '".05"

                    'added 11/29/2012 for testing
                    .OptionalTheftDeductibleId = "8" '500
                    .OptionalWindstormOrHailDeductibleId = "8" '500
                    .PersPropCov_OptionalTheftDeductibleId = "8" '500
                    .PersPropCov_OptionalWindstormOrHailDeductibleId = "8" '500
                    .PersPropOfOthers_OptionalTheftDeductibleId = "8" '500
                    .PersPropOfOthers_OptionalWindstormOrHailDeductibleId = "8" '500

                    'added for testing 12/4/2012; isn't working yet
                    '.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                    'Dim ai As New QuickQuoteAdditionalInterest
                    'ai.Name = .Client.Name
                    'ai.Address = .Client.Address
                    'ai.Description = "Test AI Description"
                    'ai.Other = ""
                    'ai.TypeId = "65" 'Loss Payable - Loss Payable
                    '.AdditionalInterests.Add(ai)

                    '-------------CIM building covs-------------
                    .YearBuilt = "1995"
                    .SquareFeet = "1800"
                    .ConstructionId = "2" 'Frame; added 4/1/2015 to get past validation; already being set above w/ prev CPP code

                    .ComputerHardwareLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerHardwareRate = "0.500"
                    .ComputerProgramsApplicationsAndMediaLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerProgramsApplicationsAndMediaRate = "0.450"
                    .ComputerBusinessIncomeLimit = "50000" 'may also need to set Coverage.CoverageBasisTypeId to 1
                    .ComputerBusinessIncomeRate = "0.400"

                    'added 3/16/2015
                    .FineArtsScheduledItems = New List(Of QuickQuoteFineArtsScheduledItem)
                    Dim fa1 As New QuickQuoteFineArtsScheduledItem
                    With fa1
                        .Description = "Fine Arts #1"
                        .Limit = "2000"
                    End With
                    .FineArtsScheduledItems.Add(fa1)
                    Dim fa2 As New QuickQuoteFineArtsScheduledItem
                    With fa2
                        .Description = "Fine Arts #2"
                        .Limit = "3500"
                    End With
                    .FineArtsScheduledItems.Add(fa2)

                    'added 3/26/2015
                    .ScheduledSigns = New List(Of QuickQuoteScheduledSign)
                    Dim ss1 As New QuickQuoteScheduledSign
                    With ss1
                        .Limit = "1000"
                        .IsIndoor = True
                        .Description = "Scheduled sign #1"
                    End With
                    .ScheduledSigns.Add(ss1)
                    Dim ss2 As New QuickQuoteScheduledSign
                    With ss2
                        .Limit = "900"
                        .IsIndoor = False
                        .Description = "Scheduled sign #2"
                    End With
                    .ScheduledSigns.Add(ss2)
                    .UnscheduledSignsLimit = "2000"
                    '-----------end CIM building covs-----------
                End With 'building 1
            End With 'location 1

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub

    Protected Sub btnCreditDebits_Click(sender As Object, e As System.EventArgs) Handles btnCreditDebits.Click
        If Me.lblCreditsDebitsLink.Text <> "" Then
            Response.Redirect(Me.lblCreditsDebitsLink.Text)
        End If
    End Sub

    Private Sub AppGapTest()
        Dim qId As String = "439"
        Dim errMsg As String = ""
        QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, errMsg)
        If errMsg = "" AndAlso quickQuote IsNot Nothing Then
            QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, qId, errMsg)
            If errMsg <> "" Then

            End If
        End If
    End Sub
    Private Sub DonWCtest()
        Dim qId As String = ""
        Dim errMsg As String = ""
        QQxml.CopyQuote("1172", qId, errMsg)
        If errMsg = "" Then
            QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, errMsg)
            If errMsg = "" Then
                quickQuote.Locations = New Generic.List(Of QuickQuoteLocation)
                Dim l1 As New QuickQuoteLocation
                l1.Address.HouseNum = "159"
                l1.Address.StreetName = "MAIN ST"
                l1.Address.City = "WESTFIELD"
                l1.Address.Zip = "46074-1234"
                l1.Address.County = "HAMILTON"
                l1.Address.StateId = "IN" 'caused error
                quickQuote.Locations.Add(l1)
            End If
        End If
    End Sub
    Private Sub TestAuthTokenAndWorkFlowQueue()
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
        End If
        Using ratingService As New CRS.ComparativeRatingService
            'removed hard-coded test values 7/25/2012
            Dim originator As String = "nxtech" '"web"'looks like nxtech might be required here
            Dim loginName As String = ""
            Dim loginPassword As String = ""
            If System.Web.HttpContext.Current.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondUsername").ToString <> "" Then
                loginName = System.Web.HttpContext.Current.Session("DiamondUsername").ToString
            ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                loginName = ConfigurationManager.AppSettings("QuickQuoteTestUsername").ToString
            End If
            If System.Web.HttpContext.Current.Session("DiamondPassword") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondPassword").ToString <> "" Then
                loginPassword = System.Web.HttpContext.Current.Session("DiamondPassword").ToString
            ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
                loginPassword = ConfigurationManager.AppSettings("QuickQuoteTestPassword").ToString
            End If

            Dim strToken As String = ""
            'If Diamond.Web.BaseControls.SignedOnUser IsNot Nothing AndAlso Diamond.Web.BaseControls.SignedOnUser.LoginName <> "" AndAlso Diamond.Web.BaseControls.SignedOnUser.Password <> "" Then
            '    loginName = Diamond.Web.BaseControls.SignedOnUser.LoginName
            '    loginPassword = Diamond.Web.BaseControls.SignedOnUser.Password
            'End If
            'updated 8/16/2012 to store token in session
            If System.Web.HttpContext.Current.Session("DiamondQuickQuoteToken") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondQuickQuoteToken").ToString <> "" Then
                strToken = System.Web.HttpContext.Current.Session("DiamondQuickQuoteToken").ToString
                'Else
                'updated 10/8/2012 to make sure loginName and loginPassword were present
            ElseIf loginName <> "" AndAlso loginPassword <> "" Then
                strToken = ratingService.GetAuthenticationToken(originator, loginName, loginPassword)

                'added 10/8/2012 just in case 1st call to service fails
                If strToken Is Nothing OrElse strToken = "" Then
                    strToken = ratingService.GetAuthenticationToken(originator, loginName, loginPassword)
                End If
            End If

            If strToken IsNot Nothing AndAlso strToken <> "" Then
                System.Web.HttpContext.Current.Session("DiamondQuickQuoteToken") = strToken
                Dim wf As CRS.WorkflowInformation = ratingService.GetAgencyWorkflowInformationEncrypted(originator, strToken, True, True, quickQuote.AgencyCode)
                If wf IsNot Nothing AndAlso IsNumeric(wf.WorkflowQueueId) = True Then
                    quickQuote.WorkflowQueueId = wf.WorkflowQueueId
                    'Session("AgencyID") = wf.AgencyId
                End If
            End If
        End Using
    End Sub
    Private Sub TestEnabledLOBs()
        Dim isCurrentUserStaff As Boolean = qqHelper.IsHomeOfficeStaffUser
        If ConfigurationManager.AppSettings("QuickQuote_BOP_EnabledUsers") IsNot Nothing AndAlso (UCase(ConfigurationManager.AppSettings("QuickQuote_BOP_EnabledUsers").ToString) = "ALL" OrElse (isCurrentUserStaff = True AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_BOP_EnabledUsers").ToString) = "STAFF")) Then
            'enabled BOP radio button
        Else
            'diable BOP radio button
        End If
        If ConfigurationManager.AppSettings("QuickQuote_WC_EnabledUsers") IsNot Nothing AndAlso (UCase(ConfigurationManager.AppSettings("QuickQuote_WC_EnabledUsers").ToString) = "ALL" OrElse (isCurrentUserStaff = True AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_WC_EnabledUsers").ToString) = "STAFF")) Then
            'enabled WC radio button
        Else
            'diable WC radio button
        End If
    End Sub
    Private Sub TestReRate()
        Dim qId As String = "425"
        Dim err As String = ""
        QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
        If err = "" Then
            QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
                If err = "" Then
                    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
                    If err = "" Then
                        QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
                        If err = "" Then
                            QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
                            If err = "" Then

                            End If
                        End If
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub GetDatabaseXml(ByVal quoteId As Integer)
        Dim qq As QuickQuoteObject = Nothing
        Dim errMsg As String = ""
        Dim strXml As String = ""

        'for quote xml
        QQxml.GetQuote(quoteId.ToString, QuickQuoteXML.QuickQuoteXmlType.Quote, qq, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        qq = Nothing
        errMsg = ""
        strXml = ""

        'for rated quote xml
        QQxml.GetQuote(quoteId.ToString, QuickQuoteXML.QuickQuoteXmlType.RatedQuote, qq, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        qq = Nothing
        errMsg = ""
        strXml = ""

        'for app gap xml
        QQxml.GetQuote(quoteId.ToString, QuickQuoteXML.QuickQuoteXmlType.AppGap, qq, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        qq = Nothing
        errMsg = ""
        strXml = ""

        'for rated app gap xml
        QQxml.GetQuote(quoteId.ToString, QuickQuoteXML.QuickQuoteXmlType.RatedAppGap, qq, strXml, errMsg)
        If errMsg <> "" Then
            errMsg = errMsg
        End If
        qq = Nothing
        errMsg = ""
        strXml = ""
    End Sub
    'added 7/5/2013 for testing
    Private Sub DeleteInvalidVelociRaterNotes()
        Using Sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            'for ones w/ invalid policy id
            Sql.queryOrStoredProc = "select N.note_id from Notes as N with (nolock) where N.title like '%VelociRater%' and NOT EXISTS (select P.policy_id from Policy as P with (nolock) where P.policy_id = N.create_key)"

            'for all old ones
            'Sql.queryOrStoredProc = "select N.note_id from Notes as N with (nolock) where N.title = 'VelociRater Activity'"
            Dim dr As SqlClient.SqlDataReader = Sql.GetDataReader
            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                While dr.Read
                    If dr.Item("note_id").ToString.Trim <> "" AndAlso IsNumeric(dr.Item("note_id").ToString.Trim) = True Then
                        QQxml.DeleteNote(CInt(dr.Item("note_id").ToString.Trim))
                    End If
                End While
            End If
        End Using
    End Sub
    'added 10/1/2013 for testing
    Private Sub Test_Quote_Save(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If
        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            'quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal

        End If

        With quickQuote
            '.EffectiveDate = Date.Today.ToString

            'quickQuote.UseTierOverride = True 'should only be used for testing


        End With


        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If
    End Sub

    'added 11/19/2013 for testing Static Data
    Private Sub StaticDataTesting()
        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList("QuickQuoteObject", "OccurrenceLiabilityLimitId")
        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList("QuickQuoteLocation", "ProtectionClassId")

        'used w/ sdl above
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(sdl, QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability) 'for OccurrenceLiabilityLimitId (will include everything)
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(sdl, QuickQuoteObject.QuickQuoteLobType.CommercialBOP) 'for OccurrenceLiabilityLimitId (will exclude CGL items)
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.StaticDataOptions(sdl, QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.Pers) 'for ProtectionClassId

        'replaces sdl and options above
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions("QuickQuoteObject", "OccurrenceLiabilityLimitId", QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability)
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions("QuickQuoteLocation", "ProtectionClassId", QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.Pers)

        'Dim text As String = qqHelper.GetStaticDataTextForValue(options, "9") 'for OccurrenceLiabilityLimitId (50,000); will only find when pulling all or CGL
        'Dim val As String = qqHelper.GetStaticDataValueForText(options, "25,000") 'for OccurrenceLiabilityLimitId (8); will only find when pulling all or CGL
        'Dim val As String = qqHelper.GetStaticDataValueForText(options, "1,000,000") 'for OccurrenceLiabilityLimitId (56)
        'Dim text As String = qqHelper.GetStaticDataTextForValue(options, "3") 'for ProtectionClassId (3)
        'Dim val As String = qqHelper.GetStaticDataValueForText(options, "10") 'for ProtectionClassId (10)

        'Dim Os As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions("QuickQuoteObject", "ProtectionClassId", QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.Pers)

        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteBuilding, QuickQuoteHelperClass.QuickQuotePropertyName.ValuationMethodId)
        'Dim strWebCache As String = qqHelper.LoopThruWebCache
        'Dim strObjectCache As String = qqHelper.LoopThruObjectCache
        'Dim sdl2 As QuickQuoteStaticDataList = qqHelper.GetStaticDataList("QuickQuoteBuilding", "ValuationMethodId")
        'change file
        'Dim sdl3 As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteBuilding, QuickQuoteHelperClass.QuickQuotePropertyName.ValuationMethodId)
        'Dim sdl4 As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteBuilding, QuickQuoteHelperClass.QuickQuotePropertyName.ValuationMethodId)

        'qqHelper.AddTestApplicationVariables()
        'QuickQuoteHelperClass.TestProp = QuickQuoteHelperClass.TestProp

        ''Dim appVars As String = qqHelper.LoopThruApplicationVariables
        'Dim appStatVars As String = qqHelper.LoopThruApplicationStaticVariables

        'Dim relatedValue_prop As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteSectionIAndIICoverage, QuickQuoteHelperClass.QuickQuotePropertyName.MainCoverageCodeId, "930", QuickQuoteHelperClass.QuickQuotePropertyName.PropertyCoverageCodeId) 'Structures Rented To Others (HO-40); 20091
        'Dim relatedValue_liab As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteSectionIAndIICoverage, QuickQuoteHelperClass.QuickQuotePropertyName.PropertyCoverageCodeId, relatedValue_prop, QuickQuoteHelperClass.QuickQuotePropertyName.LiabilityCoverageCodeId) '20092
        'Dim relatedValue_liab2 As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteSectionIAndIICoverage, QuickQuoteHelperClass.QuickQuotePropertyName.MainCoverageCodeId, "930", QuickQuoteHelperClass.QuickQuotePropertyName.LiabilityCoverageCodeId) 'Structures Rented To Others (HO-40); 20092


        'Using qq As New QuickQuoteObject
        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability 'LobId 9; VersionId 13
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.LobId = "3" 'LobType DwellingFirePersonal; VersionId 22
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.VersionId = "8" 'LobType CommercialAuto; LobId 20
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.VersionId = "43" 'LobType None; LobId 17 (Farm)
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.LobId = "15" 'LobType None; VersionId empty string (Commercial NonTraditional)
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.VersionId = "126" 'invalid
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.None '(didn't change other values)
        '    ''If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    ''End If
        '    ''qq.LobType = QuickQuoteObject.QuickQuoteLobType.None
        '    ''qq.LobId = ""
        '    ''qq.VersionId = ""

        '    'qq.LobId = "1" 'LobType AutoPersonal; VersionId 42

        '    'qq.VersionId = "0" 'LobId 0; LobType None '(didn't change other values)

        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP 'LobId 25; VersionId 10

        '    'qq.LobId = "0" 'VersionId = 0; LobType None '(changed other values)

        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.None

        '    'qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage 'LobId 23; VersionId 14

        '    'qq.LobId = "" '(didn't change other values)
        '    'qq.LobId = "133"
        '    'qq.LobId = "3"
        '    'qq.LobId = "35"
        '    'If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None OrElse qq.LobId = "" OrElse qq.VersionId = "" Then

        '    'End If
        'End Using

        'With quickQuote
        '    If quickQuote Is Nothing Then
        '        quickQuote = New QuickQuoteObject
        '        With quickQuote
        '            .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        '            With .Client
        '                With .Name
        '                    .FirstName = "First"
        '                    .LastName = "Last"
        '                End With
        '                With .Address
        '                    .AddressNum = "123"
        '                    .StreetName = "Test Street"
        '                End With
        '            End With
        '        End With
        '    End If
        'End With

        '12/6/2013 - testing ignoreForLists functionality and updated code to use SDL.options when getting text/value only
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAddress, QuickQuoteHelperClass.QuickQuotePropertyName.StateId)
        'Dim testStateId As String = "78"
        'Dim textForStateId As String = ""
        'If options IsNot Nothing Then
        '    textForStateId = qqHelper.GetStaticDataTextForValue(options, testStateId)
        '    If textForStateId <> "" Then

        '    End If
        'End If
        'textForStateId = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAddress, QuickQuoteHelperClass.QuickQuotePropertyName.StateId, testStateId)
        'If textForStateId <> "" Then

        'End If

        'testing 12/6/2013 w/ test class code to return SDL.options (to see if StaticDataList in memory persists any changes to Options when they are changed outside of this class)
        '12/6/2013 continued... test confirmed; code still persists original Options
        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAddress, QuickQuoteHelperClass.QuickQuotePropertyName.StateId)
        'If sdl IsNot Nothing Then
        '    Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(sdl, QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.None, False)
        '    If options IsNot Nothing AndAlso options.Count > 1 Then
        '        'For i As Integer = 1 To options.Count - 1
        '        '    'remove everything after the 1st 1
        '        '    options.RemoveAt(i) 'eventually catches error since available item indexes keep changing as items are removed and the latter indexes are no longer valid at some point
        '        'Next
        '        Dim i As Integer = options.Count - 1
        '        Do Until i = 0
        '            options.RemoveAt(i)
        '            i -= 1
        '            If i = 0 Then
        '                Exit Do
        '            End If
        '        Loop

        '        Dim options2 As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAddress, QuickQuoteHelperClass.QuickQuotePropertyName.StateId)
        '        If options2 IsNot Nothing Then

        '        End If
        '    End If
        'End If

        'testing 12/23/2013 for sorting ddls
        'Dim ddl As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteInlandMarine, QuickQuoteHelperClass.QuickQuotePropertyName.RateInformationTypeId)
        'If ddl IsNot Nothing Then

        'End If
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteInlandMarine, QuickQuoteHelperClass.QuickQuotePropertyName.RateInformationTypeId, QuickQuoteStaticDataOption.SortBy.TextAscending)
        'If ddl IsNot Nothing Then

        'End If
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteInlandMarine, QuickQuoteHelperClass.QuickQuotePropertyName.RateInformationTypeId, QuickQuoteStaticDataOption.SortBy.ValueDescending)
        'If ddl IsNot Nothing Then

        'End If
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteInlandMarine, QuickQuoteHelperClass.QuickQuotePropertyName.RateInformationTypeId, QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.None, True)
        'If ddl IsNot Nothing Then

        'End If

        'testing 12/23/2013 for sorting StaticDataOptions
        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteInlandMarine, QuickQuoteHelperClass.QuickQuotePropertyName.RateInformationTypeId)
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(sdl)
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(sdl, QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.None, False)
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending)
        'If options IsNot Nothing Then

        'End If
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.ValueDescending) 'puts -1 before 1 and 0 (numeric thing... since properties are string); still doesn't work after new isnumeric/ctype double logic; 12/24/2013 - okay after correcting isnumeric logic to check for IsNumeric(x.Text) instead of IsNumeric(x)
        'If options IsNot Nothing Then

        'End If
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending, True) 'puts 0 before -1 (should keep in original order); still doesn't work after new hasEmptiesAtBeginning/range logic (-1 at beginning but 0 in middle... text order; probably related to options already being re-ordered by previous test above); stayed in original value order even after correcting hasEmptiesAtBeginning/range logic (to only sort what's left); 12/24/2013 - works after switching to IComparer and Sort overload that takes range
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsText)'works perfectly
        'If options IsNot Nothing Then

        'End If
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsNothing)'works perfectly
        'If options IsNot Nothing Then

        'End If
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.MaintainEmptiesAtBeginningAndHandleOthersAsNothing)'works perfectly
        'If options IsNot Nothing Then

        'End If
        'qqHelper.SortStaticDataOptions(options, QuickQuoteStaticDataOption.SortBy.TextAscending, QuickQuoteStaticDataOption.EmptyZeroOrNoneEvaluationType.HandleAsText)'works perfectly
        'If options IsNot Nothing Then

        'End If

        '12/26/2013 - testing ddl loading and using SDL options when possible (instead of cloning)
        'Dim ddl As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuotePriorCarrier, QuickQuoteHelperClass.QuickQuotePropertyName.TypeId, QuickQuoteStaticDataOption.SortBy.TextDescending)
        'If ddl IsNot Nothing AndAlso ddl.Items.Count > 0 Then
        '    For Each li As ListItem In ddl.Items
        '        li.Text &= "_test"
        '    Next
        'End If
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuotePriorCarrier, QuickQuoteHelperClass.QuickQuotePropertyName.TypeId)
        'If ddl IsNot Nothing Then
        '    For Each li As ListItem In ddl.Items
        '        If li.Text <> "" Then

        '        End If
        '    Next
        'End If

        'Dim ddl_Lobs As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl_Lobs, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId)

        'Dim ddl_ProtectionClass As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl_ProtectionClass, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ProtectionClassId, QuickQuoteStaticDataOption.SortBy.None, QuickQuoteObject.QuickQuoteLobType.None, QuickQuoteHelperClass.PersOrComm.Pers)

        'Dim ddl_LocationDeductible_HOM As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl_LocationDeductible_HOM, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.DeductibleLimitId, QuickQuoteStaticDataOption.SortBy.None, QuickQuoteObject.QuickQuoteLobType.HomePersonal)

        'Dim ddl_LocationDeductible_DFR As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl_LocationDeductible_DFR, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.DeductibleLimitId, QuickQuoteStaticDataOption.SortBy.None, QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal)
    End Sub

    '7/22/2014 Flexi testing
    Dim MyPayee1 As String = "Ashley Hill"
    Dim MyPayeeText As String = "Ashley Hill and Brian Hill individually and as husband and wife and parents and legal guardians of a minor Bryson Hill"
    Dim MyRemitMemo1 As String = "Bryson Hill" 'WeedOutRemitsFromPayeeText--> individually and as husband and wife and parents and legal guardians of a minor Bryson Hill
    Dim MyRemitMemo2 As String = "Brian Hill"
    Dim MyRemitMemo3 As String = ""
    Dim holdPayeeText As String = ""
    Dim holdPayee As String = ""
    Dim holdRemit1 As String = ""
    Dim holdRemit2 As String = ""
    Dim holdRemit3 As String = ""
    Dim PayeeRemitErrorFlag As Boolean = False
    Dim MyPayeeRemitErrorMessage As String = ""
    Dim HoldText As String = ""
    Dim counter As Integer = 0
    Dim MyCheckNumber As String = ""
    Dim MyRemitName As String = ""
    Dim CheckErrorFlag As Boolean = False
    Dim MyCheckError As String = ""
    Dim MySQLerror As String = ""
    Private Sub ConvertRemitMemos()
        holdPayeeText = MyPayeeText
        holdPayee = MyPayee1
        holdRemit1 = MyRemitMemo1
        holdRemit2 = MyRemitMemo2
        holdRemit3 = MyRemitMemo3

        If MyRemitMemo1 <> "" Then
            '--see if payee is 1st in payeetext
            If Left(Trim(MyPayeeText), Len(Trim(MyPayee1))) <> Trim(MyPayee1) Then
                'set error
                PayeeRemitErrorFlag = True
                MyPayeeRemitErrorMessage = "Error on Draft # " & MyCheckNumber & " - The payee, '" & holdPayee & "', is not listed first in the 'Pay to the order of' text, '" & holdPayeeText & "'.  Although this draft will be imported into Flexi, it will need to be voided and re-issued correctly."
                DefaultRemitText()
                Exit Sub
            End If

            '---1st take payee1 out of payeeText---
            HoldText = Trim(Right(MyPayeeText, Len(MyPayeeText) - Len(MyPayee1)))

            '-----split up remainder based on position and length of RemitMemo1
            If MyRemitMemo2 <> "" Then
                counter = HoldText.IndexOf(MyRemitMemo1) + 1 + Len(MyRemitMemo1) '10/29/2013 note: actually picks up extra character; usually okay since it's a blank space most of the time

                '--handle for the payeetext being manually edited (switching order of remits)
                If Len(HoldText) - counter < 0 Then '= -1
                    '--remits are not in the correct order for the payeetext
                    'set error
                    PayeeRemitErrorFlag = True
                    MyPayeeRemitErrorMessage = "Error on Draft # " & MyCheckNumber & " - The remit memo names (RemitMemo1 = '" & holdRemit1 & "', RemitMemo2 = '" & holdRemit2 & "', and RemitMemo3 = '" & holdRemit3 & "') are not listed in the correct order on the 'Pay to the order of' text, '" & holdPayeeText & "'.  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary."
                    'DefaultRemitText()
                    WeedOutRemitsFromPayeeText()
                    Exit Sub
                End If

                MyRemitMemo1 = Trim(Left(HoldText, counter))
                HoldText = Trim(Right(HoldText, Len(HoldText) - counter))

                '-----split up remainder based on position and length of RemitMemo2
                If MyRemitMemo3 <> "" Then
                    counter = HoldText.IndexOf(MyRemitMemo2) + 1 + Len(MyRemitMemo2)

                    '--handle for the payeetext being manually edited (switching order of remits)
                    If Len(HoldText) - counter < 0 Then '= -1
                        '--remits are not in the correct order for the payeetext
                        'set error
                        PayeeRemitErrorFlag = True
                        MyPayeeRemitErrorMessage = "Error on Draft # " & MyCheckNumber & " - The remit memo names (RemitMemo1 = '" & holdRemit1 & "', RemitMemo2 = '" & holdRemit2 & "', and RemitMemo3 = '" & holdRemit3 & "') are not listed in the correct order on the 'Pay to the order of' text, '" & holdPayeeText & "'.  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary."
                        'DefaultRemitText()
                        WeedOutRemitsFromPayeeText()
                        Exit Sub
                    End If

                    MyRemitMemo2 = Trim(Left(HoldText, counter))
                    MyRemitMemo3 = Trim(Right(HoldText, Len(HoldText) - counter))
                Else
                    '---RemitMemo3 = ""
                    MyRemitMemo2 = HoldText
                    HoldText = ""
                End If
            Else
                '---RemitMemo2 = ""
                MyRemitMemo1 = HoldText
                HoldText = ""
            End If

        End If
    End Sub
    Private Sub DefaultRemitText()
        If holdRemit1 <> "" Then
            MyRemitMemo1 = "and " & holdRemit1
        Else
            MyRemitMemo1 = ""
        End If
        If holdRemit2 <> "" Then
            MyRemitMemo2 = "and " & holdRemit2
        Else
            MyRemitMemo2 = ""
        End If
        If holdRemit3 <> "" Then
            MyRemitMemo3 = "and " & holdRemit3
        Else
            MyRemitMemo3 = ""
        End If
    End Sub
    Private Sub WeedOutRemitsFromPayeeText()
        MyRemitMemo1 = ""
        MyRemitMemo2 = ""
        MyRemitMemo3 = ""

        '---1st take payee1 out of payeeText---
        HoldText = Trim(Right(holdPayeeText, Len(holdPayeeText) - Len(holdPayee)))

        If holdRemit1 <> "" Then
            Dim arHold1 As Array
            Dim arHold2 As Array
            Dim arHold3 As Array

            If HoldText.Contains(holdRemit1) Then
                arHold1 = Split(HoldText, holdRemit1)
                If UBound(arHold1) = 1 Then
                    'text before and after Remit1 (could even be empty string)
                    If holdRemit2 <> "" And arHold1(0).ToString.Trim.Contains(holdRemit2) And holdRemit3 <> "" And arHold1(0).ToString.Trim.Contains(holdRemit3) Then
                        'Remit2 and Remit3 are both before Remit1 (Remit1 is last)
                        arHold3 = Split(HoldText, holdRemit2)
                        If UBound(arHold3) = 1 Then
                            'text before and after Remit2 (could even be empty string)
                            If arHold3(0).ToString.Trim.Contains(holdRemit3) Then
                                'Remit3 is 1st and Remit2 is 2nd
                                counter = HoldText.IndexOf(holdRemit3) + 1 + Len(holdRemit3)
                                MyRemitMemo3 = Trim(Left(HoldText, counter))
                                'added 10/29/2013; previous logic is in Else
                                If counter > Len(HoldText) Then
                                    CheckErrorFlag = True
                                    SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                    If MyPayeeRemitErrorMessage <> "" Then
                                        MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                    End If
                                Else
                                    HoldText = Trim(Right(HoldText, Len(HoldText) - counter))

                                    If holdRemit1 <> "" Then
                                        counter = HoldText.IndexOf(holdRemit2) + 1 + Len(holdRemit2)
                                        MyRemitMemo2 = Trim(Left(HoldText, counter))
                                        'added 10/29/2013; previous logic is in Else
                                        If counter > Len(HoldText) Then
                                            CheckErrorFlag = True
                                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                            If MyPayeeRemitErrorMessage <> "" Then
                                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                            End If
                                        Else
                                            MyRemitMemo1 = Trim(Right(HoldText, Len(HoldText) - counter))
                                        End If
                                    Else
                                        MyRemitMemo2 = HoldText
                                        HoldText = ""
                                    End If
                                End If
                            Else
                                'Remit2 is 1st and Remit3 is 2nd
                                counter = HoldText.IndexOf(holdRemit2) + 1 + Len(holdRemit2)
                                MyRemitMemo2 = Trim(Left(HoldText, counter))
                                'added 10/29/2013; previous logic is in Else
                                If counter > Len(HoldText) Then
                                    CheckErrorFlag = True
                                    SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                    If MyPayeeRemitErrorMessage <> "" Then
                                        MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                    End If
                                Else
                                    HoldText = Trim(Right(HoldText, Len(HoldText) - counter))

                                    If holdRemit1 <> "" Then
                                        counter = HoldText.IndexOf(holdRemit3) + 1 + Len(holdRemit3)
                                        MyRemitMemo3 = Trim(Left(HoldText, counter))
                                        'added 10/29/2013; previous logic is in Else
                                        If counter > Len(HoldText) Then
                                            CheckErrorFlag = True
                                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                            If MyPayeeRemitErrorMessage <> "" Then
                                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                            End If
                                        Else
                                            MyRemitMemo1 = Trim(Right(HoldText, Len(HoldText) - counter))
                                        End If
                                    Else
                                        MyRemitMemo3 = HoldText
                                        HoldText = ""
                                    End If
                                End If
                            End If
                        End If
                    ElseIf holdRemit2 <> "" And arHold1(0).ToString.Trim.Contains(holdRemit2) Then
                        'Remit2 is before Remit1 (and Remit3 should be after Remit1 if it exists)
                        counter = HoldText.IndexOf(holdRemit2) + 1 + Len(holdRemit2)
                        MyRemitMemo2 = Trim(Left(HoldText, counter))
                        'added 10/29/2013; previous logic is in Else
                        If counter > Len(HoldText) Then
                            CheckErrorFlag = True
                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                            If MyPayeeRemitErrorMessage <> "" Then
                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                            End If
                        Else
                            HoldText = Trim(Right(HoldText, Len(HoldText) - counter))

                            If holdRemit3 <> "" Then
                                counter = HoldText.IndexOf(holdRemit1) + 1 + Len(holdRemit1)
                                MyRemitMemo1 = Trim(Left(HoldText, counter))
                                'added 10/29/2013; previous logic is in Else
                                If counter > Len(HoldText) Then
                                    CheckErrorFlag = True
                                    SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                    If MyPayeeRemitErrorMessage <> "" Then
                                        MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                    End If
                                Else
                                    MyRemitMemo3 = Trim(Right(HoldText, Len(HoldText) - counter))
                                End If
                            Else
                                MyRemitMemo1 = HoldText
                                HoldText = ""
                            End If
                        End If
                    ElseIf holdRemit3 <> "" And arHold1(0).ToString.Trim.Contains(holdRemit3) Then
                        'Remit3 is before Remit1 (and Remit2 should be after Remit1)
                        counter = HoldText.IndexOf(holdRemit3) + 1 + Len(holdRemit3)
                        MyRemitMemo3 = Trim(Left(HoldText, counter))
                        'added 10/29/2013; previous logic is in Else
                        If counter > Len(HoldText) Then
                            CheckErrorFlag = True
                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                            If MyPayeeRemitErrorMessage <> "" Then
                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                            End If
                        Else
                            HoldText = Trim(Right(HoldText, Len(HoldText) - counter))

                            If holdRemit2 <> "" Then
                                counter = HoldText.IndexOf(holdRemit1) + 1 + Len(holdRemit1)
                                MyRemitMemo1 = Trim(Left(HoldText, counter))
                                'added 10/29/2013; previous logic is in Else
                                If counter > Len(HoldText) Then
                                    CheckErrorFlag = True
                                    SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                    If MyPayeeRemitErrorMessage <> "" Then
                                        MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                    End If
                                Else
                                    MyRemitMemo2 = Trim(Right(HoldText, Len(HoldText) - counter))
                                End If
                            Else
                                MyRemitMemo1 = HoldText
                                HoldText = ""
                            End If
                        End If
                    Else
                        'Remit1 is first
                        counter = HoldText.IndexOf(holdRemit1) + 1 + Len(holdRemit1) '10/29/2013 note: 1 too many
                        MyRemitMemo1 = Trim(Left(HoldText, counter)) '10/29/2013 note: works even if counter is greater than length; returns everything
                        'added 10/29/2013; previous logic is in Else
                        If counter > Len(HoldText) Then
                            CheckErrorFlag = True
                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                            If MyPayeeRemitErrorMessage <> "" Then
                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                            End If
                        Else
                            HoldText = Trim(Right(HoldText, Len(HoldText) - counter)) '10/29/2013 note: catches an error when HoldText = MyRemitMemo1 since you can't get the right part of text w/ a negative #

                            If HoldText.Contains(holdRemit2) Then
                                arHold2 = Split(HoldText, holdRemit2)
                                If UBound(arHold2) = 1 Then
                                    'text before and after Remit2 (could even be empty string)
                                    If holdRemit3 <> "" And arHold2(0).ToString.Trim.Contains(holdRemit3) Then
                                        'Remit3 is before Remit2
                                        counter = HoldText.IndexOf(holdRemit3) + 1 + Len(holdRemit3)
                                        MyRemitMemo3 = Trim(Left(HoldText, counter))
                                        'added 10/29/2013; previous logic is in Else
                                        If counter > Len(HoldText) Then
                                            CheckErrorFlag = True
                                            SetErrorMessage("-Remit Problem (draft number = " & MyCheckNumber & "); needs IT attention")
                                            If MyPayeeRemitErrorMessage <> "" Then
                                                MyPayeeRemitErrorMessage = MyPayeeRemitErrorMessage.Replace("  Although this draft will be imported into Flexi, it can be voided and re-issued if Accounting/Claims deems necessary.", "<br><b>-IT will need to edit XML!</b>")
                                            End If
                                        Else
                                            MyRemitMemo2 = Trim(Right(HoldText, Len(HoldText) - counter))
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If Not arHold1 Is Nothing Then
                Array.Clear(arHold1, 0, arHold1.Length)
                arHold1 = Nothing
            End If
            If Not arHold2 Is Nothing Then
                Array.Clear(arHold2, 0, arHold2.Length)
                arHold2 = Nothing
            End If
            If Not arHold3 Is Nothing Then
                Array.Clear(arHold3, 0, arHold3.Length)
                arHold3 = Nothing
            End If
        End If
    End Sub
    'added 10/17/2013 to come up w/ new way to parse remits out of 'pay to the order of' text
    Private Sub ParsePayeeTextWithPayeesFromDatabase(ByVal payee1 As String, payee2 As String, payee3 As String, payee4 As String)
        Dim backupPayee1 As String = payee1
        Dim backupPayee2 As String = payee2
        Dim backupPayee3 As String = payee3
        Dim backupPayee4 As String = payee4
        Dim holdPayeeText As String = UCase(MyPayeeText)
        Dim holdPayee1 As String = UCase(payee1)
        Dim holdPayee2 As String = UCase(payee2)
        Dim holdPayee3 As String = UCase(payee3)
        Dim holdPayee4 As String = UCase(payee4)

        'move payees up if there's a missing spot
        If String.IsNullOrEmpty(holdPayee1) = True Then
            If String.IsNullOrEmpty(holdPayee2) = False Then
                holdPayee1 = holdPayee2
                holdPayee2 = String.Empty
            ElseIf String.IsNullOrEmpty(holdPayee3) = False Then
                holdPayee1 = holdPayee3
                holdPayee3 = String.Empty
            ElseIf String.IsNullOrEmpty(holdPayee4) = False Then
                holdPayee1 = holdPayee4
                holdPayee4 = String.Empty
            End If
        End If
        If String.IsNullOrEmpty(holdPayee2) = True Then
            If String.IsNullOrEmpty(holdPayee3) = False Then
                holdPayee2 = holdPayee3
                holdPayee3 = String.Empty
            ElseIf String.IsNullOrEmpty(holdPayee4) = False Then
                holdPayee2 = holdPayee4
                holdPayee4 = String.Empty
            End If
        End If
        If String.IsNullOrEmpty(holdPayee3) = True Then
            If String.IsNullOrEmpty(holdPayee4) = False Then
                holdPayee3 = holdPayee4
                holdPayee4 = String.Empty
            End If
        End If

        Dim payeesWithText As New Generic.List(Of String)
        If String.IsNullOrEmpty(holdPayee1) = False Then
            payeesWithText.Add(holdPayee1)
        End If
        If String.IsNullOrEmpty(holdPayee2) = False Then
            payeesWithText.Add(holdPayee2)
        End If
        If String.IsNullOrEmpty(holdPayee3) = False Then
            payeesWithText.Add(holdPayee3)
        End If
        If String.IsNullOrEmpty(holdPayee4) = False Then
            payeesWithText.Add(holdPayee4)
        End If
        Dim hasPayeeTextError As Boolean = False
        If payeesWithText IsNot Nothing AndAlso payeesWithText.Count > 0 Then
            For Each p As String In payeesWithText
                If holdPayeeText.Contains(p) = True Then
                    'payee name is in PTTOO text; continue
                Else
                    'problem
                    hasPayeeTextError = True
                    Exit For
                End If
            Next
            If hasPayeeTextError = False Then
                'all payees are in PTTOO text
                If Left(holdPayeeText, Len(holdPayee1)) = holdPayee1 Then
                    'payee 1 is listed 1st

                    If String.IsNullOrEmpty(holdPayee2) = False Then
                        'see if everything appears to be in order
                        Dim AllInOrder As Boolean = True
                        If Len(holdPayeeText) > Len(holdPayee1) Then
                            Dim remainingText As String = Right(holdPayeeText, Len(holdPayeeText) - Len(holdPayee1))
                            If remainingText.Contains(holdPayee2) = True Then
                                'payee2 good so far
                                If String.IsNullOrEmpty(holdPayee3) = False Then
                                    Dim counter As Integer = remainingText.IndexOf(holdPayee2) + Len(holdPayee2)
                                    If Len(remainingText) > counter Then
                                        'continue
                                        remainingText = Right(remainingText, Len(remainingText) - counter)
                                        If remainingText.Contains(holdPayee3) = True Then
                                            'payee3 good so far
                                            If String.IsNullOrEmpty(holdPayee4) = False Then
                                                counter = remainingText.IndexOf(holdPayee3) + Len(holdPayee3)
                                                If Len(remainingText) > counter Then
                                                    'continue
                                                    remainingText = Right(remainingText, Len(remainingText) - counter)
                                                    If remainingText.Contains(holdPayee4) = True Then
                                                        'payee4 good; all okay
                                                    Else
                                                        'payee4 not after payee3
                                                        AllInOrder = False
                                                    End If
                                                Else
                                                    'no text left after payee3
                                                    AllInOrder = False
                                                End If
                                            End If
                                        Else
                                            'payee3 not after payee2
                                            AllInOrder = False
                                        End If
                                    Else
                                        'no text left after payee2
                                        AllInOrder = False
                                    End If
                                End If
                            Else
                                AllInOrder = False
                                'this shouldn't happen this soon unless payee2 contains payee1 and both aren't there separately
                            End If

                            If AllInOrder = False Then
                                Dim index2 As Integer = 9997
                                Dim index3 As Integer = 9998
                                Dim index4 As Integer = 9999
                                index2 = holdPayeeText.IndexOf(holdPayee2)
                                If String.IsNullOrEmpty(holdPayee3) = False Then
                                    index3 = holdPayeeText.IndexOf(holdPayee3)
                                    If String.IsNullOrEmpty(holdPayee4) = False Then
                                        index4 = holdPayeeText.IndexOf(holdPayee4)
                                    End If
                                End If
                                If index2 < index3 AndAlso index2 < index4 AndAlso index3 < index4 Then
                                    'everything appears to be in the correct order; this shouldn't be the case since AllInOrder = False
                                Else
                                    'try to reorder
                                    Dim reorderDone As Boolean = False
                                    Dim pName2 As String = holdPayee2
                                    Dim pName3 As String = holdPayee3
                                    Dim pName4 As String = holdPayee4
                                    Dim tempName As String = String.Empty
                                    Dim tempName2 As String = String.Empty
                                    Dim reorderAttemptCounter As Integer = 0
                                    Do Until reorderDone = True
                                        reorderAttemptCounter += 1
                                        If index2 > index3 AndAlso index2 > index4 AndAlso index4 > index3 Then
                                            tempName = pName2
                                            tempName2 = pName3
                                            pName2 = tempName2
                                            pName3 = pName4
                                            pName4 = tempName
                                            tempName = String.Empty
                                            tempName2 = String.Empty
                                        ElseIf index2 > index3 AndAlso String.IsNullOrEmpty(pName2) = False AndAlso String.IsNullOrEmpty(pName3) = False Then
                                            tempName = pName2
                                            pName2 = pName3
                                            pName3 = tempName
                                            tempName = String.Empty
                                        ElseIf index3 > index4 AndAlso String.IsNullOrEmpty(pName3) = False AndAlso String.IsNullOrEmpty(pName4) = False Then
                                            tempName = pName3
                                            pName3 = pName4
                                            pName4 = tempName
                                            tempName = String.Empty
                                        ElseIf index2 > index4 AndAlso String.IsNullOrEmpty(pName2) = False AndAlso String.IsNullOrEmpty(pName4) = False Then
                                            'don't think this scenario will hit since the others should hit first
                                            tempName = pName2
                                            pName2 = pName4
                                            pName4 = tempName
                                            tempName = String.Empty
                                        End If
                                        index2 = 9997
                                        index3 = 9998
                                        index4 = 9999
                                        If String.IsNullOrEmpty(pName2) = False Then
                                            index2 = holdPayeeText.IndexOf(pName2)
                                            If String.IsNullOrEmpty(pName3) = False Then
                                                index3 = holdPayeeText.IndexOf(pName3)
                                                If String.IsNullOrEmpty(pName4) = False Then
                                                    index4 = holdPayeeText.IndexOf(pName4)
                                                End If
                                            End If
                                        End If

                                        'try to handle scenario when payee name text is found inside another one
                                        If index2 = index3 OrElse index3 = index4 OrElse index2 = index4 Then
                                            Dim reindexDone As Boolean = False
                                            Dim reindexAttemptCounter As Integer = 0
                                            Do Until reindexDone = True
                                                reindexAttemptCounter += 1

                                                If index2 = index3 AndAlso index3 = index4 Then
                                                    Dim tryLastIndex As Boolean = True
                                                    If Len(pName2) > Len(pName3) AndAlso Len(pName3) > Len(pName4) Then
                                                        'pname2 --> pname3 --> pname4
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName3) = True Then
                                                            'pName2 is 1st and pName3 is in remaining text
                                                            index3 = holdPayeeText.IndexOf(pName3, (index2 + Len(pName2)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName4) = True Then
                                                                'pName3 is 1st and pName4 is in remaining text
                                                                index4 = holdPayeeText.IndexOf(pName4, (index3 + Len(pName3)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    ElseIf Len(pName2) > Len(pName4) AndAlso Len(pName4) > Len(pName3) Then
                                                        'pname2 --> pname4 --> pname3
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName4) = True Then
                                                            'pName2 is 1st and pName4 is in remaining text
                                                            index4 = holdPayeeText.IndexOf(pName4, (index2 + Len(pName2)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName3) = True Then
                                                                'pName4 is 1st and pName3 is in remaining text
                                                                index3 = holdPayeeText.IndexOf(pName3, (index4 + Len(pName4)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    ElseIf Len(pName3) > Len(pName2) AndAlso Len(pName2) > Len(pName4) Then
                                                        'pname3 --> pname2 --> pname4
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName2) = True Then
                                                            'pName3 is 1st and pName2 is in remaining text
                                                            index2 = holdPayeeText.IndexOf(pName2, (index3 + Len(pName3)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName4) = True Then
                                                                'pName2 is 1st and pName4 is in remaining text
                                                                index4 = holdPayeeText.IndexOf(pName4, (index2 + Len(pName2)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    ElseIf Len(pName3) > Len(pName4) AndAlso Len(pName4) > Len(pName2) Then
                                                        'pname3 --> pname4 --> pname2
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName4) = True Then
                                                            'pName3 is 1st and pName4 is in remaining text
                                                            index4 = holdPayeeText.IndexOf(pName4, (index3 + Len(pName3)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName2) = True Then
                                                                'pName4 is 1st and pName2 is in remaining text
                                                                index2 = holdPayeeText.IndexOf(pName2, (index4 + Len(pName4)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    ElseIf Len(pName4) > Len(pName2) AndAlso Len(pName2) > Len(pName3) Then
                                                        'pname4 --> pname2 --> pname3
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName2) = True Then
                                                            'pName4 is 1st and pName2 is in remaining text
                                                            index2 = holdPayeeText.IndexOf(pName2, (index4 + Len(pName4)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName3) = True Then
                                                                'pName2 is 1st and pName3 is in remaining text
                                                                index3 = holdPayeeText.IndexOf(pName3, (index2 + Len(pName2)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    ElseIf Len(pName4) > Len(pName3) AndAlso Len(pName3) > Len(pName2) Then
                                                        'pname4 --> pname3 --> pname2
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName3) = True Then
                                                            'pName4 is 1st and pName3 is in remaining text
                                                            index3 = holdPayeeText.IndexOf(pName3, (index4 + Len(pName4)))
                                                            If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName2) = True Then
                                                                'pName3 is 1st and pName2 is in remaining text
                                                                index2 = holdPayeeText.IndexOf(pName2, (index3 + Len(pName3)))
                                                                tryLastIndex = False
                                                            End If
                                                        End If
                                                    End If
                                                    If tryLastIndex = True Then
                                                        index2 = holdPayeeText.LastIndexOf(pName2)
                                                        index3 = holdPayeeText.LastIndexOf(pName3)
                                                        index4 = holdPayeeText.LastIndexOf(pName4)
                                                    End If
                                                End If
                                                If index2 = index3 Then
                                                    Dim tryLastIndex As Boolean = True
                                                    If Len(pName2) > Len(pName3) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName3) = True Then
                                                            'pName2 is 1st and pName3 is in remaining text
                                                            index3 = holdPayeeText.IndexOf(pName3, (index2 + Len(pName2)))
                                                            tryLastIndex = False
                                                        End If
                                                    ElseIf Len(pName3) > Len(pName2) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName2) = True Then
                                                            'pName3 is 1st and pName2 is in remaining text
                                                            index2 = holdPayeeText.IndexOf(pName2, (index3 + Len(pName3)))
                                                            tryLastIndex = False
                                                        End If
                                                    End If
                                                    If tryLastIndex = True Then
                                                        index2 = holdPayeeText.LastIndexOf(pName2)
                                                        index3 = holdPayeeText.LastIndexOf(pName3)
                                                    End If
                                                End If
                                                If index3 = index4 Then
                                                    Dim tryLastIndex As Boolean = True
                                                    If Len(pName3) > Len(pName4) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index3 + Len(pName3))).Contains(pName4) = True Then
                                                            'pName3 is 1st and pName4 is in remaining text
                                                            index4 = holdPayeeText.IndexOf(pName4, (index3 + Len(pName3)))
                                                            tryLastIndex = False
                                                        End If
                                                    ElseIf Len(pName4) > Len(pName3) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName3) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName3) = True Then
                                                            'pName4 is 1st and pName3 is in remaining text
                                                            index3 = holdPayeeText.IndexOf(pName3, (index4 + Len(pName4)))
                                                            tryLastIndex = False
                                                        End If
                                                    End If
                                                    If tryLastIndex = True Then
                                                        index3 = holdPayeeText.LastIndexOf(pName3)
                                                        index4 = holdPayeeText.LastIndexOf(pName4)
                                                    End If
                                                End If
                                                If index2 = index4 Then
                                                    Dim tryLastIndex As Boolean = True
                                                    If Len(pName2) > Len(pName4) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2)))) >= Len(pName4) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index2 + Len(pName2))).Contains(pName4) = True Then
                                                            'pName2 is 1st and pName4 is in remaining text
                                                            index4 = holdPayeeText.IndexOf(pName4, (index2 + Len(pName2)))
                                                            tryLastIndex = False
                                                        End If
                                                    ElseIf Len(pName4) > Len(pName2) Then
                                                        If Len(Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4)))) >= Len(pName2) AndAlso Right(holdPayeeText, Len(holdPayeeText) - (index4 + Len(pName4))).Contains(pName2) = True Then
                                                            'pName4 is 1st and pName2 is in remaining text
                                                            index2 = holdPayeeText.IndexOf(pName2, (index4 + Len(pName4)))
                                                            tryLastIndex = False
                                                        End If
                                                    End If
                                                    If tryLastIndex = True Then
                                                        index2 = holdPayeeText.LastIndexOf(pName2)
                                                        index4 = holdPayeeText.LastIndexOf(pName4)
                                                    End If
                                                End If

                                                If index2 <> index3 AndAlso index2 <> index4 AndAlso index3 <> index4 Then
                                                    'all indexes are unique
                                                    reindexDone = True
                                                    Exit Do
                                                End If
                                                If reindexAttemptCounter >= 30 Then
                                                    'unable to reindex correctly
                                                    'hasPayeeTextError = True 'will leave w/o error for now
                                                    reindexDone = True
                                                    Exit Do
                                                End If
                                            Loop
                                        End If

                                        If index2 < index3 AndAlso index2 < index4 AndAlso index3 < index4 Then
                                            'everything is okay now
                                            'AllInOrder = True 'will not set in case we want to later check if reordering was needed
                                            reorderDone = True
                                            Exit Do
                                        End If
                                        If reorderAttemptCounter >= 30 Then
                                            '1 payee name is either the same as another or its text is found inside another; causing them to have the same index
                                            hasPayeeTextError = True
                                            reorderDone = True
                                            Exit Do
                                        End If
                                    Loop
                                    holdPayee2 = pName2
                                    holdPayee3 = pName3
                                    holdPayee4 = pName4
                                End If
                            End If
                            If hasPayeeTextError = False Then
                                'everything should be in order now
                                'set RemitToMemo fields; switch back to original variables to maintain casing
                                Dim usedPayee1 As Boolean = False
                                Dim usedPayee2 As Boolean = False
                                Dim usedPayee3 As Boolean = False
                                Dim usedPayee4 As Boolean = False
                                If holdPayee1 = UCase(backupPayee1) Then
                                    'payee1 okay
                                    usedPayee1 = True
                                ElseIf holdPayee1 = UCase(backupPayee2) Then
                                    payee1 = backupPayee2
                                    payee2 = String.Empty
                                    usedPayee2 = True
                                ElseIf holdPayee1 = UCase(backupPayee3) Then
                                    payee1 = backupPayee3
                                    payee3 = String.Empty
                                    usedPayee3 = True
                                ElseIf holdPayee1 = UCase(backupPayee4) Then
                                    payee1 = backupPayee4
                                    payee4 = String.Empty
                                    usedPayee4 = True
                                End If
                                If usedPayee1 = False AndAlso holdPayee2 = UCase(backupPayee1) Then
                                    payee2 = backupPayee1
                                    'payee1 should already be set
                                    usedPayee1 = True
                                ElseIf usedPayee2 = False AndAlso holdPayee2 = UCase(backupPayee2) Then
                                    'payee2 okay
                                    usedPayee2 = True
                                ElseIf usedPayee3 = False AndAlso holdPayee2 = UCase(backupPayee3) Then
                                    payee2 = backupPayee3
                                    payee3 = String.Empty
                                    usedPayee3 = True
                                ElseIf usedPayee4 = False AndAlso holdPayee2 = UCase(backupPayee4) Then
                                    payee2 = backupPayee4
                                    payee4 = String.Empty
                                    usedPayee4 = True
                                End If
                                If usedPayee1 = False AndAlso holdPayee3 = UCase(backupPayee1) Then
                                    payee3 = backupPayee1
                                    'payee1 should already be set
                                    usedPayee1 = True
                                ElseIf usedPayee2 = False AndAlso holdPayee3 = UCase(backupPayee2) Then
                                    payee3 = backupPayee2
                                    'payee2 should already be set
                                    usedPayee2 = True
                                ElseIf usedPayee3 = False AndAlso holdPayee3 = UCase(backupPayee3) Then
                                    'payee3 okay
                                    usedPayee3 = True
                                ElseIf usedPayee4 = False AndAlso holdPayee3 = UCase(backupPayee4) Then
                                    payee3 = backupPayee4
                                    payee4 = String.Empty
                                    usedPayee4 = True
                                End If
                                If usedPayee1 = False AndAlso holdPayee4 = UCase(backupPayee1) Then
                                    payee4 = backupPayee1
                                    'payee1 should already be set
                                    usedPayee1 = True
                                ElseIf usedPayee2 = False AndAlso holdPayee4 = UCase(backupPayee2) Then
                                    payee4 = backupPayee2
                                    'payee2 should already be set
                                    usedPayee2 = True
                                ElseIf usedPayee3 = False AndAlso holdPayee4 = UCase(backupPayee3) Then
                                    payee4 = backupPayee3
                                    'payee3 should already be set
                                    usedPayee3 = True
                                ElseIf usedPayee4 = False AndAlso holdPayee4 = UCase(backupPayee4) Then
                                    'payee4 okay
                                    usedPayee4 = True
                                End If
                                'all original variables should be set correctly now
                                If String.IsNullOrEmpty(payee2) = False Then
                                    If String.IsNullOrEmpty(payee3) = False Then
                                        'now parse it out
                                        If Len(MyPayeeText) > Len(payee1) Then
                                            'get what's left after payee1
                                            remainingText = Right(MyPayeeText, Len(MyPayeeText) - Len(payee1))
                                            If UCase(remainingText).Contains(UCase(payee2)) = True Then
                                                'payee2 good so far
                                                counter = UCase(remainingText).IndexOf(UCase(payee2)) + Len(payee2)
                                                If Len(remainingText) > counter Then
                                                    'continue
                                                    holdRemit1 = Trim(Left(remainingText, counter))
                                                    remainingText = Right(remainingText, Len(remainingText) - counter)
                                                    If UCase(remainingText).Contains(UCase(payee3)) = True Then
                                                        'payee3 good so far
                                                        If String.IsNullOrEmpty(payee4) = False Then
                                                            counter = UCase(remainingText).IndexOf(UCase(payee3)) + Len(payee3)
                                                            If Len(remainingText) > counter Then
                                                                'continue
                                                                holdRemit2 = Trim(Left(remainingText, counter))
                                                                remainingText = Right(remainingText, Len(remainingText) - counter)
                                                                If remainingText.Contains(payee4) = True Then
                                                                    'payee4 good; all okay
                                                                    holdRemit3 = Trim(remainingText)
                                                                Else
                                                                    'problem; payee4 couldn't be found in remaining text after removing payee, remit1, and remit2; shouldn't happen
                                                                    hasPayeeTextError = True
                                                                End If
                                                            Else
                                                                'problem; remaining text after removing payee and remit1 isn't as long as remit2 should be and there are at least 3 payees specified; shouldn't happen
                                                                hasPayeeTextError = True
                                                            End If
                                                        Else
                                                            'no payee4; put everything that's left in remit2
                                                            holdRemit2 = Trim(remainingText)
                                                        End If
                                                    Else
                                                        'problem; payee3 couldn't be found in remaining text after removing payee and remit1; shouldn't happen
                                                        hasPayeeTextError = True
                                                    End If
                                                Else
                                                    'problem; remaining text after removing payee isn't as long as remit1 should be and there are at least 3 payees specified; shouldn't happen
                                                    hasPayeeTextError = True
                                                End If
                                            Else
                                                'problem; payee2 couldn't be found in remaining text after removing payee; shouldn't happen
                                                hasPayeeTextError = True
                                            End If
                                        Else
                                            'problem; no text left after payee1 and there are at least 3 specified; shouldn't happen
                                            hasPayeeTextError = True
                                        End If
                                        If hasPayeeTextError = False Then
                                            MyRemitName = payee1 'mailto
                                            MyRemitMemo1 = holdRemit1
                                            MyRemitMemo2 = holdRemit2
                                            MyRemitMemo3 = holdRemit3
                                        End If
                                    Else
                                        'nothing after remit1; put everything in there that's after payee1
                                        If Len(MyPayeeText) > Len(payee1) Then
                                            MyRemitName = payee1 'mailto
                                            MyRemitMemo1 = Trim(Right(MyPayeeText, Len(MyPayeeText) - Len(payee1)))
                                            MyRemitMemo2 = ""
                                            MyRemitMemo3 = ""
                                        Else
                                            'problem; no text left after payee1 (shouldn't hit this code path since it should be caught before)
                                            hasPayeeTextError = True
                                        End If
                                    End If
                                Else
                                    'no additional payees specified; put everything in there that's after payee1
                                    If Len(MyPayeeText) > Len(payee1) Then
                                        MyRemitName = payee1 'mailto
                                        MyRemitMemo1 = Trim(Right(MyPayeeText, Len(MyPayeeText) - Len(payee1)))
                                        MyRemitMemo2 = ""
                                        MyRemitMemo3 = ""
                                    Else
                                        'problem; no text left after payee1 (shouldn't hit this code path since it should be caught before)
                                        hasPayeeTextError = True
                                    End If
                                End If
                            Else
                                'reorder could not be done
                            End If
                        Else
                            'problem; no text left after payee1
                            hasPayeeTextError = True
                        End If
                    Else
                        'no additional payees; switch back to original variables to maintain casing
                        If UCase(backupPayee1) = holdPayee1 Then
                            'okay; order never switched
                        ElseIf UCase(backupPayee2) = holdPayee1 Then
                            payee1 = backupPayee2
                            payee2 = String.Empty
                        ElseIf UCase(backupPayee3) = holdPayee1 Then
                            payee1 = backupPayee3
                            payee3 = String.Empty
                        ElseIf UCase(backupPayee4) = holdPayee1 Then
                            payee1 = backupPayee4
                            payee4 = String.Empty
                        End If
                        'using MyPayeeText instead of holdPayeeText to capture casing
                        MyRemitName = payee1 'mailto
                        MyRemitMemo1 = ""
                        MyRemitMemo2 = ""
                        MyRemitMemo3 = ""
                        If Len(MyPayeeText) > Len(payee1) Then
                            MyRemitMemo1 = Trim(Right(MyPayeeText, Len(MyPayeeText) - Len(payee1)))
                        End If
                    End If
                Else
                    'problem; payee1 is not the 1st name listed in the PTTOO text
                    hasPayeeTextError = True
                End If
            Else
                'problem; one of the names is not in the PTTOO text
                hasPayeeTextError = True 'redundant
            End If
        Else
            'problem; no payee names
            hasPayeeTextError = True
        End If
        If hasPayeeTextError = True Then
            'maybe try old way
        End If
    End Sub
    Private Sub SetErrorMessage(ByVal newMsg As String, Optional ByVal newSQLerror As String = "")
        If MyCheckError = "" Then
            MyCheckError = newMsg
        Else
            MyCheckError &= "<br>" & newMsg
        End If

        If MySQLerror = "" Then
            MySQLerror = newSQLerror
        Else
            MySQLerror &= "<br>" & newSQLerror
        End If
    End Sub
    Private Sub CopyQuotesFromAgencyToAgency()
        'Dim oldAgencyCode As String = "6140-2766"
        'Dim oldAgencyId As String = "150"
        'Dim newAgencyCode As String = "6203-3230"
        'Dim newAgencyId As String = "576"
        ''10/2/2014 note: may need to verify that newAgencyCode and newAgencyId are for the same agency if creating a new method to do this... would probably need to do the same for oldAgencyCode and oldAgencyId too
        'Using Sql As New SQLselectObject(ConfigurationManager.AppSettings("connQQ"))
        '    Sql.queryOrStoredProc = "select "
        '    Sql.queryOrStoredProc &= "top 1 " 'just for testing
        '    Sql.queryOrStoredProc &= "Q.quoteId, Q.updated, Q.inserted"
        '    Sql.queryOrStoredProc &= " from Quote as Q with (nolock) where "
        '    Sql.queryOrStoredProc &= "Q.agencyId = " & oldAgencyId
        '    Sql.queryOrStoredProc &= " and Q.lobId is not null and Q.lobId > 0"
        '    Sql.queryOrStoredProc &= " and Q.quoteStatusId not in (1, 12)" 'not 'Incomplete Quote' or 'Archived'
        '    Sql.queryOrStoredProc &= " order by Q.updated asc"
        '    Dim dr As SqlClient.SqlDataReader = Sql.GetDataReader
        '    Dim copyLog As String = ""
        '    Dim oldQuoteId As String = ""
        '    Dim newQuoteId As String = ""
        '    Dim errMsg As String = ""
        '    Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        '    Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        '    Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        '    Dim recordCounter As Integer = 0

        '    'added for clarification
        '    copyLog = qqHelper.appendText(copyLog, "---QuickQuote database connection string: " & ConfigurationManager.AppSettings("connQQ").ToString.Trim & "---", "<br /><br />")

        '    If dr IsNot Nothing AndAlso dr.HasRows = True Then
        '        While dr.Read
        '            recordCounter += 1
        '            oldQuoteId = ""
        '            newQuoteId = ""
        '            errMsg = ""

        '            oldQuoteId = dr.Item("quoteId").ToString.Trim

        '            'If recordCounter = 1 Then 'just to clarify; now being done above... so it can also be captured if there's an error
        '            '    copyLog = qqHelper.appendText(copyLog, "---QuickQuote database connection string: " & ConfigurationManager.AppSettings("connQQ").ToString.Trim & "---", "<br /><br />")
        '            'End If

        '            copyLog = qqHelper.appendText(copyLog, "--Record #" & recordCounter.ToString & ": quoteId = " & oldQuoteId & "--", "<br /><br />")

        '            'QQxml.CopyQuoteToAgency(oldQuoteId, newAgencyCode, newAgencyId, newQuoteId, errMsg, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency)
        '            'updated 10/10/2014 w/ new params
        '            Dim insertCopiedQuoteDatabaseRecord As Boolean = True
        '            Dim archiveOldQuote As Boolean = True
        '            Dim archiveErrorMsg As String = ""
        '            QQxml.CopyQuoteToAgency(oldQuoteId, newAgencyCode, newAgencyId, newQuoteId, insertCopiedQuoteDatabaseRecord, archiveOldQuote, errMsg, archiveErrorMsg, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency)
        '            'If errMsg = "" AndAlso newQuoteId <> "" Then
        '            If newQuoteId <> "" Then
        '                'successful copy
        '                copyLog = qqHelper.appendText(copyLog, "-Copy Succeeded; New quoteId = " & newQuoteId, "<br />")
        '                If errMsg <> "" Then
        '                    copyLog = qqHelper.appendText(copyLog, "Copy Error = " & errMsg, "; ")
        '                    errMsg = ""
        '                End If
        '                'QQxml.ArchiveOrUnarchiveQuote(oldQuoteId, QuickQuoteXML.QuickQuoteArchiveType.Archive, errMsg)
        '                'If errMsg = "" Then
        '                '    'successful archive
        '                '    copyLog = qqHelper.appendText(copyLog, "-Archive Succeeded", "<br />")
        '                'Else
        '                '    'archive failed
        '                '    copyLog = qqHelper.appendText(copyLog, "-Archive Failed; Archive Error = " & errMsg, "<br />")
        '                'End If
        '                'updated 10/10/2014 to use updated method logic and new params
        '                If archiveOldQuote = True Then
        '                    If archiveErrorMsg = "" Then
        '                        'successful archive
        '                        copyLog = qqHelper.appendText(copyLog, "-Archive Succeeded", "<br />")
        '                    Else
        '                        'archive failed
        '                        copyLog = qqHelper.appendText(copyLog, "-Archive Failed; Archive Error = " & archiveErrorMsg, "<br />")
        '                    End If
        '                End If
        '            Else
        '                'copy failed
        '                copyLog = qqHelper.appendText(copyLog, "-Copy Failed", "<br />")
        '                If errMsg <> "" Then
        '                    copyLog = qqHelper.appendText(copyLog, "Copy Error = " & errMsg, "; ")
        '                End If
        '            End If
        '        End While
        '    Else
        '        If Sql.hasError = True Then
        '            'copyLog = "Error Retrieving Records to Copy"
        '            copyLog = qqHelper.appendText(copyLog, "-Error Retrieving Records to Copy: " & Sql.errorMsg, "<br /><br />")
        '        Else
        '            'copyLog = "No Records to Copy"
        '            copyLog = qqHelper.appendText(copyLog, "-No Records to Copy", "<br /><br />")
        '        End If
        '    End If
        '    If copyLog <> "" Then
        '        qqHelper.SendEmail("VR_Copy_Quotes@indianafarmers.com", "dmink@indianafarmers.com", "Copy Quotes from " & oldAgencyCode & " (agencyId = " & oldAgencyId & ") to " & newAgencyCode & " (agencyId = " & newAgencyId & ")", copyLog, errMsg)
        '        If errMsg = "" Then

        '        End If
        '    End If
        'End Using

        'updated to use new method
        'completed in prod 10/13/2014 (2766 to 3230)
        'Dim oldAgencyCode As String = "6140-2766"
        'Dim oldAgencyId As String = "150"
        'Dim newAgencyCode As String = "6203-3230"
        'Dim newAgencyId As String = "576"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 6/10/2015 (1500 to 3274)
        'Dim oldAgencyCode As String = "6500-1500"
        'Dim oldAgencyId As String = "270"
        'Dim newAgencyCode As String = "6250-3274"
        'Dim newAgencyId As String = "620"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 7/16/2015 (3195 to 3279)
        'Dim oldAgencyCode As String = "6260-3195"
        'Dim oldAgencyId As String = "541"
        'Dim newAgencyCode As String = "6260-3279"
        'Dim newAgencyId As String = "625"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 8/10/2015 (2776, 2777, 2783, 2900, and 2808 to 3282)
        ''Dim oldAgencyCode As String = "6776-2776"
        ''Dim oldAgencyId As String = "375" '61 in last year
        ''Dim oldAgencyCode As String = "6776-2777"
        ''Dim oldAgencyId As String = "376" '24 in last year
        ''Dim oldAgencyCode As String = "6776-2783"
        ''Dim oldAgencyId As String = "378" '15 in last year
        ''Dim oldAgencyCode As String = "6776-2808"
        ''Dim oldAgencyId As String = "379" '0 in last year
        'Dim oldAgencyCode As String = "6776-2900"
        'Dim oldAgencyId As String = "391" '10 in last year
        'Dim newAgencyCode As String = "6312-3282"
        'Dim newAgencyId As String = "628" '0 so far
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'more runs 12/29/2015
        ''2448 to 3307
        'Dim oldAgencyCode As String = "6448-2448"
        'Dim oldAgencyId As String = "260" '244 in last year
        'Dim newAgencyCode As String = "6198-3307"
        'Dim newAgencyId As String = "653"
        ''1923 to 3308
        'Dim oldAgencyCode As String = "6114-1923"
        'Dim oldAgencyId As String = "122" '53 in last year
        'Dim newAgencyCode As String = "6046-3308"
        'Dim newAgencyId As String = "654"
        ''2123 to 3309
        'Dim oldAgencyCode As String = "6048-2123"
        'Dim oldAgencyId As String = "53" '132 in last year
        'Dim newAgencyCode As String = "6316-3309"
        'Dim newAgencyId As String = "655"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 3/3/2016 (3207 --> 3319)
        'Dim oldAgencyCode As String = "6264-3207"
        'Dim oldAgencyId As String = "553" '102 in last year
        'Dim newAgencyCode As String = "6260-3319"
        'Dim newAgencyId As String = "665"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 5/3/2016 (2796 --> 3322)
        'Dim oldAgencyCode As String = "6619-2796"
        'Dim oldAgencyId As String = "309" '18 (12 copied) in last year; 33 total
        'Dim newAgencyCode As String = "6320-3322"
        'Dim newAgencyId As String = "668"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 5/3/2016 (3194 --> 3325)
        'Dim oldAgencyCode As String = "6260-3194"
        'Dim oldAgencyId As String = "540" '66 (52 copied) in last year; 129 total
        'Dim newAgencyCode As String = "6260-3325"
        'Dim newAgencyId As String = "671"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'another prod run 5/3/2016 (2969 --> 3326)
        'Dim oldAgencyCode As String = "6219-2969"
        'Dim oldAgencyId As String = "472" '575 (555 copied) in last year; 1102 total
        'Dim newAgencyCode As String = "6312-3326"
        'Dim newAgencyId As String = "672"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (3261 --> 3359)
        'Dim oldAgencyCode As String = "6296-3261"
        'Dim oldAgencyId As String = "607" '160 (147 copied) in last year; 235 total
        'Dim newAgencyCode As String = "6350-3359"
        'Dim newAgencyId As String = "705"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (2461 --> 3357)
        'Dim oldAgencyCode As String = "6162-2461"
        'Dim oldAgencyId As String = "178" '128 (122 copied) in last year; 342 total
        'Dim newAgencyCode As String = "6046-3357"
        'Dim newAgencyId As String = "703"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (2706 --> 3360)
        'Dim oldAgencyCode As String = "6706-2706"
        'Dim oldAgencyId As String = "327" '1 (1 copied) in last year; 4 total
        'Dim newAgencyCode As String = "6385-3360"
        'Dim newAgencyId As String = "706"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (2338 --> 3363)
        'Dim oldAgencyCode As String = "6338-2338"
        'Dim oldAgencyId As String = "215" '86 (83 copied) in last year; 218 total
        'Dim newAgencyCode As String = "6260-3363"
        'Dim newAgencyId As String = "709"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (2157 --> 3363)
        'Dim oldAgencyCode As String = "6338-2157"
        'Dim oldAgencyId As String = "214" '18 (16 copied) in last year; 59 total
        'Dim newAgencyCode As String = "6260-3363"
        'Dim newAgencyId As String = "709"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        ''another prod run 9/30/2016 (2566 --> 3362)
        'Dim oldAgencyCode As String = "6338-2566"
        'Dim oldAgencyId As String = "216" '46 (42 copied) in last year; 192 total
        'Dim newAgencyCode As String = "6260-3362"
        'Dim newAgencyId As String = "708"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 1/9/2018 (2453 --> 3440)
        'Dim oldAgencyCode As String = "6026-2453"
        'Dim oldAgencyId As String = "29" '269 in last year (only 267 copied for good lob/status); 732 total (only 701 w/ good lobId and quoteStatusId)
        'Dim newAgencyCode As String = "6401-3440"
        'Dim newAgencyId As String = "786"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 2/1/2018 (3417 --> 3444)
        'Dim oldAgencyCode As String = "6387-3417"
        'Dim oldAgencyId As String = "763" '282 in last year (only 274 copied for good lob/status); 282 total (only 274 w/ good lobId and quoteStatusId)
        'Dim newAgencyCode As String = "6346-3444"
        'Dim newAgencyId As String = "789"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 2/1/2018 (2360 --> 3445)
        'Dim oldAgencyCode As String = "6072-2360"
        'Dim oldAgencyId As String = "79" '236 in last year (only 235 copied for good lob/status); 803 total (only 740 w/ good lobId and quoteStatusId)
        'Dim newAgencyCode As String = "6353-3445"
        'Dim newAgencyId As String = "791"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 6/4/2018 (1954 --> 3460)
        'Dim oldAgencyCode As String = "6043-1954"
        'Dim oldAgencyId As String = "47"
        'Dim newAgencyCode As String = "6273-3460"
        'Dim newAgencyId As String = "806"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 8/1/2018 (2988 --> 3468)
        'Dim oldAgencyCode As String = "6231-2988"
        'Dim oldAgencyId As String = "491"
        'Dim newAgencyCode As String = "6001-3468"
        'Dim newAgencyId As String = "814"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 4/10/2019 (3267 --> 3476)
        'Dim oldAgencyCode As String = "6300-3267"
        'Dim oldAgencyId As String = "613"
        'Dim newAgencyCode As String = "6416-3476"
        'Dim newAgencyId As String = "822"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 8/1/2019 (3169 --> 3500)
        'Dim oldAgencyCode As String = "6244-3169"
        'Dim oldAgencyId As String = "516"
        'Dim newAgencyCode As String = "6244-3500"
        'Dim newAgencyId As String = "881"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 3/4/2020 (3324 --> 3512)
        'Dim oldAgencyCode As String = "6321-3324"
        'Dim oldAgencyId As String = "669"
        'Dim newAgencyCode As String = "6438-3512"
        'Dim newAgencyId As String = "898"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 3/4/2020 (2625 --> 3515)
        'Dim oldAgencyCode As String = "6625-2625"
        'Dim oldAgencyId As String = "312"
        'Dim newAgencyCode As String = "6449-3515"
        'Dim newAgencyId As String = "905"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 4/3/2020 (3307 --> 3518)
        'Dim oldAgencyCode As String = "6198-3307"
        'Dim oldAgencyId As String = "653"
        'Dim newAgencyCode As String = "6439-3518"
        'Dim newAgencyId As String = "910"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 4/3/2020 (2922 --> 3518)
        'Dim oldAgencyCode As String = "6198-2922"
        'Dim oldAgencyId As String = "435"
        'Dim newAgencyCode As String = "6439-3518"
        'Dim newAgencyId As String = "910"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If

        'another prod run 4/3/2020 (2433 --> 3518)
        'Dim oldAgencyCode As String = "6433-2433"
        'Dim oldAgencyId As String = "254"
        'Dim newAgencyCode As String = "6439-3518"
        'Dim newAgencyId As String = "910"
        'Dim copyLog As String = ""
        'Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim clearClientIdIfDifferentAgency As Boolean = False 'optional param defaulted to True
        'Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
        'Dim insertCopiedQuoteDatabaseRecords As Boolean = True
        'Dim archiveOldQuotes As Boolean = True

        'QQxml.CopyActiveQuotesFromAgencyToAgency(oldAgencyCode, oldAgencyId, newAgencyCode, newAgencyId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyLog, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency, notePreviousInfoInDescriptionIfDifferentAgency, "dmink@indianafarmers.com")
        'If copyLog <> "" Then

        'End If
    End Sub
    Public Sub UpdateQuickQuoteEntityNamesAndAddresses(ByRef qq As QuickQuoteObject)
        If qq IsNot Nothing Then
            With qq
                If .Applicants IsNot Nothing AndAlso .Applicants.Count > 0 Then
                    Dim aCounter As Integer = 0
                    For Each a As QuickQuoteApplicant In .Applicants
                        aCounter += 1
                        With a
                            Dim extraText As String = " _app" & aCounter.ToString
                            If .Name IsNot Nothing Then
                                With .Name
                                    If .LastName <> "" Then
                                        If UCase(.LastName).Contains(UCase(extraText)) = False Then
                                            .LastName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                            If .Address IsNot Nothing Then
                                With .Address
                                    If .StreetName <> "" Then
                                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                            .StreetName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                        End With
                    Next
                End If
                If .Client IsNot Nothing Then
                    With .Client
                        Dim extraText As String = " _client"
                        If .Name IsNot Nothing Then
                            With .Name
                                Dim extraText1 As String = extraText & "1"
                                If .LastName <> "" Then
                                    If UCase(.LastName).Contains(UCase(extraText1)) = False Then
                                        .LastName &= extraText1
                                    End If
                                End If
                            End With
                        End If
                        If .Name2 IsNot Nothing Then
                            With .Name2
                                Dim extraText2 As String = extraText & "2"
                                If .LastName <> "" Then
                                    If UCase(.LastName).Contains(UCase(extraText2)) = False Then
                                        .LastName &= extraText2
                                    End If
                                End If
                            End With
                        End If
                        If .Address IsNot Nothing Then
                            With .Address
                                If .StreetName <> "" Then
                                    If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                        .StreetName &= extraText
                                    End If
                                End If
                            End With
                        End If
                    End With
                End If
                If .Drivers IsNot Nothing AndAlso .Drivers.Count > 0 Then
                    Dim dCounter As Integer = 0
                    For Each d As QuickQuoteDriver In .Drivers
                        dCounter += 1
                        With d
                            Dim extraText As String = " _drv" & dCounter.ToString
                            If .Name IsNot Nothing Then
                                With .Name
                                    If .LastName <> "" Then
                                        If UCase(.LastName).Contains(UCase(extraText)) = False Then
                                            .LastName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                            If .Address IsNot Nothing Then
                                With .Address
                                    If .StreetName <> "" Then
                                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                            .StreetName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                        End With
                    Next
                End If
                If .Locations IsNot Nothing AndAlso .Locations.Count > 0 Then
                    Dim lCounter As Integer = 0
                    For Each l As QuickQuoteLocation In .Locations
                        lCounter += 1
                        With l
                            Dim extraText As String = " _loc" & lCounter.ToString
                            If .Name IsNot Nothing Then
                                With .Name
                                    If .LastName <> "" Then
                                        If UCase(.LastName).Contains(UCase(extraText)) = False Then
                                            .LastName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                            If .Address IsNot Nothing Then
                                With .Address
                                    If .StreetName <> "" Then
                                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                            .StreetName &= extraText
                                        End If
                                    End If
                                End With
                            End If
                        End With
                    Next
                End If
                If .Policyholder IsNot Nothing Then
                    With .Policyholder
                        Dim extraText As String = " _ph1"
                        If .Name IsNot Nothing Then
                            With .Name
                                If .LastName <> "" Then
                                    If UCase(.LastName).Contains(UCase(extraText)) = False Then
                                        .LastName &= extraText
                                    End If
                                End If
                            End With
                        End If
                        If .Address IsNot Nothing Then
                            With .Address
                                If .StreetName <> "" Then
                                    If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                        .StreetName &= extraText
                                    End If
                                End If
                            End With
                        End If
                    End With
                End If
                If .Policyholder2 IsNot Nothing Then
                    With .Policyholder2
                        Dim extraText As String = " _ph2"
                        If .Name IsNot Nothing Then
                            With .Name
                                If .LastName <> "" Then
                                    If UCase(.LastName).Contains(UCase(extraText)) = False Then
                                        .LastName &= extraText
                                    End If
                                End If
                            End With
                        End If
                        If .Address IsNot Nothing Then
                            With .Address
                                If .StreetName <> "" Then
                                    If UCase(.StreetName).Contains(UCase(extraText)) = False Then
                                        .StreetName &= extraText
                                    End If
                                End If
                            End With
                        End If
                    End With
                End If
            End With
        End If
    End Sub
    Public Function GetChoicePointUnitNumCollectionSet(ByVal unitNum As Integer, ByRef cpUnitNumCollectionSets As List(Of QuickQuoteChoicePointUnitNumCollectionSet)) As QuickQuoteChoicePointUnitNumCollectionSet
        Dim cpUnitNumCollectionSet As QuickQuoteChoicePointUnitNumCollectionSet = Nothing

        If unitNum >= 0 Then
            If cpUnitNumCollectionSets Is Nothing Then
                cpUnitNumCollectionSets = New List(Of QuickQuoteChoicePointUnitNumCollectionSet)
            End If

            If cpUnitNumCollectionSets.Count > 0 Then
                For Each s As QuickQuoteChoicePointUnitNumCollectionSet In cpUnitNumCollectionSets
                    If s.UnitNum = unitNum Then
                        cpUnitNumCollectionSet = s
                        Exit For
                    End If
                Next
            End If

            If cpUnitNumCollectionSet Is Nothing Then
                cpUnitNumCollectionSet = New QuickQuoteChoicePointUnitNumCollectionSet
                cpUnitNumCollectionSet.UnitNum = unitNum
                cpUnitNumCollectionSets.Add(cpUnitNumCollectionSet) '5/8/2014 - updated w/ logic to add to list
            End If
        Else '9/16/2014 note: may need to return something for unitNum < 0 if storing unassigned lossed at policy level; for -3 (N/A) and -2 (Not Determined)
            '9/16/2014 - added logic to use 0 for everything else
            Return GetChoicePointUnitNumCollectionSet(0, cpUnitNumCollectionSets)
        End If

        Return cpUnitNumCollectionSet
    End Function
    'added overload 2/5/2015 for 527.900.200-44 (LossHistory.UnitNum is now an IdValue object instead of Integer)
    Public Function GetChoicePointUnitNumCollectionSet(ByVal unitNum As Diamond.Common.Objects.IdValue, ByRef cpUnitNumCollectionSets As List(Of QuickQuoteChoicePointUnitNumCollectionSet)) As QuickQuoteChoicePointUnitNumCollectionSet
        Dim cpUnitNumCollectionSet As QuickQuoteChoicePointUnitNumCollectionSet = Nothing

        If QuickQuoteHelperClass.IsValidDiamondNum(unitNum, True) Then
            If cpUnitNumCollectionSets Is Nothing Then
                cpUnitNumCollectionSets = New List(Of QuickQuoteChoicePointUnitNumCollectionSet)
            End If

            If cpUnitNumCollectionSets.Count > 0 Then
                For Each s As QuickQuoteChoicePointUnitNumCollectionSet In cpUnitNumCollectionSets
                    If s.UnitNum = unitNum.Id Then
                        cpUnitNumCollectionSet = s
                        Exit For
                    End If
                Next
            End If

            If cpUnitNumCollectionSet Is Nothing Then
                cpUnitNumCollectionSet = New QuickQuoteChoicePointUnitNumCollectionSet
                cpUnitNumCollectionSet.UnitNum = unitNum.Id '2/5/2015 - updated to use .Id
                cpUnitNumCollectionSets.Add(cpUnitNumCollectionSet) '5/8/2014 - updated w/ logic to add to list
            End If
        Else '9/16/2014 note: may need to return something for unitNum < 0 if storing unassigned lossed at policy level; for -3 (N/A) and -2 (Not Determined)
            '9/16/2014 - added logic to use 0 for everything else
            Return GetChoicePointUnitNumCollectionSet(0, cpUnitNumCollectionSets)
        End If

        Return cpUnitNumCollectionSet
    End Function
    Public Function GetChoicePointUnitNumCollectionSetOld(ByVal unitNum As Integer, ByRef cpUnitNumCollectionSets As List(Of QuickQuoteChoicePointUnitNumCollectionSet)) As QuickQuoteChoicePointUnitNumCollectionSet
        Dim cpUnitNumCollectionSet As QuickQuoteChoicePointUnitNumCollectionSet = Nothing

        If unitNum >= 0 Then
            If cpUnitNumCollectionSets Is Nothing Then
                cpUnitNumCollectionSets = New List(Of QuickQuoteChoicePointUnitNumCollectionSet)
            End If

            If cpUnitNumCollectionSets.Count > 0 Then
                For Each s As QuickQuoteChoicePointUnitNumCollectionSet In cpUnitNumCollectionSets
                    If s.UnitNum = unitNum Then
                        cpUnitNumCollectionSet = s
                        Exit For
                    End If
                Next
            End If

            If cpUnitNumCollectionSet Is Nothing Then
                cpUnitNumCollectionSet = New QuickQuoteChoicePointUnitNumCollectionSet
                cpUnitNumCollectionSet.UnitNum = unitNum
                cpUnitNumCollectionSets.Add(cpUnitNumCollectionSet) '5/8/2014 - updated w/ logic to add to list
            End If
        Else '9/16/2014 note: may need to return something for unitNum < 0 if storing unassigned lossed at policy level; for -3 (N/A) and -2 (Not Determined)
            '9/16/2014 - added logic to use 0 for everything else
            Return GetChoicePointUnitNumCollectionSet(0, cpUnitNumCollectionSets)
        End If

        Return cpUnitNumCollectionSet
    End Function
    '10/14/2014 - moved previous test logic from Page_Load
    Private Sub OldTestFunctionality()
        'QQxml = New QuickQuoteXML 'added 3/25/2014 for testing w/ QuickQuoteXML constructor (that logs test user into Diamond)
        'GetDatabaseXml(1359)

        'TestAuthTokenAndWorkFlowQueue()
        'TestReRate()

        'Dim newId As String = ""
        'Dim err As String = ""
        'QQxml.CopyQuote("538", newId, err)
        'If err = "" Then

        'End If

        'Dim qId As String = ""
        'Dim err As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
        'If err = "" Then
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
        '    If err = "" Then

        '    End If
        'End If

        'Dim err As String = ""
        'Dim strXml As String = ""
        'QQxml.GetQuote("1730", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, strXml, err)
        'If err = "" Then

        'End If

        'Dim qId As String = "1628" 'ScheduledRating requires at least 2 vehicles
        'Dim err As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.IRPM, quickQuote, err)
        'If err = "" Then
        '    quickQuote.IRPM_CAP_Management = "1.1"
        '    quickQuote.IRPM_CAP_ManagementDesc = "mgmt"
        '    quickQuote.IRPM_CAP_Employees = ".85"
        '    quickQuote.IRPM_CAP_EmployeesDesc = "emp"
        '    quickQuote.IRPM_CAP_Equipment = ".9"
        '    quickQuote.IRPM_CAP_EquipmentDesc = "eq"
        '    quickQuote.IRPM_CAP_SafetyOrganization = ".9"
        '    quickQuote.IRPM_CAP_SafetyOrganizationDesc = "so"
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.IRPM, quickQuote, qId, err)
        '    If err = "" Then

        '    End If
        'End If

        'Dim qId As String = "1430"
        'Dim err As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
        'If err = "" Then
        '    quickQuote.CopyAdditionalInterestsFromBuildingsToContractorsEquipmentItemsAndBuildings()
        '    If err = "" Then

        '    End If
        'End If

        'Dim qId As String = "984" '"1258" '"1250" '"1248"
        'Dim err As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
        'If err = "" Then

        'End If

        'Dim qId As String = "1384"
        'Dim err As String = ""
        'Dim qXml As String = ""
        'QQxml.GetQuote(qId, "2181", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, qXml, err)
        'If err = "" Then

        'End If
        'err = ""
        'qXml = ""
        'QQxml.GetQuote(qId, "2182", QuickQuoteXML.QuickQuoteXmlType.Quote, quickQuote, qXml, err)
        'If err = "" Then

        'End If

        'Dim a1 As String = ""
        'Dim a2 As String = ""
        'Dim a3 As Integer = 0
        'For Each a As QuickQuoteObject.EmployersLiabilityTest In System.[Enum].GetValues(GetType(QuickQuoteObject.EmployersLiabilityTest))
        '    a1 = a.ToString
        '    a1 = qqHelper.TranslatedEnumText(a1)
        '    'a2 = [Enum].GetName(GetType(QuickQuoteObject.EmployersLiabilityTest), a)
        '    a3 = CInt(a)
        'Next

        'LoadTestData()
        'LoadTestquickQuote()

        'ParseXML("C:\Users\domin\Documents\QuickQuoteTests\Test1\20120517143320_RatingResultText.XML")
        'ParseXML("C:\Users\domin\Documents\QuickQuoteTests\Test2\20120524154439_RatingResultText.XML")

        'GetQuoteFromDbOld("67")
        'GetQuoteFromDbOld("182")

        'QQxml.TestBuildXml("C:\Users\domin\Documents\QuickQuoteTests\Test1\DonSimpleTest.xml")

        'quickQuote = New QuickQuoteObject
        'quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialBOP

        'LoadTestQuickQuote2() 'BOP
        'LoadTestQuickQuote3() 'BOP
        'LoadTestQuickQuote4() 'WC
        'LoadTestQuickQuote5() 'BOP QA
        'LoadTestQuickQuote6() 'GL
        'LoadTestQuickQuote4_1() 'WC QA

        'quickQuote = New QuickQuoteObject
        'quickQuote.VersionId = "20"
        'quickQuote.VersionId = "10"

        'GetDiamondPrintHistory()
        'GetDiamondPrintHistory(PrintType.JustWorksheet)

        'successful test quotes: 34, 46 has loc/building descriptions

        'TestInsert()
        'TestGet()
        'BOP_TestSave()
        'BOP_TestGets()

        'Dim quoteId As String = "83"
        'Dim errorMsg As String = ""
        'Dim newQuoteId As String = ""
        'QQxml.CopyQuote(quoteId, newQuoteId, errorMsg)
        'If errorMsg = "" Then

        'End If

        'QQxml.ArchiveOrUnarchiveQuote(quoteId, QuickQuoteXML.QuickQuoteArchiveType.Archive, errorMsg)
        'If errorMsg = "" Then
        '    QQxml.ArchiveOrUnarchiveQuote(quoteId, QuickQuoteXML.QuickQuoteArchiveType.UnArchive, errorMsg)
        'End If

        'Dim quoteId As String = "27"
        'Dim errorMsg As String = ""
        'QQxml.GetQuote(quoteId, quickQuote, errorMsg)
        'If errorMsg <> "" Then
        '    errorMsg = errorMsg
        'Else
        '    quickQuote = quickQuote
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, quoteId, errorMsg)
        '    If errorMsg <> "" Then
        '        errorMsg = errorMsg
        '    Else
        '        quickQuote = quickQuote
        '    End If
        'End If

        'BOP_save_test()
        'WC_save_test()
        'GL_save_test()

        'AppGapTest()
        'BOP_save_test_short()
        'BOP_save_test_short2()
        'CAP_save_test_short()
        'CAP_save_test_short2()
        'GL_save_test_short()
        'CPR_save_test_short() '3/8/2013 - need to remove test stuff at some point (Name.TestNameField and qq.TestObjects)
        'CPP_save_test_short()
        'WC_save_test_new() '7/3/2013 - w/ code to test resending policy id, image num, and image id
        'QQxml.FindPolicyNotes(340889, 1)
        'DeleteInvalidVelociRaterNotes()
        'QQxml.GetQuoteHistoryAndSaveNote(1739, 341031, 1, 84) 'testing 7/11/2013
        'QQxml.GetQuoteHistoryAndSaveNote(1751, 341116, 1, 84)
        'QQxml.GetQuoteHistoryAndSaveNote(1754, 341126, 1, 84)
        'QQxml.GetQuoteHistoryAndSaveNote(1755, 341129, 1, 84)
        'PPA_save_test("1782") 'testing 7/24/2013 (on QA); use quoteId if there is one 1779 (archived), 1780 (same as 1779 but w/ MaritalStatusId), 1781 (attempt w/ real data), 1782 - QPPA086227 (no coverages; now has coverages and rated w/ tier override) - got same 'unable to translate' error (same as HOM) after adding new stuff
        'PPA_save_test("1820") 'new QA test 8/8/2013 (quoteId 1820 - QPPA086237); same 'unable to translate' error (removed exclusions, householdMembers, and residenceInfo); problem appears to be w/ one of the new vehicle properties (exclusions, householdMembers, and residenceInfo are fine); problem was vehicle ACV (int in database; I was sending money)
        'HOM_save_test("1785") 'testing 7/26/2013 (on QA)
        'HOM_save_test("1634") 'testing 7/31/2013 (on Patch); 6124 (QHOM080020) has 1 policyholder; 6126 (QHOM080021) has 2 policyholders (something's wrong w/ this quote now: Unable to successfully translate source data to policy image.)
        'new Patch test 8/7/2013: successful w/ same data as 6126... quoteId 6129 (QHOM080132): also messed up because of IM
        'new Patch test... quoteId 6130 (QHOM080139) - didn't initially have house #
        'new Patch test... quoteId 6131 (QHOM080141) - killed by adding RvWatercraft (Unable to successfully translate source data to policy image.)
        'new Patch test w/ RvWatercraft w/o operators and coverages (quoteId 6133 - QHOM080143)... okay (w/ validation error) until adding RvWatercraft coverage(s)... messed up quote moving forward
        'latest good quote on Patch w/o IM or RV... quoteId 1634 - QHOM080144
        'HOM_save_test("1824") 'testing 8/8/2013 (on QA), 1821 - QHOM064764, killed w/ IM; next test 1822 - QHOM064765, no IM, still killed on 2nd attempt; next 1823 - QHOM064766: failed on re-rate (same data both times); next 1824 (QHOM064767)
        'PPA_save_test("1825") 'new QA test to see if all quotes are now failing on re-rate or just HOM: 1825-QPPA086238 (worked fine)
        'HOM_save_test("1826") 'new QA test to see if IM will rate the 1st time (nope; gets unhandled error 1st time but works the 2nd time, w/ IM; failed on re-rate attempt)
        'HOM_save_test("1827") 'new QA test w/ IM and Rv...
        'HOM_save_test("6138") 'new Patch test to try to duplicate QA results (w/ IM 1st); 6135-QHOM080146 (duplicated); fixed IM CoverageCodeId issue for 6138 where it was being overwritten on 1st rate attempt
        'HOM_save_test("6139", QuickQuoteXML.QuickQuoteValidationType.Rate) 'new Patch test w/ only save on 1st run thru; did Save 1st time and then Rate 2nd time; successfully rated on 1st rate attempt (2nd run-thru) but failed on 2nd
        'HOM_save_test("6140") 'new Patch test w/ old Policyholder node spelling (instead of PolicyHolder); didn't make a difference
        'HOM_save_test("6141") 'new Patch test w/ existing clientId to see if that makes a difference (6141-QHOM080151); nope, did same thing
        '8/9/2013 - was able to successfully test HOM re-rating (6142-QHOM080152) in a previous DiamondQuickQuote version (DiamondQuickQuote_backup_HOM_re-rating) so the error must be related to something I added... maybe Applicants
        'HOM_save_test("6143") '8/9/2013 - new Patch test w/o applicants (6143-QHOM080153); didn't work
        'HOM_save_test_old("6144") 'another new Patch test (6144-QHOM080154); this worked so it's definitely one of the new properties
        'HOM_save_test_old2("6145") '8/12/2013 - Patch test to find differences between old method and current one; 6145-QHOM080155
        'HOM_save_test_old2("6146") 'another test to see if everything is okay when added at the beginning (so it will be there on subsequent rating attempts); 6146-QHOM080156; failed on re-rate
        'HOM_save_test_old2("6148") 'w/o operators; 6148-QHOM080158 (worked); still successful upon adding back in but failed on 1st subsequent rate w/ operators
        'HOM_save_test_old2("6149") 'another test w/ operators initially; will try to remove before re-rate; 6149-QHOM080159; re-rate failed... test confirmed that operators can be added but the subsequent rate always fails regardless if operators is still there or not
        'HOM_save_test("6150") 'current patch test w/o operators (6150-QHOM080163); also has Loc SectionCoverages and Loc PolicyUnderwritings as-of 8/15/2013
        'DFR_save_test("6153") '8/15/2013 Patch test; 6152-QDFR015280 was 1st attempt (killed by re-attempting rate after adding Operators); 6153-QDFR015281 was 2nd attempt
        'DFR_save_test("6154") '8/19/2013 Patch test; 6154-QDFR015284; tested Loc/Rv/Operators instead of Loc/Rv/AddedOperators; still got SQL FK error until setting OperatorNum (eventhough RiskLevel/Operators wasn't populated); got 'unable to translate' error on re-rate attempt
        'DFR_save_test("6155") '6155-QDFR015286; same result as 6154; this one was also setting RiskLevel/Operators instead of just Loc/Rv/Operators
        'DFR_save_test("6156") '6156-QDFR015289; able to successfully re-rate when Operator isn't Policyholder1 or 2
        'DFR_save_test("6157") '6157-QDFR015292; able to successfully re-rate w/ Policyholder when name/address is omitted
        'testing 9/24/2013
        'PPA_save_test_minimum("1879") 'QPPA111023
        'HOM_save_test_minimum("1883") 'QHOM084533
        'new tests 9/26/2013
        'PPA_save_test_new("1887") 'QPPA111031
        'HOM_save_test_new("1888") 'QHOM084548
        'new test for Patch 10/1/2013
        'Test_Quote_Save("6160")
        'StaticDataTesting() 'added 11/19/2013 for testing Static Data
        '12/5/2013 - latest tests after using static data
        'HOM_save_test_new("1927") 'specific to QA (caught an unhandled error using version_id 45 and 11)
        'DFR_save_test("")
        '12/20/2013 - testing in new QuickQuote website
        'all QA
        'PPA_save_test_new("1959")'QPPA111095; worked but not set up for 3rd party reports
        'HOM_save_test_new("1960") 'unhandled exception; 12/23/2013 note: successful after fixing enum code (to send enum text when getting related values) and InlandMarineType xml (to correctly use coverage code dscr)
        'DFR_save_test("1961") 'unhandled exception; 12/23/2013 note: successful after fixing enum code (to send enum text when getting related values) and InlandMarineType xml (to correctly use coverage code dscr)
        'CPR_save_test_short() '1962-validation items
        'BOP_save_test_short() '1963-success
        'all Patch
        'HOM_save_test_new("6173") 'unhandled exception (different than QA); due to memory
        '1/22/2014 - testing updated logic that uses Diamond Services (on QA right now)
        'PPA_save_test_new("1989") 'quoteId = 1989, quoteNumber = QPPA111113 (worked w/ comparative rater but didn't work w/ Diamond service call... There was an error deserializing the object of type Diamond.Common.Objects.Policy.Image. The string '' is not a valid Boolean value.
        'more testing 1/27/2014
        'PPA_save_test_new("2061") 'quoteId = 2061; quoteNumber = # (no policy-level covs)
        'PPA_save_test_new("2062") 'quoteId = 2062; quoteNumber = # (all policy-level covs)
        'retesting 1/31/2014 after adding logic to convert quote object to Diamond image
        'PPA_save_test_new("2081") 'quoteId = 2081; quoteNumber = QPPA111124 (policyId 1st rate=413609; 2nd rate=validation error: Policy QPPA111124 already exists.; wasn't writing quickQuote.PolicyOriginTypeId so it was defaulting to 0 for Diamond instead of 1 for Web); issue w/ Driver Accidents/Violations (type_id probably indicates it should be in LossHistories)
        'testing again after fixing PolicyOriginTypeId logic
        'PPA_save_test_new("2082") 'quoteId = 2082; quoteNumber = QPPA111125 (policyId 1st rate=413610; 2nd rate=validation error: Policy QPPA111125 already exists.; had 1 for Web in the database so not sure what the issue is; may not work through Diamond service); now just getting messages about needing symbol for each vehicle on 1st rate (was probably adding automatically through comparative rater)
        're-rated quoteId 2082 (QPPA111125) through comparative rater service successfully; new policyId = 413612)
        'more testing 2/3/2014
        'CAP_save_test_short2() 'want to test Bob's Vehicle coverages logic to see if CoverageDetail needs to be instantiated... and yes it does (quoteId 2087)
        'still 2/3/2014 trying SaveRate service instead of SubmitRate
        'PPA_save_test_new("2082") 'originally create via SubmitRate service; then failed on re-rate; was successfully rated through CRS last time... now: User is unable to save the policy because it is either no longer a pending or quote. User no longer owns the policy or you do not have rights to save the policy.
        'PPA_save_test_new("2100") 'trying brand new quote... quoteId=2100; quoteNumber=#... same message as before: User is unable to save the policy because it is either no longer a pending or quote. User no longer owns the policy or you do not have rights to save the policy.
        'new test 2/5/2014... with using policy id and image number if available
        'PPA_save_test_new("2129") 'quoteId=2129, quoteNumber=QPPA111180 (successfully rated; SubmitRate re-rate w/o policyId and policyImageNum: Policy QPPA111180 already exists.; received same message w/ policyId and policyImageNum; SaveRate re-rate: User is unable to save the policy because it is either no longer a pending or quote. User no longer owns the policy or you do not have rights to save the policy.)
        'PPA_save_test_new("2140") 'quoteId=2140, quoteNumber=QPPA111182 (successfully rated; haven't tried re-rate yet)
        '2/7/2014 - testing more changes on SaveRate (SubmitRate is used for initial rate)
        'PPA_save_test_new("2157") 'quoteId=2157, quoteNumber=QPPA111188; don't re-use this or 2159 since driver cannot have phones/emails
        'PPA_save_test_new("2159") 'quoteId=2159, quoteNumber=QPPA111190 (now trying CRS w/ same quote info as 2157 to see if drivers can even have phone #s or emails... they can't)
        '2/7/2014 - testing w/ policyholder phones/emails
        'PPA_save_test_new("2161") 'quoteId=2161, quoteNumber=QPPA111191; policyholder retained phone/email after removing... might need to try changing DetailStatusCode to 0
        '2/7/2014 - more PH testing and driver GoodStudent, AccPreventionCourse properties (these 2 driver properties aren't getting set in Diamond at all... might be specific to driver birthdate... 2/10/2014 update: confirmed to be tied to driver bday)
        'PPA_save_test_new("2162") 'quoteId=2162, quoteNumber=QPPA111192... 2/27/2014 note: was testing re-rate stuff but PolicyImagePhoneLink records got out of whack somehow... need to try a fresh quote
        '2/7/2014 - new test w/ CRS to see if GoodStudent, AccPreventionCourse properties can be set through that... nope... 2/10/2014 update: they work depending on driver age
        'PPA_save_test_new("2163") 'quoteId=2163, quoteNumber=QPPA111193
        '2/10/2014 - Driver.GoodStudent test w/ bday of 1/1/1996... works
        'PPA_save_test_new("2170") 'quoteId=2170, quoteNumber=QPPA111194
        '2/10/2014 - Driver.AccPreventionCourse test w/ bday of 1/1/1950... works
        'PPA_save_test_new("2171") 'quoteId=2171, quoteNumber=QPPA111195
        'PPA_save_test_new("2257") 'quoteId=2257, quoteNumber=QPPA111253; testing 2/27/2014... getting primary key constraint error on initial rate about ClientPhoneLink record... record doesn't exist... transaction must roll back; 2/28/2014 - everything is okay after updating the object list code to initialize all Diamond declarations to Nothing... previous value was being persisted to subsequent iterations, causing duplication of items... all re-rates are currently coming back w/ $0 premium
        'PPA_save_test_new("2256") 'quoteId=2256, quoteNumber=QPPA111250; testing 2/27/2014... w/ code to remove Client/Policyholder phones... rating errors for vehicles w/o coverages, etc.; 2/28/2014 - successfully rated w/ $0 premium for everything saying coverage is not effective (everything else is okay after updating the object list code to initialize all Diamond declarations to Nothing... previous value was being persisted to subsequent iterations, causing duplication of items)
        'PPA_save_test_new("2258") 'quoteId=2258, quoteNumber=QPPA111254; testing 2/28/2014 to see if initial rate is returned w/ $0 premium like re-rate... initial rate is okay: came back as $820... same thing happened on re-rate: $0; 3/3/2014 - started adding a LossHistoryRecord to the Driver
        'PPA_save_test_new("2387") 'quoteId=2387 (wasted 2383 through 2387 [2387 not archived yet; archived 3/26/2014 after SaveRate returned $0 premium]), quoteNumber=QPPA111348; testing 3/25/2014 to make sure everything is okay w/ service library... initially broken but worked after deleting and re-adding hard references to Diamond.Common.Objects and Diamond.Common.StaticDataManager... still has same issue w/ SaveRate where coverages aren't effective
        '---start reference errors 3/26/2014
        'Could not load type 'Diamond.Common.Objects.MultiPolicyDiscount.LookupCriteria' from assembly 'Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183'.

        'Could not load type 'Diamond.Common.StaticDataManager.Objects.SystemData.SICType' from assembly 'Diamond.Common.StaticDataManager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183'.
        '---end reference errors 3/26/2014
        'PPA_save_test_new("2393") 'quoteId=2393 (archived 3/26/2014), quoteNumber=QPPA111352; testing 3/26/2014 to see if SaveRate returns premium whenever existing image is used w/o going through convert method... works; next going to try adding reconciliation logic for coverages... didn't make a difference
        'PPA_save_test_new("2395") 'quoteId=2395 (archived 3/26/2014), quoteNumber=QPPA111353; testing SaveRate 3/26/2014 w/ image dumps
        'PPA_save_test_new("2396") 'quoteId=2396 (archive 3/26/2014), quoteNumber=QPPA111354; testing SaveRate 3/26/2014 w/ image dumps and separate process for Save... caught unhandled exception because didn't code SuccessfulSave method to pass newImage byref so quoteImage was passed back in after items were already deleted
        'PPA_save_test_new("2398") 'quoteId=2398, quoteNumber=QPPA111356; testing SaveRate 3/26/2014 w/ image dumps and separate process for Save... SaveRate still didn't return premium but may be able to use dump xml w/ config tool
        'PPA_save_test_new("2466") 'quoteId=2466, quoteNumber=QPPA111380; same test as previous line but w/ higher limits for vehicle sound equipment (changed total premium from $820 to $955)... still not total premium, but vehicles still showed premiums: $592.00 for v1 and $328.00 for v2 (pulled up old quote [quoteId 2398] and it showed the same way)
        'PPA_save_test_new("2508") 'quoteId=2508, quoteNumber=QPPA111419; retesting Save/Rate 4/7/2014 after setting GuaranteedRatePeriodEffectiveDate (and corresponding Expiration date property)... works... premium=$955.00 ($820.00 after changing sound equipment limits back to originals... and back to $955 after changing back)
        'PPA_save_test_new("2519") 'quoteId=2519, quoteNumber=QPPA111430; testing same quote info to see if SoundEquipment limit shows on coverage screen on SubmitRate (premium is already showing and limit shows in grid but not on input field)... didn't work... but we may not be using it anyway; see line below... UI may also need ManualLimitIncreased... added 4/8/2014... works
        'PPA_save_test_new("2520") 'quoteId=2520, quoteNumber=QPPA111431; same test for sound equipment but w/ comparative rater service... works the same, which is good; 4/7/2014 note: appears Diamond is also setting ManualLimitIncreased along w/ ManualLimitAmount... added 4/8/2014... works
        'PPA_save_test_new("2524") 'quoteId=2524, quoteNumber=QPPA111442; 4/8/2014 - testing CreditScore stuff w/o using tier override... credit report ordering failed w/ exception, but quote rated successfully... original premium=$1520 w/ tier 99... everything is working correctly after updating CreditReport method to 1st save the existing image that's been edited, use that for the credit report call and also the Save/Rate... rating will fail on Save/Rate w/o credit report ordering or tier override since current QQ-to-image conversion logic will wipe out TieringInformation; 4/9/2014 note: can't get past 'required tier' message now to get successful rate, even after reverting code back to what should've been working... may have messed up quote
        'PPA_save_test_new("2557") 'quoteId=2557, quoteNumber=QPPA111461; 4/9/2014 - retesting CreditScore stuff to see if previous quote is just messed up... SubmitRate worked but SaveRate got same 'required tier' message; 4/9/2014 issues w/ always getting 'required tier' message were due to a System Setting changing from yesterday... ChoicePoint.Environment needs to be Production instead of Test
        'PPA_save_test_new("2563") 'quoteId=2563, quoteNumber=QPPA111464; 4/9/2014 - retesting CreditScore stuff w/o image conversion logic for existing quote; SubmitRate and SaveRate both worked... something whacky is happening in coversion that is then being persisted on subsequent loads regardless of whether or not conversion method is later called; failed on next re-rate w/ conversion logic in there and logic to retain TierTypeId... subsequent test still failed w/o conversion logic; 4/9/2014 issues w/ always getting 'required tier' message were due to a System Setting changing from yesterday... ChoicePoint.Environment needs to be Production instead of Test
        'PPA_save_test_new("2566") 'quoteId=2566, quoteNumber=QPPA111465; 4/9/2014 - retesting CreditScore stuff w/ conversion logic and last TieringInformation logic that I think was working (retains TierTypeId and sets override to false and adjustmenttypeid to 0 instead of flagging for delete); same result on SaveRate; 4/9/2014 issues w/ always getting 'required tier' message were due to a System Setting changing from yesterday... ChoicePoint.Environment needs to be Production instead of Test
        'PPA_save_test_new("2568") 'quoteId=2568, quoteNumber=QPPA111466; 4/9/2014 - retesting CreditScore stuff w/ conversion logic but nothing for PolicyLevel on re-rate; same result... also same from UI; 4/9/2014 issues w/ always getting 'required tier' message were due to a System Setting changing from yesterday... ChoicePoint.Environment needs to be Production instead of Test
        'PPA_save_test_new("2601") 'quoteId=2601, quoteNumber=QPPA111468; 4/9/2014 - retesting CreditScore stuff... will try re-rate from UI after successful SubmitRate... successful re-rate w/o any credit reports; 4/9/2014 issues w/ always getting 'required tier' message were due to a System Setting changing from yesterday... ChoicePoint.Environment needs to be Production instead of Test; also successfully tested w/ driver and vehicle reconciliation logic... also worked w/o credit report and pre-save... might still need at least the pre-save if any drivers are flagged for delete; re-rate test w/ adding driver 2: 1st w/o ordering credit - received validation that it needed to be assigned to a vehicle... rated successfully on re-rate; test w/ a 3rd driver: worked successfully the 1st time; will try ordering reports for all drivers 4/9/2014
        'PPA_save_test_new("2615") 'quoteId=2615, quoteNumber=QPPA111474; 4/10/2014 - testing to see what Driver.DriverNum looks like on new driver... initially: id = -5, IdGuid has something; after save/rate: id >= 1, IdGuid has zeros
        'PPA_save_test_new("2619") 'quoteId=2619, quoteNumber=QPPA111475; 4/10/2014 - testing credit reporting w/ Save for initial rate attempt; also verify that QuickQuoteObject is coming back w/ QuoteNumber, database_quoteId, etc.; test will also verify if QuickQuote is updated on the way back when passed ByVal (instead of ByRef)... since it will need to be upated w/ the QuoteNumber after the credit report method does the initial Save so logic will know to send it to SaveRate instead of SubmitRate... QuickQuote was successfully updated w/ QuoteNumber (also ClientId, premiums, and database values... quoteId, etc.), but initial save failed since TransactionExpirationDate was invalid (we were only setting TransEffectiveDate)
        'PPA_save_test_new("2620") 'quoteId=2620, quoteNumber=QPPA111476; 4/10/2014 - testing same stuff as previous test... added TransactionExpirationDate logic... got a different validation message on Save... need to try Submit instead of Save for initial insert into Diamond
        'PPA_save_test_new("2625") 'quoteId=2625, quoteNumber=QPPA111481; 4/11/2014 - testing same stuff as previous test... added functionality to call SubmitApplication instead of SaveClient on initial save... save failed on 1st attempt w/ exception (Exception has been thrown by the target of an invocation.)... will try adding submitVersion
        'PPA_save_test_new("2628") 'quoteId=2628, quoteNumber=QPPA111483; 4/11/2014 - testing same stuff as previous test... w/ submitVersion on SubmitApplication call... everything worked correctly (SubmitApplication was successful and report was ordered on 1st time through... report just showed 1st subject even though subjectNums included all 3 drivers)
        'PPA_save_test_new("2631") 'quoteId=2631, quoteNumber=QPPA111484; 4/11/2014 - testing same stuff as previous but w/ PH2 as driver 2; Save worked but failed because of unhandled exception... see next line...
        'quoteNumber was saved on QuickQuote but clientId wasn't (shouldn't been 371735)... 
        'subsequent error on SaveRate: An update returned 0 rows affected.  Expected value was 1. CommandText = UPDATE Account SET [billingpayplan_id]=@billingpayplan_id,[billmethod_id]=@billmethod_id,[billingrefundoption_id]=@billingrefundoption_id,[current_billto_id]=@current_billto_id,[deduction_day]=@deduction_day,[checkautorefundpayee_id]=@checkautorefundpayee_id,[external_customer_account_number]=@external_customer_account_number,[external_account_type]=@external_account_type WHERE [account_num]=@account_num AND [client_id]=@client_id
        '--after updating logic to re-instantiate Client.ClientId when blank instead of setting to empty string
        'An update returned 0 rows affected.  Expected value was 1. CommandText = UPDATE Client SET [policysequence]=@policysequence,[apply_renewal_package_credit]=@apply_renewal_package_credit,[last_modified_date]=@last_modified_date WHERE [client_id]=@client_id
        '--after updating logic to set Client.IsNew flag
        'An update returned 0 rows affected.  Expected value was 1. CommandText = UPDATE Account SET [billingpayplan_id]=@billingpayplan_id,[billmethod_id]=@billmethod_id,[billingrefundoption_id]=@billingrefundoption_id,[current_billto_id]=@current_billto_id,[deduction_day]=@deduction_day,[checkautorefundpayee_id]=@checkautorefundpayee_id,[external_customer_account_number]=@external_customer_account_number,[external_account_type]=@external_account_type WHERE [account_num]=@account_num AND [client_id]=@client_id
        'worked after adding Account.IsNew logic; new clientId = 371751
        'still on quoteId 2631... policyholder2/driver2 didn't come across... check save/retrieve methods
        'PPA_save_test_new("2645") 'quoteId=2645, quoteNumber=QPPA111500; 4/14/2014 - retesting PH2 as driver 2... worked but PolicyHolder2 wasn't written to xml since HasData was False (.Name.HasData and .Address.HasData was True though)... credit report ordering validation items: {Credit Report - DON TEST AUTO - Unscored Report, None}; {Credit Report - LADY AUTO - Complete, Credit Bureau Manual Report, None}; updated Policyholder.HasData to check for Name.HasData, Address.HasData or Emails/Phones w/ count > 0
        'PPA_save_test_new("2655") 'quoteId=2655, quoteNumber=QPPA111509; 4/15/2014 - new test w/ CP environment pointed to Test and no reports ordered... everything okay for initial rate w/o reports; okay on subsequent rate w/o altering image and w/o reports; okay on subsequent rate w/ altered image but nothing on Drivers or PolicyLevel (code to Exit Sub at top of conversion methods) and w/o reports; okay on subsequent rate w/ altered image but nothing on PolicyLevel (code to Exit Sub at top of conversion method) and w/o reports; okay on subsequent rate w/ altered image but nothing on Tier part in PolicyLevel (commented specific code in conversion method) and w/o reports; okay on subsequent rate w/ altered image (including tier section of PolicyLevel) and w/o reports; okay on subsequent rate w/ altered image (including new driver) and w/o reports; okay on subsequent rate w/ altered image (including edited new driver, which will cause a delete and add) and w/o reports; okay on subsequent rate w/ altered image (including removed new driver) and w/o reports; okay on subsequent rate w/ altered image and reports attempt (for drivers 1 and 2... PHs 1 and 2)... reports weren't ordered because query found existing CreditScore records (needs to inner join ChoicePointTransmissionCreditScoreLink); subsequent rate w/ altered image and successful reports attempt after updating query (for drivers 1 and 2... PHs 1 and 2)... still nothing in ChoicePointTransmissionCreditScoreLink table except when using Prod environment (validation items: {Credit Report - DON AUTO - Invalid Request, None}, {Credit Report - LADY AUTO - Invalid Request, None})... ChoicePointTransmissionVehicle table has records (link must only have records when using Production or valid test data); okay on subsequent rate w/ altered image and updated reports query (found records); xmls in folder: C:\Users\domin\Documents\QA_Credit_Tier_Rating_Test_QuoteId_2655_QuoteNumber_QPPA111509
        'PPA_save_test_new("2656") 'quoteId=2656, quoteNumber=QPPA111511; 4/15/2014 - duplicating previous test but w/ CP environment pointed to Prod... everything okay for initial rate w/o reports; okay on subsequent rate w/o altering image and w/o reports; okay on subsequent rate w/ altered image but nothing on Drivers or PolicyLevel (code to Exit Sub at top of conversion methods) and w/o reports; okay on subsequent rate w/ altered image but nothing on PolicyLevel (code to Exit Sub at top of conversion method) and w/o reports; okay on subsequent rate w/ altered image but nothing on Tier part in PolicyLevel (commented specific code in conversion method) and w/o reports; okay on subsequent rate w/ altered image (including tier section of PolicyLevel) and w/o reports; okay on subsequent rate w/ altered image (including new driver) and w/o reports; okay on subsequent rate w/ altered image (including edited new driver, which will cause a delete and add) and w/o reports; okay on subsequent rate w/ altered image (including removed new driver) and w/o report; okay on ssubsequent rate w/ altered image and successful reports attempt w/ latest query (for drivers 1 and 2... PHs 1 and 2)... something in ChoicePointTransmissionCreditScoreLink table since using Prod environment (validation items: {Credit Report - DON TEST AUTO - Unscored Report, None}, {Credit Report - LADY AUTO - Complete, Credit Bureau Manual Report, None}); okay on subsequent rate w/ altered image and latest reports query (found records); xmls in folder: C:\Users\domin\Documents\QA_Credit_Tier_Rating_Test_QuoteId_2656_QuoteNumber_QPPA111511
        'PPA_save_test_new("2657") 'quoteId=2657, quoteNumber=QPPA111512; 4/15/2014 - since test and prod environments both work... just performing full test w/ reports attempt on initial run-through along w/ SubmitApplication call to save... everything worked correctly; subsequent re-rate was also successful; xmls logged in MyDocuments; 4/16/2014 - retesting to verify PayPlanPreviews is getting into rated xml... worked... now using comparative rater service to compare xml... worked... now going back to Diamond services to verify that they still work... worked; 4/22/2014 - testing latest driver/vehicle reconciliation logic... GetQuoteForSaveType should return rated xml when available (for PPA) and image.ToDataContractXML() should be used (for PPA) instead of BuildXml... everything worked correctly rating-wise, but may have issue w/ items getting duplicated if image has items flagged for delete... since there's nothing in place to look at the DetailStatusCode flag whe parsing them; 4/23/2014 - updated VehicleSymbols parsing logic to ignore items w/ DetailStatusCode 2, but might want to ditch this quote since there are several vehicleSymbols on the image that are flagged for delete; testing 4/24/2014 to see what happens when changing a name on an existing driver... to see if name_id changes and if not, if name changes... will 1st add 3rd driver, and will then change name on subsequent rate results: existing name record was updated... maintained same name_id... may need to test on client also... results: updated existing name record; maintained same clientId and nameId; now testing vehicle.driverNum props since xml will now be from image (instead of BuildXml method) and driverNum properties may not match the incremental QQ driver #s... results w/ 3 drivers (diaDriverNums 1, 2, and 4): actually worked fine since nothing changed but wouldn't display correctly in tree or on page... need to determine if xml returned is from image and reconcile vehicle.driverNum props if so (use Driver.DriverNum props that are set from Diamond to match up w/ correct sequential QQ driver #... also need to handle for Diamond setting the Vehicle.DriverNum props to 0 since it will blow up the tree functionality... tree tries to get the driver w/ Drivers(veh.DriverNumProp - 1), which would try to get an index of -1)... now fixed in QuickQuoteObject.FinalizeQuickQuote method (specifically ParseThruVehicles method); testing 4/28/2014 w/ motorcycle... and additional interest... results: all successful... new vehicleNum = 4; AdditionalInterestNum = 2; AdditionalInterestListId = 100930; AI_nameId = 2511911; AI_addressId = 2647463... resetting listId failed on subsequent rate (was new on AdditionalInterestList object but was still in place on AdditionalInterest object since there was no code to reset it like on AdditionalInterestList... code now matches... still failed w/ same error); will now try setting singleEntry to True... 5/1/2014 note: IS said we have to create new AdditionalInterestList record via Diamond service and then use that id... testing 5/6/2014 - worked successfully... new AIList record id = 168850; used agencyId 21 since that's what was stored on the previous one... may need to clear out... code will now overwrite w/ quote's agencyId if possible; 5/14/2014 - testing re-rate w/ Issue/Bound modifier instead of Quote... since Diamond automatically add these modifiers and they're not deleted w/ DetailStatusCode 2... and our logic would add another since it wouldn't find a match on the deleted one

        '10/13/2014 - testing new OkayToUseDiamondImageXmlAndSetDiamondNumsAndUseAppOrRatedXmlOnQuote logic (consolidates logic from CopyRatedQuoteInformationToQuoteObject, GetQuoteForSaveType, and RateQuickQuote_DiamondService)
        'Dim lobId As String = ""
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None
        'Dim isOkay As Boolean = False
        'isOkay = QQxml.OkayToUseDiamondImageXmlAndSetDiamondNumsAndUseAppOrRatedXmlOnQuote(lobId)
        'isOkay = QQxml.OkayToUseDiamondImageXmlAndSetDiamondNumsAndUseAppOrRatedXmlOnQuote
        'isOkay = QQxml.OkayToUseDiamondImageXmlAndSetDiamondNumsAndUseAppOrRatedXmlOnQuote(lobType)
        'lobType = Nothing 'works the exact same as None value
        'isOkay = QQxml.OkayToUseDiamondImageXmlAndSetDiamondNumsAndUseAppOrRatedXmlOnQuote(lobType)

        '10/6/2014 - testing Diamond services rate against 527.870
        'PPA_save_test_new("24560") 'quoteId=24560, quoteNumber=; validation error when using 2766: Agency 6140-2766 is closed as of 10/01/2014.  New Business Transaction not allowed., Error
        'PPA_save_test_new("24562") 'quoteId=24562, quoteNumber=QPPA177691; rated fine w/ 3230
        'HOM_save_test_new_simple("24563") 'quoteId=24563, quoteNumber=QHOM143028; rated fine w/ 3230

        '10/2/2014 - testing CopyQuoteToAgency for Scott Miller; need to copy quotes from 6140-2766 (agencyId 150) to 6203-3230 (agencyId 576); might need to wipe out ClientId... and also check ProducerId/ProducerCode and AdditionalInterestListId
        '10/6/2014 note: doesn't appear that there are any problems w/ re-using clientId between agencies... original clientId (301564) was created for quote in 2766 (QCGL011042); re-used okay for quote in 3230 (QCGL015552) w/ 3230 user; also did the same w/ 2766 user quoting in 3230 (clientId 314294, 2766 quote: QCGL011269, 3230 quote: QCGL015551; clientId 256937, 2766 quote: BOP1003571, 3230 quote: QBOP013333); all clientIds were previously only tied to 1 2766 quote/policy... now tied to 1 policy record in both 2766 and 3230
        'completed in prod 10/13/2014
        'CopyQuotesFromAgencyToAgency()

        '10/3/2014 - more CopyQuoteToAgency testing... Save/Rate button isn't doing anything for Test2766 user on QA
        '10/3/2014 note: found problem w/ New Quote functionality on MyVelociRater... just setting AgencyId from Dropdown so AgencyCode is staying defaulted to Diamond agency code in session, which may not match ddl selection (was the problem w/ quoteId 24531 and a handful of others that I tried to create w/ user Test2766); 10/6/2014 note: now being handled w/ validateThatAgencyCodeMatchesAgencyId logic in InitialSaveOrRateCleanup method
        '10/6/2014 note: doesn't appear that there are any problems w/ re-using clientId between agencies... original clientId (301564) was created for quote in 2766 (QCGL011042); re-used okay for quote in 3230 (QCGL015552) w/ 3230 user; also did the same w/ 2766 user quoting in 3230 (clientId 314294, 2766 quote: QCGL011269, 3230 quote: QCGL015551; clientId 256937, 2766 quote: BOP1003571, 3230 quote: QBOP013333); all clientIds were previously only tied to 1 2766 quote/policy... now tied to 1 policy record in both 2766 and 3230
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim quoteId As String = "24519"
        'Dim errorMsg As String = ""
        'QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errorMsg)
        ''Dim rateType As QuickQuoteXML.QuickQuoteSaveType = Nothing
        ''QQxml.GetRatedQuote(quoteId, testQQ, rateType, errorMsg) '10/6/2014 note: was failing... just had validation error and no image; entered under 3230 w/ user whose primary is 2766 (inactive)... since if Diamond validation is the only thing in xml (Image is missing), the agency info defaults to the logged-in info, which is no longer a valid code (not picked up w/ QuickQuoteHelperClass.GetUserAgencies method; usp_GetUserAgencyCodes stored procedure)... now fixed in GetRatedQuote method; should also fix in DiamondQuickQuote library for Commercial lines
        'If testQQ IsNot Nothing Then
        '    ''QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, quoteId, errorMsg)
        '    'Dim strQQ As String = ""
        '    'Dim ratedQQ As QuickQuoteObject = Nothing
        '    'Dim strRatedQQ As String = ""
        '    'QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQQ, ratedQQ, strRatedQQ, quoteId, errorMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '    'If errorMsg = "" Then 'problem getting rated xml when using Diamond services... due to issue w/ QuoteObjectConversion_BuildingClassifications method... tryParse calls were failing because it was sending empty string to int/dec params; now getting 'Invalid Date. Policy transaction cannot be effective prior to 10/03/2012.'

        '    'End If
        'End If

        '9/29/2014 - testing Location.DeductibleLimitId prop on Patch... devs report it always returns 24 (1000) on initial rate (even if something else is passed in... like 153) but retains value on subsequent rates
        'HOM_save_test_new_simple("22378") 'test w/ 22 (500); quoteId=22378, quoteNumber=QHOM135819; duplicated test results... looks like CoverageLimitId was changed on Image retrieved after initial Save (SubmitApplication; called because of Credit Report ordering)
        'HOM_save_test_new_simple("22380") 'quoteId=22380, quoteNumber=QHOM135820; w/o credit report ordering and initial save... SubmitRate did the same thing
        'HOM_save_test_new_simple("22381") 'quoteId=22381, quoteNumber=QHOM135821; another test to get xmls

        '9/25/2014... testing on Patch to see why ValidationItems weren't showing up... needed to replace some of the other Diamond assemblies that didn't have explicit references
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim quoteId As String = "22336"
        'Dim errorMsg As String = ""
        'QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errorMsg)
        'If testQQ IsNot Nothing Then
        '    If testQQ.Locations IsNot Nothing AndAlso testQQ.Locations.Count > 0 Then
        '        With testQQ.Locations(0)
        '            If .SectionICoverages IsNot Nothing AndAlso .SectionICoverages.Count > 0 Then
        '                For Each c As QuickQuoteSectionICoverage In .SectionICoverages
        '                    c.Dispose()
        '                    c = Nothing
        '                Next
        '                .SectionICoverages.Clear()
        '                .SectionICoverages = Nothing
        '            End If
        '        End With
        '    End If
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, quoteId, errorMsg)
        '    If errorMsg = "" Then

        '    End If
        'End If

        'tests w/ maamo user; failed but didn't return ValidationItems (maamo is not authorized for policy transactions...)
        'HOM_save_test_new_simple("22342") 'quoteId=22342, quoteNumber=
        'PPA_save_test_new_simple("22343") 'quoteId=22343, quoteNumber=

        'tests w/ DonBrewtonTest user; worked
        'HOM_save_test_new_simple("22344") 'quoteId=22344, quoteNumber=QHOM135764

        '9/22/2014 - testing HOM versionId on QA... to see if Diamond automatically changes it when using Comparative Rater and/or Diamond services
        '9/23/2014 note: all worked after adding logic to use Diamond service to get VersionId and updating QuickQuoteObject.VersionId property setter to not wipe out LobId and LobType if mapping isn't found in static data file
        'HOM_save_test_new_simple("3524") 'quoteId=3524, quoteNumber=QHOM085068; Diamond services: started w/ 45, ended w/ 57; re-rate maintained same versionId that was already there (45)... need to have it pull rated xml when available like PPA or possibly use different service (SaveRate instead of Rate)... changing service didn't make a difference; Ronnie suggested we set VersionId to 0 so Diamond will automatically determine... ValidationItem message when testing: Unable to get version information from static data manager in policy image validation; 3 validation errors after adding logic to automatically set using Diamond service (7 total validation items)... due to LobId/LobType being reset since VersionId wasn't mapped.... will probably need to update QuickQuoteObject.VersionId property... 1st test to see how RatedQuote was retaining values before new logic
        'HOM_save_test_new_simple("3528") 'quoteId=3528, quoteNumber=QHOM085070; Diamond services w/o VersionId: worked on initial save/rate (Credit report ordering triggers SubmitApplication w/ SubmitVersion) but not re-rate
        'HOM_save_test_new_simple("3530") 'quoteId=3530, quoteNumber=QHOM085071; Diamond services w/o VersionId 2: worked on initial save/rate (Credit report ordering triggers SubmitApplication w/ SubmitVersion)
        'HOM_save_test_new_simple("3531") 'quoteId=3531, quoteNumber=QHOM085072; Diamond services w/o VersionId and w/o Credit report ordering that triggers SubmitApplication w/ SubmitVersion: worked on initial save/rate via SubmitRate service
        'HOM_save_test_new_simple("3532") 'quoteId=3532, quoteNumber=; Diamond services w/ logic to set VersionId using Diamond service... failed: wiped out LobId since VersionId wasn't mapped
        'HOM_save_test_new_simple("3533") 'quoteId=3533, quoteNumber=QHOM085074; Diamond services w/o logic to set VersionId using Diamond service... to see how ratedQuote was retaining LobId and LobType whenever VersionId property was set... it wasn't... will need to update QuickQuoteObject property setter
        'HOM_save_test_new_simple("3526") 'quoteId=3526, quoteNumber=QHOM085069; comparative rater: started w/ 45, ended w/ 57; re-rate worked the same as original rate... used 57

        ''9/16/2014 - testing storing unassigned lossHistories at policy level and using -3 (N/A) and -2 (Not Determined)... on Patch
        ''appears that test CLUE maintained the -3 and -2 when retrieving the existing report... may be able to keep existing logic w/o setting them
        ''current logic will not allow for you to toggle CLUE_Auto_StoreUnassignedClueLossesAtPolicyLevel... turned it to True to get losses at policy level... then turned it to False, but logic didn't go in and remove losses; may need to adjust; working correctly after update on 9/22/2014
        ''Dim oldQuoteId As String = "22184"
        'Dim newQuoteId As String = "22236" 'QPPA170286
        'Dim errorMsg As String = ""
        ''QQxml.CopyQuoteToAgency(oldQuoteId, "6013-1840", "17", newQuoteId, errorMsg)
        ''If newQuoteId <> "" Then

        ''End If
        'Dim testQQ As QuickQuoteObject = Nothing
        ''QQxml.GetQuoteForSaveType(newQuoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errorMsg)
        'QQxml.GetQuoteForSaveType(newQuoteId, QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errorMsg)
        'If testQQ IsNot Nothing Then
        '    'testQQ.EffectiveDate = Date.Today.ToShortDateString
        '    'QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, newQuoteId, errorMsg)
        '    'If errorMsg = "" Then

        '    'End If

        '    Dim mvrTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim clueTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim results As String = ""
        '    QQxml.LoadMvrAndClueAutoForQuote(testQQ, mvrTPD, clueTPD, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, errorMsg)
        '    If mvrTPD IsNot Nothing Then

        '    End If
        '    If clueTPD IsNot Nothing Then

        '    End If
        'End If

        ''9/15/2014 - static data list testing
        'Dim ddl As New DropDownList
        'Dim optionAttributes As New List(Of QuickQuoteStaticDataAttribute)
        ''will only evaluate Options w/ matching attribute name; Options w/o attribute name will automatically be pulled in... IgnoreForLists and LOB attributes still work the same
        'Dim a As New QuickQuoteStaticDataAttribute
        'With a
        '    .nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.CoverageCodeId
        '    '.nvp_name = "CoverageCodeId"'does the same thing as setting the enum above
        '    .nvp_value = "70259" 'will make sure any Options w/ the CoverageCodeId attribute contain this in their value; additional values will be separated w/ a pipe (|)

        '    'either one of these will work the same... you can use whichever attribute name you want in the static data file
        '    '.nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.CoverageType
        '    ''.nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.HOM_CoverageType 'would be the same as above; just depends on which attribute name you want to use
        '    '.nvp_value = "LossAssessment"
        '    ''.nvp_value = System.Enum.GetName(GetType(QuickQuoteSectionICoverage.SectionICoverageType), QuickQuoteSectionICoverage.SectionICoverageType.LossAssessment)'does the exact same as the one above

        'End With
        'optionAttributes.Add(a)
        ''if you also want to filter on Form
        ''Dim a2 As New QuickQuoteStaticDataAttribute
        ''With a2
        ''    .nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.FormTypeId
        ''    .nvp_value = "1"
        ''End With
        ''optionAttributes.Add(a2)
        'qqHelper.LoadStaticDataOptionsDropDownWithMatchingAttributes(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteSectionICoverage, QuickQuoteHelperClass.QuickQuotePropertyName.IncreasedLimitId, optionAttributes)

        '9/15/2014 - testing CLUE Property; also check Applicant.ApplicantNum... doesn't appear to be getting set (appears to be because reconciliation logic is only in place for PPA); ordering appears to have 2 ChoicePointTransmissions, but the 2nd is a duplicate of the 1st
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim quoteId As String = "3495" 'QHOM085042; copy of 3361 (QHOM085026 - Arnulfo Torres)
        'Dim errorMsg As String = ""
        'QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errorMsg)
        'If testQQ IsNot Nothing Then
        '    testQQ.EffectiveDate = Date.Today.ToShortDateString
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, quoteId, errorMsg)
        '    If errorMsg = "" Then

        '    End If
        'End If

        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim quoteId As String = "3495" 'QHOM085042 copied from 3361 (QHOM085026 - Arnulfo Torres)
        'Dim errorMsg As String = ""
        'Dim results As String = ""
        'QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errorMsg)
        'If testQQ IsNot Nothing Then
        '    If errorMsg <> "" Then

        '    End If
        '    'Dim clueTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    'QQxml.LoadCluePropertyForQuote(testQQ, clueTPD, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, errorMsg)
        '    'If clueTPD IsNot Nothing Then

        '    'End If

        '    Dim clueRDs As List(Of Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalProperty.ReportData) = Nothing
        '    clueRDs = QQxml.GetCluePropertyReportDataObjectsForQuote(testQQ, results, errorMsg)
        '    If clueRDs IsNot Nothing AndAlso clueRDs.Count > 0 Then

        '    End If
        'End If

        '9/10/2014 - testing on QA for Section Coverages... to see if setting IncreasedLimit will also set IncludedLimit and TotalLimit fields in Diamond
        'HOM_save_test_new_simple("3481") 'quoteId=3481, quoteNumber=QHOM085040; didn't work... will need props to set ManualLimitIncluded and ManualLimitAmount fields

        '9/8/2014 - testing MVR no-hit logic; works... ChoicePoint has to be enabled in environment in order for the report to be ordered... even though it comes back no hit; properties only set right after LoadMvrAndClueAutoForQuote... won't still be there after reload
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim quoteId As String = "3462"
        'Dim errorMsg As String = ""
        'QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errorMsg)
        'If testQQ IsNot Nothing Then
        '    If errorMsg <> "" Then

        '    End If
        '    Dim mvrTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim clueTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim results As String = ""
        '    QQxml.LoadMvrAndClueAutoForQuote(testQQ, mvrTPD, clueTPD, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, errorMsg)
        '    If mvrTPD IsNot Nothing Then

        '    End If
        '    If clueTPD IsNot Nothing Then

        '    End If

        'End If

        '8/29/2014 - testing ToDataContract stuff again since ValidationItems xml seems to have changed w/ 527... ValidationItem node is now d2p1:ValidationItem
        'Dim vi As New Diamond.Common.Objects.ValidationItem
        'Dim test1 As String = ""
        'Dim test2 As String = ""
        'Dim test3 As String = ""
        'test1 = vi.ToDataContractXML
        'If test1 <> "" Then

        'End If
        'test2 = vi.ToDataContractXML(True)
        'If test2 <> "" Then

        'End If
        'test3 = QQxml.XmlForInsureSoftObject(vi)
        'If test3 <> "" Then

        'End If

        'Dim vis As New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem)
        'Dim vi1 As New Diamond.Common.Objects.ValidationItem
        'vis.Add(vi1)
        'Dim test4 As String = ""
        'Dim test5 As String = ""
        'Dim test6 As String = ""
        'test4 = vis.ToDataContractXML
        'If test4 <> "" Then

        'End If
        'test5 = vis.ToDataContractXML(True)
        'If test5 <> "" Then

        'End If
        'test6 = QQxml.XmlForInsureSoftObject(vis)
        'If test6 <> "" Then

        'End If

        'Dim dv As New Diamond.Common.Objects.DiamondValidation
        'If dv.ValidationItems Is Nothing Then
        '    dv.ValidationItems = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem)
        'End If
        'Dim vi2 As New Diamond.Common.Objects.ValidationItem
        'dv.ValidationItems.Add(vi2)
        'Dim test7 As String = ""
        'Dim test8 As String = ""
        'Dim test9 As String = ""
        'test7 = dv.ToDataContractXML
        'If test7 <> "" Then

        'End If
        'test8 = dv.ToDataContractXML(True)
        'If test8 <> "" Then

        'End If
        'test9 = QQxml.XmlForInsureSoftObject(dv)
        'If test9 <> "" Then

        'End If

        '8/27/2014 - testing new HOM quote in QA for e2Value; successfully saved mod but didn't load back into rated quote... needed extra ElseIf in SplitPropertyValuationModifierText method to pick up architecturalStyle if it's by itself
        'HOM_save_test_new_simple("3433") 'quoteId=3433, quoteNumber=QHOM085036
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "3433"
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing Then

        'End If
        'Response.Redirect("VR_e2Value_TestPage.aspx?quoteId=" & qId)

        '8/28/2014 - testing static data stuff again for VR <--> e2Value; works fine... had to add e2Value attributes to ConstructionType element under QuickQuoteLocation/ConstructionTypeId nodes
        'Dim atts As New List(Of QuickQuoteStaticDataAttribute)
        'Dim a1 As New QuickQuoteStaticDataAttribute
        'a1.nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.Vendor
        'a1.nvp_value = System.Enum.GetName(GetType(QuickQuotePropertyValuation.ValuationVendor), QuickQuotePropertyValuation.ValuationVendor.e2Value)
        'atts.Add(a1)
        'Dim a2 As New QuickQuoteStaticDataAttribute
        'a2.nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.VendorEstimatorType
        'a2.nvp_value = System.Enum.GetName(GetType(QuickQuotePropertyValuation.ValuationVendorEstimatorType), QuickQuotePropertyValuation.ValuationVendorEstimatorType.ProntoLiteResidential)
        'atts.Add(a2)
        'Dim VrConstructionTypeId As String = "1"
        'Dim e2ValueConstructionType As String = ""
        'e2ValueConstructionType = Left(qqHelper.GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ConstructionTypeId, VrConstructionTypeId, QuickQuoteHelperClass.QuickQuotePropertyName.ConstructionType, atts), 100)
        'If e2ValueConstructionType <> "" Then

        'End If
        'VrConstructionTypeId = ""
        'VrConstructionTypeId = qqHelper.GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuotePropertyValuationResponse, QuickQuoteHelperClass.QuickQuotePropertyName.ConstructionType, atts, e2ValueConstructionType, QuickQuoteHelperClass.QuickQuotePropertyName.ConstructionTypeId)
        'If VrConstructionTypeId <> "" Then

        'End If

        'Dim VrArchStyle As String = "Basic"
        'Dim e2ValueArchitecturalStyle As String = ""
        'e2ValueArchitecturalStyle = Left(qqHelper.GetRelatedStaticDataValueWithMatchingAttributesForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ArchitecturalStyle, VrArchStyle, QuickQuoteHelperClass.QuickQuotePropertyName.ArchitecturalStyle, atts), 100)
        'If e2ValueArchitecturalStyle <> "" Then

        'End If
        'VrArchStyle = ""
        'VrArchStyle = qqHelper.GetRelatedStaticDataValueForOptionValue_MatchingOptionAttributes(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuotePropertyValuationResponse, QuickQuoteHelperClass.QuickQuotePropertyName.ArchitecturalStyle, atts, e2ValueArchitecturalStyle, QuickQuoteHelperClass.QuickQuotePropertyName.ArchitecturalStyle)
        'If VrArchStyle <> "" Then

        'End If

        '8/27/2014 - testing new XmlForInsureSoftObject methods
        'Dim polNum As String = "QPPA112150" 'QA - QPPA112150; Patch - QPPA168925
        'Dim errMsg As String = ""
        'Dim results As String = ""
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage(polNum)
        'If img IsNot Nothing Then
        '    results = QQxml.XmlForInsureSoftObject(img)
        '    If results <> "" Then
        '        results = ""
        '    End If

        '    QQxml.DiamondService_LoadPaymentOptions(img, results)
        '    If results <> "" Then
        '        results = ""
        '    End If

        '    results = QQxml.XmlForInsureSoftObject(img.Policy.Client)
        '    If results <> "" Then
        '        results = ""
        '    End If

        '    Dim accV As New Diamond.Common.Objects.Policy.AccidentViolation
        '    accV.AvDate = "1/1/2014"
        '    accV.AccidentsViolationsTypeId = "10"

        '    Dim qqAccV As QuickQuoteAccidentViolation = Nothing

        '    QQxml.ConvertAccidentViolation(accV, qqAccV)
        '    If qqAccV IsNot Nothing Then

        '    End If
        'End If

        '8/26/2014 - testing ToDataContractXML and emitDefaultValue param to see if that's what's condensing the image xml, which is resulting in missing nodes... and logic failing because it expects a value; confirmed
        'Dim polNum As String = "QPPA168925"
        'Dim errMsg As String = ""
        'Dim results As String = ""
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage(polNum)
        ''gets the following error when running against 527: Could not load file or assembly 'Insuresoft.RuleEngine.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183' or one of its dependencies. The system cannot find the file specified.
        ''worked after adding reference to InsureSoft.RuleEngine.Common.dll
        'If img IsNot Nothing Then
        '    Dim imgPath1 As String = "C:\Users\domin\Documents\ToDataContractXML_" & polNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '    Dim imgPath2 As String = "C:\Users\domin\Documents\ToDataContractXML_emitDefaultValue_True_" & polNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)

        '    Dim imgString1 As String = img.ToDataContractXML
        '    Dim imgString2 As String = img.ToDataContractXML(True) 'will only work w/ 527

        '    Dim doc1 As New XmlDocument
        '    doc1.LoadXml(imgString1)

        '    Dim doc2 As New XmlDocument
        '    doc2.LoadXml(imgString2)

        '    doc1.Save(imgPath1)
        '    doc2.Save(imgPath2)

        'End If

        '8/27/2014 - testing to see if BillingData node is populated in rated image like Ronnie says
        'PPA_save_test_new_simple("3431") 'quoteId=3431, quoteNumber=QPPA112150

        '8/26/2014 - testing 8/26/2014 to make sure new logic for returning formatted quoted premium is working correctly... confirmed
        'Dim pvr As New QuickQuotePropertyValuationResponse
        'Dim amt As String = ""
        'amt = pvr.ReplacementCostValue
        'pvr.ReplacementCostValue = "100"
        'amt = pvr.ReplacementCostValue
        'If IsNumeric(pvr.ReplacementCostValue) = True Then
        '    amt = CDec(pvr.ReplacementCostValue).ToString
        'End If

        '8/19/2014 - testing latest static data functionality; still works
        'Dim options As List(Of QuickQuoteStaticDataOption) = Nothing
        'options = qqHelper.GetStaticDataOptions(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ProtectionClassId, QuickQuoteObject.QuickQuoteLobType.HomePersonal, QuickQuoteHelperClass.PersOrComm.Pers)
        'If options IsNot Nothing Then

        'End If

        'Dim ddl As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ProtectionClassId)
        'If ddl IsNot Nothing AndAlso ddl.Items IsNot Nothing AndAlso ddl.Items.Count > 0 Then

        'End If

        'Dim a As New QuickQuoteStaticDataAttribute
        'a.nvp_name = "Test"
        'Dim pName As QuickQuoteHelperClass.QuickQuotePropertyName = a.nvp_propertyName
        'a.nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.ProtectionClassId
        'Dim nm As String = a.nvp_name
        'a.nvp_value = "1"
        'Dim txt As String = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, QuickQuoteHelperClass.QuickQuotePropertyName.ProtectionClassId, a.nvp_value)
        'If txt <> "" Then

        'End If

        '8/19/2014 - CLUE mapping test (bug # 3625); new logic worked
        'Dim polNum As String = "QPPA169413"
        'Dim errMsg As String = ""
        'Dim results As String = ""
        'Dim clueThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage(polNum)
        'If img IsNot Nothing Then
        '    Dim unitNum As Integer = 0
        '    Dim cptNum As Integer = 1
        '    QQxml.LoadExistingChoicepointReport(img, QuickQuoteXML.ThirdPartyDataType.CLUE_Auto, clueThirdPartyData, unitNum, cptNum, results, errMsg)
        '    If clueThirdPartyData IsNot Nothing Then
        '        Dim ClueAutoReportThirdPartyDataPath As String = "C:\Users\domin\Documents\ClueAutoReport_ThirdPartyData_" & polNum & "_" & cptNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '        clueThirdPartyData.DumpToFile(ClueAutoReportThirdPartyDataPath)
        '    End If
        'End If

        '8/7/2014 - more e2Value testing
        'Dim pvHelper As New QuickQuotePropertyValuationHelperClass
        'Using pvr As New QuickQuotePropertyValuationResponse
        '    pvHelper.LoadE2ValueResponseFromNameValueCollection(Request.QueryString, pvr)
        '    If pvr IsNot Nothing Then

        '    End If
        'End Using

        '8/6/2014 testing for e2Value and reading from QueryString
        'Using r As New QuickQuotePropertyValuationResponse
        '    r.LoadFromNameValueCollection(Request.QueryString)
        'End Using
        'For Each key As String In Request.QueryString
        '    'System.Web.HttpRequest
        '    'NameValueCollection... System.Collections.Specialized.NameValueCollection
        'Next

        '8/4/2014 testing for QuickQuoteBaseObject inheritance
        'Dim qq As New QuickQuoteObject
        'qq.Dispose()

        'Using qq2 As New QuickQuoteObject

        'End Using

        'Dim AV As New QuickQuoteAccidentViolation
        'AV.Dispose()

        'Dim AI As New QuickQuoteAdditionalInsured
        'AI.Dispose()

        'Using AV2 As New QuickQuoteAccidentViolation

        'End Using

        'Using AI2 As New QuickQuoteAdditionalInsured

        'End Using

        '8/1/2014 - testing rate differences in Patch... will trying removing CheckBox flag on Veh Covs; also Veh ABS type; also Driver Preferred flag
        'PPA_save_test_new_simple("21113") 'quoteId=21113, quoteNumber=QPPA164468, prem=$1,208.00 w/ veh.ABS = 1 or blank (1 = Rear-Wheel Anti-Lock Brakes) and also w/ drv.Preferred = True or False and also w/ drv.LicenseStatusId 2 or blank (2 = Valid), quoteDesc=Testing Rate Diffs 1; using normal VehCov logic (CheckBox true for almost all)
        'PPA_save_test_new_simple("21115") 'quoteId=21115, quoteNumber=QPPA164472, prem=$1,208.00 w/ veh.ABS = 1 or blank (1 = Rear-Wheel Anti-Lock Brakes) and also w/ drv.Preferred = True or False, quoteDesc=Testing Rate Diffs 2; using updated VehCov logic (CheckBox false for almost all)

        '7/30/2014 - HOM Credit Testing on QA... received tier required message when trying to rate even though Credit was ordered... environment was Test and reports came back w/ Invalid Request
        'HOM_save_test_new("3305") 'quoteId=3305; quoteNumber=QHOM085010
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "3305"
        'Dim results As String = ""
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then
        '    Dim TPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    QQxml.LoadExistingCreditReportsForQuote(testQQ, TPD, results, errMsg)
        '    If TPD IsNot Nothing Then

        '    End If

        '    Dim CRD As Diamond.Common.Objects.ThirdParty.ReportObjects.NCF.RecordGroup = Nothing
        '    CRD = QQxml.GetCreditReportDataForPolicyholder1(testQQ, results, errMsg)
        '    If CRD IsNot Nothing Then

        '    End If
        'End If

        '7/22/2014 Flexi testing
        'ConvertRemitMemos()
        'ParsePayeeTextWithPayeesFromDatabase("Ashley Hill", "Bryson Hill", "Brian Hill", "")

        'testing 7/16/2014 to see why GetQuoteForSaveType is using Rated Quote whenever there's no image (check for LobId allowed it since it was being defaulted by db_LobId)... changed logic to make sure there's an image
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "3260"
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then

        'End If

        'testing static data list stuff 7/15/2014... should be fine... adding the new Enum value for AccidentsViolationsCategoryId re-numbered the existing options, which the VR project was already built against... we can only move the new QQ assembly once the VR project is rebuilt against it
        'Dim ddl As New DropDownList
        'qqHelper.LoadStaticDataOptionsDropDown(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteAccidentViolation, QuickQuoteHelperClass.QuickQuotePropertyName.AccidentsViolationsTypeId)
        'If ddl IsNot Nothing Then

        'End If

        'testing surcharge logic 7/15/2014
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "20889"
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" AndAlso testQQ IsNot Nothing Then
        '    'okay

        '    If testQQ.Drivers IsNot Nothing AndAlso testQQ.Drivers.Count > 0 Then
        '        For Each d As QuickQuoteDriver In testQQ.Drivers
        '            'If d.LossHistoryRecords IsNot Nothing AndAlso d.LossHistoryRecords.Count > 0 Then
        '            '    For Each l As QuickQuoteLossHistoryRecord In d.LossHistoryRecords

        '            '    Next
        '            'End If
        '            If d.AccidentViolations IsNot Nothing AndAlso d.AccidentViolations.Count > 0 Then
        '                For Each av As QuickQuoteAccidentViolation In d.AccidentViolations
        '                    Dim avCatId As String = av.AccidentsViolationsCategoryId
        '                    Dim avCat As String = av.AccidentsViolationsCategory
        '                    If avCatId <> "" OrElse avCat <> "" Then

        '                    End If
        '                Next
        '            End If
        '        Next
        '    End If

        '    'Dim strQQ As String = ""
        '    'Dim ratedQQ As QuickQuoteObject = Nothing
        '    'Dim strRatedQQ As String = ""
        '    'QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQQ, ratedQQ, strRatedQQ, qId, errMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '    ''QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, qId, errMsg)
        '    'If errMsg <> "" OrElse ratedQQ Is Nothing Then
        '    '    'error
        '    'End If
        'End If

        'testing 7/10/2014 for 'too many AtFault accidents' rating error... works for staff user but not agency user
        'quoteId 6425; quoteNumber QPPA160877
        '-not rating for agent (just validationItems returned and no image), just staff (w/ authority) from UI or VR... says too many At Fault accidents
        '-all LossHistories appeared to have surchargeId 1 (Surcharge) for everything on Quote request, but all except 1 comes back w/ 2 (No Surcharge); 2nd LH on 1st driver has Surcharge
        '-only 1 shows At Fault (only 1 on 2nd driver), and it's not the 1 rated w/ the Surcharge
        '--after successful rate, rated quote is loaded (so surchargeId is accurate on everything), but rating still fails for agency user
        '-able to successfully rate as agent after switching loss type for 1st driver's 2nd LH to something other than N/A (that was the one w/ the Surcharge flag, but it wasn't AtFault)
        're-keyed in Diamond portal w/ exact same results... will need QA to submit a TT to IS
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "6425"
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" AndAlso testQQ IsNot Nothing Then
        '    'okay

        '    'removing LossHistoryDetailRecords didn't make a difference... problem was w/ N/A for lossType
        '    'If testQQ.Drivers IsNot Nothing AndAlso testQQ.Drivers.Count > 0 Then
        '    '    For Each d As QuickQuoteDriver In testQQ.Drivers
        '    '        If d.LossHistoryRecords IsNot Nothing AndAlso d.LossHistoryRecords.Count > 0 Then
        '    '            For Each lh As QuickQuoteLossHistoryRecord In d.LossHistoryRecords
        '    '                If lh.LossHistoryDetailRecords IsNot Nothing AndAlso lh.LossHistoryDetailRecords.Count > 0 Then
        '    '                    For Each lhd As QuickQuoteLossHistoryDetailRecord In lh.LossHistoryDetailRecords
        '    '                        lhd.Dispose()
        '    '                    Next
        '    '                    lh.LossHistoryDetailRecords.Clear()
        '    '                    lh.LossHistoryDetailRecords = Nothing
        '    '                End If
        '    '            Next
        '    '        End If
        '    '    Next
        '    'End If

        '    Dim strQQ As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQQ As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQQ, ratedQQ, strRatedQQ, qId, errMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '    'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, qId, errMsg)
        '    If errMsg <> "" OrElse ratedQQ Is Nothing Then
        '        'error
        '    End If
        'End If

        'testing 7/9/2014 to verify MVR/CLUE results... lossDate isn't coming through on LossHistoryDetail records (fixed... parser was looking for upper-case DATETIME instead of DateTime), and various dates aren't coming through on AccsViols (firstAddedDate, guaranteedRatePeriodEffectiveDate, paidDate, postDate)... okay: came through as 1-01-01 because it was 1/1/1800 or 1/1/0001... added padding to use 4-digit year when writing xml
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType("6351", QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then
        '    Dim mvrTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim clueTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    QQxml.LoadMvrAndClueAutoForQuote(testQQ, mvrTPD, clueTPD)
        '    If mvrTPD IsNot Nothing OrElse clueTPD IsNot Nothing Then

        '    End If
        'End If

        'testing 7/8/2014 to see if CLUE auto report data contains claim # (nope)... doesn't show on CLUE report that Diamond generates
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType("6410", QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then
        '    Dim clues As List(Of Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData) = Nothing
        '    Dim clueResults As String = ""
        '    clues = QQxml.GetClueAutoReportDataObjectsForQuote(testQQ, clueResults, errMsg)
        '    If clues IsNot Nothing Then

        '    End If
        'End If

        'testing 7/7/2014 - need to copy Tamika's quote (QPPA160815-quoteId 6391... promoted to PPA2083936) to try to duplicate issue w/ Losses being duplicated
        'newQuoteId = 6410 (QPPA160832); another clean copy: quoteId 6411
        'Dim newQuoteId As String = ""
        'Dim copyError As String = ""
        'QQxml.CopyQuote("6391", newQuoteId, copyError)
        'If newQuoteId <> "" AndAlso copyError = "" Then

        'End If

        'testing 7/2/2014 to see what happens when Diamond orders multiple CLUE reports... seems like ThirdPartyData returned w/ order just has results from 1st report; our logic pulls results for 2nd report when it gets existing CLUE
        'test quotes... gone to App (ordered reports) but not App Rated: QPPA160748-quoteId 6349
        'just quote rated w/o any AccsViols or LossHists: QPPA160757-quoteId 6351
        'just quote rated w/o any AccsViols or LossHists (not rated yet): QPPA...-quoteId 6352
        '7/7/2014 example for Bug 3436 (QPPA160815-quoteId 6391... promoted to PPA2083936)
        '7/14/2014 - re-testing Arnulfo Torres quote since there appears to be another issue that wasn't identified initially (loss for Mario is mapped to correct driver in OrderClueAuto's response.ResponseData.ThirdPartyData object but shows 'Not Determined' or N/A in UI (appears to be working once tested in correct environment... must've been included in fix)
        '7/14/2014 - quoteId 20881; QPPA163993
        'Dim polNum As String = "QPPA163993"
        'Dim errMsg As String = ""
        'Dim results As String = ""
        'Dim clueThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage(polNum)
        'If img IsNot Nothing Then
        '    'Dim imgPath As String = "C:\Users\domin\Documents\ImageDump_" & polNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '    'Dim imgPath As String = "C:\Users\domin\Documents\ImageDump_" & polNum & "_afterReportOrdering_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '    'img.DumpToFile(imgPath)

        '    'Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Request
        '    'Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Response
        '    'With req.RequestData
        '    '    .PolicyImage = img
        '    '    .FillData = True
        '    '    .SaveRequest = True
        '    'End With
        '    'Try
        '    '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
        '    '        res = proxy.OrderClueAuto(req)
        '    '    End Using
        '    'Catch ex As Exception

        '    'End Try
        '    'If res IsNot Nothing Then
        '    '    With res
        '    '        If .DiamondValidation IsNot Nothing Then

        '    '        End If
        '    '        If .ResponseData IsNot Nothing Then
        '    '            With .ResponseData
        '    '                If .ThirdPartyData IsNot Nothing Then
        '    '                    With .ThirdPartyData
        '    '                        If .ChoicePointTransmissions IsNot Nothing AndAlso .ChoicePointTransmissions.Count > 0 Then

        '    '                        End If
        '    '                        If .LossHistory IsNot Nothing AndAlso .LossHistory.Count > 0 Then

        '    '                        End If
        '    '                        Dim ClueAutoReportThirdPartyDataPath As String = "C:\Users\domin\Documents\ClueAutoReport_ThirdPartyData_" & polNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '    '                        .DumpToFile(ClueAutoReportThirdPartyDataPath)
        '    '                    End With
        '    '                End If


        '    '            End With
        '    '        End If
        '    '    End With
        '    'End If

        '    'load existing... try for both to see if results are different
        '    'Dim cptNum As Integer = 1 '1, 2
        '    'QQxml.LoadExistingChoicepointReport(img, QuickQuoteXML.ThirdPartyDataType.CLUE_Auto, clueThirdPartyData, 0, cptNum, results, errMsg)
        '    'If clueThirdPartyData IsNot Nothing Then
        '    '    'Dim ClueAutoReportThirdPartyDataPath As String = "C:\Users\domin\Documents\ClueAutoReport_ThirdPartyData_" & polNum & "_" & cptNum & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
        '    '    'clueThirdPartyData.DumpToFile(ClueAutoReportThirdPartyDataPath)
        '    'End If
        'End If
        'load existing (method that's simulates what's currently used)
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "6410" 'Patch - 6349 (QPPA160748); another test: 6410 (QPPA160832)
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then
        '    Dim clueThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing

        '    QQxml.LoadExistingClueAutoReportForQuote(testQQ, clueThirdPartyData)
        '    If clueThirdPartyData IsNot Nothing Then

        '    End If
        'End If

        '6/17/2014 testing... change quote effective dates for Jeni to test rules/validations in Patch (from 6/13/2014 to 3/14/2014)
        '6/20/2014 testing.... PolicyPhoneLink primary key violation on BillingAddressee (6271 - QPPA159805); removed code to call QuoteObjectToDiamondImageConversion_Emails and QuoteObjectToDiamondImageConversion_Phones for BillingAddressee 
        '6/25/2014 testing... PolicyImagePhoneLink key constraint error (duplicated by rating w/ 1 phone type (home), changing to different (bus) and re-rating, and then changing back to original (home) and re-rating; problem happens because our reconciliation logic ignores detailstatuscode 2... will now need to look at all un-matched phones, emails, and maybe modifiers
        'Dim testQQ As QuickQuoteObject = Nothing
        ''Dim qId As String = "6271" 'QPPA158814 (qId=6235), QPPA158815 (qId=6236) and QPPA158816 (qId=6237); 6/17/2014 and 6/20/2014 testing
        'Dim qId As String = "6306" 'QPPA160685 (qId=6301), QPPA160699 (qId=6305), QPPA160700 (qId=6306); 6/25/2014 testing (had to change from DonBrewtonTest user to TestNxTech2); note: on copying 6301 to make 6305, PH page shows the 1st Diamond phone record even though it was flagged for delete and is blank... should be okay once the latest parsing logic is moved out because it will ignore detailstatuscode 2; more testing 6/26/2014 for just using same Diamond phone/email if possible and switching type when needed
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" AndAlso testQQ IsNot Nothing Then
        '    'okay
        '    'If testQQ.EffectiveDate = "" OrElse IsDate(testQQ.EffectiveDate) = False OrElse (testQQ.EffectiveDate <> "" AndAlso IsDate(testQQ.EffectiveDate) = True AndAlso CDate(testQQ.EffectiveDate) = CDate("6/13/2014")) Then
        '    '    testQQ.EffectiveDate = "3/14/2014"

        '    'testing latest phone reconciliation logic 6/25/2014... logic should remove duplicates
        '    If testQQ.Policyholder IsNot Nothing Then
        '        'If testQQ.Policyholder.Phones IsNot Nothing AndAlso testQQ.Policyholder.Phones.Count = 1 AndAlso testQQ.Policyholder.Phones(0).TypeId = "2" Then
        '        '    testQQ.Policyholder.Phones.Add(testQQ.Policyholder.Phones(0))
        '        '    testQQ.Policyholder.Phones.Add(testQQ.Policyholder.Phones(0))
        '        '    testQQ.Policyholder.Phones.Add(testQQ.Policyholder.Phones(0))
        '        'End If
        '        'If testQQ.Policyholder.Emails IsNot Nothing AndAlso testQQ.Policyholder.Emails.Count = 1 AndAlso testQQ.Policyholder.Emails(0).TypeId = "1" Then
        '        '    testQQ.Policyholder.Emails.Add(testQQ.Policyholder.Emails(0))
        '        '    testQQ.Policyholder.Emails.Add(testQQ.Policyholder.Emails(0))
        '        '    testQQ.Policyholder.Emails.Add(testQQ.Policyholder.Emails(0))
        '        'End If

        '        'testing 6/26/2014
        '        If testQQ.Policyholder.Phones IsNot Nothing AndAlso testQQ.Policyholder.Phones.Count = 1 AndAlso (testQQ.Policyholder.Phones(0).TypeId = "1" OrElse testQQ.Policyholder.Phones(0).TypeId = "2") Then
        '            If testQQ.Policyholder.Phones(0).TypeId = "1" Then
        '                testQQ.Policyholder.Phones(0).TypeId = "2"
        '            Else
        '                testQQ.Policyholder.Phones(0).TypeId = "1"
        '            End If
        '        End If
        '    End If

        '    Dim strQQ As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQQ As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQQ, ratedQQ, strRatedQQ, qId, errMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '    'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, qId, errMsg)
        '    If errMsg <> "" OrElse ratedQQ Is Nothing Then
        '        'error
        '    End If
        '    'End If
        'End If

        '6/13/2014 testing of pulling existing MVR/CLUE reports and pushing back into QQ... appears that AccsViols from ThirdpartyData object have guid for unitNum instead of integer; added logic to handle for unitNum when possible on MVRs
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "6245" 'QA - 3102; Patch - 6245 (QPPA159665)
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If testQQ IsNot Nothing AndAlso errMsg = "" Then
        '    Dim mvrThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim clueThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing

        '    'QQxml.LoadMvrAndClueAutoForQuote(testQQ, mvrThirdPartyData, clueThirdPartyData)
        '    QQxml.LoadExistingClueAutoReportForQuote(testQQ, clueThirdPartyData)
        '    If mvrThirdPartyData IsNot Nothing OrElse clueThirdPartyData IsNot Nothing Then

        '    End If

        '    'Dim clue As Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData = Nothing
        '    'Dim clueResults As String = ""
        '    'clue = QQxml.GetClueAutoReportDataForQuote(testQQ, clueResults, errMsg)
        '    'If clue IsNot Nothing Then

        '    'End If
        'End If

        '6/3/2014 testing for LoadAdditionalInterest
        'Dim testAI As QuickQuoteAdditionalInterest = Nothing
        'QQxml.LoadDiamondAdditionalInterestListIntoQuickQuoteAdditionalInterest(12112, testAI)
        'If testAI IsNot Nothing Then

        'End If

        '6/3/2014 testing for -- in zip code (was on policyholder but also got defaulted on billingAddressee, which couldn't be edited; quoteId 3009); 3018 was issue w/ effectiveDate not being set (updated logic to default guaranteedRatePeriodEffectiveDate and also updated Name.HasData logic to info would be copied from PH to client correctly and allow prefill to work)
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "3018" '"3009"
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" Then
        '    'okay
        '    Dim strQQ As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQQ As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQQ, ratedQQ, strRatedQQ, qId, errMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '    If errMsg <> "" OrElse ratedQQ Is Nothing Then
        '        'error
        '    End If
        'End If

        '5/28/2014 testing... to see if last 4 of drivers license # is masked
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType("2657", QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" Then
        '    Dim mvr As Diamond.Common.Objects.ThirdParty.ReportObjects.MVR.MVRReportData = Nothing
        '    Dim mvrResults As String = ""
        '    mvr = QQxml.GetMvrReportDataForDriver(testQQ, 1, mvrResults, errMsg)
        '    If mvr IsNot Nothing Then

        '    End If
        'End If

        '5/28/2014 testing... clue returned nothing for Martin... had to update logic to allow for UnitNum = 0
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType("2924", QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" Then
        '    Dim clue As Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData = Nothing
        '    Dim clueResults As String = ""
        '    clue = QQxml.GetClueAutoReportDataForQuote(testQQ, clueResults, errMsg)
        '    If clue IsNot Nothing Then

        '    End If
        'End If

        '5/20/2014 - testing prefill logic... problem started yesterday after update to add BillingAddressee (w/ missing image in Rated xml but regular validationItems)... prevented prefill from working... should now be okay as long as Diamond Save is successful before rate (because Save will create quote in Diamond, giving us policyId and policyImageNum, which are needed for service call)
        'update: diamondImageHasNewDiaNumObjectsOrItemsFlaggedForDelete was set to True on 1st time thru (because of BillingAddressee.Name [also Address]; BillingAddressee is automatically instantiated but Name and Address check the HasData flags before using) so Save was done... then because Save just happened, Rate service was used instead of SaveRate... ratedImage was nothing, but validationItems were present
        'test1: QPPA111711; policyId 415873; policyImageId 1574754; policyImageNum 1
        'test2: QPPA111713
        'test3 after updating qqXml.InitialSaveOrRateCleanup logic to default BillingAddressee... used SubmitRate instead of Rate (QPPA111714; policyId 415879; policyImageNum 1; policyImageId 1575101)
        'Dim qqPrefillTest As New QuickQuoteObject
        'qqPrefillTest.LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal
        'qqPrefillTest.Client.ClientId = "371837" 'should also be set by next step
        ''QQxml.LoadDiamondClientIntoQuickQuoteClient("371837", qqPrefillTest.Client) 'should now be done automatically by qqXml.InitialSaveOrRateCleanup if needed
        'Dim prefillThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        'Dim prefillResults As String = ""
        'Dim prefillErrorMsg As String = ""
        'QQxml.LoadPrefillForQuote(qqPrefillTest, prefillThirdPartyData, prefillResults, prefillErrorMsg)
        'If prefillThirdPartyData IsNot Nothing Then

        'End If
        'If prefillResults <> "" Then
        '    '<br />Validation Item # 1: Prefill - Driver not found in Composite ID Database<br />Validation Item # 2: A.D.D. - Processing Complete, No Additional Drivers Discovered<br />Validation Item # 3: VIN Services - Processing completed - Order resulted in a no-hit.  No vehicles discovered.<br /><br />-Valid ThirdPartyData<br />-ThirdPartyData.LastModifiedDate: 01/01/1800 12:00:00 AM<br />-ThirdPartyData.PolicyId: 415873<br />-ThirdPartyData.PolicyImageNum: 1<br />-ThirdPartyData.CreditScores: <br />CreditScore # 1: 01/01/1800 12:00:00 AM - 0<br />-ThirdPartyData.CreditScore: 01/01/1800 12:00:00 AM - 0<br />-No ThirdPartyData.SAQImportedDrivers<br />-No ThirdPartyData.SAQImportedVehicles<br />-No ThirdPartyData.AccidentViolations<br />-No ThirdPartyData.LossHistory<br />-ThirdPartyData.ChoicePointTransmissions: <br />ChoicePointTransmission # 1: TransactionTypeId - 1; TransmissionNum - 1; ThirdPartyTypeId - 7; ThirdPartyStatusId - 3<br />ChoicePointTransmission # 2: TransactionTypeId - 1; TransmissionNum - 1; ThirdPartyTypeId - 7; ThirdPartyStatusId - 3<br />-ThirdPartyData.Children: <br />Child # 1: Type.FullName - Diamond.Common.Objects.ThirdParty.Request; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.Request<br />Child # 2: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.Policy.AccidentViolation, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.Policy.AccidentViolation<br />--No ThirdPartyData.AccidentViolations<br />Child # 3: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.Policy.LossHistory, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.Policy.LossHistory<br />--No ThirdPartyData.LossHistory<br />Child # 4: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.ThirdParty.ChoicePointTransmission, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.ChoicePointTransmission<br />--ThirdPartyData.ChoicePointTransmissions: <br />ChoicePointTransmission # 1: TransactionTypeId - 1; TransmissionNum - 1; ThirdPartyTypeId - 7; ThirdPartyStatusId - 3<br />ChoicePointTransmission # 2: TransactionTypeId - 1; TransmissionNum - 1; ThirdPartyTypeId - 7; ThirdPartyStatusId - 3<br />Child # 5: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.ThirdParty.CreditScore, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.CreditScore<br />--ThirdPartyData.CreditScores: <br />CreditScore # 1: 01/01/1800 12:00:00 AM - 0<br />Child # 6: Type.FullName - Diamond.Common.Objects.ThirdParty.CreditScore; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.CreditScore<br />--ThirdPartyData.CreditScore: 01/01/1800 12:00:00 AM - 0<br />Child # 7: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.ThirdParty.SAQImportedDriver, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.SAQImportedDriver<br />--No ThirdPartyData.SAQImportedDrivers<br />Child # 8: Type.FullName - Diamond.Common.Objects.InsCollection`1[[Diamond.Common.Objects.ThirdParty.SAQImportedVehicle, Diamond.Common.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=828f322f65400183]]; InsObjectType.FullName - Diamond.Common.Objects.ThirdParty.SAQImportedVehicle<br />--No ThirdPartyData.SAQImportedVehicles
        'End If
        'If prefillErrorMsg <> "" Then

        'End If
        'If qqPrefillTest.QuoteNumber <> "" Then

        'End If
        '5/21/2014 testing switching BillToId to see if BillingAddressee is also changed... worked
        'PPA_save_test_new("2881") 'needed to get past errors due to missing vehicles/drivers
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType("2881", QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'If errMsg = "" Then
        '    'testQQ.BillToId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.BillToId, "Agent") '4
        '    testQQ.BillToId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.BillToId, "Insured") '1

        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, strQuote, ratedQQ, strRatedQuote, testQQ.Database_QuoteId, errMsg)
        '    If errMsg = "" AndAlso ratedQQ IsNot Nothing Then
        '        If ratedQQ.BillingAddressee IsNot Nothing Then

        '        End If
        '        If ratedQQ.ValidationItems IsNot Nothing AndAlso ratedQQ.ValidationItems.Count > 0 Then

        '        End If
        '    End If
        'End If

        '5/21/2014 related test (for prefill problem and BillingAddressee); img.BillingAddressee.Name IsNot nothing whenever img is instantiated... so diamondImageHasNewDiaNumObjectsOrItemsFlaggedForDelete would be switched to True as soon as the name conversion method sees that Name.HasData = False
        'Dim img As New Diamond.Common.Objects.Policy.Image
        'If img IsNot Nothing Then
        '    If img.BillingAddressee IsNot Nothing Then
        '        If img.BillingAddressee.Name IsNot Nothing Then
        '            If img.BillingAddressee.Name.DisplayName <> "" Then

        '            End If
        '        End If
        '    End If
        'End If

        '5/13/2014 - more 3rd party testing... Credit Report for quoteNumber QPPA111676; quoteId 2819 (Libraries\Documents\NcfReport_QA_QPPA111676.pdf)... everything works correctly as for reloading existing
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'QQxml.GetQuoteForSaveType("2819", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim creditThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    'QQxml.LoadCreditForQuote(qq, creditThirdPartyData) 'pulls existing if available; else orders whichever ones it needs
        '    QQxml.LoadExistingCreditReportForQuote_Policyholder1(qq, creditThirdPartyData)
        '    If creditThirdPartyData IsNot Nothing Then

        '    End If

        '    Dim creditReportData As Diamond.Common.Objects.ThirdParty.ReportObjects.NCF.RecordGroup = Nothing
        '    creditReportData = QQxml.GetCreditReportDataForPolicyholder1(qq)
        '    If creditReportData IsNot Nothing Then

        '    End If
        'End If

        '5/1/2014 - testing 3rd party report stuff
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111512")
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111522") '1840 doesn't have access
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA109346")
        'If img IsNot Nothing Then
        '    Dim thirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim results As String = ""
        '    Dim errorMsg As String = ""
        '    'Dim unitNum As Integer = 1 'QPPA111512 testing
        '    'Dim cpTransmissionNum As Integer = 2 'QPPA111512 testing
        '    'Dim unitNum As Integer = 3 'QPPA111512 testing
        '    'Dim cpTransmissionNum As Integer = 1 'QPPA111512 testing
        '    Dim unitNum As Integer = 1 'QPPA111522, QPPA109346 (actual data)
        '    Dim cpTransmissionNum As Integer = 1 'QPPA111522, QPPA109346 (actual data)
        '    QQxml.LoadExistingChoicepointReport(img, QuickQuoteXML.ThirdPartyDataType.MVR, thirdPartyData, unitNum, cpTransmissionNum, results, errorMsg) 'unitNum, choicePointTransmissionNum
        '    If thirdPartyData IsNot Nothing Then

        '    End If
        '    Dim mvr As Diamond.Common.Objects.ThirdParty.ReportObjects.MVR.MVRReportData = QQxml.GetMvrReportData(img, unitNum, cpTransmissionNum)
        '    If mvr IsNot Nothing Then

        '    End If
        'End If

        'testing integer stuff 4/25/2014... since 0 evaluates as Nothing; shouldn't have any object reference issues like you could w/ string or custom objects
        'Dim test As Integer = 0
        'If test <> Nothing Then
        '    test = test
        'Else
        '    test = test
        'End If
        'test = Nothing
        'If test <> Nothing Then
        '    test = test
        'Else
        '    test = test
        'End If
        'If test > 0 Then
        '    test = test
        'Else
        '    test = test
        'End If

        'testing enum stuff 4/25/2014... since 0 evaluates as Nothing; what goes for integer also goes for enum
        'Dim test As QuickQuote.CommonMethods.QuickQuoteHelperClass.PersOrComm = Nothing 'has 0 option (None); just sets it to None (0)
        'If test <> Nothing Then
        '    test = test
        'Else
        '    test = test
        'End If
        'Select Case test
        '    Case QuickQuoteHelperClass.PersOrComm.None
        '        test = test
        '    Case QuickQuoteHelperClass.PersOrComm.Pers
        '        test = test
        '    Case QuickQuoteHelperClass.PersOrComm.Comm
        '        test = test
        'End Select
        'test = QuickQuoteHelperClass.PersOrComm.None
        'If test <> Nothing Then
        '    test = test
        'Else
        '    test = test
        'End If
        'Dim test2 As QuickQuote.CommonObjects.QuickQuoteObject.QuickQuoteQuoteOrIssueBound = Nothing 'no 0 option; just sets it to 0
        'If test2 <> Nothing Then
        '    test2 = test2
        'Else
        '    test2 = test2
        'End If
        'Select Case test2
        '    Case QuickQuoteObject.QuickQuoteQuoteOrIssueBound.Quote
        '        test2 = test2
        '    Case QuickQuoteObject.QuickQuoteQuoteOrIssueBound.IssueBound
        '        test2 = test2
        'End Select


        '4/22/2014 testing - reviewing GetQuoteForSaveType logic to see when items are duplicated because image had items flagged for delete (DetailStatusCode 2) when saved... should just happen when quote xml is retrieved since rated xml should always have the final result... confirmed
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        ''QQxml.GetQuoteForSaveType("2657", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg) 'will use default QuoteOrRatedXml logic
        'QQxml.GetQuoteForSaveType("2657", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg, QuickQuoteXML.QuoteOrRatedXml.AlwaysUseQuote) 'will always use quote
        'If qq IsNot Nothing Then

        'End If

        '4/21/2014 testing
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111512")
        'If img IsNot Nothing Then
        '    Dim thirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    QQxml.LoadExistingChoicepointReport(img, QuickQuoteXML.ThirdPartyDataType.MVR, thirdPartyData, 1, 2) 'unitNum, choicePointTransmissionNum
        '    If thirdPartyData IsNot Nothing Then

        '    End If
        'End If

        '4/17/2014 - MVR/Clue testing; when ordering MVR for just 3rd driver (after lookup saw that reports were already ordered for drivers 1 and 2), ThirdPartyData object just reflected 3rd driver... will need to use Diamond service to pull other reports too
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim thirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        'Dim results As String = ""
        'QQxml.GetQuoteForSaveType("2657", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)

        'If qq IsNot Nothing AndAlso eMsg = "" Then
        '    QQxml.LoadMvrForQuote(qq, thirdPartyData, results, eMsg, True, True) 'last 2 params: saveRequest, fillData
        '    '4/17/2014 note: Driver.Name.DriversLicenseStateId must be set to get report for driver... validationItem: {Unable to order an MVR report for Driver Number 1 driver's license state., Error}
        '    'after setting DriversLicenseStateId to 16 for both drivers... validationItem: {MVR - DON AUTO - NO HIT, The DMV returned a 'not found' indication in response to the order., None}
        '    If thirdPartyData IsNot Nothing Then

        '    End If
        'End If

        'If qq IsNot Nothing AndAlso eMsg = "" Then
        '    QQxml.LoadPrefillForQuote(qq, thirdPartyData, results, eMsg, True) 'last param: saveRequest
        '    If thirdPartyData IsNot Nothing Then

        '    End If
        'End If

        'If qq IsNot Nothing AndAlso eMsg = "" Then
        '    QQxml.LoadClueForQuote(qq, thirdPartyData, results, eMsg, True, True) 'last 2 params: saveRequest, fillData
        '    If thirdPartyData IsNot Nothing Then

        '    End If
        'End If

        'Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.OrderAutoDataPrefill.Request
        'With req.RequestData
        '    'no unitNum... shows 1 in db
        'End With
        'Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.OrderClueAuto.Request
        'With req.RequestData
        '    'not sure what unitNum is here... maybe driverNum, but shows as policy-level report in Diamond UI
        'End With


        '4/16/2014 - PaymentOptions testing
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111512")
        'Dim strPayplanPreviewsXml As String = ""
        'If img IsNot Nothing Then
        '    QQxml.DiamondService_LoadPaymentOptions(img, strPayplanPreviewsXml)
        'End If

        '4/16/2014 - more PaymentOptions testing... all work
        'Dim paymentOptions As List(Of QuickQuotePaymentOption) = Nothing
        'QQxml.ParseArrayOfPayPlanPreviewXML("C:\Users\domin\Documents\QA_PayplanPreviews_QPPA111512.xml", paymentOptions)
        'If paymentOptions IsNot Nothing Then

        'End If
        'Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111512")
        'If img IsNot Nothing Then
        '    Dim strPayplanPreviewsXml As String = ""
        '    Dim qqXml As New QuickQuoteXML
        '    qqXml.DiamondService_LoadPaymentOptions(img, strPayplanPreviewsXml)
        '    If strPayplanPreviewsXml <> "" Then
        '        qqXml.ParseArrayOfPayPlanPreviewXmlString(strPayplanPreviewsXml, paymentOptions)
        '    End If
        'End If
        'If paymentOptions IsNot Nothing Then

        'End If
        '-----------related test code-------------- 'was testing for DiamondService_LoadPaymentOptions
        'Dim previewReq As New Diamond.Common.Services.Messages.BillingService.LoadPreview.Request
        'Dim previewResp As New Diamond.Common.Services.Messages.BillingService.LoadPreview.Response
        'With previewReq.RequestData
        '    .PolicyId = img.PolicyId
        '    .PolicyImageNum = img.PolicyImageNum
        '    '.BillingPayPlanId
        '    '.BillingTransactionTypeId
        '    '.PayPlanChangeTransaction 'bool
        'End With
        'Using proxy As New Diamond.Common.Services.Proxies.BillingServiceProxy
        '    previewResp = proxy.LoadPreview(previewReq)
        'End Using
        'If previewResp IsNot Nothing Then
        '    With previewResp
        '        If .ResponseData IsNot Nothing AndAlso .ResponseData.BillingData IsNot Nothing Then
        '            With .ResponseData.BillingData
        '                If .Previews IsNot Nothing AndAlso .Previews.Count > 0 Then
        '                    Dim previewsXml As String = .Previews.ToDataContractXML
        '                    For Each p As Diamond.Common.Objects.Billing.PayPlanPreview In .Previews
        '                        With p
        '                            '.DownPaymentAmount
        '                            '.DownPaymentPercentage
        '                            '.InstallmentAmount
        '                            '.InstallmentInterval
        '                            '.LastModifiedDate
        '                            '.NumInstalls
        '                            '.PayPlanId
        '                            '.ServiceChargeAmount
        '                            '.TotalInstallmentAmount
        '                        End With
        '                    Next
        '                End If
        '                '.Account
        '                '.AccountHistory
        '                '.AccountReceivables
        '                '.BillingPolicyInfo
        '                '.CarryDate
        '                '.CashDetails
        '                '.CheckAutoRefundPayees
        '                '.DefaultStmtToAccountDetail
        '                '.FutureCredits
        '                '.Futures
        '                '.Histories
        '                '.HurricaneBlackoutDscr
        '                '.HurricaneBlackoutId
        '                '.HurricaneExpDate
        '                '.Invoice
        '                '.InvoiceDueDate
        '                '.MiscCharges
        '                '.NextActivity
        '                '.Preview
        '                '.StatementDetails
        '                '.Statements
        '                '.TaxRate
        '            End With
        '        End If
        '        If .DiamondValidation IsNot Nothing AndAlso .DiamondValidation.ValidationItems IsNot Nothing AndAlso .DiamondValidation.ValidationItems.Count > 0 Then
        '            For Each vi As Diamond.Common.Objects.ValidationItem In .DiamondValidation.ValidationItems
        '                With vi

        '                End With
        '            Next
        '        End If
        '    End With
        'End If
        '-----------end related test code--------------

        'Credit Report Retrieval Testing 4/14/2014
        '--------------start-----------------
        'Dim repReq As New Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Request
        'Dim repResp As New Diamond.Common.Services.Messages.ThirdPartyService.LoadRawReportData.Response
        'With repReq.RequestData
        '    .PolicyId = policyImage.PolicyId
        '    .PolicyImageNum = policyImage.PolicyImageNum
        '    .ChoicePointTransmissionNum = 1
        'End With
        'Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
        '    repResp = proxy.LoadRAWReportData(repReq)
        'End Using
        'If repResp IsNot Nothing AndAlso repResp.ResponseData IsNot Nothing Then
        '    With repResp.ResponseData
        '        '.RawReportData
        '    End With
        'End If

        'Dim repReq As New Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Request
        'Dim repResp As New Diamond.Common.Services.Messages.ThirdPartyService.LoadChoicePointTransmissions.Response
        'With repReq.RequestData
        '    .PolicyId = policyImage.PolicyId

        'End With
        'Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
        '    repResp = proxy.LoadChoicePointTransmissions(repReq)
        'End Using
        'If repResp IsNot Nothing AndAlso repResp.ResponseData IsNot Nothing Then
        '    With repResp.ResponseData
        '        If .ChoicePointTransmissions IsNot Nothing AndAlso .ChoicePointTransmissions.Count > 0 Then
        '            For Each cpt As Diamond.Common.Objects.ThirdParty.ChoicePointTransmission In .ChoicePointTransmissions
        '                With cpt
        '                    '.ChoicePointTransactionTypeId 'won't use
        '                    '.ThirdPartyTypeId (all CreditReport.ChoicePointTransmissions had 5 for ThirdPartyTypeId
        '                    '0	N/A
        '                    '1	Motor Vehicle Records
        '                    '2	C.L.U.E Personal Auto
        '                    '3	C.L.U.E Personal Property
        '                    '4	NCF Report Inquiry - Location
        '                    '5	NCF Report Inquiry - Vehicle
        '                    '6  SAQ()
        '                    '7	Auto Data Prefill
        '                    '8	DHI-Driver Search
        '                    '9	Metro Report Request
        '                    '10	Metro Real Time Order Inquiry
        '                    '11	Metro Batch Status Order Inquiry
        '                    '12	Auto Data Prefill Commercial
        '                    '13	CCC Appraiser Search
        '                    '14	CCC Appraisal Assignment
        '                    '15	CCC Business Event
        '                    '16 CCC Documents And Images
        '                    '17	CCC Standard Estimate
        '                End With
        '            Next
        '        End If
        '    End With
        'End If
        '--------------end-----------------

        'testing 4/14/2014 to see what clientId starts off as... IdValue on Policy and Policy.Client; integer on Policy.Account
        'Dim img As New Diamond.Common.Objects.Policy.Image
        'img.Policy = New Diamond.Common.Objects.Policy.Policy
        'If img IsNot Nothing AndAlso img.Policy IsNot Nothing Then

        'End If

        'testing CreditReport stuff 4/8/2014
        'Dim policyImage As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QPPA111430")
        'If policyImage IsNot Nothing Then
        '    'policyImage.DumpToFile("C:\Users\domin\Documents\CreditReportTesting_QPPA111430_original_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml")
        '    Dim creditScore As String = ""
        '    Dim creditScoreReasons As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.CreditScoreReason) = Nothing
        '    Dim thirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim dv As Diamond.Common.Objects.DiamondValidation = Nothing
        '    Dim subjectNums As New ArrayList
        '    'subjectNums.Add(1) 'assuming 1 = policyholder1 and 2 = policyholder2; might be for drivers instead and might need to use actual driver nums (either sequential or guid or IdValue object)
        '    If QQxml.DiamondService_SuccessfullyOrderedCreditReport(policyImage, subjectNums, creditScore, creditScoreReasons, thirdPartyData, dv) = True Then
        '        If creditScore <> "" Then

        '        End If
        '        If creditScoreReasons IsNot Nothing AndAlso creditScoreReasons.Count > 0 Then
        '            For Each csr As Diamond.Common.Objects.ThirdParty.CreditScoreReason In creditScoreReasons
        '                With csr

        '                End With
        '            Next
        '        End If
        '        If thirdPartyData IsNot Nothing Then
        '            thirdPartyData.DumpToFile("C:\Users\domin\Documents\CreditReportTesting_QPPA111430_ThirdPartyData_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml")
        '        End If
        '        If dv IsNot Nothing Then

        '        End If
        '    End If
        'End If


        'testing 3/26/2014 to see where qqRvWatercraft.Name is located on Diamond.Common.Object.RvWatercraft... OtherOwnerNotInsured
        'Dim testHOMimage As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage("QHOM084710")
        'If testHOMimage IsNot Nothing Then

        'End If

        'Try
        '    Dim xmlDoc As New XmlDocument()
        '    xmlDoc.Load("C:\Users\domin\Documents\TestQuoteXml.xml") 'TestQuoteXml.xml works; ImageDumpTest.xml doesn't work
        '    If xmlDoc IsNot Nothing Then
        '        Dim quoteImage As Diamond.Common.Objects.Policy.Image
        '        quoteImage = Diamond.Common.Objects.InsObject.FromDataContract(Of Diamond.Common.Objects.Policy.Image)(xmlDoc.InnerXml)
        '        If quoteImage IsNot Nothing Then

        '        End If
        '    End If
        'Catch ex As Exception
        '    Dim errMessage As String = ex.ToString
        '    If errMessage <> "" Then

        '    End If
        'End Try

        'test 12/9/2013 for Matt
        'Dim qq As QuickQuoteObject
        'Dim eMsg As String = ""
        'QQxml.GetQuoteForSaveType("1928", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq Is Nothing OrElse eMsg <> "" Then

        'End If

        'for prod issue (personal client; need to switch to commercial client)
        'Dim qq As QuickQuoteObject
        'Dim eMsg As String = ""
        'QQxml.GetQuoteForSaveType("13543", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq Is Nothing OrElse eMsg <> "" Then

        'Else
        '    If qq.Client.ClientId = "54958" Then
        '        qq.Client.ClientId = "139173"
        '        With qq.Client.Name
        '            .FirstName = ""
        '            .LastName = ""
        '            .MiddleName = ""
        '            .CommercialName1 = "IRVIN L KESLING"
        '            .TaxNumber = "00-0000000"
        '            .TaxTypeId = "2"
        '        End With
        '        With qq.Policyholder.Name
        '            .FirstName = ""
        '            .LastName = ""
        '            .MiddleName = ""
        '            .CommercialName1 = "IRVIN L KESLING"
        '            .TaxNumber = "00-0000000"
        '            .TaxTypeId = "2"
        '        End With
        '    End If
        '    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, "13543", eMsg)
        '    If eMsg <> "" Then

        '    End If
        'End If
    End Sub
    Private Sub OldTestFunctionality2() 'created 10/28/2014
        'HOM_save_test_new_simple("24731") 'quoteId=24731, quoteNumber=QHOM143053

        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'QQxml.GetQuoteForSaveType("24731", QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then

        'End If

        '10/16/2014 - Dia objects w/ Modifiers: PolicyLevel, Location, Vehicle, Driver, BarnBuilding (no Applicant InlandMarine, RvWatercraft, etc.)
        'Dim a As New Diamond.Common.Objects.Policy.BarnBuilding
        'With a

        'End With

        '10/24/2014 - testing on Patch for problem acquiring after quote is acquired by different user (i.e. from UI)
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        ''Dim qId As String = "22462" 'QHOM135870 (not working locally)
        ''Dim qId As String = "22523" 'QHOM135884 (different test using copied quote; was able to duplicate problem)
        ''Dim qId As String = "22524" 'QPPA170517 (another test using copied quote; was able to duplicate problem)
        ''10/27/2014 - Testing Section Coverage Stuff on QA
        ''Dim qId As String = "24768" 'QHOM143059 (section coverage stuff; problem reconciling child coverages... only worked when in same order as Diamond... if not, would try to flag 1st cov for delete and add correct cov... Diamond must not like 2 covs on there)
        ''Dim qId As String = "24797" 'QHOM143065 (another section coverage quote)
        ''10/27/2014 - CLUE Property testing (and application matching)
        'Dim qId As String = "24776" 'QHOM143060 (had to combine Insured and Risk lists)
        ''QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, qq, eMsg)
        'If qq IsNot Nothing Then
        '    'Dim strQuote As String = ""
        '    'Dim ratedQQ As QuickQuoteObject = Nothing
        '    'Dim strRatedQuote As String = ""
        '    'QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    'If eMsg = "" Then

        '    'End If

        '    'Dim clueTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    'Dim results As String = ""
        '    'QQxml.LoadCluePropertyForQuote(qq, clueTPD, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, eMsg)
        '    'If clueTPD IsNot Nothing Then

        '    'ElseIf eMsg <> "" Then

        '    'End If
        'End If

        '10/30/2014 - QA testing for RvWatercraft Operators
        'HOM_save_test_new_simple("24817") 'quoteId=24817, quoteNumber=QHOM143082
        'error on initial attempt w/ Diamond services: The INSERT statement conflicted with the FOREIGN KEY constraint "FK_RVWatercraftOperatorLink_Operator". The conflict occurred in database "Diamond", table "dbo.Operator".
        'worked the 1st time w/ comparative rater services and re-rates were all successful
        'worked after switching back to Diamond services... probably since all Operators were already in Diamond... will probably need to find a service to create them on the fly; can't find service... may be problem in Diamond or maybe just on Submit
        '10/31/2014 note: latest logic works... gets max OperatorNum from Diamond and then keeps track of invalidDiamondNum count to incorporate into SUM to get new num
        '10/31/2014 note continued: successfully tested un-assigning RvWatercraft Operator and assigning back, as well as removing policy-level Operator and then adding back and assigning to RvWatercraft w/ latest Diamond num

        '10/31/2014 testing
        'Dim intList As List(Of Integer) = Nothing
        'intList.Add(1) 'list needs to be instantiated before adding anything... just like any other list
        'If intList IsNot Nothing Then

        'End If



        ''11/3/2014 - Testing RAPA Symbols on QA
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        ''Dim qId As String = "24762" 'QPPA177778; already archived (was getting 'aquire/transfer' error)
        ''Dim qId As String = "24824" 'QPPA177824; copied from 24762 (when it had 1/20/2015 eff date; later changed to 12/1/2014 after rate); was able to go back and forth w/ effDate w/o any errors (started w/ 1/20/2015)
        ''Dim qId As String = "24826" 'QPPA177826; copied from 24824 (when it had 12/1/2014 eff date; later changed to 1/20/2015 after rate); failed initial rate w/ 12/1/2014 and subsequent after changing to 1/20/2014; eventually worked from the UI after deleting vehicle and adding a new one... re-saving existing vehicle didn't change anything and neither did re-saving after going through lookup and re-setting symbols
        ''Dim qId As String = "24831" 'QPPA177830; copied from 24824 (when it had 12/1/2014 eff date; later changed to 1/20/2015 after rate); failed initial rate w/ 12/1/2014 and subsequent after changing to 1/20/2014
        ''Dim qId As String = "24833" 'QPPA177833; copied from 24824 (when it had 12/1/2014 eff date; later changed to 1/20/2015 after rate); failed initial rate w/ 12/1/2014 and subsequent after trying CopyQuoteToNewQuote... copy successfully created new image w/ new effDate (since it was previously saved on old image), but the same information that caused it to fail must've been copied too; has 3 images in Diamond
        ''Dim qId As String = "24835" 'QPPA177836; copied from 24824 (when it had 12/1/2014 eff date; later changed to 1/20/2015 after rate); failed initial rate w/ 12/1/2014 and also subsequent attempts w/ setting ProratedGuaranteedRatePeriodEffectiveDate, Driver.EffDate, Vehicle.EffectiveDate, and Policy.FirstWrittenDate (same fields that were updated in working example done in portal/UI where Diamond created a new image)
        ''Dim qId As String = "24837" 'QPPA177839; copy for InsureSoft Test Track... 11/5/2014 note: everything worked after updating DiamondService_SuccessfullySetVersionId to also get other ids (RatingVersionId, etc.)
        ''Dim qId As String = "24851" 'QPPA177847; new test to make sure there's not an issue w/ flagging the vehicle symbols for delete w/ detailstatuscode 2 (as opposed to using the symbols that are already there)... definitely a problem... Diamond must be ignoring DetailStatusCode 2 and running the validation against one of the symbols that we've already flagged for delete
        ''Dim qId As String = "24855" 'QPPA177851; new test 11/6/2014 to test rate book validation update... works correctly
        'Dim qId As String = "24862" 'QPPA177856; new test 11/6/2014 to validate latest logic w/ UpdateAllVehicleSymbolsWithTheSameCoverageTypeId flag... works correctly
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then
        '    qq.EffectiveDate = "1/20/2015"
        '    'qq.EffectiveDate = "12/1/2014"
        '    'added 11/3/2014 for testing so logic would wipe out existing vehicle and create a new one in Diamond... in case there was something set on the old one that was preventing the effDate change to take effect everywhere; didn't work
        '    'If qq.CanUseVehicleNumForVehicleReconciliation = True AndAlso qq.Vehicles IsNot Nothing AndAlso qq.Vehicles.Count = 1 Then
        '    '    With qq.Vehicles(0)
        '    '        .VehicleNum = ""
        '    '    End With
        '    'End If
        '    'qq.PolicyImageNum = "1"

        '    If IsDate(qq.EffectiveDate) = True AndAlso qq.Vehicles IsNot Nothing AndAlso qq.Vehicles.Count = 1 Then
        '        With qq.Vehicles(0)
        '            Dim compSymbol As String = ""
        '            Dim collSymbol As String = ""
        '            Dim lookupTypeId As String = ""
        '            If CDate(qq.EffectiveDate) < CDate("1/1/2015") Then '12/1/2014
        '                compSymbol = "18"
        '                collSymbol = "25"
        '                lookupTypeId = "1"
        '            Else '1/20/2015
        '                compSymbol = "FY"
        '                collSymbol = "FW"
        '                lookupTypeId = "9"
        '            End If
        '            '.CanUseVehicleSymbolNumForVehicleSymbolReconciliation = False 'to force reconciliation logic to lookup the coverageTypeId
        '            .VehicleSymbols = New List(Of QuickQuoteVehicleSymbol)
        '            Dim compvs As New QuickQuoteVehicleSymbol
        '            With compvs
        '                .SystemGeneratedSymbol = compSymbol
        '                .SystemGeneratedSymbolVehicleInfoLookupTypeId = lookupTypeId
        '                .UserOverrideSymbol = compSymbol
        '                .VehicleSymbolCoverageTypeId = "1"
        '                '.VehicleSymbolNum = "1" 'added for testing 11/5/2014
        '            End With
        '            .VehicleSymbols.Add(compvs)
        '            Dim collvs As New QuickQuoteVehicleSymbol
        '            With collvs
        '                .SystemGeneratedSymbol = collSymbol
        '                .SystemGeneratedSymbolVehicleInfoLookupTypeId = lookupTypeId
        '                .UserOverrideSymbol = collSymbol
        '                .VehicleSymbolCoverageTypeId = "2"
        '                '.VehicleSymbolNum = "5" 'added for testing 11/5/2014
        '            End With
        '            .VehicleSymbols.Add(collvs)
        '        End With
        '    End If

        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''Dim newQuoteId As String = ""
        ''QQxml.CopyQuote("24824", newQuoteId, eMsg)
        ''If eMsg <> "" Then

        ''End If


        '11/13/2014 testing for Bob
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim qId As String = "24939"
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.LobType = QuickQuoteObject.QuickQuoteLobType.None Then

        '    End If
        '    qq.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialGeneralLiability
        '    If qq.LobId = "" Then

        '    End If
        'End If

        '11/17/2014 - InlandMarine premium testing on QA
        'HOM_save_test_new_simple("24952") 'quoteId=24952, quoteNumber=QHOM143144; unhandled exception on 1st run (FK_RVWatercraftOperatorLink_Operator); had to update QickQuoteHelperClass.MaxOperatorNumForPolicy to work for new policies... will return 0 if policy doesn't exist or no operators are found (-1 if there's an error); got a premium on IM after setting ManualLimitAmount to the same as ManualLimitIncreased... premium comes back in IM.Coverage and not on IM object

        '11/19/2014 - Credit Report testing
        'testing re-call since example must not have had applicants on the quoteObject when the call was initially made
        'forceReRate logic is working, but attempting to re-save/re-rate in Diamond results in the following validation: {Location Num #1 Year Built is required to rate., Error}
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim qId As String = "24973" 'QHOM143169
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim cTPD As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim cResults As String = ""
        '    QQxml.LoadCreditForQuote(qq, cTPD, cResults, eMsg)
        '    If cTPD IsNot Nothing Then

        '    End If
        'End If

        ''11/20/2014 - testing RvWatercraft Operator assignment on QA; had to fix MaxOperatorNumForPolicy code... was always assuming if there were results, the max num would be numeric... but results are always returned for max, just sometimes NULL
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim qId As String = "24990" 'QHOM143179
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''12/3/2014 - QA testing for payplan... appears that everything is okay after removing default values from payplanid and billtoid (still default billmethodid)
        'Dim qId As String = "25099"
        ''HOM_save_test_new_simple(qId) 'quoteId=25099, quoteNumber=QHOM143257
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.AppGap
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''12/3/2014 - QA testing for Bob's quote
        'Dim qId As String = "24946" 'QCGL015565; re-rate fails because the policyId it's trying to acquire doesn't exist in Diamond... started in VR commercial (DiamondQuickQuote; comparative rater) and picked up in QuickQuote (Diamond services)... quote retrieval still picked up previous policyId from request xml (doesn't use response like some lines... and wouldn't expect to go back and forth between the comparative rater and Diamond services... should still be able to handle though)
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''12/4/2014 - QA testing for RvWatercraft Operators and new flag to use Added/Removed lists instead of normal Operators list
        ''12/5/2014 note: appears to be working fine either way; testing complete
        'Dim qId As String = "25112"
        ''HOM_save_test_new_simple(qId) 'quoteId=25111, quoteNumber=QHOM143269; uses normal Operators logic
        ''HOM_save_test_new_simple(qId) 'quoteId=25112, quoteNumber=QHOM143270; uses Added/Removed Operators logic (accidentally used normal Operators logic for last re-rate but really doesn't make a difference)

        ''Dim qq As QuickQuoteObject = Nothing
        ''Dim eMsg As String = ""
        ''Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        ''QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        ''If qq IsNot Nothing Then
        ''    Dim opCount As Integer = 0
        ''    If qq.Operators IsNot Nothing Then
        ''        opCount = qq.Operators.Count
        ''    End If
        ''    If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
        ''        For Each l As QuickQuoteLocation In qq.Locations
        ''            If l.RvWatercrafts IsNot Nothing AndAlso l.RvWatercrafts.Count > 0 Then
        ''                For Each rv As QuickQuoteRvWatercraft In l.RvWatercrafts
        ''                    rv.AssignedOperatorNums = Nothing
        ''                    If opCount > 0 Then
        ''                        Dim counter As Integer = 1
        ''                        Dim addIt As Boolean = True
        ''                        Do While counter <= opCount
        ''                            If addIt = True Then
        ''                                If rv.AssignedOperatorNums Is Nothing Then
        ''                                    rv.AssignedOperatorNums = New List(Of Integer)
        ''                                End If
        ''                                rv.AssignedOperatorNums.Add(counter)
        ''                                addIt = False
        ''                            Else
        ''                                addIt = True
        ''                            End If

        ''                            counter += 1
        ''                            If counter > opCount Then
        ''                                Exit Do
        ''                            End If
        ''                        Loop
        ''                    Else
        ''                        'leave empty
        ''                    End If
        ''                Next
        ''            End If
        ''        Next
        ''    End If

        ''    Dim strQuote As String = ""
        ''    Dim ratedQQ As QuickQuoteObject = Nothing
        ''    Dim strRatedQuote As String = ""
        ''    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        ''    If eMsg = "" Then

        ''    End If
        ''End If

        ''12/8/2014 - QA testing for Bob's BOP quote (shows QuoteStatusId 6 for Quote Rating Failed, but doesn't have ValidationItems or error message)
        ''latest rate attempt has ValidationItems in xml and on ratedQQ (Location #1 - Building #1 - Mine Subsidence is not available for the county of 'DELAWARE'.)... maybe a bad assembly reference or something?
        'Dim qId As String = "25125" 'QBOP013350
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        '12/10/2014 - QA testing for Bob's CGL quote... just to get validation items
        'Dim qId As String = "25132" 'CGL
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''12/9/2014 - Patch testing for e2Value bug (#4233); appears to be something w/ quote page... UW questions keep coming back up after returning from e2Value and cov A limit is never populated... if you go back into the quote from My VR, the UW questions don't popup and the limit is populated
        'Dim qId As String = "22820" 'QHOM136147
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then

        'End If


        ''12/10/2014 - QA testing for new 3rd party report logging
        'Dim qId As String = "25169"
        ''PPA_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=25169, quoteNumber=QPPA177937
        ''HOM_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=25170, quoteNumber=QHOM143308

        ''12/10/2014 - Patch testing for new 3rd party report logging
        ''Dim qId As String = "22905"
        ''PPA_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=22904, quoteNumber=QPPA170583
        ''HOM_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=22905, quoteNumber=QHOM136228

        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    'Dim strQuote As String = ""
        '    'Dim ratedQQ As QuickQuoteObject = Nothing
        '    'Dim strRatedQuote As String = ""

        '    'With qq
        '    '    If .Applicants IsNot Nothing AndAlso .Applicants.Count > 0 Then
        '    '        Dim aCounter As Integer = 0
        '    '        For Each a As QuickQuoteApplicant In .Applicants
        '    '            aCounter += 1
        '    '            With a
        '    '                Dim extraText As String = " _app" & aCounter.ToString
        '    '                If .Name IsNot Nothing Then
        '    '                    With .Name
        '    '                        If .LastName <> "" Then
        '    '                            If UCase(.LastName).Contains(UCase(extraText)) = False Then
        '    '                                .LastName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '                If .Address IsNot Nothing Then
        '    '                    With .Address
        '    '                        If .StreetName <> "" Then
        '    '                            If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                                .StreetName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '            End With
        '    '        Next
        '    '    End If
        '    '    If .Client IsNot Nothing Then
        '    '        With .Client
        '    '            Dim extraText As String = " _client"
        '    '            If .Name IsNot Nothing Then
        '    '                With .Name
        '    '                    Dim extraText1 As String = extraText & "1"
        '    '                    If .LastName <> "" Then
        '    '                        If UCase(.LastName).Contains(UCase(extraText1)) = False Then
        '    '                            .LastName &= extraText1
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '            If .Name2 IsNot Nothing Then
        '    '                With .Name2
        '    '                    Dim extraText2 As String = extraText & "2"
        '    '                    If .LastName <> "" Then
        '    '                        If UCase(.LastName).Contains(UCase(extraText2)) = False Then
        '    '                            .LastName &= extraText2
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '            If .Address IsNot Nothing Then
        '    '                With .Address
        '    '                    If .StreetName <> "" Then
        '    '                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                            .StreetName &= extraText
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '        End With
        '    '    End If
        '    '    If .Drivers IsNot Nothing AndAlso .Drivers.Count > 0 Then
        '    '        Dim dCounter As Integer = 0
        '    '        For Each d As QuickQuoteDriver In .Drivers
        '    '            dCounter += 1
        '    '            With d
        '    '                Dim extraText As String = " _drv" & dCounter.ToString
        '    '                If .Name IsNot Nothing Then
        '    '                    With .Name
        '    '                        If .LastName <> "" Then
        '    '                            If UCase(.LastName).Contains(UCase(extraText)) = False Then
        '    '                                .LastName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '                If .Address IsNot Nothing Then
        '    '                    With .Address
        '    '                        If .StreetName <> "" Then
        '    '                            If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                                .StreetName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '            End With
        '    '        Next
        '    '    End If
        '    '    If .Locations IsNot Nothing AndAlso .Locations.Count > 0 Then
        '    '        Dim lCounter As Integer = 0
        '    '        For Each l As QuickQuoteLocation In .Locations
        '    '            lCounter += 1
        '    '            With l
        '    '                Dim extraText As String = " _loc" & lCounter.ToString
        '    '                If .Name IsNot Nothing Then
        '    '                    With .Name
        '    '                        If .LastName <> "" Then
        '    '                            If UCase(.LastName).Contains(UCase(extraText)) = False Then
        '    '                                .LastName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '                If .Address IsNot Nothing Then
        '    '                    With .Address
        '    '                        If .StreetName <> "" Then
        '    '                            If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                                .StreetName &= extraText
        '    '                            End If
        '    '                        End If
        '    '                    End With
        '    '                End If
        '    '            End With
        '    '        Next
        '    '    End If
        '    '    If .Policyholder IsNot Nothing Then
        '    '        With .Policyholder
        '    '            Dim extraText As String = " _ph1"
        '    '            If .Name IsNot Nothing Then
        '    '                With .Name
        '    '                    If .LastName <> "" Then
        '    '                        If UCase(.LastName).Contains(UCase(extraText)) = False Then
        '    '                            .LastName &= extraText
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '            If .Address IsNot Nothing Then
        '    '                With .Address
        '    '                    If .StreetName <> "" Then
        '    '                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                            .StreetName &= extraText
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '        End With
        '    '    End If
        '    '    If .Policyholder2 IsNot Nothing Then
        '    '        With .Policyholder2
        '    '            Dim extraText As String = " _ph2"
        '    '            If .Name IsNot Nothing Then
        '    '                With .Name
        '    '                    If .LastName <> "" Then
        '    '                        If UCase(.LastName).Contains(UCase(extraText)) = False Then
        '    '                            .LastName &= extraText
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '            If .Address IsNot Nothing Then
        '    '                With .Address
        '    '                    If .StreetName <> "" Then
        '    '                        If UCase(.StreetName).Contains(UCase(extraText)) = False Then
        '    '                            .StreetName &= extraText
        '    '                        End If
        '    '                    End If
        '    '                End With
        '    '            End If
        '    '        End With
        '    '    End If
        '    'End With

        '    'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    ''QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '    'If eMsg = "" Then

        '    'End If

        '    Dim tpd As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim results As String = ""
        '    QQxml.LoadCreditForQuote(qq, tpd, results, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If


        ''12/11/2014 Patch testing for Todd's Modifiers error... PK constraint; quoteId 22919; key (588503, 1, 6); fixed by updating Matching logic to also look at ParentModifierTypeId
        'Dim qId As String = "22919" '
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        ''12/22/2014 - Patch testing for bug #4272 (phone/email links... ph/operator) and QA testing for CGL lobType... no prob w/ lobType (just need to make sure VR Comm site has all of the config keys needed to access static data file)
        'Dim qId As String = "22940" 'Patch phone/email link; maybe can't use emails/phones for operators; worked updating QuoteObjectToDiamondImageConversion_Operator logic to no longer call QuoteObjectToDiamondImageConversion_Emails or QuoteObjectToDiamondImageConversion_Phones
        ''Dim qId As String = "25103" 'QA CGL lobType; okay... no prob
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""
        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If

        '12/22/2014 - more Patch testing w/ Operator emails/phones
        'HOM_save_test_new_simple("23135") 'quoteId=23135, quoteNumber=QHOM136482, policyId=588898; initial rate works fine... subsequent rate should fail because it's trying to add Op phones/emails again since Diamond doesn't load them when retrieving the image... test re-rate didn't fail since it's pulling the ratedXml, which doesn't have the Operator emails/phones... 2nd re-rate attept failed (as expected) after adding call to CopyPolicyholdersToOperators on re-rate; 12/22/2014 note: would have same problem w/ Applicants except for the fact that the PK is policyId/policyImageNum/applicantNum/emailId for that one instead of policyId/policyImageNum/applicantNum/emailTypeId like the rest (drivers should have same problem as BillingAddressee and Operators)

        '12/22/2014 - Patch testing for Driver emails/phones (should have same problem as BillingAddressee and Operator; Applicant also has problem but doesn't currently get error since PK contains emailId/phoneId instead of emailTypeId/phoneTypeId); Diamond doesn't appear to ever save them so the logic is no longer sending them to Diamond (for consistency)
        'PPA_save_test_new_simple("23137") 'quoteId=23137, quoteNumber=QPPA170611, policyId=588903

        '12/23/2014 - QA 3rd party report log testing; unable to get Tier on QA... maybe because of invalid data
        'Dim qId As String = "25219"
        ''PPA_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=25218, quoteNumber=QPPA177950
        ''HOM_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=25219, quoteNumber=QHOM143344

        '12/23/2014 - Patch 3rd party report log testing
        'Dim qId As String = "23146" 'other tests: quoteId 23146, quoteNumber QPPA170613
        ''PPA_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=23144, quoteNumber=QPPA170612
        ''HOM_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Save) 'quoteId=23145, quoteNumber=QHOM136489 (note: quoteNumber not stored in xml for some reason, but it's in the ThirdPartyReportLog table... maybe I stopped the local site before processing was completed.

        '12/23/2014 - more Patch 3rd party report log testing... to see if changing name below caused the 'tier required' error on rate... or maybe workflow of saving 1st and then retrieving for rate
        'Dim qId As String = "23176"
        'PPA_save_test_new_simple(qId) 'quoteId=23161, quoteNumber=QPPA170614; rated successfully on 1st attempt w/ normal names
        'HOM_save_test_new_simple(qId) 'quoteId=23163, quoteNumber=QHOM136493; rated successfully on 1st attempt w/ normal names
        'PPA_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Rate, True) 'quoteId=23164, quoteNumber=QPPA170615; failed on 1st attempt w/ updated names
        'HOM_save_test_new_simple(qId, QuickQuoteXML.QuickQuoteValidationType.Rate, True) 'quoteId=23165, quoteNumber=QHOM136495; failed on 1st attempt w/ updated names
        'PPA_save_test_new_simple(qId) 'quoteId=23176, quoteNumber=QPPA170616; rated successfully on 1st attempt w/ normal names
        'HOM_save_test_new_simple(qId) 'quoteId=23177, quoteNumber=QHOM136504; rated successfully on 1st attempt w/ normal names

        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""

        '    'qq.TierAdjustmentTypeId = "-1"

        '    'UpdateQuickQuoteEntityNamesAndAddresses(qq)

        '    'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    ''QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '    'If eMsg = "" Then

        '    'End If

        '    'Dim tpd As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    'Dim tpd2 As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    'Dim results As String = ""
        '    ''QQxml.LoadCreditForQuote(qq, tpd, results, eMsg)
        '    ''QQxml.LoadMvrForQuote(qq, tpd, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, eMsg)
        '    ''QQxml.LoadClueAutoForQuote(qq, tpd, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, eMsg)
        '    'QQxml.LoadMvrAndClueAutoForQuote(qq, tpd, tpd2, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, eMsg)
        '    ''QQxml.LoadCluePropertyForQuote(qq, tpd, QuickQuoteXML.ChoicePointCopyOverwriteType.ReplaceAllForReportTypesFoundAndExcludeNoHitsAndClear, True, QuickQuoteXML.QuickQuoteSaveType.AppGap, results, eMsg)
        '    'If eMsg = "" Then

        '    'End If
        'End If

        ''12/24/2014 - testing latest Copy logic (for PHs to Clients/Drivers/Applicants/Operators)
        'Using qqo As New QuickQuoteObject
        '    With qqo
        '        If .Policyholder Is Nothing Then
        '            .Policyholder = New QuickQuotePolicyholder
        '        End If
        '        With .Policyholder
        '            If .Address Is Nothing Then
        '                .Address = New QuickQuoteAddress
        '            End If
        '            With .Address
        '                .HouseNum = "123"
        '                .StreetName = "Test Street"
        '                .City = "Indy"
        '                .State = "IN"
        '                .Zip = "46227"
        '            End With
        '            If .Name Is Nothing Then
        '                .Name = New QuickQuoteName
        '            End If
        '            With .Name
        '                .FirstName = "Don"
        '                .LastName = "Test"
        '                .TaxNumber = "123-45-6789"
        '            End With
        '        End With
        '        If .Policyholder2 Is Nothing Then
        '            .Policyholder2 = New QuickQuotePolicyholder
        '        End If
        '        With .Policyholder2
        '            'If .Address Is Nothing Then
        '            '    .Address = New QuickQuoteAddress
        '            'End If
        '            'With .Address

        '            'End With
        '            qqo.CopyPolicyholder1AddressToPolicyholder2Address()
        '            If .Name Is Nothing Then
        '                .Name = New QuickQuoteName
        '            End If
        '            With .Name
        '                .FirstName = "Name2"
        '                .LastName = "Test"
        '                .TaxNumber = "987-65-4321"
        '            End With
        '        End With

        '        .CopyPolicyholdersToClients()
        '        .CopyPolicyholdersToApplicants()
        '        .CopyPolicyholdersToDrivers()
        '        .CopyPolicyholdersToOperators()
        '        If .Client IsNot Nothing Then

        '        End If

        '        Dim a As New QuickQuoteApplicant
        '        With a
        '            If .Address Is Nothing Then
        '                .Address = New QuickQuoteAddress
        '            End If
        '            With .Address
        '                .HouseNum = "456"
        '                .StreetName = "Sample Drive"
        '                .City = "Indy"
        '                .State = "IN"
        '                .Zip = "46227"
        '            End With
        '            If .Name Is Nothing Then
        '                .Name = New QuickQuoteName
        '            End If
        '            With .Name
        '                .FirstName = "Another"
        '                .LastName = "Applicant"
        '                .TaxNumber = "222-33-4444"
        '            End With
        '        End With
        '        If .Applicants Is Nothing Then
        '            .Applicants = New List(Of QuickQuoteApplicant)
        '        End If
        '        .Applicants.Add(a)

        '        Dim d As New QuickQuoteDriver
        '        With d
        '            If .Address Is Nothing Then
        '                .Address = New QuickQuoteAddress
        '            End If
        '            With .Address
        '                .HouseNum = "987"
        '                .StreetName = "Practice Circle"
        '                .City = "Indy"
        '                .State = "IN"
        '                .Zip = "46227"
        '            End With
        '            If .Name Is Nothing Then
        '                .Name = New QuickQuoteName
        '            End If
        '            With .Name
        '                .FirstName = "Another"
        '                .LastName = "Driver"
        '                .TaxNumber = "333-44-2222"
        '            End With
        '        End With
        '        If .Drivers Is Nothing Then
        '            .Drivers = New List(Of QuickQuoteDriver)
        '        End If
        '        .Drivers.Add(d)

        '        .Policyholder2 = Nothing
        '        .CopyPolicyholdersToClients()
        '        .CopyPolicyholdersToApplicants()
        '        .CopyPolicyholdersToDrivers()
        '        .CopyPolicyholdersToOperators()
        '        If .Client IsNot Nothing Then

        '        End If
        '    End With
        'End Using


        ''12/29/2014 - Patch 3rd party report testing... for credit... and retaining tieringInfo
        'Dim qId As String = "23221"
        ''HOM_save_test_new_simple(qId) 'quoteId=23221, quoteNumber=QHOM136543; successfully pushed tieringInfo from ratedQuote back to quote, but unable to get tieringInfo from image reloaded right after ordering credit... always showed Nothing
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    Dim strQuote As String = ""
        '    Dim ratedQQ As QuickQuoteObject = Nothing
        '    Dim strRatedQuote As String = ""

        '    'UpdateQuickQuoteEntityNamesAndAddresses(qq)

        '    'If qq.Policyholder2 IsNot Nothing Then
        '    '    With qq.Policyholder2
        '    '        If .Name IsNot Nothing Then
        '    '            With .Name
        '    '                'If .BirthDate <> "" AndAlso IsDate(.BirthDate) = True AndAlso CDate(.BirthDate) = CDate("2/1/1982") Then
        '    '                '    .BirthDate = "3/1/1982"
        '    '                '    qq.CopyPolicyholdersToClients()
        '    '                '    qq.CopyPolicyholdersToApplicants()
        '    '                '    qq.CopyPolicyholdersToOperators()
        '    '                'End If
        '    '                If .BirthDate <> "" AndAlso IsDate(.BirthDate) = True Then
        '    '                    If CDate(.BirthDate) = CDate("2/1/1982") Then
        '    '                        .BirthDate = "3/1/1982"
        '    '                        qq.CopyPolicyholdersToClients()
        '    '                        qq.CopyPolicyholdersToApplicants()
        '    '                        qq.CopyPolicyholdersToOperators()
        '    '                        Dim ph1App As QuickQuoteApplicant = Nothing
        '    '                        Dim ph2App As QuickQuoteApplicant = Nothing
        '    '                        Dim loadErr As String = ""
        '    '                        qqHelper.LoadPolicyholderApplicantsFromQuickQuoteObject(qq, ph1App, ph2App, loadErr)
        '    '                        If ph2App IsNot Nothing Then
        '    '                            ph2App.ApplicantNum = "" 'should force logic to create new one
        '    '                        End If
        '    '                    ElseIf CDate(.BirthDate) = CDate("3/1/1982") Then
        '    '                        .BirthDate = "2/1/1982"
        '    '                        qq.CopyPolicyholdersToClients()
        '    '                        qq.CopyPolicyholdersToApplicants()
        '    '                        qq.CopyPolicyholdersToOperators()
        '    '                        Dim ph1App As QuickQuoteApplicant = Nothing
        '    '                        Dim ph2App As QuickQuoteApplicant = Nothing
        '    '                        Dim loadErr As String = ""
        '    '                        qqHelper.LoadPolicyholderApplicantsFromQuickQuoteObject(qq, ph1App, ph2App, loadErr)
        '    '                        If ph2App IsNot Nothing Then
        '    '                            ph2App.ApplicantNum = "" 'should force logic to create new one
        '    '                        End If
        '    '                    End If
        '    '                End If
        '    '            End With
        '    '        End If
        '    '    End With
        '    'End If

        '    If qq.Applicants IsNot Nothing AndAlso qq.Applicants.Count = 3 Then 'delete the 3rd applicant added by DataFill service
        '        qq.Applicants.RemoveAt(2)
        '    End If

        '    QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '    'QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '    If eMsg = "" Then

        '    End If
        'End If
    End Sub
    '10/14/2014 - added new Test Sub... to be called from Page_Load
    Private Sub Test()

        'CIM_save_test("23536") 'quoteId=23536, quoteNumber=QCIM010314; 1st rate attempt: {Contractor's Equipment – you must enter a Rate., Error}; successful after adding CE properties for policy-level coverage (i.e. rate, etc.)
        'note: latest attempt for CE Rental Reimbursement failed: {(R-632) Inland Marine Contractors Equipment Rental Reimbursement&nbsp; requires Underwriting Approval., Error}
        'note: success on last attempt w/ CE Small Tools after removing Rental Reimbursement (per the previous error)
        'note: latest attempt for Small tools failed: {(R-636) Cannot add Small Tools Floater coverage if they have already entered this same coverage in the Contractor’s Equipment coverage area, Error}
        'note: success on last attempt w/ small tools after removing CE small tools
        'note: success on latest attempt after adding small tools AIs
        '1/28/2015 note: latest attempt w/ Installation failed: {Cannot have Unscheduled Limits with Scheduled limits., Error}; test set blanket limit and used scheduledLocations... will need to omit blanket limit; will also need to look at Coverage reconciliation logic since there can be multiple covs w/ coverageCodeId 21290 (Installation - Schedule)... Diamond image appeared to just have 1 cov when our logic sent 2
        'note: still failed on last attempt w/ Installation after omitting blanket limit; didn't fix cov reconciliation logic but identified issue: {Error in GetDeductibleFactor: DeductibleID 0 is invalid for AllPerilsDeductibleFactor., Error}; {Error in CalculateInlandMarineCoverageWithRBC: Object reference not set to an instance of an object., Error}
        'note: all covs are being added now, but it still fails w/ the same 2 errors... may need to apply blanket props to 21287 cov (Installation)
        'note: rated successfully after applying blanket props to 21287, but 21288 (Installation - Blanket) isn't showing up... maybe you can only have 1 or the other
        '4/1/2015 note: latest attempt w/ everything added since the last rate (1/28/2015): {Location #1 - Building #1 - Please select a Construction Type., Error}
        '4/1/2015 cont: then {Error in CalculateSignsCoverage: Object reference not set to an instance of an object., Error}... worked after setting ShouldSyncWithMasterCoverage to true on building's sign covs... will need to identify other covs that use this and update too (may not be needed for rating like this one, but should still be there for consistency since that's what Diamond sets it to)... other potentials would be Building's computer covs and scheduled items (either as ScheduledCoverage or separate Coverage under QuickQuoteObject)
        '4/2/2015 cont: successfully re-rated w/ same premium after going back and setting ShouldSyncWithMasterCoverage to true on other applicable covs
        '4/2/2015 note: noticed that Motor Truck Cargo Scheduled Vehicles aren't getting into Diamond; 1st added ShouldSyncWithMasterCoverage true... then noticed the limits aren't being set... now in Diamond after setting limits
        '4/2/2015 cont: will next go thru and make sure CoverageBasisTypeId is being set to 1 for all applicable covs (will then verify that ones w/ 'Rate Per' dropdown in Diamond UI are set correctly)... successfully rated w/ same premium as before... and Rate Per fields are now set to 'per 100'

        '4/2/2015 - testing CRM on Patch
        'CRM_save_test("23844") 'quoteId=23844, quoteNumber=QCRM010034; successful on initial rate attempt

        '2/3/2015 - test for latest Diamond release in QA... Diamond Upgrade page is failing... System.MissingMethodException: Method not found: 'Void Diamond.Common.Objects.Administration.Users.set_UserCategoryId(Int32)'. at DiamondWebClass.DiamondSecurity.AddDiamondUser(WebUser userObject, UserLocation systemLocated) at DiamondWebClass.DiamondSecurity.Admin_UpgradeWebUser(WebUser userObject)
        'Test2()

        '2/5/2015 - test for latest Diamond release in QA... to see how existing method was working for AccidentViolation.UnitNum if it's always been an IdValue instead of Integer; works as long as it's a valid IdValue... fails if nothing because it can't convert to Int
        'Test3_old()

        'Test3() 'prod support 2/12/2015
        'Test4() 'prod support 2/13/2015
        'Test5() 'prod support 2/27/2015
        'Test6() 'prod support 3/2/2015
        'Test7() 'prod support 3/9/2015
        'TestAdditionalInterestList() '3/9/2015 for bug # 4488 (Additional Interest DisplayName)
        'Test8() 'prod support 3/25/2015
        'StaticDataTest() 'added 3/27/2015 for testing

        '4/14/2015 testing... for CPP, CIM, and CRM on Patch
        'ReSaveOrReRate("23536") 'quoteId=23536, quoteNumber=QCIM010314; successfully re-rated w/ same premium (using QuickQuote)
        'ReSaveOrReRate("23844") 'quoteId=23844, quoteNumber=QCRM010034; successfully re-rated w/ same premium (using QuickQuote)
        'ReSaveOrReRate("23857") 'quoteId=23857, quoteNumber=QCPP019112; originally copied from quoteId 23822, quoteNumber QCPP019111, prem $3,993.00; successfully re-rated w/ same premium (using QuickQuote)
        're-testing on Patch 4/23/2015 to make sure everything still works after updating package part and database logic
        'ReSaveOrReRate("23875") 'quoteId=23875, quoteNumber=QCPP019113; originally copied from quoteId 23822, quoteNumber QCPP019111, prem $3,993.00; successfully re-rated w/ same premium (using QuickQuote)

        '4/15/2015 - testing 'copy quote' functionality on Patch... seems to be an issue on some Comm LOBs when trying from QuickQuote library; 4/16/2015 note: issue appeared to be specific to calling qqHelper.CloneObject on a building w/ SpoilagePropertyClassification = ""
        'Dim newQuoteId As String = ""
        'Dim copyError As String = ""
        ''QQxml.CopyQuote("23822", newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 23868
        ''QQxml.CopyQuote("23822", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 23869
        ''re-testing on Patch 4/23/2015 to make sure everything still works after updating package part and database logic
        'QQxml.CopyQuote("23822", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 23875
        'If newQuoteId <> "" AndAlso copyError = "" Then

        'End If

        '4/15/2015 - testing string/int/decimal conversion logic
        'Dim l As String = "1,000"
        'l = CInt(l).ToString 'removes comma
        'l = qqHelper.DiamondAmountFormat(l) 'removes comma

        'Dim l As String = "123,000.99"
        'l = CInt(l).ToString '123001
        'l = qqHelper.DiamondAmountFormat(l) '123000.99

        'Dim l As String = "123,000.99"
        'l = CDec(l).ToString '123000.99

        '4/16/2015 - re-testing Spoilage Classification... issue appeared to be specific to calling qqHelper.CloneObject on a building w/ SpoilagePropertyClassification = ""
        'ReSaveOrReRate("23822")

        '4/23/2015 - testing CPP w/ CIM and CRM package parts (on Patch)
        'CPP_save_test_all_parts() 'quoteId=23883, quoteNumber=QCPP019115, prem=$8,644.00; forgot to set hasCIM and hasCRM flags to include parts
        'CPP_save_test_all_parts_new("23884") 'quoteId=23884, quoteNumber=QCPP019116, prem=$15,576.00 (CGL-$1,549.00; CPR-$7,085.00; CIM-$6,248.00; CRM-$694.00); successfully rated w/ packagePart prems on 1st attempt... GL prem went down $50 to $1,499.00 (total down to $15,526.00); 4/28/2015 note: prem dropped because other EPLI covs (ones not programmed in VR) dropped off on re-rate... should be okay w/ comparative rater service... will need to do something to handle scenario when using Diamond services

        '4/28/2015 - testing FAR (on Patch)
        'Farm_save_test("23893") 'quoteId=23893, quoteNumber=QFAR019219; initial rate attempt received a validation error: (R-477) Farm Quoting is not available at this time.; subsequent rate attempt also received validation error: Policy must have at least one applicant on the policy.; subsequent rate attempt also received validation error: A location is required in order to rate.; subsequent rate attempt received more errors (mostly location): {Policy: Program Type is required., Warning}, {Location Num #{new} Number of Families is required., Error}, {Location Num #{new} Program Type is required., Error}, {Location Num #{new} Dwelling Classification is required, Error}, {Location Num #{new} Year Built is required to rate., Error}
        '4/28/2015 cont from prev line: subsequent rate attempt received more errors: {Policy: Program Type is required., Warning}, {Location Num #{new} Invalid form selected for Farmowners program. , Error}; subsequent rate attempt: Policy: Program Type is required. (Warning), Policy: Program Type is required. (Error), Location Num #1 Deductible is required for selected form. (Error)
        '4/28/2015 cont from prev lines: subsequent rate attempt: {Occurrence Liability is required for selected form., Error}, {Location #1 - Limited Perils Coverage is only available with Select-O-Matic., Error}, {Location #1 - Acreage Description is required., Error}, {No Primary Residence listed on policy., Error}; subsequent rate attempt: {Location Num #1 At least one farm type is required. , Error}
        '4/28/2015 cont from prev lines: subsequent rate attempt was successful (no prem) but had validation error: (R-847) When Hobby Farm Type selected you must also select Hobby Farm Credit
        '4/28/2015 cont from prev lines: subsequent rate attempt was successful ($100.00) w/o any errors

        '4/29/2015 - testing FAR (on Patch); copying FAR quote for testing e2Value interface
        'Dim newQuoteId As String = ""
        'Dim copyError As String = ""
        'QQxml.CopyQuote("23893", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 23895
        'If newQuoteId <> "" AndAlso copyError = "" Then

        'End If
        'ReSaveOrReRate("23895", QuickQuoteXML.QuickQuoteValidationType.Save) 'added logic to save quote description specific to e2Value testing

        '5/13/2015 - testing FAR (on Patch) after adding policy-level covs
        'Farm_save_test("23963") 'quoteId=23963, quoteNumber=QFAR019220; rating errors on initial attempt (because of invalid cov selections)
        '{Exclusion of Products/Completed Work (GL615) is not available for selected Liabiltiy Option., Error}
        '{At least one location must be listed with form FO-03 or FO 00 05 when Equipment Breakdown is selected., Error}
        '{Personal and Advertising Injury is only available on Farm Commercial., Error}
        '{Minimum Limit for Cov G Blanket is 15,000., Error}
        'also rating error on subsequent attempt... {EPLI Coverage is only available when Liability Option is Farm Commercial., Error}
        'will try another test (and save xmls) to see how EPLI is getting added... probably at initial quote save
        'Farm_save_test("23968") 'quoteId=23968, quoteNumber=QFAR019221
        '{EPLI Coverage is only available when Liability Option is Farm Commercial., Error}
        'will try another test w/o FarmEmployersLiability
        'Farm_save_test("23969") 'quoteId=23969, quoteNumber=QFAR019222
        '{EPLI Coverage is only available when Liability Option is Farm Commercial., Error}
        'new test w/o latest covs... will try adding 1-at-a-time
        'Farm_save_test("23972") 'quoteId=23972, quoteNumber=QFAR019223
        '{Deductible F and G is only available when Cov F or Cov G is added.  Deductible was removed., Warning}
        '{EPLI Coverage is only available when Liability Option is Farm Commercial., Error}
        'new test... will try removing more initially and add them back 1-at-a-time
        'Farm_save_test("23974") 'quoteId=23974, quoteNumber=QFAR019224
        '{EPLI Coverage is only available when Liability Option is Farm Commercial., Error}
        'issue w/ EPLI being added automatically may have something to do w/ new rating version (started 5/1/2015)... will need to try rating w/ older effective date
        'new test w/ 4/20/2015 effDate
        'Farm_save_test("23975") 'quoteId=23975, quoteNumber=QFAR019225; same results
        'new test w/ 4/20/2015 effDate and less starting covs
        'Farm_save_test("23976") 'quoteId=23976, quoteNumber=QFAR019226; same results
        'new test w/ 4/20/2015 effDate and no using Diamond image or rated xml
        'Farm_save_test("23978") 'quoteId=23978, quoteNumber=QFAR019227; same results... will try re-rating now to see if it drops off; testing confirmed... appears that EPLI is only automatically added on the quote submission (SubmitApplication)... it stays gone if we remove it after that... will now try re-rating w/ the other covs
        'got this 7 times w/ no indication of where the cov must be selected: { You must select a coverage before saving., Error}
        'will try re-rating w/o F, G, Optionals, and IncidentalLimits to see if those were the cause of the previous error... down to 1 error now... may be UnscheduledPersonalProperty... need to make sure it's only being used when populated... appears to be this one... updated code to set detailStatusCode = 2 if nothing is set, but Diamond may not be deleting it
        'will try another new test w/o policy-level covs since it doesn't look like I can remove the UnscheduledPersonalPropertyCoverage after it's there
        '5/14/2015: today's re-rate got this 8 times:  You must select a coverage before saving. (appears to be due to Farm Incidentals); I was signed in as staff instead of agency user
        'Farm_save_test("23980") 'quoteId=23980, quoteNumber=QFAR019228; successful on subsequent rate after removing EPLI that was automatically added by Diamond
        '5/14/2015 note: there is an open TT to stop EPLI from being added automatically on Personal Farm... passed in QA, not yet in Patch
        '5/14/2015 cont... trying new test w/o Farm Incidentals as those seem to be the problem... 1st test today had 8 'must select coverage' errors, and 2nd test had 1... both tests shouldn't have had any
        'Farm_save_test("34258") 'quoteId=34258, quoteNumber=QFAR020544; note: commented QuoteObjectToDiamondImageConversion_Coverages call in QuoteObjectToDiamondImageConversion_PolicyLevel and WriteFarmIncidentalLimitCoveragesNode in WriteLob_After_Coverages
        'rated successfully on initial attempt, but had this warning: EPLI Coverage is not valid with Personal Farm, the coverage has been removed.
        'rated quote returned also showed HasEPLI = True
        'subsequent re-rate failed w/ 8 of these: { You must select a coverage before saving., Error}; then back to 1 after clearing coverage lists and re-rating
        '5/15/2015 - another test w/o optionals, scheduled, and unscheduled; note: commented QuoteObjectToDiamondImageConversion_OptionalCoverages, QuoteObjectToDiamondImageConversion_ScheduledPersonalPropertyCoverages, and QuoteObjectToDiamondImageConversion_UnscheduledPersonalPropertyCoverage calls in QuoteObjectToDiamondImageConversion_PolicyLevel and WriteOptionalCoveragesNode, WriteScheduledPersonalPropertyCoveragesNode, and WriteUnscheduledPersonalPropertyCoverageNode in WriteLob_After_Coverages
        'Farm_save_test("34260") 'quoteId=34260, quoteNumber=QFAR020545; rated successfully on 1st attempt (still received EPLI warning)
        'ReSaveOrReRate("34260") 'then attempted re-rate w/o changing anything (noticed when loading quote, Farm Debris Removal Farm Incidental doesn't have Checkbox True), but that resulted in the same 8 validation errors to select a coverage
        '5/15/2015 - trying yet another test but w/o ApplyToWrittenPremium and Exposure Coverage fields
        'Farm_save_test("34261") 'quoteId=34261, quoteNumber=QFAR020546; rated successfully on 1st attempt (still received EPLI warning)
        'ReSaveOrReRate("34261") 'then attempted re-rate w/o changing anything (noticed when loading quote, Farm Debris Removal Farm Incidental doesn't have Checkbox True), but that resulted in the same 8 validation errors to select a coverage
        '5/15/2015 - trying yet another test but w/o ASLId Coverage field
        'Farm_save_test("34262") 'quoteId=34262, quoteNumber=QFAR020547; rated successfully on 1st attempt (still received EPLI warning)
        'ReSaveOrReRate("34262") 'then attempted re-rate w/o changing anything (noticed when loading quote, Farm Debris Removal Farm Incidental doesn't have Checkbox True), but that resulted in the same 8 validation errors to select a coverage
        'noticed re-rate attempt doesn't have other EPLI covs (80332, 80345); all other policy-level covs look the same; location RvWatercraft min prem adjustment cov fell off on re-rate and then automatically added back w/o original values (80249; prob not needed); also Farm_L_Liability_Location cov (80135), Farm_M_Medical_Payments_Location (80136); none of the 8 Location SectionCoverages have a Coverage inside... likely the 'must select a coverage' issue
        'now need to check Location SectionCoverages and map those for Farm
        'TestLoadQuote("34262")
        '5/20/2015 - will try re-rating after updating logic for Loc SectionI and II covs
        'Farm_save_test("34262") 'rated successfully on 1st attempt; then tried to re-rate w/ FarmIncidentalLimits, OptionalCoverages, ScheduledPersonalPropertyCoverages, and UnscheduledPersonalPropertyCoverage logic back in (not setting yet though): rated successfully; then tried setting covs: rated successfully on 1st attempt

        '5/14/2015 - Prod support request to copy quote from one code to another (quoteId 44284, quoteNumber QCPP022196)
        'TestCopyQuoteForProd()

        '5/28/2015 - Patch testing to create CPP quote so we can edit in UI to get new coverages... Contractors Enhancement Endorsement (CPR, CGL, CIM), Manufacturers Enhancement (CPR), as well as CIM Contractors Equipment Catastrophe Occurrence Limit under Additional Information
        'CPP_save_test_all_parts_new("24027") 'quoteId=24027, quoteNumber=QCPP019146; note: need to do it from QA since that's where the new coverages are
        '5/29/2015 - re-testing from QA
        'CPP_save_test_all_parts_new("34309") 'quoteId=34309, quoteNumber=QCPP022370; using this one for current mapping tests (Contractors Enhancement; needs to have effDate >= 5/12/2015)
        '5/29/2015 - new QA test against CR services to see why coverage AIs are failing
        'CPP_save_test_all_parts_new("34313") 'quoteId=34313, quoteNumber=QCPP022372; successful w/ AI listId in there
        'CPP_save_test_all_parts_new("34314") 'quoteId=34314, quoteNumber=; failed w/o AI listId... same error Matt was getting
        '5/29/2015 - another QA test for Manufacturers Enhancement (needs to have effDate >= 6/30/2015)
        'CPP_save_test_all_parts_new("34315") 'quoteId=34315, quoteNumber=QCPP022374; Manufacturers Enhancement testing (needs 6/30/2015 + effDate)

        '6/8/2015 - QA testing Contractors and Manufacturers Enhancements for CPP
        'CPP_save_test_all_parts_new("34372") 'quoteId=34372, quoteNumber=QCPP022412; successfully rated on 1st attempt but didn't come back w/ covs; Contractors was fixed by setting ShouldSyncWithMasterCoverage true but not Manufacturers; then ApplyWrittenPremium true didn't affect anything; next tried setting CoverageDescription w/o change... will now try removing UCase on CoverageDescription to type exactly what Diamond has... didn't make a difference; 6/10/2015 note: found adding nodes under PolicyLevel (IsContractorsEnhancementEndorsement and IsManufacturersEnhancementEndorsement)
        '6/10/2015 - QA re-testing Contractors and Manufacturers Enhancements for CPP... also now using optional effDate param
        'CPP_save_test_all_parts_new("34381", QuickQuoteXML.QuickQuoteValidationType.Rate, False, "7/1/2015") 'quoteId=34381, quoteNumber=QCPP022425
        'last test successful w/ rating errors; Y Axis one is happening in portal/UI too
        'Inland Marine Detail #5: Error in GetDeductibleFactor: DeductibleID 0 is invalid for AllPerilsDeductibleFactor.
        'Inland Marine Detail #5: Error in CalculateInlandMarineCoverageWithRBC: Unable to locate Y Axis (Table[InstallationCoinsurance] Value[0])
        'Inland Marine Detail #5: Rating Failed!

        '6/10/2015 - Prod support request to copy quotes from 1500 to 3274 (80 quotes from the last year)
        'CopyQuotesFromAgencyToAgency()

        '6/11/2015 - Patch test for Farm re-rate
        'ReSaveOrReRate("24139")

        '6/16/2015 - Patch test for Farm re-rate
        'ReSaveOrReRate("24176")
        'ReSaveOrReRate("24188")
        'TestLoadQuote("24188")

        '6/16/15 - QA test for CIM coverage AIs
        'CIM_save_test("34399") 'quoteId=34399; quoteNumber=QCIM010503; inadvertently ran against Diamond services... need to try comparative rater services
        'CIM_save_test("34400") 'quoteId=34400; quoteNumber=; failed like expected

        '6/18/2015 - QA test w/ comparative rater for CIM Installation Floater AI (existing Diamond issue)... going to see if it will work from VR if we put it on 21287 when Scheduled or 21288 when Blanket
        'CIM_save_test("34434") 'quoteId=34434; quoteNumber=QCIM010515; ScheduledLocs
        'CIM_save_test("34435") 'quoteId=34435; quoteNumber=QCIM010516; Blanket

        '6/24/2015 - QA test for Farm
        'Farm_save_test("34457") 'quoteId=34457; quoteNumber=QFAR020906

        '6/29/2015 - testing for new .ToString overloads on objects
        'TestLoadQuote("34457")

        '7/7/2015 - HOM rules testing on QA
        'RulesTest()

        '7/16/2015 - QA test for Bob
        'XmlToImageTest(True)

        '7/16/2015 - Prod support request to copy quotes from 3195 to 3279 ( quotes from the last year)
        'CopyQuotesFromAgencyToAgency()

        '7/21/2015 - Patch test for Farm re-rate; then re-tested 7/23/2015 w/ new logic to combine Save and Rate ValidationItems... in the case that they are called separately
        'ReSaveOrReRate("24600") 'QFAR019403
        'TestLoadQuote("24600")

        '7/23/2015 - testing DiamondValidation stuff
        'Dim dv As New Diamond.Common.Objects.DiamondValidation
        'If dv.ValidationItems Is Nothing Then
        '    dv.ValidationItems = New Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ValidationItem)
        'End If
        'Dim vi As New Diamond.Common.Objects.ValidationItem(Diamond.Common.Objects.ValidationItemType.ValidationError, "Test Error")
        'dv.ValidationItems.Add(vi)
        'Dim vi2 As New Diamond.Common.Objects.ValidationItem(Diamond.Common.Objects.ValidationItemType.ValidationWarning, "Test Warning")
        'dv.ValidationItems.Add(vi2)

        'Dim newDv As Diamond.Common.Objects.DiamondValidation = Nothing
        'newDv = dv.MakeCopy(False) 'this works
        'If newDv IsNot Nothing Then

        'End If

        '4/29/2015 - testing FAR copy (on Patch)... to see why UW Questions aren't being removed... backend code appears to be okay... may be issue on page just not loading Kill Questions or UW Questions page not saving
        'Dim newQuoteId As String = ""
        'Dim copyError As String = ""
        'QQxml.CopyQuote("24646", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 24647
        'If newQuoteId <> "" AndAlso copyError = "" Then

        'End If

        'TestParams(1, 1) 'okay
        'TestParams(1, 1, 1) 'this also worked; translated last param (1) to True
        'TestParams2(1, 1) 'also worked
        'TestParams2(1, True) 'also worked

        '7/29/2015 - testing e2Value stuff
        'Dim delimitedParam As String = "62804%7c14014%7c24072%7c81720%7c22125%7c14530%7c13384" '62804|14014|24072|81720|22125|14530|13384
        ''Dim delimitedParam As String = "%2445%2c000+-+%2455%2c000"'$45,000 - $55,000
        'delimitedParam = QuickQuoteHelperClass.UrlDecodedValue(delimitedParam)
        'Dim delimiter As String = "|"
        'Dim formatAsCurrency As Boolean = True
        'Dim newList As List(Of String) = Nothing
        'Dim pvHelper As New QuickQuotePropertyValuationHelperClass
        'newList = pvHelper.ListFromDelimitedParam(delimitedParam, delimiter, formatAsCurrency)
        'If newList IsNot Nothing Then

        'End If

        '7/29/2015 - Patch Farm testing (need good test quote for e2Value testing)
        'Farm_save_test("24655") 'quoteId=24655; quoteNumber=QFAR019449

        '8/4/2015 - QA testing for HOM surcharge logic
        'ReSaveOrReRate("34545") 'QHOM181699; was able to see LossHistorySurchargeId change from 1 to 2 for both LossHistories; will try again from AppGap after re-loading from existing report
        'ReSaveOrReRate("34545", QuickQuoteXML.QuickQuoteValidationType.Rate, QuickQuoteXML.QuickQuoteSaveType.AppGap) 'same thing happened; newImage still had 1 after Diamond save, but ratedImage had 2 after Diamond rate
        'more QA testing 8/5/2015 (Davetta's test quote: quoteId 34549)
        'ReSaveOrReRate("34549", QuickQuoteXML.QuickQuoteValidationType.Rate, QuickQuoteXML.QuickQuoteSaveType.AppGap)

        '8/4/2015 - Patch testing for notes functionality (will need for Farm AppGap)... 
        'Dim policyId As String = ""
        'Dim imgNum As String = ""
        'Dim errorMsg As String = ""
        'QuickQuoteHelperClass.SetPolicyIdAndImageNumberForPolicyNumber("QFAR019449", policyId, imgNum)
        'If qqHelper.IsValidQuickQuoteIdOrNum(policyId) = True AndAlso qqHelper.IsNumericString(imgNum) = True Then
        '    'QQxml.AddPolicyNote(CInt(policyId), CInt(imgNum), QuickQuoteHelperClass.DiamondUserId, "Don Test Note", "Don Test Note Title", errorMsg)
        '    'If errorMsg <> "" Then
        '    '    errorMsg = "" 'just reset so it's clean before moving on
        '    'End If

        '    QQxml.DeleteNote(4916491, errorMsg, False) 'false to tell logic not to update database directly; failed... validationItem: {You have not been given authority to delete notes., Error}
        '    If errorMsg <> "" Then
        '        errorMsg = "" 'just reset so it's clean before moving on
        '    End If

        '    QQxml.FindPolicyNotes(CInt(policyId), CInt(imgNum), errorMsg) 'this is working; now need to create function to return notes or sub to populate byref
        '    If errorMsg <> "" Then

        '    End If
        'End If

        '8/10/2015 - Prod support request to copy quotes from 2776, 2777, 2783, 2900, and 2808 to 6312-3282 (# quotes from the last year)
        'CopyQuotesFromAgencyToAgency()

        '8/14/2015 - Patch test for IRPM; object didn't appear to have RiskCharacteristicTypeId set on ScheduledRatings
        'RISKCHARACTERISTICTYPEID was misspelled in parsing method (RISKCHARATERISTICTYPEID); will also need to be corrected in DiamondQuickQuote library
        'TestLoadQuote("24843", QuickQuoteXML.QuickQuoteSaveType.Quote)

        '8/28/2015 - need to re-test e2Value logic; everything's fine... forgot to send qq to existing calls to ValuationPropertyTypeDefaultByInfo
        'TestLoadQuote("24955")

        '9/10/2015 - need to test new compression logic... not working locally for other devs... now fixed - had circular reference (QuickQuoteHelperClass to QuickQuoteCompressionHelperClass and vice versa)
        'TestLoadQuote("")

        '9/23/2015 - need to test Farm_F_and_G_DeductibleLimitId property for FAR to see if there's still an issue w/ Diamond or if it's on our side
        'Farm_save_test("25205") 'Patch; quoteId=25205; quoteNumber=QFAR021576; worked fine on initial rate (went as as 22-$500 and came back the same)
        'ReSaveOrReRate("25205") 'will now try re-rating w/ existing info to see if it stays; successful
        'ReSaveOrReRate("25205", QuickQuoteXML.QuickQuoteValidationType.Rate, QuickQuoteXML.QuickQuoteSaveType.AppGap) 'will now try re-rating app gap to see if that makes a difference; successful

        '9/28/2015 - need to copy prod quote to troubleshoot error; newQuoteId = 63548 (under 3000 code)... copy rated fine... will now try copying under same agency code (new user = Test3176)... problem was due to user not completing Diamond Upgrade process
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'Dim archiveErrorMsg As String = ""
        'QQxml.CopyQuoteToAgency("63484", "6000-3000", "441", newQuoteId, True, False, copyErrorMsg, archiveErrorMsg)
        'If IsNumeric(newQuoteId) = True Then

        'End If

        '10/20/2015 - create test DFR quote(s) on Patch
        'DFR_save_test("25506") 'quoteId=25506; quoteNumber=QDFR020527
        'ReSaveOrReRate("25506")
        'creating new on 10/21/2015 since last one has been updated by others
        'DFR_save_test("25518") 'quoteId=25518; quoteNumber=QDFR020530

        '10/21/2015 - debug PPA error on Patch (quoteId = 25474; quoteNumber = QPPA247765)
        'System.Exception: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ServiceModel.FaultException`1[System.ServiceModel.ExceptionDetail]: Violation of PRIMARY KEY constraint 'PK_ClientPhoneLink'. Cannot insert duplicate key in object 'dbo.ClientPhoneLink'. The duplicate key value is (634490, 1, 1). The statement has been terminated. -- CommandText= UPDATE clientphonelink SET [client_id]=@client_id,[nameaddresssource_id]=@nameaddresssource_id,[phonetype_id]=@phonetype_id WHERE [phone_id]=@phone_id Server stack trace: at System.ServiceModel.Channels.ServiceChannel.ThrowIfFaultUnderstood(Message reply, MessageFault fault, String action, MessageVersion version, FaultConverter faultConverter) at System.ServiceModel.Channels.ServiceChannel.HandleReply(ProxyOperationRuntime operation, ProxyRpc& rpc) at System.ServiceModel.Channels.ServiceChannel.Call(String action, Boolean oneway, ProxyOperationRuntime operation, Object[] ins, Object[] outs, TimeSpan timeout) at System.ServiceModel.Channels.ServiceChannelProxy.Invoke(IMessage message) Exception rethrown at [0]: at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg) at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type) at Diamond.Common.Services.Interfaces.IPolicyService.SaveRate(Request request) --- End of inner exception stack trace --- at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments) at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) at Diamond.Common.Services.Proxies.ProxyBase.Execute[T,Y](T request, String methodName) in C:\TFS2010\Base\Code\Versions\527\527.900\Diamond\Common\Services\Proxies\_ProxyBase.vb:line 100 --- End of inner exception stack trace --- at Diamond.Common.Services.Proxies.ProxyBase.Execute[T,Y](T request, String methodName) in C:\TFS2010\Base\Code\Versions\527\527.900\Diamond\Common\Services\Proxies\_ProxyBase.vb:line 116 at Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy.SaveRate(Request request) in C:\TFS2010\Base\Code\Versions\527\527.900\Diamond\Common\Services\Proxies\PolicyServiceProxy.vb:line 4414 at IFM.DiamondServices.Services.Diamond.Policy.Policy._Closure$__881._Lambda$__881(RequestBase a0) at IFM.DiamondServices.Services.Common.Common.RunDiamondService(pMethod& m, RequestBase req, Exception& e, DiamondValidation& dv)
        'UPDATE clientphonelink SET [client_id]=@client_id,[nameaddresssource_id]=@nameaddresssource_id,[phonetype_id]=@phonetype_id WHERE [phone_id]=@phone_id}... phoneId=2842604; clientIds=634482,634485,634490; logic is trying to update them all to the same, which isn't allowed.
        'ReSaveOrReRate("25474")

        'added 11/20/2015 for prod support
        'ProdAcreageFix()

        'static data test 12/7/2015
        ''Dim E_Personal As String = qqHelper.GetStaticDataTextForValue(quickQuote.CommonMethods.QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PersonalLiabilityLimitId, Me.Quote.PersonalLiabilityLimitId)
        ''Dim F_Medical As String = qqHelper.GetStaticDataTextForValue(quickQuote.CommonMethods.QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.MedicalPaymentsLimitId, Me.Quote.MedicalPaymentsLimitid)
        'Dim E_Personal As String = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PersonalLiabilityLimitId, "0")
        'If E_Personal <> "" Then

        'End If
        ''Dim F_Medical As String = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.MedicalPaymentsLimitId, "0")
        'Dim F_Medical As String = qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.MedicalPaymentsLimitId, "0", QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal)
        'If F_Medical <> "" Then

        'End If

        'Patch test 12/21/2015 for Farm IncomeLosses... Todd said the 1st item comes back fine, but subsequent items aren't parsed correctly
        'TestLoadQuote("25927")

        'prod support 12/29/2015
        'CopyQuotesFromAgencyToAgency()

        ''testing new 'load from Diamond' functionality 1/6/2016
        'Dim successfullyLoadedIntoVR As Boolean = False
        'Dim quoteNum As String = "QDFR020651" 'existing quoteId = 26035; original premium = $2,666.00... everything worked fine on the 1st test... will try some ones that originated outside of VR tomorrow (i.e. portal, UI, comparative rater)
        'Dim newOrExistingQuoteId As Integer = 0
        'Dim loadIntoVrErrorMsg As String = ""
        'successfullyLoadedIntoVR = QQxml.SuccessfullyLoadedDiamondQuoteIntoVelociRater(quoteNum, newOrExistingQuoteId, loadIntoVrErrorMsg)
        'If successfullyLoadedIntoVR = True AndAlso String.IsNullOrEmpty(loadIntoVrErrorMsg) = True AndAlso newOrExistingQuoteId > 0 Then
        '    'success; should be able to just check for success True and quoteId > 0
        'Else
        '    'see error message
        'End If

        '1/7/2016 - testing 'copy quote' functionality to see why attachments aren't coming over... spelling of stored procedure was different in code than in db... will rename in db
        'Dim newQuoteId As String = ""
        'Dim copyError As String = ""
        'QQxml.CopyQuote("26013", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 24647
        'If newQuoteId <> "" AndAlso copyError = "" Then

        'End If

        '1/12/2016 - testing payments for IVR (need to get scheduled tasks to use IVR_User instead of the user running it - sqladmin)
        'Diamond just needs UsersId, LoginName, and LoginDomain in order to post as a specific user
        'TestCreditCardPaymentForIVR()

        '1/26/2016 - testing encryption/decryption stuff... to see if we can decrypt passwords, etc.
        'TestPasswordDecryption()

        '1/27/2016 - testing VR Pers ClientPhoneLink error on Patch
        'ReSaveOrReRate("26147")

        '1/27/2016 - testing VR Pers re-rate on Projects w/ 531
        'ReSaveOrReRate("75954")

        '2/17/2016 - testing VR DFR re-rate on Projects w/ 531 (problem getting rated xml); everything's okay now... server was low on memory, which was causing db queries to timeout
        'ReSaveOrReRate("75990"
        'same thing 2/19/2016
        'ReSaveOrReRate("75989")

        'testing password stuff 2/18/2016
        'Dim isValid As Boolean = False
        'isValid = IsValidDiamondLogin_CheckHash("domin", "Test123")
        'If isValid = True Then

        'End If

        'prod support 3/3/2016
        'CopyQuotesFromAgencyToAgency()

        'prod support 3/10/2016
        'UpdateQuoteClients()

        'patch troubleshooting 3/30/2016 for bug #6557
        'TestLoadQuote("26544") 'QCGL019167
        'TestLoadRatedQuote("26544")

        'prod support 5/3/2016
        'CopyQuotesFromAgencyToAgency()

        'prod support 5/13/2016
        'TestLoadQuote("97047")
        'FarmProgramTypeFix()

        '531 testing 6/7/2016 (SqlDateTime overflow error when user enters prior carrier - looks like IS added new date fields that are likely not being defaulted; PK_ClientNameLink primary key violation when user tries to re-rate quote when client was created on initial rate)
        '7/12/2016 note on PriorCarrier: this was an issue in the CompRater interface; IS has since fixed

        '7/12/2016 - need to test HOM and DFR as they appear to be failing on Rate in 531
        'HOM_save_test_new_simple("90486") 'quoteId=90486; quoteNumber=; initial rate failed... tried latest Diamond assemblies and still received error, so it's likely the IFMDiamondServices assembly that needs to be updated... that didn't work either, so InsureSoft may have broken something w/ HOM and DFR... HOM worked fine from portal, so now trying CompRater services to see if they work... nope
        'DFR_save_test("") 'quoteId=; quoteNumber=
        'now trying to load quote into VR that was successfully rated from portal
        'Dim successfullyLoadedIntoVR As Boolean = False
        'Dim quoteNum As String = "QHOM245113" 'quote started in portal; newQuoteId=90487
        'Dim newOrExistingQuoteId As Integer = 0
        'Dim loadIntoVrErrorMsg As String = ""
        'successfullyLoadedIntoVR = QQxml.SuccessfullyLoadedDiamondQuoteIntoVelociRater(quoteNum, newOrExistingQuoteId, loadIntoVrErrorMsg)
        'If successfullyLoadedIntoVR = True AndAlso String.IsNullOrEmpty(loadIntoVrErrorMsg) = True AndAlso newOrExistingQuoteId > 0 Then
        '    'success; should be able to just check for success True and quoteId > 0
        'Else
        '    'see error message
        'End If
        'once in VR, had to enter Style (for e2Value); then rated successfully; will next pull xml to see if I can find what InsureSoft is setting that we're not setting from VR
        '7/13/2016: will now try removing Operators at Scott Reed's suggestion... he's looking into why that's an issue; 7/29/2016 note: Operators wasn't the issue
        'test quote: quoteId 90490
        'RemoveOperatorsAndReSaveOrReRate("90490") 'for CompRater Services; still failed after removing operators
        'RemoveOperatorsAndReSaveOrReRate("90491") 'for Dia Services; still failed after removing operators
        'now will retry variation of HOM_save_test_new_simple method w/ logic to remove operators at the end
        'HOM_save_test_new_simple_without_Operators("90492") 'quoteId=90492; quoteNumber=; failed w/ CompRater services
        'HOM_save_test_new_simple_without_Operators("90493") 'quoteId=90493; quoteNumber=; failed w/ Dia services
        '7/14/2016 - new tests after receiving Patch from InsureSoft (Diamond.c0044.Common.VDet.PH.v01.dll)
        'HOM_save_test_new_simple_without_Operators("90499") 'quoteId=90499; quoteNumber=QHOM245125; CompRater services created quote in Diamond, but received validationError: "You are not set up to order 3rd Party Reports.  Use the Diamond System Settings Editor to enable the appropriate system"; may be okay
        'HOM_save_test_new_simple("90500") 'quoteId=90500; quoteNumber=QHOM245127; Dia services created quote in Diamond, but received validationError: "Tier is required to rate.  Please contact your underwriter for assistance."; may be okay
        'will now try DFR since that appears to still be failing from VR; 7/29/2016 note: okay after receiving separate patch for DFR
        'DFR_save_test("90502") 'quoteId=90502; quoteNumber=; CompRater services; same error as before; will require separate patch than the one sent for HOM
        'DFR_save_test("") 'quoteId=; quoteNumber=; Dia services

        '8/5/2016 - troubleshooting compression logic... turned config key on in QA, copied quote, and then caught error when trying to load quote on page
        'TestLoadQuote("65039")
        '8/5/2016 update - compression logic okay now... after cleaning up code to move compression/decompression logic to functions, the decompression logic was just updated to call the corresponding function like a sub instead of setting the byte array to use the function result

        'testing Patch rating 8/17/2016; everything was fine... dev inadvertently moved 527 QQ version to Patch site, and local site wasn't working since username/password didn't match userId (per config keys used for QuickQuote user TestVariables)
        'ReSaveOrReRate("113838")

        '8/22/2016 - test prod CLUE retrieval logic... may not be maintaining matches on subsequent retrieval (maybe because DLN isn't checked); 8/23/2016 note: problem due to ProcessViewImported catching unhandled exception... IS found issue and will send Patch to correct
        'Test_CLUE_Retrieval()
        '8/23/2016 note: ProcessViewImported is only called from LoadExistingChoicepointReport and LoadExistingChoicepointReports methods; LoadExistingChoicepointReport is only called from LoadExistingPrefillReportForQuote; LoadExistingChoicepointReports is called from 11 methods (DiamondService_SuccessfullyOrderedCreditReport_Old {not used}, DiamondService_SuccessfullyOrderedCreditReport, LoadExistingCreditReportsForQuote_Old {not used}, LoadExistingCreditReportsForQuote {twice; once for PPA and once for HOM}, LoadExistingMvrReportsForQuote, LoadExistingClueAutoReportForQuote, LoadExistingCluePropertyReportForQuote, DiamondService_SuccessfullyOrderedMVR, DiamondService_SuccessfullyOrderedCLUE_Auto, DiamondService_SuccessfullyOrderedCLUE_Property); most of the Load methods that need to be updated call LoadThirdPartyDataForQuote which then calls DiamondService_SuccessfullyOrdered method which then calls LoadExistingChoicepointReports

        ''9/13/2016 - Verisk Protection Class testing
        'Dim policyId As Integer = 982549 'HOM2100456 on Patch
        'Dim policyImageNum As Integer = 0
        ''Dim isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing
        ''isos = QQxml.GetISOTransmissions(policyId)
        ''If isos IsNot Nothing AndAlso isos.Count > 0 Then
        ''    For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
        ''        If iso IsNot Nothing Then
        ''            Dim incomingDataRaw As String = ""
        ''            Dim incomingDataXML As String = ""
        ''            With iso
        ''                'incomingDataRaw = .ExportXML 'this catches exception
        ''                'incomingDataXML = .ExportXML
        ''                incomingDataRaw = .ImportXML 'this works
        ''                'incomingDataXML = .ImportXML
        ''            End With
        ''            'Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = QQxml.ProcessPPC(policyId, policyImageNum, incomingDataRaw, incomingDataXML)
        ''            'removed incomingDataXML param from method
        ''            Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = QQxml.ProcessPPC(policyId, policyImageNum, incomingDataRaw)
        ''            If rd IsNot Nothing Then
        ''                With rd

        ''                End With
        ''            End If
        ''        End If
        ''    Next
        ''End If
        ''more testing 9/16/2016
        ''Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        ''Dim locNum As Integer = 0
        ''Dim isoTransmissionId As Integer = 0
        ''rd = QQxml.GetPPCReportData(policyId, policyImageNum, locNum, isoTransmissionId)
        '''Dim qqo As New QuickQuoteObject
        '''With qqo
        '''    .QuoteNumber = "HOM2100456"
        '''    .PolicyId = policyId.ToString
        '''    .PolicyImageNum = policyImageNum.ToString
        '''End With
        '''Dim results As String = ""
        '''Dim errorMsg As String = ""
        '''rd = QQxml.GetPPCReportDataForQuote(qqo, locNum, results, errorMsg)
        ''If rd IsNot Nothing Then

        ''End If

        ''now testing Save/Rate
        'Dim quoteId As String = "117203" 'QHOM259513 on Patch (policyId 983857)
        'Dim effDate As String = "10/1/2016"
        ''Dim changeLocationAddress As Boolean = True
        'Dim changeLocationAddressType As LocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddressWithExtendedZip
        ''HOM_save_test_minimum(quoteId, effDate, changeLocationAddress, redirectToQuoteSummaryOnSuccessfulRate:=False)
        'HOM_save_test_minimum(quoteId, effDate, changeLocationAddressType, redirectToQuoteSummaryOnSuccessfulRate:=False)
        ''had to update for bogus foundationType validation
        ''next had to change effDate
        ''next had to update for feet to hydrant
        ''worked after that and report was automatically ordered
        ''received this on re-rate when changing protClass: Refer to Management for approval of Protection Class Override
        ''after reverting protClass back, report has not been re-ordered on re-rates to this point (correct since address hasn't changed)
        ''correctly re-ordered whenever address changes unless it changes back to one of the previous addresses... one change resulted in Error status on re-order (thirdPartyStatusId 20... 19 = Completed) and empty report
        ''see code in GetPPCReportData to handle for ISOTransmission statuses
        ''actual ISO info returned on Exact match from spreadsheet (see C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx); new report ordered on initial address change but then re-ordered when using the same test address (maybe because it came back w/ extended zip, which wasn't updated on our end: confirmed... not re-ordered when absolutely nothing changes)
        ''as for ISO re-order logic, it looks like Diamond will only re-order report if there isn't an existing ISOTransmission where the ordered_address matches the current address, which means if there's already an existing report for the address change, the location info fields aren't currently being updated, which could result in the wrong protClass... not a likely scenario but definitely easy to replicate by switching back and forth between the same 2 addresses
        ''need to update rate logic to update QuickQuote.Location fields from RatedQuickQuote.Location when needed... update prot class and address fields on QuickQuote... maybe whenever system generated protClass is set or equals regular protClass on ratedQuote.Location or something similar
        'Dim qqo As QuickQuoteObject = Nothing
        'qqo = TestReturnQuote(quoteId)
        ''If qqo IsNot Nothing Then

        ''End If
        'Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        'Dim locNum As Integer = 0
        'Dim results As String = ""
        'Dim errorMsg As String = ""
        'rd = QQxml.GetPPCReportDataForQuote(qqo, locNum, results, errorMsg)
        'If rd IsNot Nothing Then

        'End If
        '9/21/2016 - Verisk test logic moved to TestVeriskProtectionClassStuff
        'TestVeriskProtectionClassStuff()

        '9/21/2016 - test Martin's quote w/ MilesToFireStation (Diamond error converting 8.00 to int)
        'ReSaveOrReRate("117239")

        '9/22/2016 test on Patch
        'ReSaveOrReRate("117282") 'QHOM259550
        'ReSaveOrReRate("117285") 'QHOM259551

        '9/25/2016 - more Verisk testing on Patch; also testing CompRater 6-month term issue (working successfully)
        'TestVeriskProtectionClassStuff() 'confirmed that Diamond is updating Loc address to match client/PH address on initial Save (can then be overwritten)
        'ReSaveOrReRate("117307") 'need to re-rate to see if QQ code is flawed and will result in prem changing from $583 to $718... confirmed that everything is okay on normal re-rate w/o changing anything... must have issue w/ HOM_save_test_minimum (may be due to address changing)
        'HOM_save_test_minimum("117307") 'need to re-rate to see if HOM_save_test_minimum code is flawed and will result in prem changing from $583 to $718... may have something to do w/ address changing when testing from TestVeriskProtectionClassStuff (confirmed that prem changing was due to address changing; didn't even make a difference that effDate changed from 10/1/16 to currDate-9/25/16)

        'prod support 9/30/2016
        'CopyQuotesFromAgencyToAgency()

        'more protClass testing 9/30/2016
        'TestProtClassFireHydrantAndDepartmentFields()

        'more protClass testing 10/9/2016
        'Dim qqo As New QuickQuoteObject
        'qqo.LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        'qqo.EffectiveDate = Date.Today.ToShortDateString
        'Dim couldOrderReport As Boolean = QuickQuoteHelperClass.CanVeriskProtectionClassReportBeOrderedForQuote(qqo) 'checks quote lob, effDate, and Diamond system setting; works correctly
        'If couldOrderReport = True Then

        'End If

        '10/10/2016 - protClass testing for DFR... Verisk call may not happen on initial save if Rate fails
        'Dim needToReloadQuote As Boolean = False
        'Dim qqo As QuickQuoteObject = TestReturnQuote("117553") 'QDFR022751; use TestNxTech2 w/ 6000-3000 code login
        'If qqo IsNot Nothing Then
        '    If qqo.Locations IsNot Nothing AndAlso qqo.Locations(0).Address IsNot Nothing Then
        '        With qqo.Locations(0).Address
        '            '.HouseNum = "107"
        '            '.StreetName = "S Spring St"
        '            '.City = "Princeton"
        '            '.StateId = "16"
        '            '.Zip = "47670-2049"

        '            .HouseNum = "2627"
        '            .StreetName = "E Northwood Ave"
        '            .City = "Terre Haute"
        '            .StateId = "16"
        '            .Zip = "47805-2615"
        '        End With
        '    End If
        '    QQxml.CheckQuoteForProtectionClassInfoAndOrderVeriskReportIfNeeded(qqo, needToReloadQuote)
        '    If needToReloadQuote = True Then

        '    End If
        'End If

        'more PPC testing 10/12/2016
        'TestProtectionClassForDFR()
        'updated method 10/14/2016 to work for DFR or HOM
        'TestProtectionClassForDFRorHOM()

        '10/12/2016 - testing ISO Transmission logic
        'Dim isoTs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = QQxml.GetISOTransmissions(983857)
        'If isoTs IsNot Nothing AndAlso isoTs.Count > 0 Then
        '    'confirmed that ISO Transmission only has ordered_address and not returned_address
        'End If

        '10/18/2016 - testing PPC Report Data that shows multiple results (possibly split class); 10/19/2016 note: logic moved to new TestPPCReportDataWithZipRecords method
        'TestPPCReportDataWithZipRecords()

        '10/18/2016 - Mobile Home PPC Testing (Diamond is now requiring length/width)
        'Dim qqoMH As QuickQuoteObject = TestReturnQuote("117656")
        'If qqoMH IsNot Nothing Then
        '    Dim hasChange As Boolean = False
        '    With qqoMH
        '        If qqoMH.QuoteNumber = "QHOM259804" Then
        '            If .Locations IsNot Nothing AndAlso .Locations.Count > 0 Then
        '                With .Locations(0)

        '                    If qqHelper.IsPositiveDecimalString(.MobileHomeLength) = False Then
        '                        .MobileHomeLength = "20"
        '                        hasChange = True
        '                    End If
        '                    If qqHelper.IsPositiveDecimalString(.MobileHomeWidth) = False Then
        '                        .MobileHomeWidth = "12"
        '                        hasChange = True
        '                    End If
        '                End With
        '            End If
        '        End If
        '    End With
        '    If hasChange = True AndAlso qqHelper.IsPositiveIntegerString(qqoMH.Database_QuoteId) = True Then
        '        Dim saveErrorMsg As String = ""
        '        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqoMH, qqoMH.Database_QuoteId, saveErrorMsg)
        '        If saveErrorMsg = "" Then
        '            'save succeeded

        '        Else
        '            'save failed

        '        End If
        '    End If
        'End If

        'more ProtClass testing 10/20/2016-10/21/2016... for updating PH address when it matches loc address and also for wiping out ProtClassSysGenId when not valid Verisk version
        'TestProtectionClassForDFRorHOM()
        '10/21/2016 - also testing other ways to get protClassSysGenId when Diamond can't repull report data because of Rate validation
        'TestPPCReportDataWithZipRecords()
        '10/22/2016 - testing new functionality to get report data for specific quote address
        'TestPPCReportDataForSpecificQuoteAddress()
        '10/23/2016 - testing secondary method w/ different test addresses so I don't affect original test data that's currently in TestProtectionClassForDFRorHOM
        'TestProtectionClassForDFRorHOM2()
        '10/24/2016 - testing PPC Report for different ISO Transmissions related to latest test
        'TestPPCReportDataForIsoTransmissions()

        '10/25/2016 - testing 10/25/2016 to correct issue w/ lockbox posting 10/24/2016 (need to reverse duplicate lockbox payments)
        'ReversePayments()
        'ReversePaymentsNew()
        'ReversePaymentsForDatabaseQuery()

        '10/26/2016 - testing Endorsement stuff from Patch
        '11/2/2016 - moved Endorsements testing logic to new Sub (TestAutoEndorsementStuff)
        'TestAutoEndorsementStuff()

        '11/10/2016 - testing to make sure changes made for Endorsements don't affect New Business Quoting
        'Dim strQuoteId As String = "135731"
        'PPA_save_test_new(strQuoteId)
        'PPA_save_test_new_simple(strQuoteId)
        'ReSaveOrReRate(strQuoteId) 'try to match $1,674.00 for 135730... confirmed
        'ReSaveOrReRate(strQuoteId) '135731; $1,519.00
        'Dim success As Boolean = False
        'Dim quoteId As Integer = 0
        'success = QQxml.SuccessfullyLoadedDiamondQuoteIntoVelociRater("QPPA351069", quoteId) '135731
        'If success = True Then

        'End If

        '3/8/2017 testing for 531.009 (update for GaragingAddress and CLUE Auto reports)
        'Dim strQuoteId As String = "138952" 'Patch 'okay now after last update to not consider 0 a valid territoryCode
        'Dim strQuoteId As String = "158295" 'NewBuildTest; this one has bad clientId... somehow keeps getting persisted w/ copied quotes even though last rating had new clientId that should be persisted... maybe something in copy method of just GetQuoteForSaveType that's causing logic to not use Rated info
        'ReSaveOrReRate(strQuoteId)

        '3/9/2017 - testing copy functionality (per NewBuildTest issue w/ bad clientId getting persisted)... bad functionality in GetQuoteForSaveType that's re-using initialClientId when it doesn't match
        'Dim sourceQuoteId As String = "158290"
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) AndAlso String.IsNullOrWhiteSpace(copyErrorMsg) = True Then

        'End If

        '3/9/2017 - now need to test and fix GetQuoteForSaveType to not re-use outdated variables (like initialClientId when it has changed on rate or something); now corrected
        'Dim qId As String = "158290"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.QuoteForCopy, qqo, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        'End If

        '3/22/2017 - testing new BOP stuff from QQ library (Patch quotes)
        'Dim qId As String = "139053"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
        '    If qqo.AdditionalInsuredsCheckboxBOP Is Nothing OrElse qqo.AdditionalInsuredsCheckboxBOP.Count = 0 Then
        '        'If qqo.AdditionalInsuredsCheckboxBOP Is Nothing Then
        '        '    qqo.AdditionalInsuredsCheckboxBOP = New List(Of QuickQuoteAdditionalInsured)
        '        'End If
        '        'Dim ai As New QuickQuoteAdditionalInsured
        '        'With ai
        '        '    ai.AdditionalInsuredType = QuickQuoteAdditionalInsured.QuickQuoteAdditionalInsuredType.TownhouseAssociations
        '        '    ai.Description = "Test Additional Insured Checkbox BOP"
        '        'End With
        '        'qqo.AdditionalInsuredsCheckboxBOP.Add(ai)
        '        'qqo.HasAdditionalInsuredsCheckboxBOP = True 'this should be used w/ AdditionalInsuredsCheckboxBOP
        '        ''qqo.AdditionalInsuredsCount = 1 'this should be used for old BOP stuff

        '        'Dim saveErrorMsg As String = ""
        '        'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '        'If saveErrorMsg = "" Then
        '        '    'okay

        '        'Else
        '        '    'error
        '        'End If
        '    End If

        'End If

        '3/31/2017 - new policy lookup testing for Diamond Proposals (in Patch)
        'Dim policyResults As List(Of QuickQuotePolicyLookupInfo) = Nothing
        'Dim caughtDatabaseError As Boolean = False
        'Dim policyLookup As New QuickQuotePolicyLookupInfo
        'With policyLookup
        '    .AgencyId = 17
        '    .Policyholder1NameLookupField = QuickQuotePolicyLookupInfo.NameLookupField.DisplayNameOrSortName
        '    .Policyholder1NameLookupMatchType = QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchBeginning
        '    .Policyholder1NameToFind = "Smith"
        'End With
        'policyResults = QuickQuoteHelperClass.PolicyResultsForDiamondProposalLookupInfo(policyLookup, caughtDatabaseError:=caughtDatabaseError)
        'If policyResults IsNot Nothing AndAlso policyResults.Count > 0 Then

        'End If

        '4/4/2017 - test BOP rate for Chad (Patch)
        'ReSaveOrReRate("136703")

        '4/7/2017 - testing policyId/policyImageNum pair logic
        'Dim lst As New List(Of QuickQuoteGenericObjectWithTwoIntegerProperties)
        'Dim obj1 As New QuickQuoteGenericObjectWithTwoIntegerProperties
        'With obj1
        '    .Property1 = 222
        '    .Property2 = 3
        'End With
        'lst.Add(obj1)
        'Dim obj2 As New QuickQuoteGenericObjectWithTwoIntegerProperties
        'With obj2
        '    .Property1 = 55
        '    .Property2 = 33
        'End With
        'lst.Add(obj2)
        'Dim objDelimiter As String = "||"
        'Dim pairDelimiter As String = "**"
        'Dim integerPairRequirement As QuickQuoteHelperClass.IntegerPairType = QuickQuoteHelperClass.IntegerPairType.BothPositive
        'Dim intPairString As String = QuickQuoteHelperClass.StringForListOfGenericObjectWith2IntegerProps(lst, objectdelimiter:=objDelimiter, propDelimiter:=pairDelimiter, integerPairRequirement:=integerPairRequirement)
        'intPairString = "||||3||232**||**2343||2111**555||xsssd**sdfsd||ssdfs"
        'If String.IsNullOrEmpty(intPairString) = False Then
        '    Dim newLst As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = QuickQuoteHelperClass.ListOfGenericObjectWith2IntegerPropsFromString(intPairString, objectdelimiter:=objDelimiter, propDelimiter:=pairDelimiter, integerPairRequirement:=integerPairRequirement)
        '    If newLst IsNot Nothing Then

        '    End If
        'End If

        '4/12/2017 - testing DiamondProposal retrieval (Patch)
        'Dim loadErrorMessage As String = ""
        'Dim diamondProposalId As Integer = 9
        'Dim qqDiaProposal As QuickQuote.CommonObjects.QuickQuoteDiamondProposal = qqHelper.DiamondProposalForLookup(diamondProposalId:=diamondProposalId, errorMessage:=loadErrorMessage)
        'If qqDiaProposal IsNot Nothing Then

        'End If

        '5/1/2017 - testing Farm Cov F duplication issue w/ Matt (Diamond is likely still returning detailstatuscode_id 2 in list)
        'ReSaveOrReRate(139390)

        '5/3/2017 - testing Proposal Comments markup
        'Dim comments As New List(Of QuickQuoteComment)
        'Dim c1 As New QuickQuoteComment
        'c1.CommentText = "comment 1"
        'c1.LobId = 1
        'comments.Add(c1)
        'Dim markup As String = ""
        'Dim lineCount As Integer = 0
        'markup = qqHelper.HtmlForQuickQuoteProposalCommentsForLobType(comments, QuickQuoteObject.QuickQuoteLobType.AutoPersonal, lineCount:=lineCount)
        'If lineCount > 0 Then

        'End If

        '5/9/2017 - gather test data for Diamond Proposal stuff (Patch); use config keys for staff
        'Dim policyResults As List(Of QuickQuotePolicyLookupInfo) = Nothing
        'Dim caughtDatabaseError As Boolean = False
        'Dim policyLookup As New QuickQuotePolicyLookupInfo
        'With policyLookup
        '    '.AgencyId = 17
        '    '.Policyholder1NameLookupField = QuickQuotePolicyLookupInfo.NameLookupField.DisplayNameOrSortName
        '    '.Policyholder1NameLookupMatchType = QuickQuotePolicyLookupInfo.NameLookupMatchType.MatchBeginning
        '    '.Policyholder1NameToFind = "Smith"
        '    .AgencyIds = QuickQuoteHelperClass.DiamondAgencyIds
        '    .ForcePolicyholder1NameReturn = True
        'End With
        'policyResults = QuickQuoteHelperClass.PolicyResultsForDiamondProposalLookupInfo(policyLookup, caughtDatabaseError:=caughtDatabaseError)
        'If policyResults IsNot Nothing AndAlso policyResults.Count > 0 Then

        'End If

        '5/10/2017 - test loading ReadOnly QQO for Diamond Proposal stuff
        'Dim errorMsg As String = ""
        'Dim qqo As QuickQuoteObject = Nothing
        ''qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=268785, policyImageNum:=1, errorMessage:=errorMsg, validateUserAccess:=False)
        ''more GAR testing 5/15/2017
        'qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=1143370, policyImageNum:=1, errorMessage:=errorMsg, validateUserAccess:=False)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(errorMsg) = True Then

        'End If

        '5/23/2017 - AdditionalInterestManager testing on Patch
        'Dim qId As String = "139513"
        'Dim listId As String = "223250"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        ''QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, retrievalErrMsg)
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'Dim foundQuote As Boolean = False
        'Dim savedQuote As Boolean = False
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
        '    foundQuote = True
        '    If qqo.AdditionalInterests IsNot Nothing AndAlso qqo.AdditionalInterests.Count > 0 Then
        '        Dim ai As QuickQuoteAdditionalInterest = QuickQuoteHelperClass.QuickQuoteAdditionalInterestForListId(qqo.AdditionalInterests, listId)
        '        If ai IsNot Nothing Then
        '            Dim hasListLink As Boolean = False
        '            If qqo.AdditionalInterestListLinks IsNot Nothing AndAlso qqo.AdditionalInterestListLinks.Count > 0 Then
        '                For Each l As QuickQuoteAdditionalInterestListLink In qqo.AdditionalInterestListLinks
        '                    If l.AdditionalInterestListId = listId Then
        '                        hasListLink = True
        '                        Exit For
        '                    End If
        '                Next
        '            End If

        '            'make sure quote has location 1 w/ building
        '            If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 AndAlso qqo.Locations(0).Buildings IsNot Nothing AndAlso qqo.Locations(0).Buildings.Count > 0 Then
        '                Dim hasBuildingAI As Boolean = False
        '                Dim buildingAI As QuickQuoteAdditionalInterest = QuickQuoteHelperClass.QuickQuoteAdditionalInterestForListId(qqo.Locations(0).Buildings(0).AdditionalInterests, listId)
        '                If buildingAI IsNot Nothing Then
        '                    hasBuildingAI = True
        '                End If

        '                If hasListLink = False OrElse hasBuildingAI = False Then
        '                    If hasListLink = False Then
        '                        If qqo.AdditionalInterestListLinks Is Nothing Then
        '                            qqo.AdditionalInterestListLinks = New List(Of QuickQuoteAdditionalInterestListLink)
        '                        End If
        '                        Dim l As New QuickQuoteAdditionalInterestListLink
        '                        l.AdditionalInterestListId = listId
        '                        qqo.AdditionalInterestListLinks.Add(l)
        '                    End If

        '                    If hasBuildingAI = False Then
        '                        If qqo.Locations(0).Buildings(0).AdditionalInterests Is Nothing Then
        '                            qqo.Locations(0).Buildings(0).AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
        '                        End If
        '                        Dim bAI As New QuickQuoteAdditionalInterest
        '                        bAI.ListId = listId
        '                        qqo.Locations(0).Buildings(0).AdditionalInterests.Add(bAI)
        '                    End If


        '                    Dim saveErrorMsg As String = ""
        '                    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '                    If saveErrorMsg = "" Then
        '                        'okay
        '                        savedQuote = True
        '                    Else
        '                        'error
        '                    End If
        '                End If
        '            End If

        '        End If
        '    End If

        'End If
        'If foundQuote = True AndAlso savedQuote = True Then
        '    ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        'End If
        'updated 5/24/2017 to use new test method
        'TestAdditionalInterestManager("139513", "223250", updateAdditionalInterestLinkWhenFound:=True)
        'testing 5/30/2017 to see why AdditionalInterestListLinks didn't come back in Rated quote... because they're present when getting policy xml; 5/31/2017 note: AdditionalInterestListLinks didn't come back w/ code below either... it's actually in image but InsureSoft's xml for image method doesn't return it... might need to update Diamond.Common.Objects reference or something
        'Dim errorMsg As String = ""
        'Dim qqo As QuickQuoteObject = Nothing
        'qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=1143657, policyImageNum:=1, errorMessage:=errorMsg, validateUserAccess:=False)
        'If qqo IsNot Nothing Then

        'End If

        '5/29/2017 - testing new Contractors Equipment Scheduled Items logic (for retaining values between quote-to-app-and-back-to-quote)
        'note: should probably update qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit method to calc based on integer or decimal... currently set up for decimal even though ce.Limit property formats as number w/ 0 decimal places (like int)
        'Dim ceTotalLimit As String = "10,000"
        'Dim ceList As List(Of QuickQuoteContractorsEquipmentScheduledItem) = Nothing

        'If ceList Is Nothing Then
        '    ceList = New List(Of QuickQuoteContractorsEquipmentScheduledItem)
        'End If
        'Dim ce1 As New QuickQuoteContractorsEquipmentScheduledItem
        'ce1.Description = "CE 1"
        'ce1.Limit = "1000"
        'ceList.Add(ce1)

        'Dim ce2 As New QuickQuoteContractorsEquipmentScheduledItem
        'ce2.Description = "CE 2"
        'ce2.Limit = "2000"
        'ceList.Add(ce2)

        ''ceTotalLimit = "3000"
        'ceTotalLimit = "5500.13" 'note: since ce.Limit property currently only allows whole #s (numeric formatting w/ zero decimal places), the cents are being taken off

        'Dim ceListBackup As List(Of QuickQuoteContractorsEquipmentScheduledItem) = qqHelper.CloneObject(ceList)

        'qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ceTotalLimit, ceList, ceListBackup, maintainOneItemFromOriginalListWhenResetting:=True, maintainFirstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=True, applicableItemToApplyDifferenceTo:=QuickQuoteHelperClass.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=QuickQuoteHelperClass.FirstOrLast.First)
        'If ceList IsNot Nothing OrElse ceListBackup IsNot Nothing Then

        'End If

        'ceTotalLimit = "25,000"
        'qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ceTotalLimit, ceList, ceListBackup, maintainOneItemFromOriginalListWhenResetting:=True, maintainFirstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=True, applicableItemToApplyDifferenceTo:=QuickQuoteHelperClass.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=QuickQuoteHelperClass.FirstOrLast.First)
        'If ceList IsNot Nothing OrElse ceListBackup IsNot Nothing Then

        'End If

        'ceTotalLimit = "10,000"
        'qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ceTotalLimit, ceList, ceListBackup, maintainOneItemFromOriginalListWhenResetting:=True, maintainFirstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=True, applicableItemToApplyDifferenceTo:=QuickQuoteHelperClass.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=QuickQuoteHelperClass.FirstOrLast.First)
        'If ceList IsNot Nothing OrElse ceListBackup IsNot Nothing Then

        'End If

        'ceTotalLimit = "5,000.50" 'note: since ce.Limit property currently only allows whole #s (numeric formatting w/ zero decimal places), the cents are being taken off
        'qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(ceTotalLimit, ceList, ceListBackup, maintainOneItemFromOriginalListWhenResetting:=True, maintainFirstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=True, applicableItemToApplyDifferenceTo:=QuickQuoteHelperClass.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=QuickQuoteHelperClass.FirstOrLast.First)
        'If ceList IsNot Nothing OrElse ceListBackup IsNot Nothing Then

        'End If

        '5/31/2017 BOP testing on Patch; was able to duplicate Blanket error (when setting ContractorsToolsEquipmentBlanket - Error in CalculateContractorsToolsAndEquipmentBlanketPremium: Object reference not set to an instance of an object.)
        'BOP_TestSave()
        'ReSaveOrReRate("139572", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)

        '6/8/2017 - BOP rating/coverage/premium troubleshooting
        'Dim errorMsg As String = ""
        'Dim qqo As QuickQuoteObject = Nothing
        ''qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=1143687, policyImageNum:=1, errorMessage:=errorMsg, validateUserAccess:=False) 'QBOP016762, 1143687/1; Loc.PoolsQuotedPremium, Loc.TenantAutoLegalLiabilityQuotedPremium, Loc.CustomerAutoLegalLiabilityQuotedPremium
        'qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=1144935, policyImageNum:=1, errorMessage:=errorMsg, validateUserAccess:=False)
        'If qqo IsNot Nothing Then

        'End If

        '6/8/2017 - BOP Liquor Liability testing
        'Dim qId As String = "139619" 'QBOP016805 (policyId/imgNum = 1144935/1)
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'Dim foundQuote As Boolean = False
        'Dim savedQuote As Boolean = False
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
        '    foundQuote = True

        '    qqo.HasLiquorLiability = True
        '    qqo.LiquorLiabilityClassCodeTypeId = "12"
        '    qqo.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = "25000"

        '    Dim saveErrorMsg As String = ""
        '    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '    If saveErrorMsg = "" Then
        '        'okay
        '        savedQuote = True
        '    Else
        '        'error
        '    End If
        'End If
        'If foundQuote = True AndAlso savedQuote = True Then
        '    ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        'End If

        '6/8/2017 - Integer.TryParse doesn't work when commas, etc. are involved; need to check Decimal.TryParse too
        'Dim testDec As String = "$234,000"
        'Dim newDec As Decimal = CDec(0)
        'If QuickQuoteHelperClass.TryParseStringToDecimal(testDec, newDec) = False Then
        '    newDec = CDec(0)
        'End If
        'Dim testDec2 As String = "15,023,255.10"
        'Dim newDec2 As Decimal = CDec(0)
        'If QuickQuoteHelperClass.TryParseStringToDecimal(testDec2, newDec2) = False Then
        '    newDec2 = CDec(0)
        'End If
        'Dim testInt As String = "234,000"
        'Dim newInt As Decimal = 0
        'If QuickQuoteHelperClass.TryParseStringToInteger(testInt, newInt) = False Then
        '    newInt = 0
        'End If
        'Dim testInt2 As String = "$15,023,255.10"
        'Dim newInt2 As Decimal = 0
        'If QuickQuoteHelperClass.TryParseStringToInteger(testInt2, newInt2) = False Then
        '    newInt2 = 0
        'End If

        '6/12/2017 - testing
        'EnumTesting1()

        '6/28/2017 testing for billing print
        'TestPrintForms(693520, printProcessIdToFind:=19796398)

        '7/7/2017 - prod proposal issue w/ CPR Building Personal Property (user can enter multiple, but VR assumes there can only be one)
        'Dim errorMsg As String = ""
        'Dim qqo As QuickQuoteObject = Nothing
        'qqo = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(quoteNumber:="QCPP033335", errorMessage:=errorMsg, validateUserAccess:=False)
        'If qqo IsNot Nothing Then

        'End If

        '7/14/2017 - testing GarageKeepers on Patch for Chad
        'ReRateWithGarageKeepers(140024)

        '8/23/2017
        'Dim qqMsgs As List(Of QuickQuoteMessage) = Nothing
        'qqHelper.LoadQuoteMessages(qqMsgs)
        'If qqMsgs IsNot Nothing Then

        'End If

        '8/24/2017
        'Dim rqo As QuickQuoteObject = Nothing
        'Dim rErrorMsg As String = ""
        'Dim qId As String = "140953"

        'QQxml.GetRatedQuote(qId, rqo, QuickQuoteXML.QuickQuoteSaveType.Quote, rErrorMsg)
        'If rqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(rErrorMsg) = True Then

        'End If

        '8/25/2017
        'Dim newQuoteId As String = ""
        'Dim newQuoteErrorMsg As String = ""
        'Dim newQuoteDescription As String = ""
        'Dim newDiaAgencyCode As String = "1840"
        'Dim policyIdToCopy As Integer = 156551
        'Dim policyImageNumToCopy As Integer = 10
        'QQxml.CreateNewQuickQuoteFromDiamondPolicyImage(policyIdToCopy, policyImageNumToCopy, newQuoteId, newDiaAgencyCode:=newDiaAgencyCode, errorMsg:=newQuoteErrorMsg, newQuoteDescription:=newQuoteDescription)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then
        '    If String.IsNullOrWhiteSpace(newQuoteDescription) = False Then

        '    End If
        'End If

        '8/29/2017 - check new QuickQuote.QuoteStatus property (Patch)
        'Dim qId As String = "141050"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing Then
        '    Select Case qqo.QuoteStatus
        '        Case QuickQuoteXML.QuickQuoteStatusType.QuoteStopped, QuickQuoteXML.QuickQuoteStatusType.AppStopped, QuickQuoteXML.QuickQuoteStatusType.QuoteKilled, QuickQuoteXML.QuickQuoteStatusType.AppKilled

        '    End Select
        'End If

        '8/29/2017 - check WCP save logic to trigger Quote Kill status
        'Dim sourceQuoteId As String = "141019"
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If
        'Dim qId As String = "141124"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
        '    qqo.RiskGradeLookupId = "758"

        '    Dim saveErrorMsg As String = ""
        '    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '    If saveErrorMsg = "" Then
        '        'okay

        '    Else
        '        'error
        '    End If
        'End If
        'Dim archiveErrorMsg As String = ""
        'QQxml.ArchiveOrUnarchiveQuote(qId, QuickQuoteXML.QuickQuoteArchiveType.Archive, archiveErrorMsg)

        '8/30/2017 - testing WCP Stop logic (Patch)
        'ReSaveOrReRate("141195", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)

        '9/8/2017 - testing PaymentOptions
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim qqoErrorMsg As String = ""
        'Dim quoteId As String = "141783"
        'QQxml.GetRatedQuote(quoteId, qqo, QuickQuoteXML.QuickQuoteSaveType.Quote, qqoErrorMsg)
        'If qqo IsNot Nothing Then
        '    If qqo.PaymentOptions IsNot Nothing AndAlso qqo.PaymentOptions.Count > 0 Then
        '        qqHelper.SortPaymentOptions(qqo.PaymentOptions)

        '        If qqo.PaymentOptions IsNot Nothing Then
        '            qqHelper.SortPaymentOptions(qqo.PaymentOptions, sortBy:=QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescending)

        '            If qqo.PaymentOptions IsNot Nothing Then
        '                qqHelper.SortPaymentOptions(qqo.PaymentOptions, sortBy:=QuickQuotePaymentOption.SortBy.FriendlyDescriptionAscending)

        '                If qqo.PaymentOptions IsNot Nothing Then
        '                    qqHelper.SortPaymentOptions(qqo.PaymentOptions, sortBy:=QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenDescriptionAscending, backupListPositionSortBy:=QuickQuotePaymentOption.ListPositionSortBy.Ascending)

        '                    If qqo.PaymentOptions IsNot Nothing Then
        '                        qqHelper.SortPaymentOptions(qqo.PaymentOptions, sortBy:=QuickQuotePaymentOption.SortBy.NumberOfInstallmentsDescendingThenFriendlyDescriptionAscending, backupListPositionSortBy:=QuickQuotePaymentOption.ListPositionSortBy.MatchLastSort)

        '                        If qqo.PaymentOptions IsNot Nothing Then
        '                            qqHelper.SortPaymentOptions(qqo.PaymentOptions, sortBy:=QuickQuotePaymentOption.SortBy.NumberOfInstallmentsAscendingThenDescriptionDescending, backupListPositionSortBy:=QuickQuotePaymentOption.ListPositionSortBy.Descending)
        '                        End If
        '                    End If
        '                End If
        '            End If
        '        End If
        '    End If
        'End If

        'testing 9/13/2017 - broke proposal functionality when multiple quotes
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim qqoErrorMsg As String = ""
        'Dim quoteId As String = "142110"
        'QQxml.GetRatedQuote(quoteId, qqo, QuickQuoteXML.QuickQuoteSaveType.Quote, qqoErrorMsg)
        'If qqo IsNot Nothing Then
        '    If qqo.PaymentOptions IsNot Nothing AndAlso qqo.PaymentOptions.Count > 0 Then
        '        Dim newPaymentOptions As List(Of QuickQuotePaymentOption) = qqHelper.CloneObject(qqo.PaymentOptions)
        '        qqHelper.CombinePaymentOptions(newPaymentOptions, qqo.PaymentOptions)
        '        If newPaymentOptions IsNot Nothing AndAlso newPaymentOptions.Count > 0 Then

        '        End If
        '    End If
        'End If

        '9/16/2017 - testing WCP ExpMod (working in old look and feel but not new)
        'Dim sourceQuoteId As String = "142829" '141961, 142291, 142304
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If
        'DiaServices doesn't seem to be able to add ExpMod
        '142304 rated correctly w/ CompRater; will next try to change date and/or factor using DiaServices (changed dates from 9/15/2017 to 9/18/2017)
        'continued testing 9/27/2017 and 9/28/2017; now saving to Diamond successfully on new (last: 142889) and existing (last: 142829) quotes, but AnniversaryRatingEffectiveDate isn't being updated for some reason
        '9/28/2017 - next starting one in CompRater (last: 142895) to see what RatedQuote comes back w/ when AnniversaryRatingEffectiveDate is set... might need to set more fields for DiamondServices
        'Dim qId As String = "142895" '"142291" '142257, 142304, 142829, 142872, 142889
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
        '    qqo.ExperienceModificationFactor = "2"
        '    qqo.AnniversaryRatingEffectiveDate = "9/18/2017"
        '    qqo.ModificationProductionDate = "9/18/2017"
        '    qqo.RatingEffectiveDate = "9/18/2017"

        '    'qqo.ExperienceModificationFactor = ""
        '    'qqo.AnniversaryRatingEffectiveDate = ""
        '    'qqo.ModificationProductionDate = ""
        '    'qqo.RatingEffectiveDate = ""

        '    Dim saveErrorMsg As String = ""
        '    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '    If saveErrorMsg = "" Then
        '        'okay
        '        ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '    Else
        '        'error
        '    End If
        'End If

        '10/3/2017 - Prod
        'Dim newQuoteId As String = ""
        'Dim errorMsg As String = ""
        'Dim archiveErrMsg As String = ""
        ''QQxml.CopyQuoteToAgency("206496", "6208-2944", "448", newQuoteId, True, False, errorMsg, archiveErrMsg, clearProducerInfoIfDifferentAgency:=True, clearClientIdIfDifferentAgency:=True, notePreviousInfoInDescriptionIfDifferentAgency:=False)
        'QQxml.CopyQuoteToAgency("206503", "6208-2944", "448", newQuoteId, True, False, errorMsg, archiveErrMsg, clearProducerInfoIfDifferentAgency:=True, clearClientIdIfDifferentAgency:=True, notePreviousInfoInDescriptionIfDifferentAgency:=False)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True AndAlso String.IsNullOrWhiteSpace(errorMsg) = False Then

        'End If

        '10/11/2017 - testing new payment option downPayment properties
        'Dim dpAnnual As String = ""
        'Dim dpSemiAnnual As String = ""
        'Dim dpQuarterly As String = ""
        'Dim dpMonthly As String = ""
        'Dim dpMonthlyCC As String = ""
        'Dim dpMonthlyEFT As String = ""
        ''Dim ratedQQ As QuickQuoteObject = TestReturnRatedQuote("143522")
        'Dim ratedQQ As QuickQuoteObject = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=1149750, policyImageNum:=1)
        'If ratedQQ IsNot Nothing Then
        '    dpAnnual = ratedQQ.AnnualPaymentOption_DownPayment
        '    dpSemiAnnual = ratedQQ.SemiAnnualPaymentOption_DownPayment
        '    dpQuarterly = ratedQQ.QuarterlyPaymentOption_DownPayment
        '    dpMonthly = ratedQQ.MonthlyPaymentOption_DownPayment
        '    dpMonthlyCC = ratedQQ.CreditCardMonthlyPaymentOption_DownPayment
        '    dpMonthlyEFT = ratedQQ.EFTMonthlyPaymentOption_DownPayment

        '    If qqHelper.IsPositiveDecimalString(dpAnnual) = True OrElse qqHelper.IsPositiveDecimalString(dpMonthly) = True Then

        '    End If
        'End If

        '10/25/2017 - reviewing MVR ThirdPartyData to see if Drivers License State is returned (Patch)
        'Dim retrievalErrorMsg As String = ""
        'Dim mvrQuote As QuickQuoteObject = TestReturnQuote("144009", saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap, err:=retrievalErrorMsg)
        'If mvrQuote IsNot Nothing Then
        '    Dim tpd As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
        '    Dim tpdResults As String = ""
        '    Dim tpdErrorMsg As String = ""
        '    QQxml.LoadMvrForQuote(mvrQuote, tpd, results:=tpdResults, errorMsg:=tpdErrorMsg)
        '    If tpd IsNot Nothing Then

        '    End If
        'End If

        '10/25/2017 - checking PrintHistory for Account Bill policy in NewBuildTest
        ''GetDiamondPrintHistory("1225414")
        'TestPrintForms(1225414)
        'GetDiamondPrintHistory("1225415")
        'TestPrintForms(1225415)

        'testing client updates 10/27/2017 (Patch): 144043 - changed client (needs to call Diamond service to transfer); 144044 - wiped out client to create new (needs to reset accountNum)
        'ReSaveOrReRate("144044", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)

        'testing WCP WaiverOfSubrogationRecords 10/30/2017 (Patch); name is saved correctly as long as there is a valid nameTypeId; probably need to add reconciliation logic so we're not wasting so many db records (for inclusionsExclusions and their scheduledItems)
        'ReSaveOrReRate("143385", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        ''ReSaveOrReRate("143385", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Save, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap)
        'ReSaveOrReRate("143385", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap)
        'Test_WCP_NamedIndividuals()

        '11/16/2017 - testing CPP on NewRelease
        'ReSaveOrReRate("105819")

        '11/20/2017 - testing Protection Class stuff on Patch
        'Dim retrievalErrorMsg As String = ""
        ''Dim qId As String = "144366" 'copied quote that was then changed after Credit order... fails loc address validation since Diamond has zip+4 where qq just has normal zip... won't order since Save can't update address due to Cov C validation because of HO-4
        'Dim qId As String = "144375"
        'Dim qqo As QuickQuoteObject = TestReturnQuote(qId, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote, err:=retrievalErrorMsg)
        'If qqo IsNot Nothing Then
        '    Dim needToReload As Boolean = False
        '    Dim successfullyRated As Boolean = False
        '    Dim reportsOrdered As Boolean = False
        '    Dim foundReports As Boolean = False
        '    Dim addressMisMatch As Boolean = False
        '    QQxml.CheckQuoteForProtectionClassInfoAndOrderVeriskReportIfNeeded(qqo, needToReloadQuote:=needToReload, ratingSuccess:=successfullyRated, manuallyOrderedAnyReports:=reportsOrdered, manuallyFoundAnyExistingReports:=foundReports, problemWithDiamondAddressNotMatchingQuickQuote:=addressMisMatch)
        '    If reportsOrdered = True Then

        '    End If
        'End If
        'need copies for what quote looks like before ProtClass call (copied from 144375-->144376, 144377, 144378)
        'Dim sourceQuoteId As String = "144375"
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If

        '12/6/2017 - fix prod building class description(s)
        'Dim quoteId As Integer = 219743
        'another one 12/19/2017
        'Dim quoteId As Integer = 222677
        'Dim retrievalError As String = ""
        'Dim saveError As String = ""
        'Dim buildingClassesUpdated As Integer = 0
        'FixLongClassDescription(quoteId, retrievalError:=retrievalError, saveError:=saveError, classDescriptionsSuccessfullyUpdated:=buildingClassesUpdated)
        'If String.IsNullOrWhiteSpace(retrievalError) = False AndAlso String.IsNullOrWhiteSpace(saveError) = False Then

        'End If

        '1/9/2018 - Prod agency transfer
        'CopyQuotesFromAgencyToAgency()

        '1/17/2018 - testing CPR w/ DiamondServices
        'ReSaveOrReRate("226029") 'worked
        'ReSaveOrReRate("226030") 'received xml buffer overflow error because of bad building lossCost values (had 100 and 200 where it should've been percentage like .1 or .2)

        '1/26/2018 - testing PPA in IFMEOMTest2 (for prefill issue)
        'Dim qId As String = "90570"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        '    If qqo.Drivers IsNot Nothing AndAlso qqo.Drivers.Count > 0 Then
        '        For Each d As QuickQuoteDriver In qqo.Drivers
        '            If d.EmploymentInfo IsNot Nothing Then
        '                If d.EmploymentInfo.Name IsNot Nothing Then
        '                    If qqHelper.IsValidDateString(d.EmploymentInfo.Name.BirthDate) AndAlso CDate(d.EmploymentInfo.Name.BirthDate) = CDate("1/1/1800") Then
        '                        d.EmploymentInfo.Name.BirthDate = ""
        '                    End If
        '                    If qqHelper.IsValidDateString(d.EmploymentInfo.Name.DriversLicenseDate) AndAlso CDate(d.EmploymentInfo.Name.DriversLicenseDate) = CDate("1/1/1800") Then
        '                        d.EmploymentInfo.Name.DriversLicenseDate = ""
        '                    End If
        '                    If qqHelper.IsValidDateString(d.EmploymentInfo.Name.DateBusinessStarted) AndAlso CDate(d.EmploymentInfo.Name.DateBusinessStarted) = CDate("1/1/1800") Then
        '                        d.EmploymentInfo.Name.DateBusinessStarted = ""
        '                    End If
        '                    If String.IsNullOrWhiteSpace(d.EmploymentInfo.Name.TaxNumber) = False AndAlso d.EmploymentInfo.Name.TaxNumber = "000000000" Then
        '                        d.EmploymentInfo.Name.TaxNumber = ""
        '                    End If
        '                End If
        '                If String.IsNullOrWhiteSpace(d.EmploymentInfo.Duration) = False AndAlso qqHelper.IsPositiveIntegerString(d.EmploymentInfo.Duration) = False Then
        '                    d.EmploymentInfo.Duration = ""
        '                End If
        '                If String.IsNullOrWhiteSpace(d.EmploymentInfo.EmploymentDurationTypeId) = False AndAlso qqHelper.IsPositiveIntegerString(d.EmploymentInfo.EmploymentDurationTypeId) = False Then
        '                    d.EmploymentInfo.EmploymentDurationTypeId = ""
        '                End If
        '                If String.IsNullOrWhiteSpace(d.EmploymentInfo.OccupationTypeId) = False AndAlso qqHelper.IsPositiveIntegerString(d.EmploymentInfo.OccupationTypeId) = False Then
        '                    d.EmploymentInfo.OccupationTypeId = ""
        '                End If
        '                If String.IsNullOrWhiteSpace(d.EmploymentInfo.PreviousDuration) = False AndAlso qqHelper.IsPositiveIntegerString(d.EmploymentInfo.PreviousDuration) = False Then
        '                    d.EmploymentInfo.PreviousDuration = ""
        '                End If
        '                If String.IsNullOrWhiteSpace(d.EmploymentInfo.PreviousEmploymentDurationTypeId) = False AndAlso qqHelper.IsPositiveIntegerString(d.EmploymentInfo.PreviousEmploymentDurationTypeId) = False Then
        '                    d.EmploymentInfo.PreviousEmploymentDurationTypeId = ""
        '                End If
        '            End If
        '        Next
        '    End If

        '    Dim saveErrorMsg As String = ""
        '    QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '    If saveErrorMsg = "" Then
        '        'okay
        '        ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '    Else
        '        'error
        '    End If
        'End If
        'ReSaveOrReRate("90570")

        '2/1/2018 - Prod agency transfers
        'CopyQuotesFromAgencyToAgency()

        '2/1/2018 - reviewing Martin's static data updates
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptions(className:=QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteLocation, propertyName:=QuickQuoteHelperClass.QuickQuotePropertyName.ValuationMethodTypeId, lob:=QuickQuoteObject.QuickQuoteLobType.CommercialProperty)
        'If options IsNot Nothing Then

        'End If

        '3/1/2018 - testing CPR Building ClassificationCode logic for Martin
        'Dim sourceQuoteId As String = "233722"
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If

        'Dim qId As String = "233724" '233722
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        '    Dim saveIt As Boolean = False
        '    Dim rateIt As Boolean = False

        '    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
        '        If qqo.Locations(0).Buildings IsNot Nothing AndAlso qqo.Locations(0).Buildings.Count > 0 Then
        '            With qqo.Locations(0).Buildings(0)
        '                If .ClassificationCode IsNot Nothing Then
        '                    With .ClassificationCode
        '                        If String.IsNullOrWhiteSpace(.ClassCode) = True Then
        '                            .ClassCode = "0921"
        '                            .ClassDescription = "Pet Grooming"
        '                            .ClassLimit = "5,000"
        '                            .PMA = "Service"
        '                            .RateGroup = "1"
        '                            saveIt = True
        '                            'ElseIf .RateGroup = "1" Then
        '                            '    .RateGroup = ""
        '                            '    saveIt = True
        '                        ElseIf .RateGroup = "" Then
        '                            .RateGroup = "1"
        '                            saveIt = True
        '                        End If
        '                        If .ClassLimit.Contains(",") = True Then
        '                            .ClassLimit = .ClassLimit.Replace(",", "")
        '                            saveIt = True
        '                        End If
        '                    End With
        '                    rateIt = True
        '                End If
        '                If .Limit = "" OrElse qqHelper.DecimalForString(.Limit) = CDec("0") Then
        '                    .Limit = "200000"
        '                    saveIt = True
        '                End If
        '                If .DeductibleId = "" OrElse qqHelper.IntegerForString(.DeductibleId) = 0 Then
        '                    .DeductibleId = "9"
        '                    saveIt = True
        '                End If
        '            End With
        '        End If
        '    End If

        '    'If qqo.HasBusinessIncomeALS = True Then
        '    '    'If qqo.BusinessIncomeALSLimit = "150000" OrElse qqHelper.DecimalForString(qqo.BusinessIncomeALSLimit) = CDec("150000") Then
        '    '    '    qqo.BusinessIncomeALSLimit = "15000"
        '    '    'End If
        '    '    qqo.HasBusinessIncomeALS = False
        '    '    saveIt = True
        '    'Else
        '    '    qqo.HasBusinessIncomeALS = True
        '    '    qqo.BusinessIncomeALSLimit = "150000"
        '    '    saveIt = True
        '    'End If

        '    If saveIt = True OrElse rateIt = True Then
        '        Dim saveErrorMsg As String = ""

        '        If saveIt = True Then
        '            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '        End If

        '        If saveErrorMsg = "" Then
        '            'okay
        '            If rateIt = True Then
        '                ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '            End If
        '        Else
        '            'error
        '        End If
        '    End If

        'End If

        ''ReSaveOrReRate("233724")


        '3/28/2018 testing for CPR Building PersProp Earthquake cov (NewBuildTest); appears to only happen with DiamondServices, but didn't happen on latest (233843; maybe just 233838); 3/29/2018 - also looking at Martin's latest Building PersProp EQ issue where he gets error when EQ isn't on all
        'Dim sourceQuoteId As String = "233870" 'original source: 233795, then 233845; new source: 233845; newer source: 233854; new quoteId = 233838 (DiamondServices); new quoteId2 = 233842 (CompRater); new quoteId3 = 233843 (DiamondServices); new quoteId4 = 233844; new quoteId5 = 233845; additional quoteIds created from copy of 233845 that already had EQ removed: 233850, 233851, 233852, 233853, 233854; more copies from 233854 before using it for testing: 233865, 233866, 233867, 233868, 233869, 233870; more copies from 233870 w/ some to verify rating results w/ CompRater: 233887, 233888 (both currently have EQ on both PPs)
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If
        'Dim qId As String = "233887" '233838; 233842; 233843; 233844; 233845; 233850; 233851; 233852; 233853; 233854; 233865; 233866; 233868; 233869; 233870; everything worked fine with 233845; need to try to do the same thing remove EQ then add back to only 1 PersProp and then try to reload and re-rate after initial successful rate... will use 233850 - was able to duplicate issue (Diamond doesn't completely delete coverage - detailStatusCode 2 but no CoverageDetail)... will next try setting Checkbox to False on EQ cov on Delete... Checkbox False w/ DetailStatusCode 2 caused error... will now try Checkbox False only; 4/4/2018 - now using 233865 to test setting EQ prem to 0 to assist in removal; now using 233866 to test DetailStatusCode 2 w/ FullTermPremium 0 and Checkbox False; will try the same thing w/ 233868 (hosed 233867), but will remove the logic to not add covs w/ DetailStatusCode 2 to list... so the only change here is to handle for the EQ removal error; everything was fine w/ last run but will start over w/ 233869 to check premiums; will now use 233870 as comparison to see why premiums vary so much when removing EQ from PPO; 4/6/2018 - now using 233887 to check rating results w/ CompRater: same results
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        '    Dim saveIt As Boolean = False
        '    Dim rateIt As Boolean = False

        '    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
        '        For Each l As QuickQuoteLocation In qqo.Locations
        '            If l IsNot Nothing AndAlso l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
        '                For Each b As QuickQuoteBuilding In l.Buildings
        '                    'If b IsNot Nothing AndAlso (b.PersPropCov_EarthquakeApplies = True OrElse b.PersPropOfOthers_EarthquakeApplies = True) Then
        '                    '    b.PersPropCov_EarthquakeApplies = False
        '                    '    b.PersPropOfOthers_EarthquakeApplies = False
        '                    '    saveIt = True
        '                    'End If
        '                    If b IsNot Nothing Then
        '                        If b.PersPropCov_EarthquakeApplies = True OrElse b.PersPropOfOthers_EarthquakeApplies = True Then
        '                            'b.PersPropCov_EarthquakeApplies = False
        '                            'b.PersPropOfOthers_EarthquakeApplies = False
        '                            'saveIt = True
        '                        End If
        '                        If b.PersPropCov_EarthquakeApplies = False AndAlso b.PersPropOfOthers_EarthquakeApplies = False Then
        '                            'b.PersPropCov_EarthquakeApplies = True
        '                            'If qqHelper.IsPositiveIntegerString(b.PersonalProperty_EarthquakeRateGradeTypeId) = False Then
        '                            '    b.PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores
        '                            'End If
        '                            'saveIt = True

        '                            'b.PersPropCov_EarthquakeApplies = True
        '                            'b.PersPropOfOthers_EarthquakeApplies = True
        '                            'If qqHelper.IsPositiveIntegerString(b.PersonalProperty_EarthquakeRateGradeTypeId) = False Then
        '                            '    b.PersonalProperty_EarthquakeRateGradeTypeId = "3" 'Antique stores
        '                            'End If
        '                            'saveIt = True
        '                        End If
        '                        If b.PersPropCov_EarthquakeApplies = True AndAlso b.PersPropOfOthers_EarthquakeApplies = False Then
        '                            'b.PersPropOfOthers_EarthquakeApplies = True
        '                            'saveIt = True
        '                        End If
        '                        If b.PersPropCov_EarthquakeApplies = True AndAlso b.PersPropOfOthers_EarthquakeApplies = True Then
        '                            'b.PersPropOfOthers_EarthquakeApplies = False
        '                            'saveIt = True
        '                        End If
        '                    End If
        '                Next
        '                rateIt = True
        '            End If
        '        Next
        '    End If

        '    If saveIt = True OrElse rateIt = True Then
        '        Dim saveErrorMsg As String = ""

        '        If saveIt = True Then
        '            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '        End If

        '        If saveErrorMsg = "" Then
        '            'okay
        '            If rateIt = True Then
        '                ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '            End If
        '        Else
        '            'error
        '        End If
        '    End If

        'End If
        ''ReSaveOrReRate("233887") '233838; 233842; 233843; 233844; 233845; 233850; 233851; 233852; 233853; 233865; 233866; 233868; 233869; 233870


        '4/10/2018 - testing CPP contractors and manufacturers enhancement endorsements w/ Diamond Services (NewBuildTest)
        'Dim sourceQuoteId As String = "233914" 'Contrators - 233911 (copies: 233918, 233919); Manufacturers - 233914 (copies: 233920, 233921)
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If
        'Dim qId As String = "233920" 'Contrators - 233911 (copies: 233918, 233919); Manufacturers - 233914 (copies: 233920, 233921); just need to set IsContractorsEnhancementEndorsement/IsManufacturersEnhancementEndorsement flag on Package PackagePart (was already being done when writing xml; must've just been missed when updating for DiamondServices)
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        '    Dim saveIt As Boolean = False
        '    Dim rateIt As Boolean = False

        '    If qqo.HasContractorsEnhancement = False Then
        '        'qqo.HasContractorsEnhancement = True
        '        'saveIt = True
        '    End If
        '    If qqo.HasManufacturersEnhancement = False Then
        '        qqo.HasManufacturersEnhancement = True
        '        saveIt = True
        '    End If

        '    If qqo.HasContractorsEnhancement = True Then
        '        'rateIt = True
        '    End If
        '    If qqo.HasManufacturersEnhancement = True Then
        '        rateIt = True
        '    End If

        '    If saveIt = True OrElse rateIt = True Then
        '        Dim saveErrorMsg As String = ""

        '        If saveIt = True Then
        '            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '        End If

        '        If saveErrorMsg = "" Then
        '            'okay
        '            If rateIt = True Then
        '                ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '            End If
        '        Else
        '            'error
        '        End If
        '    End If

        'End If

        '6/4/2018 - Prod agency transfers
        'CopyQuotesFromAgencyToAgency()

        'initial multi-state testing 8/2/2018 (originally added 3/6/2018 to 3/9/2018)
        'InitialMultiStateTesting()

        'added 4/16/2019 for testing bit return from database
        'Dim passwordMustBeChanged As Boolean = checkPWflag(6236) 'Karen3358 from Patch; returned True ("True")
        ''Dim passwordMustBeChanged As Boolean = checkPWflag(8392) 'Diann5014 from Prod; returned True ("True")
        'If passwordMustBeChanged = True Then

        'End If

        '6/17/2019 - Endorsement/ReadOnly testing for 3rd party report links
        ''Dim polId As Integer = 1560652 'PPA2128143
        ''Dim polImgNum As Integer = 5 'PPA2128143
        'Dim polId As Integer = 994390 'PPA2122367 (ABT)
        'Dim polImgNum As Integer = 6 'PPA2122367 (ABT)
        'Dim eMsg As String = ""
        'Dim qqoRO As QuickQuoteObject = QQxml.ReadOnlyQuickQuoteObjectForPolicyInfo(policyId:=polId, policyImageNum:=polImgNum, errorMessage:=eMsg)
        'If qqoRO IsNot Nothing Then
        '    Dim driverNum As Integer = 1

        '    Dim crErr As String = ""
        '    Dim crData As String = ""
        '    Dim crObj As Diamond.Common.Objects.ThirdParty.ReportObjects.NCF.RecordGroup = QQxml.GetCreditReportDataForDriver(qqoRO, driverNum, results:=crData, errorMsg:=crErr)
        '    If crObj IsNot Nothing Then

        '    End If

        '    Dim mvrErr As String = ""
        '    Dim mvrData As String = ""
        '    Dim mvrObj As Diamond.Common.Objects.ThirdParty.ReportObjects.MVR.MVRReportData = QQxml.GetMvrReportDataForDriver(qqoRO, driverNum, results:=mvrData, errorMsg:=mvrErr)
        '    If mvrObj IsNot Nothing Then

        '    End If

        '    Dim clueErr As String = ""
        '    Dim clueData As String = ""
        '    Dim clueObjs As List(Of Diamond.Common.Objects.ThirdParty.ReportObjects.CLUEPersonalAuto.ClueAutoReportData) = QQxml.GetClueAutoReportDataObjectsForQuote(qqoRO, results:=clueData, errorMsg:=clueErr)
        '    If clueObjs IsNot Nothing AndAlso clueObjs.Count > 0 Then

        '    End If

        'End If

        '3/23/2020 - RvWatercraft Operator assignment testing
        'Dim qId As String = "402317" 'QHOM509710 (Patch)
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then

        '    Dim saveIt As Boolean = False
        '    Dim rateIt As Boolean = False

        '    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 AndAlso qqo.Locations(0) IsNot Nothing AndAlso qqo.Locations(0).RvWatercrafts IsNot Nothing AndAlso qqo.Locations(0).RvWatercrafts.Count > 0 AndAlso qqo.Locations(0).RvWatercrafts(0) IsNot Nothing Then
        '        'If qqo.Operators IsNot Nothing AndAlso qqo.Operators.Count > 0 AndAlso (qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums Is Nothing OrElse qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums.Count = 0) Then
        '        '    QuickQuoteHelperClass.AddIntegerToIntegerList(qqo.Operators.Count, qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums)
        '        'End If
        '        If qqo.Operators IsNot Nothing AndAlso qqo.Operators.Count > 0 Then
        '            If qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums Is Nothing OrElse qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums.Count = 0 OrElse qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums.Contains(qqo.Operators.Count) = False Then
        '                'assign last operator
        '                QuickQuoteHelperClass.AddIntegerToIntegerList(qqo.Operators.Count, qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums)
        '            Else
        '                'un-assign last operator
        '                qqo.Locations(0).RvWatercrafts(0).AssignedOperatorNums.Remove(qqo.Operators.Count)
        '            End If
        '            saveIt = True
        '            rateIt = True
        '        End If
        '    End If

        '    If saveIt = True OrElse rateIt = True Then
        '        Dim saveErrorMsg As String = ""

        '        If saveIt = True Then
        '            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
        '        End If

        '        If saveErrorMsg = "" Then
        '            'okay
        '            If rateIt = True Then
        '                ReSaveOrReRate(qId, saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        '            End If
        '        Else
        '            'error
        '        End If
        '    End If

        'End If

        'added 1/11/2021 for Interoperability testing
        'Dim qId As Integer = 400274 'QCPP48154 from NewBuildTest
        'Dim qId As Integer = 400276 'QCPP48155 from NewBuildTest
        'Dim quoteNum As String = "QCPP48155"
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim updateFromDiamondError As String = ""
        'Dim isOkayToRate As Boolean = False
        ''If QQxml.SuccessfullyLoadedDiamondQuoteIntoVelociRater(quoteNum, qId, errorMsg:=updateFromDiamondError) = True Then
        'If QQxml.SuccessfullyLoadedDiamondQuoteIntoVelociRater(quoteNum, qId, qqo, errorMsg:=updateFromDiamondError) = True Then
        '    isOkayToRate = True
        'Else
        '    isOkayToRate = False
        'End If
        'If isOkayToRate = True Then
        '    'ReSaveOrReRate(qId.ToString)
        'End If

        'testing 9/15/2021
        ''Dim qId As String = "604705" 'QCAP31113 (Prod); started before Diamond migration but "updated from Diamond" after
        'Dim qId As String = "610801" 'QCAP31271 (Prod); started and not updated since before Diamond migration
        ''Dim qId As String = "610375" 'no quote # (Prod); started and not updated since before Diamond migration - no risk grade
        ''Dim qId As String = "609010" 'no quote # (Prod); started and not updated since before Diamond migration - correctly converted 626 to 631
        'Dim qqo As QuickQuoteObject = Nothing
        'Dim retrievalErrMsg As String = ""
        'qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.QuoteForCopy, retrievalErrMsg)
        'Dim conversionType As QuickQuoteHelperClass.RiskGradeLookupIdConversionType = QuickQuoteHelperClass.RiskGradeLookupIdConversionType.None
        'Dim oldAndNewRiskGradeLookupIds As List(Of QuickQuoteGenericObjectWithTwoIntegerProperties) = Nothing
        'If qqo IsNot Nothing AndAlso QuickQuoteHelperClass.QuoteHasConvertedRiskGradeLookupId(qqo, conversionType:=conversionType, oldAndNewRiskGradeLookupIds:=oldAndNewRiskGradeLookupIds) = False Then

        'End If

    End Sub
    'Private Sub Test2()
    '    QuickQuoteHelperClass.CheckDiamondServicesToken()

    '    Dim request As New Diamond.Common.Services.Messages.AdministrationService.SaveUser.Request
    '    Dim response As New Diamond.Common.Services.Messages.AdministrationService.SaveUser.Response

    '    With request.RequestData
    '        .UsersRecord = New Diamond.Common.Objects.Administration.Users
    '        With .UsersRecord
    '            .UserCategoryId = 1

    '        End With
    '    End With
    'End Sub
    'Private Sub Test3_old()
    '    Dim cpUnitNumCollectionSets As List(Of QuickQuoteChoicePointUnitNumCollectionSet) = Nothing

    '    Dim s As QuickQuoteChoicePointUnitNumCollectionSet = GetChoicePointUnitNumCollectionSet(1, cpUnitNumCollectionSets)
    '    If s IsNot Nothing Then

    '    End If
    '    Dim testIdValue As Diamond.Common.Objects.IdValue = Nothing
    '    testIdValue = New Diamond.Common.Objects.IdValue(2)
    '    Dim s2 As QuickQuoteChoicePointUnitNumCollectionSet = GetChoicePointUnitNumCollectionSet(testIdValue, cpUnitNumCollectionSets)
    '    If s2 IsNot Nothing Then

    '    End If
    '    Dim s3 As QuickQuoteChoicePointUnitNumCollectionSet = GetChoicePointUnitNumCollectionSetOld(testIdValue, cpUnitNumCollectionSets)
    '    If s3 IsNot Nothing Then

    '    End If
    'End Sub
    Private Sub Test3() 'for prod support 2/12/2015
        'Dim qId As String = "32678"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.QuoteNumber = "QPPA204913" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Vehicles IsNot Nothing AndAlso qq.Vehicles.Count > 0 Then
        '            For Each v As QuickQuoteVehicle In qq.Vehicles
        '                If String.IsNullOrEmpty(v.Vin) = False AndAlso Len(v.Vin) < 4 Then
        '                    v.Vin = v.Vin.PadRight(4, "0")
        '                End If
        '            Next
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub Test4() 'for prod support 2/13/2015 (Bug # 4456)
        'Dim qId As String = "31890"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.BillingAddressee IsNot Nothing AndAlso qq.BillingAddressee.Address IsNot Nothing AndAlso qq.BillingAddressee.Address.Zip = "VEVAY-0000" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Policyholder IsNot Nothing AndAlso qq.Policyholder.HasData = True Then
        '            qqHelper.CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(qq.Policyholder, qq.BillingAddressee)
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub Test5() 'for prod support 2/27/2015 (same issue as Bug # 4456)
        'Dim qId As String = "34534"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.BillingAddressee IsNot Nothing AndAlso qq.BillingAddressee.Address IsNot Nothing AndAlso qq.BillingAddressee.Address.Zip = "PLYMOUTH" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Policyholder IsNot Nothing AndAlso qq.Policyholder.HasData = True Then
        '            qqHelper.CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(qq.Policyholder, qq.BillingAddressee)
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub Test6() 'for prod support 3/2/2015 (same issue as Bug # 4456)
        'Dim qId As String = "34783"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.BillingAddressee IsNot Nothing AndAlso qq.BillingAddressee.Address IsNot Nothing AndAlso qq.BillingAddressee.Address.Zip = "WINSLOW" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Policyholder IsNot Nothing AndAlso qq.Policyholder.HasData = True Then
        '            qqHelper.CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(qq.Policyholder, qq.BillingAddressee)
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub Test7() 'for prod support 3/9/2015
        'Dim qId As String = "35691"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.QuoteNumber = "QPPA210715" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Vehicles IsNot Nothing AndAlso qq.Vehicles.Count > 0 Then
        '            For Each v As QuickQuoteVehicle In qq.Vehicles
        '                If String.IsNullOrEmpty(v.Vin) = False AndAlso Len(v.Vin) < 4 Then
        '                    v.Vin = v.Vin.PadRight(4, "0")
        '                End If
        '            Next
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub Test8() 'for prod support 3/25/2015
        'Dim qId As String = "37836"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.Client IsNot Nothing AndAlso qq.Client.ClientId = "501226" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Vehicles IsNot Nothing AndAlso qq.Vehicles.Count > 0 Then
        '            For Each v As QuickQuoteVehicle In qq.Vehicles
        '                If String.IsNullOrEmpty(v.Vin) = False AndAlso Len(v.Vin) < 4 Then
        '                    v.Vin = v.Vin.PadRight(4, "0")
        '                End If
        '            Next
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub TestAdditionalInterestList() 'added 3/9/2015 for bug # 4488 (Additional Interest DisplayName)
        Dim diaAIList As Diamond.Common.Objects.Policy.AdditionalInterestList = Nothing
        Using qqAI As New QuickQuoteAdditionalInterest
            With qqAI
                '.ListId = "178868" '"178866" 'no longer works (appears to be due to multiple AdditionalInterestListNameLink records w/ same additionalinterestlist_id) '"178860" 'no longer works (LoadAdditionalInterestList fails w/ 'Specified AdditionalInterestList was not found.') '"178851" 'created on initial run
                If .Address Is Nothing Then
                    .Address = New QuickQuoteAddress
                End If
                With .Address
                    .HouseNum = "123"
                    .StreetName = "Finance Drive"
                    '.StreetName = "Finance Drive (Upd)"
                    .City = "Indianapolis"
                    .StateId = "16" 'automatically defaulted anyway
                    .Zip = "46227" 'should automatically append -0000
                    .County = "Marion"
                End With
                If .Name Is Nothing Then
                    .Name = New QuickQuoteName
                End If
                With .Name
                    .CommercialName1 = "Test Finance Company"
                    '.CommercialName1 = "Test Finance Company (Upd)"
                    .TypeId = "2"
                    .TaxNumber = "123456789"
                    .TaxTypeId = "2"
                End With
                .AgencyId = "17" 'Brewton
                .GroupTypeId = "2" 'Finance Company
                .Description = "desc"
                .Other = "other"
                .TypeId = "42" 'First Mortgagee
            End With
            QQxml.DiamondService_CreateOrUpdateAdditionalInterestList(qqAI, diaAIList) 'subsequent calls w/ ListId have generated a new one... will try setting .SaveAIList = isNew... 3/10/2015 update: didn't work; 3/16/2015 note: worked after calling .AdditionalInterestList.SetIsNewValue(False)
            If diaAIList IsNot Nothing Then
                'Dim diaAIListXml As String = QQxml.XmlForInsureSoftObject(diaAIList)
                'If String.IsNullOrEmpty(diaAIListXml) = False Then

                'End If
                Dim diaAIListPath As String = "C:\Users\domin\Documents\" & "diaAIList" & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
                diaAIList.DumpToFile(diaAIListPath)
            End If
        End Using
    End Sub
    Private Sub StaticDataTest() 'added 3/27/2015 for testing; works correctly w/ existing code when called correctly w/ attributes
        Dim atts As New List(Of QuickQuoteStaticDataAttribute)
        Dim att As New QuickQuoteStaticDataAttribute
        With att
            .nvp_propertyName = QuickQuoteHelperClass.QuickQuotePropertyName.LobId
            .nvp_value = "17"
        End With
        atts.Add(att)
        Dim ddl As New DropDownList
        qqHelper.LoadStaticDataOptionsDropDownWithMatchingAttributes(ddl, QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.EntityTypeId, atts, QuickQuoteStaticDataOption.SortBy.None, QuickQuoteObject.QuickQuoteLobType.Farm)
        If ddl IsNot Nothing Then

        End If
    End Sub
    'added 4/14/2015 for testing
    Private Sub ReSaveOrReRate(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(qId) = True Then
            'get existing
            'qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            'updated 10/30/2017 to use saveOrRateType
            qqxml.GetQuoteForSaveType(qId, saveOrRateType, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        End If

        If quickQuote IsNot Nothing Then

            'added 1/27/2016 for testing ClientPhoneLink error; comment out when done
            'If quickQuote.Client IsNot Nothing AndAlso quickQuote.Client.HasValidClientId = True Then
            '    quickQuote.Client.ClientId = ""
            'End If
            'added 5/31/2017 for testing BOP classifications
            'If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
            '    For Each l As QuickQuoteLocation In quickQuote.Locations
            '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
            '            For Each b As QuickQuoteBuilding In l.Buildings
            '                If qqHelper.IsPositiveIntegerString(b.ClassificationTypeId) = False Then
            '                    b.ClassificationTypeId = "4875" 'Program=Service; Classification=Barber Shops; Class Code=71332
            '                End If
            '                If b.ClassificationTypeId = "4875" Then
            '                    b.CondoCommercialUnitOwnersLimitId = "" '15
            '                    If b.OccupancyId = "17" Then 'Owner Occupied Bldg 75% of Less / Lessor's
            '                        b.OccupancyId = "20" 'Owner Occupied Bldg 10% or Less / Lessor's
            '                    End If
            '                End If
            '                qqHelper.CheckBuildingClassifications(b)
            '            Next
            '        End If
            '    Next
            'End If

            If saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
                'qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
                'updated 10/30/2017 to use saveOrRateType
                qqxml.SaveQuote(saveOrRateType, quickQuote, qId, err)
                If err = "" Then
                    'okay

                Else
                    'error
                End If
            Else
                qqxml.RateQuoteAndSave(saveOrRateType, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
                'qqxml.RateQuoteAndSave(saveOrRateType, quickQuote, qId, err) 'normal method
                If err = "" Then
                    'okay
                    Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


                Else
                    'error
                End If
            End If
        End If

    End Sub

    'testing 4/15/2015... sent to Matt to see if he gets the same xml error when running the actual code locally... maybe just a problem on specific quotes
    'Public Sub CopyQuote(ByVal quoteId As String, ByRef newQuoteId As String, ByRef errorMsg As String)
    '    Dim removeUnderwritingQuestionAnswers As Boolean = False
    '    CopyQuote(quoteId, removeUnderwritingQuestionAnswers, newQuoteId, errorMsg)
    'End Sub
    'Public Sub CopyQuote(ByVal quoteId As String, ByVal removeUnderwritingQuestionAnswers As Boolean, ByRef newQuoteId As String, ByRef errorMsg As String)

    '    Dim insertCopiedQuoteDatabaseRecord As Boolean = True
    '    Dim archiveOldQuote As Boolean = False
    '    Dim archiveErrorMsg As String = ""
    '    CopyQuote(quoteId, removeUnderwritingQuestionAnswers, newQuoteId, insertCopiedQuoteDatabaseRecord, archiveOldQuote, errorMsg, archiveErrorMsg)
    'End Sub
    'Public Sub CopyQuote(ByVal quoteId As String, ByVal removeUnderwritingQuestionAnswers As Boolean, ByRef newQuoteId As String, ByVal insertCopiedQuoteDatabaseRecord As Boolean, ByVal archiveOldQuote As Boolean, ByRef errorMsg As String, ByRef archiveErrorMsg As String)
    '    If quoteId <> "" AndAlso IsNumeric(quoteId) = True Then
    '        Dim quickQuote As QuickQuoteObject = Nothing
    '        QQxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.QuoteForCopy, quickQuote, errorMsg)
    '        If quickQuote IsNot Nothing Then
    '            Dim prevAgencyCode As String = quickQuote.AgencyCode 'added 10/10/2014
    '            Dim prevAgencyId As String = quickQuote.AgencyId 'added 10/10/2014
    '            Dim prevQuoteNumber As String = quickQuote.QuoteNumber 'added 10/10/2014
    '            quickQuote.QuoteDescription = qqHelper.appendText(quickQuote.QuoteDescription, "Copy " & Date.Now.ToString)
    '            quickQuote.QuoteNumber = "" 'make sure to reset in case it was already in place for previous quote; clientId is fine to persist
    '            quickQuote.Reset_IRPM_Values() 'added 10/5/2012
    '            quickQuote.Reset_Database_Values() 'added 4/2/2014
    '            '4/25/2014 note: diaDriverNums and other Nums could now be copied over to new quote, but they shouldn't be used the 1st rate since there won't be any Diamond objects to reconcile... may need to check subsequent load if using quote xml (since it will try to convert the diaDriverNums to QQ's sequential driver #s)... could probably update logic to only write them in BuildXml if using Diamond services and there's a quote # in place; now being handled by OkayToWriteDiamondNumsForReconciliationInBuildXml() function
    '            'added 10/11/2012 to prevent app gap info from being copied
    '            quickQuote.QuoteOrIssueBound = QuickQuoteObject.QuickQuoteQuoteOrIssueBound.Quote
    '            quickQuote.IssueBoundEffectiveDate = ""
    '            '2/7/2013 - will need to reset database properties (Database_QuoteId, etc.) if ever using QuickQuoteObject as parameter instead of doing lookup; 8/26/2014 note: happening above as-of 4/2/2014

    '            'added 11/6/2014 for new removeUnderwritingQuestionAnswers param
    '            If removeUnderwritingQuestionAnswers = True Then
    '                If quickQuote.PolicyUnderwritings IsNot Nothing Then
    '                    If quickQuote.PolicyUnderwritings.Count > 0 Then
    '                        For Each uw As QuickQuotePolicyUnderwriting In quickQuote.PolicyUnderwritings
    '                            uw.Dispose()
    '                            uw = Nothing
    '                        Next
    '                        quickQuote.PolicyUnderwritings.Clear()
    '                    End If
    '                    quickQuote.PolicyUnderwritings = Nothing
    '                End If
    '                If quickQuote.PackageParts IsNot Nothing AndAlso quickQuote.PackageParts.Count > 0 Then
    '                    For Each pp As QuickQuotePackagePart In quickQuote.PackageParts
    '                        If pp.PolicyUnderwritings IsNot Nothing Then
    '                            If pp.PolicyUnderwritings.Count > 0 Then
    '                                For Each pp_uw As QuickQuotePolicyUnderwriting In pp.PolicyUnderwritings
    '                                    pp_uw.Dispose()
    '                                    pp_uw = Nothing
    '                                Next
    '                                pp.PolicyUnderwritings.Clear()
    '                            End If
    '                            pp.PolicyUnderwritings = Nothing
    '                        End If
    '                    Next
    '                End If
    '            End If

    '            'updated 8/26/2014 so property valuations aren't copied... each new quote should have it's own distinct property valuation
    '            If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
    '                For Each l As QuickQuoteLocation In quickQuote.Locations
    '                    If l.PropertyValuation IsNot Nothing Then
    '                        l.PropertyValuation.Dispose()
    '                        l.PropertyValuation = Nothing
    '                    End If

    '                    'updated 11/6/2014 for new removeUnderwritingQuestionAnswers param
    '                    If removeUnderwritingQuestionAnswers = True Then
    '                        If l.PolicyUnderwritings IsNot Nothing Then
    '                            If l.PolicyUnderwritings.Count > 0 Then
    '                                For Each l_uw As QuickQuotePolicyUnderwriting In l.PolicyUnderwritings
    '                                    l_uw.Dispose()
    '                                    l_uw = Nothing
    '                                Next
    '                                l.PolicyUnderwritings.Clear()
    '                            End If
    '                            l.PolicyUnderwritings = Nothing
    '                        End If
    '                    End If
    '                Next
    '            End If

    '            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, newQuoteId, errorMsg)
    '            If errorMsg = "" Then
    '                'okay; should have newQuoteId
    '                'updated 10/10/2014
    '                If newQuoteId <> "" Then
    '                    Dim fromQuoteArchived As Boolean = False
    '                    If archiveOldQuote = True Then
    '                        QQxml.ArchiveOrUnarchiveQuote(quoteId, QuickQuoteXML.QuickQuoteArchiveType.Archive, archiveErrorMsg)
    '                        If archiveErrorMsg = "" Then
    '                            fromQuoteArchived = True
    '                        End If
    '                    End If
    '                    If insertCopiedQuoteDatabaseRecord = True Then
    '                        Dim copiedQuoteId As String = ""
    '                        Dim insertErrorMsg As String = ""
    '                        QQxml.InsertCopiedQuote(quoteId, prevAgencyId, prevAgencyCode, prevQuoteNumber, newQuoteId, quickQuote.AgencyId, quickQuote.AgencyCode, fromQuoteArchived, copiedQuoteId, insertErrorMsg)
    '                    End If
    '                End If
    '            Else
    '                'error will return to user
    '            End If
    '        Else
    '            'get error will return to user
    '        End If
    '    Else
    '        errorMsg = "invalid format for quoteId"
    '    End If
    'End Sub
    'Public Sub TestCopyQuoteForProd() 'added 5/14/2015 for prod support request
    '    Dim newQuoteId As String = ""
    '    Dim copyError As String = ""
    '    'QQxml.CopyQuote("44284", True, newQuoteId, copyError) 'worked successfully on 1st try... newQuoteId 44396; will need to archive this one as it should've been put under a different code
    '    Dim archiveError As String = ""
    '    Dim clearProducerInfoIfDifferentAgency As Boolean = True 'optional param defaulted to True
    '    Dim clearClientIdIfDifferentAgency As Boolean = True 'optional param defaulted to True; okay to use False if all users in both codes have access to the other code
    '    Dim notePreviousInfoInDescriptionIfDifferentAgency As Boolean = True 'optional param defaulted to True
    '    Dim insertCopiedQuoteDatabaseRecords As Boolean = True
    '    Dim archiveOldQuotes As Boolean = True
    '    QQxml.CopyQuoteToAgency("44284", "6717-2797", "348", newQuoteId, insertCopiedQuoteDatabaseRecords, archiveOldQuotes, copyError, archiveError, clearProducerInfoIfDifferentAgency, clearClientIdIfDifferentAgency)
    '    If newQuoteId <> "" AndAlso copyError = "" Then

    '    End If

    '    'Dim archiveError As String = ""
    '    'QQxml.ArchiveOrUnarchiveQuote("44396", QuickQuoteXML.QuickQuoteArchiveType.Archive, archiveError)
    '    'If archiveError <> "" Then

    '    'End If
    'End Sub
    Private Sub TestLoadQuote(ByVal quoteId As String, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(quoteId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
            If quickQuote IsNot Nothing Then
                Dim strQuickQuote As String = quickQuote.ToString

                'testing IRPM stuff 8/14/2015
                'If quickQuote.LobType = QuickQuoteObject.QuickQuoteLobType.Farm Then
                '    Dim irpmFactor As Decimal = qqHelper.IRPM_CreditDebitFactor(quickQuote)
                '    If irpmFactor = CDec(1) Then
                '        'nothing changed or net is the same
                '    Else
                '        If irpmFactor < CDec(1) Then
                '            'less than 1
                '            'hasDiscounts = True
                '            'RatingDiscounts.Add("IRPM")
                '            'totalDiscountCount += 1
                '        Else
                '            'more than 1
                '            'hasSurcharges = True
                '            'RatingSurcharges.Add("IRPM")
                '            'totalSurchargeCount += 1
                '        End If
                '    End If
                'End If

                'testing e2Value stuff 8/28/2015; everything's fine... forgot to send qq to existing calls to ValuationPropertyTypeDefaultByInfo
                'Dim qqpvHelper As New QuickQuotePropertyValuationHelperClass
                'Dim propertyType1 As QuickQuotePropertyValuationHelperClass.ValuationPropertyType = qqpvHelper.ValuationPropertyTypeDefaultByInfo(1, 1, quickQuote)
                'If propertyType1 <> QuickQuotePropertyValuationHelperClass.ValuationPropertyType.None Then

                'End If
                'Dim propertyType2 As QuickQuotePropertyValuationHelperClass.ValuationPropertyType = qqpvHelper.ValuationPropertyTypeDefaultByInfo(1, 2, quickQuote)
                'If propertyType2 <> QuickQuotePropertyValuationHelperClass.ValuationPropertyType.None Then

                'End If
                'Dim propertyType3 As QuickQuotePropertyValuationHelperClass.ValuationPropertyType = qqpvHelper.ValuationPropertyTypeDefaultByInfo(1, 3, quickQuote)
                'If propertyType3 <> QuickQuotePropertyValuationHelperClass.ValuationPropertyType.None Then

                'End If
            End If
        End If

    End Sub
    Private Sub TestLoadRatedQuote(ByVal quoteId As String, Optional ByVal redirectToSummary As Boolean = False) 'added 3/30/2016
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(quoteId) = True Then
            'get existing
            Dim rateType As QuickQuoteXML.QuickQuoteSaveType = Nothing
            qqxml.GetRatedQuote(quoteId, quickQuote, rateType, err)
            If err <> "" Then
                err = "" 'just reset
            End If
            If quickQuote IsNot Nothing Then
                Dim strQuickQuote As String = quickQuote.ToString
                'Select Case rateType
                '    Case QuickQuoteXML.QuickQuoteSaveType.AppGap

                '    Case QuickQuoteXML.QuickQuoteSaveType.Quote

                '    Case QuickQuoteXML.QuickQuoteSaveType.IRPM, QuickQuoteXML.QuickQuoteSaveType.QuoteForCopy

                'End Select
                If redirectToSummary = True Then
                    Response.Redirect("DiamondQuoteSummary.aspx?quoteId=" & quoteId)
                End If
            End If
        End If
    End Sub
    Private Sub RulesTest() 'added 7/7/2015 for testing HOM rule in QA
        'Dim qqxml As New QuickQuoteXML
        'Dim err As String = ""

        'Dim strQQ As String = ""
        'quickQuote = Nothing

        ''get existing
        'qqxml.GetQuoteForSaveType("34478", QuickQuoteXML.QuickQuoteSaveType.AppGap, quickQuote, err)
        'If err <> "" Then
        '    err = "" 'just reset
        'End If
        'If quickQuote IsNot Nothing Then
        '    Dim success As Boolean = False
        '    Dim polNum As String = ""
        '    success = qqxml.DiamondService_SuccessfullyPromotedQuote(quickQuote, polNum, "", err, True)
        '    If success = True Then

        '    End If

        'End If

        'problem was due to quotetype_id... validation is looking for 2 (full quote), but it appears this is being changed to 0 by Diamond whenever the Promote happens... which is why the validation triggered in portal since it was called before Promote
        'Dim img As Diamond.Common.Objects.Policy.Image = Nothing
        'img = QuickQuoteHelperClass.AcquirePolicyImage(730296, 1, 5285)
        'If img IsNot Nothing Then
        '    Dim resp As Diamond.Common.Services.Messages.PolicyService.Issue.Response = Nothing
        '    resp = QQxml.IssueQuote(img)
        '    If resp IsNot Nothing Then

        '    End If
        'End If
    End Sub
    Public Sub XmlToImageTest(Optional ByVal callSubmitRate As Boolean = False)
        Try
            Dim docFolder As String = "C:\Users\domin\Documents\"
            Dim xmlDoc As New XmlDocument()
            xmlDoc.Load(docFolder & "convertedImageForSubmit.xml")
            If xmlDoc IsNot Nothing Then
                Dim quoteImage As Diamond.Common.Objects.Policy.Image
                quoteImage = Diamond.Common.Objects.InsObject.FromDataContract(Of Diamond.Common.Objects.Policy.Image)(xmlDoc.InnerXml)
                If quoteImage IsNot Nothing Then
                    If callSubmitRate = True Then
                        QuickQuoteHelperClass.CheckDiamondServicesToken()

                        Dim ratedImage As Diamond.Common.Objects.Policy.Image = Nothing 'added initialization 4/11/2014
                        Dim ex As New Exception '4/11/2014 note: shouldn't need to instantiate
                        ex = Nothing
                        Dim dv As New Diamond.Common.Objects.DiamondValidation '4/11/2014 note: shouldn't need to instantiate
                        dv = Nothing
                        Dim submitRateSuccess As Boolean = False
                        Dim strDiamondValidationXml As String = ""
                        Dim strImageXml As String = ""

                        'this call is specific to CPP
                        ratedImage = IFM.DiamondServices.Services.Policy.SubmitRate(quoteImage, Integer.Parse(1),
                                                                        Integer.Parse(16), Integer.Parse(23),
                                                                        Date.Today, Date.Today,
                                                                        Integer.Parse(2),
                                                                        True, True, True, True, submitRateSuccess,
                                                                        ex, dv)

                        If ratedImage IsNot Nothing Then
                            strImageXml = QQxml.XmlForInsureSoftObject(ratedImage)

                            Dim ratedImagePath As String = docFolder & "SubmitRate_RatedImage" & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
                            ratedImage.DumpToFile(ratedImagePath)
                        End If
                        If dv IsNot Nothing Then
                            strDiamondValidationXml = QQxml.XmlForInsureSoftObject(dv)

                            Dim diamondValidationPath As String = docFolder & "SubmitRate_DiamondValidation" & "_" & Date.Now.ToString("s").Replace(":", "").Replace("-", "").Replace("/", "").Replace(" ", "") & ".xml" 'Date.Now.ToString("s") example = 2010-05-18T16:47:55 (20100518T164755)
                            dv.DumpToFile(diamondValidationPath)
                        End If
                        'note: was able to duplicate Bob's error - The size necessary to buffer the XML content exceeded the buffer quota.

                    End If
                End If
            End If
        Catch ex As Exception
            Dim errMessage As String = ex.ToString
            If errMessage <> "" Then

            End If
        End Try
    End Sub
    Public Sub TestParams(ByVal locNum As Integer, Optional ByVal TorF As Boolean = False)

    End Sub
    Public Sub TestParams(ByVal locNum As Integer, ByVal buildNum As Integer, Optional ByVal TorF As Boolean = False)

    End Sub
    Public Sub TestParams2(ByVal locNum As Integer, ByVal TorF As Boolean)

    End Sub
    Public Sub TestParams2(ByVal locNum As Integer, ByVal buildNum As Integer)

    End Sub

    Private Sub ProdAcreageFix() 'for prod support 11/20/2015
        'Dim qId As String = "71489"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.Client IsNot Nothing AndAlso qq.Client.ClientId = "676287" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
        '            For Each l As QuickQuoteLocation In qq.Locations
        '                If l.Acreages IsNot Nothing AndAlso l.Acreages.Count > 0 Then
        '                    For Each a As QuickQuoteAcreage In l.Acreages
        '                        If qqHelper.IsZeroPremium(a.Acreage) = True Then
        '                            a.Acreage = "1"
        '                        End If
        '                    Next
        '                End If
        '            Next
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub
    Private Sub TestCreditCardPaymentForIVR() 'currently using data from Patch
        Dim success As Boolean = False
        QuickQuoteHelperClass.CheckDiamondServicesToken() 'failed w/o this, but so far unable to use different user than logged-in (Diamond just needs UsersId, LoginName, and LoginDomain in order to post as a specific user)

        Dim request As New Diamond.Common.Services.Messages.BillingService.ApplyCash.Request
        Dim response As New Diamond.Common.Services.Messages.BillingService.ApplyCash.Response

        With request.RequestData
            .ApplyCash = New Diamond.Common.Objects.Billing.ApplyCash
            With .ApplyCash
                .AgencyId = 17 'code 6013-1840
                .CashAmount = CDec(0.01) 'decimal
                .CheckDate = Date.Today
                .CashInSource = Diamond.Common.Enums.Billing.BillingCashInSource.CreditCard '11; not one of the values are apps send
                .CashType = Diamond.Common.Enums.Billing.BillingCashType.Payment '1
                .Validated = True
                .PolicyNo = "FAR1026599" '
                .PolicyId = 782522 '
                .PolicyImageNum = 1 '
                .ReasonId = Diamond.Common.Enums.Billing.BillingReason.None '0

                '.UserSelected = True 'not sure what this does; not needed (Diamond just needs UsersId, LoginName, and LoginDomain in order to post as a specific user)
                .UsersId = 5538 '
                .LoginName = "IVR_User" '
                .LoginDomain = "ifm.ifmic" '
            End With
        End With

        Using billingProxy As New Diamond.Common.Services.Proxies.BillingServiceProxy
            Try
                response = billingProxy.ApplyCash(request)
            Catch ex As Exception
                'likely unable to get security token unless db or business server is down
            End Try
        End Using

        If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing Then
            With response.ResponseData
                If .Success = True Then
                    success = True
                Else
                    'failed; see validation items
                End If
            End With
        End If
    End Sub
    'added 1/26/2016
    Private Sub TestPasswordDecryption()
        Dim success As Boolean = False
        QuickQuoteHelperClass.CheckDiamondServicesToken() 'failed w/o this, but so far unable to use different user than logged-in (Diamond just needs UsersId, LoginName, and LoginDomain in order to post as a specific user)

        'Dim request As New Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Request
        'Dim response As New Diamond.Common.Services.Messages.SecurityService.DecryptTaxNumber.Response

        'With request.RequestData
        '    '.EncryptedText = "?ku??????_???"
        '    .EncryptedText = "h????oF!?+???" 'Test123
        '    .EncryptionId = 0
        '    '.EncryptionKeyType = Diamond.Common.Enums.Security.EncryptionKeyType.None
        '    .EncryptionKeyType = Diamond.Common.Enums.Security.EncryptionKeyType.Policy
        'End With

        'Using securityProxy As New Diamond.Common.Services.Proxies.SecurityServiceProxy
        '    Try
        '        response = securityProxy.DecryptTaxNumber(request)
        '    Catch ex As Exception
        '        'likely unable to get security token unless db or business server is down
        '    End Try
        'End Using

        'If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing Then
        '    With response.ResponseData
        '        If String.IsNullOrEmpty(.PlainText) = False Then
        '            success = True
        '        Else
        '            'unable to decrypt or nothing was there originally
        '        End If
        '    End With
        'End If

        'Dim request As New Diamond.Common.Services.Messages.SystemEmailService.DecryptPassword.Request
        'Dim response As New Diamond.Common.Services.Messages.SystemEmailService.DecryptPassword.Response

        'With request.RequestData
        '    '    '.EncryptedPassword = "?ku??????_???"
        '    '    .EncryptedPassword = "h????oF!?+???" 'Test123
        '    .EncryptedPassword = ""
        'End With

        'Using securityProxy As New Diamond.Common.Services.Proxies.SecurityServiceProxy
        '    Try
        '        response = securityProxy.DecryptTaxNumber(request)
        '    Catch ex As Exception
        '        'likely unable to get security token unless db or business server is down
        '    End Try
        'End Using

        'If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing Then
        '    With response.ResponseData
        '        If String.IsNullOrEmpty(.PlainText) = False Then
        '            success = True
        '        Else
        '            'unable to decrypt or nothing was there originally
        '        End If
        '    End With
        'End If

        'Dim encryptedString As String = "h????oF!?+???" 'Test123
        'Dim decryptedString As String = ""

        'Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
        '    With sqlSO
        '        .queryOrStoredProc = "select U.password from Users as U with (nolock) where U.login_name = 'domin'"

        '        Dim dr As SqlClient.SqlDataReader = .GetDataReader
        '        If dr IsNot Nothing AndAlso dr.HasRows = True Then
        '            dr.Read()
        '            encryptedString = dr.Item("password").ToString.Trim
        '        End If
        '    End With
        'End Using

        '--the following 2 examples are for encryption (btyes for string-->hash [bytes] for bytes-->string for hash [bytes]; string-to-bytes-to-hash-to-string)
        'same as below
        'encryptedString = "Test123"
        'Dim encoding As New ASCIIEncoding
        'Dim provider As New System.Security.Cryptography.MD5CryptoServiceProvider
        'Dim bytes As Byte() = encoding.GetBytes(encryptedString)
        'Dim buffer As Byte() = provider.ComputeHash(bytes)
        'decryptedString = encoding.GetString(buffer)

        'same as above
        'decryptedString = "Test123" 'h????oF!?+???
        'encryptedString = encoding.GetString(provider.ComputeHash(encoding.GetBytes(decryptedString)))

        'decryption should be something like string-to-hash-to-bytes-to-string... looks like a hash cannot be decrypted, so we can't see what our passwords are, but we can compare hashes to see if one equals another
        'Dim encoding As New ASCIIEncoding
        'Dim provider As New System.Security.Cryptography.MD5CryptoServiceProvider



    End Sub

    'added 1/28/2016 for testing various BillingServices
    Private Sub TestBillingService()
        QuickQuoteHelperClass.CheckDiamondServicesToken()

        Dim req As New Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Request
        Dim res As New Diamond.Common.Services.Messages.BillingService.GetAccountBalance.Response

        With req.RequestData
            .PolicyId = 0

        End With

        Using proxy As New Diamond.Common.Services.Proxies.BillingServiceProxy
            res = proxy.GetAccountBalance(req)
        End Using

        If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
            With res.ResponseData
                If .AccountBalance IsNot Nothing Then
                    With .AccountBalance
                        '.Current 'dec
                        '.FutureInstallments 'dec
                        '.FutureMiscCharges 'dec
                        '.PolicyId 'int
                        '.Total 'dec
                    End With
                End If
            End With
        End If
    End Sub
    'added 2/1/2016 for 531 troubleshooting
    Private Sub TestTokenService()
        If Diamond.Common.Services.Proxies.ProxyBase.DiamondSecurityToken Is Nothing Then
            Dim token As Diamond.Common.Services.DiamondSecurityToken = Nothing

            Dim req As New Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Request
            Dim res As New Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsernamePassword.Response

            With req.RequestData
                .LoginName = QuickQuoteHelperClass.DiamondUsername
                .Password = QuickQuoteHelperClass.DiamondPassword
            End With

            Using proxy As New Diamond.Common.Services.Proxies.LoginServiceProxy
                res = proxy.GetDiamTokenForUsernamePassword(req)
            End Using

            If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
                With res.ResponseData
                    If .DiamondSecurityToken IsNot Nothing Then
                        token = .DiamondSecurityToken
                    End If
                End With
            End If

            If token IsNot Nothing Then
                Diamond.Common.Services.Proxies.ProxyBase.DiamondSecurityToken = token
            End If
        End If
    End Sub

    'added 2/18/2016 for testing
    Private Function IsValidDiamondLogin_CheckHash(ByVal username As String, ByVal password As String) As Boolean
        Dim isvalid As Boolean = False

        If String.IsNullOrEmpty(username) = False Then
            Dim dbPass As String = ""
            Using sqlSO As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
                With sqlSO
                    .queryOrStoredProc = "select U.password from Users as U with (nolock) where U.login_name = '" & username & "'"

                    Dim dr As SqlClient.SqlDataReader = .GetDataReader
                    If dr IsNot Nothing AndAlso dr.HasRows = True Then
                        dr.Read()
                        dbPass = dr.Item("password").ToString.Trim
                    End If
                End With
            End Using

            Dim encoding As New ASCIIEncoding
            Dim provider As New System.Security.Cryptography.MD5CryptoServiceProvider
            Dim encryptedPass As String = encoding.GetString(provider.ComputeHash(encoding.GetBytes(password)))


            If dbPass = encryptedPass Then
                isvalid = True
            End If
        End If

        Return isvalid
    End Function

    'added 2/23/2016 for testing Verisk Protection Class Call
    'Private Sub TestProtectionClassImportService()
    '    QuickQuoteHelperClass.CheckDiamondServicesToken()

    '    Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Request
    '    Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.ProtectionClassImport.Response

    '    With req.RequestData
    '        .FileName = ""
    '        .InitialLoad = True
    '        .Rows = New Generic.List(Of String)
    '    End With

    '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
    '        res = proxy.ProtectionClassImport(req)
    '    End Using

    '    If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
    '        With res.ResponseData

    '        End With
    '    End If
    'End Sub
    'Private Sub TestProcessISOPPCService()
    '    QuickQuoteHelperClass.CheckDiamondServicesToken()

    '    Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Request
    '    Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Response

    '    With req.RequestData
    '        .IncomingDataRaw = ""
    '        .IncomingDataXML = ""

    '    End With

    '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
    '        res = proxy.ProcessISOPPC(req)
    '    End Using

    '    If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
    '        With res.ResponseData

    '        End With
    '    End If
    'End Sub
    'Private Sub TestPPCLookupByLocationService()
    '    QuickQuoteHelperClass.CheckDiamondServicesToken()

    '    '2/23/2016 note: if location is the main input param and there are no other output params besides location, then Diamond functionality is presumably setting the protection class and sending it back in the response location

    '    Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Request
    '    Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Response

    '    With req.RequestData
    '        If .Location Is Nothing Then
    '            .Location = New Diamond.Common.Objects.Policy.Location
    '        End If
    '        With .Location

    '        End With
    '        .PolicyId = 0
    '        .PolicyImageNum = 0
    '        .VersionId = 0

    '    End With

    '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
    '        res = proxy.PPCLookupByLocation(req)
    '    End Using

    '    If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
    '        With res.ResponseData
    '            If .Location IsNot Nothing Then
    '                With .Location

    '                End With
    '            End If
    '        End With
    '    End If
    'End Sub

    'added 2/23/2016 for comparative rater testing
    'Private Sub TestPPCLookupByLocationService()
    '    QuickQuoteHelperClass.CheckDiamondServicesToken()

    '    '2/23/2016 note: if location is the main input param and there are no other output params besides location, then Diamond functionality is presumably setting the protection class and sending it back in the response location

    '    Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Request
    '    Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.PPCLookupByLocation.Response

    '    With req.RequestData
    '        If .Location Is Nothing Then
    '            .Location = New Diamond.Common.Objects.Policy.Location
    '        End If
    '        With .Location

    '        End With
    '        .PolicyId = 0
    '        .PolicyImageNum = 0
    '        .VersionId = 0

    '    End With

    '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
    '        res = proxy.PPCLookupByLocation(req)
    '    End Using

    '    If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
    '        With res.ResponseData
    '            If .Location IsNot Nothing Then
    '                With .Location

    '                End With
    '            End If
    '        End With
    '    End If
    'End Sub
    Private Sub HandleIntegrationToken()
        Dim integrationTokenQueryString As String = MyBase.Request.QueryString("IT")
        If String.IsNullOrEmpty(integrationTokenQueryString) Then Return ' No integration token provided

        Dim integrationToken As Diamond.Common.Objects.ThirdParty.IntegrationToken = Nothing

        Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
            Dim request As New Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Request
            request.RequestData.Token = integrationTokenQueryString ' Set the GUID provided in the query string

            Dim response As Diamond.Common.Services.Messages.ThirdPartyService.LoadIntegrationToken.Response = proxy.LoadIntegrationToken(request)

            If response.ResponseData IsNot Nothing _
                    AndAlso response.ResponseData.IntegrationToken IsNot Nothing Then
                integrationToken = response.ResponseData.IntegrationToken
            End If
        End Using

        If integrationToken Is Nothing Then
            ' The integration token has expired (by default the timeout is 30 minutes). (2/23/2016 note: IS will be increasing the time that these are stored in the database {from a day or maybe just the session expiration to 5 days} so we can still pull the policy # even if the token has since expired)
            Return
        End If

        Dim userId As Integer = integrationToken.UsersId ' Authenticated User Id from the comparative rater call
        Dim policyNumber As String = String.Empty

        Select Case integrationToken.IntegrationActionType
            Case Diamond.Common.Enums.IntegrationActionType.OpenPolicy '2
                ' For your application, you don't technically have to check the actiontype, since it will always be open policy
                policyNumber = integrationToken.CustomData1 ' The policynumber is stored here for OpenPolicy action
        End Select

        ' Now get the security token
        Dim securityToken As Diamond.Common.Services.DiamondSecurityToken = Nothing

        Using proxy As New Diamond.Common.Services.Proxies.LoginServiceProxy
            Dim request As New Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Request
            request.RequestData.UsersId = Diamond.Web.BaseControls.Common.IntegrationToken.UsersId
            request.RequestData.BusinessInterfaceSourceId = Diamond.Common.Enums.Security.BusinessInterfaceSourceType.DiamondAgencyPortal

            Dim response As Diamond.Common.Services.Messages.LoginService.GetDiamTokenForUsersId.Response = proxy.GetDiamTokenForUsersId(request)

            If response.ResponseData IsNot Nothing Then
                securityToken = response.ResponseData.DiamondSecurityToken
            End If
        End Using

        ' Set the security token on DCS ProxyBase
        Diamond.Common.Services.Proxies.ProxyBase.DiamondSecurityToken = securityToken


        ' Load the policy number as you did before:
    End Sub

    'added 3/10/2016 for prod support... clients for QCAP017755 (quoteId 83298; clientId 712455) and QWCP016822 (quoteId 83315; clientId 712452) were deleted from Diamond, so we need to update them to use client for QCPP026169 (quoteId 89553; clientId 712461)
    Private Sub UpdateQuoteClients()
        'fixed 3/10/2016
        'Dim qId As String = "83298" 'QCAP017755
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.Client IsNot Nothing AndAlso qq.Client.ClientId = "712455" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        With qq.Client
        '            .ClientId = "712461"
        '            If .Name IsNot Nothing Then
        '                With .Name
        '                    .DateBusinessStarted = "5/1/1960"
        '                    .DoingBusinessAsName = "VALPO VELVET SHOPPE"
        '                End With
        '            End If
        '        End With

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If

        'fixed 3/10/2016
        'qId = "83315" 'QWCP016822
        'qq = Nothing
        'eMsg = ""
        'saveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.Client IsNot Nothing AndAlso qq.Client.ClientId = "712452" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        With qq.Client
        '            .ClientId = "712461" 'client for QCPP026169 (quoteId 89553)
        '            If .Name IsNot Nothing Then
        '                With .Name
        '                    .DateBusinessStarted = "5/1/1960"
        '                    .DoingBusinessAsName = "VALPO VELVET SHOPPE"
        '                End With
        '            End If
        '        End With

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub

    Private Sub FarmProgramTypeFix() 'for prod support 5/13/2016
        'Dim qId As String = "97047"
        'Dim qq As QuickQuoteObject = Nothing
        'Dim eMsg As String = ""
        'Dim saveType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
        'QQxml.GetQuoteForSaveType(qId, saveType, qq, eMsg)
        'If qq IsNot Nothing Then
        '    If qq.Client IsNot Nothing AndAlso qq.Client.ClientId = "753842" Then 'just to make sure the quoteId wasn't fat-fingered
        '        Dim strQuote As String = ""
        '        Dim ratedQQ As QuickQuoteObject = Nothing
        '        Dim strRatedQuote As String = ""

        '        If qq.ProgramTypeId = "" OrElse qq.ProgramTypeId = "0" Then
        '            qq.ProgramTypeId = "6"
        '        End If

        '        If qq.Locations IsNot Nothing AndAlso qq.Locations.Count > 0 Then
        '            For Each l As QuickQuoteLocation In qq.Locations
        '                If l.ProgramTypeId = "" OrElse l.ProgramTypeId = "0" Then
        '                    l.ProgramTypeId = "6"
        '                End If
        '                If l.FarmTypeFieldCrops = False Then
        '                    l.FarmTypeFieldCrops = True
        '                End If
        '            Next
        '        End If

        '        'QQxml.RateQuoteAndSave(saveType, qq, strQuote, ratedQQ, strRatedQuote, qq.Database_QuoteId, eMsg)
        '        QQxml.SaveQuote(saveType, qq, qq.Database_QuoteId, eMsg)
        '        If eMsg = "" Then

        '        End If
        '    End If
        'End If
    End Sub

    'test code ported over 7/29/2016 from copy used for troubleshooting 531.003.400
    'added 7/13/2016 for 531 troubleshooting of HOM/DFR error introduced w/ 531.003.400
    Private Sub RemoveOperatorsAndReSaveOrReRate(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote)
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        End If

        If quickQuote IsNot Nothing Then

            'logic to remove all operators
            If quickQuote.Operators IsNot Nothing AndAlso quickQuote.Operators.Count > 0 Then
                For Each o As QuickQuoteOperator In quickQuote.Operators
                    o.Dispose()
                    o = Nothing
                Next
                quickQuote.Operators.Clear()
            End If
            If quickQuote.Locations IsNot Nothing AndAlso quickQuote.Locations.Count > 0 Then
                For Each l As QuickQuoteLocation In quickQuote.Locations
                    If l.RvWatercrafts IsNot Nothing AndAlso l.RvWatercrafts.Count > 0 Then
                        For Each rv As QuickQuoteRvWatercraft In l.RvWatercrafts
                            If rv.AddedOperators IsNot Nothing AndAlso rv.AddedOperators.Count > 0 Then
                                For Each o As QuickQuoteOperator In rv.AddedOperators
                                    o.Dispose()
                                    o = Nothing
                                Next
                                rv.AddedOperators.Clear()
                            End If
                            If rv.Operators IsNot Nothing AndAlso rv.Operators.Count > 0 Then
                                For Each o As QuickQuoteOperator In rv.Operators
                                    o.Dispose()
                                    o = Nothing
                                Next
                                rv.Operators.Clear()
                            End If
                            If rv.AssignedOperatorNums IsNot Nothing AndAlso rv.AssignedOperatorNums.Count > 0 Then
                                For Each n As Integer In rv.AssignedOperatorNums
                                    n = Nothing
                                Next
                                rv.AssignedOperatorNums.Clear()
                            End If
                        Next
                    End If
                Next
            End If

            If saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
                qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
                If err = "" Then
                    'okay

                Else
                    'error
                End If
            Else
                qqxml.RateQuoteAndSave(saveOrRateType, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
                'qqxml.RateQuoteAndSave(saveOrRateType, quickQuote, qId, err) 'normal method
                If err = "" Then
                    'okay
                    Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


                Else
                    'error
                End If
            End If
        End If

    End Sub
    'added 7/13/2016 for 531 troubleshooting of HOM/DFR error introduced w/ 531.003.400
    Private Sub HOM_save_test_new_simple_without_Operators(ByVal qId As String, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal updateQuickQuoteEntities As Boolean = False) 'added 7/26/2013; added optional param 8/8/2013; 12/23/2014 - added optional updateQuickQuoteEntities param
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        Dim ratedQQ As QuickQuoteObject = Nothing
        Dim strRatedQQ As String = ""

        If qId <> "" AndAlso IsNumeric(qId) = True Then
            'get existing
            qqxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            If err <> "" Then
                err = "" 'just reset
            End If
        Else
            'get new
        End If

        If quickQuote Is Nothing Then
            quickQuote = New QuickQuoteObject
            With quickQuote '12/5/2013: added inner WITH block because started getting object reference error when setting a property on 1st-time quote; still caught error after completing inner WITH block; switched to 2 separate ones
                .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal

                '.Client.ClientId = ""

                .QuoteDescription = "Test Desc"

                .RiskGrade = "1"
                .RiskGradeLookupId = "74"

                'Policyholder information will automatically be populated by Client
                'updated 7/30/2014 to set policyholder information... and then use Copy method below to set Client info
                With .Policyholder
                    With .Name
                        .FirstName = "Don"
                        .LastName = "Home"
                        .SexId = "1"
                        .TypeId = "1"
                        .TaxNumber = "123456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH test"
                        .BirthDate = "1/1/1982"
                        .DriversLicenseDate = "1/1/2013"
                        .DriversLicenseNumber = "1234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    With .Address
                        .HouseNum = "567"
                        .StreetName = "Home Boulevard"
                        .City = "Fishers"
                        .Zip = "46038"
                        .County = "Hamilton"
                    End With

                    'added 12/22/2014 for testing Operator emails/phones... getting PK constraint errors when PHs get copied to Ops
                    If .Emails Is Nothing Then
                        .Emails = New List(Of QuickQuoteEmail)
                    End If
                    If .Emails.Count = 0 Then
                        Dim e As New QuickQuoteEmail
                        With e
                            .Address = "test@test.com"
                            .TypeId = "1" 'Home
                        End With
                        .Emails.Add(e)
                    End If
                    If .Phones Is Nothing Then
                        .Phones = New List(Of QuickQuotePhone)
                    End If
                    If .Phones.Count = 0 Then
                        Dim p As New QuickQuotePhone
                        With p
                            .Number = "(317)781-2233"
                            .Extension = ""
                            .TypeId = "1" 'Home
                        End With
                        .Phones.Add(p)
                    End If
                End With

                With .Policyholder2
                    With .Name
                        .FirstName = "#2"
                        .LastName = "Home"
                        .SexId = "2"
                        .TypeId = "1"
                        .TaxNumber = "223456789"
                        .TaxTypeId = "1"
                        .EntityTypeId = "1" 'Individual
                        .DescriptionOfOperations = "PH2 test"
                        .BirthDate = "2/1/1982"
                        .DriversLicenseDate = "2/1/2013"
                        .DriversLicenseNumber = "2234-56-7890"
                        .MaritalStatusId = "2" '1=Single; 2=Married
                    End With
                    .Address = quickQuote.Policyholder.Address
                    .Phones = quickQuote.Policyholder.Phones
                End With
                .CopyPolicyholdersToClients() 'added 7/30/2014

                .CopyPolicyholdersToApplicants() 'added 7/30/2014; original logic is in IF below
                '10/15/2014 note: could also use .CanUseApplicantNumForApplicantReconciliation prop if needed
                If .Applicants Is Nothing Then
                    .Applicants = New List(Of QuickQuoteApplicant)
                    Dim a As New QuickQuoteApplicant
                    With a
                        .Name = quickQuote.Client.Name 'copied from Client
                        .Name.NameAddressSourceId = "28" 'Applicant
                        .Address = quickQuote.Client.Address 'copied from Client
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        .RelationshipTypeId = "8" 'Policyholder
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(a.Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                    .Applicants.Add(a)
                ElseIf .Applicants.Count > 0 Then
                    With .Applicants(0) 'should already have name, address, and relationshiptypeid set from Copy method above
                        .BusinessStartedDate = "8/1/2012"
                        .EducationTypeId = "4" '0=N/A; 1=High School; 2=Tech; 3=Vocational; 4=College Graduate (*8/6/2013 - not getting set in Diamond for some reason)
                        .Employer = "Test Employer"
                        .OccupationTypeId = "23" 'Professional
                        .PurchaseDate = "7/1/2012"
                        With .ResidenceInfo
                            .CurrentResidenceTypeId = "4" 'Apartment
                            .Owned = False

                            .ResidenceInfoDetails = New List(Of QuickQuoteResidenceInfoDetail)
                            With .ResidenceInfoDetails
                                Dim d1 As New QuickQuoteResidenceInfoDetail
                                With d1
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev1"
                                    .ResidenceInfoDetailTypeId = "1" 'Previous1
                                    .YearsAtPreviousAddress = "1"
                                End With
                                .Add(d1)
                                Dim d2 As New QuickQuoteResidenceInfoDetail
                                With d2
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev2"
                                    .ResidenceInfoDetailTypeId = "2" 'Previous2
                                    .YearsAtPreviousAddress = "3"
                                End With
                                .Add(d2)
                                Dim d3 As New QuickQuoteResidenceInfoDetail
                                With d3
                                    .Address = qqHelper.CloneObject(quickQuote.Applicants(0).Address)
                                    .Address.StreetName &= " Prev3"
                                    .ResidenceInfoDetailTypeId = "3" 'Previous3
                                    .YearsAtPreviousAddress = "2"
                                End With
                                .Add(d3)
                            End With

                            .YearsAtCurrentAddress = "2"
                        End With
                        .SelfEmployedInfo = "self employment info"
                        .SpouseEmployer = "N/A"
                        .SpouseOccupationTypeId = "30" 'Unemployed
                        .StandardIndustrialClassification = "sic"
                        .USCitizenTypeId = "1" 'Yes
                        .YearsWithCurrentEmployer = "8"
                        .YearsWithPriorEmployer = "2"
                    End With
                End If
                'added 10/30/2014
                .CopyPolicyholdersToOperators()
                If .Operators Is Nothing Then
                    'could manually add if above fails
                ElseIf .Operators.Count > 0 Then
                    'could add more information if needed
                End If
            End With
        End If

        With quickQuote 'added 12/5/2013 (needed 2 separate ones to encapsulate 1st time instantiation IF block and regular stuff)
            .LobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal 'added 12/5/2013 to see if latest failure was due to changing HOM version_id from 11 to 45; changed back to 11 in xml and reset type here so it would use 11 again; EOD was running when latest attempt happened; didn't make a difference so changed back to 45
            .EffectiveDate = Date.Today.ToString

            'for tier override (should only be used for testing); removed 7/30/2014
            '.TierTypeId = "1" 'Uniform (probably not needed)
            '.UseTierOverride = True
            '.TierAdjustmentTypeId = "13" 'N/A=0; 1=13

            'policy level covs
            .PersonalLiabilityLimitId = "262" '100,000 (Location #1 - Invalid Coverage E limit selected for Homeowners form.)
            .MedicalPaymentsLimitid = "170" '1,000

            'added 12/22/2014 for testing... since code will automatically pull ratedXml (when available), which doesn't include Operator emails/phones; 12/22/2014 note: would have same problem w/ Applicants except for the fact that the PK is policyId/policyImageNum/applicantNum/emailId for that one instead of policyId/policyImageNum/applicantNum/emailTypeId like the rest (drivers should have same problem as BillingAddressee and Operators)
            '.CopyPolicyholdersToApplicants()
            '.CopyPolicyholdersToOperators()

            'added 10/30/2014
            If .CanUseOperatorNumForOperatorReconciliation = False Then

            Else
                'add logic here to change existing operator(s)
                Dim hasNonPolicyholderOperator As Boolean = False
                Dim nonPolicyholderOperatorCount As Integer = 0
                If .Operators IsNot Nothing AndAlso .Operators.Count > 0 Then
                    For Each o As QuickQuoteOperator In .Operators
                        If o.RelationshipTypeId <> "" AndAlso IsNumeric(o.RelationshipTypeId) = True AndAlso (CInt(o.RelationshipTypeId) = 8 OrElse CInt(o.RelationshipTypeId) = 5) Then 'Policyholder or Policyholder #2

                        Else
                            hasNonPolicyholderOperator = True
                            nonPolicyholderOperatorCount += 1
                        End If
                    Next
                End If
                If hasNonPolicyholderOperator = False Then
                    If .Operators Is Nothing Then
                        .Operators = New List(Of QuickQuoteOperator)
                    End If
                    Dim opNew As New QuickQuoteOperator
                    With opNew
                        .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                        .Name.NameAddressSourceId = "60"
                        .Name.LastName &= "_opNew"
                        .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                        .Address.StreetName &= "_opNew"
                        .RelationshipTypeId = "11" 'Not Related to Policyholder
                    End With
                    .Operators.Add(opNew)
                Else
                    If nonPolicyholderOperatorCount = 1 Then
                        Dim opNew2 As New QuickQuoteOperator
                        With opNew2
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = "60"
                            .Name.LastName &= "_opNew2"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_opNew2"
                            .RelationshipTypeId = "11" 'Not Related to Policyholder
                        End With
                        .Operators.Add(opNew2)
                    ElseIf nonPolicyholderOperatorCount = 2 Then 'added 10/31/2014
                        Dim opNew3 As New QuickQuoteOperator
                        With opNew3
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = "60"
                            .Name.LastName &= "_opNew3"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_opNew3"
                            .RelationshipTypeId = "11" 'Not Related to Policyholder
                        End With
                        .Operators.Add(opNew3)
                    ElseIf nonPolicyholderOperatorCount = 3 Then 'added 10/31/2014 for testing minimum fields allowed
                        Dim opNew4 As New QuickQuoteOperator
                        With opNew4

                        End With
                        .Operators.Add(opNew4)
                    ElseIf nonPolicyholderOperatorCount = 4 Then 'added 10/31/2014 to go w/ previous ELSEIF for editing the blank one
                        With .Operators(.Operators.Count - 1) 'last one

                        End With
                    End If
                End If
            End If

            If .CanUseLocationNumForLocationReconciliation = False Then 'added so it will re-use the same locations... will need ELSE if anything needs to be modified/added/removed
                .Locations = New Generic.List(Of QuickQuoteLocation)
                Dim l1 As New QuickQuoteLocation
                With l1
                    .Description = "Loc 1"
                    .Name = qqHelper.CloneObject(quickQuote.Client.Name) '.Client.Name
                    .Name.NameAddressSourceId = "13" 'Location
                    .Address = qqHelper.CloneObject(quickQuote.Client.Address) '.Client.Address
                    .ProtectionClassId = "1" '1

                    .Acreage = "2"
                    .CondoRentedTypeId = "2" 'No
                    .ConstructionTypeId = "1" 'Frame
                    .DeductibleLimitId = "22" '500 (coverage)
                    .WindHailDeductibleLimitId = "24" '1000 (coverage)
                    .DayEmployees = False
                    .DaytimeOccupancy = True
                    .FamilyUnitsId = "1" '1
                    .FireDepartmentDistanceId = "2" '5 Miles or Less
                    .FireHydrantDistanceId = "4" 'Within 1,000 feet
                    .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                    .FoundationTypeId = "2" 'Closed
                    .LastCostEstimatorDate = "12/1/2012"
                    .MarketValue = "140000"
                    .NumberOfFamiliesId = "1" '1
                    .OccupancyCodeId = "1" 'Owner
                    .PrimaryResidence = True
                    .ProgramTypeId = "1" 'Homeowners
                    .NumberOfApartments = "0"
                    .NumberOfSolidFuelBurningUnits = "0"
                    .RebuildCost = "150000"
                    .Remarks = "test loc prop remarks"
                    .SquareFeet = "4500"
                    .StructureTypeId = "13" 'Conventionally Built
                    .YearBuilt = "1990"
                    .ArchitecturalStyle = "Basic" 'added 8/27/2014 for e2Value testing; see DiamondStaticData for values

                    'updates
                    .Updates.WindowsUpdateYear = "1991"
                    .Updates.ElectricUpdateYear = "1992"
                    .Updates.ElectricUpdateTypeId = "2" 'Complete
                    .Updates.ElectricCircuitBreaker = True
                    .Updates.CentralHeatUpdateYear = "1993"
                    .Updates.PlumbingUpdateYear = "1994"
                    .Updates.PlumbingUpdateTypeId = "2" 'Complete
                    .Updates.RoofUpdateYear = "1995"
                    .Updates.SupplementalHeatUpdateYear = "1996"

                    'coverages; LimitIncreased values should be the only ones that are needed
                    .A_Dwelling_Limit = "60000"
                    .A_Dwelling_LimitIncluded = "0"
                    .A_Dwelling_LimitIncreased = "60000"
                    .B_OtherStructures_Limit = "6500"
                    .B_OtherStructures_LimitIncluded = "6000"
                    .B_OtherStructures_LimitIncreased = "500"
                    .C_PersonalProperty_Limit = "42300"
                    .C_PersonalProperty_LimitIncluded = "42000"
                    .C_PersonalProperty_LimitIncreased = "300"
                    .D_LossOfUse_Limit = "0"
                    .D_LossOfUse_LimitIncluded = "0"
                    .D_LossOfUse_LimitIncreased = "0"

                    If .CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False Then
                        .AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        Dim ai As New QuickQuoteAdditionalInterest
                        With ai
                            With .Name
                                .CommercialName1 = "Test Finance Company"
                                .TypeId = "2"
                                .TaxNumber = "123456789"
                                .TaxTypeId = "2"
                            End With
                            With .Address
                                .HouseNum = "123"
                                .StreetName = "Finance Drive"
                                .City = "Indianapolis"
                                .StateId = "16" 'automatically defaulted anyway
                                .Zip = "46227" 'should automatically append -0000
                                .County = "Marion"
                            End With
                            .Emails = New List(Of QuickQuoteEmail)
                            Dim e As New QuickQuoteEmail
                            With e
                                .Address = "test@test.com"
                                .TypeId = "2"
                            End With
                            .Emails.Add(e)
                            .Phones = New List(Of QuickQuotePhone)
                            Dim p As New QuickQuotePhone
                            With p
                                .Number = "(317)111-2222"
                                .TypeId = "2"
                            End With
                            .Phones.Add(p)
                            .ATIMA = False
                            .GroupTypeId = "2" 'Finance Company
                            .Description = "desc"
                            .Other = "other"
                            .TypeId = "42" 'First Mortgagee
                        End With
                        .AdditionalInterests.Add(ai)
                    Else
                        'add logic here to change existing additional interests

                    End If

                    'credits and surcharges
                    .MultiPolicyDiscount = True
                    '.MatureHomeownerDiscount = True
                    '.FireSmokeAlarm_LocalAlarmSystem = True
                    .NewHomeDiscount = True
                    '.FireSmokeAlarm_CentralStationAlarmSystem = True
                    '.SelectMarketCredit = True
                    '.FireSmokeAlarm_SmokeAlarm = True
                    .BurglarAlarm_LocalAlarmSystem = True
                    .SprinklerSystem_AllExcept = True
                    '.BurglarAlarm_CentralStationAlarmSystem = True
                    '.SprinklerSystem_AllIncluding = True
                    .TrampolineSurcharge = True
                    '.WoodOrFuelBurningApplianceSurcharge = True

                    'If .InlandMarines Is Nothing Then '8/7/2014 note: need prop for .CanUseInlandMarineNumForInlandMarineReconciliation
                    'updated 10/15/2014
                    If .CanUseInlandMarineNumForInlandMarineReconciliation = False Then
                        .InlandMarines = New List(Of QuickQuoteInlandMarine)
                        Dim im As New QuickQuoteInlandMarine
                        With im
                            .ArtistName = "BikeArtist"
                            .ConsentToRateCoverageEliminated = "cov eliminated"
                            .ConsentToRateCoverageInvolved = "cov involved"
                            '.InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Bicycles
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .InlandMarineType = QuickQuoteInlandMarine.QuickQuoteInlandMarineType.Inland_Marine_Bicycles
                            .DeductibleLimitId = 18 '100
                            .IncreasedLimit = "500.00"
                            .Description = "IM Bicycles Desc"
                            .MakeBrand = "BikeMake"
                            .Model = "BikeModel"
                            .RateInfoAmount = "3.00"
                            .RateInfoDescription = "rate info desc"
                            .RateInformationTypeId = "2" 'Consent to Rate
                            .SerialNumber = "SERIALNUM1"
                            .StatedAmount = True
                            .StorageLocation = "storage loc"
                            .Year = "2010"
                        End With
                        .InlandMarines.Add(im)
                    Else
                        'add logic here to change existing inland marines

                    End If

                    'If .RvWatercrafts Is Nothing Then '8/7/2014 note: need prop for .CanUseRvWatercraftNumForRvWatercraftReconciliation
                    'updated 10/15/2014
                    If .CanUseRvWatercraftNumForRvWatercraftReconciliation = False Then
                        .RvWatercrafts = New List(Of QuickQuoteRvWatercraft)
                        Dim rv As New QuickQuoteRvWatercraft
                        With rv

                            .CostNew = "3300.00"
                            .PropertyDeductibleLimitId = "21" '250
                            .UninsuredMotoristBodilyInjuryLimitId = "7" '10,000
                            .HasLiability = True
                            .HasLiabilityOnly = False
                            .Description = "Desc"
                            .HorsepowerCC = "100"
                            .Length = "9"
                            .Manufacturer = "RvManufacturer"
                            .Model = "RvModel"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.NameAddressSourceId = ""
                            .Name.LastName &= "_rv"
                            .OwnerOtherThanInsured = True
                            .RatedSpeed = "18"

                            .RvWatercraftMotors = New List(Of QuickQuoteRvWatercraftMotor)
                            Dim m As New QuickQuoteRvWatercraftMotor
                            With m
                                .CostNew = "900.00"
                                .Manufacturer = "MotorManufacturer"
                                .Model = "MotorModel"
                                .MotorTypeId = "1" 'Inboard
                                .SerialNumber = "MotorSERIALNUM3"
                                .Year = "1997"
                            End With
                            .RvWatercraftMotors.Add(m)

                            .RvWatercraftTypeId = "6" 'Golf Cart
                            .SerialNumber = "RvSERIALNUM2"
                            .Year = "1997"

                            'added 10/30/2014
                            If .AssignedOperatorNums Is Nothing Then
                                .AssignedOperatorNums = New List(Of Integer)
                            End If
                            .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                            .AssignedOperatorNums.Add(1)
                            .AssignedOperatorNums.Add(2)
                            .AssignedOperatorNums.Add(3)
                            .AssignedOperatorNums.Add(4)
                            .AssignedOperatorNums.Add(5) 'added 10/31/2014
                            .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                        End With
                        .RvWatercrafts.Add(rv)
                    Else
                        'add logic here to change existing rv watercrafts
                        'added logic 10/30/2014
                        If .RvWatercrafts IsNot Nothing AndAlso .RvWatercrafts.Count = 1 Then
                            With .RvWatercrafts(0)
                                If .AssignedOperatorNums Is Nothing Then
                                    .AssignedOperatorNums = New List(Of Integer)
                                End If
                                .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                                .AssignedOperatorNums.Add(1)
                                .AssignedOperatorNums.Add(2)
                                .AssignedOperatorNums.Add(3)
                                .AssignedOperatorNums.Add(4)
                                .AssignedOperatorNums.Add(5) 'added 10/31/2014
                                .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                            End With
                        End If
                    End If

                    'If .Exclusions Is Nothing Then '8/7/2014 note: need prop for .CanUseExclusionNumForExclusionReconciliation
                    'updated 10/15/2014
                    If .CanUseExclusionNumForExclusionReconciliation = False Then
                        .Exclusions = New List(Of QuickQuoteExclusion)
                        With .Exclusions
                            Dim e1 As New QuickQuoteExclusion
                            With e1
                                .ExclusionTypeId = "1" 'Exclusion
                                .Description = "exc desc"
                            End With
                            .Add(e1)
                            Dim e2 As New QuickQuoteExclusion
                            With e2
                                .ExclusionTypeId = "3" 'Restriction
                                .Description = "rest desc"
                            End With
                            .Add(e2)
                            Dim e3 As New QuickQuoteExclusion
                            With e3
                                .ExclusionTypeId = "4" 'Comment
                                .Description = "comm desc"
                            End With
                            .Add(e3)
                        End With
                    Else
                        'add logic here to change existing exclusions

                    End If

                    'If .SectionICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionICoverages = New List(Of QuickQuoteSectionICoverage)
                        Dim sIc As New QuickQuoteSectionICoverage
                        With sIc
                            '.HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment_HO_35
                            'updated 12/2/2013 to use coverage code desc instead of caption
                            .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.LossAssessment
                            .IncreasedLimitId = "221" '4,000
                            .Description = "Section I (Loss Assessment) desc"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionI_lossAssessment" 'updated 10/14/2014 to include lossAssessment
                            .EffectiveDate = "7/30/2013"
                            .ConstructionTypeId = "1" 'Frame
                            .DescribedLocation = True
                            .TheftExtension = False
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionICoverages.Add(sIc)

                        'added for testing 9/10/2014 to see if setting increasedLimit (ManualLimitIncreased) will also default included (ManualLimitIncluded) and total (ManualLimitAmount) limit amounts
                        '9/10/2014 note: didn't work... will need props to set ManualLimitIncluded and ManualLimitAmount fields
                        Dim sIcTest As New QuickQuoteSectionICoverage
                        With sIcTest
                            .HOM_CoverageType = QuickQuoteSectionICoverage.HOM_SectionICoverageType.SilverwareGoldwarePewterware
                            .IncreasedLimit = "100"
                            .Description = "Test for Silverware"
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionI_silverware" 'updated 10/14/2014 to include silverware
                            .EffectiveDate = "7/30/2013"
                            .ConstructionTypeId = "1" 'Frame
                            .DescribedLocation = True
                            .TheftExtension = False
                        End With
                        .SectionICoverages.Add(sIcTest)
                    Else
                        'add logic here to change existing section I Coverages

                    End If

                    'If .SectionIICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionIICoverages = New List(Of QuickQuoteSectionIICoverage)
                        Dim sIIc As New QuickQuoteSectionIICoverage
                        With sIIc
                            '.HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical_HO_71
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .HOM_CoverageType = QuickQuoteSectionIICoverage.HOM_SectionIICoverageType.BusinessPursuits_Clerical
                            .Description = "sectionII - bus pursuits - clerical (HO-71)"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.LastName &= "_sectionII"
                            .Name.NameAddressSourceId = "10022" 'Section Coverage
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionII"
                            .NumberOfPersonsReceivingCare = "4"
                            .NumberOfFamilies = "1"
                            .NumberOfFullTimeEmployees_180plus_days = "1"
                            .NumberOfPartTimeEmployees_41_to_180_days = "2"
                            .NumberOfPartTimeEmployees_40_or_less_days = "3"
                            .EstimatedNumberOfHead = "1"
                            .BusinessType = "BusType"
                            .InitialFarmPremises = True
                            .EventFrom = "8/1/2013"
                            .EventTo = "8/2/2013"
                            .BusinessName = "BusName"
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionIICoverages.Add(sIIc)
                    Else
                        'add logic here to change existing section II Coverages

                    End If

                    'If .SectionIAndIICoverages Is Nothing Then '8/7/2014 note: need prop for .CanUseSectionCoverageNumForSectionCoverageReconciliation
                    'updated 10/15/2014
                    If .CanUseSectionCoverageNumForSectionCoverageReconciliation = False Then
                        .SectionIAndIICoverages = New List(Of QuickQuoteSectionIAndIICoverage)
                        Dim sIandIIc As New QuickQuoteSectionIAndIICoverage
                        With sIandIIc
                            '.MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures_HO_42
                            'updated 12/5/2013 to use coverage code desc instead of caption
                            .MainCoverageType = QuickQuoteSectionIAndIICoverage.SectionIAndIICoverageType.PermittedIncidentalOccupanciesResidencePremises_OtherStructures
                            .PropertyIncreasedLimit = "1000.00"
                            .Description = "Section I and II (Permitted Incidental Occupancies Residence) desc"
                            .Name = qqHelper.CloneObject(quickQuote.Client.Name)
                            .Name.LastName &= "_sectionIandII"
                            .Name.NameAddressSourceId = "10022" 'Section Coverage
                            .Address = qqHelper.CloneObject(quickQuote.Client.Address)
                            .Address.StreetName &= "_sectionIandII"
                            .NumberOfFamilies = "1"
                            '.AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                        End With
                        .SectionIAndIICoverages.Add(sIandIIc)
                    Else
                        'add logic here to change existing section I and II Coverages

                    End If

                End With
                'If l1.PolicyUnderwritings Is Nothing Then 'need prop for .CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation
                'updated 10/15/2014
                If l1.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = False Then
                    HOM_AddPolicyUnderwritingsToLocation(l1)
                Else
                    'add logic here to change existing UW Questions

                End If
                .Locations.Add(l1)
            Else
                'add logic here to change existing location(s)
                'added logic 10/30/2014
                If .Locations IsNot Nothing AndAlso .Locations.Count = 1 Then
                    With .Locations(0)
                        If .RvWatercrafts IsNot Nothing AndAlso .RvWatercrafts.Count = 1 Then
                            With .RvWatercrafts(0)
                                If .AssignedOperatorNums Is Nothing Then
                                    .AssignedOperatorNums = New List(Of Integer)
                                End If
                                .AssignedOperatorNums.Clear() 'will clear before adding stuff back (for testing)
                                .AssignedOperatorNums.Add(1)
                                .AssignedOperatorNums.Add(2)
                                .AssignedOperatorNums.Add(3)
                                .AssignedOperatorNums.Add(4)
                                .AssignedOperatorNums.Add(5) 'added 10/31/2014
                                .AssignedOperatorNums.Add(6) 'added 10/31/2014 for testing minimum fields allowed
                            End With
                        End If
                    End With
                End If
            End If

            'added 12/23/2014
            If updateQuickQuoteEntities = True Then
                UpdateQuickQuoteEntityNamesAndAddresses(quickQuote)
            End If

        End With

        'added 10/31/2014 for testing; next run will add it back
        'If quickQuote IsNot Nothing AndAlso quickQuote.Operators IsNot Nothing AndAlso quickQuote.Operators.Count = 5 Then
        '    'quickQuote.Operators(4).Dispose()
        '    'quickQuote.Operators.RemoveAt(4)
        'End If

        'now logic to RemoveOperators
        RemoveOperators(quickQuote)

        If saveOrRate <> Nothing AndAlso saveOrRate = QuickQuoteXML.QuickQuoteValidationType.Save Then
            qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err)
            If err = "" Then
                'okay

            Else
                'error
            End If
        Else
            qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, strQQ, ratedQQ, strRatedQQ, qId, err) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, qId, err) 'normal method
            If err = "" Then
                'okay
                Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)


            Else
                'error
            End If
        End If

    End Sub
    'decided to split out logic to Remove Operators (for 531 troubleshooting of HOM/DFR error introduced w/ 531.003.400)
    Private Sub RemoveOperators(ByRef qqo As QuickQuoteObject)
        'logic to remove all operators
        If qqo IsNot Nothing Then
            With qqo
                If .Operators IsNot Nothing AndAlso .Operators.Count > 0 Then
                    For Each o As QuickQuoteOperator In .Operators
                        o.Dispose()
                        o = Nothing
                    Next
                    .Operators.Clear()
                End If
                If .Locations IsNot Nothing AndAlso .Locations.Count > 0 Then
                    For Each l As QuickQuoteLocation In .Locations
                        If l.RvWatercrafts IsNot Nothing AndAlso l.RvWatercrafts.Count > 0 Then
                            For Each rv As QuickQuoteRvWatercraft In l.RvWatercrafts
                                If rv.AddedOperators IsNot Nothing AndAlso rv.AddedOperators.Count > 0 Then
                                    For Each o As QuickQuoteOperator In rv.AddedOperators
                                        o.Dispose()
                                        o = Nothing
                                    Next
                                    rv.AddedOperators.Clear()
                                End If
                                If rv.Operators IsNot Nothing AndAlso rv.Operators.Count > 0 Then
                                    For Each o As QuickQuoteOperator In rv.Operators
                                        o.Dispose()
                                        o = Nothing
                                    Next
                                    rv.Operators.Clear()
                                End If
                                If rv.AssignedOperatorNums IsNot Nothing AndAlso rv.AssignedOperatorNums.Count > 0 Then
                                    For Each n As Integer In rv.AssignedOperatorNums
                                        n = Nothing
                                    Next
                                    rv.AssignedOperatorNums.Clear()
                                End If
                            Next
                        End If
                    Next
                End If
            End With
        End If
    End Sub

    'added 8/22/2016 for CLUE retrieval testing; ProcessViewImported is catching an error... 8/23/2016 note: IS found issue and will be sending Patch to correct
    Private Sub Test_CLUE_Retrieval()
        '8/22/2016 - test prod CLUE retrieval logic... may not be maintaining matches on subsequent retrieval (maybe because DLN isn't checked)
        'load existing (method that's simulates what's currently used)
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "117993" 'Prod - 117993 (QPPA332286; now PPA2105928)
        'Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'will just dummy up QQO since this quote was already finalized and promoted
        'testQQ = New QuickQuoteObject
        'testQQ.Database_QuoteId = "117993"
        'testQQ.QuoteNumber = "QPPA332286"
        'testQQ.PolicyId = "992643"
        'testQQ.PolicyImageNum = "1"
        'scneario now duplicated on Patch, so testing will continue from there
        'Dim testQQ As QuickQuoteObject = Nothing
        'Dim qId As String = "113906" 'Patch - 113906 (QPPA328093)
        'Dim errMsg As String = ""
        ''QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errMsg)
        '8/24/2016 - new test after receiving IS Patch (v531.003.500-44 SP4); successfully tested... should get applied tonight on top of v531.003.500-44
        Dim testQQ As QuickQuoteObject = Nothing
        Dim qId As String = "113938" 'Patch - 113938 (QPPA328122)
        Dim errMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, testQQ, errMsg)
        QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.AppGap, testQQ, errMsg)
        If testQQ IsNot Nothing AndAlso errMsg = "" Then
            Dim clueThirdPartyData As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing

            QQxml.LoadExistingClueAutoReportForQuote(testQQ, clueThirdPartyData)
            'appears that ProcessViewImported service is failing to load up 3rd party data from rawData; 8/23/2016 note: IS found issue and will send Patch to correct
            'System.Exception: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ServiceModel.FaultException`1[System.ServiceModel.ExceptionDetail]: Index was outside the bounds of the array.

            '            Server Stack trace
            '   at System.ServiceModel.Channels.ServiceChannel.ThrowIfFaultUnderstood(Message reply, MessageFault fault, String action, MessageVersion version, FaultConverter faultConverter)
            '   at System.ServiceModel.Channels.ServiceChannel.HandleReply(ProxyOperationRuntime operation, ProxyRpc& rpc)
            '   at System.ServiceModel.Channels.ServiceChannel.Call(String action, Boolean oneway, ProxyOperationRuntime operation, Object[] ins, Object[] outs, TimeSpan timeout)
            '   at System.ServiceModel.Channels.ServiceChannelProxy.InvokeService(IMethodCallMessage methodCall, ProxyOperationRuntime operation)
            '   at System.ServiceModel.Channels.ServiceChannelProxy.Invoke(IMessage message)

            'Exception rethrown at [0]
            '   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
            '   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
            '   at Diamond.Common.Services.Interfaces.IThirdPartyService.ProcessViewImported(Request request)
            '   --- End of inner exception stack trace ---
            '   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
            '   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
            '   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
            '   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
            '   at Diamond.Common.Services.Proxies.ProxyBase.Execute[T, Y](T request, String methodName)
            '   --- End of inner exception stack trace ---
            '   at Diamond.Common.Services.Proxies.ProxyBase.Execute[T, Y](T request, String methodName)
            '   at Diamond.Common.Services.Proxies.ThirdPartyServiceProxy.ProcessViewImported(Request request)
            '   at quickQuote.CommonMethods.QuickQuoteXML.ProcessViewImported(ThirdPartyDataType thirdPartyType, String incomingDataRaw, CreditScore& creditScore, InsCollection`1& creditScoreReasons, InsCollection`1& lossHistories, InsCollection`1& accidentsViolations, Int32 versionId) in C:\Users\domin\Documents\Visual Studio 2015\TFS\Internet\Velocirater\QuickQuote\trunk\App_Code\QuickQuoteXML.vb:line 58594
            If clueThirdPartyData IsNot Nothing Then

            End If
        End If
    End Sub

    'added 9/16/2016
    'Private Function TestReturnQuote(ByVal quoteId As String, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote) As QuickQuoteObject
    '5/24/2017 - added optional byref param for err
    Private Function TestReturnQuote(ByVal quoteId As String, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote, Optional ByRef err As String = "") As QuickQuoteObject
        Dim qqxml As New QuickQuoteXML
        'Dim err As String = ""
        err = ""

        Dim strQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(quoteId) = True Then
            'get existing
            'qqxml.GetQuoteForSaveType(quoteId, QuickQuoteXML.QuickQuoteSaveType.Quote, quickQuote, err)
            qqxml.GetQuoteForSaveType(quoteId, saveOrRateType, quickQuote, err)
            If err <> "" Then
                'err = "" 'just reset; removed 8/29/2017
            End If
            If quickQuote IsNot Nothing Then
                Dim strQuickQuote As String = quickQuote.ToString


            End If
        End If

        Return quickQuote
    End Function
    Private Function TestReturnRatedQuote(ByVal quoteId As String) As QuickQuoteObject
        Dim qqxml As New QuickQuoteXML
        Dim err As String = ""

        Dim strQQ As String = ""
        quickQuote = Nothing

        If qqHelper.IsNumericString(quoteId) = True Then
            'get existing
            Dim rateType As QuickQuoteXML.QuickQuoteSaveType = Nothing
            qqxml.GetRatedQuote(quoteId, quickQuote, rateType, err)
            If err <> "" Then
                err = "" 'just reset
            End If
            If quickQuote IsNot Nothing Then
                Dim strQuickQuote As String = quickQuote.ToString
                'Select Case rateType
                '    Case QuickQuoteXML.QuickQuoteSaveType.AppGap

                '    Case QuickQuoteXML.QuickQuoteSaveType.Quote

                '    Case QuickQuoteXML.QuickQuoteSaveType.IRPM, QuickQuoteXML.QuickQuoteSaveType.QuoteForCopy

                'End Select
                'If redirectToSummary = True Then
                '    Response.Redirect("DiamondQuoteSummary.aspx?quoteId=" & quoteId)
                'End If
            End If
        End If

        Return quickQuote
    End Function

    'added 9/21/2016 to centralize logic instead of including all in Test method
    Private Sub TestVeriskProtectionClassStuff()
        '9/13/2016 - Verisk Protection Class testing
        'Dim policyId As Integer = 982549 'HOM2100456 on Patch
        'Dim policyImageNum As Integer = 0
        'Dim isos As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = Nothing
        'isos = QQxml.GetISOTransmissions(policyId)
        'If isos IsNot Nothing AndAlso isos.Count > 0 Then
        '    For Each iso As Diamond.Common.Objects.ThirdParty.ISOTransmission In isos
        '        If iso IsNot Nothing Then
        '            Dim incomingDataRaw As String = ""
        '            Dim incomingDataXML As String = ""
        '            With iso
        '                'incomingDataRaw = .ExportXML 'this catches exception
        '                'incomingDataXML = .ExportXML
        '                incomingDataRaw = .ImportXML 'this works
        '                'incomingDataXML = .ImportXML
        '            End With
        '            'Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = QQxml.ProcessPPC(policyId, policyImageNum, incomingDataRaw, incomingDataXML)
        '            'removed incomingDataXML param from method
        '            Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = QQxml.ProcessPPC(policyId, policyImageNum, incomingDataRaw)
        '            If rd IsNot Nothing Then
        '                With rd

        '                End With
        '            End If
        '        End If
        '    Next
        'End If
        'more testing 9/16/2016
        'Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        'Dim locNum As Integer = 0
        'Dim isoTransmissionId As Integer = 0
        'rd = QQxml.GetPPCReportData(policyId, policyImageNum, locNum, isoTransmissionId)
        ''Dim qqo As New QuickQuoteObject
        ''With qqo
        ''    .QuoteNumber = "HOM2100456"
        ''    .PolicyId = policyId.ToString
        ''    .PolicyImageNum = policyImageNum.ToString
        ''End With
        ''Dim results As String = ""
        ''Dim errorMsg As String = ""
        ''rd = QQxml.GetPPCReportDataForQuote(qqo, locNum, results, errorMsg)
        'If rd IsNot Nothing Then

        'End If

        'now testing Save/Rate
        'Dim quoteId As String = "117203" 'QHOM259513 on Patch (policyId 983857)
        'Dim quoteId As String = "117302" 'on Patch 9/25/2016; quoteId=117302, quoteNum=QHOM259568, prem=$8,845,504.00 (appears to be problem, maybe after 531.003.600-44 SP6... was due to tierOverride being used locally... now turned off)
        'Dim quoteId As String = "117304" 'on Patch 9/25/2016; quoteId=117304, quoteNum=QHOM259570, prem=$583.00
        'Dim quoteId As String = "117305" 'on Patch 9/25/2016; quoteId=117305, quoteNum=QHOM259571
        'Dim quoteId As String = "117306" 'on Patch 9/25/2016; quoteId=117306, quoteNum=QHOM259572; saw prem just from $583 to $718 by re-running code... may need to verify w/ ReSaveOrReRate to make sure normal QQ logic isn't flawed
        Dim quoteId As String = "117307" 'on Patch 9/25/2016; quoteId=117307, quoteNum=QHOM259573; was able to verify that Diamond is updating Loc address to match client/PH address on initial Save to Diamond (can then overwrite); started w/ prem of $583... will now ReRate w/o changing anything
        Dim effDate As String = "10/1/2016"
        Dim expDate As String = "" 'added 9/25/2016 to test CompRater 6-month term issue; successfully triggers new rating validation when used
        'Dim changeLocationAddress As Boolean = True
        Dim changeLocationAddressType As LocationAddressType = LocationAddressType.UseVeriskSplitClassTestAddressWithExtendedZip
        Dim usePoBoxForClientAndPolicyholderAddress As Boolean = False 'added 9/25/2016
        'HOM_save_test_minimum(quoteId, effDate, changeLocationAddress, redirectToQuoteSummaryOnSuccessfulRate:=False)
        HOM_save_test_minimum(quoteId, effDate, expDate, changeLocationAddressType, usePoBoxForClientAndPolicyholderAddress, redirectToQuoteSummaryOnSuccessfulRate:=False)
        'had to update for bogus foundationType validation
        'next had to change effDate
        'next had to update for feet to hydrant
        'worked after that and report was automatically ordered
        'received this on re-rate when changing protClass: Refer to Management for approval of Protection Class Override
        'after reverting protClass back, report has not been re-ordered on re-rates to this point (correct since address hasn't changed)
        'correctly re-ordered whenever address changes unless it changes back to one of the previous addresses... one change resulted in Error status on re-order (thirdPartyStatusId 20... 19 = Completed) and empty report
        'see code in GetPPCReportData to handle for ISOTransmission statuses
        'actual ISO info returned on Exact match from spreadsheet (see C:\Users\domin\Documents\Verisk_ProtectionClass_Testing\Formated 50 Test Addresses_ReturnsAppend.xlsx); new report ordered on initial address change but then re-ordered when using the same test address (maybe because it came back w/ extended zip, which wasn't updated on our end: confirmed... not re-ordered when absolutely nothing changes)
        'as for ISO re-order logic, it looks like Diamond will only re-order report if there isn't an existing ISOTransmission where the ordered_address matches the current address, which means if there's already an existing report for the address change, the location info fields aren't currently being updated, which could result in the wrong protClass... not a likely scenario but definitely easy to replicate by switching back and forth between the same 2 addresses
        'need to update rate logic to update QuickQuote.Location fields from RatedQuickQuote.Location when needed... update prot class and address fields on QuickQuote... maybe whenever system generated protClass is set or equals regular protClass on ratedQuote.Location or something similar
        Dim qqo As QuickQuoteObject = Nothing
        qqo = TestReturnQuote(quoteId)
        'If qqo IsNot Nothing Then

        'End If
        Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        Dim locNum As Integer = 0
        Dim results As String = ""
        Dim errorMsg As String = ""
        rd = QQxml.GetPPCReportDataForQuote(qqo, locNum, results, errorMsg)
        If rd IsNot Nothing Then

        End If
    End Sub

    'added 9/24/2016 for Endorsement pre-work/testing
    Private Sub TestLoadImageForDate()
        QuickQuoteHelperClass.CheckDiamondServicesToken()

        Dim req As New Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Request
        Dim res As New Diamond.Common.Services.Messages.PolicyService.IsNewTEffDateValid.Response

        With req.RequestData

            .PolicyId = 0
            .PolicyImageNum = 0
            .TransactionEffectiveDate = Date.Today
            .TransactionEffectiveTime = Date.Now

        End With

        Using proxy As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy
            res = proxy.IsNewTEffDateValid(req)
        End Using

        If res IsNot Nothing AndAlso res.ResponseData IsNot Nothing Then
            With res.ResponseData
                '.Success
                '.PolicyImageNum

            End With
        End If


        'see qqxml.DiamondService_SuccessfullyCopiedImage
        Dim req2 As New Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Request
        Dim res2 As New Diamond.Common.Services.Messages.PolicyService.CopyQuoteToNewQuote.Response

        With req2.RequestData

            .PolicyId = 0
            .PolicyImageNum = 0
            .UsersId = 0

        End With

        Using proxy As New Diamond.Common.Services.Proxies.PolicyServices.PolicyServiceProxy
            res2 = proxy.CopyQuoteToNewQuote(req2)
        End Using

        If res2 IsNot Nothing AndAlso res2.ResponseData IsNot Nothing Then
            With res2.ResponseData
                '.PolicyImage

            End With
        End If


        'see qqxml.DiamondService_SuccessfullyFilledPolicyImageData
        Dim req3 As New Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Request
        Dim res3 As New Diamond.Common.Services.Messages.ThirdPartyService.FillPolicyImageData.Response

        With req3.RequestData
            '.PolicyImage = diaImage
        End With

        Try
            Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
                res3 = proxy.FillPolicyImageData(req3)
            End Using
        Catch ex As Exception
            'errorMsg = "Unhandled exception caught when calling FillPolicyImageData service: " & ex.ToString
        End Try

        If res3 IsNot Nothing Then
            If res3.DiamondValidation IsNot Nothing AndAlso res3.DiamondValidation.ValidationItems IsNot Nothing AndAlso res3.DiamondValidation.ValidationItems.Count > 0 Then
                For Each vi As Diamond.Common.Objects.ValidationItem In res3.DiamondValidation.ValidationItems
                    'If errorMsg <> "" Then
                    '    errorMsg &= "<br />"
                    'End If
                    'errorMsg &= vi.Message
                Next
            End If
            If res3 IsNot Nothing AndAlso res3.ResponseData IsNot Nothing Then
                If res3.ResponseData.PolicyImage IsNot Nothing Then
                    'success = True
                    'newImage = response.ResponseData.PolicyImage
                    'quickQuote.PolicyId = newImage.PolicyId 'not currently using; copied from CopyQuoteToNewQuote service logic
                    'quickQuote.PolicyImageNum = newImage.PolicyImageNum 'not currently using; copied from CopyQuoteToNewQuote service logic
                    'quickQuote.PolicyImageId = newImage.PolicyImageId 'not currently using; copied from CopyQuoteToNewQuote service logic
                Else
                    'If errorMsg = "" Then
                    '    errorMsg = "No image returned from FillPolicyImageData service."
                    'End If
                End If
            Else
                'no response data
                'If errorMsg = "" Then
                '    errorMsg = "No response data returned from FillPolicyImageData service."
                'End If
            End If
        Else
            'no response
            'If errorMsg = "" Then
            '    errorMsg = "No response returned from FillPolicyImageData service."
            'End If
        End If
    End Sub
    'added 9/30/2016
    Private Sub TestProtClassFireHydrantAndDepartmentFields()
        Dim FireDepartmentDistanceId As String = ""
        Dim MilesToFireDepartment As String = "10"
        Dim FireHydrantDistanceId As String = ""
        Dim FeetToFireHydrant As String = "800"
        Dim effDate As String = ""
        Dim preVeriskDate As String = "9/30/2016" 'pre Verisk
        Dim veriskDate As String = "10/1/2016" 'post Verisk
        Dim useVeriskToStart As Boolean = False

        Dim qqo As New QuickQuoteObject
        With qqo
            If useVeriskToStart = True Then
                effDate = veriskDate
            Else
                effDate = preVeriskDate
            End If
            .EffectiveDate = effDate
            .Locations = New List(Of QuickQuoteLocation)
            With .Locations
                .Add(New QuickQuoteLocation)
                With .Item(0)
                    .FireDepartmentDistanceId = FireDepartmentDistanceId
                    .MilesToFireDepartment = MilesToFireDepartment
                    .FireHydrantDistanceId = FireHydrantDistanceId
                    .FeetToFireHydrant = FeetToFireHydrant
                End With
            End With
            qqHelper.VerifyProtectionClassFields(qqo)
            With .Locations(0)
                FireDepartmentDistanceId = .FireDepartmentDistanceId
                MilesToFireDepartment = .MilesToFireDepartment
                FireHydrantDistanceId = .FireHydrantDistanceId
                FeetToFireHydrant = .FeetToFireHydrant
            End With
            If qqHelper.IsDateString(effDate) = True OrElse qqHelper.IsPositiveIntegerString(FireDepartmentDistanceId) = True OrElse qqHelper.IsPositiveDecimalString(MilesToFireDepartment) = True OrElse qqHelper.IsPositiveIntegerString(FireHydrantDistanceId) = True OrElse qqHelper.IsPositiveIntegerString(FeetToFireHydrant) = True Then

            End If
            If qqHelper.IsDateString(.EffectiveDate) AndAlso qqHelper.IsDateString(veriskDate) AndAlso CDate(.EffectiveDate) = CDate(veriskDate) Then
                effDate = preVeriskDate
            Else
                effDate = veriskDate
            End If
            .EffectiveDate = effDate
            qqHelper.VerifyProtectionClassFields(qqo)
            With .Locations(0)
                FireDepartmentDistanceId = .FireDepartmentDistanceId
                MilesToFireDepartment = .MilesToFireDepartment
                FireHydrantDistanceId = .FireHydrantDistanceId
                FeetToFireHydrant = .FeetToFireHydrant
            End With
            If qqHelper.IsDateString(effDate) = True OrElse qqHelper.IsPositiveIntegerString(FireDepartmentDistanceId) = True OrElse qqHelper.IsPositiveDecimalString(MilesToFireDepartment) = True OrElse qqHelper.IsPositiveIntegerString(FireHydrantDistanceId) = True OrElse qqHelper.IsPositiveIntegerString(FeetToFireHydrant) = True Then

            End If
            If qqHelper.IsDateString(.EffectiveDate) AndAlso qqHelper.IsDateString(veriskDate) AndAlso CDate(.EffectiveDate) = CDate(veriskDate) Then
                effDate = preVeriskDate
            Else
                effDate = veriskDate
            End If
            .EffectiveDate = effDate
            qqHelper.VerifyProtectionClassFields(qqo)
            With .Locations(0)
                FireDepartmentDistanceId = .FireDepartmentDistanceId
                MilesToFireDepartment = .MilesToFireDepartment
                FireHydrantDistanceId = .FireHydrantDistanceId
                FeetToFireHydrant = .FeetToFireHydrant
            End With
            If qqHelper.IsDateString(effDate) = True OrElse qqHelper.IsPositiveIntegerString(FireDepartmentDistanceId) = True OrElse qqHelper.IsPositiveDecimalString(MilesToFireDepartment) = True OrElse qqHelper.IsPositiveIntegerString(FireHydrantDistanceId) = True OrElse qqHelper.IsPositiveIntegerString(FeetToFireHydrant) = True Then

            End If
            If qqHelper.IsDateString(.EffectiveDate) AndAlso qqHelper.IsDateString(veriskDate) AndAlso CDate(.EffectiveDate) = CDate(veriskDate) Then
                effDate = preVeriskDate
            Else
                effDate = veriskDate
            End If
            .EffectiveDate = effDate
            qqHelper.VerifyProtectionClassFields(qqo)
            With .Locations(0)
                FireDepartmentDistanceId = .FireDepartmentDistanceId
                MilesToFireDepartment = .MilesToFireDepartment
                FireHydrantDistanceId = .FireHydrantDistanceId
                FeetToFireHydrant = .FeetToFireHydrant
            End With
            If qqHelper.IsDateString(effDate) = True OrElse qqHelper.IsPositiveIntegerString(FireDepartmentDistanceId) = True OrElse qqHelper.IsPositiveDecimalString(MilesToFireDepartment) = True OrElse qqHelper.IsPositiveIntegerString(FireHydrantDistanceId) = True OrElse qqHelper.IsPositiveIntegerString(FeetToFireHydrant) = True Then

            End If
        End With
    End Sub

    'added 10/12/2016
    'Private Sub TestProtectionClassForDFR()
    'updated to work for DFR or HOM
    Private Sub TestProtectionClassForDFRorHOM()
        Dim needToStopBecauseOfProblem As Boolean = False

        'Dim quoteId As String = "117573" 'Patch: quoteId 117573; quoteNumber QDFR022754
        'Dim quoteId As String = "117580" 'Patch: quoteId 117580; quoteNumber QDFR022756
        'Dim quoteId As String = "117581" 'Patch: quoteId 117581; quoteNumber QDFR022757
        'Dim quoteId As String = "117582" 'Patch: quoteId 117582; quoteNumber QDFR022758
        'Dim quoteId As String = "117595" 'Patch: quoteId 117595; quoteNumber QDFR022759; messed up quote because Rate call wasn't previously returning ratedImage if rate wasn't successful because of validations... caused qqo to get out of sync and try to change protClass on subsequent save/rate attempt
        'Dim quoteId As String = "117598" 'Patch: quoteId 117598; quoteNumber QDFR022760; quote was unusable for testing because of prop address defaulting logic... code was using scrubbed address for location, but it was overwritten by Diamond on Submit and now quote continues to fail our report ordering validation because our address doesn't match diaLocAddress
        'Dim quoteId As String = "117599" 'Patch: quoteId 117599; quoteNumber QDFR022761; our logic manually ordered report but diaLoc wasn't overwritten on image w/ service response location; will try another re-order w/ diff address and code that will pass in loc to method... didn't work because our report ordering validation failed due to Diamond not saving qqLocAddress to diaLocAddress; eventually able to save info over to Diamond after entering CovA, at which point Diamond Rate was able to return image even though validation for Deductible was triggered... Diamond also appeared to check for existing report and update ProtClassSystGenId and PPCMatchTypeId from it but wiped out FireDepartmentDistanceId and FireDistrictName
        'Dim quoteId As String = "117600" 'Patch: quoteId 117600; quoteNumber QDFR022762; for this test, logic has been updated to try setting FireDistrictName, ProtClassSystGenId, and PPCMatchTypeId on diaImage.Loc when needed and also report ordering logic updated to try to replace diaImage.Loc from service result if available before calling Save; everything works as planned but Diamond is dropping FireDepartmentDistanceId on the next Rate attempt
        'Dim quoteId As String = "117603" 'Patch: quoteId 117603; quoteNumber QDFR022763
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
        'Dim quoteId As String = "117601" 'Patch: quoteId 117601; quoteNumber QHOM259739
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        'Dim quoteId As String = "117604" 'Patch: quoteId 117604; quoteNumber QHOM259793
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        Dim quoteId As String = "117757" 'Patch: quoteId 117757; quoteNumber QDFR022792
        Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
        'Dim quoteId As String = "117729" 'Patch: quoteId 117729; quoteNumber QHOM259836; was able to see that Diamond is resetting the protClassSysGenId when their report logic kicks in (no validations that stop it beforehand) in scenario where report is ordered w/ Verisk effDate, user then backdates the quote and our logic wipes out protClassSysGenId, and then user changes back to Verisk effDate; still need to see how our logic works
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        Dim qqo As QuickQuoteObject = Nothing

        If qqHelper.IsPositiveIntegerString(quoteId) = True Then
            qqo = TestReturnQuote(quoteId)

            'If qqo Is Nothing OrElse qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
            'updated 10/14/2016 to work for DFR or HOM
            If qqo Is Nothing OrElse qqo.LobType <> lobType Then
                'quoteId = "" 'could just reset so logic below creates new quote, but probably better to stop; logic below would also reset quoteId if instantiating new QQO
                needToStopBecauseOfProblem = True
            Else
                Dim startLoc As QuickQuoteLocation = Nothing
                Dim startLocationAddress As String = ""
                Dim startProtClassId As String = ""
                Dim startProtClass As String = ""
                Dim startProtClassSysGenId As String = ""
                Dim startProtClassSysGen As String = ""
                Dim startFireDeptDistrict As String = ""
                Dim startFireDeptDistId As String = ""
                Dim startPhAddress As String = ""
                If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                    startLoc = qqo.Locations(0)
                    With startLoc
                        If .Address IsNot Nothing Then
                            startLocationAddress = .Address.OneLineStreetAddress
                        End If
                        startProtClassId = .ProtectionClassId
                        startProtClass = .ProtectionClass
                        startProtClassSysGenId = .ProtectionClassSystemGeneratedId
                        startProtClassSysGen = .ProtectionClassSystemGenerated
                        startFireDeptDistrict = .FireDistrictName
                        startFireDeptDistId = .FireDepartmentDistanceId
                    End With
                End If
                If qqo.Policyholder IsNot Nothing AndAlso qqo.Policyholder.Address IsNot Nothing Then
                    startPhAddress = qqo.Policyholder.Address.OneLineStreetAddress
                End If
            End If
        End If

        If needToStopBecauseOfProblem = False Then
            If qqo Is Nothing Then
                quoteId = ""
                qqo = New QuickQuoteObject
                With qqo
                    '.LobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                    'updated 10/14/2016 to work for DFR or HOM
                    .LobType = lobType
                    .EffectiveDate = Date.Today.ToShortDateString
                    '.QuoteDescription = "Don DFR PPC Testing"
                    'updated 10/14/2016 to work for DFR or HOM
                    .QuoteDescription = "Don " & If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "DFR", "HOM") & " PPC Testing"
                End With
            End If
            With qqo
                '.EffectiveDate = Date.Today.ToShortDateString

                'added 10/20/2016 for testing
                '.EffectiveDate = "9/30/2016" 'pre-Verisk
                .EffectiveDate = Date.Today.ToShortDateString 'post Verisk

                If .Policyholder Is Nothing Then
                    .Policyholder = New QuickQuotePolicyholder
                End If
                With .Policyholder
                    Dim setPolicyholderName As Boolean = False 'added 10/20/2016
                    If .Name Is Nothing Then
                        .Name = New QuickQuoteName
                        setPolicyholderName = True 'added 10/20/2016
                    End If
                    If setPolicyholderName = False AndAlso .Name.HasData = False Then
                        setPolicyholderName = True
                    End If
                    'setPolicyholderName = True 'added 10/20/2016; use if we want to force PH name overwrite
                    With .Name
                        If setPolicyholderName = True Then 'added IF 10/20/2016 to prevent credit from being re-ordered because last name casing doesn't match what's in Diamond (since we store as all caps)... probably need to update qqhelper.IsQuickQuoteToDiamondObjectMatch_Applicant to check UCase between qqName and diaName, but shouldn't be issue outside of local testing where we keep overwriting info on every Rate
                            .FirstName = "Don"
                            '.LastName = "Dwelling"
                            'updated 10/14/2016 to work for DFR or HOM
                            .LastName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwelling", "Home")
                            .SexId = "1"
                            .TypeId = "1"
                            .TaxNumber = "123456789"
                            .TaxTypeId = "1"
                            .EntityTypeId = "1" 'Individual
                            .DescriptionOfOperations = "PH test"
                            .BirthDate = "1/1/1982"
                            .DriversLicenseDate = "1/1/1998"
                            .DriversLicenseNumber = "1234-56-7890"
                            .MaritalStatusId = "1" '1=Single; 2=Married
                        End If
                    End With
                    Dim setPolicyholderAddress As Boolean = False 'added 10/20/2016
                    If .Address Is Nothing Then
                        .Address = New QuickQuoteAddress
                        setPolicyholderAddress = True 'added 10/20/2016
                    End If
                    If setPolicyholderAddress = False AndAlso .Address.HasData = False Then
                        setPolicyholderAddress = True
                    End If
                    'setPolicyholderAddress = True 'added 10/20/2016; use if we want to force PH address overwrite
                    With .Address
                        If setPolicyholderAddress = True Then 'added IF 10/20/2016
                            '.HouseNum = "567"
                            ''.StreetName = "Dwell Boulevard"
                            ''updated 10/14/2016 to work for DFR or HOM
                            '.StreetName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwell", "Home") & " Boulevard"
                            '.City = "Fishers"
                            '.Zip = "46038"
                            '.County = "Hamilton"

                            .HouseNum = "107"
                            .StreetName = "S Spring Street"
                            .City = "Princeton"
                            .StateId = "16"
                            .Zip = "47670"
                            .County = "Gibson"
                        End If
                    End With

                End With
                .CopyPolicyholdersToClients() 'should maintain clientId if it's there; would have to manually reset if needed
                .CopyPolicyholdersToApplicants()

                If .Locations Is Nothing Then
                    .Locations = New List(Of QuickQuoteLocation)
                End If
                If .Locations.Count = 0 Then
                    .Locations.Add(New QuickQuoteLocation)
                End If
                With .Locations(0) '1st location; should be only one for DFR or HOM
                    If .Address Is Nothing OrElse .Address.HasFullStreetAddress = False Then
                        qqHelper.CopyQuickQuoteAddress(qqo.Policyholder.Address, .Address)
                    End If
                    With .Address
                        '.HouseNum = "567"
                        ''.StreetName = "Dwell Boulevard"
                        ''updated 10/14/2016 to work for DFR or HOM
                        '.StreetName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwell", "Home") & " Boulevard"
                        '.City = "Fishers"
                        '.Zip = "46038"
                        '.County = "Hamilton" 'note: required for subsequent Saves after initial submit to Diamond

                        '.HouseNum = "107"
                        '.StreetName = "S Spring St"
                        '.City = "Princeton"
                        '.StateId = "16"
                        '.Zip = "47670-2049"
                        '.County = "Gibson" 'note: required for subsequent Saves after initial submit to Diamond

                        '.HouseNum = "2627"
                        '.StreetName = "E Northwood Ave"
                        '.City = "Terre Haute"
                        '.StateId = "16"
                        '.Zip = "47805-2615"
                        '.County = "Vigo" 'note: required for subsequent Saves after initial submit to Diamond
                    End With
                    'updated 10/14/2016 to work for DFR or HOM; original logic in IF
                    If lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
                        .FormTypeId = "11" 'DP 00 02 - Broad
                        .ProgramTypeId = "3" 'Dwelling Fire
                    Else 'HOM
                        .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                        .ProgramTypeId = "1" 'Homeowners
                    End If

                    .FireHydrantDistanceId = "1" 'Over 1,000 Feet

                    'note: all of these appear to be required for subsequent Saves after initial submit to Diamond
                    .YearBuilt = "1990"
                    .ConstructionTypeId = "1" 'Frame
                    .StructureTypeId = "13" 'Conventionally Built
                    'updated 10/14/2016 to work for DFR or HOM; original logic in IF
                    If lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
                        .OccupancyCodeId = "14" 'Owner Occupied; may not be typical selection for DFR
                    Else
                        .OccupancyCodeId = "1" 'Owner
                    End If
                    'ProtectionClass also required but should be set by Verisk Service call
                    .NumberOfFamiliesId = "1" '1
                    .UsageTypeId = "2" 'Non-Seasonal

                    'Location Num #1 Coverage A or C is required.
                    '.A_Dwelling_Limit = "100000"
                    '.A_Dwelling_LimitIncluded = "0"
                    '.A_Dwelling_LimitIncreased = "100000"
                    '.C_PersonalProperty_Limit = "20000"
                    '.C_PersonalProperty_LimitIncluded = ""
                    '.C_PersonalProperty_LimitIncreased = "20000"

                    'deductible eventually required for Rate after Save validation passes
                    '.DeductibleLimitId = "22" '500 (coverage)

                    .ProtectionClassId = "3" 'added 10/21/2016 for testing a pre-Verisk date after report ordered on good date and then wiping out sysGenProtClassId
                    'adding this to hopefully cause Rate call to not fix Verisk report so I can test our report ordering logic
                    .A_Dwelling_Limit = ""
                    .A_Dwelling_LimitIncluded = ""
                    .A_Dwelling_LimitIncreased = ""
                End With
            End With

            'added 10/14/2016 to work for DFR or HOM; need to order Credit for HOM so it works like it will when using VelociRater
            If lobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal Then
                'If qqHelper.IsPositiveIntegerString(qqo.Database_QuoteId) = False OrElse (qqo.TieringInformation Is Nothing OrElse qqo.TieringInformation.RatedTier = "") Then
                'updated since it doesn't appear that TieringInformation shows up anywhere until after the next Diamond Rate; confirmed that everything is working fine
                If qqHelper.IsPositiveIntegerString(qqo.Database_QuoteId) = False Then
                    Dim tpd As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
                    Dim results As String = ""
                    Dim creditErrorMsg As String = ""
                    QQxml.LoadCreditForQuote(qqo, tpd, results, creditErrorMsg)
                    If tpd IsNot Nothing Then
                        'make sure credit data is saved back to quote; doesn't appear that LoadCreditForQuote Saves back
                        Dim saveErrorMsg As String = ""
                        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qqo.Database_QuoteId, saveErrorMsg)
                    End If
                End If
            End If

            Dim needToReloadQuote As Boolean = False
            Dim ratingSuccess As Boolean = False
            Dim manuallyOrderedAnyReports As Boolean = False
            Dim problemWithDiamondAddressNotMatchingQuickQuote As Boolean = False
            Dim manuallyFoundAnyExistingReports As Boolean = False
            QQxml.CheckQuoteForProtectionClassInfoAndOrderVeriskReportIfNeeded(qqo, needToReloadQuote, ratingSuccess:=ratingSuccess, manuallyOrderedAnyReports:=manuallyOrderedAnyReports, manuallyFoundAnyExistingReports:=manuallyFoundAnyExistingReports, problemWithDiamondAddressNotMatchingQuickQuote:=problemWithDiamondAddressNotMatchingQuickQuote)
            'now testing Rate since CheckQuote method will only attempt Rate if needed... worked fine except Diamond dropped FireDepartmentDistanceId
            'Dim saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
            'Dim ratedQQ As QuickQuoteObject = Nothing
            'Dim strQQ As String = ""
            'Dim strRatedQQ As String = ""
            'Dim rateErrorMsg As String = ""
            'QQxml.RateQuoteAndSave(saveOrRateType, qqo, strQQ, ratedQQ, strRatedQQ, qqo.Database_QuoteId, rateErrorMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            ''qqxml.RateQuoteAndSave(saveOrRateType, qqo, qqo.Database_QuoteId, rateErrorMsg) 'normal method
            'If rateErrorMsg = "" Then
            '    'okay
            '    'Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

            'Else
            '    'error
            'End If

            Dim currLoc As QuickQuoteLocation = Nothing
            Dim currLocationAddress As String = ""
            Dim currProtClassId As String = ""
            Dim currProtClass As String = ""
            Dim currProtClassSysGenId As String = ""
            Dim currProtClassSysGen As String = ""
            Dim currFireDeptDistrict As String = ""
            Dim currFireDeptDistId As String = ""
            Dim currPhAddress As String = ""
            If qqo IsNot Nothing AndAlso qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                currLoc = qqo.Locations(0)
                With currLoc
                    If .Address IsNot Nothing Then
                        currLocationAddress = .Address.OneLineStreetAddress
                    End If
                    currProtClassId = .ProtectionClassId
                    currProtClass = .ProtectionClass
                    currProtClassSysGenId = .ProtectionClassSystemGeneratedId
                    currProtClassSysGen = .ProtectionClassSystemGenerated
                    currFireDeptDistrict = .FireDistrictName
                    currFireDeptDistId = .FireDepartmentDistanceId
                End With
            End If
            If qqo IsNot Nothing AndAlso qqo.Policyholder IsNot Nothing AndAlso qqo.Policyholder.Address IsNot Nothing Then
                currPhAddress = qqo.Policyholder.Address.OneLineStreetAddress
            End If
            If needToReloadQuote = True Then
                If ratingSuccess = True Then

                End If
                If manuallyOrderedAnyReports = True Then

                End If
                If manuallyFoundAnyExistingReports = True Then

                End If
                If problemWithDiamondAddressNotMatchingQuickQuote = True Then

                End If
            End If


        End If


        '1st time thru w/ dummy address: my logic manually ordered report because rating failed; report shows in Diamond, but no protClass fields were updated (may need to set extra boolean property in service call)
        '2nd time thru w/ same info: logic wasn't hit since address was the same
        '3rd time thru w/ different address: rating failed again and my logic found an existing report so didn't order anything
        '3rd time thru w/ other address and no logic to look for existing report: rating failed (also Diamond save) and my logic attempted report ordering and looked successful, but nothing new in Diamond... since Save failed too, service was called on old address, so maybe Diamond logic knew it didn't need to order report


        'need to check my logic to write PPC fields to XML to make sure they don't come over on CopyQuote
    End Sub
    'added 2nd method 10/23/2016 just to test report ordering results for different test addresses w/o affecting the test data in the original method
    Private Sub TestProtectionClassForDFRorHOM2()
        Dim needToStopBecauseOfProblem As Boolean = False

        'Dim quoteId As String = "117573" 'Patch: quoteId 117573; quoteNumber QDFR022754
        'Dim quoteId As String = "117580" 'Patch: quoteId 117580; quoteNumber QDFR022756
        'Dim quoteId As String = "117581" 'Patch: quoteId 117581; quoteNumber QDFR022757
        'Dim quoteId As String = "117582" 'Patch: quoteId 117582; quoteNumber QDFR022758
        'Dim quoteId As String = "117595" 'Patch: quoteId 117595; quoteNumber QDFR022759; messed up quote because Rate call wasn't previously returning ratedImage if rate wasn't successful because of validations... caused qqo to get out of sync and try to change protClass on subsequent save/rate attempt
        'Dim quoteId As String = "117598" 'Patch: quoteId 117598; quoteNumber QDFR022760; quote was unusable for testing because of prop address defaulting logic... code was using scrubbed address for location, but it was overwritten by Diamond on Submit and now quote continues to fail our report ordering validation because our address doesn't match diaLocAddress
        'Dim quoteId As String = "117599" 'Patch: quoteId 117599; quoteNumber QDFR022761; our logic manually ordered report but diaLoc wasn't overwritten on image w/ service response location; will try another re-order w/ diff address and code that will pass in loc to method... didn't work because our report ordering validation failed due to Diamond not saving qqLocAddress to diaLocAddress; eventually able to save info over to Diamond after entering CovA, at which point Diamond Rate was able to return image even though validation for Deductible was triggered... Diamond also appeared to check for existing report and update ProtClassSystGenId and PPCMatchTypeId from it but wiped out FireDepartmentDistanceId and FireDistrictName
        'Dim quoteId As String = "117600" 'Patch: quoteId 117600; quoteNumber QDFR022762; for this test, logic has been updated to try setting FireDistrictName, ProtClassSystGenId, and PPCMatchTypeId on diaImage.Loc when needed and also report ordering logic updated to try to replace diaImage.Loc from service result if available before calling Save; everything works as planned but Diamond is dropping FireDepartmentDistanceId on the next Rate attempt
        'Dim quoteId As String = "117603" 'Patch: quoteId 117603; quoteNumber QDFR022763
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
        'Dim quoteId As String = "117601" 'Patch: quoteId 117601; quoteNumber QHOM259739
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        'Dim quoteId As String = "117604" 'Patch: quoteId 117604; quoteNumber QHOM259793
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        'Dim quoteId As String = "117757" 'Patch: quoteId 117757; quoteNumber QDFR022792; note: original test data that I don't want to affect
        Dim quoteId As String = "117772" 'Patch: quoteId 117772; quoteNumber QDFR022799; info below should allow Diamond to set protClass w/o getting stopped by validations
        Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
        'Dim quoteId As String = "117729" 'Patch: quoteId 117729; quoteNumber QHOM259836; was able to see that Diamond is resetting the protClassSysGenId when their report logic kicks in (no validations that stop it beforehand) in scenario where report is ordered w/ Verisk effDate, user then backdates the quote and our logic wipes out protClassSysGenId, and then user changes back to Verisk effDate; still need to see how our logic works
        'Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal
        Dim qqo As QuickQuoteObject = Nothing

        If qqHelper.IsPositiveIntegerString(quoteId) = True Then
            qqo = TestReturnQuote(quoteId)

            'If qqo Is Nothing OrElse qqo.LobType <> QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
            'updated 10/14/2016 to work for DFR or HOM
            If qqo Is Nothing OrElse qqo.LobType <> lobType Then
                'quoteId = "" 'could just reset so logic below creates new quote, but probably better to stop; logic below would also reset quoteId if instantiating new QQO
                needToStopBecauseOfProblem = True
            Else
                Dim startLoc As QuickQuoteLocation = Nothing
                Dim startLocationAddress As String = ""
                Dim startProtClassId As String = ""
                Dim startProtClass As String = ""
                Dim startProtClassSysGenId As String = ""
                Dim startProtClassSysGen As String = ""
                Dim startFireDeptDistrict As String = ""
                Dim startFireDeptDistId As String = ""
                Dim startPhAddress As String = ""
                If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                    startLoc = qqo.Locations(0)
                    With startLoc
                        If .Address IsNot Nothing Then
                            startLocationAddress = .Address.OneLineStreetAddress
                        End If
                        startProtClassId = .ProtectionClassId
                        startProtClass = .ProtectionClass
                        startProtClassSysGenId = .ProtectionClassSystemGeneratedId
                        startProtClassSysGen = .ProtectionClassSystemGenerated
                        startFireDeptDistrict = .FireDistrictName
                        startFireDeptDistId = .FireDepartmentDistanceId
                    End With
                End If
                If qqo.Policyholder IsNot Nothing AndAlso qqo.Policyholder.Address IsNot Nothing Then
                    startPhAddress = qqo.Policyholder.Address.OneLineStreetAddress
                End If
            End If
        End If

        If needToStopBecauseOfProblem = False Then
            If qqo Is Nothing Then
                quoteId = ""
                qqo = New QuickQuoteObject
                With qqo
                    '.LobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal
                    'updated 10/14/2016 to work for DFR or HOM
                    .LobType = lobType
                    .EffectiveDate = Date.Today.ToShortDateString
                    '.QuoteDescription = "Don DFR PPC Testing"
                    'updated 10/14/2016 to work for DFR or HOM
                    .QuoteDescription = "Don " & If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "DFR", "HOM") & " PPC Testing"
                End With
            End If
            With qqo
                '.EffectiveDate = Date.Today.ToShortDateString

                'added 10/20/2016 for testing
                '.EffectiveDate = "9/30/2016" 'pre-Verisk
                .EffectiveDate = Date.Today.ToShortDateString 'post Verisk

                If .Policyholder Is Nothing Then
                    .Policyholder = New QuickQuotePolicyholder
                End If
                With .Policyholder
                    Dim setPolicyholderName As Boolean = False 'added 10/20/2016
                    If .Name Is Nothing Then
                        .Name = New QuickQuoteName
                        setPolicyholderName = True 'added 10/20/2016
                    End If
                    If setPolicyholderName = False AndAlso .Name.HasData = False Then
                        setPolicyholderName = True
                    End If
                    'setPolicyholderName = True 'added 10/20/2016; use if we want to force PH name overwrite
                    With .Name
                        If setPolicyholderName = True Then 'added IF 10/20/2016 to prevent credit from being re-ordered because last name casing doesn't match what's in Diamond (since we store as all caps)... probably need to update qqhelper.IsQuickQuoteToDiamondObjectMatch_Applicant to check UCase between qqName and diaName, but shouldn't be issue outside of local testing where we keep overwriting info on every Rate
                            .FirstName = "Don"
                            '.LastName = "Dwelling"
                            'updated 10/14/2016 to work for DFR or HOM
                            .LastName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwelling", "Home")
                            .SexId = "1"
                            .TypeId = "1"
                            .TaxNumber = "123456789"
                            .TaxTypeId = "1"
                            .EntityTypeId = "1" 'Individual
                            .DescriptionOfOperations = "PH test"
                            .BirthDate = "1/1/1982"
                            .DriversLicenseDate = "1/1/1998"
                            .DriversLicenseNumber = "1234-56-7890"
                            .MaritalStatusId = "1" '1=Single; 2=Married
                        End If
                    End With
                    Dim setPolicyholderAddress As Boolean = False 'added 10/20/2016
                    If .Address Is Nothing Then
                        .Address = New QuickQuoteAddress
                        setPolicyholderAddress = True 'added 10/20/2016
                    End If
                    If setPolicyholderAddress = False AndAlso .Address.HasData = False Then
                        setPolicyholderAddress = True
                    End If
                    'setPolicyholderAddress = True 'added 10/20/2016; use if we want to force PH address overwrite
                    With .Address
                        If setPolicyholderAddress = True Then 'added IF 10/20/2016
                            '.HouseNum = "567"
                            ''.StreetName = "Dwell Boulevard"
                            ''updated 10/14/2016 to work for DFR or HOM
                            '.StreetName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwell", "Home") & " Boulevard"
                            '.City = "Fishers"
                            '.Zip = "46038"
                            '.County = "Hamilton"

                            .HouseNum = "107"
                            .StreetName = "S Spring Street"
                            .City = "Princeton"
                            .StateId = "16"
                            .Zip = "47670"
                            .County = "Gibson"
                        End If
                    End With

                End With
                .CopyPolicyholdersToClients() 'should maintain clientId if it's there; would have to manually reset if needed
                .CopyPolicyholdersToApplicants()

                If .Locations Is Nothing Then
                    .Locations = New List(Of QuickQuoteLocation)
                End If
                If .Locations.Count = 0 Then
                    .Locations.Add(New QuickQuoteLocation)
                End If
                With .Locations(0) '1st location; should be only one for DFR or HOM
                    If .Address Is Nothing OrElse .Address.HasFullStreetAddress = False Then
                        qqHelper.CopyQuickQuoteAddress(qqo.Policyholder.Address, .Address)
                    End If
                    With .Address
                        '.HouseNum = "567"
                        ''.StreetName = "Dwell Boulevard"
                        ''updated 10/14/2016 to work for DFR or HOM
                        '.StreetName = If(lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal, "Dwell", "Home") & " Boulevard"
                        '.City = "Fishers"
                        '.Zip = "46038"
                        '.County = "Hamilton" 'note: required for subsequent Saves after initial submit to Diamond

                        'this test results in 4 for protClassId and protClassSysGenId
                        '.HouseNum = "107"
                        '.StreetName = "S Spring St"
                        '.City = "Princeton"
                        '.StateId = "16"
                        '.Zip = "47670-2049"
                        '.County = "Gibson" 'note: required for subsequent Saves after initial submit to Diamond

                        '.HouseNum = "2627"
                        '.StreetName = "E Northwood Ave"
                        '.City = "Terre Haute"
                        '.StateId = "16"
                        '.Zip = "47805-2615"
                        '.County = "Vigo" 'note: required for subsequent Saves after initial submit to Diamond

                        'extra test addresses added 10/23/2016

                        'example had 28 for protClassId (protClass 6X) and 6 for protClassSysGenId (protClassSysGen 6)
                        'test test results in 28 for protClassId and protClassSysGenId (6X)
                        '.HouseNum = "7516"
                        '.StreetName = "Meinschein Road" 'should come back as Rd
                        '.City = "Mount Vernon"
                        '.StateId = "16"
                        '.Zip = "47620" 'should come back as 47620-8345
                        '.County = "Posey"
                        'and updated address
                        '.HouseNum = "7516"
                        '.StreetName = "Meinschein Rd"
                        '.City = "Mount Vernon"
                        '.StateId = "16"
                        '.Zip = "47620-8345"
                        '.County = "Posey"

                        'example had 6 for protClassId (protClass 6) and 9 for protClassSysGenId (protClassSysGen 9)
                        'test test results in 9 for protClassId and protClassSysGenId (9)
                        '.HouseNum = "1749"
                        '.StreetName = "E Co Rd 25 N" 'should come back as County Road; check to see if returnedAddress comes back w/ extra space in between 25 and N... looks like it does from database view... confirmed that our lookup logic doesn't find a match because of the extra space in between 25 and N
                        '.City = "Brownstown"
                        '.StateId = "16"
                        '.Zip = "47220" 'should come back as 47220-9510
                        '.County = "Jackson"
                        'and updated address
                        '.HouseNum = "1749"
                        '.StreetName = "E County Road 25 N"
                        '.City = "Brownstown"
                        '.StateId = "16"
                        '.Zip = "47220-9510"
                        '.County = "Jackson"

                        'example had 5 for protClassId (protClass 5) and 27 for protClassSysGenId (protClassSysGen 5X)
                        'test test results in 27 for protClassId and protClassSysGenId (5X)
                        '.HouseNum = "788"
                        '.StreetName = "W New Hope Rd"
                        '.City = "Boonville"
                        '.StateId = "16"
                        '.Zip = "47601" 'should come back as 47601-8107
                        '.County = "Warrick" 'note: see http://www.statsamerica.org/CityCountyFinder/Default.aspx for county lookup by city
                        'and updated address
                        '.HouseNum = "788"
                        '.StreetName = "W New Hope Rd"
                        '.City = "Boonville"
                        '.StateId = "16"
                        '.Zip = "47601-8107"
                        '.County = "Warrick"
                    End With
                    'updated 10/14/2016 to work for DFR or HOM; original logic in IF
                    If lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
                        .FormTypeId = "11" 'DP 00 02 - Broad
                        .ProgramTypeId = "3" 'Dwelling Fire
                    Else 'HOM
                        .FormTypeId = "1" 'HO-2 - Homeowners Broad Form
                        .ProgramTypeId = "1" 'Homeowners
                    End If

                    .FireHydrantDistanceId = "1" 'Over 1,000 Feet

                    'note: all of these appear to be required for subsequent Saves after initial submit to Diamond
                    .YearBuilt = "1990"
                    .ConstructionTypeId = "1" 'Frame
                    .StructureTypeId = "13" 'Conventionally Built
                    'updated 10/14/2016 to work for DFR or HOM; original logic in IF
                    If lobType = QuickQuoteObject.QuickQuoteLobType.DwellingFirePersonal Then
                        .OccupancyCodeId = "14" 'Owner Occupied; may not be typical selection for DFR
                    Else
                        .OccupancyCodeId = "1" 'Owner
                    End If
                    'ProtectionClass also required but should be set by Verisk Service call
                    .NumberOfFamiliesId = "1" '1
                    .UsageTypeId = "2" 'Non-Seasonal

                    'Location Num #1 Coverage A or C is required.
                    .A_Dwelling_Limit = "100000"
                    .A_Dwelling_LimitIncluded = "0"
                    .A_Dwelling_LimitIncreased = "100000"
                    '.C_PersonalProperty_Limit = "20000"
                    '.C_PersonalProperty_LimitIncluded = ""
                    '.C_PersonalProperty_LimitIncreased = "20000"

                    'deductible eventually required for Rate after Save validation passes
                    '.DeductibleLimitId = "22" '500 (coverage)

                    '.ProtectionClassId = "3" 'added 10/21/2016 for testing a pre-Verisk date after report ordered on good date and then wiping out sysGenProtClassId
                    'adding this to hopefully cause Rate call to not fix Verisk report so I can test our report ordering logic
                    '.A_Dwelling_Limit = ""
                    '.A_Dwelling_LimitIncluded = ""
                    '.A_Dwelling_LimitIncreased = ""
                End With
            End With

            'added 10/14/2016 to work for DFR or HOM; need to order Credit for HOM so it works like it will when using VelociRater
            If lobType = QuickQuoteObject.QuickQuoteLobType.HomePersonal Then
                'If qqHelper.IsPositiveIntegerString(qqo.Database_QuoteId) = False OrElse (qqo.TieringInformation Is Nothing OrElse qqo.TieringInformation.RatedTier = "") Then
                'updated since it doesn't appear that TieringInformation shows up anywhere until after the next Diamond Rate; confirmed that everything is working fine
                If qqHelper.IsPositiveIntegerString(qqo.Database_QuoteId) = False Then
                    Dim tpd As Diamond.Common.Objects.ThirdParty.ThirdPartyData = Nothing
                    Dim results As String = ""
                    Dim creditErrorMsg As String = ""
                    QQxml.LoadCreditForQuote(qqo, tpd, results, creditErrorMsg)
                    If tpd IsNot Nothing Then
                        'make sure credit data is saved back to quote; doesn't appear that LoadCreditForQuote Saves back
                        Dim saveErrorMsg As String = ""
                        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qqo.Database_QuoteId, saveErrorMsg)
                    End If
                End If
            End If

            Dim needToReloadQuote As Boolean = False
            Dim ratingSuccess As Boolean = False
            Dim manuallyOrderedAnyReports As Boolean = False
            Dim problemWithDiamondAddressNotMatchingQuickQuote As Boolean = False
            Dim manuallyFoundAnyExistingReports As Boolean = False
            'QQxml.CheckQuoteForProtectionClassInfoAndOrderVeriskReportIfNeeded(qqo, needToReloadQuote, ratingSuccess:=ratingSuccess, manuallyOrderedAnyReports:=manuallyOrderedAnyReports, manuallyFoundAnyExistingReports:=manuallyFoundAnyExistingReports, problemWithDiamondAddressNotMatchingQuickQuote:=problemWithDiamondAddressNotMatchingQuickQuote)
            'updated 10/23/2016 to start using Settings and ResultFlags objects
            Dim reportOrderingResultFlags As QuickQuoteVeriskProtectionClassReportOrderingResultFlags = Nothing
            Dim reportOrderingSettings As New QuickQuoteVeriskProtectionClassReportOrderingSettings
            With reportOrderingSettings
                .ForceReportOrderingAndOrCheckingFunctionalityIfValidationPasses = True
            End With 'nothing to set right now; will leave defaults
            QQxml.CheckQuoteForProtectionClassInfoAndOrderVeriskReportIfNeeded_WithSettingsAndResultFlags(qqo, needToReloadQuote, reportOrderingResultFlags, reportOrderingSettings)
            If reportOrderingResultFlags IsNot Nothing Then
                With reportOrderingResultFlags
                    ratingSuccess = .RatingSuccess
                    If ratingSuccess = False Then 'will set normal ratingSuccess flag to True if DiamondLogicDefinitelySetProtClassSysGenIdOnRatingFailure is True
                        ratingSuccess = .DiamondLogicDefinitelySetProtClassSysGenIdOnRatingFailure
                    End If
                    manuallyOrderedAnyReports = .ManuallyOrderedAnyReports
                    manuallyFoundAnyExistingReports = .ManuallyFoundAnyExistingReports
                    problemWithDiamondAddressNotMatchingQuickQuote = .ProblemWithDiamondAddressNotMatchingQuickQuote
                End With
            End If
            'now testing Rate since CheckQuote method will only attempt Rate if needed... worked fine except Diamond dropped FireDepartmentDistanceId
            'Dim saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote
            'Dim ratedQQ As QuickQuoteObject = Nothing
            'Dim strQQ As String = ""
            'Dim strRatedQQ As String = ""
            'Dim rateErrorMsg As String = ""
            'QQxml.RateQuoteAndSave(saveOrRateType, qqo, strQQ, ratedQQ, strRatedQQ, qqo.Database_QuoteId, rateErrorMsg) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
            ''qqxml.RateQuoteAndSave(saveOrRateType, qqo, qqo.Database_QuoteId, rateErrorMsg) 'normal method
            'If rateErrorMsg = "" Then
            '    'okay
            '    'Response.Redirect("DiamondQuoteSummary.aspx?QuoteId=" & qId)

            'Else
            '    'error
            'End If

            Dim currLoc As QuickQuoteLocation = Nothing
            Dim currLocationAddress As String = ""
            Dim currProtClassId As String = ""
            Dim currProtClass As String = ""
            Dim currProtClassSysGenId As String = ""
            Dim currProtClassSysGen As String = ""
            Dim currFireDeptDistrict As String = ""
            Dim currFireDeptDistId As String = ""
            Dim currPhAddress As String = ""
            If qqo IsNot Nothing AndAlso qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                currLoc = qqo.Locations(0)
                With currLoc
                    If .Address IsNot Nothing Then
                        currLocationAddress = .Address.OneLineStreetAddress
                    End If
                    currProtClassId = .ProtectionClassId
                    currProtClass = .ProtectionClass
                    currProtClassSysGenId = .ProtectionClassSystemGeneratedId
                    currProtClassSysGen = .ProtectionClassSystemGenerated
                    currFireDeptDistrict = .FireDistrictName
                    currFireDeptDistId = .FireDepartmentDistanceId
                End With
            End If
            If qqo IsNot Nothing AndAlso qqo.Policyholder IsNot Nothing AndAlso qqo.Policyholder.Address IsNot Nothing Then
                currPhAddress = qqo.Policyholder.Address.OneLineStreetAddress
            End If
            If needToReloadQuote = True Then
                If ratingSuccess = True Then

                End If
                If manuallyOrderedAnyReports = True Then

                End If
                If manuallyFoundAnyExistingReports = True Then

                End If
                If problemWithDiamondAddressNotMatchingQuickQuote = True Then

                End If
            End If


        End If


        '1st time thru w/ dummy address: my logic manually ordered report because rating failed; report shows in Diamond, but no protClass fields were updated (may need to set extra boolean property in service call)
        '2nd time thru w/ same info: logic wasn't hit since address was the same
        '3rd time thru w/ different address: rating failed again and my logic found an existing report so didn't order anything
        '3rd time thru w/ other address and no logic to look for existing report: rating failed (also Diamond save) and my logic attempted report ordering and looked successful, but nothing new in Diamond... since Save failed too, service was called on old address, so maybe Diamond logic knew it didn't need to order report


        'need to check my logic to write PPC fields to XML to make sure they don't come over on CopyQuote



        'test notes 10/23/2016 pm
        '        {LobId 3 (DwellingFirePersonal; VersionId: 105)
        'QuoteId: 117772
        'QuoteXmlId: 473095
        'QuoteNumber: QDFR022799
        'TotalQuotedPremium: $0.00
        'QuoteDescription: Don DFR PPC Testing
        '1 Applicants
        '1 Locations
        '2 Modifiers}

        '-diamond logic didn't order on initial dia Save/Rate attempt
        '{ValidationSeverityTypeId: 1 (2)
        'Message: Location Num #1 Protection Class Is required.}
        '-but my logic ordered it after it saw that Diamond didn't do anything (4 for both protClassId and protClassSysGenId - normal address)
        'Diamond logic was able to order for 2nd address (28 for protClassId and protClassSysGenId - 6X)
        'Diamond logic was able to order for 3rd address (9 for protClassId and protClassSysGenId - 9)
        'Diamond logic was able to order for 4th address (27 for protClassId and protClassSysGenId - 5X)
        'then back to original address: Diamond rated successfully but wouldn't change protClass because of validation... {Refer to Management for approval of Protection Class Override, Error}; {Rating Successful!, Other}; now shows protClassId 27 (5X) and protClassSysGenId 4 (4)... protClass still has value from previous address... Diamond's functionality that finds existing address must not be working
        'then back to 2nd address: Diamond wouldn't even Save (didn't even get to logic to order/checkFor report)... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)
        'then back to 3rd address: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic was unable to find address match because of how Diamond shows ReturnedAddress w/ extra space in between 25 and N... no report was manually ordered because of problem w/ Diamond address not being up-to-date (our validation)
        'then back to 4th address: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)
        'then back to original address again: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)

    End Sub
    Private Sub TestPPCReportDataWithZipRecords()
        '10/18/2016 - testing PPC Report Data that shows multiple results (possibly split class); testing on Patch
        Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        'Dim qqo As QuickQuoteObject = TestReturnQuote("117654") 'QHOM259802; Martin's quote w/ multiple zip records; PredominantPPC = "4       " (PublicProtectionClass = "")
        'Dim qqo As QuickQuoteObject = TestReturnQuote("117656") 'QHOM259804; normal quote
        Dim qqo As QuickQuoteObject = TestReturnQuote("117757") 'QDFR022792; latest test quote... trying to find way to get protClassSysGenId back when Diamond fails to re-pull report data because of Rating validations; PublicProtectionClass = "4       " (PredominantPPC = "")
        If qqo IsNot Nothing Then
            rd = QQxml.GetPPCReportDataForQuote(qqo)
            If rd IsNot Nothing Then
                If rd.ZipRecords IsNot Nothing AndAlso rd.ZipRecords.Count > 0 Then '10/19/2016 note: ZipRecords property not available until replacing Diamond.Common.Objects.dll version (timestamp went from 4/28/2016 8:21PM to 9/12/2016 10:49AM)

                End If
            End If

            'If qqHelper.IsPositiveIntegerString(qqo.PolicyId) = True Then
            '    Dim isoTs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = QQxml.GetISOTransmissions(CInt(qqo.PolicyId))
            '    If isoTs IsNot Nothing AndAlso isoTs.Count > 0 Then
            '        For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In isoTs
            '            rd = QQxml.ProcessPPC(isoT.PolicyId, isoT.PolicyImageNum, isoT.ImportXML)
            '            If isoT.PolicyId > 0 Then
            '                'Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Request
            '                'Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Response
            '                'With req.RequestData
            '                '    .PolicyId = isoT.PolicyId
            '                '    .PolicyImageNum = isoT.PolicyImageNum 'may not be needed; still worked w/ 0
            '                '    .IncomingDataRaw = isoT.ImportXML
            '                'End With
            '                'Try
            '                '    Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
            '                '        res = proxy.ProcessISOPPC(req)
            '                '    End Using
            '                'Catch ex As Exception
            '                '    Dim errorMsg As String = ex.ToString
            '                '    If errorMsg <> "" Then

            '                '    End If
            '                'End Try
            '                'If res IsNot Nothing Then
            '                '    With res
            '                '        If .DiamondValidation IsNot Nothing Then

            '                '        End If
            '                '        If .ResponseData IsNot Nothing Then
            '                '            With .ResponseData
            '                '                If .ReportData IsNot Nothing Then
            '                '                    rd = .ReportData
            '                '                End If
            '                '            End With
            '                '        End If
            '                '    End With
            '                'End If

            '                '----------------
            '                'Dim diaImage As Diamond.Common.Objects.Policy.Image = QQxml.DiamondImageForQuickQuoteObject(qqo)
            '                'If diaImage IsNot Nothing Then
            '                '    Dim req2 As New Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Request
            '                '    Dim res2 As New Diamond.Common.Services.Messages.ThirdPartyService.LoadViewReportsScreenData.Response
            '                '    With req2.RequestData
            '                '        '.Rows = New List(Of String) 'goes w/ ProtectionClassImport
            '                '        .PolicyImage = diaImage

            '                '    End With
            '                '    Try
            '                '        Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
            '                '            res2 = proxy.LoadViewReportsScreenData(req2)
            '                '        End Using
            '                '    Catch ex As Exception
            '                '        Dim errorMsg As String = ex.ToString
            '                '        If String.IsNullOrWhiteSpace(errorMsg) = False Then

            '                '        End If
            '                '    End Try
            '                '    If res2 IsNot Nothing Then
            '                '        With res2
            '                '            If .DiamondValidation IsNot Nothing Then

            '                '            End If
            '                '            If .ResponseData IsNot Nothing Then
            '                '                With .ResponseData
            '                '                    If .ReportItems IsNot Nothing AndAlso .ReportItems.Count > 0 Then
            '                '                        For Each ri As Diamond.Common.Services.Messages.ThirdPartyService.ReportsScreen.ReportItem In .ReportItems
            '                '                            Dim currentField As String = ""
            '                '                            With ri
            '                '                                currentField = .ChoicePointRequestId.ToString 'int
            '                '                                currentField = .DateReceived
            '                '                                currentField = .DateRequested
            '                '                                currentField = .DateSent
            '                '                                currentField = .Dscr
            '                '                                currentField = .IncomingDataRaw
            '                '                                currentField = .IncomingDataXml
            '                '                                currentField = .IsLocation.ToString
            '                '                                currentField = .Key
            '                '                                currentField = .OrderedOn
            '                '                                currentField = .OutgoingDataRaw
            '                '                                currentField = .OutgoingDataXml
            '                '                                currentField = .ProcessingStatus
            '                '                                currentField = .StatusDscr
            '                '                                currentField = .ThirdPartyTypeId.ToString
            '                '                                currentField = .UnitNum
            '                '                            End With
            '                '                        Next
            '                '                    End If
            '                '                End With
            '                '            End If
            '                '        End With
            '                '    End If
            '                'End If
            '                '-------------
            '            End If
            '            If rd IsNot Nothing Then

            '            End If
            '        Next
            '    End If
            'End If

        End If
    End Sub

    'added 10/22/2016
    Private Sub TestPPCReportDataForSpecificQuoteAddress()

        Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        'Dim qqo As QuickQuoteObject = TestReturnQuote("117654") 'QHOM259802; Martin's quote w/ multiple zip records; PredominantPPC = "4       " (PublicProtectionClass = "")
        'Dim qqo As QuickQuoteObject = TestReturnQuote("117656") 'QHOM259804; normal quote
        Dim qqo As QuickQuoteObject = TestReturnQuote("117757") 'QDFR022792; latest test quote... trying to find way to get protClassSysGenId back when Diamond fails to re-pull report data because of Rating validations; PublicProtectionClass = "4       " (PredominantPPC = "")
        If qqo IsNot Nothing Then
            'rd = QQxml.GetPPCReportDataForLocationAddress(qqo) 'this worked fine; 10/23/2016 note: worked fine except for when locAddress has aptNum... new logic below w/ streetAddressEvalType to try both w/ and w/o aptNum works
            'updated 10/23/2016 w/ other params
            Dim streetAddressEvalType As QuickQuoteHelperClass.StreetAddressEvaluationType = QuickQuoteHelperClass.StreetAddressEvaluationType.Both
            'streetAddressEvalType = QuickQuoteHelperClass.StreetAddressEvaluationType.NormalWithApartmentNum
            'streetAddressEvalType = QuickQuoteHelperClass.StreetAddressEvaluationType.WithoutApartmentNum
            Dim transmissionSearchType As QuickQuoteXML.IsoTransmissionSearchType = QuickQuoteXML.IsoTransmissionSearchType.ByEasiest
            'transmissionSearchType = QuickQuoteXML.IsoTransmissionSearchType.ByActualTransmission
            'transmissionSearchType = QuickQuoteXML.IsoTransmissionSearchType.ByTransmissionLookup
            rd = QQxml.GetPPCReportDataForLocationAddress(quote:=qqo, streetAddressEvalType:=streetAddressEvalType, transmissionSearchType:=transmissionSearchType)
            If rd IsNot Nothing Then
                If String.IsNullOrWhiteSpace(rd.PublicProtectionClass) = False Then 'appears to be used on exact match (no zipRecords)

                End If
                If String.IsNullOrWhiteSpace(rd.PredominantPPC) = False Then 'appears to be used on zip match (has zipRecords)

                End If
                If rd.ZipRecords IsNot Nothing AndAlso rd.ZipRecords.Count > 0 Then

                End If

            End If

            'will now get report data the old way to see if the isoT.importXml property is also encrypted like it is when pulling from the database
            'note: logic works both ways... ProcessPPC service is able to handle xml that comes back from isoT or encrypted string that comes back from db lookup
            'If qqHelper.IsPositiveIntegerString(qqo.PolicyId) = True Then
            '    Dim isoTs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = QQxml.GetISOTransmissions(CInt(qqo.PolicyId))
            '    If isoTs IsNot Nothing AndAlso isoTs.Count > 0 Then
            '        Dim rd2 As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
            '        For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In isoTs
            '            rd2 = QQxml.ProcessPPC(isoT.PolicyId, isoT.PolicyImageNum, isoT.ImportXML)
            '            'If isoT.PolicyId > 0 Then
            '            '    Dim req As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Request
            '            '    Dim res As New Diamond.Common.Services.Messages.ThirdPartyService.ProcessISOPPC.Response
            '            '    With req.RequestData
            '            '        .PolicyId = isoT.PolicyId
            '            '        .PolicyImageNum = isoT.PolicyImageNum 'may not be needed; still worked w/ 0
            '            '        .IncomingDataRaw = isoT.ImportXML
            '            '    End With
            '            '    Try
            '            '        Using proxy As New Diamond.Common.Services.Proxies.ThirdPartyServiceProxy
            '            '            res = proxy.ProcessISOPPC(req)
            '            '        End Using
            '            '    Catch ex As Exception
            '            '        Dim errorMsg As String = ex.ToString
            '            '        If errorMsg <> "" Then

            '            '        End If
            '            '    End Try
            '            '    If res IsNot Nothing Then
            '            '        With res
            '            '            If .DiamondValidation IsNot Nothing Then

            '            '            End If
            '            '            If .ResponseData IsNot Nothing Then
            '            '                With .ResponseData
            '            '                    If .ReportData IsNot Nothing Then
            '            '                        rd2 = .ReportData
            '            '                    End If
            '            '                End With
            '            '            End If
            '            '        End With
            '            '    End If

            '            'End If
            '            If rd2 IsNot Nothing Then

            '            End If
            '        Next
            '    End If
            'End If

        End If
    End Sub
    'added 10/24/2016 - to see what data is coming back in reports for testing 10/23/2016
    Private Sub TestPPCReportDataForIsoTransmissions()
        '-diamond logic didn't order on initial dia Save/Rate attempt
        '{ValidationSeverityTypeId: 1 (2)
        'Message: Location Num #1 Protection Class Is required.}
        '-but my logic ordered it after it saw that Diamond didn't do anything (4 for both protClassId and protClassSysGenId - normal address)
        'Diamond logic was able to order for 2nd address (28 for protClassId and protClassSysGenId - 6X)
        'Diamond logic was able to order for 3rd address (9 for protClassId and protClassSysGenId - 9)
        'Diamond logic was able to order for 4th address (27 for protClassId and protClassSysGenId - 5X)
        'then back to original address: Diamond rated successfully but wouldn't change protClass because of validation... {Refer to Management for approval of Protection Class Override, Error}; {Rating Successful!, Other}; now shows protClassId 27 (5X) and protClassSysGenId 4 (4)... protClass still has value from previous address... Diamond's functionality that finds existing address must not be working
        'then back to 2nd address: Diamond wouldn't even Save (didn't even get to logic to order/checkFor report)... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)
        'then back to 3rd address: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic was unable to find address match because of how Diamond shows ReturnedAddress w/ extra space in between 25 and N... no report was manually ordered because of problem w/ Diamond address not being up-to-date (our validation)
        'then back to 4th address: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)
        'then back to original address again: same as last time... Diamond wouldn't Save... {Refer to Management for approval of Protection Class Override, Error}; nothing was changed in Diamond... my logic found existing isoT, but didn't do anything (because no logic in place yet)

        Dim rd As Diamond.Common.Objects.ThirdParty.ReportObjects.ISOPPC.ISOPPCReportData = Nothing
        Dim qqo As QuickQuoteObject = TestReturnQuote("117772") 'QDFR022799
        If qqo IsNot Nothing Then


            If qqHelper.IsPositiveIntegerString(qqo.PolicyId) = True Then
                Dim isoTs As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.ThirdParty.ISOTransmission) = QQxml.GetISOTransmissions(CInt(qqo.PolicyId))
                If isoTs IsNot Nothing AndAlso isoTs.Count > 0 Then
                    For Each isoT As Diamond.Common.Objects.ThirdParty.ISOTransmission In isoTs
                        rd = QQxml.ProcessPPC(isoT.PolicyId, isoT.PolicyImageNum, isoT.ImportXML)
                        If rd IsNot Nothing Then
                            If String.IsNullOrWhiteSpace(rd.PublicProtectionClass) = False Then 'appears to be used on exact match (no zipRecords); example: PublicProtectionClass = "4       "

                            End If
                            If String.IsNullOrWhiteSpace(rd.PredominantPPC) = False Then 'appears to be used on zip match (has zipRecords); example: PredominantPPC = "4       "

                            End If
                            If rd.ZipRecords IsNot Nothing AndAlso rd.ZipRecords.Count > 0 Then

                            End If
                        End If
                    Next
                End If
            End If

        End If
    End Sub

    'added 10/24/2016 for testing Billing stuff... like reversing payments (testing w/ PrintServices user)
    Private Sub ReversePayments()
        QuickQuoteHelperClass.CheckDiamondServicesToken()

        Dim caughtException As Boolean = False
        Dim reversalSuccess As Boolean = False
        Dim req_ReversalCashAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Request
        Dim res_ReversalCashAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Response

        With req_ReversalCashAdjustment
            With .RequestData
                '.BillingCashTypeId = Diamond.Common.Enums.Billing.BillingCashType.Reversal '24
                .BillingCashTypeId = Diamond.Common.Enums.Billing.BillingCashType.ReversalPayment '8
                If .Cash Is Nothing Then
                    .Cash = New Diamond.Common.Objects.Billing.Cash
                End If
                'test data using latest lockbox payment on Patch (PPA2065892); successful but didn't set BillingCashTypeId or BillingCashInSourceId (didn't initially have BillingCashId or Cash.BillingCashTypeId; subsequent attempt on same reversal (w/ more fields updated) didn't work: {This item has already been adjusted., Error}
                'With .Cash
                '    '.AccountingBatchId = 0
                '    '.AdjustNum = 0
                '    '.Amount = New Decimal
                '    .Amount = CType("-16.85", Decimal)
                '    .BillingCashTypeId = 8 'Reversal of Payment; added after original successful reversal didn't have this (obviously doesn't carry over from RequestData); maybe adding BillCashId below will help too
                '    .BillingCashInSourceId = 10005 'Retail Lockbox - Remittances; didn't work on original successful reversal... maybe adding BillCashId below will help
                '    .PolicyId = 260746
                '    '.UsersId = 0 'should use logged-in user
                '    '.UsersId = qqHelper.IntegerForString(QuickQuoteHelperClass.DiamondUserId) 'could use this, but shouldn't be needed
                '    .BillingCashNum = 125
                '    .BillingReasonId = 10201 'Lockbox Error Correction
                '    .CheckNum = "01685P"
                '    '.CheckDate = New Diamond.Common.Objects.InsDateTime
                '    .CheckDate = CType("7/19/2016", Diamond.Common.Objects.InsDateTime)
                '    .BillingCashId = 6155757 'added after original successful reversal was missing CashType and CashSource

                'End With
                '.PolicyId = 260746

                '2nd test (PPA2084302); also successful but also didn't set BillingCashTypeId or BillingCashInSourceId (new properties were already set)
                'With .Cash
                '    .Amount = CType("-206.08", Decimal)
                '    .BillingCashTypeId = 8 'Reversal of Payment; added after original successful reversal didn't have this (obviously doesn't carry over from RequestData); maybe adding BillCashId below will help too
                '    .BillingCashInSourceId = 10005 'Retail Lockbox - Remittances; didn't work on original successful reversal... maybe adding BillCashId below will help
                '    .PolicyId = 557754
                '    '.UsersId = 0 'should use logged-in user; worked
                '    '.UsersId = qqHelper.IntegerForString(QuickQuoteHelperClass.DiamondUserId) 'could use this, but shouldn't be needed... confirmed this isn't needed
                '    .BillingCashNum = 35
                '    .BillingReasonId = 10201 'Lockbox Error Correction
                '    .CheckNum = "20608P"
                '    .CheckDate = CType("7/19/2016", Diamond.Common.Objects.InsDateTime)
                '    .BillingCashId = 6155756 'added after original successful reversal was missing CashType and CashSource

                'End With
                '.PolicyId = 557754

                '3rd test (PPA1006536); also successful, but still didn't set BillingCashTypeId or BillingCashInSourceId (setting IsNew to True didn't make a difference)
                '.SetIsNewValue(True)
                'With .Cash
                '    .Amount = CType("-80.97", Decimal)
                '    .BillingCashTypeId = 8 'Reversal of Payment
                '    .BillingCashInSourceId = 10005 'Retail Lockbox - Remittances
                '    .PolicyId = 15737
                '    '.UsersId = 0 'should use logged-in user; worked
                '    '.UsersId = qqHelper.IntegerForString(QuickQuoteHelperClass.DiamondUserId) 'could use this, but shouldn't be needed... confirmed this isn't needed
                '    .BillingCashNum = 92
                '    .BillingReasonId = 10201 'Lockbox Error Correction
                '    .CheckNum = "08097P"
                '    .CheckDate = CType("7/19/2016", Diamond.Common.Objects.InsDateTime)
                '    .BillingCashId = 6155754
                '    .SetIsNewValue(True)

                'End With
                '.PolicyId = 15737

                '.SetIsNewValue(True)
                With .Cash
                    .Amount = CType("", Decimal)
                    .BillingCashTypeId = 8 'Reversal of Payment
                    .BillingCashInSourceId = 10005 'Retail Lockbox - Remittances
                    .PolicyId = 0
                    '.UsersId = 0 'should use logged-in user; worked
                    '.UsersId = qqHelper.IntegerForString(QuickQuoteHelperClass.DiamondUserId) 'could use this, but shouldn't be needed... confirmed this isn't needed
                    .BillingCashNum = 0
                    .BillingReasonId = 10201 'Lockbox Error Correction
                    .CheckNum = ""
                    .CheckDate = CType("", Diamond.Common.Objects.InsDateTime)
                    .BillingCashId = 0
                    '.SetIsNewValue(True)

                End With
                .PolicyId = 0


            End With
        End With

        Try
            'Using proxy As New Diamond.Common.Services.Proxies.BillingServiceProxy
            '    res_ReversalCashAdjustment = proxy.ReversalCashAdjustment(req_ReversalCashAdjustment)
            'End Using
        Catch ex As Exception
            caughtException = True
        End Try

        If res_ReversalCashAdjustment IsNot Nothing Then
            With res_ReversalCashAdjustment
                If .DiamondValidation IsNot Nothing Then
                    With .DiamondValidation

                    End With
                End If
                If .ResponseData IsNot Nothing Then
                    With .ResponseData
                        If .Success = True Then
                            reversalSuccess = True
                        End If
                    End With
                End If
            End With
        End If

        If reversalSuccess = True Then
            'success

        ElseIf caughtException = True Then
            'caught error

        Else
            'just failed

        End If

        'Dim req_ReversalChargesCreditsAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Request
        'Dim res_ReversalChargesCreditsAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalChargesCreditsAdjustment.Response

        'With req_ReversalChargesCreditsAdjustment
        '    With .RequestData
        '        .BillingReasonId = 0
        '        .PolicyId = 0
        '        If .Statement Is Nothing Then
        '            .Statement = New Diamond.Common.Objects.Billing.Statement
        '        End If
        '        With .Statement
        '            .AdjustNum = 0
        '            .Balance = New Decimal
        '            .BilledAmount = ""
        '            .BillingAccountCashId = 0
        '            .BillingCashInSourceId = 0
        '            .BillingCashNum = 0
        '            .BillingCashTypeId = 0
        '            .BillingChargeCreditNum = 0
        '            .BillingChargesCreditsTypeId = 0
        '            .BillingNoticeNum = 0
        '            .BillingNoticeTypeId = 0
        '            .BillingTransactionTypeId = 0
        '            .CheckNum = ""
        '            .CurrentPolicy = ""
        '            .Description = ""
        '            .DueDate = New Diamond.Common.Objects.InsDateTime
        '            .PaidAmount = ""
        '            .PolicyId = 0
        '            .PolicyImageNum = 0
        '            .PrintDescription = ""
        '            .PrintProcessId = 0
        '            .RenewalVer = ""
        '            .Source = ""
        '            .TransDate = New Diamond.Common.Objects.InsDateTime
        '            .TransferNum = 0
        '            .Type = ""
        '            .User = ""

        '        End With

        '    End With
        'End With

    End Sub
    Private Function SuccessfullyReversedPayment(ByVal policyId As Integer, ByVal amount As String, ByVal cashSourceId As Integer, ByVal billingCashNum As Integer, ByVal checkNum As String, ByVal checkDate As String, ByVal billingCashId As Integer, Optional ByRef caughtException As Boolean = False, Optional ByRef failedValidation As Boolean = False, Optional ByVal checkDiamondToken As Boolean = True) As Boolean
        If checkDiamondToken = True Then
            QuickQuoteHelperClass.CheckDiamondServicesToken()
        End If

        Dim success As Boolean = False

        caughtException = False
        failedValidation = False

        If policyId > 0 AndAlso qqHelper.IsNumericString(amount) = True AndAlso cashSourceId > 0 AndAlso billingCashNum > 0 AndAlso String.IsNullOrWhiteSpace(checkNum) = False AndAlso qqHelper.IsDateString(checkDate) = True AndAlso billingCashId > 0 Then
            Dim req_ReversalCashAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Request
            Dim res_ReversalCashAdjustment As New Diamond.Common.Services.Messages.BillingService.ReversalCashAdjustment.Response

            With req_ReversalCashAdjustment
                With .RequestData
                    '.BillingCashTypeId = Diamond.Common.Enums.Billing.BillingCashType.Reversal '24
                    '.BillingCashTypeId = Diamond.Common.Enums.Billing.BillingCashType.ReversalPayment '8; InsureSoft said to set this to the original billingCashTypeId
                    .BillingCashTypeId = Diamond.Common.Enums.Billing.BillingCashType.Payment '1
                    If .Cash Is Nothing Then
                        .Cash = New Diamond.Common.Objects.Billing.Cash
                    End If

                    '.SetIsNewValue(True)
                    With .Cash
                        .Amount = CType(amount, Decimal)
                        '.BillingCashTypeId = 8 'Reversal of Payment; InsureSoft said to set this to the original billingCashTypeId
                        .BillingCashTypeId = 1 'Payment
                        .BillingCashInSourceId = cashSourceId 'Retail Lockbox - Remittances
                        .PolicyId = policyId
                        '.UsersId = 0 'should use logged-in user; worked
                        '.UsersId = qqHelper.IntegerForString(QuickQuoteHelperClass.DiamondUserId) 'could use this, but shouldn't be needed... confirmed this isn't needed
                        .BillingCashNum = billingCashNum
                        .BillingReasonId = 10201 'Lockbox Error Correction
                        .CheckNum = checkNum
                        .CheckDate = CType(checkDate, Diamond.Common.Objects.InsDateTime)
                        .BillingCashId = billingCashId
                        '.SetIsNewValue(True)

                    End With
                    .PolicyId = policyId


                End With
            End With

            Try
                Using proxy As New Diamond.Common.Services.Proxies.BillingServiceProxy
                    res_ReversalCashAdjustment = proxy.ReversalCashAdjustment(req_ReversalCashAdjustment)
                End Using
            Catch ex As Exception
                caughtException = True
            End Try

            If res_ReversalCashAdjustment IsNot Nothing Then
                With res_ReversalCashAdjustment
                    If .DiamondValidation IsNot Nothing Then
                        With .DiamondValidation

                        End With
                    End If
                    If .ResponseData IsNot Nothing Then
                        With .ResponseData
                            If .Success = True Then
                                success = True
                            End If
                        End With
                    End If
                End With
            End If
        Else
            failedValidation = True
        End If

        If success = True Then
            'success

        ElseIf caughtException = True Then
            'caught error

        ElseIf failedValidation = True Then
            'failed validation

        Else
            'just failed

        End If

        Return success
    End Function
    Private Sub ReversePaymentsNew()
        QuickQuoteHelperClass.CheckDiamondServicesToken()
        'ByVal policyId As Integer, ByVal amount As String, ByVal cashSourceId As Integer, 
        'ByVal billingCashNum As Integer, ByVal checkNum As String, ByVal checkDate As String, 
        'ByVal billingCashId As Integer, Optional ByRef caughtException As Boolean = False, 
        'Optional ByRef failedValidation As Boolean = False, Optional ByVal checkDiamondToken As Boolean = True

        Dim reversalSuccess As Boolean = False
        Dim policyId As Integer = 0
        Dim amount As String = ""
        Dim cashSourceId As Integer = 0
        Dim billingCashNum As Integer = 0
        Dim checkNum As String = ""
        Dim checkDate As String = ""
        Dim billingCashId As Integer = 0
        Dim caughtException As Boolean = False
        Dim failedValidation As Boolean = False
        Dim checkDiamondToken As Boolean = False

        reversalSuccess = False
        policyId = 0
        amount = ""
        cashSourceId = 0
        billingCashNum = 0
        checkNum = ""
        checkDate = ""
        billingCashId = 0
        caughtException = False
        failedValidation = False
        checkDiamondToken = False

        ''test reversal; still didn't set fields w/ billingCashTypeId 1 on Cash
        'reversalSuccess = False
        'policyId = 87814
        'amount = "-53.87"
        'cashSourceId = 10005
        'billingCashNum = 86
        'checkNum = "05387P"
        'checkDate = "7/19/2016"
        'billingCashId = 6155753
        'caughtException = False
        'failedValidation = False
        'checkDiamondToken = False

        'test reversal; this one worked w/ billingCashTypeId 1 on RequestData
        reversalSuccess = False
        policyId = 217676
        amount = "-608.50"
        cashSourceId = 10005
        billingCashNum = 19
        checkNum = "60850P"
        checkDate = "7/19/2016"
        billingCashId = 6155752
        caughtException = False
        failedValidation = False
        checkDiamondToken = False

        'reversalSuccess = SuccessfullyReversedPayment(policyId, amount, cashSourceId, billingCashNum, checkNum, checkDate, billingCashId, caughtException, failedValidation, checkDiamondToken)
        If reversalSuccess = True Then

        ElseIf caughtException = True Then
            'caught error

        ElseIf failedValidation = True Then
            'failed validation

        Else
            'just failed
        End If

    End Sub
    Private Sub ReversePaymentsForDatabaseQuery()
        QuickQuoteHelperClass.CheckDiamondServicesToken()

        Dim reversalSuccess As Boolean = False
        Dim polNum As String = ""
        Dim policyId As Integer = 0
        Dim amount As String = ""
        Dim cashSourceId As Integer = 0
        Dim billingCashNum As Integer = 0
        Dim checkNum As String = ""
        Dim checkDate As String = ""
        Dim billingCashId As Integer = 0
        Dim caughtException As Boolean = False
        Dim failedValidation As Boolean = False
        Dim checkDiamondToken As Boolean = False
        Dim serviceCallResult As String = ""

        Using sso As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            'patch query
            'sso.queryOrStoredProc = "select top 3000 BCIS.dscr as paymentType, P.current_policy, BC.policy_id, BC.amount, BC.unapplied_amount, BC.check_num, BC.check_date, BC.pcadded_date, BC.billingcash_id, BC.billingcash_num, BC.billingcashinsource_id, CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END as isDuplicate, CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END as hasReversal from BillingCash as BC with (nolock) left join Policy as P with (nolock) on P.policy_id = BC.policy_id left join BillingCashInSource as BCIS with (nolock) on BCIS.billingcashinsource_id = BC.billingcashinsource_id outer apply (select top 1 BC2.billingcash_num as otherBillingCashNum from BillingCash as BC2 with (nolock)	where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id = BC.billingcashtype_id and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id	and BC2.amount = BC.amount and BC2.check_num = BC.check_num	and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as diffPaymentForSameAmount outer apply (select top 1 BC2.billingcash_num as reversalBillingCashNum from BillingCash as BC2 with (nolock) where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id in (8, 24)	and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id and BC2.check_num = BC.check_num and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as reversalRecord where BC.billingcashtype_id = 1 and BC.billingcashinsource_id in (7,15,10001,10002,10003,10004,10005) and BC.check_date = '7/19/2016' and BC.policy_id in (217676, 560118, 462785, 244702) and CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END = 0 order by BC.pcadded_date"
            'patch query updated to include more after adding polNum param
            'sso.queryOrStoredProc = "select top 3000 BCIS.dscr as paymentType, P.current_policy, BC.policy_id, BC.amount, BC.unapplied_amount, BC.check_num, BC.check_date, BC.pcadded_date, BC.billingcash_id, BC.billingcash_num, BC.billingcashinsource_id, CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END as isDuplicate, CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END as hasReversal from BillingCash as BC with (nolock) left join Policy as P with (nolock) on P.policy_id = BC.policy_id left join BillingCashInSource as BCIS with (nolock) on BCIS.billingcashinsource_id = BC.billingcashinsource_id outer apply (select top 1 BC2.billingcash_num as otherBillingCashNum from BillingCash as BC2 with (nolock)	where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id = BC.billingcashtype_id and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id	and BC2.amount = BC.amount and BC2.check_num = BC.check_num	and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as diffPaymentForSameAmount outer apply (select top 1 BC2.billingcash_num as reversalBillingCashNum from BillingCash as BC2 with (nolock) where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id in (8, 24)	and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id and BC2.check_num = BC.check_num and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as reversalRecord where BC.billingcashtype_id = 1 and BC.billingcashinsource_id in (7,15,10001,10002,10003,10004,10005) and BC.check_date = '7/19/2016' and BC.policy_id in (217676, 560118, 462785, 244702, 192427, 859390) and CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END = 0 order by BC.pcadded_date"
            'prod query
            'sso.queryOrStoredProc = "select top 3000 BCIS.dscr as paymentType, P.current_policy, BC.policy_id, BC.amount, BC.unapplied_amount, BC.check_num, BC.check_date, BC.pcadded_date, BC.billingcash_id, BC.billingcash_num, BC.billingcashinsource_id, CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END as isDuplicate, CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END as hasReversal from BillingCash as BC with (nolock) left join Policy as P with (nolock) on P.policy_id = BC.policy_id left join BillingCashInSource as BCIS with (nolock) on BCIS.billingcashinsource_id = BC.billingcashinsource_id outer apply (select top 1 BC2.billingcash_num as otherBillingCashNum from BillingCash as BC2 with (nolock)	where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id = BC.billingcashtype_id and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id	and BC2.amount = BC.amount and BC2.check_num = BC.check_num	and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as diffPaymentForSameAmount outer apply (select top 1 BC2.billingcash_num as reversalBillingCashNum from BillingCash as BC2 with (nolock) where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id in (8, 24)	and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id and BC2.check_num = BC.check_num and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as reversalRecord where BC.billingcashtype_id = 1 and BC.billingcashinsource_id in (7,15,10001,10002,10003,10004,10005) and BC.check_date = '10/24/2016' and diffPaymentForSameAmount.otherBillingCashNum is not null and CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END = 1 and CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END = 0 order by BC.pcadded_date"
            'start off w/ smaller result set to make sure it's working okay; 1st 2, then 100, then 200x4 (791 total; 2 failed)
            'sso.queryOrStoredProc = "select top 200 BCIS.dscr as paymentType, P.current_policy, BC.policy_id, BC.amount, BC.unapplied_amount, BC.check_num, BC.check_date, BC.pcadded_date, BC.billingcash_id, BC.billingcash_num, BC.billingcashinsource_id, CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END as isDuplicate, CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END as hasReversal from BillingCash as BC with (nolock) left join Policy as P with (nolock) on P.policy_id = BC.policy_id left join BillingCashInSource as BCIS with (nolock) on BCIS.billingcashinsource_id = BC.billingcashinsource_id outer apply (select top 1 BC2.billingcash_num as otherBillingCashNum from BillingCash as BC2 with (nolock)	where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id = BC.billingcashtype_id and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id	and BC2.amount = BC.amount and BC2.check_num = BC.check_num	and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as diffPaymentForSameAmount outer apply (select top 1 BC2.billingcash_num as reversalBillingCashNum from BillingCash as BC2 with (nolock) where BC2.policy_id = BC.policy_id and BC2.billingcashtype_id in (8, 24)	and BC2.check_date = BC.check_date and BC2.billingcashinsource_id = BC.billingcashinsource_id and BC2.check_num = BC.check_num and BC2.billingcash_num <> BC.billingcash_num order by BC2.billingcash_num desc) as reversalRecord where BC.billingcashtype_id = 1 and BC.billingcashinsource_id in (7,15,10001,10002,10003,10004,10005) and BC.check_date = '10/24/2016' and diffPaymentForSameAmount.otherBillingCashNum is not null and CASE when BC.billingcash_num > diffPaymentForSameAmount.otherBillingCashNum then 1 else 0 END = 1 and CASE when reversalRecord.reversalBillingCashNum is not null then 1 else 0 END = 0 order by BC.pcadded_date"

            Dim dr As SqlClient.SqlDataReader = sso.GetDataReader
            If dr IsNot Nothing AndAlso dr.HasRows = True Then
                Dim sbResults As New StringBuilder
                Dim strOverallResults As String = ""
                While dr.Read

                    reversalSuccess = False
                    polNum = dr.Item("current_policy").ToString.Trim
                    policyId = qqHelper.IntegerForString(dr.Item("policy_id").ToString.Trim)
                    amount = dr.Item("amount").ToString.Trim
                    cashSourceId = qqHelper.IntegerForString(dr.Item("billingcashinsource_id").ToString.Trim)
                    billingCashNum = qqHelper.IntegerForString(dr.Item("billingcash_num").ToString.Trim)
                    checkNum = dr.Item("check_num").ToString.Trim
                    checkDate = dr.Item("check_date").ToString.Trim
                    billingCashId = qqHelper.IntegerForString(dr.Item("billingcash_id").ToString.Trim)
                    caughtException = False
                    failedValidation = False
                    serviceCallResult = ""

                    reversalSuccess = SuccessfullyReversedPayment(policyId, amount, cashSourceId, billingCashNum, checkNum, checkDate, billingCashId, caughtException, failedValidation, checkDiamondToken)
                    If reversalSuccess = True Then
                        'success
                        serviceCallResult = "success"
                    ElseIf caughtException = True Then
                        'caught error
                        serviceCallResult = "error"
                    ElseIf failedValidation = True Then
                        'failed validation
                        serviceCallResult = "validation"
                    Else
                        'just failed
                        serviceCallResult = "fail"
                    End If

                    sbResults.AppendLine(polNum & "," & policyId.ToString & "," & amount & "," & cashSourceId.ToString & "," & billingCashNum.ToString & "," & checkNum & "," & checkDate & "," & billingCashId.ToString & "," & serviceCallResult)
                End While
                strOverallResults = sbResults.ToString
                If String.IsNullOrWhiteSpace(strOverallResults) = False Then

                End If
            End If
        End Using

    End Sub

    'added 11/2/2016 to put the logic in one place (for Endorsements)
    Private Sub TestAutoEndorsementStuff()
        '10/26/2016 - testing Endorsement stuff from Patch
        Dim diaImage As Diamond.Common.Objects.Policy.Image = Nothing
        Dim policyId As Integer = 15582 'PPA1006387 (agCode 1840)
        'Dim transDate As String = Date.Today.ToShortDateString '"1/1/2016"
        Dim transDate As String = "10/27/2016" 'updated 10/28/2016 for test Endorsement that was created on that date
        Dim validateTranDate As Boolean = True 'default value = True
        Dim daysBack As Integer = 15 'default value = 15
        Dim daysForward As Integer = 15 'default value = 15
        Dim errorMsg As String = ""
        Dim newPolicyImageNum As Integer = 0
        Dim latestPendingEndorsementImageNum As Integer = 0 'added 10/27/2016
        Dim latestPendingEndorsementImageTranEffDate As String = "" 'added 10/28/2016
        Dim returnExistingPendingEndorsementImage As Boolean = True 'added 10/28/2016; default value = False
        Dim onlyReturnPendingEndorsementImageWhenDateMatches As Boolean = True 'added 10/28/2016; default value = True
        Dim qqo As QuickQuoteObject = Nothing 'added 10/28/2016 for new method that uses old one for Image
        Dim endorsementRemarks As String = "" 'added 10/30/2016 for new optional param
        'Dim okayToContinue As Boolean = False
        'Dim daysBackOrForward As Long = DateDiff(DateInterval.Day, Date.Today, CDate(transDate)) '-299 for today (10/26/2016) and transDate (1/1/2016)
        'Dim daysBack As Integer = 15
        'Dim daysForward As Integer = 15
        ''Dim dateBack As Date = DateAdd(DateInterval.Day, CDbl("-" & daysBack.ToString), Date.Today)
        'Dim dateBack As Date = DateAdd(DateInterval.Day, CDbl(QuickQuoteHelperClass.ReversePositiveOrNegativeInteger(daysBack)), Date.Today)
        'Dim dateForward As Date = DateAdd(DateInterval.Day, CDbl(daysForward), Date.Today)
        ''If DateAdd(DateInterval.Day, CDbl("-" & daysBack.ToString), Date.Today) <= CDate(transDate) AndAlso CDate(transDate) <= DateAdd(DateInterval.Day, CDbl(daysForward), Date.Today) Then
        'If DateAdd(DateInterval.Day, CDbl(QuickQuoteHelperClass.ReversePositiveOrNegativeInteger(daysBack)), Date.Today) <= CDate(transDate) AndAlso CDate(transDate) <= DateAdd(DateInterval.Day, CDbl(daysForward), Date.Today) Then
        '    okayToContinue = True
        'End If
        'Dim num1 As Integer = 35
        'Dim num2 As Integer = -1066
        'Dim reverseNum1 As Integer = 0
        'Dim reverseNum2 As Integer = 0
        'reverseNum1 = QuickQuoteHelperClass.ReversePositiveOrNegativeInteger(num1)
        'reverseNum2 = QuickQuoteHelperClass.ReversePositiveOrNegativeInteger(num2)
        'If reverseNum1 <> num1 Then

        'End If
        'If reverseNum2 <> num2 Then

        'End If
        'diaImage = QQxml.NewDiamondImageForPolicyIdAndTransactionDate(policyId:=policyId, transactionDate:=transDate, newPolicyImageNum:=newPolicyImageNum, validateTransactionDate:=validateTranDate, daysBack:=daysBack, daysForward:=daysForward, errorMessage:=errorMsg)
        'updated function name 10/27/2016
        'diaImage = QQxml.NewDiamondEndorsementImageForPolicyIdAndTransactionDate(policyId:=policyId, transactionDate:=transDate, endorsementRemarks:=endorsementRemarks, newPolicyImageNum:=newPolicyImageNum, latestPendingEndorsementImageNum:=latestPendingEndorsementImageNum, latestPendingEndorsementImageTranEffDate:=latestPendingEndorsementImageTranEffDate, validateTransactionDate:=validateTranDate, daysBack:=daysBack, daysForward:=daysForward, returnExistingPendingEndorsementImage:=returnExistingPendingEndorsementImage, onlyReturnPendingEndorsementImageWhenDateMatches:=onlyReturnPendingEndorsementImageWhenDateMatches, errorMessage:=errorMsg)
        'qqo = QQxml.NewQuickQuoteEndorsementForPolicyIdAndTransactionDate(policyId:=policyId, transactionDate:=transDate, endorsementRemarks:=endorsementRemarks, newPolicyImageNum:=newPolicyImageNum, latestPendingEndorsementImageNum:=latestPendingEndorsementImageNum, latestPendingEndorsementImageTranEffDate:=latestPendingEndorsementImageTranEffDate, validateTransactionDate:=validateTranDate, daysBack:=daysBack, daysForward:=daysForward, returnExistingPendingQuickQuoteEndorsement:=returnExistingPendingEndorsementImage, onlyReturnPendingQuickQuoteEndorsementWhenDateMatches:=onlyReturnPendingEndorsementImageWhenDateMatches, errorMessage:=errorMsg)
        '10/28/2016 - now logic to pull existing Endorsement image
        newPolicyImageNum = 12
        'diaImage = QQxml.DiamondEndorsementImageForPolicyIdAndImageNum(policyId, newPolicyImageNum, errorMessage:=errorMsg)
        qqo = QQxml.QuickQuoteEndorsementForPolicyIdAndImageNum(policyId, newPolicyImageNum, errorMessage:=errorMsg)
        'If diaImage IsNot Nothing Then
        'If diaImage IsNot Nothing OrElse newPolicyImageNum > 0 Then 'successful for PPA1006387 (policyId 15582); created image# 12
        If diaImage IsNot Nothing OrElse qqo IsNot Nothing OrElse newPolicyImageNum > 0 Then 'successful for PPA1006387 (policyId 15582); created image# 12
            '10/30/2016 - added new logic to pull policy info and method to validate user access to policy... testing below
            Dim polNum As String = ""
            If diaImage IsNot Nothing Then
                polNum = diaImage.PolicyNumber
            ElseIf qqo IsNot Nothing Then
                'polNum = qqo.QuoteNumber '10/30/2016 note: need to update QuickQuoteObject w/ PolicyNumber property and update both that property and QuoteNumber property to return the other one if needed... PolicyNumber can return QuoteNumber if PolicyNumber is empty; QuoteNumber can return PolicyNumber if PolicyNumber starts w/ Q... would need to update xml parsing/writing logic accordingly... updated 10/30/2016 pm
                'updated 10/30/2016
                polNum = qqo.PolicyNumber
            End If
            Dim isPolNumOkay As Boolean = False
            Dim isPolIdAndImgNumOkay As Boolean = False
            If String.IsNullOrWhiteSpace(polNum) = False Then
                isPolNumOkay = qqHelper.IsPolicyOkayForUser(policyNumber:=polNum)
            End If
            isPolIdAndImgNumOkay = qqHelper.IsPolicyOkayForUser(policyId:=policyId, policyImageNum:=newPolicyImageNum)
            If isPolNumOkay = True OrElse isPolIdAndImgNumOkay = True Then

            End If
        Else
            If String.IsNullOrWhiteSpace(errorMsg) = False OrElse latestPendingEndorsementImageNum > 0 OrElse qqHelper.IsDateString(latestPendingEndorsementImageTranEffDate) Then

            End If
        End If
    End Sub

    'added 5/24/2017
    Public Sub TestAdditionalInterestManager(ByVal qId As String, ByVal listId As String, Optional ByVal reSaveOrRate As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe, Optional ByVal saveOrRate As QuickQuoteXML.QuickQuoteValidationType = QuickQuoteXML.QuickQuoteValidationType.Rate, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote, Optional ByVal updateAdditionalInterestLinkWhenFound As Boolean = False)
        '5/23/2017 - AdditionalInterestManager testing on Patch
        'Dim qId As String = "139513"
        'Dim listId As String = "223250"
        Dim qqo As QuickQuoteObject = Nothing
        Dim retrievalErrMsg As String = ""
        'QQxml.GetQuoteForSaveType(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, retrievalErrMsg)
        qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        Dim foundQuote As Boolean = False
        Dim savedQuote As Boolean = False
        If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalErrMsg) = True Then
            foundQuote = True
            If qqo.AdditionalInterests IsNot Nothing AndAlso qqo.AdditionalInterests.Count > 0 Then
                Dim ai As QuickQuoteAdditionalInterest = QuickQuoteHelperClass.QuickQuoteAdditionalInterestForListId(qqo.AdditionalInterests, listId)
                If ai IsNot Nothing Then
                    Dim hasListLink As Boolean = False
                    If qqo.AdditionalInterestListLinks IsNot Nothing AndAlso qqo.AdditionalInterestListLinks.Count > 0 Then
                        For Each l As QuickQuoteAdditionalInterestListLink In qqo.AdditionalInterestListLinks
                            If l.AdditionalInterestListId = listId Then
                                hasListLink = True
                                If updateAdditionalInterestLinkWhenFound = True Then
                                    UpdateAdditionalInterestLink(l)
                                End If
                                Exit For
                            End If
                        Next
                    End If

                    'make sure quote has location 1 w/ building
                    If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 AndAlso qqo.Locations(0).Buildings IsNot Nothing AndAlso qqo.Locations(0).Buildings.Count > 0 Then
                        Dim hasBuildingAI As Boolean = False
                        Dim buildingAI As QuickQuoteAdditionalInterest = QuickQuoteHelperClass.QuickQuoteAdditionalInterestForListId(qqo.Locations(0).Buildings(0).AdditionalInterests, listId)
                        If buildingAI IsNot Nothing Then
                            hasBuildingAI = True
                        End If

                        If hasListLink = False OrElse hasBuildingAI = False OrElse updateAdditionalInterestLinkWhenFound = True Then
                            If hasListLink = False Then
                                If qqo.AdditionalInterestListLinks Is Nothing Then
                                    qqo.AdditionalInterestListLinks = New List(Of QuickQuoteAdditionalInterestListLink)
                                End If
                                Dim l As New QuickQuoteAdditionalInterestListLink
                                l.AdditionalInterestListId = listId
                                'l.PolicyLevelNum = "1"
                                'l.DisplayNum = "1"
                                UpdateAdditionalInterestLink(l)
                                qqo.AdditionalInterestListLinks.Add(l)
                            End If

                            If hasBuildingAI = False Then
                                If qqo.Locations(0).Buildings(0).AdditionalInterests Is Nothing Then
                                    qqo.Locations(0).Buildings(0).AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
                                End If
                                Dim bAI As New QuickQuoteAdditionalInterest
                                bAI.ListId = listId
                                bAI.TypeId = "17"
                                qqo.Locations(0).Buildings(0).AdditionalInterests.Add(bAI)
                            End If


                            Dim saveErrorMsg As String = ""
                            QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
                            If saveErrorMsg = "" Then
                                'okay
                                savedQuote = True
                            Else
                                'error
                            End If
                        End If
                    End If

                End If
            End If

        End If
        If reSaveOrRate = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe OrElse reSaveOrRate = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Yes Then
            If foundQuote = True AndAlso (savedQuote = True OrElse reSaveOrRate = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Yes) Then
                ReSaveOrReRate(qId, saveOrRate:=saveOrRate, saveOrRateType:=saveOrRateType)
            End If
        End If
    End Sub
    Private Sub UpdateAdditionalInterestLink(ByRef aiLink As QuickQuoteAdditionalInterestListLink)
        If aiLink IsNot Nothing Then
            aiLink.PolicyLevelNum = "1"
            aiLink.DisplayNum = "1"
        End If
    End Sub

    'added 6/12/2017 for testing
    Public Enum TestEnum
        None = 0
        One = 1
        Two = 2
    End Enum
    Private Sub EnumTesting1()
        Dim tInt As Integer = 4
        Dim tEnum As TestEnum = TestEnum.One
        EnumTesting2(tInt, tInt, tEnum)
    End Sub
    Private Sub EnumTesting2(ByVal tInt As Integer, ByVal tEnum As TestEnum, ByVal tEnum2 As TestEnum)
        Dim success As Boolean = False

        Dim tEnumInt As Integer = -1
        Select Case tEnum
            Case TestEnum.One
                tEnumInt = 1
            Case TestEnum.Two
                tEnumInt = 2
            Case TestEnum.None
                tEnumInt = 0
            Case Else
                tEnumInt = -1
        End Select

        Dim tEnum2Int As Integer = -1
        Select Case tEnum2
            Case TestEnum.One
                tEnum2Int = 1
            Case TestEnum.Two
                tEnum2Int = 2
            Case TestEnum.None
                tEnum2Int = 0
            Case Else
                tEnum2Int = -1
        End Select

        If tInt = CInt(tEnum) Then
            success = True
        ElseIf tInt = CInt(tEnum2) Then
            success = True
        Else
            success = False
        End If
    End Sub

    'testing 6/28/2017
    Private Sub TestPrintForms(ByVal policyId As Integer, Optional ByVal printProcessIdToFind As Integer = 0)
        If policyId > 0 Then
            Dim diaPrinting As New DiamondWebClass.DiamondPrinting

            Dim printForms As Diamond.Common.Objects.InsCollection(Of Diamond.Common.Objects.Printing.PrintForm) = diaPrinting.getPrintFormsForPolicyId(Nothing, policyId)
            If printForms IsNot Nothing AndAlso printForms.Count > 0 Then
                Dim foundPrintProcessId As Boolean = False
                For Each pf As Diamond.Common.Objects.Printing.PrintForm In printForms
                    'Select Case pf.FormCategoryTypeId
                    '    Case 7
                    '        If UCase(pf.Description).Contains("NOTICE") = True Then

                    '        End If
                    '    Case Else

                    'End Select
                    If pf.PrintProcessId = printProcessIdToFind Then
                        foundPrintProcessId = True
                    End If
                Next
                If foundPrintProcessId = True Then

                End If
            End If
        End If
    End Sub

    'testing 7/14/2017
    Private Sub ReRateWithGarageKeepers(ByVal quoteId As Integer)
        If quoteId > 0 Then
            Dim qqo As QuickQuoteObject = TestReturnQuote(quoteId.ToString)
            If qqo IsNot Nothing Then
                With qqo
                    .HasGarageKeepersOtherThanCollision = True
                    .GarageKeepersOtherThanCollisionTypeId = "3" 'Comprehensive
                    .GarageKeepersOtherThanCollisionManualLimitAmount = "30,000"
                    .GarageKeepersOtherThanCollisionDeductibleId = "7" '500/2500
                    .GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = "3" 'All Perils
                    .GarageKeepersOtherThanCollisionBasisTypeId = "1" 'Direct Primary

                    .HasGarageKeepersCollision = True
                    .GarageKeepersCollisionManualLimitAmount = "50,000"
                    .GarageKeepersCollisionDeductibleId = "8" '500
                    .GarageKeepersCollisionBasisTypeId = "1" 'Direct Primary

                    'un-comment here to wipe out at policy and location levels
                    '.HasGarageKeepersOtherThanCollision = False
                    '.GarageKeepersOtherThanCollisionTypeId = ""
                    '.GarageKeepersOtherThanCollisionManualLimitAmount = ""
                    '.GarageKeepersOtherThanCollisionDeductibleId = ""
                    '.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = ""
                    '.GarageKeepersOtherThanCollisionBasisTypeId = ""

                    '.HasGarageKeepersCollision = False
                    '.GarageKeepersCollisionManualLimitAmount = ""
                    '.GarageKeepersCollisionDeductibleId = ""
                    '.GarageKeepersCollisionBasisTypeId = ""

                    '7/17/2017 - removed location updates after adding logic at policy level to push down to locations
                    'If .Locations IsNot Nothing AndAlso .Locations.Count > 0 Then
                    '    For Each l As QuickQuoteLocation In .Locations
                    '        If l IsNot Nothing Then
                    '            l.GarageKeepersOtherThanCollisionTypeId = .GarageKeepersOtherThanCollisionTypeId
                    '            l.GarageKeepersOtherThanCollisionManualLimitAmount = .GarageKeepersOtherThanCollisionManualLimitAmount
                    '            l.GarageKeepersOtherThanCollisionDeductibleId = .GarageKeepersOtherThanCollisionDeductibleId
                    '            l.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = .GarageKeepersOtherThanCollisionDeductibleCategoryTypeId
                    '            l.GarageKeepersOtherThanCollisionBasisTypeId = .GarageKeepersOtherThanCollisionBasisTypeId

                    '            l.GarageKeepersCollisionManualLimitAmount = .GarageKeepersCollisionManualLimitAmount
                    '            l.GarageKeepersCollisionDeductibleId = .GarageKeepersCollisionDeductibleId
                    '            'l.GarageKeepersCollisionBasisTypeId = .GarageKeepersCollisionBasisTypeId
                    '        End If
                    '    Next
                    'End If

                    'un-comment here to wipe out at policy level after location copy
                    '.HasGarageKeepersOtherThanCollision = False
                    '.GarageKeepersOtherThanCollisionTypeId = ""
                    '.GarageKeepersOtherThanCollisionManualLimitAmount = ""
                    '.GarageKeepersOtherThanCollisionDeductibleId = ""
                    '.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = ""
                    '.GarageKeepersOtherThanCollisionBasisTypeId = ""

                    '.HasGarageKeepersCollision = False
                    '.GarageKeepersCollisionManualLimitAmount = ""
                    '.GarageKeepersCollisionDeductibleId = ""
                    '.GarageKeepersCollisionBasisTypeId = ""
                End With

                Dim qqxml As New QuickQuoteXML

                Dim err As String = ""
                Dim strQQ As String = ""
                Dim ratedQQ As QuickQuoteObject = Nothing
                Dim strRatedQQ As String = ""

                qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, strQQ, ratedQQ, strRatedQQ, quoteId.ToString, err)

                If ratedQQ IsNot Nothing Then

                End If
            End If
        End If
    End Sub
    'added 10/31/2017; name is saved correctly as long as there is a valid nameTypeId
    Private Sub Test_WCP_NamedIndividuals()
        'testing WCP WaiverOfSubrogationRecords 10/30/2017 (Patch)
        'ReSaveOrReRate("144067", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        ''ReSaveOrReRate("144067", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Save, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap)
        'ReSaveOrReRate("144067", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap)

        'Exit Sub

        Dim quoteId As Integer = 144067
        If quoteId > 0 Then
            Dim qqo As QuickQuoteObject = TestReturnQuote(quoteId.ToString)
            If qqo IsNot Nothing Then
                With qqo
                    Dim counter As Integer = 0
                    If .InclusionOfSoleProprietorRecords IsNot Nothing AndAlso .InclusionOfSoleProprietorRecords.Count > 0 Then
                        For Each i As QuickQuoteInclusionOfSoleProprietorRecord In .InclusionOfSoleProprietorRecords
                            counter += 1
                            With i
                                If .Name Is Nothing Then
                                    .Name = New QuickQuoteName
                                End If
                                With .Name
                                    If .HasData = False OrElse String.IsNullOrWhiteSpace(.DisplayName) = True Then
                                        .CommercialName1 = "sp inclusion " & counter.ToString
                                    Else
                                        '.Dispose()
                                    End If
                                End With
                            End With
                        Next
                    End If
                    counter = 0
                    If .ExclusionOfAmishWorkerRecords IsNot Nothing AndAlso .ExclusionOfAmishWorkerRecords.Count > 0 Then
                        For Each e As QuickQuoteExclusionOfAmishWorkerRecord In .ExclusionOfAmishWorkerRecords
                            counter += 1
                            With e
                                If .Name Is Nothing Then
                                    .Name = New QuickQuoteName
                                End If
                                With .Name
                                    If .HasData = False OrElse String.IsNullOrWhiteSpace(.DisplayName) = True Then
                                        .CommercialName1 = "aw exclusion " & counter.ToString
                                    Else
                                        '.Dispose()
                                    End If
                                End With
                            End With
                        Next
                    End If
                    counter = 0
                    If .ExclusionOfSoleProprietorRecords IsNot Nothing AndAlso .ExclusionOfSoleProprietorRecords.Count > 0 Then
                        For Each e As QuickQuoteExclusionOfSoleProprietorRecord In .ExclusionOfSoleProprietorRecords
                            counter += 1
                            With e
                                If .Name Is Nothing Then
                                    .Name = New QuickQuoteName
                                End If
                                With .Name
                                    If .HasData = False OrElse String.IsNullOrWhiteSpace(.DisplayName) = True Then
                                        .CommercialName1 = "sp exclusion " & counter.ToString
                                    Else
                                        '.Dispose()
                                    End If
                                End With
                            End With
                        Next
                    End If
                    counter = 0
                    If .WaiverOfSubrogationRecords IsNot Nothing AndAlso .WaiverOfSubrogationRecords.Count > 0 Then
                        For Each w As QuickQuoteWaiverOfSubrogationRecord In .WaiverOfSubrogationRecords
                            counter += 1
                            With w
                                If .Name Is Nothing Then
                                    .Name = New QuickQuoteName
                                End If
                                With .Name
                                    If .HasData = False OrElse String.IsNullOrWhiteSpace(.DisplayName) = True Then
                                        .CommercialName1 = "s waiver " & counter.ToString
                                    Else
                                        '.Dispose()
                                    End If
                                End With
                            End With
                        Next
                    End If
                End With

                Dim qqxml As New QuickQuoteXML

                'Dim saveErrorMsg As String = ""
                'qqxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, quoteId.ToString, saveErrorMsg)
                'If saveErrorMsg = "" Then
                '    'okay

                'Else
                '    'Error
                'End If

                'Dim saveRateErrorMsg As String = ""
                'Dim strQQ As String = ""
                'Dim ratedQQ As QuickQuoteObject = Nothing
                'Dim strRatedQQ As String = ""

                'qqxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, strQQ, ratedQQ, strRatedQQ, quoteId.ToString, saveRateErrorMsg)

                'If ratedQQ IsNot Nothing Then

                'End If
            End If
        End If
    End Sub

    'added 12/6/2017 (to fix prod quotes)
    Private Sub FixLongClassDescription(ByVal quoteId As Integer, Optional ByVal saveOrRateType As QuickQuoteXML.QuickQuoteSaveType = QuickQuoteXML.QuickQuoteSaveType.Quote, Optional ByRef retrievalError As String = "", Optional ByRef saveError As String = "", Optional ByRef classDescriptionsSuccessfullyUpdated As Integer = 0)
        retrievalError = ""
        saveError = ""
        classDescriptionsSuccessfullyUpdated = 0
        If quoteId > 0 Then
            Dim qqo As QuickQuoteObject = Nothing
            qqo = TestReturnQuote(quoteId.ToString, saveOrRateType:=saveOrRateType, err:=retrievalError)
            If qqo IsNot Nothing AndAlso String.IsNullOrWhiteSpace(retrievalError) = True Then
                Dim hasBuildingClassesToUpdate As Boolean = False
                If qqo.Locations IsNot Nothing AndAlso qqo.Locations.Count > 0 Then
                    For Each qql As QuickQuoteLocation In qqo.Locations
                        If qql IsNot Nothing AndAlso qql.Buildings IsNot Nothing AndAlso qql.Buildings.Count > 0 Then
                            For Each qqb As QuickQuoteBuilding In qql.Buildings
                                If qqb IsNot Nothing AndAlso qqb.BuildingClassifications IsNot Nothing AndAlso qqb.BuildingClassifications.Count > 0 Then
                                    For Each qqc As QuickQuoteClassification In qqb.BuildingClassifications
                                        If qqc IsNot Nothing AndAlso String.IsNullOrWhiteSpace(qqc.Description) = False AndAlso Len(qqc.Description) > 255 Then
                                            hasBuildingClassesToUpdate = True
                                            classDescriptionsSuccessfullyUpdated += 1 'will be set back to 0 below if Save fails
                                            qqc.Description = Left(qqc.Description, 252) & "..."
                                        End If
                                    Next
                                End If
                            Next
                        End If
                    Next
                End If
                If hasBuildingClassesToUpdate = True Then
                    QQxml.SaveQuote(saveOrRateType, qqo, quoteId.ToString, saveError)
                    If String.IsNullOrWhiteSpace(saveError) = False Then
                        classDescriptionsSuccessfullyUpdated = 0
                    End If
                Else
                    saveError = "no building classes to update"
                End If
            End If
        Else
            retrievalError = "invalid quoteId"
        End If
    End Sub

    '8/2/2018 - added MultiState testing methods from original MultiState Dev branch
    'added 3/9/2018; logic originally in Test() method
    Private Sub InitialMultiStateTesting()
        'InitialMultiStateTesting_StaticData()

        'InitialMultiStateTesting_QuoteConstruction()

        'MultiStateTesting_StateMaintenance()

        LatestMultiStateTesting()

    End Sub
    'added 3/19/2018; logic originally in InitialMultiStateTesting() method
    Private Sub InitialMultiStateTesting_StaticData()
        '3/6/2018 - testing new static data functionality for multi-state
        'Dim options As List(Of QuickQuoteStaticDataOption) = qqHelper.GetStaticDataOptionsForState(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, QuickQuoteHelperClass.QuickQuoteState.Illinois)
        'If options IsNot Nothing AndAlso options.Count > 0 Then

        'End If
        'more multi-state testing 3/9/2018
        Dim stateId As String = ""
        Dim lobId As String = ""
        Dim versionId As String = ""
        Dim stateAbbrev As String = ""
        Dim qqState As QuickQuoteHelperClass.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.None
        Dim lobType As QuickQuoteObject.QuickQuoteLobType = QuickQuoteObject.QuickQuoteLobType.None

        Dim qqo As New QuickQuoteObject
        With qqo
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Indiana
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .VersionId = "63"
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .LobType = QuickQuoteObject.QuickQuoteLobType.CommercialInlandMarine
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If

            .QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
            stateId = .StateId
            lobId = .LobId
            versionId = .VersionId
            stateAbbrev = .State
            qqState = .QuickQuoteState
            lobType = .LobType

            If qqHelper.IsPositiveIntegerString(stateId) = True AndAlso qqHelper.IsPositiveIntegerString(lobId) = True AndAlso qqHelper.IsPositiveIntegerString(versionId) = True Then

            End If


        End With
    End Sub
    Private Sub InitialMultiStateTesting_QuoteConstruction()
        Dim qqoStates As List(Of QuickQuoteHelperClass.QuickQuoteState) = Nothing
        Dim hasIN As Boolean = False
        Dim hasIN_quoteLevel As Boolean = False
        Dim hasIN_multiStateLevel As Boolean = False
        Dim hasIL As Boolean = False
        Dim hasIL_quoteLevel As Boolean = False
        Dim hasIL_multiStateLevel As Boolean = False

        Dim qqo As New QuickQuoteObject
        qqo.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialAuto

        qqoStates = QuickQuoteHelperClass.QuickQuoteStatesForQuote(qqo)
        hasIN = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, atQuoteLevel:=hasIN_quoteLevel, atMultiStateLevel:=hasIN_multiStateLevel)
        hasIL = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois, atQuoteLevel:=hasIL_quoteLevel, atMultiStateLevel:=hasIL_multiStateLevel)

        If (qqoStates IsNot Nothing AndAlso qqo.State.Count > 0) OrElse hasIN = True OrElse hasIL = True Then

        End If

        Dim qqo_IN As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, addToListIfNeeded:=True)

        qqoStates = QuickQuoteHelperClass.QuickQuoteStatesForQuote(qqo)
        hasIN = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, atQuoteLevel:=hasIN_quoteLevel, atMultiStateLevel:=hasIN_multiStateLevel)
        hasIL = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois, atQuoteLevel:=hasIL_quoteLevel, atMultiStateLevel:=hasIL_multiStateLevel)

        If qqo_IN IsNot Nothing OrElse (qqoStates IsNot Nothing AndAlso qqo.State.Count > 0) OrElse hasIN = True OrElse hasIL = True Then

        End If

        Dim qqo_IL As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois, addToListIfNeeded:=True)

        qqoStates = QuickQuoteHelperClass.QuickQuoteStatesForQuote(qqo)
        hasIN = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, atQuoteLevel:=hasIN_quoteLevel, atMultiStateLevel:=hasIN_multiStateLevel)
        hasIL = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois, atQuoteLevel:=hasIL_quoteLevel, atMultiStateLevel:=hasIL_multiStateLevel)

        If qqo_IL IsNot Nothing OrElse (qqoStates IsNot Nothing AndAlso qqo.State.Count > 0) OrElse hasIN = True OrElse hasIL = True Then

        End If

        qqo_IN = qqHelper.QuickQuoteObjectForState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, addToListIfNeeded:=True)

        qqoStates = QuickQuoteHelperClass.QuickQuoteStatesForQuote(qqo)
        hasIN = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana, atQuoteLevel:=hasIN_quoteLevel, atMultiStateLevel:=hasIN_multiStateLevel)
        hasIL = QuickQuoteHelperClass.QuoteHasState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois, atQuoteLevel:=hasIL_quoteLevel, atMultiStateLevel:=hasIL_multiStateLevel)

        If qqo_IN IsNot Nothing OrElse (qqoStates IsNot Nothing AndAlso qqo.State.Count > 0) OrElse hasIN = True OrElse hasIL = True Then

        End If
    End Sub
    Private Sub MultiStateTesting_StateMaintenance()
        'Dim premTotal As String = ""
        'Dim startTime As String = ""
        'Dim endTime As String = ""
        ''Dim numberOfQuotes As Integer = 10000
        'Dim numberOfQuotes As Integer = 100
        'TestReflection(useReflection:=True, numberOfQuotes:=numberOfQuotes, premTotal:=premTotal, startTime:=startTime, endTime:=endTime)
        ''TestReflection(useReflection:=True, premTotal:=premTotal, startTime:=startTime, endTime:=endTime)
        'If qqHelper.IsDateString(startTime) = True AndAlso qqHelper.IsDateString(endTime) = True Then
        '    Dim timeDiff As String = DateDiff(DateInterval.Second, CDate(startTime), CDate(endTime))
        '    If String.IsNullOrWhiteSpace(timeDiff) = False Then

        '    End If
        'End If
        ''--10,000 quotes
        ''-no Reflection
        ''totPrem =$50,005,000.00
        ''startTime = 8/14/2018 2:48:31 PMo
        ''endTime = 8/14/2018 2:48:31 PM
        ''timeDiff(secs) = 0

        ''-with Reflection
        ''totPrem =$50,005,000.00
        ''startTime = 8/14/2018 2:51:07 PM
        ''endTime = 8/14/2018 2:51:14 PM
        ''timeDiff(secs) = 7

        ''--100 quotes
        ''-with Reflection
        ''totPrem =$5,050.00
        ''startTime = 8/14/2018 4:29:20 PM
        ''endTime = 8/14/2018 4:29:20 PM
        ''timeDiff(secs) = 0
        'Exit Sub

        '8/18/2018 - testing CloneObject w/ Protected Friend Properties
        'Dim qqo1 As New QuickQuoteObject
        'Dim qqo2 As New QuickQuoteObject

        'qqo1.HasBusinessMasterEnhancement = True
        'qqo1.BusinessMasterEnhancementQuotedPremium = "83.00"

        ''qqHelper.CopyInformationFromOneQuoteToAnother(qqo1, qqo2, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.StateToState) 'this worked w/ original code since it just used the object and didn't have attempt Serialization on any Protected Properties
        'qqHelper.CopyInformationFromOneQuoteToAnother(qqo1, qqo2, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.FullQuoteReplacement) 'this didn't work w/ original code since it tried to Serialize the Protected Properties

        'If qqo2.HasBusinessMasterEnhancement = True OrElse qqHelper.IsPositiveDecimalString(qqo2.BusinessMasterEnhancementQuotedPremium) = True Then

        'End If
        'Exit Sub

        '8/19/2018 - testing GetStaticDataListNameForState; these 2 calls should return the same thing
        'Dim sdl As QuickQuoteStaticDataList = qqHelper.GetStaticDataList(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
        'If sdl IsNot Nothing Then

        'End If
        'sdl = qqHelper.GetStaticDataListForState(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, QuickQuoteHelperClass.QuickQuoteState.None)
        'If sdl IsNot Nothing Then

        'End If
        'sdl = qqHelper.GetStaticDataListForState(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, QuickQuoteHelperClass.QuickQuoteState.None)
        'If sdl IsNot Nothing Then

        'End If
        'Exit Sub

        '9/21/2018 - testing Rate from IfmIllinois
        ''ReSaveOrReRate("13", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; initially saved to Diamond as single-state; convertToMultistate failed (unable to locate the package version for the multistate rewrite); Diamond save failed (multi-state wcp in detail #(new): Loss history question must be answered.)
        'ReSaveOrReRate("14", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; copy of 13 after adding IL back
        TestMultiStateRating()
        Exit Sub

        '1/4/2019 - trying to load VR quote that is failing in Prod
        'Dim qIdTest As String = "321696" 'test IL quote from Patch (should change Loc address state from IN default to IL on retrieval); error was occurring becuase of FAR locations w/ RvWatercraft... bad code in RvWatercraft Dispose is happening for multiState whenever original packageParts are being archived and disposed
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If
        'Exit Sub

        '1/3/2019 - Save just to change effDate
        'Dim qIdTest As String = "271232" 'test quote from Patch used to create xmls to send InsureSoft
        'Dim qIdTest As String = "271236" 'test quote from Patch (1/4/2019) used to create xmls to verify fix
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)

        'If qqoTest IsNot Nothing Then
        '    Dim okayToSave As Boolean = False
        '    If qqHelper.DateForString(qqoTest.EffectiveDate) < CDate("1/1/2019") Then
        '        qqoTest.EffectiveDate = "1/1/2019"
        '        okayToSave = True
        '    End If

        '    If okayToSave = True Then
        '        Dim saveErrorMsgTest As String = ""
        '        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqoTest, qIdTest, saveErrorMsgTest)
        '        If String.IsNullOrWhiteSpace(saveErrorMsgTest) = False Then
        '            'success
        '        End If
        '    End If
        'End If
        'Exit Sub

        '1/3/2019 - testing Matt's quote that started off w/ pre-1/1/2019 effDate and was changed to post-1/1/2019 (Patch)
        'Dim qIdTest As String = "271224" 'test IL quote from Patch (should change Loc address state from IN default to IL on retrieval)
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If
        'Exit Sub

        '12/30/2018 - testing the change of default state setting
        'Dim qIdTest As String = "271142" 'test IL quote from Patch (should change Loc address state from IN default to IL on retrieval)
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If
        'Exit Sub

        '12/22/2018 - testing IL new quote issue w/ initial IN-only save, re-pull in multiState format and then re-save as IL-only (was previously turning into 2-state quote w/ messed up govState part)
        'Dim qIdTest As String = "271045" 'test quote from Patch
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If
        'Exit Sub

        '12/21/2018 - testing state-change logging
        'Dim qqoTest As New QuickQuoteObject
        'qqoTest.StateId = 15
        'qqoTest.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Indiana
        'Exit Sub

        '12/19/2018 - testing new SET method on properties
        'Dim qqoTest As New QuickQuoteObject
        'Dim beginningVal1 As String = qqoTest.BlanketRatingOptionId
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "a", onlyValidIfNumeric:=True)
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "1", onlyValidIfNumeric:=True)
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "b", onlyValidIfNumeric:=True)
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "2", onlyValidIfNumeric:=True, okayToOverwrite:=True)
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "3", onlyValidIfNumeric:=True)
        ''qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "c", onlyValidIfNumeric:=True, okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "a", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "1", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "b", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "2", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "3", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType)
        'qqHelper.SetValueIfNotSet(qqoTest.BlanketRatingOptionId, "c", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True)
        'Dim endingVal1 As String = qqoTest.BlanketRatingOptionId
        'Dim beginningVal2 As String = qqoTest.AnniversaryRatingEffectiveDate
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "d", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType)
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "1/1/2010", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType)
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "e", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType)
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "2/2/2010", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType, okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "3/3/2010", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType)
        'qqHelper.SetValueIfNotSet(qqoTest.AnniversaryRatingEffectiveDate, "f", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.DateType, okayToOverwrite:=True)
        'Dim endingVal2 As String = qqoTest.AnniversaryRatingEffectiveDate
        'Dim beginningVal3 As String = qqoTest.PolicyId
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "g", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "h", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "4", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "5", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "i", okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "j", okayToOverwrite:=True, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "6", okayToOverwrite:=True, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "3/3/2010", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "7", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, neverSetItNotValid:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "k", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True)
        'qqHelper.SetValueIfNotSet(qqoTest.PolicyId, "l", onlyValidIfSpecifiedType:=QuickQuoteHelperClass.TypeToVerify.NumericType, okayToOverwrite:=True, neverSetItNotValid:=True)
        'Dim endingVal3 As String = qqoTest.PolicyId
        'If String.IsNullOrWhiteSpace(endingVal1) = False OrElse String.IsNullOrWhiteSpace(endingVal2) = False OrElse String.IsNullOrWhiteSpace(endingVal3) = False Then

        'End If
        'Exit Sub

        '12/4/2018 - testing SynchronizePackagePolicy service; moved logic to new method 12/5/2018
        'SynchronizePackagePolicyTesting()
        'Exit Sub

        '11/19/2018 - testing CAP IRPM
        'Dim qIdIRPM As String = "631" 'test quote from IfmIllinois
        'Dim qqoIRPM As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgIRPM As String = ""
        'qqoIRPM = TestReturnQuote(qIdIRPM, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgIRPM)

        'If qqoIRPM IsNot Nothing Then
        '    Dim qqoIRPMSubQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqoIRPM)
        '    If qqoIRPMSubQuotes IsNot Nothing AndAlso qqoIRPMSubQuotes.Count > 0 Then
        '        For Each sq As QuickQuoteObject In qqoIRPMSubQuotes
        '            If sq IsNot Nothing Then
        '                sq.IRPM_CAP_SafetyOrganization = "0.900"
        '                sq.IRPM_CAP_SafetyOrganizationDesc = "Test"
        '            End If
        '        Next
        '        Dim strQQIRPM As String = ""
        '        Dim ratedQQIRPM As QuickQuoteObject = Nothing
        '        Dim strRatedQQIRPM As String = ""
        '        Dim strRateErrorIRPM As String = ""
        '        QQxml.RateQuoteAndSave(QuickQuoteXML.QuickQuoteSaveType.IRPM, qqoIRPM, strQQIRPM, ratedQQIRPM, strRatedQQIRPM, qIdIRPM, strRateErrorIRPM) 'debug method w/ byref params for rated QuickQuoteObject and xml strings for the request and response
        '        If String.IsNullOrWhiteSpace(strRateErrorIRPM) = False Then
        '            'error
        '        End If
        '    End If
        'End If
        'Exit Sub

        '11/16/2018 - testing GetSumForPropertyValues on sub property
        'Dim qqosForPrem As New List(Of QuickQuoteObject)
        'Dim qqoForPrem1 As New QuickQuoteObject
        'If qqoForPrem1.UnscheduledPersonalPropertyCoverage Is Nothing Then
        '    qqoForPrem1.UnscheduledPersonalPropertyCoverage = New QuickQuoteUnscheduledPersonalPropertyCoverage
        'End If
        'qqoForPrem1.UnscheduledPersonalPropertyCoverage.MainCoveragePremium = "100"
        'qqosForPrem.Add(qqoForPrem1)
        'Dim qqoForPrem2 As New QuickQuoteObject
        'If qqoForPrem2.UnscheduledPersonalPropertyCoverage Is Nothing Then
        '    qqoForPrem2.UnscheduledPersonalPropertyCoverage = New QuickQuoteUnscheduledPersonalPropertyCoverage
        'End If
        'qqoForPrem2.UnscheduledPersonalPropertyCoverage.MainCoveragePremium = "200"
        'qqosForPrem.Add(qqoForPrem2)
        'Dim qqoForPrem3 As New QuickQuoteObject
        'If qqoForPrem3.UnscheduledPersonalPropertyCoverage IsNot Nothing Then
        '    qqoForPrem3.UnscheduledPersonalPropertyCoverage = Nothing
        'End If
        'qqosForPrem.Add(qqoForPrem3)
        'Dim totalPrem As String = ""
        ''totalPrem = qqHelper.GetSumForPropertyValues(qqosForPrem, Function() qqoForPrem1.UnscheduledPersonalPropertyCoverage.MainCoveragePremium)
        ''totalPrem = qqHelper.GetSumForPropertyValues(qqosForPrem, Function() qqoForPrem1.UnscheduledPersonalPropertyCoverage.MainCoveragePremium, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=True)
        ''Dim unscheduledPersonalPropertyCoverages As List(Of QuickQuoteUnscheduledPersonalPropertyCoverage) = Nothing
        ''unscheduledPersonalPropertyCoverages = qqHelper.GetListOfPropertyValues(qqosForPrem, Function() qqoForPrem1.UnscheduledPersonalPropertyCoverage, verifyPropertyExists:=True)
        ''If unscheduledPersonalPropertyCoverages IsNot Nothing AndAlso unscheduledPersonalPropertyCoverages.Count > 0 Then

        ''End If
        'qqoForPrem1.UnscheduledPersonalPropertyCoverage = Nothing 'added to make sure the full path below (qqoForPrem1.UnscheduledPersonalPropertyCoverage.MainCoveragePremium) doesn't need to be valid in order for the expression to figure out the property... everything worked fine
        'totalPrem = qqHelper.GetSumForSubPropertyValues(qqosForPrem, Function() qqoForPrem1.UnscheduledPersonalPropertyCoverage, Function() qqoForPrem1.UnscheduledPersonalPropertyCoverage.MainCoveragePremium, maintainFormattingOrDefaultValue:=True, verifyMainPropertyExists:=True, verifySubPropertyExists:=True)
        'If qqHelper.IsPositiveDecimalString(totalPrem) = True Then

        'End If
        'Exit Sub

        'added 11/14/2018 to test CPP - for scheduledRatings, etc.
        'Dim qIdTest As String = "535" 'test quote from IfmIllinois; had scheduledRatings on main quote (should also be on SubQuoteFirst)
        'Dim qIdTest As String = "479" 'test quote from IfmIllinois (Mary's original quote); had scheduledRatings on main quote (should also be on SubQuoteFirst)
        'Dim qIdTest As String = "547" 'test quote from IfmIllinois (Mary's new quote); did not have scheduledRatings on main quote (or SubQuoteFirst); issue was CPP w/ IL... packageParts were messed up
        'Dim qIdTest As String = "552" 'test quote from IfmIllinois; new quote... may not have effDate... used old logic because of missing effDate... has scheduledRatings on main quote, but packageParts were all IN when the quote was IL... this issue "should" be fixed now
        'Dim qIdTest As String = "557" 'test quote from IfmIllinois; new quote w/o effDate to test prev issue and old logic; appears to have worked okay w/ old save logic and new parse logic even though the wrong packagePartTypeIds were saved (parse must've used versionId to get state for packagePart)
        'Dim qIdTest As String = "561" 'test quote from IfmIllinois; new quote w/ effDate to test new logic
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If
        '11/14/2018 - new CPP quote w/ IL for govState
        'Dim qqoNew As New QuickQuoteObject
        'qqoNew.LobType = QuickQuoteObject.QuickQuoteLobType.CommercialPackage
        'qqoNew.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
        'qqoNew.EffectiveDate = "6/1/2019"
        'Dim qIdNew As String = "" '552 (didn't have effDate set so wouldn't have used new logic), then 557 (also w/o effDate), and then 561 (w/ effDate)
        'Dim saveErrorMsgNew As String = ""
        'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqoNew, qIdNew, saveErrorMsgNew)
        'If String.IsNullOrWhiteSpace(saveErrorMsgNew) = False AndAlso qqHelper.IsPositiveIntegerString(qIdNew) = True Then
        '    'success
        'End If
        'Exit Sub

        'added 11/7/2018 to test CPR Condo Risk in Illinois Stop logic
        'Dim qIdTest As String = "427" 'test quote from IfmIllinois
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)

        'If qqoTest IsNot Nothing Then
        '    Dim okayToSave As Boolean = False
        '    Dim qqoTestSubQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqoTest)
        '    If qqoTestSubQuotes IsNot Nothing AndAlso qqoTestSubQuotes.Count > 0 Then
        '        okayToSave = True
        '        qqoTest.QuoteDescription = "CPR Condo Risk Grade in Illinois Test"
        '        For Each sq As QuickQuoteObject In qqoTestSubQuotes
        '            If sq IsNot Nothing Then
        '                sq.RiskGradeLookupId = "271" 'Condominiums - commercial - bank Or mercantile, manufacturing Or office(assoc. risk only)
        '            End If
        '        Next
        '    End If

        '    If okayToSave = True Then
        '        Dim saveErrorMsgTest As String = ""
        '        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqoTest, qIdTest, saveErrorMsgTest)
        '        If String.IsNullOrWhiteSpace(saveErrorMsgTest) = False Then
        '            'success
        '        End If
        '    End If
        'End If
        'Exit Sub

        '10/4/2018 - testing lamda Sum helpers for Bruce - IFMIllinois
        'Dim qqoTest As QuickQuoteObject = TestReturnQuote("63")
        'If qqoTest IsNot Nothing Then
        '    Dim subQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqoTest)
        '    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then
        '        Dim addlInsManChgTot As String = ""
        '        Dim condoDandOPremTot As String = ""

        '        addlInsManChgTot = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqoTest.AdditionalInsuredsManualCharge)
        '        condoDandOPremTot = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqoTest.CondoDandOPremium)
        '    End If
        'End If
        'Exit Sub

        '10/6/2018 - test to see if Drivers are being instantiated when there aren't any; CloneObject call on PackageParts is changing Nothing to Something w/ Count 0
        'Dim qqoTest As QuickQuoteObject = TestReturnQuote("119")
        'If qqoTest IsNot Nothing Then
        '    Dim subQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqoTest)
        '    If subQuotes IsNot Nothing AndAlso subQuotes.Count > 0 Then
        '        Dim govStateQuote As QuickQuoteObject = qqHelper.GoverningStateQuote(qqoTest, subQuotes:=subQuotes)
        '        If govStateQuote IsNot Nothing Then
        '            If govStateQuote.Drivers IsNot Nothing AndAlso govStateQuote.Drivers.Count = 0 Then
        '                govStateQuote.Drivers = Nothing
        '            End If
        '        End If
        '    End If
        'End If
        'Exit Sub

        'Session.Abandon()
        'start w/ normal quote - create from copy
        'Dim sourceQuoteId As String = "262729" 'QCGL024353 on Patch; prem was $636.00; should only have 1 location
        'Dim sourceQuoteId As String = "270182" 'QBOP019185 on Patch
        'Dim sourceQuoteId As String = "61" 'QBOP010002 on IfmIllinois
        'Dim sourceQuoteId As String = "258" 'originally copied from QCAP010003 (quoteId 255) on IfmIllinois
        'Dim sourceQuoteId As String = "267" 'originally copied from QCAP010003 (quoteId 255) on IfmIllinois
        'Dim sourceQuoteId As String = "358" 'FAR quote on IfmIllinois 11/5/2018
        'Dim sourceQuoteId As String = "804" 'FAR quote on IfmIllinois 12/10/2018; created 805, 806, and 807
        'Dim sourceQuoteId As String = "270770" 'CPP IN-only quote on Patch 12/11/2018; created 270888
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If
        'Exit Sub

        '8/6/2018 note: CloneObject call was duplicating objects (Locations, Coverages, etc.) due to having multiple properties that pointed to the same spot (i.e. Locations and VersionAndLobInfo.Locations); solution was to hide the original properties from Serialization since they're already included w/ other objects
        'Dim qId As String = "269891" '"269886" '"269885" '"269884" '"269876" 'copy created from 262729 on Patch: 269876 (somehow corrupted; gets System.OutOfMemoryException error; somehow due to GetTopLevelQuoteObject calls before last Save or possibly other stuff that was Saved on there somehow), 269884 (xml file size 1706 KB compared to 6371 KB for 269876), 269885 (last quote, 269884, ended up w/ a ton of locations - 128 and then 1024), 269886 (last one kept increasing locations on save too), 269891 (should have duplication issue resolved now)
        'Dim qId As String = "234843" 'test quote w/ Matt 8/17/2018 on NewBuildTest
        'Dim qId As String = "270182" 'test quote summary w/ Martin 8/28/2018 on Patch
        'Dim qId As String = "270213" 'test quote summary w/ Martin 8/29/2018 on Patch
        'Dim qId As String = "270280" 'test multi-state BOP 9/6/2018 on Patch
        'Dim qId As String = "270288" 'test multi-state BOP 9/6/2018 on Patch
        'Dim qId As String = "270322" 'test IL PPA 9/12/2018 on Patch
        Dim qId As String = "270318" 'test IL PPA (Matt's quote) 9/12/2018 on Patch
        Dim qqo As QuickQuoteObject = Nothing
        Dim retrievalErrMsg As String = ""
        qqo = TestReturnQuote(qId, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsg)
        'qqo = New QuickQuoteObject
        'With qqo
        '    .LobType = QuickQuoteObject.QuickQuoteLobType.AutoPersonal
        '    .StateId = 15
        'End With
        If qqo IsNot Nothing Then

            'testing w/ Martin 8/28/2018
            'Dim subQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqo)
            'Dim AIprem1 As String = qqo.AdditionalInsuredsQuotedPremium
            'Dim AIprem2 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.AdditionalInsuredsQuotedPremium, maintainFormattingOrDefaultValue:=True)
            'Dim AIprem3 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.AdditionalInsuredsQuotedPremium)

            'Dim hasElecData1 As Boolean = qqo.HasElectronicData
            'Dim hasElecData2 As Boolean = qqHelper.HasAnyTruePropertyValues(subQuotes, Function() qqo.HasElectronicData, verifyPropertyExists:=True)
            'Dim hasElecData3 As Boolean = qqHelper.HasAnyTruePropertyValues(subQuotes, Function() qqo.HasElectronicData)
            'Dim elecDataPrem1 As String = qqo.ElectronicDataQuotedPremium
            'Dim elecDataPrem2 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.ElectronicDataQuotedPremium, maintainFormattingOrDefaultValue:=True)
            'Dim elecDataPrem3 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.ElectronicDataQuotedPremium)

            'If qqHelper.IsPositiveDecimalString(AIprem1) = True OrElse hasElecData1 = True OrElse qqHelper.IsPositiveDecimalString(elecDataPrem1) = True Then

            'End If

            'testing w/ Martin 8/29/2018
            'Dim subQuotes As List(Of QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(qqo)
            'Dim occLiabprem1 As String = qqo.OccurrencyLiabilityQuotedPremium
            'Dim occLiabprem2 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.OccurrencyLiabilityQuotedPremium, maintainFormattingOrDefaultValue:=True)
            'Dim occLiabprem3 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.OccurrencyLiabilityQuotedPremium)

            'Dim prodCompOpsAggPrem1 As String = qqo.ProductsCompletedOperationsAggregateQuotedPremium
            'Dim prodCompOpsAggPrem2 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.ProductsCompletedOperationsAggregateQuotedPremium, maintainFormattingOrDefaultValue:=True)
            'Dim prodCompOpsAggPrem3 As String = qqHelper.GetSumForPropertyValues(subQuotes, Function() qqo.ProductsCompletedOperationsAggregateQuotedPremium)

            'If qqHelper.IsPositiveDecimalString(occLiabprem1) = True OrElse qqHelper.IsPositiveDecimalString(prodCompOpsAggPrem1) = True Then

            'End If

            '8/13/2018 reflection testing
            'If qqHelper.IsValidDateString(qqo.EffectiveDate) = True Then

            'End If
            ''Dim currEffDate As String = qqHelper.GetPropertyValue(qqo, "EffectiveDate")
            ''Dim currEffDate As String = qqHelper.GetPropertyValue(qqo, "EffectiveDateWrong") 'for testing
            'Dim currEffDate As String = qqHelper.GetPropertyValue(qqo, qqHelper.GetPropertyName(Function() qqo.EffectiveDate))
            ''currEffDate = qqHelper.GetPropertyValue(qqo, qqo.GetPropertyName(Function() qqo.EffectiveDate))
            ''currEffDate = qqHelper.GetPropertyNameValue(qqo, Function() qqo.EffectiveDate)
            'If qqHelper.IsValidDateString(currEffDate) = True Then

            'End If
            ''qqHelper.SetPropertyValue(qqo, NameOf(qqo.EffectiveDate), Date.Today.ToShortDateString) 'NameOf receives error: Visual Basic 12.0 does not support 'nameof' expressions.
            ''qqHelper.SetPropertyValue(qqo, "EffectiveDate", Date.Today.ToShortDateString)
            ''qqHelper.SetPropertyValue(qqo, "EffectiveDateWrong", Date.Today.ToShortDateString) 'for testing
            'qqHelper.SetPropertyValue(qqo, qqHelper.GetPropertyName(Function() qqo.EffectiveDate), Date.Today.ToShortDateString)
            'Exit Sub

            'qqHelper.CopyLocationsFromStateLevelToTopLevel(qqo) 'removed 8/10/2018; now happening automatically from FinalizeQuickQuote based on Helper method that uses LobType
            If qqo.Locations IsNot Nothing Then
                Dim numIndianaLocs As Integer = 0
                Dim numIllinoisLocs As Integer = 0
                If qqo.Locations.Count > 0 Then
                    For Each loc As QuickQuoteLocation In qqo.Locations
                        If loc.QuoteStateTakenFrom = QuickQuoteHelperClass.QuickQuoteState.Indiana Then
                            numIndianaLocs += 1
                        End If
                        If loc.QuoteStateTakenFrom = QuickQuoteHelperClass.QuickQuoteState.Illinois Then
                            numIllinoisLocs += 1
                        End If
                    Next
                End If
                'If numIndianaLocs = 0 Then
                '    Dim newIndianaLoc As New QuickQuoteLocation
                '    newIndianaLoc.Address = New QuickQuoteAddress
                '    With newIndianaLoc.Address
                '        .HouseNum = "123"
                '        .StreetName = "Indiana Ave"
                '        .City = "Indianapolis"
                '        .QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Indiana
                '        .Zip = "46227"
                '    End With
                '    qqo.Locations.Add(newIndianaLoc)
                '    numIndianaLocs += 1
                'End If
                'If numIllinoisLocs = 0 Then
                '    Dim newIllinoisLoc As New QuickQuoteLocation
                '    newIllinoisLoc.Address = New QuickQuoteAddress
                '    With newIllinoisLoc.Address
                '        .HouseNum = "123"
                '        .StreetName = "Illinois Ave"
                '        .City = "Chicago"
                '        .QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
                '        .Zip = "60620"
                '    End With
                '    qqo.Locations.Add(newIllinoisLoc)
                '    numIllinoisLocs += 1
                'End If

                'If numIndianaLocs >= 2 AndAlso numIllinoisLocs <= 1 Then
                '    'update 1st Indiana loc to Illinois
                '    Dim stateLoc As QuickQuoteLocation = qqHelper.LocationForQuickQuoteState(qqo.Locations, QuickQuoteHelperClass.QuickQuoteState.Indiana, firstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First)
                '    If stateLoc IsNot Nothing Then
                '        If stateLoc.Address Is Nothing Then
                '            stateLoc.Address = New QuickQuoteAddress
                '        End If
                '        stateLoc.Address.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
                '        numIllinoisLocs += 1
                '        numIndianaLocs -= 1
                '    End If
                'ElseIf numIllinoisLocs >= 2 AndAlso numIndianaLocs <= 1 Then
                '    ''update last Illinois loc to Indiana
                '    'Dim stateLoc As QuickQuoteLocation = qqHelper.LocationForQuickQuoteState(qqo.Locations, QuickQuoteHelperClass.QuickQuoteState.Illinois, firstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.Last)
                '    'update 1st Illinois loc to Indiana
                '    Dim stateLoc As QuickQuoteLocation = qqHelper.LocationForQuickQuoteState(qqo.Locations, QuickQuoteHelperClass.QuickQuoteState.Illinois, firstOrLastItem:=QuickQuoteHelperClass.FirstOrLast.First)
                '    If stateLoc IsNot Nothing Then
                '        If stateLoc.Address Is Nothing Then
                '            stateLoc.Address = New QuickQuoteAddress
                '        End If
                '        stateLoc.Address.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Indiana
                '        numIndianaLocs += 1
                '        numIllinoisLocs -= 1
                '    End If
                'End If
            End If

            Dim stateId As String = qqo.StateId
            Dim versionId As String = qqo.VersionId

            'qqo.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Illinois
            'qqo.QuickQuoteState = QuickQuoteHelperClass.QuickQuoteState.Indiana

            stateId = qqo.StateId
            versionId = qqo.VersionId

            If String.IsNullOrWhiteSpace(stateId) = False AndAlso String.IsNullOrWhiteSpace(versionId) = False Then

            End If

            Dim qqStates As List(Of QuickQuoteHelperClass.QuickQuoteState) = qqo.QuoteStates 'Readonly; must call Setter method to update
            Dim qqStateIds As List(Of Integer) = qqo.QuoteStateIds 'Readonly; must call Setter method to update

            Dim indianaQuote As QuickQuoteObject = Nothing
            Dim illinoisQuote As QuickQuoteObject = Nothing

            If qqStates IsNot Nothing Then
                Dim statesChanged As Boolean = False
                If qqStates.Contains(QuickQuoteHelperClass.QuickQuoteState.Indiana) = False Then
                    qqStates.Add(QuickQuoteHelperClass.QuickQuoteState.Indiana)
                    statesChanged = True
                End If
                If qqStates.Contains(QuickQuoteHelperClass.QuickQuoteState.Illinois) = False Then
                    qqStates.Add(QuickQuoteHelperClass.QuickQuoteState.Illinois)
                    statesChanged = True
                Else
                    'qqStates.Remove(QuickQuoteHelperClass.QuickQuoteState.Illinois)
                End If

                'If statesChanged = True Then
                'qqo.Set_QuoteStates(qqStates)
                'qqo.Set_QuoteStateIds(qqStateIds)
                'End If

                indianaQuote = qqHelper.QuickQuoteObjectForState(qqo, QuickQuoteHelperClass.QuickQuoteState.Indiana)
                illinoisQuote = qqHelper.QuickQuoteObjectForState(qqo, QuickQuoteHelperClass.QuickQuoteState.Illinois)

                '8/13/2018 reflection testing
                'If indianaQuote IsNot Nothing Then
                '    If qqHelper.IsPositiveDecimalString(indianaQuote.BusinessMasterEnhancementQuotedPremium) = False Then
                '        indianaQuote.BusinessMasterEnhancementQuotedPremium = "150"
                '    End If
                '    indianaQuote.HasBusinessMasterEnhancement = False
                '    indianaQuote.IRPM_CatostrophicHazardsDesc = "N/A"
                '    indianaQuote.IRPM_CAP_EmployeesDesc = "0"
                '    indianaQuote.IRPM_CAP_EquipmentDesc = "$400.23"
                '    indianaQuote.IRPM_CAP_ManagementDesc = ""
                '    indianaQuote.IRPM_CAP_SafetyOrganizationDesc = "N/A"
                '    indianaQuote.IRPM_ClassificationPeculiaritiesDesc = "100.00"
                'End If
                'If illinoisQuote IsNot Nothing Then
                '    If qqHelper.IsPositiveDecimalString(illinoisQuote.BusinessMasterEnhancementQuotedPremium) = False Then
                '        illinoisQuote.BusinessMasterEnhancementQuotedPremium = "83"
                '    End If
                '    illinoisQuote.HasBusinessMasterEnhancement = True
                '    illinoisQuote.IRPM_CatostrophicHazardsDesc = "100"
                '    illinoisQuote.IRPM_CAP_EmployeesDesc = "$235"
                '    illinoisQuote.IRPM_CAP_EquipmentDesc = "N/A"
                '    illinoisQuote.IRPM_CAP_ManagementDesc = ""
                '    illinoisQuote.IRPM_CAP_SafetyOrganizationDesc = "N/A"
                '    illinoisQuote.IRPM_ClassificationPeculiaritiesDesc = ""
                'End If
                'Dim multiStateQuotes As List(Of QuickQuote.CommonObjects.QuickQuoteObject) = Nothing
                'multiStateQuotes = qqHelper.MultiStateQuickQuoteObjects(qqo) 'should always return at least qqo in the list

                'If multiStateQuotes IsNot Nothing Then
                '    'SUM stateQuote premiums
                '    Dim enhancementEndorsementCombinedPremium As String = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.BusinessMasterEnhancementQuotedPremium, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    End If
                '    'the following is here for testing to make sure non-numeric properties won't bomb out; shouldn't be used, but just in case
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.Policyholder, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'more tests for different formatting
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_CatostrophicHazardsDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_CAP_EmployeesDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_CAP_EquipmentDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_CAP_ManagementDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_CAP_SafetyOrganizationDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If
                '    'enhancementEndorsementCombinedPremium = qqHelper.GetSumForPropertyValues(multiStateQuotes, Function() qqo.IRPM_ClassificationPeculiaritiesDesc, maintainFormattingOrDefaultValue:=True, verifyPropertyExists:=False)
                '    'If qqHelper.IsPositiveDecimalString(enhancementEndorsementCombinedPremium) = True Then

                '    'End If

                '    'check for any True on stateQuote
                '    Dim hasEnhancementEndorsementOnAnyState As Boolean = qqHelper.HasAnyTruePropertyValues(multiStateQuotes, Function() qqo.HasBusinessMasterEnhancement, verifyPropertyExists:=False)
                '    If hasEnhancementEndorsementOnAnyState = True Then

                '    End If
                '    'the following is here for testing to make sure non-numeric properties won't bomb out; shouldn't be used, but just in case
                '    'hasEnhancementEndorsementOnAnyState = qqHelper.HasAnyTruePropertyValues(multiStateQuotes, Function() qqo.Client, verifyPropertyExists:=False)
                '    'If hasEnhancementEndorsementOnAnyState = True Then

                '    'End If

                '    'set property on all stateQuotes
                '    '1st to True
                '    qqHelper.SetPropertyValues(multiStateQuotes, Function() qqo.HasBusinessMasterEnhancement, True, verifyPropertyExists:=False, cloneNonPrimativePropertyValueTypes:=True)
                '    If indianaQuote IsNot Nothing Then
                '        If indianaQuote.HasBusinessMasterEnhancement = True Then

                '        End If
                '    End If
                '    If illinoisQuote IsNot Nothing Then
                '        If illinoisQuote.HasBusinessMasterEnhancement = True Then

                '        End If
                '    End If
                '    ''now to False
                '    'qqHelper.SetPropertyValues(multiStateQuotes, Function() qqo.HasBusinessMasterEnhancement, False, verifyPropertyExists:=False, cloneNonPrimativePropertyValueTypes:=True)
                '    'If indianaQuote IsNot Nothing Then
                '    '    If indianaQuote.HasBusinessMasterEnhancement = True Then

                '    '    End If
                '    'End If
                '    'If illinoisQuote IsNot Nothing Then
                '    '    If illinoisQuote.HasBusinessMasterEnhancement = True Then

                '    '    End If
                '    'End If
                'End If
                'Exit Sub
            End If

            qqStates = qqo.QuoteStates
            qqStateIds = qqo.QuoteStateIds

            If qqStates IsNot Nothing Then

            End If

            'If indianaQuote IsNot Nothing OrElse illinoisQuote IsNot Nothing Then
            '    'these should all be the same thing
            '    Dim qqPH As QuickQuotePolicyholder = qqo.Policyholder
            '    Dim qqPH_IN As QuickQuotePolicyholder = Nothing
            '    Dim qqPH_IL As QuickQuotePolicyholder = Nothing
            '    If indianaQuote IsNot Nothing Then
            '        qqPH_IN = indianaQuote.Policyholder
            '        If qqPH_IN IsNot Nothing AndAlso qqPH_IN.Name IsNot Nothing Then
            '            Dim commName1 As String = qqPH_IN.Name.CommercialName1
            '            If String.IsNullOrWhiteSpace(commName1) = False Then
            '                commName1 &= " IN"
            '                qqPH_IN.Name.CommercialName1 = commName1
            '            End If
            '        End If
            '    End If
            '    If illinoisQuote IsNot Nothing Then
            '        qqPH_IL = illinoisQuote.Policyholder
            '        If qqPH_IL IsNot Nothing AndAlso qqPH_IL.Name IsNot Nothing Then
            '            Dim commName1 As String = qqPH_IL.Name.CommercialName1
            '            If String.IsNullOrWhiteSpace(commName1) = False Then
            '                commName1 &= " IL"
            '                qqPH_IL.Name.CommercialName1 = commName1
            '            End If
            '        End If
            '    End If

            '    'these are different, though this would never be used for Policyholder; more for PriorCarrier, which should work the same way where you only have to set it at the main level to have it used everywhere, but you can set it at a StateLevel by going to it from the QuickQuoteObject's sub-object Property
            '    Dim qqPH_IN_only As QuickQuotePolicyholder = Nothing
            '    Dim qqPH_IL_only As QuickQuotePolicyholder = Nothing
            '    If indianaQuote IsNot Nothing Then
            '        qqPH_IN_only = indianaQuote.TopLevelQuoteInfo.Policyholder
            '        If qqPH_IN_only IsNot Nothing AndAlso qqPH_IN_only.Name IsNot Nothing Then
            '            Dim commName1 As String = qqPH_IN_only.Name.CommercialName1
            '            If String.IsNullOrWhiteSpace(commName1) = False Then
            '                commName1 &= " IN_only"
            '                qqPH_IN_only.Name.CommercialName1 = commName1
            '            End If
            '        End If
            '    End If
            '    If illinoisQuote IsNot Nothing Then
            '        qqPH_IL_only = illinoisQuote.TopLevelQuoteInfo.Policyholder
            '        If qqPH_IL_only IsNot Nothing AndAlso qqPH_IL_only.Name IsNot Nothing Then
            '            Dim commName1 As String = qqPH_IL_only.Name.CommercialName1
            '            If String.IsNullOrWhiteSpace(commName1) = False Then
            '                commName1 &= " IL_only"
            '                qqPH_IL_only.Name.CommercialName1 = commName1
            '            End If
            '        End If
            '    End If
            'End If

            Dim topLevelQuoteForCurrentQuote As QuickQuoteObject = Nothing
            Dim topLevelQuoteForIN As QuickQuoteObject = Nothing
            Dim topLevelQuoteForIL As QuickQuoteObject = Nothing

            'note: running these calls crashed Visual Studio on the next CloneObject attempt (during the call to load the quote) - on line: str = string_writer.ToString()
            'topLevelQuoteForCurrentQuote = qqo.GetTopLevelQuoteObject()
            'If indianaQuote IsNot Nothing Then
            '    topLevelQuoteForIN = indianaQuote.GetTopLevelQuoteObject()
            'End If
            'If illinoisQuote IsNot Nothing Then
            '    topLevelQuoteForIL = indianaQuote.GetTopLevelQuoteObject()
            'End If

            If topLevelQuoteForCurrentQuote IsNot Nothing OrElse topLevelQuoteForIN IsNot Nothing OrElse topLevelQuoteForIL IsNot Nothing Then

            End If

            'qqHelper.CopyLocationsFromTopLevelToStateLevel(qqo) 'removed 8/10/2018; now happening automatically from FinalizeQuickQuoteLight based on Helper method that uses LobType
            If qqo.Locations IsNot Nothing OrElse (indianaQuote IsNot Nothing AndAlso indianaQuote.Locations IsNot Nothing) OrElse (illinoisQuote IsNot Nothing AndAlso illinoisQuote.Locations IsNot Nothing) Then

            End If

            Dim saveErrorMsg As String = ""
            'QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqo, qId, saveErrorMsg)
            If String.IsNullOrWhiteSpace(saveErrorMsg) = False Then
                'success
            End If

        End If
    End Sub
    'added 8/14/2018 to compare performance between looping functionality and reflection
    Private Sub TestReflection(ByVal useReflection As Boolean, Optional ByVal numberOfQuotes As Integer = 10000, Optional ByRef premTotal As String = "", Optional ByRef startTime As String = "", Optional ByRef endTime As String = "")
        premTotal = ""
        startTime = ""
        endTime = ""

        Dim bigListOfQuotes As New List(Of QuickQuoteObject)
        'add 10,000 quotes to list and set prem for each (will be equal to quote position in list)
        For i As Integer = 1 To numberOfQuotes
            Dim q As New QuickQuoteObject
            q.BusinessMasterEnhancementQuotedPremium = i.ToString
            bigListOfQuotes.Add(q)
        Next

        If bigListOfQuotes IsNot Nothing AndAlso bigListOfQuotes.Count > 0 Then
            startTime = Date.Now.ToString
            If useReflection = True Then
                Dim qSample As New QuickQuoteObject
                premTotal = qqHelper.GetSumForPropertyValues(bigListOfQuotes, Function() qSample.BusinessMasterEnhancementQuotedPremium, maintainFormattingOrDefaultValue:=True)
            Else
                For Each q As QuickQuoteObject In bigListOfQuotes
                    premTotal = qqHelper.getSumAndOptionallyMaintainFormatting(premTotal, q.BusinessMasterEnhancementQuotedPremium, maintainFormattingOrDefaultValue:=True)
                Next
            End If
            endTime = Date.Now.ToString
        End If
    End Sub
    'added 9/21/2018
    Private Sub TestMultiStateRating()
        'ReSaveOrReRate("13", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; initially saved to Diamond as single-state; convertToMultistate failed (unable to locate the package version for the multistate rewrite); Diamond save failed (multi-state wcp in detail #(new): Loss history question must be answered.)
        'ReSaveOrReRate("14", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; copy of 13 after adding IL back; must've been problem w/ Diamond save to cause it to be single-state
        'ReSaveOrReRate("15", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; copy of 13 after adding IL back; there was still some Diamond Save logic that was using qqo.LobId instead of qqo.LobIdToUse; updated now
        'ReSaveOrReRate("16", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; copy of 13 after adding IL back; Diamond Save worked correctly this time; Rating validations: rates needed for IN part (expMod); location needed for IL
        'ReSaveOrReRate("19", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP; attempting re-rate after Rating validations from VR: building cov required for selected occupancy (appeared to be dropped)
        'ReSaveOrReRate("27", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR; attempting re-rate to see why we're defaulting the wrong version info (single-state IN for the same lob) when there is no rated info besides validations

        'testing 10/1/2018 in IfmIllinois for ConvertMonolinePolicyIntoPackagePolicy w/ createDiamondImageXmlsForTesting True
        'ReSaveOrReRate("59", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP (QWCP010004); failed initial Rate because of missing rates or something
        'ReSaveOrReRate("60", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010001); successful on initial Rate
        'ReSaveOrReRate("61", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("66", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010004; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("67", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010005; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("68", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010006; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("69", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010007; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("70", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010008; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("71", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010009; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("86", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010010; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("87", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (QBOP010011; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("88", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part
        'ReSaveOrReRate("89", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'BOP (; copy of 61-QBOP010002); this one will have its initial rate attempt here; will see if Locations are maintained on Master Package Part

        'ReSaveOrReRate("94", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP; troubleshoot for Martin on 10/4/2018 in IFMIllinois (problem getting ratedXml)

        'ReSaveOrReRate("179", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.AppGap) 'CAP; troubleshoot UW Question app validation error on 10/11/2018 in IFMIllinois; likely needs some questions answered on master part

        'ReSaveOrReRate("244", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - QFAR010005; troubleshoot modifiers error (primary key) on 10/18/2018 in IFMIllinois for Mary
        'ReSaveOrReRate("248", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - QFAR010001 (copy of 244); troubleshoot modifiers error (primary key) on 10/18/2018 in IFMIllinois for Mary; workaround successful (looking up diamondNum and applying, while setting IsNew to False)

        'ReSaveOrReRate("255", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - QCAP010003 - testing Convert service (from single-state to multi-state) in IfmIllinois 10/23/2018
        'ReSaveOrReRate("258", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/24/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... rated successfully in single-state format; Convert failed w/ validation; subsequent Save was successful and updated image to multi-state lob; subsequent Rate failed
        'ReSaveOrReRate("264", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/24/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... just like previous test but after running db script from Matt Devries: same results as last time
        'ReSaveOrReRate("265", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/24/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... just like previous test but after resetting IIS: same results as last time
        'ReSaveOrReRate("266", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/25/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... just like previous test but after updated assembly from Matt Devries: same as last time... may need to reset IIS
        'ReSaveOrReRate("267", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/25/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... just like previous test but after updated assembly from Matt Devries and IIS reset: same as previous
        'ReSaveOrReRate("273", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Convert service (from single-state to multi-state) in IfmIllinois 10/25/2018 - will rate 1st for single-state (key set to 7/1/2019) and then convert and 2nd rate (change key back to 1/1/2019)... just like previous test but after another updated assembly from Matt Devries: convert worked, returned image had 2 PackageParts, Save successful, Rate successful
        'ReSaveOrReRate("311", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Diamond issue w/ reverting to single-state format in IfmIllinois 10/30/2018 - will attempt Save to Diamond (and subsequent Rate) w/ effDate that's too old for that environment (effDate = 3/1/2019; systemDate = 5/18/2019); xmls will be saved
        'ReSaveOrReRate("312", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Diamond issue w/ reverting to single-state format in IfmIllinois 10/30/2018 - will attempt Save to Diamond (and subsequent Rate) w/ effDate that's too old for that environment (effDate = 3/1/2019; systemDate = 5/18/2019); xmls will be saved; same as last test
        'ReSaveOrReRate("314", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Diamond issue w/ reverting to single-state format in IfmIllinois 10/30/2018 - will attempt Save to Diamond (and subsequent Rate) w/ effDate that's too old for that environment (effDate = 3/1/2019; systemDate = 5/18/2019); xmls will be saved; same as last test but after correcting SubmitRate for LobIdToUse instead of LobId; unhandled error
        'ReSaveOrReRate("315", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - testing Diamond issue w/ reverting to single-state format in IfmIllinois 10/30/2018 - will attempt Save to Diamond (and subsequent Rate) w/ effDate that's too old for that environment (effDate = 3/1/2019; systemDate = 5/18/2019); xmls will be saved; same as last test but after correcting SubmitRate for LobIdToUse instead of LobId; tried again w/ actual service call instead of IfmDiamondServices, but still unhandled error
        'ReSaveOrReRate("358", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting acreage township issue in IfmIllinois; error is on master part so Diamond validation is likely trying to validate townshipcodetype_id against version, but there aren't records in TownshipCodeTypeVersion for multi-state version... will try to not add some of the secondary object onto Locations on the master part... shouldn't need to since I just need address, etc. for location ordering reconciliation; that appeared to work for acreage... now validation about only 1 primary residence... will update to always set to False when master part; that worked... now just getting Ratebook error on master part
        'ReSaveOrReRate("364", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting FAR rating error(s); same as last but done on Copy after updating logic to not store all the secondary info on master part... still got the same ratebook error as last time
        'ReSaveOrReRate("480", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting FAR mine subsidence rating error about cov being required on location if set on building (see location 1 for this one) - appears that only section 1 cov type 80103 (MineSubsidenceCovAAndB) is available for IL where the quote was trying to use 80102 (MineSubsidenceCovA)
        'ReSaveOrReRate("567", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CPP - troubleshooting CPP rating... weirdness (was rated previously; will try new 1st-time rate after Copy)
        'ReSaveOrReRate("569", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CPP - troubleshooting CPP rating; should be similar to last attempt but 1st Rate after Copy (from quoteId 535 - QCPP010001); bad packagePart logic for DiamondServices... was re-using the CPR packagePart for CGL; now updated
        'ReSaveOrReRate("570", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CPP - troubleshooting CPP rating; should be similar to last attempt but 1st Rate after Copy (from quoteId 535 - QCPP010001) and fixed logic; also Saved info from local VR before attempting Rate here... worked this time
        'ReSaveOrReRate("631", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CAP - troubleshooting NumberOfSelfPropelledAutos value

        'ReSaveOrReRate("785", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting applicant syncing 12/3/2018 (IfmIllinois); 12/6/2018 note: we found out that it doesn't happen from DiamondServices (only DiamondWeb), so we've added logic to do it on our side
        '12/7/2018 note: DummyStatePart seemed to wipe out policyLevel stuff at root (Farm IL Detail #2: Policy: Entity Type is required.; Farm IL Detail #2: Policy: Liability Option is required.)
        '12/7/2018 note cont...:GoverningStatePart failed w/ the following error: Exception in Save:Exception in Save:Exception in Save:Exception in InternalSave:Exception in WeakPreSave:Exception in PreSave:The DELETE statement conflicted with the REFERENCE constraint "FK_CoverageDetail_Coverage". The conflict occurred in database "Diamond", table "dbo.CoverageDetail".        The statement has been terminated. -- CommandText=DELETE From Coverage Where [coverage_num] =@coverage_num And [policy_id]=@policy_id And [policyimage_num]=@policyimage_num
        'ReSaveOrReRate("804", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting applicant syncing 12/6/2018 (IfmIllinois); note: this was copied from 785 above before getting a successful sync/rate (QFAR010010)
        '12/10/2018 note: 785 (QFAR010009) received the same error in DiamondWeb that it was receiving in VR, but 804 (QFAR010010) didn't get the error in DiamondWeb (just created and rated from VR but no sync attempts)... will need to try another; copy of 804
        'ReSaveOrReRate("805", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting applicant syncing 12/10/2018 (IfmIllinois); note: this was copied from 804; no error but no applicants synced either (on 1st save)... will try another Rate... sync worked on subsequent Rate attempt (QFAR010011)
        'ReSaveOrReRate("806", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting applicant syncing 12/10/2018 (IfmIllinois); note: this was copied from 804; testing latest logic that will Save, Sync, and then Save again for Initial Save to Diamond... that worked and quote (QFAR010012) came back w/ same premium as the one that was synced/rated from DiamondWeb (QFAR010010 - $6392)
        'ReSaveOrReRate("807", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR - troubleshooting applicant syncing 12/10/2018 (IfmIllinois); note: this was copied from 804

        '12/11/2018 - testing latest multiStateFormat logic that will now parse CPP IN-only when applicable based on effDate, etc.
        'ReSaveOrReRate("270888", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'CPP IN-only - copy of 270770 from Patch (QCPP041043 - $6,647.00)... successful w/ same premium (QCPP041059)

        '12/23/2018 - testing WCP multiState reRate w/ IL govState (on Patch)
        'ReSaveOrReRate("271058", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP IL MultiState from Patch; w/ Sync on - Successful on 1st Rate, Failed 2nd Rate
        'ReSaveOrReRate("271059", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP IL MultiState from Patch; w/ Sync off - Successful on 1st, 2nd, and 3rd Rates
        'ReSaveOrReRate("271066", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'WCP IL MultiState from Patch; w/ Sync off (copy of 271059) - Successful on 1st and 2nd Rates; will now try to re-save/re-rate from DiamondWeb to see if it gets the same error - received expected results... re-rated successfully from DiamondWeb initially; then re-saved governingState part (to initiate sync like we do from VR) and then received same error on re-rate

        '1/3/2019 - testing FAR conversion from single-state to multi-state (on Patch) - quotes originally created from AgentsOnlyRewrite since the latest VR code isn't there and we can simulate what happened in Prod post go-live
        'ReSaveOrReRate("271219", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN SingleState from Patch... should get converted to MultiState format - everything appears to have been successful... Rated successfully anyway
        'now trying to duplicate Matt's issue... similar scenario to my previous, but change date from old VR and then try to complete in new VR - received "problem getting rated xml" error from new VR
        'ReSaveOrReRate("271229", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN - started single-state and then failed to Rate when converting to multi-state - received duplicate applicant Rating validation
        'ReSaveOrReRate("271230", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN - started single-state but changed to post-1/1/2019 date from old VR but not rated; then re-rating w/ latest code to convert to multiState - same result as previous but no new Patch site 1st (w/ unhandled exception)
        'ReSaveOrReRate("271231", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN - started single-state but changed to post-1/1/2019 date from old VR and re-rated; now re-rating w/ latest code to convert to multiState (like test for TFS bug # 30723) - worked fine
        'ReSaveOrReRate("271232", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN - to get xmls to send to InsureSoft - start pre-1/1/2019 quote from old VR, Rate locally, change date locally to post-1/1/2019, reRate locally - should result in duplicate applicant Rating validation... confirmed

        '1/4/2019 - now testing fix for duplicate Applicant scenario caused by Convert failing when existing image doesn't already have effDate >= 1/1/2019
        'ReSaveOrReRate("271236", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IN - to get xmls for verification - start pre-1/1/2019 quote from old VR, Rate locally, change date locally to post-1/1/2019, reRate locally - should 1st save new effDate to Diamond before Convert... should not result in duplicate applicant Rating validation... confirmed - success

        '1/8/2019 - now testing FAR MultiState error Jeni received (may be related to Commercial PH)
        'ReSaveOrReRate("271317", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; unhandled exception at Rate

        '1/9/2019 - testing for Credit Report ordering
        'ReSaveOrReRate("271332", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; copy of successful quote; want to see if Credit is ordered at Rate like it's supposed to (and that a record is logged in our 3rd party reports table); unhandled exception
        'ReSaveOrReRate("271336", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; copy of successful quote; want to see if Credit is ordered at Rate like it's supposed to (and that a record is logged in our 3rd party reports table); same as previous attempt but syncing turned off
        'ReSaveOrReRate("271332", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; copy of successful quote; want to see if Credit is ordered at Rate like it's supposed to (and that a record is logged in our 3rd party reports table); trying this one again before and after InsureSoft fix
        'ReSaveOrReRate("271354", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; copy of successful quote; trying new quote to make sure data isn't messed up w/ old one (this one is IN multi; last was IL multi); this one worked after fix12
        'ReSaveOrReRate("271367", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; copy of successful quote; trying new quote to make sure data isn't messed up w/ old one (this one is IN multi; last was IL multi); without syncing

        '1/14/2019 - testing FAR MultiState error w/ quote that previously failed
        'ReSaveOrReRate("271399", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; previously received unhandled exception at Diamond Save/Rate; success w/ latest logic
        'ReSaveOrReRate("271422", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'FAR IL w/ IN; previously received unhandled exception at Diamond Save/Rate (just created on Patch 5:30pm or so on 1/14/2019)

        '1/18/2019 - testing CPR blanket issue
        'ReSaveOrReRate("271471", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)
        'ReSaveOrReRate("271465", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'Stacey's quote

        'added 1/21/2019 to test Patch database performance issues
        'ReSaveOrReRate("271493", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote) 'created from 271471; should have compressed xmls

        'added 1/25/2019 to test FAR IL MasterPart Location duplication issue
        'ReSaveOrReRate("271683", saveOrRate:=QuickQuoteXML.QuickQuoteValidationType.Rate, saveOrRateType:=QuickQuoteXML.QuickQuoteSaveType.Quote)

    End Sub

    'added 10/10/2018 for AgentPort Testing
    Private Sub CheckForNewSiteRedirects_Test(Optional ByVal requestedUrl As String = "")
        If String.IsNullOrWhiteSpace(requestedUrl) = False Then
            requestedUrl = UCase(requestedUrl)
        End If

        Dim referrerUrl As String = ""

        If Request IsNot Nothing Then
            If Request.UrlReferrer IsNot Nothing Then
                referrerUrl = UCase(Request.UrlReferrer.ToString)
            End If

            If String.IsNullOrWhiteSpace(requestedUrl) = True Then
                If Request.ServerVariables IsNot Nothing AndAlso Request.ServerVariables.Count > 0 AndAlso Request.ServerVariables("SCRIPT_NAME") IsNot Nothing Then
                    requestedUrl = UCase(Request.ServerVariables("SCRIPT_NAME").ToString)
                End If
            End If
        End If

        If String.IsNullOrWhiteSpace(requestedUrl) = False Then
            Dim redirectPage As String = ""

            If requestedUrl.Contains("MYAGENCY.ASPX") = True Then
                If String.IsNullOrWhiteSpace(referrerUrl) = False AndAlso referrerUrl.Contains("MYAGENCYUPDATE.ASPX") = True Then
                    redirectPage = "pages/AgencySettings.aspx"
                Else
                    redirectPage = "Default.aspx"
                End If
            ElseIf requestedUrl.Contains("AGENTS.ASPX") = True Then
                redirectPage = "Default.aspx"
            End If

            If String.IsNullOrWhiteSpace(redirectPage) = False Then
                Response.Redirect("~/" & redirectPage)
            End If
        End If
    End Sub

    'added 12/5/2018
    Public Enum SyncType 'latest test now uses enum from Helper class
        None = 0
        GoverningStatePart = 1
        AllParts = 2
        AllPartsExceptMaster = 3
        DummyPart = 4
    End Enum
    Private Sub SynchronizePackagePolicyTesting()
        Dim img As Diamond.Common.Objects.Policy.Image = Nothing
        Dim pp As Diamond.Common.Objects.Policy.PackagePart = Nothing
        'Dim newImg As Diamond.Common.Objects.Policy.Image = Nothing 'removed to use new method that updates image
        Dim strBeforeInfo As String = ""
        Dim strAfterInfo As String = ""

        'img = QuickQuoteHelperClass.GetPolicyImage(586, 1) 'QFAR010009 from IfmIllinois; quoteId 785
        'Dim qqo As QuickQuoteObject = TestReturnQuote("785") 'QFAR010009
        Dim qqo As QuickQuoteObject = TestReturnQuote("805") 'QFAR010011
        If qqo IsNot Nothing Then
            qqo.FinalizeQuickQuoteLight() 'if needed, this will trigger the following: qqo.ForceMultiStateFormat() and qqo.TopLevelQuoteInfo.Set_NeedsMultiStateFormat(True)
            img = QQxml.DiamondImageForQuickQuoteObject(qqo)
        End If

        If img IsNot Nothing Then
            ''PerformTestSync(img, partsToSync:=SyncType.GoverningStatePart, newImg:=newImg, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            ''PerformTestSync(img, partsToSync:=SyncType.DummyPart, newImg:=newImg, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            ''PerformTestSync(img, partsToSync:=SyncType.AllParts, newImg:=newImg, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'PerformTestSync(img, partsToSync:=SyncType.AllPartsExceptMaster, newImg:=newImg, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'updated to use new method that updates image
            'PerformTestSync_UpdateImage(img, partsToSync:=SyncType.GoverningStatePart, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'PerformTestSync_UpdateImage(img, partsToSync:=SyncType.DummyPart, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'PerformTestSync_UpdateImage(img, partsToSync:=SyncType.AllParts, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'PerformTestSync_UpdateImage(img, partsToSync:=SyncType.AllPartsExceptMaster, strBeforeInfo:=strBeforeInfo, strAfterInfo:=strAfterInfo)
            'updated 12/6/2018 to use new method that uses config settings to figure out syncType and whether or not sync is needed
            strBeforeInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="Before... ")
            Dim attemptedSync As Boolean = False
            Dim syncTypePerformed As QuickQuoteHelperClass.DiamondImageToPackagePartSyncType = QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.None
            Dim syncedAny As Boolean = False
            Dim syncedAll As Boolean = False
            QQxml.SyncDiamondImageWithPackagePartsIfNeeded(img, qqo:=qqo, attemptedSync:=attemptedSync, syncTypePerformed:=syncTypePerformed, syncedAny:=syncedAny, syncedAll:=syncedAll)
            If img IsNot Nothing AndAlso syncedAny = True Then
                strAfterInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="After SyncType " & System.Enum.GetName(GetType(QuickQuoteHelperClass.DiamondImageToPackagePartSyncType), syncTypePerformed) & "... ")
                Exit Sub
                '12/7/2018 - test saving in Diamond to see if that helps
                Dim newImg As Diamond.Common.Objects.Policy.Image = Nothing
                Dim diaValidation As Diamond.Common.Objects.DiamondValidation = Nothing
                Dim commonErrorMessage As String = ""
                Dim unhandledDiaServiceExceptionMessage As String = ""
                Dim successfulDiaSave As Boolean = QQxml.SuccessfullySavedExistingDiamondImage(img, tranTypeToValidate:=QuickQuoteObject.QuickQuoteTransactionType.NewBusinessQuote, newDiaImage:=newImg, diaValidation:=diaValidation, commonErrorMessage:=commonErrorMessage, unhandledDiaServiceExceptionMessage:=unhandledDiaServiceExceptionMessage)
                If successfulDiaSave = True AndAlso newImg IsNot Nothing Then
                    Dim strAfterSaveInfo As String = StringInfoForImagePackageParts(newImg, prefixToUseWhenInfoPresent:="After Save (SyncType " & System.Enum.GetName(GetType(QuickQuoteHelperClass.DiamondImageToPackagePartSyncType), syncTypePerformed) & ")... ")
                    If String.IsNullOrWhiteSpace(strAfterSaveInfo) = False Then

                    End If
                End If
            End If
        End If
        If String.IsNullOrWhiteSpace(strBeforeInfo) = False OrElse String.IsNullOrWhiteSpace(strAfterInfo) = False Then

        End If


        'If img IsNot Nothing Then
        '    If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 1 Then 'this assumes that the governing state part is the 2nd part... this won't work correctly for CPP since it will only bring back 1 lob part for the 1st state
        '        'pp = img.PackageParts.Item(1) '"governingState" part for non-CPP LOBs
        '        If img.PackageParts.Item(1) IsNot Nothing AndAlso img.PackageParts.Item(1).LOB IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants.Count > 0 Then
        '            'this is dummy packagePart w/ only the Applicants added
        '            pp = New Diamond.Common.Objects.Policy.PackagePart
        '            'pp.PackagePartTypeId = img.PackageParts.Item(1).PackagePartTypeId
        '            pp.VersionId = img.PackageParts.Item(1).VersionId
        '            'pp.PolicyId = img.PackageParts.Item(1).PolicyId
        '            'pp.PolicyImageNum = img.PackageParts.Item(1).PolicyImageNum
        '            If pp.LOB Is Nothing Then
        '                pp.LOB = New Diamond.Common.Objects.Policy.LOB
        '            End If
        '            If pp.LOB.RiskLevel Is Nothing Then
        '                pp.LOB.RiskLevel = New Diamond.Common.Objects.Policy.RiskLevel
        '            End If
        '            pp.LOB.RiskLevel.Applicants = img.PackageParts.Item(1).LOB.RiskLevel.Applicants
        '        End If
        '    End If
        'End If

        'If img IsNot Nothing AndAlso pp IsNot Nothing Then
        '    Dim strBeforeInfo As String = ""
        '    Dim strAfterInfo As String = ""
        '    strBeforeInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="Before... ")
        '    Dim successfullySynced As Boolean = QQxml.DiamondService_SuccessfullySyncedImageWithPackagePart(img, pp, newImg:=newImg)
        '    If successfullySynced = True AndAlso newImg IsNot Nothing Then
        '        strAfterInfo = StringInfoForImagePackageParts(newImg, prefixToUseWhenInfoPresent:="After... ")
        '        'when using "governingState" part: appears to at least be copying Applicants over correctly and Locations weren't messed up... need to check policy-level stuff (covs, etc.)
        '        'when using dummy part w/ only Applicants: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object.
        '        'when using dummy part w/ only Applicants and packagePartTypeId: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object. - error due to missing VersionId
        '        'when using dummy part w/ only Applicants, packagePartTypeId, VersionId, PolicyId, and PolicyImageNum (appears to just need VersionId): success on returning newImg... need to check newImg... looks okay... has applicants and didn't remove covs or locs
        '    End If
        '    If String.IsNullOrWhiteSpace(strBeforeInfo) = False OrElse String.IsNullOrWhiteSpace(strAfterInfo) = False Then

        '    End If
        'End If
    End Sub
    Private Sub PerformTestSync(ByVal img As Diamond.Common.Objects.Policy.Image, Optional ByVal partsToSync As SyncType = SyncType.GoverningStatePart, Optional ByRef newImg As Diamond.Common.Objects.Policy.Image = Nothing, Optional ByRef strBeforeInfo As String = "", Optional ByRef strAfterInfo As String = "")
        newImg = Nothing
        strBeforeInfo = ""
        strAfterInfo = ""

        If img IsNot Nothing Then
            Dim pp As Diamond.Common.Objects.Policy.PackagePart = Nothing
            strBeforeInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="Before... ")

            Select Case partsToSync
                Case SyncType.AllParts, SyncType.AllPartsExceptMaster
                    If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 0 Then
                        Dim partCount As Integer = 0
                        For Each p As Diamond.Common.Objects.Policy.PackagePart In img.PackageParts
                            partCount += 1
                            If partCount > 1 OrElse partsToSync = SyncType.AllParts Then
                                'either non-master part or okay to sync all
                                If p IsNot Nothing Then
                                    Dim imgToUse As Diamond.Common.Objects.Policy.Image = Nothing
                                    If newImg IsNot Nothing Then
                                        imgToUse = newImg
                                    Else
                                        imgToUse = img
                                    End If
                                    Dim successfullySynced As Boolean = QQxml.DiamondService_SuccessfullySyncedImageWithPackagePart(imgToUse, p, newImg:=newImg)
                                    If successfullySynced = True AndAlso newImg IsNot Nothing Then

                                    End If
                                End If
                            End If
                        Next
                    End If
                Case Else
                    If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 1 Then 'this assumes that the governing state part is the 2nd part... this won't work correctly for CPP since it will only bring back 1 lob part for the 1st state
                        If partsToSync = SyncType.DummyPart Then
                            If img.PackageParts.Item(1) IsNot Nothing AndAlso img.PackageParts.Item(1).LOB IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants.Count > 0 Then
                                'this is dummy packagePart w/ only the Applicants added
                                pp = New Diamond.Common.Objects.Policy.PackagePart
                                'pp.PackagePartTypeId = img.PackageParts.Item(1).PackagePartTypeId
                                pp.VersionId = img.PackageParts.Item(1).VersionId
                                'pp.PolicyId = img.PackageParts.Item(1).PolicyId
                                'pp.PolicyImageNum = img.PackageParts.Item(1).PolicyImageNum
                                If pp.LOB Is Nothing Then
                                    pp.LOB = New Diamond.Common.Objects.Policy.LOB
                                End If
                                If pp.LOB.RiskLevel Is Nothing Then
                                    pp.LOB.RiskLevel = New Diamond.Common.Objects.Policy.RiskLevel
                                End If
                                pp.LOB.RiskLevel.Applicants = img.PackageParts.Item(1).LOB.RiskLevel.Applicants
                            End If
                        Else
                            pp = img.PackageParts.Item(1) '"governingState" part for non-CPP LOBs
                        End If
                    End If
            End Select

            If pp IsNot Nothing Then
                Dim successfullySynced As Boolean = QQxml.DiamondService_SuccessfullySyncedImageWithPackagePart(img, pp, newImg:=newImg)
                If successfullySynced = True AndAlso newImg IsNot Nothing Then

                End If
            End If

            If newImg IsNot Nothing Then
                strAfterInfo = StringInfoForImagePackageParts(newImg, prefixToUseWhenInfoPresent:="After SyncType " & System.Enum.GetName(GetType(SyncType), partsToSync) & "... ")
                'when using "governingState" part: appears to at least be copying Applicants over correctly and Locations weren't messed up... need to check policy-level stuff (covs, etc.)
                'when using dummy part w/ only Applicants: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object.
                'when using dummy part w/ only Applicants and packagePartTypeId: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object. - error due to missing VersionId
                'when using dummy part w/ only Applicants, packagePartTypeId, VersionId, PolicyId, and PolicyImageNum (appears to just need VersionId): success on returning newImg... need to check newImg... looks okay... has applicants and didn't remove covs or locs
            End If
        End If
    End Sub
    Private Sub PerformTestSync_UpdateImage(ByRef img As Diamond.Common.Objects.Policy.Image, Optional ByVal partsToSync As QuickQuoteHelperClass.DiamondImageToPackagePartSyncType = QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.GoverningStatePart, Optional ByRef strBeforeInfo As String = "", Optional ByRef strAfterInfo As String = "")
        strBeforeInfo = ""
        strAfterInfo = ""

        If img IsNot Nothing Then
            Dim success As Boolean = False
            Dim pp As Diamond.Common.Objects.Policy.PackagePart = Nothing
            strBeforeInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="Before... ")

            Select Case partsToSync
                Case QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.AllParts, QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.AllPartsExceptMaster
                    If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 0 Then
                        Dim partCount As Integer = 0
                        For Each p As Diamond.Common.Objects.Policy.PackagePart In img.PackageParts
                            partCount += 1
                            If partCount > 1 OrElse partsToSync = QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.AllParts Then
                                'either non-master part or okay to sync all
                                If p IsNot Nothing Then
                                    Dim successfullySynced As Boolean = QQxml.SuccessfullySyncedAndUpdatedDiamondImageUsingPackagePart(img, p)
                                    If successfullySynced = True AndAlso img IsNot Nothing Then
                                        success = True
                                    End If
                                End If
                            End If
                        Next
                    End If
                Case Else
                    If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 1 Then 'this assumes that the governing state part is the 2nd part... this won't work correctly for CPP since it will only bring back 1 lob part for the 1st state
                        If partsToSync = QuickQuoteHelperClass.DiamondImageToPackagePartSyncType.DummyPart Then
                            If img.PackageParts.Item(1) IsNot Nothing AndAlso img.PackageParts.Item(1).LOB IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants IsNot Nothing AndAlso img.PackageParts.Item(1).LOB.RiskLevel.Applicants.Count > 0 Then
                                'this is dummy packagePart w/ only the Applicants added
                                pp = New Diamond.Common.Objects.Policy.PackagePart
                                'pp.PackagePartTypeId = img.PackageParts.Item(1).PackagePartTypeId
                                pp.VersionId = img.PackageParts.Item(1).VersionId
                                'pp.PolicyId = img.PackageParts.Item(1).PolicyId
                                'pp.PolicyImageNum = img.PackageParts.Item(1).PolicyImageNum
                                If pp.LOB Is Nothing Then
                                    pp.LOB = New Diamond.Common.Objects.Policy.LOB
                                End If
                                If pp.LOB.RiskLevel Is Nothing Then
                                    pp.LOB.RiskLevel = New Diamond.Common.Objects.Policy.RiskLevel
                                End If
                                pp.LOB.RiskLevel.Applicants = img.PackageParts.Item(1).LOB.RiskLevel.Applicants
                            End If
                        Else
                            pp = img.PackageParts.Item(1) '"governingState" part for non-CPP LOBs
                        End If
                    End If
            End Select

            If pp IsNot Nothing Then
                Dim successfullySynced As Boolean = QQxml.SuccessfullySyncedAndUpdatedDiamondImageUsingPackagePart(img, pp)
                If successfullySynced = True AndAlso img IsNot Nothing Then
                    success = True
                End If
            End If

            If img IsNot Nothing AndAlso success = True Then
                strAfterInfo = StringInfoForImagePackageParts(img, prefixToUseWhenInfoPresent:="After SyncType " & System.Enum.GetName(GetType(QuickQuoteHelperClass.DiamondImageToPackagePartSyncType), partsToSync) & "... ")
                'when using "governingState" part: appears to at least be copying Applicants over correctly and Locations weren't messed up... need to check policy-level stuff (covs, etc.)
                'when using dummy part w/ only Applicants: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object.
                'when using dummy part w/ only Applicants and packagePartTypeId: Exception in SynchronizePackagePolicy:Exception in SynchronizePackagePolicy:Exception in SynchronizePackageParts:Object reference not set to an instance of an object. - error due to missing VersionId
                'when using dummy part w/ only Applicants, packagePartTypeId, VersionId, PolicyId, and PolicyImageNum (appears to just need VersionId): success on returning newImg... need to check newImg... looks okay... has applicants and didn't remove covs or locs
            End If
        End If
    End Sub
    Private Function StringInfoForImagePackageParts(ByVal img As Diamond.Common.Objects.Policy.Image, Optional ByVal prefixToUseWhenInfoPresent As String = "Package Part Info... ") As String
        Dim str As String = ""
        If img IsNot Nothing Then
            If String.IsNullOrWhiteSpace(prefixToUseWhenInfoPresent) = True Then
                prefixToUseWhenInfoPresent = "Package Part Info... "
            End If
            str = prefixToUseWhenInfoPresent
            If img.PackageParts IsNot Nothing AndAlso img.PackageParts.Count > 0 Then
                str &= "total part count = " & img.PackageParts.Count.ToString
                Dim partCount As Integer = 0
                For Each p As Diamond.Common.Objects.Policy.PackagePart In img.PackageParts
                    partCount += 1
                    If p IsNot Nothing Then
                        str &= ";" & vbCrLf & " Part " & partCount.ToString & ": packagePartTypeId = " & p.PackagePartTypeId.ToString & ", versionId = " & p.VersionId.ToString & ", detailStatusCode" & p.DetailStatusCode.ToString
                        If p.LOB IsNot Nothing Then
                            If p.LOB.PolicyLevel IsNot Nothing Then
                                If p.LOB.PolicyLevel.Coverages IsNot Nothing Then
                                    str &= "," & vbCrLf & " -Coverage count = " & p.LOB.PolicyLevel.Coverages.Count.ToString
                                    If p.LOB.PolicyLevel.Coverages.Count > 0 Then
                                        Dim strCovs As String = ""
                                        For Each c As Diamond.Common.Objects.Coverage In p.LOB.PolicyLevel.Coverages
                                            If c IsNot Nothing Then
                                                strCovs = qqHelper.appendText(strCovs, c.CoverageCodeId.ToString & "|" & If(c.CoverageNum IsNot Nothing, c.CoverageNum.Id.ToString, "#x") & "|" & c.DetailStatusCode.ToString, ", ")
                                            Else
                                                strCovs = qqHelper.appendText(strCovs, "X", ", ")
                                            End If
                                        Next
                                        If String.IsNullOrWhiteSpace(strCovs) = False Then
                                            str &= " (" & strCovs & ")"
                                        End If
                                    End If
                                End If
                            End If
                            If p.LOB.RiskLevel IsNot Nothing Then
                                If p.LOB.RiskLevel.Applicants IsNot Nothing Then
                                    str &= "," & vbCrLf & " -Applicant count = " & p.LOB.RiskLevel.Applicants.Count.ToString
                                    If p.LOB.RiskLevel.Applicants.Count > 0 Then
                                        Dim strApps As String = ""
                                        For Each a As Diamond.Common.Objects.Policy.Applicant In p.LOB.RiskLevel.Applicants
                                            If a IsNot Nothing Then
                                                strApps = qqHelper.appendText(strApps, If(a.ApplicantNum IsNot Nothing, a.ApplicantNum.Id.ToString, "#x") & "|" & a.DetailStatusCode.ToString, ", ")
                                            Else
                                                strApps = qqHelper.appendText(strApps, "X", ", ")
                                            End If
                                        Next
                                        If String.IsNullOrWhiteSpace(strApps) = False Then
                                            str &= " (" & strApps & ")"
                                        End If
                                    End If
                                End If
                                If p.LOB.RiskLevel.Locations IsNot Nothing Then
                                    str &= "," & vbCrLf & " -Location count = " & p.LOB.RiskLevel.Locations.Count.ToString
                                    If p.LOB.RiskLevel.Locations.Count > 0 Then
                                        Dim strLocs As String = ""
                                        For Each l As Diamond.Common.Objects.Policy.Location In p.LOB.RiskLevel.Locations
                                            If l IsNot Nothing Then
                                                strLocs = qqHelper.appendText(strLocs, "stId:" & If(l.Address IsNot Nothing, l.Address.StateId.ToString, "x") & "|" & If(l.LocationNum IsNot Nothing, l.LocationNum.Id.ToString, "#x") & "|" & l.DetailStatusCode.ToString, ", ")
                                            Else
                                                strLocs = qqHelper.appendText(strLocs, "X", ", ")
                                            End If
                                        Next
                                        If String.IsNullOrWhiteSpace(strLocs) = False Then
                                            str &= " (" & strLocs & ")"
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next
            End If
        End If
        Return str
    End Function

    'added 1/17/2019
    Private Sub LatestMultiStateTesting()
        'TestMultiStateRating()

        'Dim sourceQuoteId As String = "271248" 'multiState CAP quote from Patch w/ 3 vehicles (IL, IL, IN)
        'Dim sourceQuoteId As String = "271471" 'CPR from Patch that doesn't want to load in VR; new quoteId = 271493
        'Dim newQuoteId As String = ""
        'Dim copyErrorMsg As String = ""
        'QQxml.CopyQuote(sourceQuoteId, newQuoteId, copyErrorMsg)
        'If qqHelper.IsPositiveIntegerString(newQuoteId) = True Then

        'End If

        'Dim qIdTest As String = "271462" 'multistate CAP quote from Patch saved w/ displayNums (copy of 271248)
        'Dim qIdTest As String = "271682" 'IL quote in multistate format - for testing master part location duplication 1/25/2019
        'Dim qIdTest As String = "271683" 'IL quote in multistate format - for testing master part location duplication 1/28/2019
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then

        'End If

        'testing issue w/ FAR Liability validations 1/28/2019 - Patch
        'Dim qIdTest As String = "271720" 'nothing set for Location.FormTypeId on 2nd state
        'Dim qqoTest As QuickQuoteObject = Nothing
        'Dim retrievalErrMsgTest As String = ""
        'qqoTest = TestReturnQuote(qIdTest, QuickQuoteXML.QuickQuoteSaveType.Quote, retrievalErrMsgTest)
        'If qqoTest IsNot Nothing Then
        '    Dim okayToSave As Boolean = False

        '    If qqoTest.Locations IsNot Nothing AndAlso qqoTest.Locations.Count > 1 AndAlso qqoTest.Locations(0) IsNot Nothing Then
        '        Dim locCounter As Integer = 0
        '        Dim loc1FormTypeId As String = qqoTest.Locations(0).FormTypeId
        '        If qqHelper.IsPositiveIntegerString(loc1FormTypeId) = True Then
        '            For Each l As QuickQuoteLocation In qqoTest.Locations
        '                locCounter += 1
        '                If l IsNot Nothing Then
        '                    If locCounter > 1 Then
        '                        If qqHelper.IsPositiveIntegerString(l.FormTypeId) = False Then
        '                            l.FormTypeId = loc1FormTypeId
        '                            okayToSave = True
        '                        End If
        '                    End If
        '                End If
        '            Next
        '        End If
        '    End If

        '    If okayToSave = True Then
        '        Dim saveErrorMsg As String = ""
        '        QQxml.SaveQuote(QuickQuoteXML.QuickQuoteSaveType.Quote, qqoTest, qIdTest, saveErrorMsg)
        '        If String.IsNullOrWhiteSpace(saveErrorMsg) = False Then

        '        End If
        '    End If
        'End If

        'Exit Sub
    End Sub
















    ''testing AgentPort Global 1/29/2019
    'Dim arPages As ArrayList
    'Dim arHits As ArrayList
    'Dim arTotalPages As ArrayList
    'Dim arTotalHits As ArrayList
    'Dim arCombinedPages As ArrayList
    'Dim arCombinedHits As ArrayList

    'Dim arUserIDs As ArrayList
    'Dim arUsers As ArrayList

    'Dim arChatIDs As ArrayList
    'Dim arChats As ArrayList
    'Dim arNewChatIDs As ArrayList
    'Dim arNewChatUserIDs As ArrayList
    'Dim arEndedChatIDs As ArrayList
    'Dim arEndedChatUserIDs As ArrayList
    'Dim arNewChatStaffGroups As ArrayList
    'Dim arNewStaffChatIDs As ArrayList

    'Dim PagesOkayForNonUpgradedUsers As Generic.List(Of String)

    'Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Code that runs on application startup

    '    EndChats()

    '    'write to log
    '    Application.Lock()
    '    WriteToLog("The application has started.")
    '    Application.UnLock()

    '    'clear out log files older than yesterday
    '    RemoveOldLogFiles()

    '    arPages = New ArrayList
    '    arHits = New ArrayList
    '    arPages.Clear()
    '    arHits.Clear()
    '    'add to cache
    '    Application.Add("arPages", arPages)
    '    Application.Add("arHits", arHits)

    '    arTotalPages = New ArrayList
    '    arTotalHits = New ArrayList
    '    arTotalPages.Clear()
    '    arTotalHits.Clear()
    '    'add to cache
    '    Application.Add("arTotalPages", arTotalPages)
    '    Application.Add("arTotalHits", arTotalHits)

    '    'add combined page hits to cache
    '    arCombinedPages = New ArrayList
    '    arCombinedHits = New ArrayList
    '    arCombinedPages.Clear()
    '    arCombinedHits.Clear()
    '    Application.Add("arCombinedPages", arCombinedPages)
    '    Application.Add("arCombinedHits", arCombinedHits)

    '    'load total page hits from text file
    '    LoadTotalPageHits()

    '    'add current session (user) count, page hits, and restart time to application cache
    '    Application.Add("CurrentSessions", 0)
    '    Application.Add("PageHits", 0)
    '    Application.Add("LastRestart", Date.Now)

    '    Application.Add("SessionIDs", 0)
    '    arUserIDs = New ArrayList
    '    arUsers = New ArrayList
    '    arUserIDs.Clear()
    '    arUsers.Clear()
    '    Application.Add("arUserIDs", arUserIDs)
    '    Application.Add("arUsers", arUsers)

    '    Application.Add("ChatIDs", 0)
    '    arChatIDs = New ArrayList
    '    arChats = New ArrayList
    '    arChatIDs.Clear()
    '    arChats.Clear()
    '    Application.Add("arChatIDs", arChatIDs)
    '    Application.Add("arChats", arChats)
    '    arNewChatIDs = New ArrayList
    '    arNewChatUserIDs = New ArrayList
    '    arEndedChatIDs = New ArrayList
    '    arEndedChatUserIDs = New ArrayList
    '    arNewChatStaffGroups = New ArrayList
    '    arNewStaffChatIDs = New ArrayList
    '    arNewChatIDs.Clear()
    '    arNewChatUserIDs.Clear()
    '    arEndedChatIDs.Clear()
    '    arEndedChatUserIDs.Clear()
    '    arNewChatStaffGroups.Clear()
    '    arNewStaffChatIDs.Clear()
    '    Application.Add("arNewChatIDs", arNewChatIDs)
    '    Application.Add("arNewChatUserIDs", arNewChatUserIDs)
    '    Application.Add("arEndedChatIDs", arEndedChatIDs)
    '    Application.Add("arEndedChatUserIDs", arEndedChatUserIDs)
    '    Application.Add("arNewChatStaffGroups", arNewChatStaffGroups)
    '    Application.Add("arNewStaffChatIDs", arNewStaffChatIDs)

    '    PagesOkayForNonUpgradedUsers = New Generic.List(Of String)
    '    PagesOkayForNonUpgradedUsers.Clear()
    '    If ConfigurationSettings.AppSettings("PagesOkayForNonUpgradedUsers") IsNot Nothing AndAlso ConfigurationSettings.AppSettings("PagesOkayForNonUpgradedUsers") <> "" Then
    '        Dim arOkayPages As String()
    '        arOkayPages = Split(ConfigurationSettings.AppSettings("PagesOkayForNonUpgradedUsers").ToString, ",")
    '        For Each pg As String In arOkayPages
    '            pg = Trim(pg)
    '            If pg <> "" Then
    '                PagesOkayForNonUpgradedUsers.Add(pg)
    '            End If
    '        Next
    '    End If
    '    Application.Add("PagesOkayForNonUpgradedUsers", PagesOkayForNonUpgradedUsers)

    '    'added 2/2/2015; in patch 2/17/2015; in prod 2/25/2015
    '    Diamond.Web.BaseControls.RouteConfiguration.RegisterRoutes()
    '    'added 6/2/2014 for 527; in patch 8/18/2014; in prod 9/5/2014
    '    If Not Diamond.Web.BaseControls.ComposerCommon.IsComposerSystem Then
    '        Diamond.Common.Services.Proxies.ProxyBase.SecurityTokenProvider = New Diamond.Common.Services.StaticStorageSecurityTokenProvider
    '        Diamond.Common.Services.Proxies.ProxyBase.DiamondSecurityToken = New Diamond.Common.Services.DiamondSecurityToken("userid", 1, 1, 1, New DateTime(&H7E0E8A3F8CA4000), New DateTime(&H9313F7A99DB0000))
    '        Try
    '            Dim request As New Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Request
    '            Dim VBt_refL0 As Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.RequestData = request.RequestData 'VB$t_ref$L0
    '            Dim location As String = IO.Path.GetDirectoryName(Reflection.Assembly.GetExecutingAssembly.Location)
    '            Dim baseUIVersion As Diamond.Common.Objects.AssemblyVersionInfo = Diamond.Common.Utility.DevelopUtils.GetVersionInfo(IO.Path.Combine(Me.Server.MapPath("~/bin"), "Diamond.dll"))
    '            If (Not baseUIVersion Is Nothing) Then
    '                VBt_refL0.BaseUIVersion = baseUIVersion.Version
    '                VBt_refL0.CompanyUIVersion = baseUIVersion.Version
    '            End If
    '            VBt_refL0 = Nothing
    '            Dim response As Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.Response = Nothing
    '            Using proxy As Diamond.Common.Services.Proxies.VersionServiceProxy = New Diamond.Common.Services.Proxies.VersionServiceProxy
    '                response = proxy.CheckSystemVersions(request)
    '            End Using
    '            If response IsNot Nothing AndAlso response.ResponseData IsNot Nothing AndAlso response.ResponseData.Success = True Then
    '                Dim VBt_refL1 As Diamond.Common.Services.Messages.VersionService.CheckSystemVersions.ResponseData = response.ResponseData 'VB$t_ref$L1
    '                Diamond.UI.Utility.Version.CacheVersionInformation(VBt_refL1.BusinessServerName, VBt_refL1.DatabaseServerName, VBt_refL1.DatabaseName, VBt_refL1.CurrentVersionInformation)
    '                VBt_refL1 = Nothing
    '            End If
    '        Catch ex As Exception 'added 9/6/2014
    '            'just in case there's an error

    '        Finally
    '            Diamond.Common.Services.Proxies.ProxyBase.DiamondSecurityToken = Nothing
    '            Diamond.Common.Services.Proxies.ProxyBase.SecurityTokenProvider = New Diamond.Common.Services.SessionStorageSecurityTokenProvider
    '        End Try
    '    End If
    'End Sub

    'Sub Application_End(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Code that runs on application shutdown

    '    EndChats()

    '    'combine current totals with overall totals
    '    UpdateTotalPageHits(False)
    '    'load current hits into temp db table
    '    InsertCurrentHits()

    '    'get rid of application cache variables
    '    Application("CurrentSessions") = Nothing
    '    Application("PageHits") = Nothing
    '    Application("LastRestart") = Nothing
    '    Application("arPages") = Nothing
    '    Application("arHits") = Nothing
    '    Application("arTotalPages") = Nothing
    '    Application("arTotalHits") = Nothing
    '    Application("arCombinedPages") = Nothing
    '    Application("arCombinedHits") = Nothing
    '    Application("SinceDate") = Nothing

    '    Application("SessionIDs") = Nothing
    '    Application("arUserIDs") = Nothing
    '    Application("arUsers") = Nothing

    '    Application("ChatIDs") = Nothing
    '    Application("arChatIDs") = Nothing
    '    Application("arChats") = Nothing
    '    Application("arNewChatIDs") = Nothing
    '    Application("arNewChatUserIDs") = Nothing
    '    Application("arEndedChatIDs") = Nothing
    '    Application("arEndedChatUserIDs") = Nothing
    '    Application("arNewChatStaffGroups") = Nothing
    '    Application("arNewStaffChatIDs") = Nothing

    '    Application("PagesOkayForNonUpgradedUsers") = Nothing
    '    Application.RemoveAll()

    '    'write to log
    '    Application.Lock()
    '    WriteToLog("The application has ended.")
    '    Application.UnLock()

    'End Sub

    'Sub Application_Error(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Code that runs when an unhandled error occurs
    '    Dim appException As System.Exception = Server.GetLastError()
    '    Dim errMessage As String = ""
    '    Dim errDetails As String = ""
    '    If appException Is Nothing Then
    '        errMessage = "Error could not be identified."
    '        'errDetails = ""
    '    Else
    '        errMessage = appException.GetBaseException().Message.ToString()
    '        errDetails = appException.GetBaseException().StackTrace.ToString()
    '    End If

    '    Dim ErrorPage As String = ""
    '    If Request Is Nothing Then
    '        ErrorPage = "URL unknown:  request unavailable"
    '    Else
    '        ErrorPage = Request.Url.AbsoluteUri
    '    End If

    '    'set error session variables
    '    If System.Web.HttpContext.Current IsNot Nothing AndAlso System.Web.HttpContext.Current.Session IsNot Nothing Then 'added 6/10/2013
    '        System.Web.HttpContext.Current.Session("LastErrorPage") = ErrorPage
    '        System.Web.HttpContext.Current.Session("LastErrorTime") = System.DateTime.Now.ToString
    '        System.Web.HttpContext.Current.Session("LastErrorMessage") = errMessage
    '        System.Web.HttpContext.Current.Session("LastErrorDetails") = errDetails
    '    End If
    '    'check for caching error
    '    If (InStr(UCase(errMessage), "UNABLE TO VALIDATE DATA") > 0) Or (InStr(UCase(errMessage), "ALLOWCUSTOMPAGING MUST BE TRUE") > 0) Or (InStr(UCase(errMessage), "BASE-64") > 0) Or (InStr(UCase(errMessage), "INVALID POSTBACK OR CALLBACK ARGUMENT") > 0) Then
    '        'Dim ErrorPage As String = ""
    '        'ErrorPage = Request.Url.AbsoluteUri
    '        If InStr(ErrorPage, "cachepage=no") > 0 Then
    '            'this error has already been caught twice-don't do anything to handle
    '        ElseIf InStr(ErrorPage, "cache=no") > 0 Then
    '            'this error has already been caught (try handling one more time)
    '            Server.ClearError()
    '            If InStr(ErrorPage, "?") > 0 Then
    '                'there is already a query string
    '                Response.Redirect(ErrorPage & "&cachepage=no")
    '            Else
    '                'no query string yet
    '                Response.Redirect(ErrorPage & "?cachepage=no")
    '            End If
    '        Else
    '            Server.ClearError()
    '            If InStr(ErrorPage, "?") > 0 Then
    '                'there is already a query string
    '                Response.Redirect(ErrorPage & "&cache=no")
    '            Else
    '                'no query string yet
    '                Response.Redirect(ErrorPage & "?cache=no")
    '            End If
    '        End If
    '    ElseIf InStr(UCase(errMessage), "INCORRECT SYNTAX NEAR '='.") > 0 Then
    '        'should handle for timeout issues by allowing forms authentication to redirect to login page
    '        Server.ClearError()
    '        Response.Redirect("alogin.aspx?ReturnURL=" & ErrorPage)
    '    End If

    '    If appException IsNot Nothing AndAlso (TypeOf (appException) Is HttpException) Then
    '        Dim checkException As HttpException = CType(appException, HttpException)
    '        Dim errCode As Integer = checkException.GetHttpCode

    '        'write to log
    '        Application.Lock()
    '        WriteToLog("The application has encountered a " & errCode & " error.  (current sessions = " & Application("CurrentSessions").ToString & ")")
    '        Application.UnLock()

    '        Select Case errCode
    '            Case 404 '-not found
    '                'leave error so web.config picks it up
    '            Case 403 '-not authorized
    '                'leave error so web.config picks it up
    '            Case 408 '-request timeout
    '                'leave error so web.config picks it up
    '            Case 503 '-busy w/ processing
    '                'leave error so web.config picks it up
    '            Case 999 '-Diamond user
    '                'leave error so web.config picks it up
    '            Case 998 '-pilot testing
    '                'leave error so web.config picks it up
    '            Case Else

    '                If System.Web.HttpContext.Current IsNot Nothing AndAlso System.Web.HttpContext.Current.Session IsNot Nothing Then 'added 6/10/2013
    '                    If (UCase(System.Web.HttpContext.Current.Session("username")) = "ITSTAFF") And (UCase(System.Web.HttpContext.Current.Session("auth")) = "U") Then
    '                        'let IT staff see error info from page instead of sending email
    '                    ElseIf UCase(errMessage).Contains(UCase("The error code is 0x80070057")) = True AndAlso (UCase(errMessage).Contains(UCase("An error occurred while communicating with the remote host")) = True OrElse UCase(errMessage).Contains(UCase("The remote host closed the connection")) = True) Then
    '                        'ignore
    '                    Else
    '                        'send email
    '                        SendErrorEmail(appException)
    '                    End If
    '                Else
    '                    SendErrorEmail(appException)
    '                    Response.Redirect("AgentsOnlyErrorPage.aspx") 'since Server.Transfer fails
    '                End If

    '                Server.ClearError()

    '                'send user to custom error page
    '                If InStr(UCase(errMessage), "PAYGATEWAY") > 0 Then
    '                    'handle for Paradata errors
    '                    Server.Transfer("AgentsOnlyErrorPage.aspx?error=PayGateWay")
    '                Else
    '                    Server.Transfer("AgentsOnlyErrorPage.aspx")
    '                End If
    '        End Select
    '    Else
    '        'write to log
    '        Application.Lock()
    '        WriteToLog("The application has encountered an unexpected error.  (current sessions = " & Application("CurrentSessions").ToString & ")")
    '        Application.UnLock()

    '        If System.Web.HttpContext.Current IsNot Nothing AndAlso System.Web.HttpContext.Current.Session IsNot Nothing Then 'added 6/10/2013
    '            If (UCase(System.Web.HttpContext.Current.Session("username")) = "ITSTAFF") And (UCase(System.Web.HttpContext.Current.Session("auth")) = "U") Then
    '                'let IT staff see error info from page instead of sending email	    
    '            ElseIf UCase(errMessage).Contains(UCase("The error code is 0x80070057")) = True AndAlso (UCase(errMessage).Contains(UCase("An error occurred while communicating with the remote host")) = True OrElse UCase(errMessage).Contains(UCase("The remote host closed the connection")) = True) Then
    '                'ignore
    '            Else
    '                'send email
    '                SendErrorEmail(appException)
    '            End If
    '        Else
    '            SendErrorEmail(appException)
    '            Response.Redirect("AgentsOnlyErrorPage.aspx") 'since Server.Transfer fails
    '        End If

    '        Server.ClearError()

    '        'send user to custom error page
    '        If InStr(UCase(errMessage), "PAYGATEWAY") > 0 Then
    '            'handle for Paradata errors
    '            Server.Transfer("AgentsOnlyErrorPage.aspx?error=PayGateWay")
    '        Else
    '            Server.Transfer("AgentsOnlyErrorPage.aspx")
    '        End If
    '    End If

    'End Sub

    'Sub Session_Start(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Code that runs when a new session is started

    '    'increment user count
    '    Application.Lock()
    '    Application("CurrentSessions") = CInt(Application("CurrentSessions")) + 1

    '    Application("SessionIDs") = CInt(Application("SessionIDs")) + 1
    '    System.Web.HttpContext.Current.Session("SessionID") = Application("SessionIDs")
    '    Application.UnLock()

    '    'If session times out before authentication ticket, dispose ticket
    '    If User.Identity.IsAuthenticated = True Then
    '        Response.Cookies("login").Expires = DateAdd(DateInterval.Year, -5, Date.Today)
    '        FormsAuthentication.SignOut()
    '        Response.Redirect("alogin.aspx?ReturnURL=" & Request.Url.AbsoluteUri) 'Request.FilePath)
    '    End If
    'End Sub

    'Sub Session_End(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Code that runs when a session ends. 
    '    ' Note: The Session_End event is raised only when the sessionstate mode
    '    ' is set to InProc in the Web.config file. If session mode is set to StateServer 
    '    ' or SQLServer, the event is not raised.

    '    'decrement user count
    '    Application.Lock()
    '    Application("CurrentSessions") = CInt(Application("CurrentSessions")) - 1
    '    Application.UnLock()

    '    If Session("SessionID") IsNot Nothing Then 'System.Web.HttpContext.Current.Session("SessionID") IsNot Nothing Then
    '        arUserIDs = Application("arUserIDs")
    '        If arUserIDs.Contains(Session("SessionID")) = True Then 'System.Web.HttpContext.Current.Session("SessionID")) = True Then
    '            Application.Lock()
    '            arUserIDs = Application("arUserIDs")
    '            arUsers = Application("arUsers")
    '            Dim index As Integer = arUserIDs.IndexOf(Session("SessionID")) 'System.Web.HttpContext.Current.Session("SessionID"))
    '            arUserIDs.RemoveAt(index)
    '            arUsers.RemoveAt(index)
    '            Application.UnLock()
    '        End If

    '        If IsNumeric(Session("SessionID")) = True AndAlso Session("UserChatIDs") IsNot Nothing Then
    '            EndChats(Session("SessionID"))

    '            Dim userChatIDs As ArrayList = Session("UserChatIDs")
    '            Dim holdIndex As Integer = 0
    '            Dim holdChatID As Integer = 0
    '            arNewStaffChatIDs = Application("arNewStaffChatIDs")
    '            For i As Integer = 0 To userChatIDs.Count - 1
    '                holdChatID = userChatIDs.Item(i)
    '                If arNewChatIDs.Contains(holdChatID) Then
    '                    Application.Lock()
    '                    arChatIDs = Application("arChatIDs")
    '                    arChats = Application("arChats")
    '                    arNewChatStaffGroups = Application("arNewChatStaffGroups")
    '                    arNewStaffChatIDs = Application("arNewStaffChatIDs")

    '                    holdIndex = arNewStaffChatIDs.IndexOf(holdChatID)
    '                    arNewStaffChatIDs.RemoveAt(holdIndex)
    '                    arNewChatStaffGroups.RemoveAt(holdIndex)
    '                    holdIndex = arChatIDs.IndexOf(holdChatID)
    '                    arChatIDs.RemoveAt(holdIndex)
    '                    arChats.RemoveAt(holdIndex)
    '                    Application.UnLock()
    '                End If
    '            Next
    '            userChatIDs.Clear()
    '            userChatIDs = Nothing
    '            holdIndex = Nothing
    '            holdChatID = Nothing
    '        End If
    '    End If

    '    If Application("CurrentSessions") = 0 Then
    '        'combine current totals with overall totals
    '        UpdateTotalPageHits(True)
    '        'load current hits into temp db table
    '        InsertCurrentHits()
    '    End If
    'End Sub

    'Sub Application_BeginRequest(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Fires at the beginning of each request
    '    ' This sub is called any time a browser request a page in the application

    '    'rewrite all requests when database is down (AgentsOnly)
    '    RedirectAllRequests() 'un-commented 9/4/2014

    '    If Request IsNot Nothing Then
    '        'added 1/29/2019; note: doesn't appear to do anything here if SSL is required on site
    '        'Dim pageUrl As String = ""
    '        'If Request.Url IsNot Nothing Then
    '        '    pageUrl = Request.Url.AbsoluteUri
    '        'End If
    '        'If String.IsNullOrWhiteSpace(pageUrl) = False Then
    '        '    If Len(pageUrl) >= 5 AndAlso Left(UCase(pageUrl), 5) = "HTTP:" Then
    '        '        Response.Redirect("https:" & Right(pageUrl, Len(pageUrl) - 5))
    '        '    End If
    '        'End If

    '        If Request.Headers("X-MicrosoftAjax") IsNot Nothing AndAlso Request.Headers("X-MicrosoftAjax") = "Delta=true" Then
    '            'ignore AJAX postback
    '        Else
    '            'add page to array or increment page hits
    '            arPages = Application("arPages")
    '            arHits = Application("arHits")
    '            arCombinedPages = Application("arCombinedPages")
    '            arCombinedHits = Application("arCombinedHits")

    '            Dim RequestPage As String = UCase(Request.ServerVariables("SCRIPT_NAME"))
    '            If (RequestPage.IndexOf(".ASPX", 1) > 0) Then
    '                'only keep track of .aspx files
    '                'increment current hits
    '                If arPages Is Nothing OrElse arHits Is Nothing Then 'added 1/29/2019
    '                    arPages = New ArrayList
    '                    arHits = New ArrayList
    '                End If
    '                If arPages.Contains(RequestPage) = False Then
    '                    arPages.Add(RequestPage)
    '                    arHits.Add(1)
    '                Else
    '                    Dim index As Integer = arPages.IndexOf(RequestPage)
    '                    'arHits.Item(index) = CInt(arHits.Item(index)) + 1
    '                    'updated 1/29/2019
    '                    If arHits IsNot Nothing AndAlso arHits.Count >= index + 1 Then
    '                        Dim hitsForIndex As Integer = 0
    '                        If IsNumeric(arHits.Item(index).ToString) = True Then
    '                            hitsForIndex = CInt(arHits.Item(index).ToString)
    '                        End If
    '                        arHits.Item(index) = hitsForIndex + 1
    '                    End If
    '                End If
    '                'increment combined hits
    '                If arCombinedPages Is Nothing OrElse arCombinedHits Is Nothing Then 'added 1/29/2019
    '                    arCombinedPages = New ArrayList
    '                    arCombinedHits = New ArrayList
    '                End If
    '                If arCombinedPages.Contains(RequestPage) = False Then
    '                    arCombinedPages.Add(RequestPage)
    '                    arCombinedHits.Add(1)
    '                Else
    '                    Dim index As Integer = arCombinedPages.IndexOf(RequestPage)
    '                    'arCombinedHits.Item(index) = CInt(arCombinedHits.Item(index)) + 1
    '                    'updated 1/29/2019
    '                    If arCombinedHits IsNot Nothing AndAlso arCombinedHits.Count >= index + 1 Then
    '                        Dim hitsForIndex As Integer = 0
    '                        If IsNumeric(arCombinedHits.Item(index).ToString) = True Then
    '                            hitsForIndex = CInt(arCombinedHits.Item(index).ToString)
    '                        End If
    '                        arCombinedHits.Item(index) = hitsForIndex + 1
    '                    End If
    '                End If

    '                'increment page hits
    '                Application.Lock()
    '                Application("PageHits") = CInt(Application("PageHits")) + 1
    '                Application("arPages") = arPages
    '                Application("arHits") = arHits
    '                Application("arCombinedPages") = arCombinedPages
    '                Application("arCombinedHits") = arCombinedHits
    '                Application.UnLock()

    '            End If
    '        End If

    '        '--test URL rewriting
    '        Dim testURL As String = UCase(Request.ServerVariables("URL").ToString)
    '        If testURL.Contains("THISISTEST") Then
    '            'Context.RewritePath("http://ifmwebtest/")
    '            System.Web.HttpContext.Current.RewritePath("agents.aspx")
    '        End If
    '        If testURL.Contains("HOME.ASPX") AndAlso testURL.Contains("CROSSSELLINGHOME.ASPX") = False AndAlso testURL.Contains("QUICKQUOTEHOME.ASPX") = False AndAlso testURL.Contains("VR3HOME.ASPX") = False Then 'updated 7/30/2014 to also include VR3HOME
    '            'if System.Web.HttpContext.Current.Session("LastControlLoaderPage") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("LastControlLoaderPage") <> "" then
    '            'System.Web.HttpContext.Current.ReWritePath(System.Web.HttpContext.Current.Session("LastControlLoaderPage"))
    '            'else
    '            'System.Web.HttpContext.Items("RedirectToDiamond") = "TRUE"
    '            'System.Web.HttpContext.Current.ReWritePath("agents.aspx")
    '            'System.Web.HttpContext.Current.ReWritePath("Controlloader.aspx?QueryString=PolicySearch") 'commented 7/22/2016 for 531 (originally 1/29/2016 on Projects)
    '            'end if
    '        End If
    '    End If

    'End Sub


    'Sub Application_PreRequestHandlerExecute(ByVal sender As Object, ByVal e As EventArgs)
    '    'limit access to some pages        
    '    Dim RequestPage As String = UCase(Request.ServerVariables("SCRIPT_NAME"))
    '    Dim authType As String = ""
    '    Dim agencyCode As String = ""
    '    Dim agencyID As String = ""
    '    Dim userName As String = ""
    '    Dim DiamondUserName As String = ""
    '    Dim FullName As String = ""
    '    Dim shouldUpgradeToDiamond As Boolean = False

    '    If (RequestPage.IndexOf(".ASPX", 1) > 0) Then
    '        authType = System.Web.HttpContext.Current.Session("auth")
    '        agencyCode = System.Web.HttpContext.Current.Session("agencyCode")
    '        agencyID = System.Web.HttpContext.Current.Session("agencyID")
    '        userName = System.Web.HttpContext.Current.Session("username")

    '        If System.Web.HttpContext.Current.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondUsername") <> "" Then
    '            DiamondUserName = System.Web.HttpContext.Current.Session("DiamondUsername")
    '        End If
    '        If System.Web.HttpContext.Current.Session("FullName") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("FullName") <> "" Then
    '            FullName = System.Web.HttpContext.Current.Session("FullName")
    '        End If

    '        If System.Web.HttpContext.Current.Session("shouldUpgradeToDiamond") IsNot Nothing AndAlso UCase(System.Web.HttpContext.Current.Session("shouldUpgradeToDiamond")) = "YES" Then
    '            shouldUpgradeToDiamond = True
    '        End If

    '        arUserIDs = Application("arUserIDs")
    '        If arUserIDs.Contains(System.Web.HttpContext.Current.Session("SessionID")) = False AndAlso (userName <> "" OrElse DiamondUserName <> "") AndAlso agencyCode <> "" Then
    '            Dim au As New AgentsOnlyGlobal.ActiveUser(System.Web.HttpContext.Current.Session("SessionID"))
    '            au.DiamondUserName = DiamondUserName
    '            au.LegacyUserName = userName
    '            au.AgencyCode = agencyCode
    '            au.AuthType = authType
    '            au.LoginTime = Date.Now
    '            au.FullName = FullName
    '            Application.Lock()
    '            arUserIDs = Application("arUserIDs")
    '            arUsers = Application("arUsers")
    '            arUserIDs.Add(System.Web.HttpContext.Current.Session("SessionID"))
    '            arUsers.Add(au)
    '            Application("arUserIDs") = arUserIDs
    '            Application("arUsers") = arUsers
    '            Application.UnLock()
    '        End If

    '        'added 8/2/2016 to redirect AgentsOnly FNOL if needed
    '        If (RequestPage.Contains("FNOLSELECTION.ASPX") OrElse RequestPage.Contains("TS_FNOL.ASPX")) AndAlso System.Web.HttpContext.Current.Session("OkayForFNOL") Is Nothing Then
    '            If System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectAllRequests") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectAllRequests").ToString <> "" AndAlso UCase(System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectAllRequests").ToString) = "YES" Then
    '                Dim okayForFnolFlag As Boolean = False
    '                For Each key As String In Request.QueryString
    '                    If UCase(key).Contains("OKAYFORFNOL") = True Then
    '                        okayForFnolFlag = True
    '                        System.Web.HttpContext.Current.Session("OkayForFNOL") = "yes"
    '                    End If
    '                Next
    '                If okayForFnolFlag = False Then
    '                    Dim fnolRedirectPage As String = "https://agent.indianafarmers.com/AgentsOnlyCommonErrors.aspx?error=404" 'updated 1/24/2019 for AgentPort
    '                    If System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectURL") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectURL").ToString <> "" Then
    '                        fnolRedirectPage = System.Configuration.ConfigurationManager.AppSettings("AgentsOnlyFNOL_RedirectURL").ToString
    '                    End If
    '                    Response.Redirect(fnolRedirectPage)
    '                End If
    '            End If
    '        End If

    '        If RequestPage.Contains("CONTROLLOADER.ASPX") Then
    '            System.Web.HttpContext.Current.Session("LastControlLoaderPage") = RequestPage
    '            'elseif RequestPage.Contains("AGENTS.ASPX") AndAlso System.Web.HttpContext.Items("RedirectToDiamond") IsNot Nothing AndAlso System.Web.HttpContext.Items("RedirectToDiamond") = "TRUE" AndAlso System.Web.HttpContext.Current.Session("LastControlLoaderPage") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("LastControlLoaderPage") <> "" then
    '            'dim ControlloaderPage as string = System.Web.HttpContext.Current.Session("LastControlLoaderPage")
    '            'System.Web.HttpContext.Current.Session("LastControlLoaderPage") = Nothing
    '            'System.Web.HttpContext.Items("RedirectToDiamond") = Nothing
    '            'System.Web.HttpContext.Current.ReWritePath(ControlloaderPage)

    '            'restrict access (3/12/2013 problems)
    '            'IF UCase(authType) <> "U" AndAlso UCASE(DiamondUserName) <> "TESTNXTECH2" THEN
    '            'Throw New HttpException(403, "Not Authorized")
    '            'END IF

    '            'added 3/28/2016 for Comparative Rater Redirect; moved here 5/11/2016 from BeginRequest (date here is go-live date for everybody... will likely be in the past for test and future for prod; UAT date is checked in IsCompRaterUATTester function)
    '            If DateTime.Now > DateTime.Parse("6/21/2016 18:00") OrElse (Session("DiamondUserId") IsNot Nothing AndAlso Session("DiamondUserId").ToString().Trim() = "3033") Then ' Matt A - 4-29-16
    '                Dim isCompRater As Boolean = False
    '                Dim diaIntegrationToken As String = ""
    '                isCompRater = IsComparativeRaterBridgeOverURL(diaIntegrationToken)
    '                If isCompRater = True AndAlso String.IsNullOrWhiteSpace(diaIntegrationToken) = False Then
    '                    'System.Web.HttpContext.Current.RewritePath("MyVelociRater.aspx?diaIntegrationToken=" & diaIntegrationToken) 'note: not loading page styles when rewriting path; may need to use Response.Redirect
    '                    Response.Redirect("~/MyVelociRater.aspx?diaIntegrationToken=" & diaIntegrationToken)
    '                End If
    '            End If
    '        End If

    '        'added 10/10/2018 for AgentPort
    '        CheckForNewSiteRedirects(requestedUrl:=RequestPage)

    '    End If

    '    'If System.Web.HttpContext.Current.Session("agencyCode") Is Nothing Then
    '    '    Response.Cookies("login").Expires = DateAdd(DateInterval.Year, -5, Date.Today)
    '    '    FormsAuthentication.SignOut()
    '    '    If Not InStr(RequestPage, "ALOGIN.ASPX") > 0 Then
    '    '        Response.Redirect("alogin.aspx?returnurl=agents.aspx")
    '    '    End If
    '    'End If

    '    If agencyCode = "9999" And agencyID <> "411" Then '(UCase(userName) = "ITSTAFF" Or agencyID = "411") = False Then
    '        Dim HomeOfficePages As New ArrayList
    '        HomeOfficePages.Add("MYPOLICYHOLDERS05.ASPX")
    '        HomeOfficePages.Add("DECLARATIONS05.ASPX")
    '        HomeOfficePages.Add("EXPIRATIONS.ASPX")
    '        HomeOfficePages.Add("LOSTPOLICIES.ASPX")
    '        HomeOfficePages.Add("OPENCLAIMS.ASPX")
    '        HomeOfficePages.Add("RECENTCLAIMS.ASPX")
    '        HomeOfficePages.Add("CLAIMSHISTORY.ASPX")
    '        HomeOfficePages.Add("CLOSEDCLAIMS.ASPX")
    '        HomeOfficePages.Add("CLAIMSSUMMARY.ASPX")
    '        HomeOfficePages.Add("CLAIMSSEARCH.ASPX")
    '        HomeOfficePages.Add("POLICYPAYMENTS.ASPX")
    '        HomeOfficePages.Add("EFTHISTSELECT.ASPX")
    '        HomeOfficePages.Add("CANCELLATIONLIST.ASPX")
    '        HomeOfficePages.Add("CANCELLATIONLISTONEDAY.ASPX")
    '        HomeOfficePages.Add("TODAYNOTICE.ASPX")
    '        HomeOfficePages.Add("ADVNOTICE.ASPX")
    '        HomeOfficePages.Add("PENDNEW.ASPX")
    '        HomeOfficePages.Add("PENDRENEWAL.ASPX")
    '        HomeOfficePages.Add("PENDQUOTE.ASPX")
    '        HomeOfficePages.Add("CROSSSELLINGHOME.ASPX")
    '        HomeOfficePages.Add("CROSSSELLINGAUTO.ASPX")
    '        HomeOfficePages.Add("YOUTHFULDRIVER.ASPX")
    '        HomeOfficePages.Add("RENEWALTIERS.ASPX")
    '        HomeOfficePages.Add("POLICYINQUIRY.ASPX")
    '        HomeOfficePages.Add("POLICYIMAGEHISTORY.ASPX")
    '        HomeOfficePages.Add("POLICYTRANSACTIONS.ASPX") 'added 5/28/2015

    '        Dim pageIndex As Integer = 0
    '        For pageIndex = 0 To HomeOfficePages.Count - 1
    '            If InStr(RequestPage, HomeOfficePages.Item(pageIndex).ToString) > 0 Then
    '                'restrict access
    '                Throw New HttpException(403, "Not Authorized")
    '            End If
    '        Next

    '        If Not HomeOfficePages Is Nothing Then
    '            HomeOfficePages.Clear()
    '            HomeOfficePages = Nothing
    '        End If
    '    End If

    '    If DiamondUserName = "" AndAlso shouldUpgradeToDiamond = True AndAlso Application("PagesOkayForNonUpgradedUsers") IsNot Nothing Then
    '        PagesOkayForNonUpgradedUsers = CType(Application("PagesOkayForNonUpgradedUsers"), Generic.List(Of String))
    '        If PagesOkayForNonUpgradedUsers IsNot Nothing AndAlso PagesOkayForNonUpgradedUsers.Count > 0 Then
    '            Dim IsOkay As Boolean = False
    '            For Each pg As String In PagesOkayForNonUpgradedUsers
    '                If InStr(RequestPage, UCase(pg)) > 0 Then
    '                    IsOkay = True
    '                    Exit For
    '                End If
    '            Next
    '            If IsOkay = False Then
    '                'restrict access
    '                Throw New HttpException(999, "Diamond User Error")
    '            End If
    '        End If
    '    End If

    '    If InStr(RequestPage, "AGENCYEX.ASPX") > 0 Then
    '        If UCase(authType) = "L" Or UCase(authType) = "R" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "AGENCYEXPDF.ASPX") > 0 Then
    '        If UCase(authType) = "L" Or UCase(authType) = "R" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "AGENCYSTATEMENT.ASPX") > 0 Then
    '        'If agencyCode <> "2926" AndAlso agencyCode <> "2189" AndAlso agencyCode <> "2591" AndAlso agencyCode <> "2730" AndAlso agencyCode <> "2835" AndAlso agencyCode <> "2705" AndAlso agencyCode <> "1001" Then 'agencyCode <> "2151" and agencyCode <> "2085" Then
    '        ''Throw New HttpException(403, "Not Authorized")
    '        'Throw New HttpException(998, "Pilot Testing")
    '        'End If
    '        'updated 4/30/2012
    '        If UCase(authType) = "L" OrElse UCase(authType) = "R" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "TRIPRESULTS.ASPX") > 0 Then
    '        If UCase(authType) = "R" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "COOPRESULTS.ASPX") > 0 Then
    '        If UCase(authType) = "R" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "AGENTSONLYSTATSPAGE.ASPX") > 0 Then
    '        If UCase(authType) <> "U" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "AGENCYSEARCH.ASPX") > 0 Then
    '        If UCase(authType) <> "U" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "THROWERROR.ASPX") > 0 Then
    '        If UCase(authType) <> "U" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '        'ElseIf InStr(RequestPage, "ADMIN.ASPX") > 0 Then
    '    ElseIf (InStr(RequestPage, "ADMIN.ASPX") > 0 OrElse InStr(RequestPage, "MODIFYUSER.ASPX") > 0 OrElse InStr(RequestPage, "DELETEUSER.ASPX") > 0 OrElse InStr(RequestPage, "USERFORM.ASPX") > 0 OrElse InStr(RequestPage, "USERFORM_UPDATE.ASPX") > 0 OrElse InStr(RequestPage, "UPDATEPAYMENT.ASPX") > 0) AndAlso (InStr(RequestPage, "NEWPUBLICSITEADMIN.ASPX") > 0) = False AndAlso (InStr(RequestPage, "DOCUMENTADMIN.ASPX") > 0) = False AndAlso (InStr(RequestPage, "NEWSUPDATESADMIN.ASPX") > 0) = False Then
    '        If UCase(authType) <> "A" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "CONTROLLOADER.ASPX") > 0 Then
    '        Dim pilotCodes As String = ""
    '        If System.Configuration.ConfigurationManager.AppSettings("portalPilotCodes") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("portalPilotCodes") <> "" Then
    '            pilotCodes = System.Configuration.ConfigurationManager.AppSettings("portalPilotCodes")
    '        End If
    '        'If (UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True)) = False Then
    '        'Throw New HttpException(998, "Pilot Testing")
    '        'End If
    '        If UCase(userName) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (System.Configuration.ConfigurationManager.AppSettings("allowAllCodesInPortal") IsNot Nothing AndAlso UCase(System.Configuration.ConfigurationManager.AppSettings("allowAllCodesInPortal")) = "YES") OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True) Then
    '            'okay
    '        Else
    '            Throw New HttpException(998, "Pilot Testing")
    '        End If
    '        If DiamondUserName = "" Then
    '            'restrict access
    '            Throw New HttpException(999, "Diamond User Error")
    '        End If
    '    ElseIf RequestPage.Contains("CLIENTWELCOME.ASPX") = True OrElse RequestPage.Contains("SAVEDQUOTES.ASPX") = True OrElse RequestPage.Contains("DIAMONDQUOTESUMMARY.ASPX") = True OrElse RequestPage.Contains("APPGAP.ASPX") = True OrElse RequestPage.Contains("DIAMONDQUICKQUOTEHOME.ASPX") = True Then
    '        If DiamondUserName = "" Then
    '            'restrict access
    '            Throw New HttpException(999, "Diamond User Error")
    '        End If
    '    ElseIf RequestPage.Contains("MYVELOCIRATER.ASPX") = True OrElse RequestPage.Contains("VR3AUTO.ASPX") = True OrElse RequestPage.Contains("VR3AUTOAPP.ASPX") = True OrElse RequestPage.Contains("VR3HOME.ASPX") = True OrElse RequestPage.Contains("VR3HOMEAPP.ASPX") = True Then
    '        'section added 7/30/2014 for VR Personal; removed pilot code restriction 8/11/2014
    '        'dim pilotCodes as string = "3000"
    '        'If UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True) Then
    '        ''okay
    '        'Else
    '        'Throw New HttpException(998, "Pilot Testing")
    '        'End If
    '        If DiamondUserName = "" Then
    '            'restrict access
    '            Throw New HttpException(999, "Diamond User Error")
    '        End If
    '    ElseIf InStr(RequestPage, "FNOLFAST.ASPX") > 0 Then
    '        Dim pilotCodes As String = ""
    '        If System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes") <> "" Then
    '            pilotCodes = System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes")
    '        End If
    '        'If (UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True)) = False Then
    '        'Throw New HttpException(998, "Pilot Testing")
    '        'End If
    '        If UCase(userName) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True) Then
    '            'okay
    '        Else
    '            Throw New HttpException(998, "Pilot Testing")
    '        End If
    '        If DiamondUserName = "" Then
    '            'restrict access
    '            Throw New HttpException(999, "Diamond User Error")
    '        End If
    '    ElseIf InStr(RequestPage, "AGENCYMANUALDRAFTS.ASPX") > 0 Then
    '        Dim pilotCodes As String = ""
    '        If System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes") <> "" Then
    '            pilotCodes = System.Configuration.ConfigurationManager.AppSettings("FastTrackPilotCodes")
    '        End If
    '        'If (UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True)) = False Then
    '        'Throw New HttpException(998, "Pilot Testing")
    '        'End If
    '        If UCase(userName) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True) Then
    '            'okay
    '        Else
    '            Throw New HttpException(998, "Pilot Testing")
    '        End If
    '    ElseIf InStr(RequestPage, "RCCAGENTACCOUNTLIST.ASPX") > 0 OrElse InStr(RequestPage, "RCCAGENTACCOUNTSETUP.ASPX") > 0 OrElse InStr(RequestPage, "RCCAGENTAGREEMENT.ASPX") Then
    '        If System.Configuration.ConfigurationManager.AppSettings("RCC_Disable") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("RCC_Disable") <> "" AndAlso System.Configuration.ConfigurationManager.AppSettings("RCC_Disable").Equals("True", StringComparison.OrdinalIgnoreCase) Then
    '            If UCase(userName) = "ITSTAFF" OrElse UCase(authType) = "U" Then
    '                'okay
    '            Else
    '                Throw New HttpException(998, "Pilot Testing")
    '            End If
    '        End If
    '    ElseIf InStr(RequestPage, "FNOLSELECTION.ASPX") > 0 Then ' OrElse InStr(RequestPage, "TS_FNOL.ASPX") > 0 OrElse InStr(RequestPage, "FNOLCONFIRM.ASPX") > 0 Then	    
    '        If DiamondUserName = "" Then
    '            'restrict access
    '            Throw New HttpException(999, "Diamond User Error")
    '        End If
    '        'ElseIf InStr(RequestPage, "AGENCYPRINTSUPPRESSION.ASPX") > 0 Then
    '        '    dim pilotCodes as string = ""
    '        '    If System.Configuration.ConfigurationManager.AppSettings("DiaPrintSuppressionPilotCodes") IsNot Nothing AndAlso System.Configuration.ConfigurationManager.AppSettings("DiaPrintSuppressionPilotCodes") <> "" then
    '        '    	pilotCodes = System.Configuration.ConfigurationManager.AppSettings("DiaPrintSuppressionPilotCodes")
    '        '    End If
    '        '    'If (UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True)) = False Then
    '        '	'Throw New HttpException(998, "Pilot Testing")
    '        '    'End If
    '        '    If UCase(username) = "ITSTAFF" OrElse UCase(authType) = "U" OrElse (agencyCode <> "" AndAlso pilotCodes.Contains(agencyCode) = True) Then
    '        '	'okay
    '        '    Else
    '        '	Throw New HttpException(998, "Pilot Testing")
    '        '    End If
    '    ElseIf InStr(RequestPage, "ACTIVEUSERS.ASPX") > 0 Then
    '        If UCase(authType) <> "U" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    ElseIf InStr(RequestPage, "ACTIVECHATS.ASPX") > 0 Then
    '        If UCase(authType) <> "U" Then
    '            'restrict access
    '            Throw New HttpException(403, "Not Authorized")
    '        End If
    '    End If
    '    'set session variable to reload specific pages from server
    '    Dim RefreshedPages As String = ""
    '    If (RequestPage.IndexOf(".ASPX", 1) > 0) Then
    '        RefreshedPages = System.Web.HttpContext.Current.Session("refreshedpages")

    '        If ((InStr(RequestPage, "POLICYPAYMENTS") > 0) Or (InStr(RequestPage, "MYPOLICYHOLDERS") > 0)) And (InStr(RefreshedPages, RequestPage) = 0) Then
    '            System.Web.HttpContext.Current.Session("refreshthispage") = "yes"
    '            If RefreshedPages <> "" Then
    '                System.Web.HttpContext.Current.Session("refreshedpages") = RefreshedPages & "," & RequestPage
    '            Else
    '                System.Web.HttpContext.Current.Session("refreshedpages") = RequestPage
    '            End If
    '        Else
    '            System.Web.HttpContext.Current.Session("refreshthispage") = "no"
    '        End If
    '    End If

    'End Sub

    'Sub Application_AuthenticateRequest(ByVal sender As Object, ByVal e As EventArgs)
    '    ' Fires upon attempting to authenticate the user       

    'End Sub

    'Sub SendErrorEmail(ByVal except As System.Exception)
    '    'Dim userName As String = System.Web.HttpContext.Current.Session("username") & " - " & System.Web.HttpContext.Current.Session("agencyCode")
    '    Dim userName As String = ""
    '    If System.Web.HttpContext.Current IsNot Nothing AndAlso System.Web.HttpContext.Current.Session IsNot Nothing Then 'added 6/10/2013
    '        If System.Web.HttpContext.Current.Session("DiamondUsername") IsNot Nothing AndAlso System.Web.HttpContext.Current.Session("DiamondUsername") <> "" Then
    '            userName = System.Web.HttpContext.Current.Session("DiamondUsername") & " (" & System.Web.HttpContext.Current.Session("username") & ") - " & System.Web.HttpContext.Current.Session("agencyCode")
    '        Else
    '            userName = System.Web.HttpContext.Current.Session("username") & " - " & System.Web.HttpContext.Current.Session("agencyCode")
    '        End If
    '    End If

    '    Try
    '        Dim objMail As New System.Web.Mail.MailMessage

    '        objMail.From = "AgentPortErrorReporting@IndianaFarmers.com"

    '        If UCase(ConfigurationSettings.AppSettings("TestOrProd")) = "TEST" Then
    '            objMail.To = "ITInternetSupport@IndianaFarmers.com"
    '            objMail.Subject = "Test:  AgentPort Error for " & userName
    '        Else
    '            'objMail.To = "ITInternetSupport@IndianaFarmers.com; ApplicationSupport@IndianaFarmers.com; diamondsupport@insuresoft.com"
    '            'updated 1/29/2019
    '            Dim toAddress As String = "ITInternetSupport@IndianaFarmers.com; ApplicationSupport@IndianaFarmers.com"
    '            Dim pageUrl As String = ""
    '            If Request IsNot Nothing AndAlso Request.Url IsNot Nothing Then
    '                pageUrl = Request.Url.AbsoluteUri
    '            End If
    '            If String.IsNullOrWhiteSpace(pageUrl) = False AndAlso UCase(pageUrl).Contains("CONTROLLOADER") = True Then
    '                toAddress &= "; diamondsupport@insuresoft.com"
    '            End If
    '            objMail.To = toAddress
    '            objMail.Subject = "AgentPort Error for " & userName
    '        End If

    '        'get error information
    '        Dim err As String = ""
    '        err = BuildMessage(except)

    '        objMail.BodyFormat = Mail.MailFormat.Html
    '        objMail.Body = err
    '        System.Web.Mail.SmtpMail.SmtpServer = ConfigurationSettings.AppSettings("mailhost")
    '        System.Web.Mail.SmtpMail.Send(objMail)
    '    Catch ex As Exception
    '        'SendEmail(ex.ToString)
    '    End Try
    'End Sub

    'Function BuildMessage(ByVal ex As System.Exception) As String

    '    Dim errMessage As String = ""
    '    Dim errDetails As String = ""
    '    If ex Is Nothing Then
    '        errMessage = "Error could not be identified."
    '        'errDetails = ""
    '    Else
    '        errMessage = ex.GetBaseException().Message.ToString()
    '        errDetails = ex.GetBaseException().StackTrace.ToString()
    '    End If

    '    Dim reqIP As String = ""
    '    Dim reqURL As String = ""
    '    Dim reqUserAgent As String = ""

    '    If Request Is Nothing Then
    '        reqIP = "IP unknown:  request unavailable"
    '        reqURL = "URL unknown:  request unavailable"
    '        reqUserAgent = "User Agent unknown:  request unavailable"
    '    Else
    '        reqIP = Request.ServerVariables("REMOTE_ADDR")
    '        reqURL = Request.Url.AbsoluteUri
    '        reqUserAgent = Request.ServerVariables("HTTP_USER_AGENT")
    '    End If

    '    Dim strMessage As New StringBuilder

    '    strMessage.Append("<style type=""text/css"">" & vbCrLf)
    '    strMessage.Append("<!--" & vbCrLf)
    '    strMessage.Append(".basix {" & vbCrLf)
    '    strMessage.Append("font-family: Verdana, Arial, Helvetica, sans-serif;" & vbCrLf)
    '    strMessage.Append("font-size: 12px;" & vbCrLf)
    '    strMessage.Append("}" & vbCrLf)
    '    strMessage.Append(".header1 {" & vbCrLf)
    '    strMessage.Append("font-family: Verdana, Arial, Helvetica, sans-serif;" & vbCrLf)
    '    strMessage.Append("font-size: 12px;" & vbCrLf)
    '    strMessage.Append("font-weight: bold;" & vbCrLf)
    '    strMessage.Append("color: #000099;" & vbCrLf)
    '    strMessage.Append("}" & vbCrLf)
    '    strMessage.Append(".tlbbkground1 {" & vbCrLf)
    '    strMessage.Append("background-color: #000099;" & vbCrLf)
    '    strMessage.Append("}" & vbCrLf)
    '    strMessage.Append("-->" & vbCrLf)
    '    strMessage.Append("</style>" & vbCrLf)

    '    strMessage.Append("<table width=""85%"" border=""0"" align=""center"" cellpadding=""5"" cellspacing=""1"" class=""tlbbkground1"">" & vbCrLf)
    '    strMessage.Append("<tr bgcolor=""#eeeeee"">" & vbCrLf)
    '    strMessage.Append("<td colspan=""2"" class=""header1"">Internet Page Error</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>IP Address</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & reqIP & "</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>User Agent</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & reqUserAgent & "</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Page</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & reqURL & "</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Time</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & System.DateTime.Now & " EST</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Message</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & errMessage & "</td>" & vbCrLf) 'Server.GetLastError().InnerException.ToString() & "</td>")
    '    strMessage.Append("</tr>" & vbCrLf)
    '    strMessage.Append("<tr>" & vbCrLf)
    '    strMessage.Append("<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Details</td>" & vbCrLf)
    '    strMessage.Append("<td bgcolor=""#FFFFFF"" class=""basix"">" & errDetails & "</td>" & vbCrLf)
    '    strMessage.Append("</tr>" & vbCrLf)

    '    If UCase(reqURL).Contains("CONTROLLOADER") = True OrElse UCase(reqURL).Contains("REPORTVIEWER") = True OrElse UCase(reqURL).Contains("VIEWPRINTHISTORY") = True Then
    '        strMessage.Append(DiamondErrorDetails())
    '    End If

    '    strMessage.Append("</table>" & vbCrLf)
    '    Return strMessage.ToString
    'End Function
    'Private Function DiamondErrorDetails() As String
    '    Dim errDetails As String = ""
    '    Dim hasSession As Boolean = False
    '    If Session IsNot Nothing Then
    '        hasSession = True
    '    End If

    '    errDetails = "<tr bgcolor=""#eeeeee"">" & vbCrLf
    '    errDetails &= "<td colspan=""2"" class=""header1"">Diamond Portal Info</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf
    '    errDetails &= "<tr>" & vbCrLf
    '    errDetails &= "<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Login Time</td>" & vbCrLf
    '    errDetails &= "<td bgcolor=""#FFFFFF"" class=""basix"">" & UserLoginTime() & "</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf
    '    errDetails &= "<tr>" & vbCrLf
    '    errDetails &= "<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Session.IsNewSession</td>" & vbCrLf
    '    errDetails &= "<td bgcolor=""#FFFFFF"" class=""basix"">" & If(hasSession = True, Session.IsNewSession.ToString, "Session Not Available") & "</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf
    '    errDetails &= "<tr>" & vbCrLf
    '    errDetails &= "<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Session DynamicDataManager</td>" & vbCrLf
    '    errDetails &= "<td bgcolor=""#FFFFFF"" class=""basix"">" & If(hasSession = True AndAlso Session(“DynamicDataManager”) IsNot Nothing, "Has Value", "No Value") & "</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf
    '    errDetails &= "<tr>" & vbCrLf
    '    errDetails &= "<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Session MiscPolicyStatic</td>" & vbCrLf
    '    errDetails &= "<td bgcolor=""#FFFFFF"" class=""basix"">" & If(hasSession = True AndAlso Session(“MiscPolicyStatic”) IsNot Nothing, "Has Value", "No Value") & "</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf
    '    errDetails &= "<tr>" & vbCrLf
    '    errDetails &= "<td width=""100"" align=""right"" bgcolor=""#eeeeee"" class=""header1"" nowrap>Session VersionData</td>" & vbCrLf
    '    errDetails &= "<td bgcolor=""#FFFFFF"" class=""basix"">" & If(hasSession = True AndAlso Session(“VersionData”) IsNot Nothing, "Has Value", "No Value") & "</td>" & vbCrLf
    '    errDetails &= "</tr>" & vbCrLf

    '    Return errDetails
    'End Function
    'Private Function UserLoginTime() As String
    '    Dim loginT As String = "Unavailable"

    '    If Session IsNot Nothing AndAlso Session("SessionID") IsNot Nothing AndAlso IsNumeric(Session("SessionID")) = True Then
    '        arUserIDs = Application("arUserIDs")
    '        arUsers = Application("arUsers")

    '        If arUserIDs IsNot Nothing AndAlso arUsers IsNot Nothing AndAlso arUserIDs.Contains(Session("SessionID")) = True Then
    '            Dim au As AgentsOnlyGlobal.ActiveUser = arUsers.Item(arUserIDs.IndexOf(Session("SessionID")))
    '            If au IsNot Nothing AndAlso au.LoginTime <> "" Then
    '                loginT = au.LoginTime
    '            End If
    '        End If
    '    End If

    '    Return loginT
    'End Function

    'Sub WriteToLog(ByVal message As String)
    '    Dim swWriteFile As IO.StreamWriter = New IO.StreamWriter("C:\Temp\AgentPortApplicationLog_" & Replace(Date.Today, "/", "-") & ".txt", True)
    '    swWriteFile.WriteLine(vbCrLf & Date.Now & " - " & message)
    '    swWriteFile.Close()
    'End Sub

    'Sub RemoveOldLogFiles()
    '    If Date.Today.DayOfWeek <> DayOfWeek.Saturday And Date.Today.DayOfWeek <> DayOfWeek.Sunday And Date.Today.DayOfWeek <> DayOfWeek.Monday Then
    '        Dim TodaysFile As String = "C:\Temp\AgentPortApplicationLog_" & Replace(Date.Today, "/", "-") & ".txt"
    '        Dim YesterdaysFile As String = "C:\Temp\AgentPortApplicationLog_" & Replace(DateAdd(DateInterval.Day, -1, Date.Today), "/", "-") & ".txt"

    '        Dim FileList As String() = System.IO.Directory.GetFiles("C:\Temp\", "*.txt")
    '        Dim FileName As String

    '        For Each FileName In FileList
    '            If InStr(FileName, "AgentPortApplicationLog") > 0 Then
    '                If FileName <> TodaysFile And FileName <> YesterdaysFile Then
    '                    System.IO.File.Delete(FileName)
    '                End If
    '            End If
    '        Next
    '    End If
    'End Sub

    'Sub SendEmail(ByVal message As String) '--not being used anymore as of 1/26/2012

    '    Dim objMail As New System.Web.Mail.MailMessage

    '    objMail.From = "AgentPortErrorReporting@IndianaFarmers.com"

    '    If UCase(ConfigurationSettings.AppSettings("TestOrProd")) = "TEST" Then
    '        objMail.To = "ITInternetSupport@IndianaFarmers.com"
    '        objMail.Subject = "Test:  AgentPort Error"
    '    Else
    '        objMail.To = "ITInternetSupport@IndianaFarmers.com"
    '        objMail.Subject = "AgentPort Error"
    '    End If

    '    objMail.BodyFormat = Mail.MailFormat.Html
    '    objMail.Body = message
    '    System.Web.Mail.SmtpMail.SmtpServer = ConfigurationSettings.AppSettings("mailhost")
    '    System.Web.Mail.SmtpMail.Send(objMail)

    'End Sub

    'Sub LoadTotalPageHits()
    '    Dim HitsFile As String = "C:\Temp\AgentPortHits.txt"
    '    Dim HitsFileBackup As String = "C:\Temp\AgentPortHits_backup.txt"
    '    If System.IO.File.Exists(HitsFile) = True Then
    '        Dim info As System.IO.FileInfo = New System.IO.FileInfo(HitsFile)
    '        If info.Length > 0 Then
    '            'process from file
    '            ProcessSavedFile(HitsFile)
    '        Else
    '            'check backup file if main file is empty
    '            If System.IO.File.Exists(HitsFileBackup) = True Then
    '                Dim info2 As System.IO.FileInfo = New System.IO.FileInfo(HitsFileBackup)
    '                If info2.Length > 0 Then
    '                    'process from backup
    '                    ProcessSavedFile(HitsFileBackup)
    '                Else
    '                    'start SinceDate if there the file is empty
    '                    Application.Add("SinceDate", Date.Now)
    '                End If
    '            Else
    '                'start SinceDate if the main file is empty and there is no backup file
    '                Application.Add("SinceDate", Date.Now)
    '            End If
    '        End If
    '    ElseIf System.IO.File.Exists(HitsFileBackup) = True Then
    '        Dim info As System.IO.FileInfo = New System.IO.FileInfo(HitsFileBackup)
    '        If info.Length > 0 Then
    '            'process from backup
    '            ProcessSavedFile(HitsFileBackup)
    '        Else
    '            'start SinceDate if there the file is empty
    '            Application.Add("SinceDate", Date.Now)
    '        End If
    '    Else
    '        'start SinceDate if there is no file
    '        Application.Add("SinceDate", Date.Now)
    '    End If
    'End Sub

    'Sub ProcessSavedFile(ByVal HitsFile As String)
    '    'process file
    '    Dim objReader As New System.IO.StreamReader(HitsFile)
    '    Dim sLine As String = ""
    '    Dim HasDate As Boolean = False

    '    'loop thru lines            
    '    Do
    '        sLine = objReader.ReadLine()
    '        'Dim fields As Array = Split(sLine, Chr(9))
    '        'Dim i As Integer
    '        'For i = 0 To fields.Length - 1

    '        'Next
    '        If Not sLine Is Nothing Then
    '            If InStr(sLine, "=") > 0 Then
    '                'get SinceDate
    '                Dim arReturn As Array
    '                arReturn = Split(sLine, "=")
    '                'add SinceDate to cache
    '                HasDate = True
    '                Application.Add("SinceDate", arReturn(1).ToString)
    '            Else
    '                'parse lines for page-hits
    '                'Dim arReturn As Array
    '                'arReturn = Split(sLine, "---")
    '                ''fill totals arrays
    '                'arTotalPages.Add(arReturn(0).ToString)
    '                'arTotalHits.Add(arReturn(1))
    '                'arCombinedPages.Add(arReturn(0).ToString)
    '                'arCombinedHits.Add(arReturn(1))
    '                'updated 1/29/2019
    '                Dim strList As Generic.List(Of String) = StringListFromSplit(sLine, "---")
    '                Dim currPage As String = StringValueFromStringList(strList, 0)
    '                Dim currHit As Integer = IntegerValueFromStringList(strList, 1)
    '                If arTotalPages Is Nothing OrElse arTotalHits Is Nothing Then
    '                    arTotalPages = New ArrayList
    '                    arTotalHits = New ArrayList
    '                End If
    '                arTotalPages.Add(currPage)
    '                arTotalHits.Add(currHit)
    '                If arCombinedPages Is Nothing OrElse arCombinedHits Is Nothing Then
    '                    arCombinedPages = New ArrayList
    '                    arCombinedHits = New ArrayList
    '                End If
    '                arCombinedPages.Add(currPage)
    '                arCombinedHits.Add(currHit)
    '            End If
    '        End If
    '    Loop Until sLine Is Nothing
    '    objReader.Close()

    '    If HasDate = False Then
    '        'start SinceDate if the file is empty
    '        Application.Add("SinceDate", Date.Now)
    '    End If

    '    Application("arTotalPages") = arTotalPages
    '    Application("arTotalHits") = arTotalHits
    '    Application("arCombinedPages") = arCombinedPages
    '    Application("arCombinedHits") = arCombinedHits
    'End Sub

    'Sub UpdateTotalPageHits(ByVal backup As Boolean)
    '    Dim SaveFile As String = ""
    '    arCombinedPages = Application("arCombinedPages")
    '    arCombinedHits = Application("arCombinedHits")

    '    Dim index As Integer = 0

    '    'write new totals file
    '    If arCombinedPages IsNot Nothing AndAlso arCombinedPages.Count > 0 Then 'added IF 1/29/2019
    '        If backup = True Then
    '            SaveFile = "C:\Temp\AgentPortHits_backup.txt"
    '        Else
    '            SaveFile = "C:\Temp\AgentPortHits.txt"
    '        End If
    '        Dim sw As New IO.StreamWriter(SaveFile)
    '        sw.WriteLine("SinceDate=" & Application("SinceDate"))
    '        For index = 0 To arCombinedPages.Count - 1
    '            'added 1/29/2019
    '            Dim hitsForIndex As Integer = 0
    '            If arCombinedHits IsNot Nothing AndAlso arCombinedHits.Count >= index + 1 AndAlso IsNumeric(arCombinedHits.Item(index).ToString) = True Then
    '                hitsForIndex = CInt(arCombinedHits.Item(index).ToString)
    '            End If

    '            'sw.WriteLine(arCombinedPages.Item(index).ToString & "---" & arCombinedHits.Item(index))
    '            'updated 1/29/2019
    '            sw.WriteLine(arCombinedPages.Item(index).ToString & "---" & hitsForIndex.ToString)
    '        Next
    '        sw.Close()
    '    End If
    'End Sub

    'Sub CombineHits() '1/29/2019 note: this isn't currently being used
    '    arCombinedPages = Application("arCombinedPages")
    '    arCombinedHits = Application("arCombinedHits")

    '    arPages = Application("arPages")
    '    arHits = Application("arHits")
    '    Dim index As Integer

    '    For index = 0 To arPages.Count - 1
    '        If arCombinedPages.Contains(arPages.Item(index).ToString) = False Then
    '            arCombinedPages.Add(arPages.Item(index).ToString)
    '            arCombinedHits.Add(arHits.Item(index))
    '        Else
    '            Dim position As Integer = arCombinedPages.IndexOf(arPages.Item(index).ToString)
    '            arCombinedHits.Item(position) = CInt(arCombinedHits.Item(position)) + CInt(arHits.Item(index))
    '        End If
    '    Next
    '    Application("arCombinedPages") = arCombinedPages
    '    Application("arCombinedHits") = arCombinedHits
    'End Sub

    'Public Shared Function GetTitle(ByVal Page As System.Web.UI.Page) As String
    '    Dim sSite As String = GetSiteName(Page)
    '    Dim sPage As String = GetPageTitle(Page)
    '    Return String.Format("{0} | {1}", sSite, sPage)
    'End Function

    'Friend Shared Function GetSiteName(ByRef Page As System.Web.UI.Page) As String
    '    Return Page.Request.Url.Host.ToUpper & " Web"
    'End Function

    'Friend Shared Function GetPageTitle(ByRef Page As System.Web.UI.Page) As String 'In reality, you'd do a filename:title lookup, e.g. from Web.config... 
    '    Dim fi As IO.FileInfo
    '    fi = New IO.FileInfo(Page.Server.MapPath(Page.Request.ServerVariables("SCRIPT_NAME")))
    '    Dim sTitle As String = System.IO.Path.GetFileNameWithoutExtension(fi.ToString)
    '    fi = Nothing
    '    Return sTitle
    'End Function

    'Sub InsertCurrentHits()
    '    'this will fire when the last session ends and when the application ends (the last restart time will be used by the stored procedure to avoid duplicate inserts)
    '    arPages = Application("arPages")
    '    arHits = Application("arHits")

    '    Dim index As Integer

    '    Dim strPages As New StringBuilder
    '    Dim strHits As New StringBuilder

    '    If arPages IsNot Nothing AndAlso arPages.Count > 0 Then 'added IF 1/29/2019
    '        For index = 0 To arPages.Count - 1
    '            'added 1/29/2019
    '            Dim hitsForIndex As Integer = 0
    '            If arHits IsNot Nothing AndAlso arHits.Count >= index + 1 AndAlso IsNumeric(arHits.Item(index).ToString) = True Then
    '                hitsForIndex = CInt(arHits.Item(index).ToString)
    '            End If

    '            If strPages.ToString = "" Then
    '                strPages.Append(arPages.Item(index).ToString)
    '                'strHits.Append(arHits.Item(index))
    '                'updated 1/29/2019
    '                strHits.Append(hitsForIndex.ToString)
    '            Else
    '                strPages.Append("|" & arPages.Item(index).ToString)
    '                'strHits.Append("|" & arHits.Item(index))
    '                'updated 1/29/2019
    '                strHits.Append("|" & hitsForIndex.ToString)
    '            End If
    '        Next
    '    End If

    '    Try
    '        Using conn As New Data.SqlClient.SqlConnection(System.Configuration.ConfigurationManager.AppSettings("conn"))
    '            conn.Open()
    '            Using sqlCmd As New Data.SqlClient.SqlCommand("sp_InsertCurrentPageHits", conn)
    '                sqlCmd.CommandType = Data.CommandType.StoredProcedure
    '                sqlCmd.Parameters.AddWithValue("@lastRestart", Application("LastRestart").ToString)
    '                sqlCmd.Parameters.AddWithValue("@location", "AgentPort")
    '                sqlCmd.Parameters.AddWithValue("@pages", strPages.ToString)
    '                sqlCmd.Parameters.AddWithValue("@hits", strHits.ToString)
    '                sqlCmd.Parameters.AddWithValue("@calendarDay", Date.Today.Month & "/" & Date.Today.Day & "/" & Date.Today.Year)
    '                sqlCmd.ExecuteNonQuery()
    '            End Using

    '        End Using

    '    Catch ex As Exception
    '        'SendEmail(ex.ToString)
    '    Finally
    '    End Try
    'End Sub

    'Private Sub EndChats(Optional ByVal userSessionID As Integer = 0)
    '    Dim addUpdateText As String = ""
    '    Dim addWhereText As String = ""

    '    If userSessionID > 0 Then
    '        addUpdateText = ", endUserID = " & userSessionID & ", endReason = 'Ended Session', endTime = '" & Date.Now.ToString & "'"
    '        addWhereText = " and (initUserID = " & userSessionID & " or recipUserID = " & userSessionID & ")"
    '    End If

    '    Using sql As New SQLexecuteObject(System.Configuration.ConfigurationManager.AppSettings("conn"))
    '        sql.queryOrStoredProc = "update tbl_Chat_Sessions set active = 0" & addUpdateText & " where active = 1" & addWhereText
    '        sql.ExecuteStatement()
    '    End Using
    'End Sub

    'Sub RedirectAllRequestsOld() 're-named 9/4/2014
    '    'rewrite all requests when database is down
    '    If Request IsNot Nothing Then

    '        Dim testURL As String = UCase(Request.ServerVariables("URL").ToString)
    '        If testURL.Contains("AGENTSONLYCOMMONERRORS.ASPX") = False Then
    '            'System.Web.HttpContext.Current.ReWritePath("http://www.indianafarmers.com/public/default3.aspx")
    '            'System.Web.HttpContext.Current.ReWritePath("default3.aspx")
    '            System.Web.HttpContext.Current.RewritePath("agentsonlycommonerrors.aspx?error=404")
    '        End If

    '    End If
    'End Sub

    ''added 9/3/2014
    'Sub RedirectAllRequests()
    '    'rewrite all requests during maintenance

    '    If Request IsNot Nothing Then
    '        If RedirectAllRequestsFlag() = True Then
    '            'redirect logic is on
    '            Dim u As String = Request.ServerVariables("URL").ToString
    '            If IsRedirectableUrl(u) = True Then
    '                Dim isOkay As Boolean = False
    '                'url is redirectable; not home page or error page
    '                If IgnoreInternalForRedirectsFlag() = True Then
    '                    'okay to ignore internal ip addresses
    '                    Dim i As String = Request.ServerVariables("REMOTE_ADDR")
    '                    If IsInternalIpAddress(i) = True Then
    '                        'okay; is internal
    '                        isOkay = True
    '                    End If
    '                End If
    '                If isOkay = False Then
    '                    Response.Redirect(HomePageURL())
    '                End If
    '            End If
    '        End If
    '    End If

    'End Sub
    'Function RedirectAllRequestsFlag() As Boolean
    '    Dim rf As Boolean = False

    '    If ConfigurationManager.AppSettings("RedirectAllRequests") IsNot Nothing AndAlso ConfigurationManager.AppSettings("RedirectAllRequests").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("RedirectAllRequests").ToString) = "TRUE" Then
    '        rf = True
    '    End If

    '    Return rf
    'End Function
    'Function IsRedirectableUrl(ByVal u As String) As Boolean
    '    Dim ir As Boolean = False

    '    If u <> "" AndAlso HasRedirectableFileExtension(u) = True Then
    '        Dim hpShort As String = HomePageShort()
    '        Dim epShort As String = ErrorPageShort()

    '        If (hpShort <> "" AndAlso UCase(u).Contains(UCase(hpShort)) = True) OrElse (epShort <> "" AndAlso UCase(u).Contains(UCase(epShort)) = True) Then
    '            'okay; is either home page or error page
    '        Else
    '            If DoesUrlContainAnyOtherRedirectablePages(u) = True Then
    '                'okay; is one of other pages (i.e. PopupLoader.aspx used on NewPublicHome)
    '            Else
    '                ir = True
    '            End If
    '        End If

    '    End If

    '    Return ir
    'End Function
    'Function RedirectableFileExtensions() As Generic.List(Of String)
    '    Dim fe As New Generic.List(Of String)

    '    Dim strFe As String = ""
    '    If ConfigurationManager.AppSettings("RedirectableFileExtensions") IsNot Nothing AndAlso ConfigurationManager.AppSettings("RedirectableFileExtensions").ToString <> "" Then
    '        strFe = ConfigurationManager.AppSettings("RedirectableFileExtensions").ToString
    '    Else
    '        strFe = ".aspx|.asmx|.svc|.asp|.ashx"
    '    End If
    '    strFe = Trim(strFe)
    '    If strFe <> "" Then
    '        If strFe.Contains("|") = True Then
    '            Dim arFeString As String()
    '            arFeString = Split(strFe, "|")
    '            For Each e As String In arFeString
    '                e = Trim(e)
    '                If e <> "" Then
    '                    If Left(e, 1) <> "." Then
    '                        e = "." & e
    '                    End If
    '                    fe.Add(e)
    '                End If
    '            Next
    '        Else
    '            If Left(strFe, 1) <> "." Then
    '                strFe = "." & strFe
    '            End If
    '            fe.Add(strFe)
    '        End If
    '    End If

    '    Return fe
    'End Function
    'Function HasRedirectableFileExtension(ByVal fn As String) As Boolean
    '    Dim hr As Boolean = False

    '    If fn <> "" Then
    '        'If UCase(fn).Contains(".ASPX") = True OrElse UCase(fn).Contains(".ASMX") = True OrElse UCase(fn).Contains(".SVC") = True OrElse UCase(fn).Contains(".ASP") = True OrElse UCase(fn).Contains(".ASHX") = True Then 'could use asp instead of that and aspx
    '        '    hr = True
    '        'End If
    '        Dim fe As Generic.List(Of String) = RedirectableFileExtensions()
    '        If fe IsNot Nothing AndAlso fe.Count > 0 Then
    '            For Each e As String In fe
    '                If UCase(fn).Contains(UCase(e)) = True Then
    '                    hr = True
    '                    Exit For
    '                End If
    '            Next
    '        End If
    '    End If

    '    Return hr
    'End Function
    'Function OtherPagesToIgnoreForRedirects() As Generic.List(Of String)
    '    Dim op As New Generic.List(Of String)

    '    Dim strOp As String = ""
    '    If ConfigurationManager.AppSettings("OtherWebsitePagesToIgnoreForRedirects") IsNot Nothing AndAlso ConfigurationManager.AppSettings("OtherWebsitePagesToIgnoreForRedirects").ToString <> "" Then
    '        strOp = ConfigurationManager.AppSettings("OtherWebsitePagesToIgnoreForRedirects").ToString
    '    Else
    '        strOp = "PopupLoader.aspx"
    '    End If
    '    strOp = Trim(strOp)
    '    If strOp <> "" Then
    '        If strOp.Contains("|") = True Then
    '            Dim arOpString As String()
    '            arOpString = Split(strOp, "|")
    '            For Each p As String In arOpString
    '                p = Trim(p)
    '                If p <> "" Then
    '                    op.Add(p)
    '                End If
    '            Next
    '        Else
    '            op.Add(strOp)
    '        End If
    '    End If

    '    Return op
    'End Function
    'Function DoesUrlContainAnyOtherRedirectablePages(ByVal u As String) As Boolean
    '    Dim dc As Boolean = False

    '    If u <> "" Then
    '        Dim op As Generic.List(Of String) = OtherPagesToIgnoreForRedirects()
    '        If op IsNot Nothing AndAlso op.Count > 0 Then
    '            For Each p As String In op
    '                If UCase(u).Contains(UCase(p)) = True Then
    '                    dc = True
    '                    Exit For
    '                End If
    '            Next
    '        End If
    '    End If

    '    Return dc
    'End Function
    'Function IgnoreInternalForRedirectsFlag() As Boolean
    '    Dim ii As Boolean = False

    '    If ConfigurationManager.AppSettings("IgnoreInternalForRedirects") IsNot Nothing AndAlso ConfigurationManager.AppSettings("IgnoreInternalForRedirects").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("IgnoreInternalForRedirects").ToString) = "TRUE" Then
    '        ii = True
    '    End If

    '    Return ii
    'End Function
    'Function InternalIpAddressPrefix() As String
    '    Dim ip As String = ""

    '    If ConfigurationManager.AppSettings("InternalIpPrefix") IsNot Nothing AndAlso ConfigurationManager.AppSettings("InternalIpPrefix").ToString <> "" Then
    '        ip = ConfigurationManager.AppSettings("InternalIpPrefix").ToString
    '    Else
    '        ip = "172.23."
    '    End If

    '    Return ip
    'End Function
    'Function InternalIpAddressPrefixes() As Generic.List(Of String) 'added 9/4/2014
    '    Dim ips As New Generic.List(Of String)

    '    Dim strIps As String = ""
    '    If ConfigurationManager.AppSettings("InternalIpAddressPrefixes") IsNot Nothing AndAlso ConfigurationManager.AppSettings("InternalIpAddressPrefixes").ToString <> "" Then
    '        strIps = ConfigurationManager.AppSettings("InternalIpAddressPrefixes").ToString
    '    Else
    '        strIps = "172.23.|192.168."
    '    End If
    '    strIps = Trim(strIps)
    '    If strIps <> "" Then
    '        If strIps.Contains("|") = True Then
    '            Dim arIpsString As String()
    '            arIpsString = Split(strIps, "|")
    '            For Each ip As String In arIpsString
    '                ip = Trim(ip)
    '                If ip <> "" Then
    '                    ips.Add(ip)
    '                End If
    '            Next
    '        Else
    '            ips.Add(strIps)
    '        End If
    '    End If

    '    Return ips
    'End Function
    'Function IsInternalIpAddress(ByVal i As String) As Boolean
    '    Dim ii As Boolean = False

    '    If i <> "" Then
    '        Dim ipPrefix As String = InternalIpAddressPrefix()
    '        If ipPrefix <> "" AndAlso Len(i) >= Len(ipPrefix) Then
    '            'ip is at least as long as prefix
    '            If Left(i, Len(ipPrefix)) = ipPrefix Then
    '                ii = True
    '            End If
    '        End If
    '        'updated 9/4/2014 to handle for multiple
    '        If ii = False Then
    '            Dim ipPrefixes As Generic.List(Of String) = InternalIpAddressPrefixes()
    '            If ipPrefixes IsNot Nothing AndAlso ipPrefixes.Count > 0 Then
    '                For Each ip As String In ipPrefixes
    '                    If Len(i) >= Len(ip) Then
    '                        If Left(i, Len(ip)) = ip Then
    '                            ii = True
    '                            Exit For
    '                        End If
    '                    End If
    '                Next
    '            End If
    '        End If
    '    End If

    '    Return ii
    'End Function
    'Function HomePageURL() As String
    '    Dim hp As String = ""

    '    If ConfigurationManager.AppSettings("WebsiteHomePage") IsNot Nothing AndAlso ConfigurationManager.AppSettings("WebsiteHomePage").ToString <> "" Then
    '        hp = ConfigurationManager.AppSettings("WebsiteHomePage").ToString
    '    Else
    '        'hp = "http://www.indianafarmers.com/NewPublicSite/NewPublicHome.aspx"
    '        'updated 1/24/2019
    '        hp = "http://www.indianafarmers.com"
    '    End If

    '    Return hp
    'End Function
    'Function HomePageShort() As String
    '    Dim hp As String = ""

    '    Dim hpLong As String = HomePageURL()
    '    If hpLong.Contains("/") = True Then
    '        Dim lastIndex As Integer = hpLong.LastIndexOf("/")
    '        Dim lastIndexPlusOne As Integer = lastIndex + 1
    '        If Len(hpLong) > lastIndexPlusOne Then
    '            hp = hpLong.Substring(lastIndexPlusOne, Len(hpLong) - lastIndexPlusOne)
    '        End If
    '    End If

    '    If hp = "" Then
    '        hp = "NewPublicHome.aspx"
    '    End If

    '    Return hp
    'End Function
    'Function ErrorPageURL() As String
    '    Dim ep As String = ""

    '    If ConfigurationManager.AppSettings("WebsiteErrorPage") IsNot Nothing AndAlso ConfigurationManager.AppSettings("WebsiteErrorPage").ToString <> "" Then
    '        ep = ConfigurationManager.AppSettings("WebsiteErrorPage").ToString
    '    Else
    '        ep = "http://www.indianafarmers.com/NewPublicSite/NewPublicErrorPage.aspx"
    '    End If

    '    Return ep
    'End Function
    'Function ErrorPageShort() As String
    '    Dim ep As String = ""

    '    Dim epLong As String = ErrorPageURL()
    '    If epLong.Contains("/") = True Then
    '        Dim lastIndex As Integer = epLong.LastIndexOf("/")
    '        Dim lastIndexPlusOne As Integer = lastIndex + 1
    '        If Len(epLong) > lastIndexPlusOne Then
    '            ep = epLong.Substring(lastIndexPlusOne, Len(epLong) - lastIndexPlusOne)
    '        End If
    '    End If

    '    If ep = "" Then
    '        ep = "NewPublicErrorPage.aspx"
    '    End If

    '    Return ep
    'End Function
    'Function MailHostAddress() As String
    '    Dim mh As String = ""

    '    If ConfigurationManager.AppSettings("SmtpServer") IsNot Nothing AndAlso ConfigurationManager.AppSettings("SmtpServer").ToString <> "" Then
    '        mh = ConfigurationManager.AppSettings("SmtpServer").ToString
    '    ElseIf ConfigurationManager.AppSettings("mailhost") IsNot Nothing AndAlso ConfigurationManager.AppSettings("mailhost").ToString <> "" Then
    '        mh = ConfigurationManager.AppSettings("mailhost").ToString
    '    Else
    '        mh = "192.168.1.5"
    '    End If

    '    Return mh
    'End Function
    'Function ErrorEmailAddress() As String
    '    Dim ee As String = ""

    '    If ConfigurationManager.AppSettings("SmtpErrorEmailAddress") IsNot Nothing AndAlso ConfigurationManager.AppSettings("SmtpErrorEmailAddress").ToString <> "" Then
    '        ee = ConfigurationManager.AppSettings("SmtpErrorEmailAddress").ToString
    '    ElseIf ConfigurationManager.AppSettings("ErrorEmailAddress") IsNot Nothing AndAlso ConfigurationManager.AppSettings("ErrorEmailAddress").ToString <> "" Then
    '        ee = ConfigurationManager.AppSettings("ErrorEmailAddress").ToString
    '    ElseIf ConfigurationManager.AppSettings("ErrorEmail") IsNot Nothing AndAlso ConfigurationManager.AppSettings("ErrorEmail").ToString <> "" Then
    '        ee = ConfigurationManager.AppSettings("ErrorEmail").ToString
    '    Else
    '        ee = "ITInternetSupport@indianafarmers.com"
    '    End If

    '    Return ee
    'End Function
    'Function IsOkayToSendErrorEmails() As Boolean
    '    Dim ee As Boolean = False

    '    If ConfigurationManager.AppSettings("SendSmtpErrorEmails") IsNot Nothing AndAlso ConfigurationManager.AppSettings("SendSmtpErrorEmails").ToString <> "" AndAlso UCase(ConfigurationManager.AppSettings("SendSmtpErrorEmails").ToString) = "TRUE" Then
    '        ee = True
    '    End If

    '    Return ee
    'End Function

    ''added 3/28/2016 for Comparative Rater Redirect; added UAT logic 5/11/2016 (see PreRequestHandlerExecute and IsCompRaterUATTester)
    'Private Function IsComparativeRaterBridgeOverURL(Optional ByRef diaIntegrationToken As String = "") As Boolean
    '    Dim isCompRater As Boolean = False
    '    diaIntegrationToken = ""

    '    Dim requestURL As String = ""
    '    If Request IsNot Nothing AndAlso Request.ServerVariables IsNot Nothing Then
    '        If Request.ServerVariables("PATH_INFO") IsNot Nothing AndAlso String.IsNullOrEmpty(Request.ServerVariables("PATH_INFO").ToString) = False Then
    '            requestURL = UCase(Request.ServerVariables("PATH_INFO").ToString)
    '        ElseIf Request.ServerVariables("SCRIPT_NAME") IsNot Nothing AndAlso String.IsNullOrEmpty(Request.ServerVariables("SCRIPT_NAME").ToString) = False Then
    '            requestURL = UCase(Request.ServerVariables("SCRIPT_NAME").ToString)
    '        End If
    '    End If

    '    If String.IsNullOrWhiteSpace(requestURL) = False AndAlso UCase(requestURL).Contains("CONTROLLOADER.ASPX") = True Then
    '        Dim stayHere As String = ""
    '        If Request IsNot Nothing AndAlso Request.QueryString IsNot Nothing AndAlso Request.QueryString.Keys IsNot Nothing AndAlso Request.QueryString.Keys.Count > 0 Then
    '            For Each key As String In Request.QueryString.Keys
    '                Dim vals As String() = Request.QueryString.GetValues(key)
    '                If vals IsNot Nothing AndAlso vals.Count > 0 Then
    '                    Dim valCounter As Integer = 0
    '                    For Each value As String In vals
    '                        If String.IsNullOrWhiteSpace(value) = False Then
    '                            value = HttpUtility.UrlDecode(value)
    '                        End If
    '                        valCounter += 1
    '                        Select Case UCase(key)
    '                            Case "IT"
    '                                If valCounter < 2 Then
    '                                    '1st instance
    '                                    diaIntegrationToken = value
    '                                Else
    '                                    'at least 2nd instance
    '                                    If String.IsNullOrWhiteSpace(diaIntegrationToken) = True OrElse String.IsNullOrWhiteSpace(value) = False Then
    '                                        diaIntegrationToken = value
    '                                    End If
    '                                End If
    '                            Case "STAYHERE"
    '                                If valCounter < 2 Then
    '                                    '1st instance
    '                                    stayHere = value
    '                                Else
    '                                    'at least 2nd instance
    '                                    If String.IsNullOrWhiteSpace(stayHere) = True OrElse String.IsNullOrWhiteSpace(value) = False Then
    '                                        stayHere = value
    '                                    End If
    '                                End If
    '                        End Select
    '                    Next
    '                End If
    '            Next
    '        End If
    '        'controlloader.aspx/IT/12345678/StayHere/Yes (controlloader.aspx = 18 chars; /IT/ = 4 chars; /StayHere/ = 10 chars)
    '        Dim holdVal As String = ""
    '        If UCase(requestURL).Contains("/IT/") = True Then
    '            holdVal = NextSlashVal(requestURL, "/IT/")
    '            If String.IsNullOrWhiteSpace(diaIntegrationToken) = True OrElse String.IsNullOrWhiteSpace(holdVal) = False Then
    '                diaIntegrationToken = holdVal
    '            End If
    '        End If
    '        holdVal = ""
    '        If UCase(requestURL).Contains("/STAYHERE/") = True Then
    '            holdVal = NextSlashVal(requestURL, "/STAYHERE/")
    '            If String.IsNullOrWhiteSpace(stayHere) = True OrElse String.IsNullOrWhiteSpace(holdVal) = False Then
    '                stayHere = holdVal
    '            End If
    '        End If

    '        If String.IsNullOrWhiteSpace(diaIntegrationToken) = False Then
    '            If String.IsNullOrWhiteSpace(stayHere) = False AndAlso (UCase(stayHere) = "YES" OrElse UCase(stayHere) = "TRUE" OrElse UCase(stayHere) = "1") Then
    '                'stay here; don't treat as CompRater
    '            Else
    '                isCompRater = True
    '            End If
    '        End If
    '    End If

    '    Return isCompRater
    'End Function
    'Private Function NextSlashVal(ByVal requestUrl As String, ByVal slashPattern As String) As String 'added UAT logic 5/11/2016 (see PreRequestHandlerExecute and IsCompRaterUATTester)
    '    Dim nextVal As String = ""

    '    If String.IsNullOrWhiteSpace(requestUrl) = False AndAlso String.IsNullOrWhiteSpace(slashPattern) = False Then
    '        If UCase(requestUrl).Contains(UCase(slashPattern)) = True Then
    '            Dim patternIndex As Integer = UCase(requestUrl).IndexOf(UCase(slashPattern))
    '            Dim indexAfterPattern As Integer = patternIndex + Len(slashPattern) 'also # of chars up to and including slashPattern
    '            If Len(requestUrl) > indexAfterPattern Then
    '                Dim remainingText As String = Right(requestUrl, Len(requestUrl) - indexAfterPattern)
    '                If String.IsNullOrWhiteSpace(remainingText) = False Then
    '                    If remainingText.Contains("/") = True Then
    '                        Dim slashIndex As Integer = remainingText.IndexOf("/")
    '                        If slashIndex > 0 Then
    '                            nextVal = Left(remainingText, slashIndex) 'not adding 1 to index so it doesn't pick up trailing slash
    '                        End If
    '                    Else
    '                        nextVal = remainingText
    '                    End If
    '                End If
    '            End If
    '        End If
    '    End If

    '    Return nextVal
    'End Function
    ''Private Function IsCompRaterUATTester(ByVal userId As String) As Boolean 'added 5/11/2016 (called from PreRequestHandlerExecute)
    ''    Dim isUAT As Boolean = False

    ''    If DateTime.Now >= DateTime.Parse("6/10/2016 9:00") AndAlso DateTime.Now <= DateTime.Parse("6/10/2016 10:30") Then 'date here is just for UAT window; change date in PreRequestHandlerExecute to allow all users
    ''        If IsNumeric(userId) = True AndAlso CInt(userId) > 0 Then
    ''            Select Case CInt(userId) 'domin = 84, maamo = 2531, TestNxTech2 = 3310, TestNxTech = 3033 (used by PLRater), DonBrewtonTest = 5782 (on Patch only; remove 5782 in prod); basno = 3914 , desan = 4621, jedav = 346
    ''                Case 4117, 4120, 789, 84, 2531, 5782, 3914, 4621, 346
    ''                    isUAT = True
    ''            End Select
    ''        End If
    ''    End If

    ''    Return isUAT
    ''End Function

    ''added 10/10/2018 for AgentPort Testing
    'Private Sub CheckForNewSiteRedirects(Optional ByVal requestedUrl As String = "")
    '    If String.IsNullOrWhiteSpace(requestedUrl) = False Then
    '        requestedUrl = UCase(requestedUrl)
    '    End If

    '    Dim referrerUrl As String = ""

    '    If Request IsNot Nothing Then
    '        If Request.UrlReferrer IsNot Nothing Then
    '            referrerUrl = UCase(Request.UrlReferrer.ToString)
    '        End If

    '        If String.IsNullOrWhiteSpace(requestedUrl) = True Then
    '            If Request.ServerVariables IsNot Nothing AndAlso Request.ServerVariables.Count > 0 AndAlso Request.ServerVariables("SCRIPT_NAME") IsNot Nothing Then
    '                requestedUrl = UCase(Request.ServerVariables("SCRIPT_NAME").ToString)
    '            End If
    '        End If
    '    End If

    '    If String.IsNullOrWhiteSpace(requestedUrl) = False Then
    '        Dim redirectPage As String = ""

    '        If requestedUrl.Contains("MYAGENCY.ASPX") = True Then
    '            If String.IsNullOrWhiteSpace(referrerUrl) = False AndAlso referrerUrl.Contains("MYAGENCYUPDATE.ASPX") = True Then
    '                redirectPage = "pages/AgencySettings.aspx"
    '            Else
    '                redirectPage = "Default.aspx"
    '            End If
    '        ElseIf requestedUrl.Contains("AGENTS.ASPX") = True Then
    '            redirectPage = "Default.aspx"
    '        End If

    '        If String.IsNullOrWhiteSpace(redirectPage) = False Then
    '            Response.Redirect("~/" & redirectPage)
    '            'Else 'added 1/20/2019; note: doesn't appear to do anything here if SSL is required on site
    '            '    Dim pageUrl As String = ""
    '            '    If Request IsNot Nothing AndAlso Request.Url IsNot Nothing Then
    '            '        pageUrl = Request.Url.AbsoluteUri
    '            '    End If
    '            '    If String.IsNullOrWhiteSpace(pageUrl) = False Then
    '            '        If Len(pageUrl) >= 5 AndAlso Left(UCase(pageUrl), 5) = "HTTP:" Then
    '            '            Response.Redirect("https:" & Right(pageUrl, Len(pageUrl) - 5))
    '            '        End If
    '            '    End If
    '        End If
    '    End If
    'End Sub

    ''added 1/29/2019
    'Private Function StringListFromSplit(ByVal strToSplit As String, ByVal delimiter As String) As Generic.List(Of String)
    '    Dim strList As Generic.List(Of String) = Nothing

    '    If String.IsNullOrWhiteSpace(strToSplit) = False Then
    '        Dim addFullStringToList As Boolean = False
    '        If String.IsNullOrWhiteSpace(delimiter) = False AndAlso strToSplit.Contains(delimiter) = True Then
    '            Dim strArray As String() = strToSplit.Split(delimiter)
    '            If strArray IsNot Nothing AndAlso strArray.Count > 0 Then
    '                strList = New Generic.List(Of String)
    '                For Each str As String In strArray
    '                    strList.Add(str)
    '                Next
    '            Else
    '                addFullStringToList = True
    '            End If
    '        Else
    '            addFullStringToList = True
    '        End If
    '        If addFullStringToList = True Then
    '            strList = New Generic.List(Of String)
    '            strList.Add(strToSplit)
    '        End If
    '    End If

    '    Return strList
    'End Function
    'Private Function StringValueFromStringList(ByVal strList As Generic.List(Of String), ByVal index As Integer) As String
    '    Dim str As String = ""

    '    If strList IsNot Nothing AndAlso index >= 0 AndAlso strList.Count >= index + 1 Then
    '        str = strList.Item(index)
    '    End If

    '    Return str
    'End Function
    'Private Function IntegerValueFromStringList(ByVal strList As Generic.List(Of String), ByVal index As Integer) As Integer
    '    Dim int As Integer = 0

    '    Dim str As String = StringValueFromStringList(strList, index)
    '    If String.IsNullOrWhiteSpace(str) = False AndAlso IsNumeric(str) = True Then
    '        int = CInt(str)
    '    End If

    '    Return int
    'End Function

    'added 4/16/2019 for testing bit return from db
    Private Function checkPWflag(ByVal userID As Integer) As Boolean
        Using Sql As New SQLselectObject(ConfigurationManager.AppSettings("connDiamond"))
            Sql.queryOrStoredProc = "Select password_must_be_changed from Users where users_id = '" & userID & "'"
            Using dr As SqlClient.SqlDataReader = Sql.GetDataReader
                If dr IsNot Nothing AndAlso dr.HasRows Then
                    dr.Read()
                    Dim pmbcBit As String = dr.Item("password_must_be_changed").ToString.Trim
                    If String.IsNullOrWhiteSpace(pmbcBit) = False Then

                    End If
                    If dr.Item("password_must_be_changed").ToString.ToLower = "true" Then Return True Else Return False
                End If
            End Using
        End Using
        Return False
    End Function
End Class
