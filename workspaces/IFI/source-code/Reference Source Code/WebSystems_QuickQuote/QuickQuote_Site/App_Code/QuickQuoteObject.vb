Imports Microsoft.VisualBasic
Imports System.Reflection
Imports System.Web
'added 12/20/2013
Imports QuickQuote.CommonMethods
Imports helper = QuickQuote.CommonMethods.QuickQuoteHelperClass 'added 9/23/2014 for EPLI functionality brought over from DiamondQuickQuote
Imports QuickQuote.CommonObjects.Umbrella
Imports System.Web.Routing
Imports System

Namespace QuickQuote.CommonObjects 'added namespace 12/20/2013
    ''' <summary>
    ''' main object used to hold VelociRater quote information
    ''' </summary>
    ''' <remarks>can be saved/rated via QuickQuoteXML class(<see cref="QuickQuoteXML"/>)</remarks>
    <Serializable()>
    Public Class QuickQuoteObject
        Inherits QuickQuoteBaseGenericObject(Of Object) 'added 8/4/2014; 7/14/2018 note: changed from QuickQuoteBaseObject w/ HOM update
        Implements IDisposable

        '8/6/2018 note: added script tags to old properties for Serialization since it will already be in another object

        ''' <summary>
        ''' valid types for quote xml
        ''' </summary>
        ''' <remarks>request is what we send to the comparative rating service; response is what's returned</remarks>
        Enum QuickQuoteXmlType
            None = 0
            Request = 1
            Response = 2
        End Enum

        ''' <summary>
        ''' valid LOB types
        ''' </summary>
        ''' <remarks>value previously corresponded to version_id from Diamond; now see static data xml file</remarks>
        Enum QuickQuoteLobType
            'None = 0
            'DwellingFirePersonalOld = 3 'uncommented 8/15/2013; 8/15/2013 note: may have ended 12/31/2012, 22 started 1/1/2013 (added below on 8/15/2013)
            ''InlandMarinePersonal = 4
            ''UmbrellaPersonal = 5
            ''Farm = 6
            'WorkersCompensation = 7
            'CommercialAuto = 8
            ''CommercialGarage = 9
            'CommercialBOP = 10
            'HomePersonal = 11 'uncommented 7/24/2013; 8/15/2013 note: may have ended 2/17/2013, 24 started 2/18/2013 but ends 12/31/2013, 45 begins 1/1/2014
            ''CommercialCrime = 12
            'CommercialGeneralLiability = 13
            'CommercialPackage = 14
            ''CommercialUmbrella = 15
            'CommercialProperty = 16
            ''CommercialInlandMarine = 17
            'AutoPersonal = 18 'uncommented 7/24/2013; 8/15/2013 note: may have ended 4/14/2013, 42 started 4/15/2013
            'DwellingFirePersonal = 22 'added 8/15/2013; previously used 3 above

            'updated 11/26/2013
            None
            AutoPersonal '1/21/2015 note: lob = Auto Personal; lobCategory = Auto Personal
            CommercialAuto '1/21/2015 note: lob = Commercial Auto; lobCategory = Commercial Auto
            CommercialBOP '1/21/2015 note: lob = Commercial BOP; lobCategory = Commercial BOP
            CommercialGeneralLiability '1/21/2015 note: lob = Commercial General Liability; lobCategory = Commercial General Liability
            CommercialPackage '1/21/2015 note: lob = Commercial Package; lobCategory = Commercial Policy Package
            CommercialProperty '1/21/2015 note: lob = Commercial Property; lobCategory = Commercial Property
            DwellingFirePersonal '1/21/2015 note: lob = Dwelling Fire Personal; lobCategory = Dwelling Fire Personal
            HomePersonal '1/21/2015 note: lob = Home Personal; lobCategory = Home Personal
            WorkersCompensation '1/21/2015 note: lob = Workers Comp; lobCategory = Workers Compensation
            'updated 1/21/2015
            Farm '1/21/2015 note: lob = Farm; lobCategory = Commercial Farm
            CommercialCrime '1/21/2015 note: lob = Commercial Crime; lobCategory = Commercial Crime
            CommercialInlandMarine '1/21/2015 note: lob = Commercial Inland Marine; lobCategory = Commercial Inland Marine
            CommercialGarage 'added 4/22/2017; note: lob = Commercial Garage; lobCategory = Commercial Garage
            CommercialUmbrella 'added 4/22/2017; note: lob = Commercial Umbrella; lobCategory = Commercial Umbrella
            UmbrellaPersonal ' added 4/20/2020 (renamed from PersonalUmbrella so it matches lobname); note: lob = Umbrella Personal; lobCategory = Umbrella Personal; note: this is for PUP and FUP, with the only difference being the ProgramType (ProgramTypeId 4 for PUP; 5 for FUP)
        End Enum

        ''' <summary>
        ''' test only
        ''' </summary>
        ''' <remarks>disregard</remarks>
        Enum EmployersLiabilityTest
            V100s500s100 = 311
            V500s1c000s500 = 312
            V500s500s500 = 313
            V1c000s1c000s1c000 = 314
            V2c000s2c000s2c000 = 315
        End Enum

        ''' <summary>
        ''' valid submission types
        ''' </summary>
        ''' <remarks></remarks>
        Enum QuickQuoteQuoteOrIssueBound
            Quote = 1
            IssueBound = 2
        End Enum

        'added 10/24/2016
        Enum QuickQuoteTransactionType 'note: this doesn't match Diamond's TranType table... transtype_id 2 = New Business, transtype_id 3 = Endorsement
            None = 0
            NewBusinessQuote = 1
            EndorsementQuote = 2
            ReadOnlyImage = 3
        End Enum

        ' ''' <summary>
        ' ''' valid package part types for CPP
        ' ''' </summary>
        ' ''' <remarks></remarks>
        'Enum QuickQuotePackagePartType '1/21/2015 note: same Enum type is in QuickQuoteXML; 4/10/2015 - removed from here
        '    None = 0
        '    Package = 1
        '    CommercialProperty = 2
        '    GeneralLiability = 3
        '    'updated 1/21/2015
        '    Crime = 4
        '    InlandMarine = 5
        'End Enum

        Dim qqHelper As New QuickQuoteHelperClass

        'Private _XmlType As QuickQuoteXmlType 'removed 7/27/2018
        'Private _LobType As QuickQuoteLobType 'removed 7/16/2018

        'Private _LobId As String 'removed 7/16/2018
        'Private _CompanyId As String 'removed 7/27/2018

        'Private _Success As Boolean'removed 7/27/2018

        'removed 7/27/2018
        'Private _AgencyCode As String
        'Private _AgencyId As String

        'removed 7/27/2018
        ''added 7/19/2012 for App Gap
        'Private _AgencyProducerId As String
        'Private _AgencyProducerCode As String
        'Private _AgencyProducerName As QuickQuoteName

        'Private _QuoteNumber As String 'removed 7/27/2018
        'Private _PolicyNumber As String 'added 10/30/2016; removed 7/27/2018
        'Private _QuoteDescription As String 'removed 7/27/2018
        'Private _State As String 'removed 7/16/2018
        'Private _StateId As String 'removed 7/16/2018
        'Private _EffectiveDate As String 'removed 7/27/2018
        'Private _ExpirationDate As String 'removed 7/27/2018
        'Private _TotalQuotedPremium As String 'removed 7/27/2018
        'removed 7/17/2018
        'Private _OccurrenceLiabilityLimit As String
        'Private _OccurrenceLiabilityLimitId As String
        'Private _OccurrencyLiabilityQuotedPremium As String
        'Private _TenantsFireLiability As String
        'Private _TenantsFireLiabilityId As String
        'Private _TenantsFireLiabilityQuotedPremium As String
        'Private _PropertyDamageLiabilityDeductible As String
        'Private _PropertyDamageLiabilityDeductibleId As String
        'Private _PropertyDamageLiabilityDeductibleOption As String
        'Private _PropertyDamageLiabilityDeductibleOptionId As String
        'Private _HasBusinessMasterEnhancement As Boolean
        'Private _BusinessMasterEnhancementQuotedPremium As String
        'Private _BlanketRatingOption As String
        'Private _BlanketRatingOptionId As String
        'Private _BlanketRatingQuotedPremium As String

        'Private _AdditionalInsuredsText As String
        'removed 7/17/2018
        'Private _AdditionalInsuredsCount As Integer
        'Private _AdditionalInsuredsCheckboxBOP As List(Of QuickQuoteAdditionalInsured) '3/9/2017 - BOP stuff
        'Private _HasAdditionalInsuredsCheckboxBOP As Boolean '3/9/2017 - BOP stuff
        'added for GL 7/12/2012
        'removed 7/17/2018
        'Private _AdditionalInsuredsManualCharge As String
        'Private _AdditionalInsuredsQuotedPremium As String
        'Private _EmployeeBenefitsLiabilityText As String
        'added for GL 7/12/2012
        'removed 7/17/2018
        'Private _EmployeeBenefitsLiabilityOccurrenceLimit As String
        'Private _EmployeeBenefitsLiabilityOccurrenceLimitId As String
        'Private _EmployeeBenefitsLiabilityQuotedPremium As String
        'Private _EmployeeBenefitsLiabilityRetroactiveDate As String 'added 8/29/2012
        'Private _EmployeeBenefitsLiabilityAggregateLimit As String 'added 12/3/2012
        'Private _EmployeeBenefitsLiabilityDeductible As String 'added 12/3/2012
        'Private _HasElectronicData As Boolean 'added 7/7/2016
        'Private _ElectronicDataLimit As String 'added 7/7/2016
        'Private _ElectronicDataQuotedPremium As String '3/9/2017 - BOP stuff
        'Private _ContractorsEquipmentInstallationLimit As String
        'Private _ContractorsEquipmentInstallationLimitId As String
        'Private _ContractorsEquipmentInstallationLimitQuotedPremium As String
        'Private _ContractorsToolsEquipmentBlanket As String
        'Private _ContractorsToolsEquipmentBlanketSubLimitId As String '3/9/2017 - BOP stuff
        'Private _ContractorsToolsEquipmentBlanketQuotedPremium As String
        'Private _ContractorsToolsEquipmentScheduled As String
        'Private _ContractorsToolsEquipmentScheduledQuotedPremium As String
        'Private _ContractorsToolsEquipmentRented As String
        'Private _ContractorsToolsEquipmentRentedQuotedPremium As String
        'Private _ContractorsEmployeeTools As String
        'Private _ContractorsEmployeeToolsQuotedPremium As String
        'Private _CrimeEmpDisEmployeeText As String
        'Private _CrimeEmpDisLocationText As String
        'Private _CrimeEmpDisLimit As String
        'Private _CrimeEmpDisLimitId As String
        'Private _CrimeEmpDisQuotedPremium As String
        'Private _CrimeForgeryLimit As String
        'Private _CrimeForgeryLimitId As String
        'Private _CrimeForgeryQuotedPremium As String
        'Private _HasEarthquake As Boolean
        'Private _EarthquakeQuotedPremium As String
        'Private _HasHiredAuto As Boolean
        'Private _HiredAutoQuotedPremium As String
        'Private _HasNonOwnedAuto As Boolean
        'Private _NonOwnedAutoWithDelivery As Boolean '3/9/2017 - BOP stuff
        'Private _NonOwnedAutoQuotedPremium As String

        'Private _Locations As Generic.List(Of QuickQuoteLocation) 'removed 7/18/2018
        'Private _PolicyCoverages As Generic.List(Of QuickQuoteCoverage) 'removed 7/18/2018
        'Private _ValidationItems As Generic.List(Of QuickQuoteValidationItem)'removed 7/27/2018

        'Private _PropertyDeductibleId As String'removed 7/18/2018

        'Private _Client As QuickQuoteClient'removed 7/27/2018

        'Private _IsNew As Boolean 'removed 7/27/2018
        'Private _BillToId As String '12/13/2012 - also xml field for CurrentBillToId (now being added; doesn't seem to work any better); removed 7/27/2018
        'Private _CurrentBilltoId As String 'added 12/13/2012; removed 7/27/2018
        'Private _CurrentPayplanId As String '12/11/2012 - triggered off this instead of this BillingPayPlanId; removed 7/27/2018
        'Private _PolicyTermId As String 'removed 7/27/2018
        'Private _ReceivedDate As String 'removed 7/27/2018
        'Private _TransactionEffectiveDate As String 'removed 7/27/2018
        'Private _TransactionExpirationDate As String 'added 4/10/2014; removed 7/27/2018
        'Private _TransactionTypeId As String 'removed 7/27/2018
        'Private _TransactionUsersId As String 'removed 7/27/2018
        'Private _VersionId As String 'removed 7/16/2018
        'Private _AddFormsVersionId As String 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
        'Private _RatingVersionId As String 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
        'Private _UnderwritingVersionId As String 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
        'removed 7/18/2018
        'Private _CPP_CPR_PackagePart_VersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CPR_PackagePart_AddFormsVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CPR_PackagePart_RatingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CPR_PackagePart_UnderwritingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CGL_PackagePart_VersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CGL_PackagePart_AddFormsVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CGL_PackagePart_RatingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CGL_PackagePart_UnderwritingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_Main_PackagePart_VersionId As String 'added 11/5/2014
        'Private _CPP_Main_PackagePart_AddFormsVersionId As String 'added 11/5/2014
        'Private _CPP_Main_PackagePart_RatingVersionId As String 'added 11/5/2014
        'Private _CPP_Main_PackagePart_UnderwritingVersionId As String 'added 11/5/2014
        'Private _CPP_CRM_PackagePart_VersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CRM_PackagePart_AddFormsVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CRM_PackagePart_RatingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CRM_PackagePart_UnderwritingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CIM_PackagePart_VersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CIM_PackagePart_AddFormsVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CIM_PackagePart_RatingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _CPP_CIM_PackagePart_UnderwritingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        'Private _WorkflowQueueId As String 'removed 7/27/2018

        'removed 7/27/2018
        'Private _Policyholder As QuickQuotePolicyholder
        'Private _Policyholder2 As QuickQuotePolicyholder

        'removed 7/27/2018
        'Private _BillMethodId As String
        'Private _BillingPayPlanId As String '12/11/2012 - triggered off CurrentPayPlanId instead of this one

        'Private _PolicyOriginTypeId As String'removed 7/27/2018

        'removed 7/19/2018
        'Private _RiskGrade As String
        'Private _RiskGradeLookupId As String 'added 10/31/2012
        'Private _RiskGradeLookupId_Original As String 'added 8/15/2017
        'added 12/3/2012 for CPP
        'removed 7/19/2018
        'Private _CPP_CGL_RiskGrade As String
        'Private _CPP_CGL_RiskGradeLookupId As String
        'Private _CPP_CPR_RiskGrade As String
        'Private _CPP_CPR_RiskGradeLookupId As String
        'added 12/4/2012 for Risk Grade 3 error
        'removed 7/19/2018
        'Private _ErrorRiskGradeLookupId As String
        'Private _ReplacementRiskGradeLookupId As String
        'Private _CPP_CGL_ErrorRiskGradeLookupId As String
        'Private _CPP_CGL_ReplacementRiskGradeLookupId As String
        'Private _CPP_CPR_ErrorRiskGradeLookupId As String
        'Private _CPP_CPR_ReplacementRiskGradeLookupId As String
        'added 1/26/2015 for CIM and CRM
        'removed 7/19/2018
        'Private _CPP_CIM_RiskGrade As String
        'Private _CPP_CIM_RiskGradeLookupId As String
        'Private _CPP_CIM_ErrorRiskGradeLookupId As String
        'Private _CPP_CIM_ReplacementRiskGradeLookupId As String
        'Private _CPP_CRM_RiskGrade As String
        'Private _CPP_CRM_RiskGradeLookupId As String
        'Private _CPP_CRM_ErrorRiskGradeLookupId As String
        'Private _CPP_CRM_ReplacementRiskGradeLookupId As String

        'Private _HasInitiatedFinalize As Boolean 'removed 7/27/2018

        'removed 7/27/2018
        'Private _PolicyId As String
        'Private _PolicyImageNum As String

        'Private _PolicyBridgingURL As String 'removed 7/27/2018

        'removed 7/27/2018
        'Private _PaymentOptions As Generic.List(Of QuickQuotePaymentOption)
        'Private _CurrentlyParsingPaymentOptions As Boolean 'added 9/8/2017

        'Private _GLClassifications As Generic.List(Of QuickQuoteGLClassification) 'removed 7/19/2018

        'WC stuff added 7/9/2012; removed 7/19/2018
        'Private _EmployersLiability As String
        'Private _EmployersLiabilityId As String
        'added 8/14/2012 for WC QuoteSummary dec section
        'Private _EmployersLiabilityQuotedPremium As String 'removed 7/19/2018
        'Private _ExperienceModificationFactor As String'removed 7/27/2018
        'added 11/13/2012 for WCP exp mod
        'Private _ExperienceModificationBureauTypeId As String '-1 = , 0 = N/A, 1 = NCCI; removed 7/27/2018
        'Private _ExperienceModificationRiskIdentifier As String 'removed 7/27/2018
        'Private _ExperienceModifications As List(Of QuickQuoteExperienceModification) 'added 9/18/2017; removed 7/27/2018
        'Private _CanUseExperienceModificationNumForExperienceModificationReconciliation As Boolean 'added 9/18/2017; removed 7/27/2018
        'Private _HasConvertedExperienceModifications As Boolean 'added 9/21/2017; removed 7/27/2018
        'Private _DiamondExperienceModificationIndexesToUpdate As List(Of Integer) 'added 9/23/2017; removed 7/27/2018

        'GL stuff added 7/11/2012; removed 7/19/2018
        'Private _ProgramType As String
        'Private _ProgramTypeId As String '3/3/2015 note: need to make static data for Farm; 4/2/2015 note: added separate variable/property for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
        'Private _GeneralAggregateLimit As String 'added 7/12/2012
        'Private _GeneralAggregateLimitId As String
        'Private _GeneralAggregateQuotedPremium As String 'added 8/30/2012
        'Private _ProductsCompletedOperationsAggregateLimit As String
        'Private _ProductsCompletedOperationsAggregateLimitId As String
        'Private _ProductsCompletedOperationsAggregateQuotedPremium As String 'added 8/30/2012
        'Private _PersonalAndAdvertisingInjuryLimit As String
        'Private _PersonalAndAdvertisingInjuryLimitId As String
        'Private _PersonalAndAdvertisingInjuryQuotedPremium As String 'added 8/30/2012
        'Private _DamageToPremisesRentedLimit As String
        'Private _DamageToPremisesRentedLimitId As String
        'Private _DamageToPremisesRentedQuotedPremium As String 'added 8/30/2012
        'Private _MedicalExpensesLimit As String
        'Private _MedicalExpensesLimitId As String
        'Private _MedicalExpensesQuotedPremium As String 'added 8/30/2012

        'added 7/16/2012; removed 7/19/2018
        'Private _AdditionalInsureds As Generic.List(Of QuickQuoteAdditionalInsured)
        'Private _AdditionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) 'added 6/5/2017

        'added 7/16/2012 for WC; removed 7/19/2018
        'Private _HasExclusionOfAmishWorkers As Boolean
        'Private _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers As Boolean
        'Private _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers As Boolean
        'Private _HasWaiverOfSubrogation As Boolean
        'Private _WaiverOfSubrogationNumberOfWaivers As Integer
        'Private _WaiverOfSubrogationPremium As String
        'Private _WaiverOfSubrogationPremiumId As String
        'Private _NeedsToUpdateWaiverOfSubrogationPremiumId As Boolean 'added 10/13/2017

        'Private _InclusionsExclusions As Generic.List(Of QuickQuoteInclusionExclusion) 'removed 7/19/2018

        'added 7/17/2012 for WC
        'Private _AnniversaryRatingEffectiveDate As String 'removed 7/19/2018
        'Private _AnniversaryRatingExpirationDate As String 'removed 7/19/2018
        'Private _GuaranteedRatePeriodEffectiveDate As String 'removed 7/27/2018
        'Private _GuaranteedRatePeriodExpirationDate As String 'removed 7/27/2018
        'Private _ModificationProductionDate As String 'removed 7/27/2018
        'Private _RatingEffectiveDate As String 'removed 7/27/2018

        'added 7/19/2012 for App Gap; removed 7/19/2018
        'Private _ContractorsEquipmentScheduledItems As Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem)
        'Private _ContractorsEquipmentScheduledItemsBackup As Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem) 'added 6/5/2017

        'added 8/2/2012 for App Gap
        'Private _AdditionalPolicyholders As Generic.List(Of QuickQuoteAdditionalPolicyholder)'removed 7/27/2018

        '*8/4/2012; removed 7/19/2018
        'Private _LossHistoryRecords As Generic.List(Of QuickQuoteLossHistoryRecord)

        '*8/4/2012; removed 7/19/2018
        'Private _PriorCarrier As QuickQuotePriorCarrier

        'added 8/7/2012 for AppGap; removed 7/19/2018
        'Private _AdditionalInterestNamesAndAddresses As Generic.List(Of QuickQuoteGenericNameAddress)

        'removed 7/19/2018
        'Private _HasBarbersProfessionalLiability As Boolean
        'Private _BarbersProfessionalLiabiltyQuotedPremium As String
        'Private _BarbersProfessionalLiabilityFullTimeEmpNum As String
        'Private _BarbersProfessionalLiabilityPartTimeEmpNum As String
        'Private _BarbersProfessionalLiabilityDescription As String '3/9/2017 - BOP stuff
        'Private _HasBeauticiansProfessionalLiability As Boolean
        'Private _BeauticiansProfessionalLiabilityQuotedPremium As String
        'Private _BeauticiansProfessionalLiabilityFullTimeEmpNum As String
        'Private _BeauticiansProfessionalLiabilityPartTimeEmpNum As String
        'Private _BeauticiansProfessionalLiabilityDescription As String '3/9/2017 - BOP stuff
        'Private _HasFuneralDirectorsProfessionalLiability As Boolean
        'Private _FuneralDirectorsProfessionalLiabilityQuotedPremium As String
        'Private _FuneralDirectorsProfessionalLiabilityEmpNum As String
        'Private _HasPrintersProfessionalLiability As Boolean
        'Private _PrintersProfessionalLiabilityQuotedPremium As String
        'Private _PrintersProfessionalLiabilityLocNum As String
        'Private _HasSelfStorageFacility As Boolean
        'Private _SelfStorageFacilityQuotedPremium As String
        ''Private _SelfStorageFacilityLocNum As String'removed 7/3/2012 since not available in UI
        'Private _SelfStorageFacilityLimit As String 'added 7/3/2012 since not originally in QuoteSummary requirements
        ''added 7/3/2012
        'Private _HasVeterinariansProfessionalLiability As Boolean
        'Private _VeterinariansProfessionalLiabilityEmpNum As String
        'Private _VeterinariansProfessionalLiabilityQuotedPremium As String
        'Private _HasPharmacistProfessionalLiability As Boolean '3/9/2017 - BOP stuff
        'Private _PharmacistAnnualGrossSales As String '3/9/2017 - BOP stuff
        'Private _PharmacistQuotedPremium As String '3/9/2017 - BOP stuff
        'Private _HasOpticalAndHearingAidProfessionalLiability As Boolean
        'Private _OpticalAndHearingAidProfessionalLiabilityEmpNum As String
        'Private _OpticalAndHearingAidProfessionalLiabilityQuotedPremium As String

        '3/9/2017 - BOP stuff; removed 7/19/2018
        'Private _HasMotelCoverage As Boolean
        'Private _MotelCoveragePerGuestLimitId As String
        'Private _MotelCoveragePerGuestLimit As String
        'Private _MotelCoveragePerGuestQuotedPremium As String
        'Private _MotelCoverageSafeDepositLimitId As String
        'Private _MotelCoverageSafeDepositDeductibleId As String
        'Private _MotelCoverageSafeDepositLimit As String
        'Private _MotelCoverageSafeDepositDeductible As String
        'Private _MotelCoverageQuotedPremium As String
        'Private _MotelCoverageSafeDepositQuotedPremium As String
        'Private _HasPhotographyCoverage As Boolean
        'Private _HasPhotographyCoverageScheduledCoverages As Boolean
        'Private _PhotographyScheduledCoverages As List(Of QuickQuoteCoverage)
        'Private _HasPhotographyMakeupAndHair As Boolean
        'Private _PhotographyMakeupAndHairQuotedPremium As String
        'Private _PhotographyCoverageQuotedPremium As String
        'Private _HasLiquorLiability As Boolean
        'Private _LiquorLiabilityClassCodeTypeId As String '12 = 58161 - Restaurant Includes Package Sales, 13 = 59211 - Package Sales for Consumption Off Premises
        'Private _LiquorLiabilityAnnualGrossPackageSalesReceipts As String
        'Private _LiquorLiabilityAnnualGrossAlcoholSalesReceipts As String
        ''Private _LiquorLiabilityAggregateLimit As String
        'Private _HasResidentialCleaning As Boolean
        'Private _ResidentialCleaningQuotedPremium As String

        'removed 7/20/2018
        ''added 7/13/2012 for GL (liquor stuff isn't working yet; rating error)
        'Private _LiquorLiabilityOccurrenceLimit As String
        'Private _LiquorLiabilityOccurrenceLimitId As String
        'Private _LiquorLiabilityClassification As String
        'Private _LiquorLiabilityClassificationId As String
        'Private _LiquorSales As String
        'Private _LiquorLiabilityQuotedPremium As String 'added 8/27/2012 for GL
        ''Private _LiquorRate As String
        ''Private _LiquorMinimumPremium As String
        'Private _ProfessionalLiabilityCemetaryNumberOfBurials As String
        'Private _ProfessionalLiabilityCemetaryQuotedPremium As String 'added 8/30/2012
        'Private _ProfessionalLiabilityFuneralDirectorsNumberOfBodies As String
        'Private _ProfessionalLiabilityPastoralNumberOfClergy As String
        'Private _ProfessionalLiabilityPastoralQuotedPremium As String 'added 8/30/2012

        'removed 7/20/2018
        'Private _IRPM_ManagementCooperation As String
        'Private _IRPM_ManagementCooperationDesc As String
        'Private _IRPM_Location As String
        'Private _IRPM_LocationDesc As String
        'Private _IRPM_BuildingFeatures As String
        'Private _IRPM_BuildingFeaturesDesc As String
        'Private _IRPM_Premises As String
        'Private _IRPM_PremisesDesc As String
        'Private _IRPM_Employees As String
        'Private _IRPM_EmployeesDesc As String
        'Private _IRPM_Protection As String
        'Private _IRPM_ProtectionDesc As String
        'Private _IRPM_CatostrophicHazards As String
        'Private _IRPM_CatostrophicHazardsDesc As String
        'Private _IRPM_ManagementExperience As String
        'Private _IRPM_ManagementExperienceDesc As String
        ''added 8/16/2012 for WC IRPM
        'Private _IRPM_Equipment As String
        'Private _IRPM_EquipmentDesc As String
        'Private _IRPM_MedicalFacilities As String
        'Private _IRPM_MedicalFacilitiesDesc As String
        'Private _IRPM_ClassificationPeculiarities As String
        'Private _IRPM_ClassificationPeculiaritiesDesc As String
        ''added 8/28/2012 for GL IRPM
        'Private _IRPM_GL_ManagementCooperation As String
        'Private _IRPM_GL_ManagementCooperationDesc As String
        'Private _IRPM_GL_Location As String
        'Private _IRPM_GL_LocationDesc As String
        'Private _IRPM_GL_Premises As String
        'Private _IRPM_GL_PremisesDesc As String
        'Private _IRPM_GL_Equipment As String
        'Private _IRPM_GL_EquipmentDesc As String
        'Private _IRPM_GL_Employees As String
        'Private _IRPM_GL_EmployeesDesc As String
        'Private _IRPM_GL_ClassificationPeculiarities As String
        'Private _IRPM_GL_ClassificationPeculiaritiesDesc As String
        ''added 10/3/2012 for CAP IRPM
        'Private _IRPM_CAP_Management As String
        'Private _IRPM_CAP_ManagementDesc As String
        'Private _IRPM_CAP_Employees As String
        'Private _IRPM_CAP_EmployeesDesc As String
        'Private _IRPM_CAP_Equipment As String
        'Private _IRPM_CAP_EquipmentDesc As String
        'Private _IRPM_CAP_SafetyOrganization As String
        'Private _IRPM_CAP_SafetyOrganizationDesc As String
        ''added 10/17/2012 for CPR IRPM
        'Private _IRPM_CPR_Management As String
        'Private _IRPM_CPR_ManagementDesc As String
        'Private _IRPM_CPR_PremisesAndEquipment As String
        'Private _IRPM_CPR_PremisesAndEquipmentDesc As String
        ''added 6/11/2015 for FAR IRPM
        'Private _IRPM_FAR_CareConditionOfEquipPremises As String
        'Private _IRPM_FAR_CareConditionOfEquipPremisesDesc As String
        'Private _IRPM_FAR_Cooperation As String
        'Private _IRPM_FAR_CooperationDesc As String
        'Private _IRPM_FAR_DamageSusceptibility As String
        'Private _IRPM_FAR_DamageSusceptibilityDesc As String
        'Private _IRPM_FAR_DispersionOrConcentration As String
        'Private _IRPM_FAR_DispersionOrConcentrationDesc As String
        'Private _IRPM_FAR_SuperiorOrInferiorStructureFeatures As String
        'Private _IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc As String
        'Private _IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding As String
        'Private _IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc As String
        'Private _IRPM_FAR_Location As String
        'Private _IRPM_FAR_LocationDesc As String
        'Private _IRPM_FAR_MiscProtectFeaturesOrHazards As String
        'Private _IRPM_FAR_MiscProtectFeaturesOrHazardsDesc As String
        'Private _IRPM_FAR_RoofCondition As String
        'Private _IRPM_FAR_RoofConditionDesc As String
        'Private _IRPM_FAR_StoragePracticesAndHazardousOperations As String
        'Private _IRPM_FAR_StoragePracticesAndHazardousOperationsDesc As String
        'Private _IRPM_FAR_PastLosses As String
        'Private _IRPM_FAR_PastLossesDesc As String
        'Private _IRPM_FAR_SupportingBusiness As String
        'Private _IRPM_FAR_SupportingBusinessDesc As String
        'Private _IRPM_FAR_RegularOnsiteInspections As String
        'Private _IRPM_FAR_RegularOnsiteInspectionsDesc As String

        'added 8/7/2012 for IRPM; removed 7/20/2018
        'Private _ScheduledRatings As Generic.List(Of QuickQuoteScheduledRating)

        'removed 7/20/2018
        ''added 8/13/2012 for appGap
        'Private _ExclusionOfAmishWorkerRecords As Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
        'Private _ExclusionOfSoleProprietorRecords As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
        'Private _InclusionOfSoleProprietorRecords As Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
        'Private _WaiverOfSubrogationRecords As Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
        ''added 10/10/2017
        'Private _ExclusionOfAmishWorkerRecordsBackup As Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
        'Private _ExclusionOfSoleProprietorRecordsBackup As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
        'Private _InclusionOfSoleProprietorRecordsBackup As Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
        'Private _WaiverOfSubrogationRecordsBackup As Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)

        'added 8/14/2012 for Quote Summary dec section; removed 7/20/2018
        'Private _Dec_BuildingLimit_All_Premium As String
        'Private _Dec_BuildingPersPropLimit_All_Premium As String
        'Private _Dec_BOP_OptCovs_Premium As String

        'removed 7/20/2018
        ''added 8/14/2012 for WC Quote Summary dec section
        'Private _ExpModQuotedPremium As String
        'Private _ScheduleModQuotedPremium As String
        'Private _TerrorismQuotedPremium As String
        'Private _PremDiscountQuotedPremium As String
        'Private _MinimumQuotedPremium As String
        'Private _MinimumPremiumAdjustment As String '1/29/2013 - now being used for BOP too (BOP doesn't use _MinimumQuotedPremium)
        'Private _TotalEstimatedPlanPremium As String
        'Private _SecondInjuryFundQuotedPremium As String
        ''added 8/16/2012
        'Private _Dec_LossConstantPremium As String
        'Private _Dec_ExpenseConstantPremium As String
        'Private _Dec_WC_TotalPremiumDue As String

        'removed 7/20/2018
        ''8/16/2012:  need to add ability to save underwriting questions
        ''added 8/16/2012 PM
        'Private _PolicyUnderwritings As Generic.List(Of QuickQuotePolicyUnderwriting)
        ''Private _PolicyUnderwritingCodeIds As Generic.List(Of String) 'added 11/26/2012 for CPP (to keep track of these so they aren't duplicated)
        ''updated 12/24/2012 since same code id can be used w/ different level or tab id
        'Private _PolicyUnderwritingCodeAndLevelAndTabIds As Generic.List(Of String)

        'added 8/20/2012 PM
        'Private _QuoteTypeId As String '0 = N/A; 1 = Quick Quote; 2 = New Application; 3 = Finalize Quote; removed 7/27/2018

        'added 8/22/2012 for GL; removed 7/20/2018
        'Private _GL_PremisesAndProducts_Deductible As String
        'Private _GL_PremisesAndProducts_DeductibleId As String
        'Private _GL_PremisesAndProducts_Description As String
        'Private _GL_PremisesAndProducts_DeductibleCategoryType As String
        'Private _GL_PremisesAndProducts_DeductibleCategoryTypeId As String
        'Private _GL_PremisesAndProducts_DeductiblePerType As String
        'Private _GL_PremisesAndProducts_DeductiblePerTypeId As String
        'Private _Has_GL_PremisesAndProducts As Boolean

        'added 8/28/2012 for GL dec section; removed 7/20/2018
        'Private _GL_PremisesTotalQuotedPremium As String
        'Private _GL_ProductsTotalQuotedPremium As String
        'Private _GL_PremisesPolicyLevelQuotedPremium As String
        'Private _GL_ProductsPolicyLevelQuotedPremium As String
        'Private _GL_PremisesMinimumQuotedPremium As String
        'Private _GL_PremisesMinimumPremiumAdjustment As String
        'Private _GL_ProductsMinimumQuotedPremium As String
        'Private _GL_ProductsMinimumPremiumAdjustment As String
        'Private _Dec_GL_OptCovs_Premium As String

        'removed 7/20/2018
        ''added 8/29/2012
        'Private _Drivers As Generic.List(Of QuickQuoteDriver)
        'Private _Vehicles As Generic.List(Of QuickQuoteVehicle)
        ''added 8/31/2012 for CAP
        'Private _HasFarmPollutionLiability As Boolean
        'Private _FarmPollutionLiabilityQuotedPremium As String
        'Private _HasHiredBorrowedNonOwned As Boolean
        'Private _HasNonOwnershipLiability As Boolean
        'Private _NonOwnershipLiabilityNumberOfEmployees As String
        'Private _NonOwnership_ENO_RatingTypeId As String
        'Private _NonOwnership_ENO_RatingType As String
        'Private _NonOwnershipLiabilityQuotedPremium As String
        'Private _HasHiredBorrowedLiability As Boolean
        'Private _HiredBorrowedLiabilityQuotedPremium As String
        'Private _HasHiredCarPhysicalDamage As Boolean 'in HiredBorrowedLossOfUse section
        'Private _HiredBorrowedLossOfUseQuotedPremium As String
        'Private _ComprehensiveDeductible As String
        'Private _ComprehensiveDeductibleId As String
        'Private _ComprehensiveQuotedPremium As String
        'Private _CollisionDeductible As String
        'Private _CollisionDeductibleId As String
        'Private _CollisionQuotedPremium As String
        ''added 9/4/2012 for CAP
        'Private _Liability_UM_UIM_Limit As String
        'Private _Liability_UM_UIM_LimitId As String
        'Private _Liability_UM_UIM_QuotedPremium As String
        'Private _MedicalPaymentsLimit As String
        'Private _MedicalPaymentsLimitId As String
        'Private _MedicalPaymentsQuotedPremium As String

        'added 9/4/2012 for app gap; removed 7/20/2018
        'Private _QuoteOrIssueBound As QuickQuoteQuoteOrIssueBound
        'Private _IssueBoundEffectiveDate As String
        'Private _Modifiers As Generic.List(Of QuickQuoteModifier)

        'added 9/10/2012 PM for validation purposes; removed 7/20/2018
        'Private _HasLocation As Boolean
        'Private _HasLocationWithBuilding As Boolean
        'Private _HasLocationWithClassification As Boolean

        'removed 7/20/2018
        'Private _AutoSymbols As Generic.List(Of QuickQuoteAutoSymbol) 'added 9/25/2012 for CAP
        ''added more props for developers 10/1/2012
        ''Private _LiabilityAutoSymbols As Generic.List(Of Integer)
        ''Private _MedicalPaymentsAutoSymbols As Generic.List(Of Integer)
        ''Private _UninsuredMotoristAutoSymbols As Generic.List(Of Integer)
        ''Private _UnderinsuredMotoristAutoSymbols As Generic.List(Of Integer)
        ''Private _ComprehensiveCoverageAutoSymbols As Generic.List(Of Integer)
        ''Private _CollisionCoverageAutoSymbols As Generic.List(Of Integer)
        ''Private _NonOwnershipAutoSymbols As Generic.List(Of Integer)
        ''Private _HiredBorrowedAutoSymbols As Generic.List(Of Integer)
        'Private _LiabilityAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _MedicalPaymentsAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _UninsuredMotoristAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _UnderinsuredMotoristAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _ComprehensiveCoverageAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _CollisionCoverageAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _NonOwnershipAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _HiredBorrowedAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
        'Private _UseDeveloperAutoSymbols As Boolean
        'Private _TowingAndLaborAutoSymbolObject As QuickQuoteDeveloperAutoSymbol 'added 4/16/2013 for CAP

        'removed 7/20/2018
        'Private _PolicyTypeId As String 'added 9/27/2012 for CPR
        'Private _PolicyType As String 'added 9/27/2012 for CPR

        'added 10/3/2012 for CAP declarations section; removed 7/20/2018
        'Private _VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium As String
        'Private _VehiclesTotal_MedicalPaymentsQuotedPremium As String
        'Private _VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium As String
        'Private _VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium As String
        'Private _VehiclesTotal_UM_UIM_CovsQuotedPremium As String 'combines _VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium and _VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium
        'Private _VehiclesTotal_ComprehensiveCoverageQuotedPremium As String
        'Private _VehiclesTotal_CollisionCoverageQuotedPremium As String
        'Private _VehiclesTotal_TowingAndLaborQuotedPremium As String
        'Private _VehiclesTotal_RentalReimbursementQuotedPremium As String
        'Private _Dec_CAP_OptCovs_Premium As String
        'Private _Dec_CAP_OptCovs_Premium_Without_GarageKeepers As String 'added 5/10/2017 for CAP/GAR

        'added 10/23/2012 for CPP
        'Private _PackageParts As Generic.List(Of QuickQuotePackagePart) 'removed 7/27/2018
        'removed 7/20/2018
        'Private _PackageTypeId As String
        'Private _PackageType As String
        'Private _PackageModificationAssignmentTypeId As String
        'Private _PackageModificationAssignmentType As String

        'added 11/14/2012 for CPP (since there are separate ones for CGL and CPR); removed 7/20/2018
        'Private _Has_PackageGL_EnhancementEndorsement As Boolean
        'Private _PackageGL_EnhancementEndorsementQuotedPremium As String
        'Private _Has_PackageCPR_EnhancementEndorsement As Boolean
        'Private _PackageCPR_EnhancementEndorsementQuotedPremium As String

        'added 11/15/2012 for CPR declarations section; removed 7/20/2018
        'Private _CPR_BuildingsTotal_BuildingCovQuotedPremium As String
        'Private _CPR_BuildingsTotal_PersPropCoverageQuotedPremium As String
        'Private _CPR_BuildingsTotal_PersPropOfOthersQuotedPremium As String
        'Private _CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium As String
        'Private _CPR_BuildingsTotal_EQ_QuotedPremium As String

        'added 11/16/2012 for CPR declarations section (could be used for any LOB though); removed 7/20/2018
        'Private _LocationsTotal_EquipmentBreakdownQuotedPremium As String

        'removed 7/20/2018
        ''added 11/19/2012 for CPP
        'Private _CPP_GL_PackagePart_QuotedPremium As String
        'Private _CPP_CPR_PackagePart_QuotedPremium As String
        ''added 1/26/2015 for CIM and CRM
        'Private _CPP_CIM_PackagePart_QuotedPremium As String
        'Private _CPP_CRM_PackagePart_QuotedPremium As String
        'Private _CPP_GAR_PackagePart_QuotedPremium As String 'added 4/22/2017

        'added 12/12/2012 for CAP auto symbols; removed 7/20/2018
        'Private _CAP_Liability_WouldHaveSymbol8 As Boolean
        'Private _CAP_Liability_WouldHaveSymbol9 As Boolean
        'Private _CAP_Comprehensive_WouldHaveSymbol8 As Boolean
        'Private _CAP_Collision_WouldHaveSymbol8 As Boolean

        'removed 7/27/2018
        ''added 12/12/2012 for EFT payplan; 4/14/2015 note: may need to start storing eftAccountId... so it uses the same one on re-rates
        'Private _EFT_BankRoutingNumber As String
        'Private _EFT_BankAccountNumber As String
        'Private _EFT_BankAccountTypeId As String
        'Private _EFT_DeductionDay As String

        'added 12/13/2012 for same information that uses different fields (like BillingPayPlanId and CurrentPayPlanId)
        'Private _OnlyUsePropertyToSetFieldWithSameName As Boolean 'removed 7/27/2018

        'removed 7/27/2018
        ''added 2/7/2013 to track some database information
        'Private _Database_QuoteId As String
        'Private _Database_QuoteXmlId As String
        'Private _Database_QuoteNumber As String
        'Private _Database_LobId As String
        'Private _Database_CurrentQuoteXmlId As String
        'Private _Database_XmlQuoteId As String
        'Private _Database_LastAvailableQuoteNumber As String
        ''added more 1/8/2016
        'Private _Database_QuoteStatusId As String
        'Private _Database_XmlStatusId As String
        'Private _Database_IsPolicy As Boolean
        'Private _Database_DiamondPolicyNumber As String
        'Private _Database_OriginatedInVR As Boolean
        ''added more 4/6/2018 HOM2011 Upgrade
        'Private _Database_EffectiveDate As String


        '*added 3/5/2013 for testing arbitrary fields in xml
        'Private _TestObjects As Generic.List(Of TestObject)

        'removed 7/20/2018
        ''added 3/26/2013 for CPR
        'Private _HasBlanketBuilding As Boolean
        'Private _HasBlanketContents As Boolean
        'Private _HasBlanketBuildingAndContents As Boolean
        'Private _HasBlanketBusinessIncome As Boolean
        'Private _BlanketBuildingQuotedPremium As String
        'Private _BlanketContentsQuotedPremium As String
        'Private _BlanketBuildingAndContentsQuotedPremium As String
        'Private _BlanketBusinessIncomeQuotedPremium As String
        'Private _BlanketBuildingCauseOfLossTypeId As String
        'Private _BlanketBuildingCauseOfLossType As String
        'Private _BlanketContentsCauseOfLossTypeId As String
        'Private _BlanketContentsCauseOfLossType As String
        'Private _BlanketBuildingAndContentsCauseOfLossTypeId As String
        'Private _BlanketBuildingAndContentsCauseOfLossType As String
        'Private _BlanketBusinessIncomeCauseOfLossTypeId As String
        'Private _BlanketBusinessIncomeCauseOfLossType As String
        ''added more blanket stuff 4/16/2013
        'Private _BlanketBuildingLimit As String
        'Private _BlanketBuildingCoinsuranceTypeId As String
        'Private _BlanketBuildingCoinsuranceType As String
        'Private _BlanketBuildingValuationId As String
        'Private _BlanketBuildingValuation As String
        'Private _BlanketContentsLimit As String
        'Private _BlanketContentsCoinsuranceTypeId As String
        'Private _BlanketContentsCoinsuranceType As String
        'Private _BlanketContentsValuationId As String
        'Private _BlanketContentsValuation As String
        'Private _BlanketBuildingAndContentsLimit As String
        'Private _BlanketBuildingAndContentsCoinsuranceTypeId As String
        'Private _BlanketBuildingAndContentsCoinsuranceType As String
        'Private _BlanketBuildingAndContentsValuationId As String
        'Private _BlanketBuildingAndContentsValuation As String
        'Private _BlanketBusinessIncomeLimit As String
        'Private _BlanketBusinessIncomeCoinsuranceTypeId As String
        'Private _BlanketBusinessIncomeCoinsuranceType As String
        'Private _BlanketBusinessIncomeValuationId As String
        'Private _BlanketBusinessIncomeValuation As String
        ''added 5/7/2013 to combine CPR blanket premiums
        'Private _CPR_BlanketCoverages_TotalPremium As String
        'Private _BlanketCombinedEarthquake_QuotedPremium As String
        ''added 5/3/2018 for CPR
        'Private _BlanketBuildingIsAgreedValue As Boolean
        'Private _BlanketContentsIsAgreedValue As Boolean
        'Private _BlanketBuildingAndContentsIsAgreedValue As Boolean
        'Private _BlanketBusinessIncomeIsAgreedValue As Boolean

        'added 4/17/2013 for CPR to total up Property in the Open coverage premiums; removed 7/20/2018
        'Private _LocationsTotal_PropertyInTheOpenRecords_QuotedPremium As String
        'Private _LocationsTotal_PropertyInTheOpenRecords_EQ_Premium As String
        'Private _LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium As String

        'added 5/1/2013 for use w/ quote proposal
        'Private _Agency As QuickQuoteAgency 'removed 7/27/2018

        'Private _PolicyImageId As String 'testing 7/2/2013; removed 7/27/2018

        'added 7/25/2013 for PPA (also for HOM); removed 7/20/2018
        'Private _TierTypeId As String 'may need matching TierType variable/property
        'Private _UseTierOverride As Boolean
        'Private _TierAdjustmentTypeId As String 'may need matching TierAdjustmentType variable/property

        'added 7/30/2013 for HOM; removed 7/20/2018
        'Private _PersonalLiabilityLimitId As String 'may need matching PersonalLiabilityLimit variable/property
        'Private _PersonalLiabilityQuotedPremium As String

        'removed 7/20/2018
        ''added 8/2/2013 for Personal Lines
        'Private _Applicants As List(Of QuickQuoteApplicant)
        ''added 8/6/2013
        'Private _Operators As List(Of QuickQuoteOperator)
        ''added 8/7/2013 for PPA
        'Private _Exclusions As List(Of QuickQuoteExclusion)
        'Private _HouseholdMembers As List(Of QuickQuoteHouseholdMember)
        'Private _ResidenceInfo As QuickQuoteResidenceInfo

        'Private _ThirdPartyData As QuickQuoteThirdPartyData 'added 9/17/2013; removed 7/20/2018

        'added 1/14/2014 for PPA; removed 7/20/2018
        'Private _AutoHome As Boolean
        'Private _EmployeeDiscount As Boolean
        'Private _FacultativeReinsurance As Boolean
        'Private _SelectMarketCredit As Boolean


        'added 5-9-18 Parachute; removed 7/20/2018
        'Private _MultiLineDiscountValue As String

        'added 2/18/2014; removed 7/20/2018
        'Private _HasConvertedCoverages As Boolean
        'Private _HasConvertedInclusionsExclusions As Boolean
        'Private _HasConvertedModifiers As Boolean
        'Private _HasConvertedScheduledRatings As Boolean

        'added 4/2/2014; removed 7/20/2018
        'Private _VehiclesTotal_PremiumFullTerm As String
        'Private _LocationsTotal_PremiumFullTerm As String
        'Private _Locations_BuildingsTotal_PremiumFullTerm As String

        'added 4/22/2014; removed 7/20/2018
        'Private _CanUseDriverNumForDriverReconciliation As Boolean
        'Private _CanUseVehicleNumForVehicleReconciliation As Boolean
        'Private _CanUseExclusionNumForExclusionReconciliation As Boolean 'added 4/23/2014
        'Private _CanUseLossHistoryNumForLossHistoryReconciliation As Boolean 'added 4/23/2014
        'Private _CanUseLocationNumForLocationReconciliation As Boolean 'added 4/23/2014
        'Private _CanUseApplicantNumForApplicantReconciliation As Boolean 'added 4/24/2014

        'Private _BillingAddressee As QuickQuoteBillingAddressee 'added 5/19/2014; removed 7/27/2018

        'added 5/22/2014 for PPA (Quote Summary); removed 7/20/2018
        'Private _VehiclesTotal_BodilyInjuryLiabilityQuotedPremium As String
        'Private _VehiclesTotal_PropertyDamageQuotedPremium As String
        'Private _VehiclesTotal_UninsuredCombinedSingleQuotedPremium As String
        'Private _VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium As String
        'Private _VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium As String
        'Private _VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium As String
        'Private _VehiclesTotal_TransportationExpenseQuotedPremium As String
        'Private _VehiclesTotal_AutoLoanOrLeaseQuotedPremium As String
        'Private _VehiclesTotal_TapesAndRecordsQuotedPremium As String
        'Private _VehiclesTotal_SoundEquipmentQuotedPremium As String
        'Private _VehiclesTotal_ElectronicEquipmentQuotedPremium As String
        'Private _VehiclesTotal_TripInterruptionQuotedPremium As String

        'Private _TieringInformation As QuickQuoteTieringInformation 'added 7/28/2014; removed 7/20/2018

        '9/23/2014 - added EPLI logic from DiamondQuickQuote; removed 7/20/2018
        'Private _HasEPLI As Boolean 'added 4/9/2014 for EPLI
        'Private _EPLI_Applied As Boolean 'added 10/7/2014 for new VR Commercial; not currently used from library
        'Private _EPLIPremium As String ' added 4/10/2014
        'Private _EPLICoverageLimitId As String ' added 4/10/2014
        'Private _EPLIDeductibleId As String ' added 4/10/2014
        'Private _EPLICoverageTypeId As String 'added 4/10/2014

        'removed 7/20/2018
        'Private _BlanketWaiverOfSubrogation As String ' MGB 2/9/15 Bug 4040 (CGL); ported over from DiamondQuickQuote 3/5/2015; now use this for CAP and WCP Matt A 4-14-17
        'Private _BlanketWaiverOfSubrogationQuotedPremium As String ' MGB 2/11/15 Bug 4040 (CGL); ported over from DiamondQuickQuote 3/5/2015; now use this for CAP and WCP Matt A 4-14-17

        'removed 7/20/2018
        'Private _HasCondoDandO As Boolean ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
        'Private _CondoDandOAssociatedName As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
        'Private _CondoDandODeductibleId As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
        'Private _CondoDandOPremium As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
        'Private _CondoDandOManualLimit As String ' added 12/20/2016 Matt A; added 2/6/2017 from source version to local version

        'Private _CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation As Boolean 'added 10/15/2014 for reconciliation; removed 7/20/2018

        'Private _CanUseOperatorNumForOperatorReconciliation As Boolean 'added 10/29/2014; removed 7/20/2018

        'added 11/17/2014 for HOM; removed 7/20/2018
        'Private _Locations_InlandMarinesTotal_Premium As String
        'Private _Locations_InlandMarinesTotal_CoveragePremium As String
        'Private _Locations_RvWatercraftsTotal_Premium As String
        'Private _Locations_RvWatercraftsTotal_CoveragesPremium As String

        'Private _FirstWrittenDate As String 'added 11/19/2014; will only be used if it's there... else will keep Diamond default; removed 7/27/2018

        'removed 7/20/2018
        ''added 1/19/2015 for CIM
        'Private _ScheduledCoverages As List(Of QuickQuoteScheduledCoverage)
        'Private _HasConvertedScheduledCoverages As Boolean
        'Private _CanUseScheduledCoverageNumForScheduledCoverageReconciliation As Boolean 'added 1/22/2015
        'Private _ContractorsEquipmentScheduledCoverages As List(Of QuickQuoteContractorsEquipmentScheduledCoverage) 'added 1/22/2015
        ''added 1/23/2015
        'Private _ContractorsEquipmentScheduleCoinsuranceTypeId As String 'may need static data placeholder; may be defaulted as there's just one value in dropdown (1 = per 100); 2/9/2015 note: previous comment is likely talking about CoverageBasisTypeId
        'Private _ContractorsEquipmentScheduleDeductibleId As String 'may need static data placeholder
        'Private _ContractorsEquipmentScheduleRate As String
        ''Private _ContractorsEquipmentScheduleCoverageBasisTypeId As String 'may need static data placeholder; removed 4/2/2015... will default to 1
        'Private _ContractorsEquipmentScheduleQuotedPremium As String
        ''Private _ContractorsEquipmentScheduleDepositPremiumFactor As String 'may not need; appears to be defaulted to 0.500; would need to add DepositPremiumFactor prop to Coverage object (CoverageDetail)
        ''Private _ContractorsEquipmentScheduleManualLimitAmount As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for ContractorsEquipmentScheduledCoverages
        ''added 1/26/2015
        'Private _ContractorsEquipmentLeasedRentedFromOthersLimit As String
        ''Private _ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        'Private _ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId As String 'may not need this; unable to see where value in xml came from when looking at the UI
        'Private _ContractorsEquipmentLeasedRentedFromOthersRate As String
        'Private _ContractorsEquipmentLeasedRentedFromOthersQuotedPremium As String
        ''added 1/27/2015
        'Private _ContractorsEquipmentRentalReimbursementLimit As String
        ''Private _ContractorsEquipmentRentalReimbursementCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        'Private _ContractorsEquipmentRentalReimbursementRate As String
        'Private _ContractorsEquipmentRentalReimbursementQuotedPremium As String
        'Private _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit As String
        ''Private _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        'Private _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate As String
        'Private _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId As String '2/25/2015 note: static data
        'Private _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium As String
        'Private _ContractorsEquipmentSmallToolsEndorsementPerToolLimit As String
        ''Private _ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        'Private _ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium As String
        'Private _SmallToolsLimit As String
        ''Private _SmallToolsCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        'Private _SmallToolsRate As String
        'Private _SmallToolsDeductibleId As String '2/25/2015 note: static data
        'Private _SmallToolsAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _SmallToolsQuotedPremium As String
        'Private _SmallToolsIsEmployeeTools As Boolean 'added 7/15/2015 for missed CIM requirement (on small tools floater)
        'Private _SmallToolsIsToolsLeasedOrRented As Boolean 'added 7/15/2015 for missed CIM requirement (on small tools floater)
        'Private _SmallToolsAnyOneLossCatastropheLimit As String
        ''Private _SmallToolsAnyOneLossCatastropheCoverageBasisTypeId As String 'may not need; not visible in UI; removed 4/2/2015... will default to 1
        'Private _SmallToolsAnyOneLossCatastropheQuotedPremium As String
        ''added 1/28/2015
        'Private _InstallationScheduledLocations As List(Of QuickQuoteInstallationScheduledLocation)
        'Private _InstallationQuotedPremium As String
        'Private _InstallationAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _InstallationBlanketLimit As String
        'Private _InstallationBlanketCoinsuranceTypeId As String 'may need static data placeholder; may be defaulted as there's just one value in dropdown (1 = per 100); 2/9/2015 note: previous comment is likely talking about CoverageBasisTypeId
        'Private _InstallationBlanketDeductibleId As String 'may need static data placeholder
        'Private _InstallationBlanketRate As String
        ''Private _InstallationBlanketCoverageBasisTypeId As String 'may need static data placeholder; removed 4/2/2015... will default to 1
        'Private _InstallationBlanketQuotedPremium As String
        'Private _InstallationBlanketAnyOneLossCatastropheLimit As String
        ''Private _InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId As String 'may not need; not visible in UI; removed 4/2/2015... will default to 1
        'Private _InstallationBlanketAnyOneLossCatastropheQuotedPremium As String
        ''added 2/2/2015
        'Private _InstallationAdditionalDebrisRemovalExpenseLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationAdditionalDebrisRemovalExpenseQuotedPremium As String
        'Private _InstallationStorageLocationsLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationStorageLocationsQuotedPremium As String
        'Private _InstallationTransitLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationTransitQuotedPremium As String
        'Private _InstallationTestingLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationTestingQuotedPremium As String
        'Private _InstallationSewerBackupLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationSewerBackupDeductible As String
        'Private _InstallationSewerBackupQuotedPremium As String
        'Private _InstallationSewerBackupCatastropheLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationSewerBackupCatastropheQuotedPremium As String
        'Private _InstallationEarthquakeLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationEarthquakeDeductible As String
        'Private _InstallationEarthquakeQuotedPremium As String
        'Private _InstallationEarthquakeCatastropheLimit As String 'cov also has CoverageBasisTypeId set to 1
        'Private _InstallationEarthquakeCatastropheQuotedPremium As String
        ''added 2/9/2015
        'Private _BusinessPersonalPropertyLimit As String 'cov also has CoverageBasisTypeId set to 1; shown in UI Installation Coverage Extensions section, but may not be specific to Installation
        'Private _BusinessPersonalPropertyQuotedPremium As String
        'Private _ScheduledPropertyItems As List(Of QuickQuoteScheduledPropertyItem) 'cov also has CoverageBasisTypeId set to 1
        'Private _ScheduledPropertyAdditionalInterests As List(Of QuickQuoteAdditionalInterest) 'cov also has CoverageBasisTypeId set to 1
        'Private _ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _ScheduledPropertyCoinsuranceTypeId As String 'may need static data placeholder
        'Private _ScheduledPropertyDeductibleId As String 'may need static data placeholder
        'Private _ScheduledPropertyRate As String
        'Private _ScheduledPropertyNamedPerils As Boolean
        'Private _ScheduledPropertyQuotedPremium As String
        ''added 2/10/2015
        'Private _ComputerCoinsuranceTypeId As String 'cov also has CoverageBasisTypeId set to 1
        'Private _ComputerExcludeEarthquake As Boolean
        'Private _ComputerValuationMethodTypeId As String '2/25/2015 note: static data
        'Private _ComputerAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _ComputerQuotedPremium As String
        'Private _ComputerAllPerilsDeductibleId As String 'cov also has CoverageBasisTypeId set to 1; may also need boolean prop for hasCoverage; 2/25/2015 note: static data
        'Private _ComputerAllPerilsQuotedPremium As String
        'Private _ComputerEarthquakeVolcanicEruptionDeductible As String 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true; may also need boolean prop for hasCoverage
        'Private _ComputerEarthquakeVolcanicEruptionQuotedPremium As String
        'Private _ComputerMechanicalBreakdownDeductible As String 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true; may also need boolean prop for hasCoverage
        'Private _ComputerMechanicalBreakdownQuotedPremium As String
        ''added 2/18/2015
        'Private _BuildersRiskDeductibleId As String 'cov also has CoverageBasisTypeId set to 1; 2/25/2015 note: static data
        'Private _BuildersRiskRate As String
        'Private _BuildersRiskAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _BuildersRiskQuotedPremium As String
        'Private _BuildersRiskScheduledLocations As List(Of QuickQuoteBuildersRiskScheduledLocation) 'ScheduledCoverage cov also has CoverageBasisTypeId set to 1
        ''added 6/17/2017 for Diamond Proposals
        'Private _BuildersRiskScheduleStorageLocationsLimit As String
        'Private _BuildersRiskScheduleStorageLocationsQuotedPremium As String
        'Private _BuildersRiskScheduleTransitLimit As String
        'Private _BuildersRiskScheduleTransitQuotedPremium As String
        'Private _BuildersRiskScheduleTestingLimit As String
        'Private _BuildersRiskScheduleTestingQuotedPremium As String
        ''added 3/16/2015
        'Private _FineArtsDeductibleCategoryTypeId As String 'static data; 3/17/2015 note: cov also has CoverageBasisTypeId set to 1
        'Private _FineArtsRate As String
        'Private _FineArtsDeductibleId As String 'static data
        'Private _FineArtsQuotedPremium As String
        'Private _FineArtsAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _FineArtsBreakageMarringOrScratching As Boolean 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching; 3/17/2015 note: cov also has CoverageBasisTypeId set to 1
        'Private _FineArtsBreakageMarringOrScratchingQuotedPremium As String
        ''added 3/17/2015
        'Private _OwnersCargoAnyOneOwnedVehicleLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _OwnersCargoAnyOneOwnedVehicleDeductibleId As String 'static data
        'Private _OwnersCargoAnyOneOwnedVehicleRate As String
        'Private _OwnersCargoAnyOneOwnedVehicleDescription As String
        'Private _OwnersCargoAnyOneOwnedVehicleAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _OwnersCargoAnyOneOwnedVehicleLoadingUnloading As Boolean 'CoverageDetail
        'Private _OwnersCargoAnyOneOwnedVehicleNamedPerils As Boolean 'CoverageDetail
        'Private _OwnersCargoAnyOneOwnedVehicleQuotedPremium As String
        'Private _OwnersCargoCatastropheLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _OwnersCargoCatastropheQuotedPremium As String
        'Private _TransportationCatastropheLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _TransportationCatastropheDeductibleId As String 'static data
        'Private _TransportationCatastropheDescription As String
        'Private _TransportationCatastropheAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
        'Private _TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _TransportationCatastropheLoadingUnloading As Boolean 'CoverageDetail
        'Private _TransportationCatastropheNamedPerils As Boolean 'CoverageDetail
        'Private _TransportationCatastropheQuotedPremium As String
        'Private _TransportationAnyOneOwnedVehicleLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _TransportationAnyOneOwnedVehicleNumberOfVehicles As String 'CoverageDetail
        'Private _TransportationAnyOneOwnedVehicleRate As String
        'Private _TransportationAnyOneOwnedVehicleQuotedPremium As String
        ''added 3/18/2015
        'Private _MotorTruckCargoScheduledVehicles As List(Of QuickQuoteScheduledVehicle) 'note: cov also has CoverageBasisTypeId set to 1
        ''added 3/23/2015
        'Private _MotorTruckCargoScheduledVehicleAdditionalInterests As List(Of QuickQuoteAdditionalInterest) 'note: cov also has CoverageBasisTypeId set to 1
        'Private _MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _MotorTruckCargoScheduledVehicleLoadingUnloading As Boolean 'CoverageDetail
        'Private _MotorTruckCargoScheduledVehicleNamedPerils As Boolean 'CoverageDetail
        'Private _MotorTruckCargoScheduledVehicleOperatingRadius As String 'CoverageDetail
        'Private _MotorTruckCargoScheduledVehicleRate As String 'CoverageDetail
        'Private _MotorTruckCargoScheduledVehicleDeductibleId As String 'static data
        'Private _MotorTruckCargoScheduledVehicleDescription As String
        'Private _MotorTruckCargoScheduledVehicleQuotedPremium As String
        ''added 3/24/2015
        'Private _MotorTruckCargoScheduledVehicleCatastropheLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _MotorTruckCargoScheduledVehicleCatastropheQuotedPremium As String
        ''added 3/25/2015
        'Private _SignsAdditionalInterests As List(Of QuickQuoteAdditionalInterest) 'note: cov also has CoverageBasisTypeId set to 1
        'Private _SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        'Private _SignsMaximumDeductible As String 'CoverageDetail
        'Private _SignsMinimumDeductible As String 'CoverageDetail
        'Private _SignsValuationMethodTypeId As String 'CoverageDetail; static data
        'Private _SignsDeductibleId As String 'static data
        'Private _SignsQuotedPremium As String
        'Private _SignsAnyOneLossCatastropheLimit As String 'note: cov also has CoverageBasisTypeId set to 1
        'Private _SignsAnyOneLossCatastropheQuotedPremium As String
        ''added 5/29/2015 for CIM
        'Private _ContractorsEquipmentCatastropheLimit As String
        'Private _ContractorsEquipmentCatastropheQuotedPremium As String

        'removed 7/20/2018
        ''added 1/20/2015 for Crime
        'Private _ClassificationCodes As List(Of QuickQuoteClassificationCode)
        ''added 3/26/2015
        'Private _CanUseClassificationCodeNumForClassificationCodeReconciliation As Boolean 'for reconciliation
        'Private _AggregateLimit As String 'decimal
        'Private _NumberOfEmployees As String 'int
        ''added 3/31/2015
        'Private _EmployeeTheftLimit As String 'note: cov also has CoverageBasisTypeId 1
        'Private _EmployeeTheftDeductibleId As String 'static data
        'Private _EmployeeTheftNumberOfRatableEmployees As String 'CoverageDetail
        'Private _EmployeeTheftNumberOfAdditionalPremises As String 'CoverageDetail
        'Private _EmployeeTheftFaithfulPerformanceOfDutyTypeId As String 'CoverageDetail; static data
        'Private _EmployeeTheftScheduledEmployeeBenefitPlans As List(Of String)
        'Private _EmployeeTheftIncludedPersonsOrClasses As List(Of String)
        'Private _EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers As List(Of String)
        'Private _EmployeeTheftScheduledPartners As List(Of String)
        'Private _EmployeeTheftScheduledLLCMembers As List(Of String)
        'Private _EmployeeTheftScheduledNonCompensatedOfficers As List(Of String)
        'Private _EmployeeTheftExcludedPersonsOrClasses As List(Of String)
        'Private _EmployeeTheftQuotedPremium As String
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesLimit As String 'note: cov also has CoverageBasisTypeId 1
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId As String 'static data
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises As String 'CoverageDetail
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty As Boolean 'CoverageDetail
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks As Boolean 'CoverageDetail
        'Private _InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium As String
        'Private _OutsideThePremisesLimit As String 'note: cov also has CoverageBasisTypeId 1
        'Private _OutsideThePremisesDeductibleId As String 'static data
        'Private _OutsideThePremisesNumberOfPremises As String 'CoverageDetail
        'Private _OutsideThePremisesIncludeSellingPrice As Boolean 'CoverageDetail
        'Private _OutsideThePremisesLimitToRobberyOnly As Boolean 'CoverageDetail
        'Private _OutsideThePremisesRequireRecordOfChecks As Boolean 'CoverageDetail
        'Private _OutsideThePremisesQuotedPremium As String

        'removed 7/20/2018
        ''added 2/19/2015 for Farm
        'Private _FarmIncidentalLimitCoverages As List(Of QuickQuoteCoverage) '3/3/2015 note: under Detail/Farm Property/Farm Incidental Limits for Farm
        'Private _HasConvertedFarmIncidentalLimitCoverages As Boolean
        ''added 2/20/105
        'Private _ScheduledPersonalPropertyCoverages As List(Of QuickQuoteScheduledPersonalPropertyCoverage) '3/3/2015 note: under Detail/Farm Property/Coverage F for Farm
        'Private _HasConvertedScheduledPersonalPropertyCoverages As Boolean
        'Private _UnscheduledPersonalPropertyCoverage As QuickQuoteUnscheduledPersonalPropertyCoverage '3/3/2015 note: under Detail/Farm Property/Coverage G for Farm
        'Private _HasConvertedUnscheduledPersonalPropertyCoverages As Boolean
        ''added 2/21/2015
        'Private _CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation As Boolean
        'Private _CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation As Boolean
        ''added 2/25/2015
        'Private _OptionalCoverages As List(Of QuickQuoteOptionalCoverage) '3/3/2015 note: under Detail/Farm Property/F and G - Add'l/Opt. Coverages for Farm
        'Private _HasConvertedOptionalCoverages As Boolean
        'Private _CanUseOptionalCoveragesNumForOptionalCoverageReconciliation As Boolean 'added 5/12/2015 for reconciliation
        ''added 2/27/2015
        'Private _AdditionalInterests As List(Of QuickQuoteAdditionalInterest) '3/3/2015 note: under Detail/Farm Property/Additional Interests for Farm
        'Private _CanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
        ''added 3/3/2015
        'Private _AggregateLiabilityIncrementTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 1 = 2; from example)
        'Private _DrivecamContractEffectiveDate As String '/DateTime; may not be needed... identified in xml but not UI
        'Private _EmployeesFullTime As String 'under Detail/Optional Liability for Farm
        'Private _EmployeesPartTime1To40Days As String 'under Detail/Optional Liability for Farm
        'Private _EmployeesPartTime41To179Days As String 'under Detail/Optional Liability for Farm
        'Private _EntityTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 2 = Partnership; from example)
        'Private _LiabilityOptionId As String 'static data; dropdown at top of Detail screen for Farm (id 1 = Farm Personal; from example)
        'Private _LimitedPerilsCategoryTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 3 = Both; from example)
        ''added 4/30/2015
        'Private _Farm_F_and_G_DeductibleLimitId As String 'static data
        'Private _Farm_F_and_G_DeductibleQuotedPremium As String
        'Private _HasFarmEquipmentBreakdown As Boolean
        'Private _FarmEquipmentBreakdownQuotedPremium As String
        'Private _HasFarmExtender As Boolean
        'Private _FarmExtenderQuotedPremium As String
        'Private _FarmAllStarLimitId As String 'static data
        'Private _FarmAllStarQuotedPremium As String
        ''added 5/5/2015
        'Private _HasFarmEmployersLiability As Boolean
        'Private _FarmEmployersLiabilityQuotedPremium As String
        'Private _FarmFireLegalLiabilityLimitId As String 'static data
        'Private _FarmFireLegalLiabilityQuotedPremium As String
        'Private _HasFarmPersonalAndAdvertisingInjury As Boolean
        'Private _FarmPersonalAndAdvertisingInjuryQuotedPremium As String
        'Private _FarmContractGrowersCareCustodyControlLimitId As String 'static data
        'Private _FarmContractGrowersCareCustodyControlDescription As String
        'Private _FarmContractGrowersCareCustodyControlQuotedPremium As String
        'Private _HasFarmExclusionOfProductsCompletedWork As Boolean
        'Private _FarmExclusionOfProductsCompletedWorkQuotedPremium As String
        ''added 5/12/2015; goes w/ FarmIncidentalLimitCoverages
        'Private _FarmIncidentalLimits As List(Of QuickQuoteFarmIncidentalLimit)
        ''added 9/23/2015
        'Private _Locations_Farm_L_Liability_QuotedPremium As String
        'Private _Locations_Farm_M_Medical_Payments_QuotedPremium As String

        'removed 7/20/2018
        ''added 3/3/2015 for new CPP package parts
        'Private _CPP_Has_InlandMarine_PackagePart As Boolean
        'Private _CPP_Has_Crime_PackagePart As Boolean
        'Private _CPP_Has_Garage_PackagePart As Boolean 'added 4/22/2017
        'Private _CPP_Has_Property_PackagePart As Boolean 'added 5/11/2017; will likely always be on CPP
        'Private _CPP_Has_GeneralLiability_PackagePart As Boolean 'added 5/11/2017; typically on CPP but shouldn't be when Garage PackagePart is there
        ''added 4/2/2015 for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
        'Private _CPP_CRM_ProgramTypeId As String
        'Private _CPP_GAR_ProgramTypeId As String 'added 5/8/2017

        'added 3/6/2015 for CPR/CPP Business Income ALS (eff 4/1/2015); removed 7/20/2018
        'Private _HasBusinessIncomeALS As Boolean
        'Private _BusinessIncomeALSLimit As String
        'Private _BusinessIncomeALSQuotedPremium As String

        'removed 7/20/2018
        ''added 5/29/2015 for CPP Contractors Enhancement Endorsement (CPR, CGL, CIM; eff 5/12/2015)
        'Private _HasContractorsEnhancement As Boolean
        'Private _ContractorsEnhancementQuotedPremium As String
        'Private _CPP_CPR_ContractorsEnhancementQuotedPremium As String
        'Private _CPP_CGL_ContractorsEnhancementQuotedPremium As String
        'Private _CPP_CIM_ContractorsEnhancementQuotedPremium As String
        ''added 5/29/2015 for CPP Manufacturers Enhancement (CPR, CGL; eff 6/30/2015)
        'Private _HasManufacturersEnhancement As Boolean
        'Private _ManufacturersEnhancementQuotedPremium As String
        'Private _CPP_CPR_ManufacturersEnhancementQuotedPremium As String
        'Private _CPP_CGL_ManufacturersEnhancementQuotedPremium As String

        'added 5/11/2015; removed 7/20/2018
        'Private _FarmMachinerySpecialCoverageG_QuotedPremium As String

        'added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443); removed 7/20/2018
        'Private _HasAutoPlusEnhancement As Boolean
        'Private _AutoPlusEnhancement_QuotedPremium As String

        'removed 7/27/2018
        ''added 10/28/2016 - will be used to determine if QuickQuoteObject should be used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes
        'Private _QuoteTransactionType As QuickQuoteTransactionType
        'Private _OriginalEffectiveDate As String
        'Private _OriginalExpirationDate As String
        'Private _OriginalTransactionEffectiveDate As String
        'Private _OriginalTransactionExpirationDate As String

        'removed 7/27/2018
        ''added 11/4/2016
        'Private _TransactionRemark As String
        'Private _TransactionReasonId As String

        'removed 7/27/2018
        ''added 11/10/2016 for Endorsements
        'Private _AnnualPremium As String 'PolicyImage.premium_annual
        'Private _ChangeInFullTermPremium As String 'PolicyImage.premium_chg_fullterm
        'Private _ChangeInWrittenPremium As String 'PolicyImage.premium_chg_written
        'Private _DifferenceChangeInFullTermPremium As String 'PolicyImage.premium_diff_chg_fullterm
        'Private _DifferenceChangeInWrittenPremium As String 'PolicyImage.premium_diff_chg_written
        'Private _FullTermPremium As String 'PolicyImage.premium_fullterm
        'Private _FullTermPremiumOffsetForPreviousImage As String 'PolicyImage.ftp_offset_for_prev_image
        'Private _FullTermPremiumOnsetForCurrent As String 'PolicyImage.ftp_onset_for_current
        'Private _OffsetPremiumForPreviousImage As String 'PolicyImage.offset_for_prev_image
        'Private _OnsetPremiumForCurrentImage As String 'PolicyImage.onset_for_current
        'Private _PreviousWrittenPremium As String 'PolicyImage.premium_previous_written
        'Private _WrittenPremium As String 'PolicyImage.premium_written
        'Private _PriorTermAnnual As String 'PolicyImage.prior_term_annual_premium
        'Private _PriorTermFullterm As String 'PolicyImage.prior_term_fullterm

        '3/9/2017 - BOP stuff; removed 7/20/2018
        'Private _HasApartmentBuildings As Boolean
        'Private _NumberOfLocationsWithApartments As String
        'Private _ApartmentQuotedPremium As String

        'removed 7/20/2018
        'Private _HasRestaurantEndorsement As Boolean
        'Private _RestaurantQuotedPremium As String

        'added 3/27/2017 for Diamond Proposals
        'Private _Comments As List(Of QuickQuoteComment)'removed 7/27/2018

        'added 5/4/2017 for CIM (Golf); removed 7/20/2018
        'Private _ScheduledGolfCourses As List(Of QuickQuoteScheduledGolfCourse)
        'Private _ScheduledGolfCartCourses As List(Of QuickQuoteScheduledGolfCartCourse)
        'Private _GolfCourseQuotedPremium As String 'covCodeId 21341
        'Private _GolfCourseCoverageLimitId As String 'covCodeId 21341
        'Private _GolfCourseDeductibleId As String 'covCodeId 21341
        'Private _GolfCourseCoinsuranceTypeId As String 'covCodeId 21341
        'Private _GolfCourseRate As String 'covCodeId 21341
        'Private _GolfCartQuotedPremium As String 'covCodeId 50121
        'Private _GolfCartManualLimitAmount As String 'covCodeId 50121
        'Private _GolfCartDeductibleId As String 'covCodeId 50121
        'Private _GolfCartCoinsuranceTypeId As String 'covCodeId 50121
        'Private _GolfCartRate As String 'covCodeId 50121
        'Private _GolfCartCatastropheManualLimitAmount As String 'covCodeId 21343
        'Private _GolfCartDebrisRemovalCoverageLimitId As String 'covCodeId 80223

        'removed 7/20/2018
        ''added 5/8/2017 for GAR
        'Private _Liability_UM_UIM_AggregateLiabilityIncrementTypeId As String 'covDetail; covCodeId 21552
        'Private _Liability_UM_UIM_DeductibleCategoryTypeId As String 'covDetail; covCodeId 21552
        'Private _LocationsTotal_LiabilityQuotedPremium As String 'loc covCodeId 10111
        'Private _HasUninsuredMotoristPropertyDamage As Boolean 'covCodeId 21539
        'Private _UninsuredMotoristPropertyDamageQuotedPremium As String 'covCodeId 21539; may not be populated
        'Private _MedicalPaymentsTypeId As String 'covDetail; covCodeId 21540
        'Private _LocationsTotal_MedicalPaymentsQuotedPremium As String 'loc covCodeId 10112
        'Private _HasPhysicalDamageOtherThanCollision As Boolean 'covCodeId 21550
        'Private _PhysicalDamageOtherThanCollisionQuotedPremium As String 'covCodeId 21550; may not be populated
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium As String 'loc covCodeId 10116
        'Private _HasPhysicalDamageCollision As Boolean 'covCodeId 21551
        'Private _PhysicalDamageCollisionQuotedPremium As String 'covCodeId 21551; may not be populated
        'Private _PhysicalDamageCollisionDeductibleId As String 'covCodeId 21551
        'Private _HasGarageKeepersOtherThanCollision As Boolean 'covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionQuotedPremium As String 'covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionManualLimitAmount As String 'covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionBasisTypeId As String 'covDetail; covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionDeductibleCategoryTypeId As String 'covDetail; covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionTypeId As String 'covDetail; covCodeId 21541
        'Private _GarageKeepersOtherThanCollisionDeductibleId As String 'covCodeId 21541
        'Private _HasGarageKeepersCollision As Boolean 'covCodeId 21542
        'Private _GarageKeepersCollisionQuotedPremium As String 'covCodeId 21542
        'Private _GarageKeepersCollisionManualLimitAmount As String 'covCodeId 21542
        'Private _GarageKeepersCollisionBasisTypeId As String 'covDetail; covCodeId 21542
        'Private _GarageKeepersCollisionDeductibleId As String 'covCodeId 21542
        'Private _GarageKeepersTotalPremium As String 'added 5/9/2017; SUM of prems for policy (covCodeIds 21541 and 21542 - has prem) and loc (covCodeIds 10086, 10087, and 10126 - no prem) covs
        ''added 5/10/2017 for GAR (also CAP)
        'Private _AutoLiabilityTotalPremium As String 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs
        'Private _AutoMedicalPaymentsTotalPremium As String 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs
        'Private _Auto_UM_UIM_TotalPremium As String 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs
        'Private _AutoComprehensiveTotalPremium As String 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs
        'Private _AutoCollisionTotalPremium As String 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs
        'Private _CAP_GAR_OptCovs_Premium As String 'diff of CAP/GAR totalPremium minus above premiums, towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
        ''added 5/11/2017 for GAR
        'Private _LocationsTotal_ClassIIEmployees25AndOlder As String
        'Private _LocationsTotal_ClassIIEmployeesUnderAge25 As String
        'Private _LocationsTotal_ClassIOtherEmployees As String
        'Private _LocationsTotal_ClassIRegularEmployees As String
        'Private _LocationsTotal_NumberOfEmployees As String
        'Private _LocationsTotal_Payroll As String
        'Private _LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates As String 'covCodeId 10113; covDetail
        ''added 5/16/2017 for GAR
        'Private _LocationsTotal_ClassIEmployees As String
        'Private _LocationsTotal_ClassIIEmployees As String
        'Private _LocationsTotal_ClassIandIIEmployees As String
        'Private _LocationsTotal_DealersBlanketCollisionQuotedPremium As String 'loc covCodeId 10120
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium As String 'loc covCodeId 10115
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount As String 'loc covCodeId 10115
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium As String 'loc covCodeId 10117
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount As String 'loc covCodeId 10117
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium As String 'loc covCodeId 10118
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount As String 'loc covCodeId 10118
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium As String 'loc covCodeId 10119
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount As String 'loc covCodeId 10119
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium As String 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
        'Private _LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount As String 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
        'Private _Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId As String 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
        'Private _Locations_PhysicalDamageOtherThanCollisionTypeId As String 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
        'Private _Locations_PhysicalDamageOtherThanCollisionDeductibleId As String 'loc covCodeIds 10115, 10116, 10117, 10118, and 10119
        ''added 5/16/2017 for CPP
        'Private _CPP_MinPremAdj_CPR As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
        'Private _CPP_MinPremAdj_CGL As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
        'Private _CPP_MinPremAdj_CIM As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
        'Private _CPP_MinPremAdj_CRM As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
        'Private _CPP_MinPremAdj_GAR As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
        ''added 5/25/2017 for GAR
        'Private _CAP_GAR_PolicyLevelCovs_Premium As String
        'Private _CAP_GAR_LocationLevelCovs_Premium As String
        'Private _CAP_GAR_VehicleLevelCovs_Premium As String
        'Private _LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium As String 'loc covCodeId 10113
        'Private _LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium As String 'loc covCodeId 10086
        'Private _LocationsTotal_GarageKeepersCollisionQuotedPremium As String 'loc covCodeId 10087
        'Private _LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium As String 'loc covCodeId 10126
        'Private _CAP_GAR_PolicyAndLocationLevelCovs_Premium As String 'added 5/26/2017
        'Private _VehiclesTotal_CAP_GAR_TotalCoveragesPremium As String 'added 5/26/2017; should essentially match CAP_GAR_VehicleLevelCovs_Premium
        'Private _VehiclesTotal_TotalCoveragesPremium As String 'added 5/26/2017
        'Private _DriversTotal_TotalCoveragesPremium As String 'added 5/27/2017

        'added 5/23/2017; removed 7/20/2018
        'Private _AdditionalInterestListLinks As List(Of QuickQuoteAdditionalInterestListLink)

        'added 8/19/2017 for WCP Risk Grade; could also be used for other warnings/stops/kills
        'Private _Messages As List(Of QuickQuoteMessage) 'removed 7/27/2018

        'added 8/29/2017; removed 7/20/2018
        'Private _WCP_WaiverPremium As String 'covCodeId 10124 CovAddInfo w/ "Waiver Premium" in desc

        'Private _PriorBodilyInjuryLimitId As String 'added 5-9-18; removed 7/20/2018

        'added 7/16/2018
        'Private _VersionAndLobInfo As QuickQuoteVersionAndLobInfo
        'updated 11/28/2022
        Private WithEvents _VersionAndLobInfo As QuickQuoteVersionAndLobInfo
        'added 7/27/2018
        Private _TopLevelQuoteInfo As QuickQuoteTopLevelQuoteInfo

        'added 5/14/2021; removed 5/19/2021... see below
        'Private _CopiedAnySourceAIsToTopLevelOnLastCheck As Boolean
        'Private _RemovedAnySourceAIsFromTopLevelOnLastCheck As Boolean



        'added 7/25/2018
        'Private _MultiStateQuotes As List(Of QuickQuoteObject) 'removed 7/27/2018

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property XmlType As QuickQuoteXmlType
            Get
                'Return _XmlType
                'updated 7/27/2018
                Return TopLevelQuoteInfo.XmlType
            End Get
            Set(value As QuickQuoteXmlType)
                '_XmlType = value
                'updated 7/27/2018
                TopLevelQuoteInfo.XmlType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LobType As QuickQuoteLobType
            Get
                'Return _LobType
                'updated 7/16/2018
                Return VersionAndLobInfo.LobType
            End Get
            Set(value As QuickQuoteLobType)
                '_LobType = value
                'If _LobType <> Nothing AndAlso _LobType <> QuickQuoteLobType.None Then
                '    '_VersionId = CInt(_LobType).ToString
                '    'SetLobIdForType()
                '    'updated 11/26/2013
                '    '_VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), _LobType), QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
                '    _LobId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), _LobType), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
                '    'test 12/23/2013 (not going to use)
                '    'Dim enumType As New GenericEnumConverter(GetType(QuickQuoteLobType))
                '    '_LobId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, qqHelper.TextForEnumSelection(enumType, _LobType), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
                '    '11/27/2013 - had to change and move VersionId setting after LobId since there's no link in the xml for VersionId-to-LobType and VersionId is based off of LobId
                '    _VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
                '    '11/27/2013 note: updated logic should work the same as before
                'End If

                'ResetPackagePartVersionIds() 'added 11/4/2014
                'updated 7/16/2018
                VersionAndLobInfo.LobType = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LobId As String
            Get
                'Return _LobId
                'updated 7/16/2018
                Return VersionAndLobInfo.LobId
            End Get
            Set(value As String)
                '_LobId = value
                'If IsNumeric(_LobId) = True Then
                '    'Select Case _LobId
                '    '    Case "20"
                '    '        _LobType = QuickQuoteLobType.CommercialAuto
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "25"
                '    '        _LobType = QuickQuoteLobType.CommercialBOP
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "9"
                '    '        _LobType = QuickQuoteLobType.CommercialGeneralLiability
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "23"
                '    '        _LobType = QuickQuoteLobType.CommercialPackage
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "28"
                '    '        _LobType = QuickQuoteLobType.CommercialProperty
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "21"
                '    '        _LobType = QuickQuoteLobType.WorkersCompensation
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "1" 'added 7/24/2013
                '    '        _LobType = QuickQuoteLobType.AutoPersonal
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "2" 'added 7/24/2013
                '    '        _LobType = QuickQuoteLobType.HomePersonal
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case "3" 'added 8/15/2013
                '    '        _LobType = QuickQuoteLobType.DwellingFirePersonal
                '    '        _VersionId = CInt(_LobType).ToString
                '    '    Case Else

                '    'End Select
                '    'updated 11/26/2013 (all 3 of the TryParse calls below work the exact same)
                '    'If System.Enum.TryParse(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '    '    _LobType = QuickQuoteLobType.None
                '    'End If
                '    'If QuickQuoteLobType.TryParse(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '    '    _LobType = QuickQuoteLobType.None
                '    'End If
                '    If System.Enum.TryParse(Of QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '        _LobType = QuickQuoteLobType.None
                '    End If
                '    _VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
                '    '11/27/2013 note: updated logic works a little different than before in the fact that it will always overwrite the other properties (LobType, VersionId) as long as LobId is numeric; doesn't have to be one of the correct values

                '    '12/4/2013 note: could also be written like below since IsDefined will look for match on Enum text or value
                '    'If System.Enum.IsDefined(GetType(QuickQuoteLobType), qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType)) = True Then
                '    '    _LobType = System.Enum.Parse(GetType(QuickQuoteLobType), qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType))
                '    '    _VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
                '    'End If

                '    ResetPackagePartVersionIds() 'added 11/4/2014
                'End If
                'updated 7/16/2018
                VersionAndLobInfo.LobId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CompanyId As String
            Get
                'Return _CompanyId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.CompanyId
                'updated 11/26/2022
                Return VersionAndLobInfo.CompanyId
            End Get
            Set(value As String)
                '_CompanyId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.CompanyId = value
                'updated 11/26/2022

                'Dim prevCompany As helper.QuickQuoteCompany = VersionAndLobInfo.Company 'added 11/27/2022; removed 11/28/2022 (now handled by _VersionAndLobInfo_CompanyChanged)

                VersionAndLobInfo.CompanyId = value

                'added 11/27/2022 (to make sure that lower-level companyId props are updated w/ top-level); note: won't do anything if LobType is invalid; removed 11/28/2022 (now handled by _VersionAndLobInfo_CompanyChanged)
                'If QuoteLevel = helper.QuoteLevel.TopLevel Then
                '    If System.Enum.IsDefined(GetType(helper.QuickQuoteCompany), prevCompany) = True AndAlso prevCompany <> helper.QuickQuoteCompany.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteCompany), Company) = True AndAlso Company <> helper.QuickQuoteCompany.None AndAlso prevCompany <> Company AndAlso System.Enum.IsDefined(GetType(QuickQuoteLobType), LobType) = True AndAlso LobType <> QuickQuoteLobType.None Then
                '        If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '            For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '                If msq IsNot Nothing Then
                '                    msq.CompanyId = value
                '                End If
                '            Next
                '        End If
                '    End If
                'End If
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Company As QuickQuoteHelperClass.QuickQuoteCompany 'added 11/26/2022
            Get
                Return VersionAndLobInfo.Company
            End Get
            Set(value As QuickQuoteHelperClass.QuickQuoteCompany)
                'Dim prevCompany As helper.QuickQuoteCompany = VersionAndLobInfo.Company 'added 11/27/2022

                VersionAndLobInfo.Company = value

                'added 11/27/2022 (to make sure that lower-level companyId props are updated w/ top-level); note: won't do anything if LobType is invalid; removed 11/28/2022 (now handled by _VersionAndLobInfo_CompanyChanged)
                'If QuoteLevel = helper.QuoteLevel.TopLevel Then
                '    If System.Enum.IsDefined(GetType(helper.QuickQuoteCompany), prevCompany) = True AndAlso prevCompany <> helper.QuickQuoteCompany.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteCompany), value) = True AndAlso value <> helper.QuickQuoteCompany.None AndAlso prevCompany <> value AndAlso System.Enum.IsDefined(GetType(QuickQuoteLobType), LobType) = True AndAlso LobType <> QuickQuoteLobType.None Then
                '        If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '            For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '                If msq IsNot Nothing Then
                '                    msq.Company = value
                '                End If
                '            Next
                '        End If
                '    End If
                'End If
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Success As Boolean
            Get
                'Return _Success
                'updated 7/27/2018
                Return TopLevelQuoteInfo.Success
            End Get
            Set(value As Boolean)
                '_Success = value
                'updated 7/27/2018
                TopLevelQuoteInfo.Success = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AgencyCode As String
            Get
                'Return _AgencyCode
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.AgencyCode
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyCode
            End Get
            Set(value As String)
                '_AgencyCode = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.AgencyCode = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyCode = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AgencyId As String
            Get
                'Return _AgencyId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.AgencyId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyId
            End Get
            Set(value As String)
                '_AgencyId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.AgencyId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AgencyProducerId As String
            Get
                'Return _AgencyProducerId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.AgencyProducerId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerId
            End Get
            Set(value As String)
                '_AgencyProducerId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.AgencyProducerId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AgencyProducerCode As String
            Get
                'Return _AgencyProducerCode
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.AgencyProducerCode
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerCode
            End Get
            Set(value As String)
                '_AgencyProducerCode = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.AgencyProducerCode = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerCode = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AgencyProducerName As QuickQuoteName
            Get
                'SetObjectsParent(_AgencyProducerName)
                'Return _AgencyProducerName
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.AgencyProducerName)
                'Return TopLevelQuoteInfo.AgencyProducerName
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerName
            End Get
            Set(value As QuickQuoteName)
                '_AgencyProducerName = value
                'SetObjectsParent(_AgencyProducerName)
                'updated 7/27/2018
                'TopLevelQuoteInfo.AgencyProducerName = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AgencyProducerName = value
                SetObjectsParent(TopLevelQuoteInfo.AgencyProducerName)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property QuoteNumber As String
            Get
                'Return _QuoteNumber
                'updated 10/30/2016
                'Dim quoteNumToReturn As String = _QuoteNumber
                'If String.IsNullOrWhiteSpace(quoteNumToReturn) = True AndAlso String.IsNullOrWhiteSpace(_PolicyNumber) = False AndAlso UCase(Left(_PolicyNumber, 1)) = "Q" Then
                '    quoteNumToReturn = _PolicyNumber
                'End If
                'Return quoteNumToReturn
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.QuoteNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteNumber
            End Get
            Set(value As String)
                '_QuoteNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.QuoteNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteNumber = value
            End Set
        End Property
        Protected Friend ReadOnly Property QuoteNumber_Actual As String 'added 10/30/2016 after updating QuoteNumber Get; 10/31/2016 changed from Public to Protected Friend
            Get
                'Return _QuoteNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.QuoteNumber_Actual
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteNumber_Actual
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyNumber As String 'added 10/30/2016
            Get
                'Return _PolicyNumber
                'updated 10/30/2016
                'Dim polNumToReturn As String = _PolicyNumber
                'If String.IsNullOrWhiteSpace(polNumToReturn) = True AndAlso String.IsNullOrWhiteSpace(_QuoteNumber) = False Then
                '    polNumToReturn = _QuoteNumber
                'End If
                'Return polNumToReturn
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyNumber
            End Get
            Set(value As String)
                '_PolicyNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyNumber = value
            End Set
        End Property
        Protected Friend ReadOnly Property PolicyNumber_Actual As String 'added 10/30/2016 after updating PolicyNumber Get; 10/31/2016 changed from Public to Protected Friend
            Get
                'Return _PolicyNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyNumber_Actual
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyNumber_Actual
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property QuoteDescription As String
            Get
                'Return _QuoteDescription
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.QuoteDescription
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteDescription
            End Get
            Set(value As String)
                '_QuoteDescription = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.QuoteDescription = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property State As String
            Get
                'Return _State
                'updated 7/16/2018
                Return VersionAndLobInfo.StateAbbreviation
            End Get
            Set(value As String)
                '_State = value

                'added 8/24/2018; note: same logic in StateId and QuickQuoteState SETTERs
                Dim prevQQstate As helper.QuickQuoteState = VersionAndLobInfo.State

                'added 12/21/2018
                Dim okayToLogStateChangeInSession As Boolean = helper.OkayToLogStateChangesInSession
                Dim strChangeInfo As String = ""
                If okayToLogStateChangeInSession = True Then
                    strChangeInfo = Me.ToString
                    strChangeInfo &= vbCrLf & "--------------QuickQuoteObject.State--------------"
                    Dim beforeStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strBeforeStates As String = helper.StringOfQuickQuoteStates(beforeStates)
                    If String.IsNullOrWhiteSpace(strBeforeStates) = True Then
                        strBeforeStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "Before: " & VersionAndLobInfo.StateAbbreviation & "-" & helper.StringForQuickQuoteState(prevQQstate) & " (" & strBeforeStates & ")"
                End If

                'updated 7/16/2018
                VersionAndLobInfo.StateAbbreviation = value

                'added 8/24/2018; note: same logic in StateId and QuickQuoteState SETTERs
                If QuoteLevel = helper.QuoteLevel.TopLevel Then
                    'If System.Enum.IsDefined(GetType(helper.QuickQuoteState), prevQQstate) = True AndAlso prevQQstate <> helper.QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), value) = True AndAlso value <> helper.QuickQuoteState.None AndAlso prevQQstate <> value Then
                    '    'if changing GoverningState from something valid to something valid (and they're not equal)
                    '    If HasMultipleQuoteStates = True Then
                    '        Dim prevStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, prevQQstate, addToListIfNeeded:=False)
                    '        If prevStateQuote IsNot Nothing Then
                    '            Dim newStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, value, addToListIfNeeded:=False)
                    '            If newStateQuote IsNot Nothing Then
                    '                '1st copy GoverningState info from prev stateQuote to new stateQuote
                    '                qqHelper.CopyInformationFromOneQuoteToAnother(prevStateQuote, newStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.GoverningStateSwitch)
                    '                'now remove GoverningState info from prev stateQuote
                    '                qqHelper.ClearOutGoverningStateInfo(prevStateQuote)
                    '            End If
                    '        End If
                    '    End If
                    'End If
                    'updated 12/21/2018 since it was previously comparing String to helper.QuickQuoteState (bad copy/paste from QuickQuoteState SETTER)
                    If System.Enum.IsDefined(GetType(helper.QuickQuoteState), prevQQstate) = True AndAlso prevQQstate <> helper.QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso prevQQstate <> QuickQuoteState Then
                        'if changing GoverningState from something valid to something valid (and they're not equal)
                        If TopLevelQuoteInfo.MultiStateQuotes Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes.Count = 0 Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'no subQuotes; nothing left to do
                        ElseIf TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = prevQQstate Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'quote is already in multiState format but just 1 state; need to update state on subQuote
                            TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = QuickQuoteState
                        Else
                            If HasMultipleQuoteStates = True Then
                                Dim prevStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, prevQQstate, addToListIfNeeded:=False)
                                If prevStateQuote IsNot Nothing Then
                                    Dim newStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, QuickQuoteState, addToListIfNeeded:=False)
                                    If newStateQuote IsNot Nothing Then
                                        '1st copy GoverningState info from prev stateQuote to new stateQuote
                                        qqHelper.CopyInformationFromOneQuoteToAnother(prevStateQuote, newStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.GoverningStateSwitch)
                                        'now remove GoverningState info from prev stateQuote
                                        qqHelper.ClearOutGoverningStateInfo(prevStateQuote)
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                'added 12/21/2018
                If okayToLogStateChangeInSession = True Then
                    Dim afterStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strAfterStates As String = helper.StringOfQuickQuoteStates(afterStates)
                    If String.IsNullOrWhiteSpace(strAfterStates) = True Then
                        strAfterStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "After: " & VersionAndLobInfo.StateAbbreviation & "-" & helper.StringForQuickQuoteState(QuickQuoteState) & " (" & strAfterStates & ")"
                    helper.LogStateChangeInSession(strChangeInfo)
                End If
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property StateId As String
            Get
                'Return _StateId
                'updated 7/16/2018
                Return VersionAndLobInfo.StateId
            End Get
            Set(value As String)
                '_StateId = value

                'added 8/24/2018; note: same logic in State and QuickQuoteState SETTERs
                Dim prevQQstate As helper.QuickQuoteState = VersionAndLobInfo.State

                'added 12/21/2018
                Dim okayToLogStateChangeInSession As Boolean = helper.OkayToLogStateChangesInSession
                Dim strChangeInfo As String = ""
                If okayToLogStateChangeInSession = True Then
                    strChangeInfo = Me.ToString
                    strChangeInfo &= vbCrLf & "--------------QuickQuoteObject.StateId--------------"
                    Dim beforeStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strBeforeStates As String = helper.StringOfQuickQuoteStates(beforeStates)
                    If String.IsNullOrWhiteSpace(strBeforeStates) = True Then
                        strBeforeStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "Before: " & VersionAndLobInfo.StateId & "-" & helper.StringForQuickQuoteState(prevQQstate) & " (" & strBeforeStates & ")"
                End If

                'updated 7/16/2018
                VersionAndLobInfo.StateId = value

                'added 8/24/2018; note: same logic in State and QuickQuoteState SETTERs
                If QuoteLevel = helper.QuoteLevel.TopLevel Then
                    'If System.Enum.IsDefined(GetType(helper.QuickQuoteState), prevQQstate) = True AndAlso prevQQstate <> helper.QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), value) = True AndAlso value <> helper.QuickQuoteState.None AndAlso prevQQstate <> value Then
                    '    'if changing GoverningState from something valid to something valid (and they're not equal)
                    '    If HasMultipleQuoteStates = True Then
                    '        Dim prevStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, prevQQstate, addToListIfNeeded:=False)
                    '        If prevStateQuote IsNot Nothing Then
                    '            Dim newStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, value, addToListIfNeeded:=False)
                    '            If newStateQuote IsNot Nothing Then
                    '                '1st copy GoverningState info from prev stateQuote to new stateQuote
                    '                qqHelper.CopyInformationFromOneQuoteToAnother(prevStateQuote, newStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.GoverningStateSwitch)
                    '                'now remove GoverningState info from prev stateQuote
                    '                qqHelper.ClearOutGoverningStateInfo(prevStateQuote)
                    '            End If
                    '        End If
                    '    End If
                    'End If
                    'updated 12/21/2018 since it was previously comparing String to helper.QuickQuoteState (bad copy/paste from QuickQuoteState SETTER)
                    If System.Enum.IsDefined(GetType(helper.QuickQuoteState), prevQQstate) = True AndAlso prevQQstate <> helper.QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso prevQQstate <> QuickQuoteState Then
                        'if changing GoverningState from something valid to something valid (and they're not equal)
                        If TopLevelQuoteInfo.MultiStateQuotes Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes.Count = 0 Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'no subQuotes; nothing left to do
                        ElseIf TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = prevQQstate Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'quote is already in multiState format but just 1 state; need to update state on subQuote
                            TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = QuickQuoteState
                        Else
                            If HasMultipleQuoteStates = True Then
                                Dim prevStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, prevQQstate, addToListIfNeeded:=False)
                                If prevStateQuote IsNot Nothing Then
                                    Dim newStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, QuickQuoteState, addToListIfNeeded:=False)
                                    If newStateQuote IsNot Nothing Then
                                        '1st copy GoverningState info from prev stateQuote to new stateQuote
                                        qqHelper.CopyInformationFromOneQuoteToAnother(prevStateQuote, newStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.GoverningStateSwitch)
                                        'now remove GoverningState info from prev stateQuote
                                        qqHelper.ClearOutGoverningStateInfo(prevStateQuote)
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                'added 12/21/2018
                If okayToLogStateChangeInSession = True Then
                    Dim afterStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strAfterStates As String = helper.StringOfQuickQuoteStates(afterStates)
                    If String.IsNullOrWhiteSpace(strAfterStates) = True Then
                        strAfterStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "After: " & VersionAndLobInfo.StateId & "-" & helper.StringForQuickQuoteState(QuickQuoteState) & " (" & strAfterStates & ")"
                    helper.LogStateChangeInSession(strChangeInfo)
                End If
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property QuickQuoteState As helper.QuickQuoteState 'added 7/16/2018
            Get
                'Return helper.QuickQuoteStateForDiamondStateId(qqHelper.IntegerForString(_StateId))
                'updated 7/16/2018
                Return VersionAndLobInfo.State
            End Get
            Set(value As helper.QuickQuoteState)
                'StateId = helper.DiamondStateIdForQuickQuoteState(value, defaultToIndiana:=True).ToString

                'added 8/19/2018; 8/24/2018 note: same logic in StateId and State SETTERs
                Dim prevQQstate As helper.QuickQuoteState = VersionAndLobInfo.State

                'added 12/21/2018
                Dim okayToLogStateChangeInSession As Boolean = helper.OkayToLogStateChangesInSession
                Dim strChangeInfo As String = ""
                If okayToLogStateChangeInSession = True Then
                    strChangeInfo = Me.ToString
                    strChangeInfo &= vbCrLf & "--------------QuickQuoteObject.QuickQuoteState--------------"
                    Dim beforeStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strBeforeStates As String = helper.StringOfQuickQuoteStates(beforeStates)
                    If String.IsNullOrWhiteSpace(strBeforeStates) = True Then
                        strBeforeStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "Before: " & helper.StringForQuickQuoteState(prevQQstate) & " (" & strBeforeStates & ")"
                End If


                'updated 7/16/2018
                VersionAndLobInfo.State = value

                'added 8/19/2018; 8/24/2018 note: same logic in StateId and State SETTERs
                If QuoteLevel = helper.QuoteLevel.TopLevel Then
                    If System.Enum.IsDefined(GetType(helper.QuickQuoteState), prevQQstate) = True AndAlso prevQQstate <> helper.QuickQuoteState.None AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), value) = True AndAlso value <> helper.QuickQuoteState.None AndAlso prevQQstate <> value Then
                        'if changing GoverningState from something valid to something valid (and they're not equal)
                        If TopLevelQuoteInfo.MultiStateQuotes Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes.Count = 0 Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'no subQuotes; nothing left to do
                        ElseIf TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = prevQQstate Then 'added IF/ELSEIF 12/22/2018; previous logic in ELSE
                            'quote is already in multiState format but just 1 state; need to update state on subQuote
                            TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = value
                        Else
                            If HasMultipleQuoteStates = True Then 'added IF 8/21/2018 to prevent further processing when not needed
                                Dim prevStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, prevQQstate, addToListIfNeeded:=False)
                                If prevStateQuote IsNot Nothing Then
                                    Dim newStateQuote As QuickQuoteObject = qqHelper.QuickQuoteObjectForState(Me, value, addToListIfNeeded:=False)
                                    If newStateQuote IsNot Nothing Then
                                        '1st copy GoverningState info from prev stateQuote to new stateQuote
                                        qqHelper.CopyInformationFromOneQuoteToAnother(prevStateQuote, newStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.GoverningStateSwitch)
                                        'now remove GoverningState info from prev stateQuote
                                        qqHelper.ClearOutGoverningStateInfo(prevStateQuote)
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                'added 12/21/2018
                If okayToLogStateChangeInSession = True Then
                    Dim afterStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                    Dim strAfterStates As String = helper.StringOfQuickQuoteStates(afterStates)
                    If String.IsNullOrWhiteSpace(strAfterStates) = True Then
                        strAfterStates = "None"
                    End If
                    strChangeInfo &= vbCrLf & "After: " & helper.StringForQuickQuoteState(value) & " (" & strAfterStates & ")"
                    helper.LogStateChangeInSession(strChangeInfo)
                End If

            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EffectiveDate As String
            Get
                'Return _EffectiveDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.EffectiveDate
            End Get
            Set(value As String)
                'Dim oldEffectiveDate As String = _EffectiveDate 'added 12/2/2014
                '_EffectiveDate = value
                'VersionAndLobInfo.Set_QuoteEffectiveDate(_EffectiveDate) 'added 7/17/2018
                'qqHelper.ConvertToShortDate(_EffectiveDate)

                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    Exit Property
                'End If

                ''added 6/19/2012 to default to 1 year past eff date
                'If IsDate(_EffectiveDate) = True Then
                '    ExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_EffectiveDate)).ToString 'added .ToString 4/10/2014
                '    'added 12/13/2013 (transaction effective date should now match quote effective date)
                '    _TransactionEffectiveDate = _EffectiveDate
                '    '_TransactionExpirationDate = _ExpirationDate 'added 4/10/2014; should automatically happen when above logic sets ExpirationDate property
                '    'updated 4/2/2014 for SaveRate service
                '    _GuaranteedRatePeriodEffectiveDate = _EffectiveDate
                '    '_GuaranteedRatePeriodExpirationDate = _ExpirationDate 'should automatically happen when above logic sets ExpirationDate property

                '    'updated 12/2/2014 for FirstWrittenDate
                '    If _FirstWrittenDate = "" OrElse IsDate(_FirstWrittenDate) = False Then
                '        'blank or invalid
                '        _FirstWrittenDate = _EffectiveDate
                '    Else
                '        'valid date
                '        If CDate(_FirstWrittenDate) > CDate(_EffectiveDate) Then
                '            'FWD cannot be after effDate
                '            _FirstWrittenDate = _EffectiveDate
                '        Else
                '            'FWD is either the same or older than new effDate
                '            If oldEffectiveDate = "" OrElse IsDate(oldEffectiveDate) = False Then
                '                'blank or invalid previous effDate

                '            Else
                '                'valid previous effDate
                '                If CDate(_FirstWrittenDate) = CDate(oldEffectiveDate) Then
                '                    _FirstWrittenDate = _EffectiveDate
                '                End If
                '            End If
                '        End If
                '    End If
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.EffectiveDate = value
                VersionAndLobInfo.Set_QuoteEffectiveDate(TopLevelQuoteInfo.EffectiveDate)
                'added 8/7/2018
                If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing Then
                            msq.EffectiveDate = TopLevelQuoteInfo.EffectiveDate
                        End If
                    Next
                End If
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExpirationDate As String
            Get
                'Return _ExpirationDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ExpirationDate
            End Get
            Set(value As String)
                '_ExpirationDate = value
                'qqHelper.ConvertToShortDate(_ExpirationDate)

                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    Exit Property
                'End If

                ''updated 4/2/2014 for SaveRate service
                'If IsDate(_ExpirationDate) = True Then
                '    _GuaranteedRatePeriodExpirationDate = _ExpirationDate
                '    _TransactionExpirationDate = _ExpirationDate 'added 4/10/2014
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.ExpirationDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TotalQuotedPremium As String
            Get
                'Return _TotalQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_TotalQuotedPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.TotalQuotedPremium
            End Get
            Set(value As String)
                '_TotalQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TotalQuotedPremium)
                'updated 7/27/2018
                TopLevelQuoteInfo.TotalQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 70017 (BOP) or 80154 (CGL)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OccurrenceLiabilityLimit As String '4/29/2015 note: FAR is now using the OccurrenceLiabilityLimitId property... will need to update logic for FAR values and/or update logic to use the static data file
            Get
                'Return _OccurrenceLiabilityLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.OccurrenceLiabilityLimit
            End Get
            Set(value As String)
                '_OccurrenceLiabilityLimit = value
                'Select Case _OccurrenceLiabilityLimit
                '    Case "300,000"
                '        _OccurrenceLiabilityLimitId = "33"
                '    Case "500,000"
                '        _OccurrenceLiabilityLimitId = "34"
                '    Case "1,000,000"
                '        _OccurrenceLiabilityLimitId = "56"
                '        'added more 7/11/2012 for GL
                '    Case "25,000"
                '        _OccurrenceLiabilityLimitId = "8"
                '    Case "50,000"
                '        _OccurrenceLiabilityLimitId = "9"
                '    Case "100,000"
                '        _OccurrenceLiabilityLimitId = "10"
                '    Case "200,000"
                '        _OccurrenceLiabilityLimitId = "32"
                '    Case Else
                '        _OccurrenceLiabilityLimitId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.OccurrenceLiabilityLimit = value
            End Set
        End Property
        ''' <summary>
        ''' CPP Target Market
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Target Market Modifier - Applies to CPP only</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_TargetMarketID As String
            Get
                Return VersionAndLobInfo.CPP_TargetMarketID
            End Get
            Set(value As String)
                VersionAndLobInfo.CPP_TargetMarketID = value
            End Set
        End Property

        ''' <summary>
        '''
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 70017 (BOP) or 80154 (CGL)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OccurrenceLiabilityLimitId As String 'verified in database 7/3/2012; 4/29/2015 note: FAR is now using the OccurrenceLiabilityLimitId property... will need to update logic for FAR values and/or update logic to use the static data file
            Get
                'Return _OccurrenceLiabilityLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.OccurrenceLiabilityLimitId
            End Get
            Set(value As String)
                '_OccurrenceLiabilityLimitId = value
                ''(33=300,000; 34=500,000; 56=1,000,000)
                '_OccurrenceLiabilityLimit = ""
                'If IsNumeric(_OccurrenceLiabilityLimitId) = True Then
                '    Select Case _OccurrenceLiabilityLimitId
                '        Case "33"
                '            _OccurrenceLiabilityLimit = "300,000"
                '        Case "34"
                '            _OccurrenceLiabilityLimit = "500,000"
                '        Case "56"
                '            _OccurrenceLiabilityLimit = "1,000,000"
                '            'added more 7/11/2012 for GL
                '        Case "8"
                '            _OccurrenceLiabilityLimit = "25,000"
                '        Case "9"
                '            _OccurrenceLiabilityLimit = "50,000"
                '        Case "10"
                '            _OccurrenceLiabilityLimit = "100,000"
                '        Case "32"
                '            _OccurrenceLiabilityLimit = "200,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.OccurrenceLiabilityLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 70017 (BOP) or 80154 (CGL)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OccurrencyLiabilityQuotedPremium As String 'added 8/14/2012 for QuoteSummary dec section
            Get
                'Return _OccurrencyLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_OccurrencyLiabilityQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.OccurrencyLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_OccurrencyLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_OccurrencyLiabilityQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.OccurrencyLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80144</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TenantsFireLiability As String
            Get
                'Return _TenantsFireLiability
                'updated 7/17/2018
                Return VersionAndLobInfo.TenantsFireLiability
            End Get
            Set(value As String)
                '_TenantsFireLiability = value
                'Select Case _TenantsFireLiability
                '    Case "50,000"
                '        _TenantsFireLiabilityId = "9"
                '    Case "100,000"
                '        _TenantsFireLiabilityId = "10"
                '    Case "250,000"
                '        _TenantsFireLiabilityId = "55"
                '    Case "500,000"
                '        '_TenantsFireLiabilityId = "266"
                '        'updated 8/9/2012
                '        _TenantsFireLiabilityId = "34"
                '    Case "1,000,000"
                '        _TenantsFireLiabilityId = "56"
                '    Case Else
                '        _TenantsFireLiabilityId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.TenantsFireLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80144</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TenantsFireLiabilityId As String 'verified in database 7/3/2012
            Get
                'Return _TenantsFireLiabilityId
                'updated 7/17/2018
                Return VersionAndLobInfo.TenantsFireLiabilityId
            End Get
            Set(value As String)
                '_TenantsFireLiabilityId = value
                ''(9=50,000; 10=100,000; 55=250,000; 266=500,000; 56=1,000,000)
                '_TenantsFireLiability = ""
                'If IsNumeric(_TenantsFireLiabilityId) = True Then
                '    Select Case _TenantsFireLiabilityId
                '        Case "9"
                '            _TenantsFireLiability = "50,000"
                '        Case "10"
                '            _TenantsFireLiability = "100,000"
                '        Case "55"
                '            _TenantsFireLiability = "250,000"
                '        Case "34" '266"'updated 8/9/2012
                '            _TenantsFireLiability = "500,000"
                '        Case "56"
                '            _TenantsFireLiability = "1,000,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.TenantsFireLiabilityId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80144</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TenantsFireLiabilityQuotedPremium As String
            Get
                'Return _TenantsFireLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_TenantsFireLiabilityQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.TenantsFireLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_TenantsFireLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TenantsFireLiabilityQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.TenantsFireLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80146</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PropertyDamageLiabilityDeductible As String
            Get
                'Return _PropertyDamageLiabilityDeductible
                'updated 7/17/2018
                Return VersionAndLobInfo.PropertyDamageLiabilityDeductible
            End Get
            Set(value As String)
                '_PropertyDamageLiabilityDeductible = value
                'Select Case _PropertyDamageLiabilityDeductible
                '    Case "N/A"
                '        _PropertyDamageLiabilityDeductibleId = "0"
                '    Case "250"
                '        _PropertyDamageLiabilityDeductibleId = "21"
                '        '_PropertyDamageLiabilityDeductibleId = "4"
                '    Case "500"
                '        _PropertyDamageLiabilityDeductibleId = "22"
                '        '_PropertyDamageLiabilityDeductibleId = "8"
                '    Case "1000"
                '        _PropertyDamageLiabilityDeductibleId = "24"
                '        '_PropertyDamageLiabilityDeductibleId = "9"
                '    Case "2500"
                '        _PropertyDamageLiabilityDeductibleId = "75"
                '        '_PropertyDamageLiabilityDeductibleId = "15"
                '    Case Else
                '        _PropertyDamageLiabilityDeductibleId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.PropertyDamageLiabilityDeductible = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80146</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PropertyDamageLiabilityDeductibleId As String '*appears to be wrong but maybe not; checked database 7/3/2012
            Get
                'Return _PropertyDamageLiabilityDeductibleId
                'updated 7/17/2018
                Return VersionAndLobInfo.PropertyDamageLiabilityDeductibleId
            End Get
            Set(value As String)
                '_PropertyDamageLiabilityDeductibleId = value
                ''(0=N/A; 21=250; 22=500; 24=1000; 75=2500)
                '_PropertyDamageLiabilityDeductible = ""
                'If IsNumeric(_PropertyDamageLiabilityDeductibleId) = True Then
                '    Select Case _PropertyDamageLiabilityDeductibleId
                '        Case "0"
                '            _PropertyDamageLiabilityDeductible = "N/A"
                '        Case "21"
                '            _PropertyDamageLiabilityDeductible = "250"
                '        Case "22"
                '            _PropertyDamageLiabilityDeductible = "500"
                '        Case "24"
                '            _PropertyDamageLiabilityDeductible = "1000"
                '        Case "75"
                '            _PropertyDamageLiabilityDeductible = "2500"

                '            'started correcting 7/3/2012 'didn't work
                '            'Case "4"
                '            '    _PropertyDamageLiabilityDeductible = "250"
                '            'Case "8"
                '            '    _PropertyDamageLiabilityDeductible = "500"
                '            'Case "9"
                '            '    _PropertyDamageLiabilityDeductible = "1000"
                '            'Case "15"
                '            '    _PropertyDamageLiabilityDeductible = "2500"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.PropertyDamageLiabilityDeductibleId = value
            End Set
        End Property
        'added 06/26/2020 for Ohio Farm - code 80557
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PayrollAmount As String
            Get
                Return VersionAndLobInfo.PayrollAmount
            End Get
            Set(value As String)
                VersionAndLobInfo.PayrollAmount = value
            End Set
        End Property
        'added 06/26/2020 for Ohio Farm - code 80557
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property StopGapPayroll As String
            Get
                Return VersionAndLobInfo.StopGapPayroll
            End Get
            Set(value As String)
                VersionAndLobInfo.StopGapPayroll = value
            End Set
        End Property
        'added 06/26/2020 for Ohio Farm - code 80557
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property StopGapLimitId As String
            Get
                Return VersionAndLobInfo.StopGapLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.StopGapLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property StopGapQuotedPremium As String
            Get
                Return VersionAndLobInfo.StopGapQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.StopGapQuotedPremium = value
            End Set
        End Property
        'added 8/6/2020 for Ohio - Linked to PolicyLevel XML node "UnacceptableRisk"
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasHerbicidePersticideApplicator As Boolean
            Get
                Return VersionAndLobInfo.HasHerbicidePersticideApplicator
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasHerbicidePersticideApplicator = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PropertyDamageLiabilityDeductibleOption As String
            Get
                'Return _PropertyDamageLiabilityDeductibleOption
                'updated 7/17/2018
                Return VersionAndLobInfo.DeductiblePerType
            End Get
            Set(value As String)
                '_PropertyDamageLiabilityDeductibleOption = value
                'Select Case _PropertyDamageLiabilityDeductibleOption
                '    Case "N/A"
                '        _PropertyDamageLiabilityDeductibleOptionId = "0"
                '    Case "Per Occurrence"
                '        _PropertyDamageLiabilityDeductibleOptionId = "1"
                '    Case "Per Claim"
                '        _PropertyDamageLiabilityDeductibleOptionId = "2"
                '    Case Else
                '        _PropertyDamageLiabilityDeductibleOptionId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.DeductiblePerType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PropertyDamageLiabilityDeductibleOptionId As String 'verified in database 7/3/2012
            Get
                'Return _PropertyDamageLiabilityDeductibleOptionId
                'updated 7/17/2018
                Return VersionAndLobInfo.DeductiblePerTypeId
            End Get
            Set(value As String)
                '_PropertyDamageLiabilityDeductibleOptionId = value
                ''(0-N/A; 1=Per Occurrence; 2=Per Claim)
                '_PropertyDamageLiabilityDeductibleOption = ""
                'If IsNumeric(_PropertyDamageLiabilityDeductibleOptionId) = True Then
                '    Select Case _PropertyDamageLiabilityDeductibleOptionId
                '        Case "0"
                '            _PropertyDamageLiabilityDeductibleOption = "N/A"
                '        Case "1"
                '            _PropertyDamageLiabilityDeductibleOption = "Per Occurrence"
                '        Case "2"
                '            _PropertyDamageLiabilityDeductibleOption = "Per Claim"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.DeductiblePerTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286 or 80094 (PPA); property covers Enhancement Endorsement for all LOBs</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBusinessMasterEnhancement As Boolean
            Get
                'Return _HasBusinessMasterEnhancement
                'updated 7/17/2018
                Return VersionAndLobInfo.HasEnhancementEndorsement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasEnhancementEndorsement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBusinessMasterEnhancement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBusinessMasterEnhancement = value
                'updated 7/17/2018
                VersionAndLobInfo.HasEnhancementEndorsement = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286 or 80094 (PPA); property covers Enhancement Endorsement for all LOBs</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BusinessMasterEnhancementQuotedPremium As String
            Get
                'Return _BusinessMasterEnhancementQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_BusinessMasterEnhancementQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.EnhancementEndorsementQuotedPremium
            End Get
            Set(value As String)
                '_BusinessMasterEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BusinessMasterEnhancementQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.EnhancementEndorsementQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        '''
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80560 (CAP)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LegalEntityTypeQuotedPremium As String
            Get
                Return VersionAndLobInfo.LegalEntityTypeQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.LegalEntityTypeQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        '''
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80560 (CAP)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LegalEntityType As TriState
            Get
                Return VersionAndLobInfo.LegalEntityType
            End Get
            Set(value As TriState)
                VersionAndLobInfo.LegalEntityType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketRatingOption As String
            Get
                'Return _BlanketRatingOption
                'updated 7/17/2018
                Return VersionAndLobInfo.BlanketRatingOption
            End Get
            Set(value As String)
                '_BlanketRatingOption = value
                'Select Case _BlanketRatingOption
                '    Case "N/A"
                '        _BlanketRatingOptionId = "0"
                '    Case "Combined Building and Personal Property"
                '        _BlanketRatingOptionId = "1"
                '    Case "Building Only"
                '        _BlanketRatingOptionId = "2"
                '    Case "Personal Property Only"
                '        _BlanketRatingOptionId = "3"
                '    Case Else
                '        _BlanketRatingOptionId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.BlanketRatingOption = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketRatingOptionId As String 'verified in database 7/3/2012
            Get
                'Return _BlanketRatingOptionId
                'updated 7/17/2018
                Return VersionAndLobInfo.BlanketRatingOptionId
            End Get
            Set(value As String)
                '_BlanketRatingOptionId = value
                ''(0=N/A; 1=Combined Building and Personal Property; 2=Building Only; 3=Personal Property Only)
                '_BlanketRatingOption = ""
                'If IsNumeric(_BlanketRatingOptionId) = True Then
                '    Select Case _BlanketRatingOptionId
                '        Case "0"
                '            _BlanketRatingOption = "N/A"
                '        Case "1"
                '            _BlanketRatingOption = "Combined Building and Personal Property"
                '        Case "2"
                '            _BlanketRatingOption = "Building Only"
                '        Case "3"
                '            _BlanketRatingOption = "Personal Property Only"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.BlanketRatingOptionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketRatingQuotedPremium As String '*not sure where to find (specs show 21085)
            Get
                'Return _BlanketRatingQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketRatingQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.BlanketRatingQuotedPremium
            End Get
            Set(value As String)
                '_BlanketRatingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketRatingQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.BlanketRatingQuotedPremium = value
            End Set
        End Property

        'Public Property AdditionalInsuredsText As String '*not currently being returned in XML
        '    Get
        '        Return _AdditionalInsuredsText
        '    End Get
        '    Set(value As String)
        '        _AdditionalInsuredsText = value
        '    End Set
        'End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 926, 21018, 501, 21022, 21019, 21023, 21020, 21053, 21054, 21055, 21024, 21025, 21026, 21016, 21017, or 21021</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInsuredsCount As Integer
            Get
                'Return _AdditionalInsuredsCount
                'updated 6/5/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    Return qqHelper.AdditionalInsuredsCountFromList(_AdditionalInsureds)
                'Else
                '    Return _AdditionalInsuredsCount
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                Return VersionAndLobInfo.AdditionalInsuredsCount
            End Get
            Set(value As Integer)
                '_AdditionalInsuredsCount = value
                ''_AdditionalInsuredsText = _AdditionalInsuredsCount.ToString
                'updated 6/5/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    qqHelper.UpdateAdditionalInsuredsListBasedOnCount(value, _AdditionalInsureds, additionalInsuredsBackup:=_AdditionalInsuredsBackup, updateBackupListBeforeRemoving:=True, effDate:=_EffectiveDate, lobType:=_LobType, isAdditionalInsuredCheckboxBOP:=False)
                'Else
                '    _AdditionalInsuredsCount = value
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                VersionAndLobInfo.Set_QuoteEffectiveDate(EffectiveDate) 'updated 7/27/2018 from private variable to public property
                VersionAndLobInfo.AdditionalInsuredsCount = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 80371</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasAdditionalInsuredsCheckboxBOP As Boolean '3/9/2017 - BOP stuff
            Get
                'Return _HasAdditionalInsuredsCheckboxBOP
                'updated 7/17/2018
                Return VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasAdditionalInsuredsCheckboxBOP = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasAdditionalInsuredsCheckboxBOP = value
                'updated 7/17/2018
                VersionAndLobInfo.HasAdditionalInsuredsCheckboxBOP = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 80371</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInsuredsCheckboxBOP As List(Of QuickQuoteAdditionalInsured) '3/9/2017 - BOP stuff
            Get
                'SetParentOfListItems(_AdditionalInsuredsCheckboxBOP, "{663B7C7B-F2AC-4BF6-965A-D30F41A03966}")
                'Return _AdditionalInsuredsCheckboxBOP
                'updated 7/17/2018
                SetParentOfListItems(VersionAndLobInfo.AdditionalInsuredsCheckboxBOP, "{663B7C7B-F2AC-4BF6-965A-D30F41A03966}")
                Return VersionAndLobInfo.AdditionalInsuredsCheckboxBOP
            End Get
            Set(value As List(Of QuickQuoteAdditionalInsured))
                '_AdditionalInsuredsCheckboxBOP = value
                'SetParentOfListItems(_AdditionalInsuredsCheckboxBOP, "{663B7C7B-F2AC-4BF6-965A-D30F41A03966}")
                'updated 7/17/2018
                VersionAndLobInfo.AdditionalInsuredsCheckboxBOP = value
                SetParentOfListItems(VersionAndLobInfo.AdditionalInsuredsCheckboxBOP, "{663B7C7B-F2AC-4BF6-965A-D30F41A03966}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 80371</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property AdditionalInsuredsCheckboxBOPPremium As String '3/9/2017 - BOP stuff
            Get
                'Dim prem As Decimal = 0
                'If AdditionalInsuredsCheckboxBOP IsNot Nothing AndAlso AdditionalInsuredsCheckboxBOP.Count > 0 Then
                '    For Each ai As QuickQuoteAdditionalInsured In AdditionalInsuredsCheckboxBOP
                '        If ai IsNot Nothing AndAlso Not String.IsNullOrWhiteSpace(ai.FullTermPremium) AndAlso IsNumeric(ai.FullTermPremium) AndAlso CDec(ai.FullTermPremium > 0) Then
                '            prem += CDec(ai.FullTermPremium)
                '        End If
                '    Next
                'End If
                'Return prem.ToString()
                'updated 7/17/2018
                Return VersionAndLobInfo.AdditionalInsuredsCheckboxBOPPremium
            End Get
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 926, 21018, 501, 21022, 21019, 21023, 21020, 21053, 21054, 21055, 21024, 21025, 21026, 21016, 21017, or 21021</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInsuredsManualCharge As String 'added for GL 7/12/2012
            Get
                'Return _AdditionalInsuredsManualCharge
                'updated 6/6/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    'Return qqHelper.AdditionalInsuredsTotalManualChargeFromList(_AdditionalInsureds)
                '    'note: will just return empty string if 0
                '    Dim totalAddInsManChrg As String = qqHelper.AdditionalInsuredsTotalManualChargeFromList(_AdditionalInsureds)
                '    If qqHelper.IsZeroAmount(totalAddInsManChrg) = True Then
                '        totalAddInsManChrg = ""
                '    End If
                '    Return totalAddInsManChrg
                'Else
                '    Return _AdditionalInsuredsManualCharge
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                Return VersionAndLobInfo.AdditionalInsuredsManualCharge
            End Get
            Set(value As String)
                '_AdditionalInsuredsManualCharge = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AdditionalInsuredsManualCharge)'won't use unless needed
                'updated 6/6/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    qqHelper.UpdateAdditionalInsuredsListBasedOnManualCharge(value, _AdditionalInsureds, additionalInsuredsBackup:=_AdditionalInsuredsBackup, updateBackupListBeforeRemoving:=True, effDate:=_EffectiveDate, lobType:=_LobType, isAdditionalInsuredCheckboxBOP:=False, maintainOneItemFromOriginalListWhenResetting:=False, maintainFirstOrLastItem:=helper.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=False, applicableItemToApplyDifferenceTo:=helper.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=helper.FirstOrLast.First, treatAmountsAsIntegerOverDecimal:=False)
                'Else
                '    _AdditionalInsuredsManualCharge = value
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                VersionAndLobInfo.Set_QuoteEffectiveDate(EffectiveDate) 'updated 7/27/2018 from private variable to public property
                VersionAndLobInfo.AdditionalInsuredsManualCharge = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 926, 21018, 501, 21022, 21019, 21023, 21020, 21053, 21054, 21055, 21024, 21025, 21026, 21016, 21017, or 21021</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInsuredsQuotedPremium As String
            Get
                'Return _AdditionalInsuredsQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_AdditionalInsuredsQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.AdditionalInsuredsQuotedPremium
            End Get
            Set(value As String)
                '_AdditionalInsuredsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AdditionalInsuredsQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.AdditionalInsuredsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185 (this property is specific to NumberOfEmployees)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityText As String
            Get
                'Return _EmployeeBenefitsLiabilityText
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityText
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityText = value
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityText = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityOccurrenceLimit As String
            Get
                'Return _EmployeeBenefitsLiabilityOccurrenceLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityOccurrenceLimit
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityOccurrenceLimit = value
                'Select Case _EmployeeBenefitsLiabilityOccurrenceLimit
                '    Case "N/A"
                '        _EmployeeBenefitsLiabilityOccurrenceLimitId = "0"
                '    Case "300,000"
                '        _EmployeeBenefitsLiabilityOccurrenceLimitId = "33"
                '    Case "500,000"
                '        _EmployeeBenefitsLiabilityOccurrenceLimitId = "34"
                '    Case "1,000,000"
                '        _EmployeeBenefitsLiabilityOccurrenceLimitId = "56"
                '    Case Else
                '        _EmployeeBenefitsLiabilityOccurrenceLimitId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityOccurrenceLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityOccurrenceLimitId As String
            Get
                'Return _EmployeeBenefitsLiabilityOccurrenceLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityOccurrenceLimitId
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityOccurrenceLimitId = value
                '_EmployeeBenefitsLiabilityOccurrenceLimit = ""
                'If IsNumeric(_EmployeeBenefitsLiabilityOccurrenceLimitId) = True Then
                '    Select Case _EmployeeBenefitsLiabilityOccurrenceLimitId
                '        Case "0"
                '            _EmployeeBenefitsLiabilityOccurrenceLimit = "N/A"
                '        Case "33"
                '            _EmployeeBenefitsLiabilityOccurrenceLimit = "300,000"
                '        Case "34"
                '            _EmployeeBenefitsLiabilityOccurrenceLimit = "500,000"
                '        Case "56"
                '            _EmployeeBenefitsLiabilityOccurrenceLimit = "1,000,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityOccurrenceLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityQuotedPremium As String
            Get
                'Return _EmployeeBenefitsLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_EmployeeBenefitsLiabilityQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_EmployeeBenefitsLiabilityQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityRetroactiveDate As String
            Get
                'Return _EmployeeBenefitsLiabilityRetroactiveDate
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityRetroactiveDate
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityRetroactiveDate = value
                'qqHelper.ConvertToShortDate(_EmployeeBenefitsLiabilityRetroactiveDate)
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityRetroactiveDate = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityAggregateLimit As String
            Get
                'Return _EmployeeBenefitsLiabilityAggregateLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityAggregateLimit
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityAggregateLimit = value 'might need limit formatting
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityAggregateLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 185</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeBenefitsLiabilityDeductible As String
            Get
                'Return _EmployeeBenefitsLiabilityDeductible
                'updated 7/17/2018
                Return VersionAndLobInfo.EmployeeBenefitsLiabilityDeductible
            End Get
            Set(value As String)
                '_EmployeeBenefitsLiabilityDeductible = value 'might need limit formatting
                'updated 7/17/2018
                VersionAndLobInfo.EmployeeBenefitsLiabilityDeductible = value
            End Set
        End Property

        '3/9/2017 - BOP stuff
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10132</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasElectronicData As Boolean
            Get
                'Return _HasElectronicData
                'updated 7/17/2018
                Return VersionAndLobInfo.HasElectronicData
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasElectronicData
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasElectronicData = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasElectronicData = value
                'updated 7/17/2018
                VersionAndLobInfo.HasElectronicData = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10132</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ElectronicDataLimit As String
            Get
                'Return _ElectronicDataLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.ElectronicDataLimit
            End Get
            Set(value As String)
                '_ElectronicDataLimit = value
                'qqHelper.ConvertToLimitFormat(_ElectronicDataLimit)
                'updated 7/17/2018
                VersionAndLobInfo.ElectronicDataLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10132</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ElectronicDataQuotedPremium As String
            Get
                'Return _ElectronicDataQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_ElectronicDataQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ElectronicDataQuotedPremium
            End Get
            Set(value As String)
                '_ElectronicDataQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ElectronicDataQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ElectronicDataQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21004</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentInstallationLimit As String '*contractor stuff not currently being sent or returned in XML; okay now
            Get
                'Return _ContractorsEquipmentInstallationLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsEquipmentInstallationLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentInstallationLimit = value
                ''qqHelper.ConvertToLimitFormat(_ContractorsEquipmentInstallationLimit)'now being hard-coded w/ ids (6/18/2012)
                'Select Case _ContractorsEquipmentInstallationLimit
                '    Case "5,000"
                '        _ContractorsEquipmentInstallationLimitId = "15"
                '    Case "10,000"
                '        _ContractorsEquipmentInstallationLimitId = "7"
                '    Case "15,000"
                '        _ContractorsEquipmentInstallationLimitId = "48"
                '    Case "20,000"
                '        _ContractorsEquipmentInstallationLimitId = "49"
                '    Case "25,000"
                '        _ContractorsEquipmentInstallationLimitId = "8"
                '    Case Else
                '        _ContractorsEquipmentInstallationLimitId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsEquipmentInstallationLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21004</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentInstallationLimitId As String 'verified in database 7/3/2012
            Get
                'Return _ContractorsEquipmentInstallationLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsEquipmentInstallationLimitId
            End Get
            Set(value As String)
                '_ContractorsEquipmentInstallationLimitId = value
                'If IsNumeric(_ContractorsEquipmentInstallationLimitId) = True Then
                '    Select Case _ContractorsEquipmentInstallationLimitId
                '        Case "15"
                '            _ContractorsEquipmentInstallationLimit = "5,000"
                '        Case "7"
                '            _ContractorsEquipmentInstallationLimit = "10,000"
                '        Case "48"
                '            _ContractorsEquipmentInstallationLimit = "15,000"
                '        Case "49"
                '            _ContractorsEquipmentInstallationLimit = "20,000"
                '        Case "8"
                '            _ContractorsEquipmentInstallationLimit = "25,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsEquipmentInstallationLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21004</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentInstallationLimitQuotedPremium As String
            Get
                'Return _ContractorsEquipmentInstallationLimitQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentInstallationLimitQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsEquipmentInstallationLimitQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentInstallationLimitQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentInstallationLimitQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsEquipmentInstallationLimitQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21007</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentBlanket As String
            Get
                'Return _ContractorsToolsEquipmentBlanket
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentBlanket
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentBlanket = value
                'qqHelper.ConvertToLimitFormat(_ContractorsToolsEquipmentBlanket)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentBlanket = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21007</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentBlanketSubLimitId As String '3/9/2017 - BOP stuff
            Get
                'Return _ContractorsToolsEquipmentBlanketSubLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentBlanketSubLimitId
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentBlanketSubLimitId = value
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentBlanketSubLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21007</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentBlanketQuotedPremium As String
            Get
                'Return _ContractorsToolsEquipmentBlanketQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ContractorsToolsEquipmentBlanketQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentBlanketQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentBlanketQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsToolsEquipmentBlanketQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentBlanketQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21008</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentScheduled As String
            Get
                'Return _ContractorsToolsEquipmentScheduled
                'updated 6/6/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    'Return qqHelper.ContractorsEquipmentScheduledItemsTotalLimitFromList(_ContractorsEquipmentScheduledItems)
                '    'note: will just return empty string if 0
                '    Dim ceTotal As String = qqHelper.ContractorsEquipmentScheduledItemsTotalLimitFromList(_ContractorsEquipmentScheduledItems, returnInLimitFormat:=True)
                '    If qqHelper.IsZeroAmount(ceTotal) = True Then
                '        ceTotal = ""
                '    End If
                '    Return ceTotal
                'Else
                '    Return _ContractorsToolsEquipmentScheduled
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                Return VersionAndLobInfo.ContractorsToolsEquipmentScheduled
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentScheduled = value
                'qqHelper.ConvertToLimitFormat(_ContractorsToolsEquipmentScheduled)
                'updated 6/6/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    qqHelper.UpdateContractorsEquipmentScheduledItemsListBasedOnTotalLimit(value, _ContractorsEquipmentScheduledItems, contractorsEquipScheduledItemsBackup:=_ContractorsEquipmentScheduledItemsBackup, updateBackupListBeforeRemoving:=True, maintainOneItemFromOriginalListWhenResetting:=False, maintainFirstOrLastItem:=helper.FirstOrLast.First, maintainItemsOnUnresolvedDifference:=False, applicableItemToApplyDifferenceTo:=helper.FirstLastOrAll.All, firstOrLastItemOrderWhenApplyingDifferenceToAll:=helper.FirstOrLast.First, treatAmountsAsIntegerOverDecimal:=True)
                'Else
                '    _ContractorsToolsEquipmentScheduled = value
                '    qqHelper.ConvertToLimitFormat(_ContractorsToolsEquipmentScheduled)
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.Set_QuoteTransactionType(QuoteTransactionType) 'updated 7/27/2018 from private variable to public property
                VersionAndLobInfo.ContractorsToolsEquipmentScheduled = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21008</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentScheduledQuotedPremium As String
            Get
                'Return _ContractorsToolsEquipmentScheduledQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ContractorsToolsEquipmentScheduledQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentScheduledQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentScheduledQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsToolsEquipmentScheduledQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentScheduledQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21005</remarks> '4/1/2015 note: removed ' (would also use 21421 if present in response xml)'
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentRented As String
            Get
                'Return _ContractorsToolsEquipmentRented
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentRented
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentRented = value
                'qqHelper.ConvertToLimitFormat(_ContractorsToolsEquipmentRented)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentRented = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21005</remarks> '4/1/2015 note: removed ' (would also use 21421 if present in response xml)'
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsToolsEquipmentRentedQuotedPremium As String
            Get
                'Return _ContractorsToolsEquipmentRentedQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ContractorsToolsEquipmentRentedQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsToolsEquipmentRentedQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsToolsEquipmentRentedQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsToolsEquipmentRentedQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsToolsEquipmentRentedQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21006</remarks> '4/1/2015 note: removed ' (would also use 80225 if present in response xml)'
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEmployeeTools As String
            Get
                'Return _ContractorsEmployeeTools
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsEmployeeTools
            End Get
            Set(value As String)
                '_ContractorsEmployeeTools = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEmployeeTools)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsEmployeeTools = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21006</remarks> '4/1/2015 note: removed ' (would also use 80225 if present in response xml)'
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEmployeeToolsQuotedPremium As String
            Get
                'Return _ContractorsEmployeeToolsQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEmployeeToolsQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.ContractorsEmployeeToolsQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEmployeeToolsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEmployeeToolsQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.ContractorsEmployeeToolsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21009 (this property is specific to NumberOfEmployees)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeEmpDisEmployeeText As String '*not currently being returned in XML; okay now
            Get
                'Return _CrimeEmpDisEmployeeText
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeEmpDisEmployeeText
            End Get
            Set(value As String)
                '_CrimeEmpDisEmployeeText = value
                'updated 7/17/2018
                VersionAndLobInfo.CrimeEmpDisEmployeeText = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21009 (this property is specific to NumberOfLocations)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeEmpDisLocationText As String '*not currently being returned in XML; okay now
            Get
                'Return _CrimeEmpDisLocationText
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeEmpDisLocationText
            End Get
            Set(value As String)
                '_CrimeEmpDisLocationText = value
                'updated 7/17/2018
                VersionAndLobInfo.CrimeEmpDisLocationText = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21009</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeEmpDisLimit As String
            Get
                'Return _CrimeEmpDisLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeEmpDisLimit
            End Get
            Set(value As String)
                '_CrimeEmpDisLimit = value
                'Select Case _CrimeEmpDisLimit
                '    Case "5,000"
                '        _CrimeEmpDisLimitId = "15"
                '    Case "10,000"
                '        _CrimeEmpDisLimitId = "7"
                '    Case "25,000"
                '        _CrimeEmpDisLimitId = "8"
                '    Case "50,000"
                '        _CrimeEmpDisLimitId = "9"
                '    Case "100,000"
                '        _CrimeEmpDisLimitId = "10"
                '    Case Else
                '        _CrimeEmpDisLimitId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.CrimeEmpDisLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21009</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeEmpDisLimitId As String 'verified in database 7/3/2012
            Get
                'Return _CrimeEmpDisLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeEmpDisLimitId
            End Get
            Set(value As String)
                '_CrimeEmpDisLimitId = value
                ''(15=5,000; 7=10,000; 8=25,000; 9=50,000; 10=100,000)
                '_CrimeEmpDisLimit = ""
                'If IsNumeric(_CrimeEmpDisLimitId) = True Then
                '    Select Case _CrimeEmpDisLimitId
                '        Case "15"
                '            _CrimeEmpDisLimit = "5,000"
                '        Case "7"
                '            _CrimeEmpDisLimit = "10,000"
                '        Case "8"
                '            _CrimeEmpDisLimit = "25,000"
                '        Case "9"
                '            _CrimeEmpDisLimit = "50,000"
                '        Case "10"
                '            _CrimeEmpDisLimit = "100,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.CrimeEmpDisLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21009</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeEmpDisQuotedPremium As String
            Get
                'Return _CrimeEmpDisQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_CrimeEmpDisQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeEmpDisQuotedPremium
            End Get
            Set(value As String)
                '_CrimeEmpDisQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CrimeEmpDisQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.CrimeEmpDisQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21010</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeForgeryLimit As String
            Get
                'Return _CrimeForgeryLimit
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeForgeryLimit
            End Get
            Set(value As String)
                '_CrimeForgeryLimit = value
                'Select Case _CrimeForgeryLimit
                '    Case "5,000"
                '        _CrimeForgeryLimitId = "15"
                '    Case "10,000"
                '        _CrimeForgeryLimitId = "7"
                '    Case "25,000"
                '        _CrimeForgeryLimitId = "8"
                '    Case "50,000"
                '        _CrimeForgeryLimitId = "9"
                '    Case "100,000"
                '        _CrimeForgeryLimitId = "10"
                '    Case Else
                '        _CrimeForgeryLimitId = ""
                'End Select
                'updated 7/17/2018
                VersionAndLobInfo.CrimeForgeryLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21010</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeForgeryLimitId As String 'verified in database 7/3/2012
            Get
                'Return _CrimeForgeryLimitId
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeForgeryLimitId
            End Get
            Set(value As String)
                '_CrimeForgeryLimitId = value
                ''(15=5,000; 7=10,000; 8=25,000; 9=50,000; 10=100,000)
                '_CrimeForgeryLimit = ""
                'If IsNumeric(_CrimeForgeryLimitId) = True Then
                '    Select Case _CrimeForgeryLimitId
                '        Case "15"
                '            _CrimeForgeryLimit = "5,000"
                '        Case "7"
                '            _CrimeForgeryLimit = "10,000"
                '        Case "8"
                '            _CrimeForgeryLimit = "25,000"
                '        Case "9"
                '            _CrimeForgeryLimit = "50,000"
                '        Case "10"
                '            _CrimeForgeryLimit = "100,000"
                '    End Select
                'End If
                'updated 7/17/2018
                VersionAndLobInfo.CrimeForgeryLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21010</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CrimeForgeryQuotedPremium As String
            Get
                'Return _CrimeForgeryQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_CrimeForgeryQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.CrimeForgeryQuotedPremium
            End Get
            Set(value As String)
                '_CrimeForgeryQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CrimeForgeryQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.CrimeForgeryQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 309</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasEarthquake As Boolean
            Get
                'Return _HasEarthquake
                'updated 7/17/2018
                Return VersionAndLobInfo.HasEarthquake
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasEarthquake
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasEarthquake = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasEarthquake = value
                'updated 7/17/2018
                VersionAndLobInfo.HasEarthquake = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 309</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EarthquakeQuotedPremium As String
            Get
                'Return _EarthquakeQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_EarthquakeQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.EarthquakeQuotedPremium
            End Get
            Set(value As String)
                '_EarthquakeQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_EarthquakeQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.EarthquakeQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21029</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasHiredAuto As Boolean
            Get
                'Return _HasHiredAuto
                'updated 7/17/2018
                Return VersionAndLobInfo.HasHiredAuto
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasHiredAuto
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasHiredAuto = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasHiredAuto = value
                'updated 7/17/2018
                VersionAndLobInfo.HasHiredAuto = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21029</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HiredAutoQuotedPremium As String
            Get
                'Return _HiredAutoQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_HiredAutoQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.HiredAutoQuotedPremium
            End Get
            Set(value As String)
                '_HiredAutoQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_HiredAutoQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.HiredAutoQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21030</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasNonOwnedAuto As Boolean
            Get
                'Return _HasNonOwnedAuto
                'updated 7/17/2018
                Return VersionAndLobInfo.HasNonOwnedAuto
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasNonOwnedAuto
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasNonOwnedAuto = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasNonOwnedAuto = value
                'updated 7/17/2018
                VersionAndLobInfo.HasNonOwnedAuto = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21030</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnedAutoWithDelivery As Boolean '3/9/2017 - BOP stuff
            Get
                'Return _NonOwnedAutoWithDelivery
                'updated 7/17/2018
                Return VersionAndLobInfo.NonOwnedAutoWithDelivery
            End Get
            Set(value As Boolean)
                '_NonOwnedAutoWithDelivery = value
                'updated 7/17/2018
                VersionAndLobInfo.NonOwnedAutoWithDelivery = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21030</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnedAutoQuotedPremium As String
            Get
                'Return _NonOwnedAutoQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_NonOwnedAutoQuotedPremium)
                'updated 7/17/2018
                Return VersionAndLobInfo.NonOwnedAutoQuotedPremium
            End Get
            Set(value As String)
                '_NonOwnedAutoQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_NonOwnedAutoQuotedPremium)
                'updated 7/17/2018
                VersionAndLobInfo.NonOwnedAutoQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations As Generic.List(Of QuickQuoteLocation)
            Get
                'SetParentOfListItems(_Locations, "{663B7C7B-F2AC-4BF6-965A-D30F41A03967}")
                'Return _Locations
                'updated 7/18/2018
                SetParentOfListItems(VersionAndLobInfo.Locations, "{663B7C7B-F2AC-4BF6-965A-D30F41A03967}")
                Return VersionAndLobInfo.Locations
            End Get
            Set(value As Generic.List(Of QuickQuoteLocation))
                '_Locations = value
                'SetParentOfListItems(_Locations, "{663B7C7B-F2AC-4BF6-965A-D30F41A03967}")
                'updated 7/18/2018
                VersionAndLobInfo.Locations = value
                SetParentOfListItems(VersionAndLobInfo.Locations, "{663B7C7B-F2AC-4BF6-965A-D30F41A03967}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyCoverages As Generic.List(Of QuickQuoteCoverage)
            Get
                'SetParentOfListItems(_PolicyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03968}")
                'Return _PolicyCoverages
                'updated 7/18/2018
                SetParentOfListItems(VersionAndLobInfo.Coverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03968}")
                Return VersionAndLobInfo.Coverages
            End Get
            Set(value As Generic.List(Of QuickQuoteCoverage))
                '_PolicyCoverages = value
                'SetParentOfListItems(_PolicyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03968}")
                'updated 7/18/2018
                VersionAndLobInfo.Coverages = value
                SetParentOfListItems(VersionAndLobInfo.Coverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03968}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ValidationItems As Generic.List(Of QuickQuoteValidationItem)
            Get
                'SetParentOfListItems(_ValidationItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03969}")
                'Return _ValidationItems
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.ValidationItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03969}")
                Return TopLevelQuoteInfo.ValidationItems
            End Get
            Set(value As Generic.List(Of QuickQuoteValidationItem))
                '_ValidationItems = value
                'SetParentOfListItems(_ValidationItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03969}")
                'updated 7/27/2018
                TopLevelQuoteInfo.ValidationItems = value
                SetParentOfListItems(TopLevelQuoteInfo.ValidationItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03969}")
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80145; CoverageLimitId</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PropertyDeductibleId As String '*currently being sent/returned in XML here instead of at building level
            Get
                'Return _PropertyDeductibleId
                'updated 7/18/2018
                Return VersionAndLobInfo.PropertyDeductibleId
            End Get
            Set(value As String)
                '_PropertyDeductibleId = value
                'updated 7/18/2018
                VersionAndLobInfo.PropertyDeductibleId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Client As QuickQuoteClient
            Get
                'SetObjectsParent(_Client)
                'Return _Client
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.Client)
                'Return TopLevelQuoteInfo.Client
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Client
            End Get
            Set(value As QuickQuoteClient)
                '_Client = value
                'SetObjectsParent(_Client)
                'updated 7/27/2018
                'TopLevelQuoteInfo.Client = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Client = value
                SetObjectsParent(TopLevelQuoteInfo.Client)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IsNew As Boolean
            Get
                'Return _IsNew
                'updated 7/27/2018
                Return TopLevelQuoteInfo.IsNew
            End Get
            Set(value As Boolean)
                '_IsNew = value
                'updated 7/27/2018
                TopLevelQuoteInfo.IsNew = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BillToId As String
            Get
                'Return _BillToId
                'updated 7/27/2018
                Return TopLevelQuoteInfo.BillToId
            End Get
            Set(value As String)
                '_BillToId = value
                ''updated 12/13/2012 (sets both when set by developer; only sets 1 when read from xml)
                'If _OnlyUsePropertyToSetFieldWithSameName = False Then
                '    _CurrentBilltoId = value
                'Else 'don't set other value; set flag back to False after
                '    _OnlyUsePropertyToSetFieldWithSameName = False
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.BillToId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CurrentBilltoId As String
            Get
                'Return _CurrentBilltoId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.CurrentBilltoId
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.CurrentBilltoId
            End Get
            Set(value As String)
                '_CurrentBilltoId = value
                ''updated 12/13/2012 (sets both when set by developer; only sets 1 when read from xml)
                'If _OnlyUsePropertyToSetFieldWithSameName = False Then
                '    _BillToId = value
                'Else 'don't set other value; set flag back to False after
                '    _OnlyUsePropertyToSetFieldWithSameName = False
                'End If
                'updated 7/27/2018
                'TopLevelQuoteInfo.CurrentBilltoId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.CurrentBilltoId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CurrentPayplanId As String '12/11/2012 - triggered off this instead of BillingPayPlanId
            Get
                'Return _CurrentPayplanId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.CurrentPayplanId
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.CurrentPayplanId
            End Get
            Set(value As String)
                '_CurrentPayplanId = value
                ''updated 12/13/2012 (sets both when set by developer; only sets 1 when read from xml)
                'If _OnlyUsePropertyToSetFieldWithSameName = False Then
                '    _BillingPayPlanId = value
                'Else 'don't set other value; set flag back to False after
                '    _OnlyUsePropertyToSetFieldWithSameName = False
                'End If
                'updated 7/27/2018
                'TopLevelQuoteInfo.CurrentPayplanId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.CurrentPayplanId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyTermId As String
            Get
                'Return _PolicyTermId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyTermId
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyTermId
            End Get
            Set(value As String)
                '_PolicyTermId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyTermId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyTermId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ReceivedDate As String
            Get
                'Return _ReceivedDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ReceivedDate
            End Get
            Set(value As String)
                '_ReceivedDate = value
                'qqHelper.ConvertToShortDate(_ReceivedDate)
                'updated 7/27/2018
                TopLevelQuoteInfo.ReceivedDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionEffectiveDate As String
            Get
                'Return _TransactionEffectiveDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.TransactionEffectiveDate
            End Get
            Set(value As String)
                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    _TransactionEffectiveDate = value
                '    qqHelper.ConvertToShortDate(_TransactionEffectiveDate)
                '    Exit Property
                'End If

                ''updated 12/13/2013 w/ IF; was previously running inner code all the time (transaction effective date should now match quote effective date)
                'If _TransactionEffectiveDate = "" OrElse IsDate(_TransactionEffectiveDate) = False OrElse _EffectiveDate = "" OrElse IsDate(_EffectiveDate) = False Then
                '    _TransactionEffectiveDate = value
                '    qqHelper.ConvertToShortDate(_TransactionEffectiveDate)
                '    'updated 4/10/2014
                '    If IsDate(_TransactionEffectiveDate) = True Then
                '        'TransactionExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_TransactionEffectiveDate)).ToString 'added .ToString 4/10/2014
                '        _TransactionExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_TransactionEffectiveDate)).ToString 'added .ToString 4/10/2014
                '        qqHelper.ConvertToShortDate(_TransactionExpirationDate)
                '    End If
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.TransactionEffectiveDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionExpirationDate As String 'added 4/10/2014
            Get
                'Return _TransactionExpirationDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.TransactionExpirationDate
            End Get
            Set(value As String)
                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    _TransactionExpirationDate = value
                '    qqHelper.ConvertToShortDate(_TransactionExpirationDate)
                '    Exit Property
                'End If

                'If _TransactionExpirationDate = "" OrElse IsDate(_TransactionExpirationDate) = False OrElse _ExpirationDate = "" OrElse IsDate(_ExpirationDate) = False Then
                '    _TransactionExpirationDate = value
                '    qqHelper.ConvertToShortDate(_TransactionExpirationDate)
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.TransactionExpirationDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionTypeId As String
            Get
                'Return _TransactionTypeId
                'updated 7/27/2018
                Return TopLevelQuoteInfo.TransactionTypeId
            End Get
            Set(value As String)
                '_TransactionTypeId = value
                'updated 7/27/2018
                TopLevelQuoteInfo.TransactionTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionUsersId As String
            Get
                'Return _TransactionUsersId
                'updated 7/27/2018
                Return TopLevelQuoteInfo.TransactionUsersId
            End Get
            Set(value As String)
                '_TransactionUsersId = value
                'updated 7/27/2018
                TopLevelQuoteInfo.TransactionUsersId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VersionId As String
            Get
                'Return _VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.VersionId
            End Get
            Set(value As String)
                '_VersionId = value
                'If IsNumeric(_VersionId) = True AndAlso _VersionId <> "0" Then
                '    '_LobType = CInt(_VersionId)
                '    'QuickQuoteLobType.TryParse(CInt(_VersionId), _LobType)
                '    'If [Enum].IsDefined(QuickQuoteLobType, CInt(_VersionId)) = True Then

                '    'End If
                '    'If QuickQuoteLobType.IsDefined([Enum], CInt(_VersionId)) = True Then

                '    'End If
                '    'If [Enum].IsDefined(TypeOf QuickQuoteLobType, CInt(_VersionId)) = True Then

                '    'End If
                '    '_LobType = [Enum].ToObject(QuickQuoteLobType, CInt(_VersionId))
                '    '_LobType = (QuickQuoteLobType)Enum.ToObject(typeof(QuickQuoteLobType), (int)DayOfWeek.Friday)
                '    'Dim a = [Enum].Parse(TypeOf QuickQuoteLobType, _VersionId)
                '    '_LobType = Enum.ToObject(typeof(QuickQuoteLobType), cint(_versionid))
                '    'Dim a As String = System.Enum.GetName(GetType(QuickQuoteLobType), _LobType)
                '    'Dim vals As Array = System.Enum.GetValues(QuickQuoteLobType)

                '    'If System.Enum.IsDefined(GetType(QuickQuoteLobType), CInt(_VersionId)) = True Then
                '    '    _LobType = CInt(_VersionId)
                '    '    'QuickQuoteLobType.TryParse(CInt(_VersionId), _LobType)
                '    '    'If _LobType = QuickQuoteLobType.DwellingFirePersonalOld Then 'added 8/15/2013; previous logic is in ELSE
                '    '    '    LobType = QuickQuoteLobType.DwellingFirePersonal 'this may not be needed since Diamond appears to rate w/ the correct one even if an expired one is passed in
                '    '    'Else
                '    '    '    SetLobIdForType()
                '    '    'End If
                '    '    'updated 11/27/2013 after removing DwellingFirePersonalOld enum value
                '    '    SetLobIdForType()
                '    'End If
                '    'updated 11/27/2013
                '    '9/23/2014 - logic removed here; updated below
                '    '_LobId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId, _VersionId, QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
                '    'If System.Enum.TryParse(Of QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '    '    _LobType = QuickQuoteLobType.None
                '    'End If
                '    '11/27/2013 note: updated logic works a little different than before in the fact that it will always overwrite the other properties (LobId, LobType) as long as VersionId is numeric and <> 0; doesn't have to be one of the correct values

                '    '12/4/2013 note: can't rewrite this one to use an IF block for System.Enum.IsDefined since the VersionId can't be converted directly to LobType anymore (has to go to LobId, which can then be converted to LobType)

                '    'updated 9/23/2014 to allow for VersionId not mapped in our static data file... so we don't have to stay up-to-date; needed since we're now using a Diamond service to get the versionId before rating
                '    Dim holdLobId As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId, _VersionId, QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
                '    If holdLobId <> "" Then
                '        _LobId = holdLobId
                '        If System.Enum.TryParse(Of QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '            _LobType = QuickQuoteLobType.None
                '        End If

                '        ResetPackagePartVersionIds() 'added 11/4/2014
                '    Else 'added 1/6/2016 as safeguard... may be needed when loading new quote records (possibly even endorsements) into VR from Diamond policy image
                '        If String.IsNullOrEmpty(_LobId) = True AndAlso qqHelper.IsPositiveIntegerString(_VersionId) = True Then
                '            Dim lobIdForVersion As Integer = qqHelper.GetLobIdForVersionId(CInt(_VersionId))
                '            If lobIdForVersion > 0 Then
                '                _LobId = lobIdForVersion.ToString
                '                If System.Enum.TryParse(Of QuickQuoteLobType)(qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, _LobId, QuickQuoteHelperClass.QuickQuotePropertyName.LobType), _LobType) = False Then
                '                    _LobType = QuickQuoteLobType.None
                '                End If
                '            End If
                '        End If
                '    End If
                'End If
                'updated 7/16/2018
                VersionAndLobInfo.VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AddFormsVersionId As String 'added 11/4/2014; needs to be updated w/ versionId
            Get
                'Return _AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.AddFormsVersionId
            End Get
            Set(value As String)
                '_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RatingVersionId As String 'added 11/4/2014; needs to be updated w/ versionId
            Get
                'Return _RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.RatingVersionId
            End Get
            Set(value As String)
                '_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnderwritingVersionId As String 'added 11/4/2014; needs to be updated w/ versionId
            Get
                'Return _UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.UnderwritingVersionId
            End Get
            Set(value As String)
                '_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_PackagePart_VersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CPR_PackagePart_VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CPR_PackagePart_VersionId
            End Get
            Set(value As String)
                '_CPP_CPR_PackagePart_VersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CPR_PackagePart_VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_PackagePart_AddFormsVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CPR_PackagePart_AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CPR_PackagePart_AddFormsVersionId
            End Get
            Set(value As String)
                '_CPP_CPR_PackagePart_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CPR_PackagePart_AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_PackagePart_RatingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CPR_PackagePart_RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CPR_PackagePart_RatingVersionId
            End Get
            Set(value As String)
                '_CPP_CPR_PackagePart_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CPR_PackagePart_RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_PackagePart_UnderwritingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CPR_PackagePart_UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CPR_PackagePart_UnderwritingVersionId
            End Get
            Set(value As String)
                '_CPP_CPR_PackagePart_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CPR_PackagePart_UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_PackagePart_VersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CGL_PackagePart_VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CGL_PackagePart_VersionId
            End Get
            Set(value As String)
                '_CPP_CGL_PackagePart_VersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CGL_PackagePart_VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_PackagePart_AddFormsVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CGL_PackagePart_AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CGL_PackagePart_AddFormsVersionId
            End Get
            Set(value As String)
                '_CPP_CGL_PackagePart_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CGL_PackagePart_AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_PackagePart_RatingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CGL_PackagePart_RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CGL_PackagePart_RatingVersionId
            End Get
            Set(value As String)
                '_CPP_CGL_PackagePart_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CGL_PackagePart_RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_PackagePart_UnderwritingVersionId As String 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CGL_PackagePart_UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CGL_PackagePart_UnderwritingVersionId
            End Get
            Set(value As String)
                '_CPP_CGL_PackagePart_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CGL_PackagePart_UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Main_PackagePart_VersionId As String 'added 11/5/2014
            Get
                'Return _CPP_Main_PackagePart_VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_Main_PackagePart_VersionId
            End Get
            Set(value As String)
                '_CPP_Main_PackagePart_VersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_Main_PackagePart_VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Main_PackagePart_AddFormsVersionId As String 'added 11/5/2014
            Get
                'Return _CPP_Main_PackagePart_AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_Main_PackagePart_AddFormsVersionId
            End Get
            Set(value As String)
                '_CPP_Main_PackagePart_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_Main_PackagePart_AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Main_PackagePart_RatingVersionId As String 'added 11/5/2014
            Get
                'Return _CPP_Main_PackagePart_RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_Main_PackagePart_RatingVersionId
            End Get
            Set(value As String)
                '_CPP_Main_PackagePart_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_Main_PackagePart_RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Main_PackagePart_UnderwritingVersionId As String 'added 11/5/2014
            Get
                'Return _CPP_Main_PackagePart_UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_Main_PackagePart_UnderwritingVersionId
            End Get
            Set(value As String)
                '_CPP_Main_PackagePart_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_Main_PackagePart_UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_PackagePart_VersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CRM_PackagePart_VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CRM_PackagePart_VersionId
            End Get
            Set(value As String)
                '_CPP_CRM_PackagePart_VersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CRM_PackagePart_VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_PackagePart_AddFormsVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CRM_PackagePart_AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CRM_PackagePart_AddFormsVersionId
            End Get
            Set(value As String)
                '_CPP_CRM_PackagePart_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CRM_PackagePart_AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_PackagePart_RatingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CRM_PackagePart_RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CRM_PackagePart_RatingVersionId
            End Get
            Set(value As String)
                '_CPP_CRM_PackagePart_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CRM_PackagePart_RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_PackagePart_UnderwritingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CRM_PackagePart_UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CRM_PackagePart_UnderwritingVersionId
            End Get
            Set(value As String)
                '_CPP_CRM_PackagePart_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CRM_PackagePart_UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_PackagePart_VersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CIM_PackagePart_VersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CIM_PackagePart_VersionId
            End Get
            Set(value As String)
                '_CPP_CIM_PackagePart_VersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CIM_PackagePart_VersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_PackagePart_AddFormsVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CIM_PackagePart_AddFormsVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CIM_PackagePart_AddFormsVersionId
            End Get
            Set(value As String)
                '_CPP_CIM_PackagePart_AddFormsVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CIM_PackagePart_AddFormsVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_PackagePart_RatingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CIM_PackagePart_RatingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CIM_PackagePart_RatingVersionId
            End Get
            Set(value As String)
                '_CPP_CIM_PackagePart_RatingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CIM_PackagePart_RatingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_PackagePart_UnderwritingVersionId As String 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            Get
                'Return _CPP_CIM_PackagePart_UnderwritingVersionId
                'updated 7/16/2018
                Return VersionAndLobInfo.CPP_CIM_PackagePart_UnderwritingVersionId
            End Get
            Set(value As String)
                '_CPP_CIM_PackagePart_UnderwritingVersionId = value
                'updated 7/16/2018
                VersionAndLobInfo.CPP_CIM_PackagePart_UnderwritingVersionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WorkflowQueueId As String
            Get
                'Return _WorkflowQueueId
                'updated 7/27/2018
                Return TopLevelQuoteInfo.WorkflowQueueId
            End Get
            Set(value As String)
                '_WorkflowQueueId = value
                'updated 7/27/2018
                TopLevelQuoteInfo.WorkflowQueueId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Policyholder As QuickQuotePolicyholder
            Get
                'SetObjectsParent(_Policyholder)
                'Return _Policyholder
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.Policyholder)
                'Return TopLevelQuoteInfo.Policyholder
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Policyholder
            End Get
            Set(value As QuickQuotePolicyholder)
                '_Policyholder = value
                'SetObjectsParent(_Policyholder)
                'updated 7/27/2018
                'TopLevelQuoteInfo.Policyholder = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Policyholder = value
                SetObjectsParent(TopLevelQuoteInfo.Policyholder)
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Policyholder2 As QuickQuotePolicyholder
            Get
                'SetObjectsParent(_Policyholder2)
                'Return _Policyholder2
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.Policyholder2)
                'Return TopLevelQuoteInfo.Policyholder2
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Policyholder2
            End Get
            Set(value As QuickQuotePolicyholder)
                '_Policyholder2 = value
                'SetObjectsParent(_Policyholder2)
                'updated 7/27/2018
                'TopLevelQuoteInfo.Policyholder2 = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Policyholder2 = value
                SetObjectsParent(TopLevelQuoteInfo.Policyholder2)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BillMethodId As String
            Get
                'Return _BillMethodId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.BillMethodId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.BillMethodId
            End Get
            Set(value As String)
                '_BillMethodId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.BillMethodId = value
                'updated 8/7/2018;
                GetTopLevelQuoteObject().TopLevelQuoteInfo.BillMethodId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BillingPayPlanId As String '12/11/2012 - triggered off CurrentPayPlanId instead of this one
            Get
                'Return _BillingPayPlanId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.BillingPayPlanId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.BillingPayPlanId
            End Get
            Set(value As String)
                '_BillingPayPlanId = value
                ''updated 12/13/2012 (sets both when set by developer; only sets 1 when read from xml)
                'If _OnlyUsePropertyToSetFieldWithSameName = False Then
                '    _CurrentPayplanId = value
                'Else 'don't set other value; set flag back to False after
                '    _OnlyUsePropertyToSetFieldWithSameName = False
                'End If
                'updated 7/27/2018
                'TopLevelQuoteInfo.BillingPayPlanId = value
                'updated 8/7/2018;
                GetTopLevelQuoteObject().TopLevelQuoteInfo.BillingPayPlanId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyOriginTypeId As String
            Get
                'Return _PolicyOriginTypeId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyOriginTypeId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyOriginTypeId
            End Get
            Set(value As String)
                '_PolicyOriginTypeId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyOriginTypeId = value
                'updated 8/7/2018;
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyOriginTypeId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RiskGrade As String
            Get
                'Return _RiskGrade
                'updated 7/19/2018
                Return VersionAndLobInfo.RiskGrade
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.RiskGrade
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.RiskGrade) = True Then
                '            str = msq.RiskGrade
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_RiskGrade = value
                'updated 7/19/2018
                VersionAndLobInfo.RiskGrade = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RiskGradeLookupId As String
            Get
                'Return _RiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.RiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.RiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.RiskGradeLookupId) = True Then
                '            str = msq.RiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_RiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.RiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property RiskGradeLookupId_Original As String 'added 8/15/2017
            Get
                'Return _RiskGradeLookupId_Original
                'updated 7/19/2018
                Return VersionAndLobInfo.RiskGradeLookupId_Original
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.RiskGradeLookupId_Original
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.RiskGradeLookupId_Original) = True Then
                '            str = msq.RiskGradeLookupId_Original
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
        End Property
        Protected Friend Sub Set_RiskGradeLookupId_Original(ByVal rgLookupIdOrig As String) 'added 8/15/2017
            '_RiskGradeLookupId_Original = rgLookupIdOrig
            'updated 7/19/2018
            VersionAndLobInfo.Set_RiskGradeLookupId_Original(rgLookupIdOrig)
        End Sub
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_RiskGrade As String
            Get
                'Return _CPP_CGL_RiskGrade
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CGL_RiskGrade
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CGL_RiskGrade
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CGL_RiskGrade) = True Then
                '            str = msq.CPP_CGL_RiskGrade
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CGL_RiskGrade = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CGL_RiskGrade = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_RiskGradeLookupId As String
            Get
                'Return _CPP_CGL_RiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CGL_RiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CGL_RiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CGL_RiskGradeLookupId) = True Then
                '            str = msq.CPP_CGL_RiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CGL_RiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CGL_RiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_RiskGrade As String
            Get
                'Return _CPP_CPR_RiskGrade
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CPR_RiskGrade
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CPR_RiskGrade
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CPR_RiskGrade) = True Then
                '            str = msq.CPP_CPR_RiskGrade
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CPR_RiskGrade = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CPR_RiskGrade = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_RiskGradeLookupId As String
            Get
                'Return _CPP_CPR_RiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CPR_RiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CPR_RiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CPR_RiskGradeLookupId) = True Then
                '            str = msq.CPP_CPR_RiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CPR_RiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CPR_RiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ErrorRiskGradeLookupId As String
            Get
                'Return _ErrorRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.ErrorRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.ErrorRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.ErrorRiskGradeLookupId) = True Then
                '            str = msq.ErrorRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_ErrorRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.ErrorRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ReplacementRiskGradeLookupId As String
            Get
                'Return _ReplacementRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.ReplacementRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.ReplacementRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.ReplacementRiskGradeLookupId) = True Then
                '            str = msq.ReplacementRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_ReplacementRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.ReplacementRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_ErrorRiskGradeLookupId As String
            Get
                'Return _CPP_CGL_ErrorRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CGL_ErrorRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CGL_ErrorRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CGL_ErrorRiskGradeLookupId) = True Then
                '            str = msq.CPP_CGL_ErrorRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CGL_ErrorRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CGL_ErrorRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_ReplacementRiskGradeLookupId As String
            Get
                'Return _CPP_CGL_ReplacementRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CGL_ReplacementRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CGL_ReplacementRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CGL_ReplacementRiskGradeLookupId) = True Then
                '            str = msq.CPP_CGL_ReplacementRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CGL_ReplacementRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CGL_ReplacementRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_ErrorRiskGradeLookupId As String
            Get
                'Return _CPP_CPR_ErrorRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CPR_ErrorRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CPR_ErrorRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CPR_ErrorRiskGradeLookupId) = True Then
                '            str = msq.CPP_CPR_ErrorRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CPR_ErrorRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CPR_ErrorRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_ReplacementRiskGradeLookupId As String
            Get
                'Return _CPP_CPR_ReplacementRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CPR_ReplacementRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CPR_ReplacementRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CPR_ReplacementRiskGradeLookupId) = True Then
                '            str = msq.CPP_CPR_ReplacementRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CPR_ReplacementRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CPR_ReplacementRiskGradeLookupId = value
            End Set
        End Property
        'added 1/26/2015 for CIM and CRM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_RiskGrade As String
            Get
                'Return _CPP_CIM_RiskGrade
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CIM_RiskGrade
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CIM_RiskGrade
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CIM_RiskGrade) = True Then
                '            str = msq.CPP_CIM_RiskGrade
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CIM_RiskGrade = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CIM_RiskGrade = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_RiskGradeLookupId As String
            Get
                'Return _CPP_CIM_RiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CIM_RiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CIM_RiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CIM_RiskGradeLookupId) = True Then
                '            str = msq.CPP_CIM_RiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CIM_RiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CIM_RiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_ErrorRiskGradeLookupId As String
            Get
                'Return _CPP_CIM_ErrorRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CIM_ErrorRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CIM_ErrorRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CIM_ErrorRiskGradeLookupId) = True Then
                '            str = msq.CPP_CIM_ErrorRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CIM_ErrorRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CIM_ErrorRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_ReplacementRiskGradeLookupId As String
            Get
                'Return _CPP_CIM_ReplacementRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CIM_ReplacementRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CIM_ReplacementRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CIM_ReplacementRiskGradeLookupId) = True Then
                '            str = msq.CPP_CIM_ReplacementRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CIM_ReplacementRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CIM_ReplacementRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_RiskGrade As String
            Get
                'Return _CPP_CRM_RiskGrade
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CRM_RiskGrade
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CRM_RiskGrade
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CRM_RiskGrade) = True Then
                '            str = msq.CPP_CRM_RiskGrade
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CRM_RiskGrade = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CRM_RiskGrade = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_RiskGradeLookupId As String
            Get
                'Return _CPP_CRM_RiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CRM_RiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CRM_RiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CRM_RiskGradeLookupId) = True Then
                '            str = msq.CPP_CRM_RiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CRM_RiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CRM_RiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_ErrorRiskGradeLookupId As String
            Get
                'Return _CPP_CRM_ErrorRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CRM_ErrorRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CRM_ErrorRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CRM_ErrorRiskGradeLookupId) = True Then
                '            str = msq.CPP_CRM_ErrorRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CRM_ErrorRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CRM_ErrorRiskGradeLookupId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_ReplacementRiskGradeLookupId As String
            Get
                'Return _CPP_CRM_ReplacementRiskGradeLookupId
                'updated 7/19/2018
                Return VersionAndLobInfo.CPP_CRM_ReplacementRiskGradeLookupId
                'updated 9/17/2018
                'Dim str As String = VersionAndLobInfo.CPP_CRM_ReplacementRiskGradeLookupId
                'If qqHelper.IsPositiveIntegerString(str) = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso qqHelper.IsPositiveIntegerString(msq.CPP_CRM_ReplacementRiskGradeLookupId) = True Then
                '            str = msq.CPP_CRM_ReplacementRiskGradeLookupId
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return str
            End Get
            Set(value As String)
                '_CPP_CRM_ReplacementRiskGradeLookupId = value
                'updated 7/19/2018
                VersionAndLobInfo.CPP_CRM_ReplacementRiskGradeLookupId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasInitiatedFinalize As Boolean
            Get
                'Return _HasInitiatedFinalize
                'updated 7/27/2018
                Return TopLevelQuoteInfo.HasInitiatedFinalize
            End Get
            Set(value As Boolean)
                '_HasInitiatedFinalize = value
                'updated 7/27/2018
                TopLevelQuoteInfo.HasInitiatedFinalize = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyId As String
            Get
                'Return _PolicyId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyId
                'updated 8/28/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyId
            End Get
            Set(value As String)
                '_PolicyId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyId = value
                'updated 8/28/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyImageNum As String
            Get
                'Return _PolicyImageNum
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyImageNum
                'updated 8/28/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyImageNum
            End Get
            Set(value As String)
                '_PolicyImageNum = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyImageNum = value
                'updated 8/28/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyImageNum = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RenewalVersion As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.RenewalVersion
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.RenewalVersion = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyBridgingURL As String
            Get
                'Return _PolicyBridgingURL
                'updated 7/27/2018
                Return TopLevelQuoteInfo.PolicyBridgingURL
            End Get
            Set(value As String)
                '_PolicyBridgingURL = value
                'updated 7/27/2018
                TopLevelQuoteInfo.PolicyBridgingURL = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PaymentOptions As Generic.List(Of QuickQuotePaymentOption)
            Get
                'updated 4/16/2014 for Diamond Services... just in case ArrayOfPayPlanPreview node is not in ResponseData xml
                'If (_PaymentOptions Is Nothing OrElse _PaymentOptions.Count = 0) AndAlso _PolicyId <> "" AndAlso _PolicyImageNum <> "" AndAlso IsNumeric(_PolicyId) = True AndAlso IsNumeric(_PolicyImageNum) = True Then
                'updated 9/8/2017 to not call service to load when parsing... was calling too early and causing list to be duplicated
                'If _CurrentlyParsingPaymentOptions = False AndAlso (_PaymentOptions Is Nothing OrElse _PaymentOptions.Count = 0) AndAlso qqHelper.IsPositiveIntegerString(_PolicyId) = True AndAlso qqHelper.IsPositiveIntegerString(_PolicyImageNum) = True Then
                '    Dim img As Diamond.Common.Objects.Policy.Image = QuickQuoteHelperClass.GetPolicyImage(_PolicyId, _PolicyImageNum)
                '    If img IsNot Nothing Then
                '        Dim strPayplanPreviewsXml As String = ""
                '        Dim qqXml As New QuickQuoteXML
                '        qqXml.DiamondService_LoadPaymentOptions(img, strPayplanPreviewsXml)
                '        If strPayplanPreviewsXml <> "" Then
                '            qqXml.ParseArrayOfPayPlanPreviewXmlString(strPayplanPreviewsXml, _PaymentOptions)

                '            'added 9/5/2017
                '            qqHelper.NumberPaymentOptions(_PaymentOptions)
                '        End If
                '    End If
                'End If
                'SetParentOfListItems(_PaymentOptions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03970}")
                'Return _PaymentOptions
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.PaymentOptions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03970}")
                Return TopLevelQuoteInfo.PaymentOptions
            End Get
            Set(value As Generic.List(Of QuickQuotePaymentOption))
                '_PaymentOptions = value
                'SetParentOfListItems(_PaymentOptions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03970}")
                'updated 7/27/2018
                TopLevelQuoteInfo.PaymentOptions = value
                SetParentOfListItems(TopLevelQuoteInfo.PaymentOptions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03970}")
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GLClassifications As Generic.List(Of QuickQuoteGLClassification)
            Get
                'SetParentOfListItems(_GLClassifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03971}")
                'Return _GLClassifications
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.GLClassifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03971}")
                Return VersionAndLobInfo.GLClassifications
            End Get
            Set(value As Generic.List(Of QuickQuoteGLClassification))
                '_GLClassifications = value
                'SetParentOfListItems(_GLClassifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03971}")
                'updated 7/19/2018
                VersionAndLobInfo.GLClassifications = value
                SetParentOfListItems(VersionAndLobInfo.GLClassifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03971}")
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10054 (this property is specific to text for CoverageLimitId)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployersLiability As String
            Get
                'Return _EmployersLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.EmployersLiability
            End Get
            Set(value As String)
                '_EmployersLiability = value
                'Select Case _EmployersLiability
                '    Case "100/500/100"
                '        _EmployersLiabilityId = "311"
                '    Case "500/500/500"
                '        _EmployersLiabilityId = "313"
                '    Case "500/1,000/500"
                '        _EmployersLiabilityId = "312"
                '    Case "1,000/1,000/1,000"
                '        _EmployersLiabilityId = "314"
                '    Case "2,000/2,000/2,000"
                '        _EmployersLiabilityId = "315"
                '    Case "3,000/3,000/3,000"
                '        _EmployersLiabilityId = "316"
                '    Case "4,000/4,000/4,000"
                '        _EmployersLiabilityId = "317"
                '    Case "5,000/5,000/5,000"
                '        _EmployersLiabilityId = "318"
                '    Case "6,000/6,000/6,000"
                '        _EmployersLiabilityId = "319"
                '    Case "7,000/7,000/7,000"
                '        _EmployersLiabilityId = "320"
                '    Case "8,000/8,000/8,000"
                '        _EmployersLiabilityId = "321"
                '    Case "9,000/9,000/9,000"
                '        _EmployersLiabilityId = "322"
                '    Case "10,000/10,000/10,000"
                '        _EmployersLiabilityId = "323"
                '    Case Else
                '        _EmployersLiabilityId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.EmployersLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10054 (this property is specific to CoverageLimitId)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployersLiabilityId As String
            Get
                'Return _EmployersLiabilityId
                'updated 7/19/2018
                Return VersionAndLobInfo.EmployersLiabilityId
            End Get
            Set(value As String)
                '_EmployersLiabilityId = value
                '_EmployersLiability = ""
                'If IsNumeric(_EmployersLiabilityId) = True Then
                '    Select Case _EmployersLiabilityId
                '        Case "311"
                '            _EmployersLiability = "100/500/100"
                '        Case "313"
                '            _EmployersLiability = "500/500/500"
                '        Case "312"
                '            _EmployersLiability = "500/1,000/500"
                '        Case "314"
                '            _EmployersLiability = "1,000/1,000/1,000"
                '        Case "315"
                '            _EmployersLiability = "2,000/2,000/2,000"
                '        Case "316"
                '            _EmployersLiability = "3,000/3,000/3,000"
                '        Case "317"
                '            _EmployersLiability = "4,000/4,000/4,000"
                '        Case "318"
                '            _EmployersLiability = "5,000/5,000/5,000"
                '        Case "319"
                '            _EmployersLiability = "6,000/6,000/6,000"
                '        Case "320"
                '            _EmployersLiability = "7,000/7,000/7,000"
                '        Case "321"
                '            _EmployersLiability = "8,000/8,000/8,000"
                '        Case "322"
                '            _EmployersLiability = "9,000/9,000/9,000"
                '        Case "323"
                '            _EmployersLiability = "10,000/10,000/10,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.EmployersLiabilityId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10054</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployersLiabilityQuotedPremium As String
            Get
                'Return _EmployersLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_EmployersLiabilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.EmployersLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_EmployersLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_EmployersLiabilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.EmployersLiabilityQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExperienceModificationFactor As String
            Get
                'Return _ExperienceModificationFactor
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ExperienceModificationFactor
            End Get
            Set(value As String)
                '_ExperienceModificationFactor = value
                'updated 7/27/2018
                TopLevelQuoteInfo.ExperienceModificationFactor = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExperienceModificationBureauTypeId As String
            Get
                'Return _ExperienceModificationBureauTypeId
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ExperienceModificationBureauTypeId
            End Get
            Set(value As String)
                '_ExperienceModificationBureauTypeId = value
                'updated 7/27/2018
                TopLevelQuoteInfo.ExperienceModificationBureauTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExperienceModificationRiskIdentifier As String
            Get
                'Return _ExperienceModificationRiskIdentifier
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ExperienceModificationRiskIdentifier
            End Get
            Set(value As String)
                '_ExperienceModificationRiskIdentifier = value
                'updated 7/27/2018
                TopLevelQuoteInfo.ExperienceModificationRiskIdentifier = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExperienceModifications As List(Of QuickQuoteExperienceModification) 'added 9/18/2017
            Get
                'SetParentOfListItems(_ExperienceModifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03972}")
                'Return _ExperienceModifications
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.ExperienceModifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03972}")
                Return TopLevelQuoteInfo.ExperienceModifications
            End Get
            Set(value As List(Of QuickQuoteExperienceModification))
                '_ExperienceModifications = value
                'SetParentOfListItems(_ExperienceModifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03972}")
                'updated 7/27/2018
                TopLevelQuoteInfo.ExperienceModifications = value
                SetParentOfListItems(TopLevelQuoteInfo.ExperienceModifications, "{663B7C7B-F2AC-4BF6-965A-D30F41A03972}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseExperienceModificationNumForExperienceModificationReconciliation As Boolean 'added 9/18/2017
            Get
                'Return _CanUseExperienceModificationNumForExperienceModificationReconciliation
                'updated 7/27/2018
                Return TopLevelQuoteInfo.CanUseExperienceModificationNumForExperienceModificationReconciliation
            End Get
            Set(value As Boolean)
                '_CanUseExperienceModificationNumForExperienceModificationReconciliation = value
                'updated 7/27/2018
                TopLevelQuoteInfo.CanUseExperienceModificationNumForExperienceModificationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedExperienceModifications As Boolean 'added 9/21/2017
            Get
                'Return _HasConvertedExperienceModifications
                'updated 7/27/2018
                Return TopLevelQuoteInfo.HasConvertedExperienceModifications
            End Get
            Set(value As Boolean)
                '_HasConvertedExperienceModifications = value
                'updated 7/27/2018
                TopLevelQuoteInfo.HasConvertedExperienceModifications = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Protected Friend Property DiamondExperienceModificationIndexesToUpdate As List(Of Integer) 'added 9/23/2017
            Get
                'Return _DiamondExperienceModificationIndexesToUpdate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.DiamondExperienceModificationIndexesToUpdate
            End Get
            Set(value As List(Of Integer))
                ' _DiamondExperienceModificationIndexesToUpdate = value
                'updated 7/27/2018
                TopLevelQuoteInfo.DiamondExperienceModificationIndexesToUpdate = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProgramType As String
            Get
                'Return _ProgramType
                'updated 7/19/2018
                Return VersionAndLobInfo.ProgramType
            End Get
            Set(value As String)
                '_ProgramType = value
                'Select Case _ProgramType
                '    Case "Unassigned"
                '        _ProgramTypeId = "-1"
                '    Case "None"
                '        _ProgramTypeId = "0"
                '    Case "Homeowners"
                '        _ProgramTypeId = "1"
                '    Case "Mobile Home"
                '        _ProgramTypeId = "2"
                '    Case "Dwelling Fire"
                '        _ProgramTypeId = "3"
                '    Case "Personal Umbrella"
                '        _ProgramTypeId = "4"
                '    Case "Farm Umbrella"
                '        _ProgramTypeId = "5"
                '    Case "Farmowners"
                '        _ProgramTypeId = "6"
                '    Case "Select-O-Matic"
                '        _ProgramTypeId = "7"
                '    Case "Farm Liability"
                '        _ProgramTypeId = "8"
                '    Case "N/A"
                '        _ProgramTypeId = "9"
                '    Case "Coinsurance Only"
                '        _ProgramTypeId = "10"
                '    Case "Benefits Deductible"
                '        _ProgramTypeId = "11"
                '    Case "Coinsurance and Deductible"
                '        _ProgramTypeId = "12"
                '    Case "Dealers"
                '        _ProgramTypeId = "13"
                '    Case "Non-Dealers"
                '        _ProgramTypeId = "14"
                '    Case "Commercial Crime"
                '        _ProgramTypeId = "48"
                '    Case "Government Crime"
                '        _ProgramTypeId = "49"
                '    Case "Employee Theft & Forgery"
                '        _ProgramTypeId = "50"
                '    Case "Commercial Umbrella"
                '        _ProgramTypeId = "51"
                '    Case "BOP - Contractors"
                '        _ProgramTypeId = "52"
                '    Case "BOP - Other Than Contractors"
                '        _ProgramTypeId = "53"
                '    Case "CGL - Commercial General Liability - Standard"
                '        _ProgramTypeId = "54"
                '    Case "CGL - Commercial General Liability - Preferred"
                '        _ProgramTypeId = "55"
                '    Case "OCP - Owners and Contractors Protective Liability"
                '        _ProgramTypeId = "56"
                '    Case "Dealers - Unlimited Liability"
                '        _ProgramTypeId = "57"
                '    Case "Dealers - Limited Liability"
                '        _ProgramTypeId = "58"
                '    Case Else
                '        _ProgramTypeId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.ProgramType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProgramTypeId As String '4/2/2015 note: added separate variable/property for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
            Get
                'Return _ProgramTypeId
                'updated 7/19/2018
                Return VersionAndLobInfo.ProgramTypeId
            End Get
            Set(value As String)
                '_ProgramTypeId = value
                '_ProgramType = ""
                'If IsNumeric(_ProgramTypeId) = True Then
                '    Select Case _ProgramTypeId
                '        Case "-1"
                '            _ProgramType = "Unassigned"
                '        Case "0"
                '            _ProgramType = "None"
                '        Case "1"
                '            _ProgramType = "Homeowners"
                '        Case "2"
                '            _ProgramType = "Mobile Home"
                '        Case "3"
                '            _ProgramType = "Dwelling Fire"
                '        Case "4"
                '            _ProgramType = "Personal Umbrella"
                '        Case "5"
                '            _ProgramType = "Farm Umbrella"
                '        Case "6"
                '            _ProgramType = "Farmowners"
                '        Case "7"
                '            _ProgramType = "Select-O-Matic"
                '        Case "8"
                '            _ProgramType = "Farm Liability"
                '        Case "9"
                '            _ProgramType = "N/A"
                '        Case "10"
                '            _ProgramType = "Coinsurance Only"
                '        Case "11"
                '            _ProgramType = "Benefits Deductible"
                '        Case "12"
                '            _ProgramType = "Coinsurance and Deductible"
                '        Case "13"
                '            _ProgramType = "Dealers"
                '        Case "14"
                '            _ProgramType = "Non-Dealers"
                '        Case "48"
                '            _ProgramType = "Commercial Crime"
                '        Case "49"
                '            _ProgramType = "Government Crime"
                '        Case "50"
                '            _ProgramType = "Employee Theft & Forgery"
                '        Case "51"
                '            _ProgramType = "Commercial Umbrella"
                '        Case "52"
                '            _ProgramType = "BOP - Contractors"
                '        Case "53"
                '            _ProgramType = "BOP - Other Than Contractors"
                '        Case "54"
                '            _ProgramType = "CGL - Commercial General Liability - Standard"
                '        Case "55"
                '            _ProgramType = "CGL - Commercial General Liability - Preferred"
                '        Case "56"
                '            _ProgramType = "OCP - Owners and Contractors Protective Liability"
                '        Case "57"
                '            _ProgramType = "Dealers - Unlimited Liability"
                '        Case "58"
                '            _ProgramType = "Dealers - Limited Liability"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.ProgramTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80155</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GeneralAggregateLimit As String
            Get
                'Return _GeneralAggregateLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.GeneralAggregateLimit
            End Get
            Set(value As String)
                '_GeneralAggregateLimit = value
                'Select Case _GeneralAggregateLimit
                '    Case "50,000"
                '        _GeneralAggregateLimitId = "9"
                '    Case "100,000"
                '        _GeneralAggregateLimitId = "10"
                '    Case "200,000"
                '        _GeneralAggregateLimitId = "32"
                '    Case "300,000"
                '        _GeneralAggregateLimitId = "33"
                '    Case "500,000"
                '        _GeneralAggregateLimitId = "34"
                '    Case "600,000"
                '        _GeneralAggregateLimitId = "178"
                '    Case "1,000,000"
                '        _GeneralAggregateLimitId = "56"
                '    Case "1,500,000"
                '        _GeneralAggregateLimitId = "185"
                '    Case "2,000,000"
                '        _GeneralAggregateLimitId = "65"
                '    Case Else
                '        _GeneralAggregateLimitId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.GeneralAggregateLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80155</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GeneralAggregateLimitId As String
            Get
                'Return _GeneralAggregateLimitId
                'updated 7/19/2018
                Return VersionAndLobInfo.GeneralAggregateLimitId
            End Get
            Set(value As String)
                '_GeneralAggregateLimitId = value
                '_GeneralAggregateLimit = ""
                'If IsNumeric(_GeneralAggregateLimitId) = True Then
                '    Select Case _GeneralAggregateLimitId
                '        Case "9"
                '            _GeneralAggregateLimit = "50,000"
                '        Case "10"
                '            _GeneralAggregateLimit = "100,000"
                '        Case "32"
                '            _GeneralAggregateLimit = "200,000"
                '        Case "33"
                '            _GeneralAggregateLimit = "300,000"
                '        Case "34"
                '            _GeneralAggregateLimit = "500,000"
                '        Case "178"
                '            _GeneralAggregateLimit = "600,000"
                '        Case "56"
                '            _GeneralAggregateLimit = "1,000,000"
                '        Case "185"
                '            _GeneralAggregateLimit = "1,500,000"
                '        Case "65"
                '            _GeneralAggregateLimit = "2,000,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.GeneralAggregateLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80155</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GeneralAggregateQuotedPremium As String
            Get
                'Return _GeneralAggregateQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_GeneralAggregateQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.GeneralAggregateQuotedPremium
            End Get
            Set(value As String)
                '_GeneralAggregateQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GeneralAggregateQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.GeneralAggregateQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80156</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProductsCompletedOperationsAggregateLimit As String
            Get
                'Return _ProductsCompletedOperationsAggregateLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.ProductsCompletedOperationsAggregateLimit
            End Get
            Set(value As String)
                '_ProductsCompletedOperationsAggregateLimit = value
                'Select Case _ProductsCompletedOperationsAggregateLimit
                '    Case "Excluded"
                '        _ProductsCompletedOperationsAggregateLimitId = "327"
                '    Case "50,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "9"
                '    Case "100,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "10"
                '    Case "200,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "32"
                '    Case "300,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "33"
                '    Case "500,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "34"
                '    Case "600,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "178"
                '    Case "1,000,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "56"
                '    Case "1,500,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "185"
                '    Case "2,000,000"
                '        _ProductsCompletedOperationsAggregateLimitId = "65"
                '    Case Else
                '        _ProductsCompletedOperationsAggregateLimitId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.ProductsCompletedOperationsAggregateLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80156</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProductsCompletedOperationsAggregateLimitId As String
            Get
                'Return _ProductsCompletedOperationsAggregateLimitId
                'updated 7/19/2018
                Return VersionAndLobInfo.ProductsCompletedOperationsAggregateLimitId
            End Get
            Set(value As String)
                '_ProductsCompletedOperationsAggregateLimitId = value
                '_ProductsCompletedOperationsAggregateLimit = ""
                'If IsNumeric(_ProductsCompletedOperationsAggregateLimitId) = True Then
                '    Select Case _ProductsCompletedOperationsAggregateLimitId
                '        Case "327"
                '            _ProductsCompletedOperationsAggregateLimit = "Excluded"
                '        Case "9"
                '            _ProductsCompletedOperationsAggregateLimit = "50,000"
                '        Case "10"
                '            _ProductsCompletedOperationsAggregateLimit = "100,000"
                '        Case "32"
                '            _ProductsCompletedOperationsAggregateLimit = "200,000"
                '        Case "33"
                '            _ProductsCompletedOperationsAggregateLimit = "300,000"
                '        Case "34"
                '            _ProductsCompletedOperationsAggregateLimit = "500,000"
                '        Case "178"
                '            _ProductsCompletedOperationsAggregateLimit = "600,000"
                '        Case "56"
                '            _ProductsCompletedOperationsAggregateLimit = "1,000,000"
                '        Case "185"
                '            _ProductsCompletedOperationsAggregateLimit = "1,500,000"
                '        Case "65"
                '            _ProductsCompletedOperationsAggregateLimit = "2,000,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.ProductsCompletedOperationsAggregateLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80156</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProductsCompletedOperationsAggregateQuotedPremium As String
            Get
                'Return _ProductsCompletedOperationsAggregateQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ProductsCompletedOperationsAggregateQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.ProductsCompletedOperationsAggregateQuotedPremium
            End Get
            Set(value As String)
                '_ProductsCompletedOperationsAggregateQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ProductsCompletedOperationsAggregateQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.ProductsCompletedOperationsAggregateQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80169</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PersonalAndAdvertisingInjuryLimit As String
            Get
                'Return _PersonalAndAdvertisingInjuryLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.PersonalAndAdvertisingInjuryLimit
            End Get
            Set(value As String)
                '_PersonalAndAdvertisingInjuryLimit = value
                'Select Case _PersonalAndAdvertisingInjuryLimit
                '    Case "Excluded"
                '        _PersonalAndAdvertisingInjuryLimitId = "327"
                '    Case "25,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "8"
                '    Case "50,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "9"
                '    Case "100,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "10"
                '    Case "200,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "32"
                '    Case "300,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "33"
                '    Case "500,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "34"
                '    Case "1,000,000"
                '        _PersonalAndAdvertisingInjuryLimitId = "56"
                '    Case Else
                '        _PersonalAndAdvertisingInjuryLimitId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.PersonalAndAdvertisingInjuryLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80169</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PersonalAndAdvertisingInjuryLimitId As String
            Get
                'Return _PersonalAndAdvertisingInjuryLimitId
                'updated 7/19/2018
                Return VersionAndLobInfo.PersonalAndAdvertisingInjuryLimitId
            End Get
            Set(value As String)
                '_PersonalAndAdvertisingInjuryLimitId = value
                '_PersonalAndAdvertisingInjuryLimit = ""
                'If IsNumeric(_PersonalAndAdvertisingInjuryLimitId) = True Then
                '    Select Case _PersonalAndAdvertisingInjuryLimitId
                '        Case "327"
                '            _PersonalAndAdvertisingInjuryLimit = "Excluded"
                '        Case "8"
                '            _PersonalAndAdvertisingInjuryLimit = "25,000"
                '        Case "9"
                '            _PersonalAndAdvertisingInjuryLimit = "50,000"
                '        Case "10"
                '            _PersonalAndAdvertisingInjuryLimit = "100,000"
                '        Case "32"
                '            _PersonalAndAdvertisingInjuryLimit = "200,000"
                '        Case "33"
                '            _PersonalAndAdvertisingInjuryLimit = "300,000"
                '        Case "34"
                '            _PersonalAndAdvertisingInjuryLimit = "500,000"
                '        Case "56"
                '            _PersonalAndAdvertisingInjuryLimit = "1,000,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.PersonalAndAdvertisingInjuryLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80169</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PersonalAndAdvertisingInjuryQuotedPremium As String
            Get
                'Return _PersonalAndAdvertisingInjuryQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_PersonalAndAdvertisingInjuryQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.PersonalAndAdvertisingInjuryQuotedPremium
            End Get
            Set(value As String)
                '_PersonalAndAdvertisingInjuryQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PersonalAndAdvertisingInjuryQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.PersonalAndAdvertisingInjuryQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80178</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property DamageToPremisesRentedLimit As String
            Get
                'Return _DamageToPremisesRentedLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.DamageToPremisesRentedLimit
            End Get
            Set(value As String)
                '_DamageToPremisesRentedLimit = value
                'Select Case _DamageToPremisesRentedLimit
                '    Case "Excluded"
                '        _DamageToPremisesRentedLimitId = "327"
                '    Case "50,000"
                '        _DamageToPremisesRentedLimitId = "9"
                '    Case "75,000"
                '        _DamageToPremisesRentedLimitId = "50"
                '    Case "100,000"
                '        _DamageToPremisesRentedLimitId = "10"
                '    Case "200,000"
                '        _DamageToPremisesRentedLimitId = "32"
                '    Case "300,000"
                '        _DamageToPremisesRentedLimitId = "33"
                '    Case "400,000"
                '        _DamageToPremisesRentedLimitId = "177"
                '    Case Else
                '        _DamageToPremisesRentedLimitId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.DamageToPremisesRentedLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80178</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property DamageToPremisesRentedLimitId As String
            Get
                'Return _DamageToPremisesRentedLimitId
                'updated 7/19/2018
                Return VersionAndLobInfo.DamageToPremisesRentedLimitId
            End Get
            Set(value As String)
                '_DamageToPremisesRentedLimitId = value
                '_DamageToPremisesRentedLimit = ""
                'If IsNumeric(_DamageToPremisesRentedLimitId) = True Then
                '    Select Case _DamageToPremisesRentedLimitId
                '        Case "327"
                '            _DamageToPremisesRentedLimit = "Excluded"
                '        Case "9"
                '            _DamageToPremisesRentedLimit = "50,000"
                '        Case "50"
                '            _DamageToPremisesRentedLimit = "75,000"
                '        Case "10"
                '            _DamageToPremisesRentedLimit = "100,000"
                '        Case "32"
                '            _DamageToPremisesRentedLimit = "200,000"
                '        Case "33"
                '            _DamageToPremisesRentedLimit = "300,000"
                '        Case "177"
                '            _DamageToPremisesRentedLimit = "400,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.DamageToPremisesRentedLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80178</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property DamageToPremisesRentedQuotedPremium As String
            Get
                'Return _DamageToPremisesRentedQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_DamageToPremisesRentedQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.DamageToPremisesRentedQuotedPremium
            End Get
            Set(value As String)
                '_DamageToPremisesRentedQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_DamageToPremisesRentedQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.DamageToPremisesRentedQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80170</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalExpensesLimit As String
            Get
                'Return _MedicalExpensesLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.MedicalExpensesLimit
            End Get
            Set(value As String)
                '_MedicalExpensesLimit = value
                'Select Case _MedicalExpensesLimit
                '    Case "Excluded"
                '        _MedicalExpensesLimitId = "327"
                '    Case "5,000"
                '        _MedicalExpensesLimitId = "15"
                '    Case "10,000" '*probably shouldn't be an option but it was on the specs
                '        _MedicalExpensesLimitId = "7"
                '    Case Else
                '        _MedicalExpensesLimitId = ""
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MedicalExpensesLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80170</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalExpensesLimitId As String
            Get
                'Return _MedicalExpensesLimitId
                'updated 7/19/2018
                Return VersionAndLobInfo.MedicalExpensesLimitId
            End Get
            Set(value As String)
                '_MedicalExpensesLimitId = value
                '_MedicalExpensesLimit = ""
                'If IsNumeric(_MedicalExpensesLimitId) = True Then
                '    Select Case _MedicalExpensesLimitId
                '        Case "327"
                '            _MedicalExpensesLimit = "Excluded"
                '        Case "15"
                '            _MedicalExpensesLimit = "5,000"
                '        Case "7" '*probably shouldn't be an option but it was on the specs
                '            _MedicalExpensesLimit = "10,000"
                '    End Select
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.MedicalExpensesLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80170</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalExpensesQuotedPremium As String
            Get
                'Return _MedicalExpensesQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_MedicalExpensesQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.MedicalExpensesQuotedPremium
            End Get
            Set(value As String)
                '_MedicalExpensesQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MedicalExpensesQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.MedicalExpensesQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 926, 21018, 501, 21022, 21019, 21023, 21020, 21053, 21054, 21055, 21024, 21025, 21026, 21016, 21017, or 21021</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInsureds As Generic.List(Of QuickQuoteAdditionalInsured)
            Get
                'SetParentOfListItems(_AdditionalInsureds, "{663B7C7B-F2AC-4BF6-965A-D30F41A03973}")
                'Return _AdditionalInsureds
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.AdditionalInsureds, "{663B7C7B-F2AC-4BF6-965A-D30F41A03973}")
                Return VersionAndLobInfo.AdditionalInsureds
            End Get
            Set(value As Generic.List(Of QuickQuoteAdditionalInsured))
                '_AdditionalInsureds = value
                'SetParentOfListItems(_AdditionalInsureds, "{663B7C7B-F2AC-4BF6-965A-D30F41A03973}")
                'updated 7/19/2018
                VersionAndLobInfo.AdditionalInsureds = value
                SetParentOfListItems(VersionAndLobInfo.AdditionalInsureds, "{663B7C7B-F2AC-4BF6-965A-D30F41A03973}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property AdditionalInsuredsBackup As List(Of QuickQuoteAdditionalInsured) 'added 6/5/2017
            Get
                'Return _AdditionalInsuredsBackup
                'updated 7/19/2018
                Return VersionAndLobInfo.AdditionalInsuredsBackup
            End Get
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 12</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasExclusionOfAmishWorkers As Boolean
            Get
                'Return _HasExclusionOfAmishWorkers
                'updated 7/19/2018
                Return VersionAndLobInfo.HasExclusionOfAmishWorkers
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasExclusionOfAmishWorkers
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasExclusionOfAmishWorkers = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasExclusionOfAmishWorkers = value
                ''added 10/12/2017
                ''If _HasExclusionOfAmishWorkers = False AndAlso helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                ''    helper.UpdateExclusionOfAmishWorkerListFromHasFlag(_ExclusionOfAmishWorkerRecords, _HasExclusionOfAmishWorkers, exclusionsBackup:=_ExclusionOfAmishWorkerRecordsBackup, updateBackupListBeforeRemoving:=True)
                ''End If
                ''updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    helper.UpdateExclusionOfAmishWorkerListFromHasFlag(_ExclusionOfAmishWorkerRecords, _HasExclusionOfAmishWorkers, exclusionsBackup:=_ExclusionOfAmishWorkerRecordsBackup, updateBackupListBeforeRemoving:=True, addInitialItemIfNeeded:=False)
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.HasExclusionOfAmishWorkers = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasExclusionOfSoleProprietorsPartnersOfficersAndOthers As Boolean
            Get
                'Return _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers
                'updated 7/19/2018
                Return VersionAndLobInfo.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = value
                ''added 10/12/2017
                ''If _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = False AndAlso helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                ''    helper.UpdateExclusionOfSoleProprietorListFromHasFlag(_ExclusionOfSoleProprietorRecords, _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers, exclusionsBackup:=_ExclusionOfSoleProprietorRecordsBackup, updateBackupListBeforeRemoving:=True)
                ''End If
                ''updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    helper.UpdateExclusionOfSoleProprietorListFromHasFlag(_ExclusionOfSoleProprietorRecords, _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers, exclusionsBackup:=_ExclusionOfSoleProprietorRecordsBackup, updateBackupListBeforeRemoving:=True, addInitialItemIfNeeded:=False)
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasInclusionOfSoleProprietorsPartnersOfficersAndOthers As Boolean
            Get
                'Return _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers
                'updated 7/19/2018
                Return VersionAndLobInfo.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = value
                ''added 10/12/2017
                ''If _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = False AndAlso helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                ''    helper.UpdateInclusionOfSoleProprietorListFromHasFlag(_InclusionOfSoleProprietorRecords, _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers, inclusionsBackup:=_InclusionOfSoleProprietorRecordsBackup, updateBackupListBeforeRemoving:=True)
                ''End If
                ''updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    helper.UpdateInclusionOfSoleProprietorListFromHasFlag(_InclusionOfSoleProprietorRecords, _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers, inclusionsBackup:=_InclusionOfSoleProprietorRecordsBackup, updateBackupListBeforeRemoving:=True, addInitialItemIfNeeded:=False)
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasWaiverOfSubrogation As Boolean
            Get
                'Return _HasWaiverOfSubrogation
                'updated 7/19/2018
                Return VersionAndLobInfo.HasWaiverOfSubrogation
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasWaiverOfSubrogation
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasWaiverOfSubrogation = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasWaiverOfSubrogation = value
                ''added 10/12/2017
                ''If _HasWaiverOfSubrogation = False AndAlso helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                ''    helper.UpdateWaiverOfSubrogationRecordListFromHasFlag(_WaiverOfSubrogationRecords, _HasWaiverOfSubrogation, waiversBackup:=_WaiverOfSubrogationRecordsBackup, updateBackupListBeforeRemoving:=True)
                ''End If
                ''updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    helper.UpdateWaiverOfSubrogationRecordListFromHasFlag(_WaiverOfSubrogationRecords, _HasWaiverOfSubrogation, waiversBackup:=_WaiverOfSubrogationRecordsBackup, updateBackupListBeforeRemoving:=True, addInitialItemIfNeeded:=False)
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.HasWaiverOfSubrogation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WaiverOfSubrogationNumberOfWaivers As Integer
            Get
                'Return _WaiverOfSubrogationNumberOfWaivers
                'updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    If _WaiverOfSubrogationRecords IsNot Nothing AndAlso _WaiverOfSubrogationRecords.Count > 0 Then
                '        _WaiverOfSubrogationNumberOfWaivers = _WaiverOfSubrogationRecords.Count
                '    Else
                '        _WaiverOfSubrogationNumberOfWaivers = 0
                '    End If
                'End If
                'Return _WaiverOfSubrogationNumberOfWaivers
                'updated 7/19/2018
                Return VersionAndLobInfo.WaiverOfSubrogationNumberOfWaivers
            End Get
            Set(value As Integer)
                '_WaiverOfSubrogationNumberOfWaivers = value
                ''added 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe
                '    helper.UpdateWaiverOfSubrogationRecordListFromNumberOfWaivers(_WaiverOfSubrogationRecords, _WaiverOfSubrogationNumberOfWaivers, waiversBackup:=_WaiverOfSubrogationRecordsBackup, updateBackupListBeforeRemoving:=True)
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.WaiverOfSubrogationNumberOfWaivers = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WaiverOfSubrogationPremium As String
            Get
                'Return _WaiverOfSubrogationPremium
                'updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then
                '    If _NeedsToUpdateWaiverOfSubrogationPremiumId = False Then
                '        If _WaiverOfSubrogationRecords IsNot Nothing AndAlso _WaiverOfSubrogationRecords.Count > 0 AndAlso WaiverOfSubrogationRecords(_WaiverOfSubrogationRecords.Count - 1) IsNot Nothing Then
                '            _WaiverOfSubrogationPremium = _WaiverOfSubrogationRecords(_WaiverOfSubrogationRecords.Count - 1).Premium
                '        End If
                '    End If
                'End If
                'Return _WaiverOfSubrogationPremium
                'updated 7/19/2018
                Return VersionAndLobInfo.WaiverOfSubrogationPremium
            End Get
            Set(value As String)
                '_WaiverOfSubrogationPremium = value
                'Select Case _WaiverOfSubrogationPremium
                '    Case "Not Assigned"
                '        _WaiverOfSubrogationPremiumId = "0"
                '    Case "0"
                '        _WaiverOfSubrogationPremiumId = "1"
                '    Case "25"
                '        _WaiverOfSubrogationPremiumId = "2"
                '    Case "50"
                '        _WaiverOfSubrogationPremiumId = "3"
                '    Case "75"
                '        _WaiverOfSubrogationPremiumId = "4"
                '    Case "100"
                '        _WaiverOfSubrogationPremiumId = "5"
                '    Case "150"
                '        _WaiverOfSubrogationPremiumId = "6"
                '    Case "200"
                '        _WaiverOfSubrogationPremiumId = "7"
                '    Case "250"
                '        _WaiverOfSubrogationPremiumId = "8"
                '    Case "300"
                '        _WaiverOfSubrogationPremiumId = "9"
                '    Case "400"
                '        _WaiverOfSubrogationPremiumId = "10"
                '    Case "500"
                '        _WaiverOfSubrogationPremiumId = "11"
                '    Case Else
                '        _WaiverOfSubrogationPremiumId = ""
                'End Select
                ''added 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then
                '    Dim waiversUpdated As Integer = 0
                '    helper.UpdateWaiverOfSubrogationRecordListWithPremiumId(_WaiverOfSubrogationRecords, _WaiverOfSubrogationPremiumId, waiversUpdated:=waiversUpdated)
                '    If waiversUpdated > 0 Then
                '        _NeedsToUpdateWaiverOfSubrogationPremiumId = False
                '    Else
                '        _NeedsToUpdateWaiverOfSubrogationPremiumId = True
                '    End If
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.WaiverOfSubrogationPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WaiverOfSubrogationPremiumId As String
            Get
                'Return _WaiverOfSubrogationPremiumId
                'updated 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then
                '    If _NeedsToUpdateWaiverOfSubrogationPremiumId = False Then
                '        If _WaiverOfSubrogationRecords IsNot Nothing AndAlso _WaiverOfSubrogationRecords.Count > 0 AndAlso WaiverOfSubrogationRecords(_WaiverOfSubrogationRecords.Count - 1) IsNot Nothing Then
                '            _WaiverOfSubrogationPremiumId = _WaiverOfSubrogationRecords(_WaiverOfSubrogationRecords.Count - 1).PremiumId
                '        End If
                '    End If
                'End If
                'Return _WaiverOfSubrogationPremiumId
                'updated 7/19/2018
                Return VersionAndLobInfo.WaiverOfSubrogationPremiumId
            End Get
            Set(value As String)
                '_WaiverOfSubrogationPremiumId = value
                '_WaiverOfSubrogationPremium = ""
                'If IsNumeric(_WaiverOfSubrogationPremiumId) = True Then
                '    Select Case _WaiverOfSubrogationPremiumId
                '        Case "0"
                '            _WaiverOfSubrogationPremium = "Not Assigned"
                '        Case "1"
                '            _WaiverOfSubrogationPremium = "0"
                '        Case "2"
                '            _WaiverOfSubrogationPremium = "25"
                '        Case "3"
                '            _WaiverOfSubrogationPremium = "50"
                '        Case "4"
                '            _WaiverOfSubrogationPremium = "75"
                '        Case "5"
                '            _WaiverOfSubrogationPremium = "100"
                '        Case "6"
                '            _WaiverOfSubrogationPremium = "150"
                '        Case "7"
                '            _WaiverOfSubrogationPremium = "200"
                '        Case "8"
                '            _WaiverOfSubrogationPremium = "250"
                '        Case "9"
                '            _WaiverOfSubrogationPremium = "300"
                '        Case "10"
                '            _WaiverOfSubrogationPremium = "400"
                '        Case "11"
                '            _WaiverOfSubrogationPremium = "500"
                '    End Select
                'End If
                ''added 10/13/2017
                'If helper.UseComparativeRaterForLob(lob:=_LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then
                '    Dim waiversUpdated As Integer = 0
                '    helper.UpdateWaiverOfSubrogationRecordListWithPremiumId(_WaiverOfSubrogationRecords, _WaiverOfSubrogationPremiumId, waiversUpdated:=waiversUpdated)
                '    If waiversUpdated > 0 Then
                '        _NeedsToUpdateWaiverOfSubrogationPremiumId = False
                '    Else
                '        _NeedsToUpdateWaiverOfSubrogationPremiumId = True
                '    End If
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.WaiverOfSubrogationPremiumId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InclusionsExclusions As Generic.List(Of QuickQuoteInclusionExclusion)
            Get
                'SetParentOfListItems(_InclusionsExclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03974}")
                'Return _InclusionsExclusions
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.InclusionsExclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03974}")
                Return VersionAndLobInfo.InclusionsExclusions
            End Get
            Set(value As Generic.List(Of QuickQuoteInclusionExclusion))
                '_InclusionsExclusions = value
                'SetParentOfListItems(_InclusionsExclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03974}")
                'updated 7/19/2018
                VersionAndLobInfo.InclusionsExclusions = value
                SetParentOfListItems(VersionAndLobInfo.InclusionsExclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03974}")
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AnniversaryRatingEffectiveDate As String
            Get
                'Return _AnniversaryRatingEffectiveDate
                'updated 7/19/2018
                Return VersionAndLobInfo.AnniversaryRatingEffectiveDate
            End Get
            Set(value As String)
                '_AnniversaryRatingEffectiveDate = value
                'qqHelper.ConvertToShortDate(_AnniversaryRatingEffectiveDate)
                'If IsDate(_AnniversaryRatingEffectiveDate) = True Then
                '    AnniversaryRatingExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_AnniversaryRatingEffectiveDate)).ToString 'added .ToString 4/10/2014
                'End If
                'updated 7/19/2018
                VersionAndLobInfo.AnniversaryRatingEffectiveDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AnniversaryRatingExpirationDate As String
            Get
                'Return _AnniversaryRatingExpirationDate
                'updated 7/19/2018
                Return VersionAndLobInfo.AnniversaryRatingExpirationDate
            End Get
            Set(value As String)
                '_AnniversaryRatingExpirationDate = value
                'qqHelper.ConvertToShortDate(_AnniversaryRatingExpirationDate)
                'updated 7/19/2018
                VersionAndLobInfo.AnniversaryRatingExpirationDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GuaranteedRatePeriodEffectiveDate As String
            Get
                'Return _GuaranteedRatePeriodEffectiveDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.GuaranteedRatePeriodEffectiveDate
            End Get
            Set(value As String)
                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    _GuaranteedRatePeriodEffectiveDate = value
                '    qqHelper.ConvertToShortDate(_GuaranteedRatePeriodEffectiveDate)
                '    Exit Property
                'End If

                ''updated 4/2/2014 w/ IF (for SaveRate service); was previously running inner code all the time (guaranteed rate period effective date should now match quote effective date [like transaction effective date])
                'If _GuaranteedRatePeriodEffectiveDate = "" OrElse IsDate(_GuaranteedRatePeriodEffectiveDate) = False OrElse _EffectiveDate = "" OrElse IsDate(_EffectiveDate) = False Then
                '    _GuaranteedRatePeriodEffectiveDate = value
                '    qqHelper.ConvertToShortDate(_GuaranteedRatePeriodEffectiveDate)
                '    If IsDate(_GuaranteedRatePeriodEffectiveDate) = True Then
                '        'GuaranteedRatePeriodExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_GuaranteedRatePeriodEffectiveDate)).ToString 'added .ToString 4/10/2014
                '        'updated 4/7/2014 to make sure expiration date is always changing w/ effective date... may not be necessary
                '        _GuaranteedRatePeriodExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_GuaranteedRatePeriodEffectiveDate)).ToString 'added .ToString 4/10/2014
                '        qqHelper.ConvertToShortDate(_GuaranteedRatePeriodExpirationDate)
                '    End If
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.GuaranteedRatePeriodEffectiveDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GuaranteedRatePeriodExpirationDate As String
            Get
                'Return _GuaranteedRatePeriodExpirationDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.GuaranteedRatePeriodExpirationDate
            End Get
            Set(value As String)
                ''added 11/5/2016
                'If _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote OrElse _QuoteTransactionType = QuickQuoteTransactionType.ReadOnlyImage Then
                '    _GuaranteedRatePeriodExpirationDate = value
                '    qqHelper.ConvertToShortDate(_GuaranteedRatePeriodExpirationDate)
                '    Exit Property
                'End If

                ''updated 4/2/2014 w/ IF (for SaveRate service); was previously running inner code all the time (guaranteed rate period expiration date should now match quote expiration date [like transaction effective date logic])
                'If _GuaranteedRatePeriodExpirationDate = "" OrElse IsDate(_GuaranteedRatePeriodExpirationDate) = False OrElse _ExpirationDate = "" OrElse IsDate(_ExpirationDate) = False Then
                '    _GuaranteedRatePeriodExpirationDate = value
                '    qqHelper.ConvertToShortDate(_GuaranteedRatePeriodExpirationDate)
                'End If
                'updated 7/27/2018
                TopLevelQuoteInfo.GuaranteedRatePeriodExpirationDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ModificationProductionDate As String
            Get
                'Return _ModificationProductionDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ModificationProductionDate
            End Get
            Set(value As String)
                '_ModificationProductionDate = value
                'qqHelper.ConvertToShortDate(_ModificationProductionDate)
                'updated 7/27/2018
                TopLevelQuoteInfo.ModificationProductionDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RatingEffectiveDate As String
            Get
                'Return _RatingEffectiveDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.RatingEffectiveDate
            End Get
            Set(value As String)
                '_RatingEffectiveDate = value
                'qqHelper.ConvertToShortDate(_RatingEffectiveDate)
                'updated 7/27/2018
                TopLevelQuoteInfo.RatingEffectiveDate = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21008</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduledItems As Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem)
            Get
                'SetParentOfListItems(_ContractorsEquipmentScheduledItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03975}")
                'Return _ContractorsEquipmentScheduledItems
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.ContractorsEquipmentScheduledItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03975}")
                Return VersionAndLobInfo.ContractorsEquipmentScheduledItems
            End Get
            Set(value As Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem))
                '_ContractorsEquipmentScheduledItems = value
                'SetParentOfListItems(_ContractorsEquipmentScheduledItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03975}")
                'updated 7/19/2018
                VersionAndLobInfo.ContractorsEquipmentScheduledItems = value
                SetParentOfListItems(VersionAndLobInfo.ContractorsEquipmentScheduledItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A03975}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ContractorsEquipmentScheduledItemsBackup As Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem) 'added 6/5/2017
            Get
                'Return _ContractorsEquipmentScheduledItemsBackup
                'updated 7/19/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduledItemsBackup
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalPolicyholders As Generic.List(Of QuickQuoteAdditionalPolicyholder)
            Get
                'SetParentOfListItems(_AdditionalPolicyholders, "{663B7C7B-F2AC-4BF6-965A-D30F41A03976}")
                'Return _AdditionalPolicyholders
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.AdditionalPolicyholders, "{663B7C7B-F2AC-4BF6-965A-D30F41A03976}")
                'Return TopLevelQuoteInfo.AdditionalPolicyholders
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.AdditionalPolicyholders
            End Get
            Set(value As Generic.List(Of QuickQuoteAdditionalPolicyholder))
                '_AdditionalPolicyholders = value
                'SetParentOfListItems(_AdditionalPolicyholders, "{663B7C7B-F2AC-4BF6-965A-D30F41A03976}")
                'updated 7/27/2018
                'TopLevelQuoteInfo.AdditionalPolicyholders = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.AdditionalPolicyholders = value
                SetParentOfListItems(TopLevelQuoteInfo.AdditionalPolicyholders, "{663B7C7B-F2AC-4BF6-965A-D30F41A03976}")
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LossHistoryRecords As Generic.List(Of QuickQuoteLossHistoryRecord)
            Get
                'SetParentOfListItems(_LossHistoryRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03977}")
                'Return _LossHistoryRecords
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.LossHistoryRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03977}")
                Return VersionAndLobInfo.LossHistoryRecords
            End Get
            Set(value As Generic.List(Of QuickQuoteLossHistoryRecord))
                '_LossHistoryRecords = value
                'SetParentOfListItems(_LossHistoryRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03977}")
                'updated 7/19/2018
                VersionAndLobInfo.LossHistoryRecords = value
                SetParentOfListItems(VersionAndLobInfo.LossHistoryRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03977}")
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PriorCarrier As QuickQuotePriorCarrier
            Get
                'SetObjectsParent(_PriorCarrier)
                'Return _PriorCarrier
                'updated 7/19/2018
                SetObjectsParent(VersionAndLobInfo.PriorCarrier)
                Return VersionAndLobInfo.PriorCarrier
            End Get
            Set(value As QuickQuotePriorCarrier)
                '_PriorCarrier = value
                'SetObjectsParent(_PriorCarrier)
                'updated 7/19/2018
                VersionAndLobInfo.PriorCarrier = value
                SetObjectsParent(VersionAndLobInfo.PriorCarrier)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInterestNamesAndAddresses As Generic.List(Of QuickQuoteGenericNameAddress) 'TODO: Dan - Parent?
            Get
                'SetParentOfListItems(_AdditionalInterestNamesAndAddresses, "{663B7C7B-F2AC-4BF6-965A-D30F41A03978}")
                'Return _AdditionalInterestNamesAndAddresses
                'updated 7/19/2018
                Return VersionAndLobInfo.AdditionalInterestNamesAndAddresses
            End Get
            Set(value As Generic.List(Of QuickQuoteGenericNameAddress))
                '_AdditionalInterestNamesAndAddresses = value
                'updated 7/19/2018
                VersionAndLobInfo.AdditionalInterestNamesAndAddresses = value
                'SetParentOfListItems(_AdditionalInterestNamesAndAddresses, "{663B7C7B-F2AC-4BF6-965A-D30F41A03978}")
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21032</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBarbersProfessionalLiability As Boolean
            Get
                'Return _HasBarbersProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasBarbersProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBarbersProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBarbersProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBarbersProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasBarbersProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21032</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BarbersProfessionalLiabiltyQuotedPremium As String
            Get
                'Return _BarbersProfessionalLiabiltyQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_BarbersProfessionalLiabiltyQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.BarbersProfessionalLiabiltyQuotedPremium
            End Get
            Set(value As String)
                '_BarbersProfessionalLiabiltyQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BarbersProfessionalLiabiltyQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.BarbersProfessionalLiabiltyQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21032</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BarbersProfessionalLiabilityFullTimeEmpNum As String
            Get
                'Return _BarbersProfessionalLiabilityFullTimeEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.BarbersProfessionalLiabilityFullTimeEmpNum
            End Get
            Set(value As String)
                '_BarbersProfessionalLiabilityFullTimeEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.BarbersProfessionalLiabilityFullTimeEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21032</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BarbersProfessionalLiabilityPartTimeEmpNum As String
            Get
                'Return _BarbersProfessionalLiabilityPartTimeEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.BarbersProfessionalLiabilityPartTimeEmpNum
            End Get
            Set(value As String)
                '_BarbersProfessionalLiabilityPartTimeEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.BarbersProfessionalLiabilityPartTimeEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21032</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BarbersProfessionalLiabilityDescription As String '3/9/2017 - BOP stuff
            Get
                'Return _BarbersProfessionalLiabilityDescription
                'updated 7/19/2018
                Return VersionAndLobInfo.BarbersProfessionalLiabilityDescription
            End Get
            Set(value As String)
                '_BarbersProfessionalLiabilityDescription = value
                'updated 7/19/2018
                VersionAndLobInfo.BarbersProfessionalLiabilityDescription = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21033</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBeauticiansProfessionalLiability As Boolean
            Get
                'Return _HasBeauticiansProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasBeauticiansProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBeauticiansProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBeauticiansProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBeauticiansProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasBeauticiansProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21033</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BeauticiansProfessionalLiabilityQuotedPremium As String
            Get
                'Return _BeauticiansProfessionalLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_BeauticiansProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.BeauticiansProfessionalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_BeauticiansProfessionalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BeauticiansProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.BeauticiansProfessionalLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21033</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BeauticiansProfessionalLiabilityFullTimeEmpNum As String
            Get
                'Return _BeauticiansProfessionalLiabilityFullTimeEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.BeauticiansProfessionalLiabilityFullTimeEmpNum
            End Get
            Set(value As String)
                '_BeauticiansProfessionalLiabilityFullTimeEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.BeauticiansProfessionalLiabilityFullTimeEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21033</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BeauticiansProfessionalLiabilityPartTimeEmpNum As String
            Get
                'Return _BeauticiansProfessionalLiabilityPartTimeEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.BeauticiansProfessionalLiabilityPartTimeEmpNum
            End Get
            Set(value As String)
                '_BeauticiansProfessionalLiabilityPartTimeEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.BeauticiansProfessionalLiabilityPartTimeEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21033</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BeauticiansProfessionalLiabilityDescription As String '3/9/2017 - BOP stuff
            Get
                'Return _BeauticiansProfessionalLiabilityDescription
                'updated 7/19/2018
                Return VersionAndLobInfo.BeauticiansProfessionalLiabilityDescription
            End Get
            Set(value As String)
                '_BeauticiansProfessionalLiabilityDescription = value
                'updated 7/19/2018
                VersionAndLobInfo.BeauticiansProfessionalLiabilityDescription = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21034</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFuneralDirectorsProfessionalLiability As Boolean
            Get
                'Return _HasFuneralDirectorsProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasFuneralDirectorsProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFuneralDirectorsProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFuneralDirectorsProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFuneralDirectorsProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasFuneralDirectorsProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21034</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FuneralDirectorsProfessionalLiabilityQuotedPremium As String
            Get
                'Return _FuneralDirectorsProfessionalLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_FuneralDirectorsProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.FuneralDirectorsProfessionalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_FuneralDirectorsProfessionalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FuneralDirectorsProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.FuneralDirectorsProfessionalLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21034</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FuneralDirectorsProfessionalLiabilityEmpNum As String
            Get
                'Return _FuneralDirectorsProfessionalLiabilityEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.FuneralDirectorsProfessionalLiabilityEmpNum
            End Get
            Set(value As String)
                '_FuneralDirectorsProfessionalLiabilityEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.FuneralDirectorsProfessionalLiabilityEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21036</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPrintersProfessionalLiability As Boolean
            Get
                'Return _HasPrintersProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasPrintersProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPrintersProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPrintersProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPrintersProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasPrintersProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21036</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PrintersProfessionalLiabilityQuotedPremium As String
            Get
                'Return _PrintersProfessionalLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_PrintersProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.PrintersProfessionalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_PrintersProfessionalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PrintersProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.PrintersProfessionalLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21036</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PrintersProfessionalLiabilityLocNum As String
            Get
                'Return _PrintersProfessionalLiabilityLocNum
                'updated 7/19/2018
                Return VersionAndLobInfo.PrintersProfessionalLiabilityLocNum
            End Get
            Set(value As String)
                '_PrintersProfessionalLiabilityLocNum = value
                'updated 7/19/2018
                VersionAndLobInfo.PrintersProfessionalLiabilityLocNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21058</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasSelfStorageFacility As Boolean
            Get
                'Return _HasSelfStorageFacility
                'updated 7/19/2018
                Return VersionAndLobInfo.HasSelfStorageFacility
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasSelfStorageFacility
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasSelfStorageFacility = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasSelfStorageFacility = value
                'updated 7/19/2018
                VersionAndLobInfo.HasSelfStorageFacility = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21058</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SelfStorageFacilityQuotedPremium As String
            Get
                'Return _SelfStorageFacilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_SelfStorageFacilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.SelfStorageFacilityQuotedPremium
            End Get
            Set(value As String)
                '_SelfStorageFacilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SelfStorageFacilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.SelfStorageFacilityQuotedPremium = value
            End Set
        End Property
        'Public Property SelfStorageFacilityLocNum As String
        '    Get
        '        Return _SelfStorageFacilityLocNum
        '    End Get
        '    Set(value As String)
        '        _SelfStorageFacilityLocNum = value
        '    End Set
        'End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21058</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SelfStorageFacilityLimit As String
            Get
                'Return _SelfStorageFacilityLimit
                'updated 7/19/2018
                Return VersionAndLobInfo.SelfStorageFacilityLimit
            End Get
            Set(value As String)
                '_SelfStorageFacilityLimit = value
                'qqHelper.ConvertToLimitFormat(_SelfStorageFacilityLimit)
                'updated 7/19/2018
                VersionAndLobInfo.SelfStorageFacilityLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasVeterinariansProfessionalLiability As Boolean
            Get
                'Return _HasVeterinariansProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasVeterinariansProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasVeterinariansProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasVeterinariansProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasVeterinariansProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasVeterinariansProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VeterinariansProfessionalLiabilityEmpNum As String
            Get
                'Return _VeterinariansProfessionalLiabilityEmpNum
                'updated 7/19/2018
                Return VersionAndLobInfo.VeterinariansProfessionalLiabilityEmpNum
            End Get
            Set(value As String)
                '_VeterinariansProfessionalLiabilityEmpNum = value
                'updated 7/19/2018
                VersionAndLobInfo.VeterinariansProfessionalLiabilityEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VeterinariansProfessionalLiabilityQuotedPremium As String
            Get
                'Return _VeterinariansProfessionalLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_VeterinariansProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.VeterinariansProfessionalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_VeterinariansProfessionalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VeterinariansProfessionalLiabilityQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.VeterinariansProfessionalLiabilityQuotedPremium = value
            End Set
        End Property

        '3/9/2017 - BOP stuff
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPharmacistProfessionalLiability As Boolean
            Get
                'Return _HasPharmacistProfessionalLiability
                'updated 7/19/2018
                Return VersionAndLobInfo.HasPharmacistProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPharmacistProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPharmacistProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPharmacistProfessionalLiability = value
                'updated 7/19/2018
                VersionAndLobInfo.HasPharmacistProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PharmacistAnnualGrossSales As String
            Get
                'Return _PharmacistAnnualGrossSales
                'updated 7/19/2018
                Return VersionAndLobInfo.PharmacistAnnualGrossSales
            End Get
            Set(value As String)
                '_PharmacistAnnualGrossSales = value
                'qqHelper.ConvertToLimitFormat(_PharmacistAnnualGrossSales)
                'updated 7/19/2018
                VersionAndLobInfo.PharmacistAnnualGrossSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 164</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PharmacistQuotedPremium As String
            Get
                'Return _PharmacistQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_PharmacistQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.PharmacistQuotedPremium
            End Get
            Set(value As String)
                '_PharmacistQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PharmacistQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.PharmacistQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasLiquorLiability As Boolean
            Get
                'Return _HasLiquorLiability
                'updated 7/20/2018
                Return VersionAndLobInfo.HasLiquorLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasLiquorLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasLiquorLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasLiquorLiability = value
                'updated 7/20/2018
                VersionAndLobInfo.HasLiquorLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityAnnualGrossAlcoholSalesReceipts As String
            Get
                'Return _LiquorLiabilityAnnualGrossAlcoholSalesReceipts
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            End Get
            Set(value As String)
                '_LiquorLiabilityAnnualGrossAlcoholSalesReceipts = value
                'qqHelper.ConvertToLimitFormat(_LiquorLiabilityAnnualGrossAlcoholSalesReceipts)
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityAnnualGrossPackageSalesReceipts As String
            Get
                'Return _LiquorLiabilityAnnualGrossPackageSalesReceipts
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityAnnualGrossPackageSalesReceipts
            End Get
            Set(value As String)
                '_LiquorLiabilityAnnualGrossPackageSalesReceipts = value
                'qqHelper.ConvertToLimitFormat(_LiquorLiabilityAnnualGrossPackageSalesReceipts)
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityAnnualGrossPackageSalesReceipts = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property LiquorLiabilityAggregateLimit As String
            Get
                'Dim limit As String = "0"
                'If _HasLiquorLiability = True Then
                '    If Not String.IsNullOrWhiteSpace(_OccurrenceLiabilityLimit) = True AndAlso IsNumeric(_OccurrenceLiabilityLimit) Then
                '        limit = (CInt(OccurrenceLiabilityLimit) * 2)
                '    End If
                'End If
                'qqHelper.ConvertToLimitFormat(limit)
                'Return limit
                'updated 7/17/2018
                Return VersionAndLobInfo.LiquorLiabilityAggregateLimit
            End Get
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityClassCodeTypeId As String
            Get
                'Return _LiquorLiabilityClassCodeTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityClassCodeTypeId
            End Get
            Set(value As String)
                '_LiquorLiabilityClassCodeTypeId = value
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityClassCodeTypeId = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21035</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasOpticalAndHearingAidProfessionalLiability As Boolean
            Get
                'Return _HasOpticalAndHearingAidProfessionalLiability
                'updated 7/20/2018
                Return VersionAndLobInfo.HasOpticalAndHearingAidProfessionalLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasOpticalAndHearingAidProfessionalLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasOpticalAndHearingAidProfessionalLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasOpticalAndHearingAidProfessionalLiability = value
                'updated 7/20/2018
                VersionAndLobInfo.HasOpticalAndHearingAidProfessionalLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21035</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OpticalAndHearingAidProfessionalLiabilityEmpNum As String
            Get
                'Return _OpticalAndHearingAidProfessionalLiabilityEmpNum
                'updated 7/20/2018
                Return VersionAndLobInfo.OpticalAndHearingAidProfessionalLiabilityEmpNum
            End Get
            Set(value As String)
                '_OpticalAndHearingAidProfessionalLiabilityEmpNum = value
                'updated 7/20/2018
                VersionAndLobInfo.OpticalAndHearingAidProfessionalLiabilityEmpNum = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21035</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OpticalAndHearingAidProfessionalLiabilityQuotedPremium As String
            Get
                'Return _OpticalAndHearingAidProfessionalLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_OpticalAndHearingAidProfessionalLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.OpticalAndHearingAidProfessionalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_OpticalAndHearingAidProfessionalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_OpticalAndHearingAidProfessionalLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.OpticalAndHearingAidProfessionalLiabilityQuotedPremium = value
            End Set
        End Property

        '3/9/2017 - BOP stuff
        Public ReadOnly Property CustomerAutoLegalQuotedPremium As String
            Get
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used on initial retrieval for Summary/Proposal
                Dim total As String = ""
                If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    For Each Loc As QuickQuoteLocation In VersionAndLobInfo.Locations
                        If Not String.IsNullOrWhiteSpace(Loc.CustomerAutoLegalLiabilityQuotedPremium) AndAlso IsNumeric(Loc.CustomerAutoLegalLiabilityQuotedPremium) Then
                            'total += qqHelper.getSum(total, Loc.CustomerAutoLegalLiabilityQuotedPremium)
                            'updated 6/8/2017 to correctly return SUM into total and not inadvertently concatenate strings
                            total = qqHelper.getSum(total, Loc.CustomerAutoLegalLiabilityQuotedPremium)
                        End If
                    Next
                End If
                qqHelper.ConvertToQuotedPremiumFormat(total)
                Return total
            End Get
        End Property
        Public ReadOnly Property TenantAutoLegalQuotedPremium As String
            Get
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used on initial retrieval for Summary/Proposal
                Dim total As String = ""
                If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    For Each Loc As QuickQuoteLocation In VersionAndLobInfo.Locations
                        If Not String.IsNullOrWhiteSpace(Loc.TenantAutoLegalLiabilityQuotedPremium) AndAlso IsNumeric(Loc.TenantAutoLegalLiabilityQuotedPremium) Then
                            'total += qqHelper.getSum(total, Loc.TenantAutoLegalLiabilityQuotedPremium)
                            'updated 6/8/2017 to correctly return SUM into total and not inadvertently concatenate strings
                            total = qqHelper.getSum(total, Loc.TenantAutoLegalLiabilityQuotedPremium)
                        End If
                    Next
                End If
                qqHelper.ConvertToQuotedPremiumFormat(total)
                Return total
            End Get
        End Property
        Public ReadOnly Property FineArtsLocationQuotedPremium As String
            Get
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used on initial retrieval for Summary/Proposal
                Dim total As String = ""
                If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    For Each Loc As QuickQuoteLocation In VersionAndLobInfo.Locations
                        If Not String.IsNullOrWhiteSpace(Loc.FineArtsQuotedPremium) AndAlso IsNumeric(Loc.FineArtsQuotedPremium) Then
                            'total += qqHelper.getSum(total, Loc.FineArtsQuotedPremium)
                            'updated 6/8/2017 to correctly return SUM into total and not inadvertently concatenate strings
                            total = qqHelper.getSum(total, Loc.FineArtsQuotedPremium)
                        End If
                    Next
                End If
                qqHelper.ConvertToQuotedPremiumFormat(total)
                Return total
            End Get
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80376 and 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasMotelCoverage As Boolean
            Get
                'Return _HasMotelCoverage
                'updated 7/19/2018
                Return VersionAndLobInfo.HasMotelCoverage
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasMotelCoverage
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasMotelCoverage = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasMotelCoverage = value
                'updated 7/19/2018
                VersionAndLobInfo.HasMotelCoverage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80376</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoveragePerGuestLimitId As String
            Get
                'Return _MotelCoveragePerGuestLimitId '371 - 1,000/25,000, 372 - 2,000/50,000, 373 - 3,000/75,000, 374 - 4,000/100,000
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoveragePerGuestLimitId
            End Get
            Set(value As String)
                '_MotelCoveragePerGuestLimitId = value
                'Select Case _MotelCoveragePerGuestLimitId
                '    Case "371"
                '        _MotelCoveragePerGuestLimit = "1,000/25,000"
                '    Case "372"
                '        _MotelCoveragePerGuestLimit = "2,000/50,000"
                '    Case "373"
                '        _MotelCoveragePerGuestLimit = "3,000/75,000"
                '    Case "374"
                '        _MotelCoveragePerGuestLimit = "4,000/100,000"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoveragePerGuestLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80376</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoveragePerGuestLimit As String
            Get
                'Return _MotelCoveragePerGuestLimit '371 - 1,000/25,000, 372 - 2,000/50,000, 373 - 3,000/75,000, 374 - 4,000/100,000
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoveragePerGuestLimit
            End Get
            Set(value As String)
                '_MotelCoveragePerGuestLimit = value
                'Select Case _MotelCoveragePerGuestLimit
                '    Case "1000/25000"
                '        _MotelCoveragePerGuestLimitId = "371"
                '    Case "2000/50000"
                '        _MotelCoveragePerGuestLimitId = "372"
                '    Case "3000/75000"
                '        _MotelCoveragePerGuestLimitId = "373"
                '    Case "4000/100000"
                '        _MotelCoveragePerGuestLimitId = "374"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoveragePerGuestLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageSafeDepositLimitId As String
            Get
                'Return _MotelCoverageSafeDepositLimitId '0 - N/A, 8 - 25,000, 9 - 50,000, 10 - 100,000, 55 - 250,000
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageSafeDepositLimitId
            End Get
            Set(value As String)
                '_MotelCoverageSafeDepositLimitId = value
                'Select Case _MotelCoverageSafeDepositLimitId
                '    Case "0"
                '        _MotelCoverageSafeDepositLimit = "N/A"
                '    Case "8"
                '        _MotelCoverageSafeDepositLimit = "25,000"
                '    Case "9"
                '        _MotelCoverageSafeDepositLimit = "50,000"
                '    Case "10"
                '        _MotelCoverageSafeDepositLimit = "100,000"
                '    Case "55"
                '        _MotelCoverageSafeDepositLimit = "250,000"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageSafeDepositLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageSafeDepositLimit As String
            Get
                'Return _MotelCoverageSafeDepositLimit '0 - N/A, 8 - 25,000, 9 - 50,000, 10 - 100,000, 55 - 250,000
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageSafeDepositLimit
            End Get
            Set(value As String)
                '_MotelCoverageSafeDepositLimit = value
                'Select Case _MotelCoverageSafeDepositLimit
                '    Case "N/A"
                '        _MotelCoverageSafeDepositLimitId = "0"
                '    Case "25000"
                '        _MotelCoverageSafeDepositLimitId = "8"
                '    Case "50000"
                '        _MotelCoverageSafeDepositLimitId = "9"
                '    Case "100000"
                '        _MotelCoverageSafeDepositLimitId = "10"
                '    Case "250000"
                '        _MotelCoverageSafeDepositLimitId = "55"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageSafeDepositLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageSafeDepositDeductibleId As String
            Get
                'Return _MotelCoverageSafeDepositDeductibleId '40 - 0, 4 - 250,8 - 500,9 - 1,000,15 - 2,500
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageSafeDepositDeductibleId
            End Get
            Set(value As String)
                '_MotelCoverageSafeDepositDeductibleId = value
                'Select Case _MotelCoverageSafeDepositDeductibleId
                '    Case "40"
                '        _MotelCoverageSafeDepositDeductible = "0"
                '    Case "4"
                '        _MotelCoverageSafeDepositDeductible = "250"
                '    Case "8"
                '        _MotelCoverageSafeDepositDeductible = "500"
                '    Case "9"
                '        _MotelCoverageSafeDepositDeductible = "1,000"
                '    Case "15"
                '        _MotelCoverageSafeDepositDeductible = "2,500"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageSafeDepositDeductibleId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageSafeDepositDeductible As String
            Get
                'Return _MotelCoverageSafeDepositDeductible
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageSafeDepositDeductible
            End Get
            Set(value As String)
                '_MotelCoverageSafeDepositDeductible = value '40 - 0, 4 - 250,8 - 500,9 - 1,000,15 - 2,500
                'Select Case _MotelCoverageSafeDepositDeductible
                '    Case "0"
                '        _MotelCoverageSafeDepositDeductibleId = "40"
                '    Case "250"
                '        _MotelCoverageSafeDepositDeductibleId = "4"
                '    Case "500"
                '        _MotelCoverageSafeDepositDeductibleId = "8"
                '    Case "1000"
                '        _MotelCoverageSafeDepositDeductibleId = "9"
                '    Case "2500"
                '        _MotelCoverageSafeDepositDeductibleId = "15"
                '    Case Else
                '        _MotelCoverageSafeDepositDeductibleId = "40"
                'End Select
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageSafeDepositDeductible = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80376</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoveragePerGuestQuotedPremium As String
            Get
                'Return _MotelCoveragePerGuestQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_MotelCoveragePerGuestQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoveragePerGuestQuotedPremium
            End Get
            Set(value As String)
                '_MotelCoveragePerGuestQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotelCoveragePerGuestQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoveragePerGuestQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageSafeDepositQuotedPremium As String
            Get
                'Return _MotelCoverageSafeDepositQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_MotelCoverageSafeDepositQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageSafeDepositQuotedPremium
            End Get
            Set(value As String)
                '_MotelCoverageSafeDepositQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotelCoverageSafeDepositQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageSafeDepositQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80377</remarks>
        <Obsolete("don't use this... premium for 80376 is in MotelCoveragePerGuestQuotedPremium, and premium for 80377 is in MotelCoverageSafeDepositQuotedPremium")>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotelCoverageQuotedPremium As String
            Get
                'Return _MotelCoverageQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_MotelCoverageQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.MotelCoverageQuotedPremium
            End Get
            Set(value As String)
                '_MotelCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotelCoverageQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.MotelCoverageQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80398</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPhotographyCoverage As Boolean
            Get
                'Return _HasPhotographyCoverage
                'updated 7/19/2018
                Return VersionAndLobInfo.HasPhotographyCoverage
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPhotographyCoverage
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPhotographyCoverage = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPhotographyCoverage = value
                'updated 7/19/2018
                VersionAndLobInfo.HasPhotographyCoverage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80398</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPhotographyCoverageScheduledCoverages As Boolean
            Get
                'Return _HasPhotographyCoverageScheduledCoverages
                'updated 7/19/2018
                Return VersionAndLobInfo.HasPhotographyCoverageScheduledCoverages
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPhotographyCoverageScheduledCoverages
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPhotographyCoverageScheduledCoverages = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPhotographyCoverageScheduledCoverages = value
                'updated 7/19/2018
                VersionAndLobInfo.HasPhotographyCoverageScheduledCoverages = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80398</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhotographyCoverageQuotedPremium As String
            Get
                'Return _PhotographyCoverageQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_PhotographyCoverageQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.PhotographyCoverageQuotedPremium
            End Get
            Set(value As String)
                '_PhotographyCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PhotographyCoverageQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.PhotographyCoverageQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80398</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property PhotographyTotalScheduledLimits As String
            Get
                'Dim total As Decimal = 0
                'If _PhotographyScheduledCoverages IsNot Nothing AndAlso _PhotographyScheduledCoverages.Count > 0 Then
                '    For Each cov As QuickQuoteCoverage In _PhotographyScheduledCoverages
                '        If cov IsNot Nothing AndAlso Not String.IsNullOrWhiteSpace(cov.ManualLimitAmount) AndAlso IsNumeric(cov.ManualLimitAmount) Then
                '            total += CDec(cov.ManualLimitAmount)
                '        End If
                '    Next
                'End If
                'Return FormatNumber(total, 0).ToString
                'updated 7/19/2018
                Return VersionAndLobInfo.PhotographyTotalScheduledLimits
            End Get
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond Scheduled Item w/ scheduleditem_id 21248</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhotographyScheduledCoverages As List(Of QuickQuoteCoverage)
            Get
                'SetParentOfListItems(_PhotographyScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03979}")
                'Return _PhotographyScheduledCoverages
                'updated 7/19/2018
                SetParentOfListItems(VersionAndLobInfo.PhotographyScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03979}")
                Return VersionAndLobInfo.PhotographyScheduledCoverages
            End Get
            Set(value As List(Of QuickQuoteCoverage))
                '_PhotographyScheduledCoverages = value
                'SetParentOfListItems(_PhotographyScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03979}")
                'updated 7/19/2018
                VersionAndLobInfo.PhotographyScheduledCoverages = value
                SetParentOfListItems(VersionAndLobInfo.PhotographyScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03979}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80378</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPhotographyMakeupAndHair As Boolean
            Get
                'Return _HasPhotographyMakeupAndHair
                'updated 7/19/2018
                Return VersionAndLobInfo.HasPhotographyMakeupAndHair
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPhotographyMakeupAndHair
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPhotographyMakeupAndHair = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPhotographyMakeupAndHair = value
                'updated 7/19/2018
                VersionAndLobInfo.HasPhotographyMakeupAndHair = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80378</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhotographyMakeupAndHairQuotedPremium As String
            Get
                'Return _PhotographyMakeupAndHairQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_PhotographyMakeupAndHairQuotedPremium)
                'updated 7/19/2018
                Return VersionAndLobInfo.PhotographyMakeupAndHairQuotedPremium
            End Get
            Set(value As String)
                '_PhotographyMakeupAndHairQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PhotographyMakeupAndHairQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.PhotographyMakeupAndHairQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80380</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasResidentialCleaning As Boolean
            Get
                'Return _HasResidentialCleaning
                'updated 7/19/2018
                Return VersionAndLobInfo.HasResidentialCleaning
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasResidentialCleaning
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasResidentialCleaning = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasResidentialCleaning = value
                'updated 7/19/2018
                VersionAndLobInfo.HasResidentialCleaning = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80380</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ResidentialCleaningQuotedPremium As String
            Get
                'Return _ResidentialCleaningQuotedPremium
                'updated 7/19/2018
                Return VersionAndLobInfo.ResidentialCleaningQuotedPremium
            End Get
            Set(value As String)
                '_ResidentialCleaningQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ResidentialCleaningQuotedPremium)
                'updated 7/19/2018
                VersionAndLobInfo.ResidentialCleaningQuotedPremium = value
            End Set
        End Property
        'added 7/13/2012 for GL
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityOccurrenceLimit As String
            Get
                'Return _LiquorLiabilityOccurrenceLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityOccurrenceLimit
            End Get
            Set(value As String)
                '_LiquorLiabilityOccurrenceLimit = value
                'Select Case _LiquorLiabilityOccurrenceLimit
                '    Case "N/A"
                '        _LiquorLiabilityOccurrenceLimitId = "0"
                '    Case "300,000"
                '        _LiquorLiabilityOccurrenceLimitId = "33"
                '    Case "500,000"
                '        _LiquorLiabilityOccurrenceLimitId = "34"
                '    Case "1,000,000"
                '        _LiquorLiabilityOccurrenceLimitId = "56"
                '    Case Else
                '        _LiquorLiabilityOccurrenceLimitId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityOccurrenceLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityOccurrenceLimitId As String
            Get
                'Return _LiquorLiabilityOccurrenceLimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityOccurrenceLimitId
            End Get
            Set(value As String)
                '_LiquorLiabilityOccurrenceLimitId = value
                '_LiquorLiabilityOccurrenceLimit = ""
                'If IsNumeric(_LiquorLiabilityOccurrenceLimitId) = True Then
                '    Select Case _LiquorLiabilityOccurrenceLimitId
                '        Case "0"
                '            _LiquorLiabilityOccurrenceLimit = "N/A"
                '        Case "33"
                '            _LiquorLiabilityOccurrenceLimit = "300,000"
                '        Case "34"
                '            _LiquorLiabilityOccurrenceLimit = "500,000"
                '        Case "56"
                '            _LiquorLiabilityOccurrenceLimit = "1,000,000"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityOccurrenceLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134 (LiquorLiabilityClassificationId 50911 - Manufacturer, Wholesalers &amp; Distributors; LiquorLiabilityClassificationId 58161 - Restaurants or Hotels; LiquorLiabilityClassificationId 59211 - Package Stores; LiquorLiabilityClassificationId 70412 - Clubs</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityClassification As String
            Get
                'Return _LiquorLiabilityClassification
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityClassification
            End Get
            Set(value As String)
                '_LiquorLiabilityClassification = value
                'Select Case _LiquorLiabilityClassification
                '    Case "Manufacturer, Wholesalers & Distributors"
                '        _LiquorLiabilityClassificationId = "50911"
                '    Case "Restaurants or Hotels"
                '        _LiquorLiabilityClassificationId = "58161"
                '    Case "Package Stores"
                '        _LiquorLiabilityClassificationId = "59211"
                '    Case "Clubs"
                '        _LiquorLiabilityClassificationId = "70412"
                '    Case Else
                '        _LiquorLiabilityClassificationId = ""
                'End Select
                ''SetLiquorRateAndMinimumPremForClassificationId()
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityClassification = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134 (LiquorLiabilityClassificationId 50911 - Manufacturer, Wholesalers &amp; Distributors; LiquorLiabilityClassificationId 58161 - Restaurants or Hotels; LiquorLiabilityClassificationId 59211 - Package Stores; LiquorLiabilityClassificationId 70412 - Clubs</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityClassificationId As String
            Get
                'Return _LiquorLiabilityClassificationId
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityClassificationId
            End Get
            Set(value As String)
                '_LiquorLiabilityClassificationId = value
                '_LiquorLiabilityClassification = ""
                'If IsNumeric(_LiquorLiabilityClassificationId) = True Then
                '    Select Case _LiquorLiabilityClassificationId
                '        Case "50911"
                '            _LiquorLiabilityClassification = "Manufacturer, Wholesalers & Distributors"
                '        Case "58161"
                '            _LiquorLiabilityClassification = "Restaurants or Hotels"
                '        Case "59211"
                '            _LiquorLiabilityClassification = "Package Stores"
                '        Case "70412"
                '            _LiquorLiabilityClassification = "Clubs"
                '    End Select
                'End If
                ''SetLiquorRateAndMinimumPremForClassificationId()
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityClassificationId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorSales As String
            Get
                'Return _LiquorSales
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorSales
            End Get
            Set(value As String)
                '_LiquorSales = value
                'updated 7/20/2018
                VersionAndLobInfo.LiquorSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks> 50911 - Manufacturers, Wholesalers and Distributors selling alcoholic beverages for consumption off premises CoverageCode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorManufacturersSales As String
            Get
                Return VersionAndLobInfo.LiquorManufacturersSales
            End Get
            Set(value As String)
                VersionAndLobInfo.LiquorManufacturersSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>58161 - Restaurants, Taverns, Hotels, Motels including package sales CoverageCode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorRestaurantsSales As String
            Get
                Return VersionAndLobInfo.LiquorRestaurantsSales
            End Get
            Set(value As String)
                VersionAndLobInfo.LiquorRestaurantsSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>59211 - Package Stores and other retail establishments selling alchoholic beverages for consumption off premises CoverageCode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorPackageStoresSales As String
            Get
                Return VersionAndLobInfo.LiquorPackageStoresSales
            End Get
            Set(value As String)
                VersionAndLobInfo.LiquorPackageStoresSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>70412 - Clubs CoverageCode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorClubsSales As String
            Get
                Return VersionAndLobInfo.LiquorClubsSales
            End Get
            Set(value As String)
                VersionAndLobInfo.LiquorClubsSales = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21134</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiquorLiabilityQuotedPremium As String
            Get
                'Return _LiquorLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_LiquorLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.LiquorLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_LiquorLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LiquorLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.LiquorLiabilityQuotedPremium = value
            End Set
        End Property
        'Public Property LiquorRate As String
        '    Get
        '        Return _LiquorRate
        '    End Get
        '    Set(value As String)
        '        _LiquorRate = value
        '    End Set
        'End Property
        'Public Property LiquorMinimumPremium As String
        '    Get
        '        Return _LiquorMinimumPremium
        '    End Get
        '    Set(value As String)
        '        _LiquorMinimumPremium = value
        '    End Set
        'End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21131</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProfessionalLiabilityCemetaryNumberOfBurials As String
            Get
                'Return _ProfessionalLiabilityCemetaryNumberOfBurials
                'updated 7/20/2018
                Return VersionAndLobInfo.ProfessionalLiabilityCemetaryNumberOfBurials
            End Get
            Set(value As String)
                '_ProfessionalLiabilityCemetaryNumberOfBurials = value
                'updated 7/20/2018
                VersionAndLobInfo.ProfessionalLiabilityCemetaryNumberOfBurials = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21131</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProfessionalLiabilityCemetaryQuotedPremium As String
            Get
                'Return _ProfessionalLiabilityCemetaryQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ProfessionalLiabilityCemetaryQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ProfessionalLiabilityCemetaryQuotedPremium
            End Get
            Set(value As String)
                '_ProfessionalLiabilityCemetaryQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ProfessionalLiabilityCemetaryQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ProfessionalLiabilityCemetaryQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21034</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProfessionalLiabilityFuneralDirectorsNumberOfBodies As String
            Get
                'Return _ProfessionalLiabilityFuneralDirectorsNumberOfBodies
                'updated 7/20/2018
                Return VersionAndLobInfo.ProfessionalLiabilityFuneralDirectorsNumberOfBodies
            End Get
            Set(value As String)
                '_ProfessionalLiabilityFuneralDirectorsNumberOfBodies = value
                'updated 7/20/2018
                VersionAndLobInfo.ProfessionalLiabilityFuneralDirectorsNumberOfBodies = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21132</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProfessionalLiabilityPastoralNumberOfClergy As String
            Get
                'Return _ProfessionalLiabilityPastoralNumberOfClergy
                'updated 7/20/2018
                Return VersionAndLobInfo.ProfessionalLiabilityPastoralNumberOfClergy
            End Get
            Set(value As String)
                '_ProfessionalLiabilityPastoralNumberOfClergy = value
                'updated 7/20/2018
                VersionAndLobInfo.ProfessionalLiabilityPastoralNumberOfClergy = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21132</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ProfessionalLiabilityPastoralQuotedPremium As String
            Get
                'Return _ProfessionalLiabilityPastoralQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ProfessionalLiabilityPastoralQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ProfessionalLiabilityPastoralQuotedPremium
            End Get
            Set(value As String)
                '_ProfessionalLiabilityPastoralQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ProfessionalLiabilityPastoralQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ProfessionalLiabilityPastoralQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ManagementCooperation As String
            Get
                'Return _IRPM_ManagementCooperation
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ManagementCooperation
            End Get
            Set(value As String)
                '_IRPM_ManagementCooperation = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ManagementCooperation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ManagementCooperationDesc As String
            Get
                'Return _IRPM_ManagementCooperationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ManagementCooperationDesc
            End Get
            Set(value As String)
                '_IRPM_ManagementCooperationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ManagementCooperationDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 1</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_Location As String
            Get
                'Return _IRPM_Location
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_Location
            End Get
            Set(value As String)
                '_IRPM_Location = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_Location = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 1</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_LocationDesc As String
            Get
                'Return _IRPM_LocationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_LocationDesc
            End Get
            Set(value As String)
                ' _IRPM_LocationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_LocationDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 9</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_BuildingFeatures As String
            Get
                'Return _IRPM_BuildingFeatures
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_BuildingFeatures
            End Get
            Set(value As String)
                '_IRPM_BuildingFeatures = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_BuildingFeatures = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 9</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_BuildingFeaturesDesc As String
            Get
                'Return _IRPM_BuildingFeaturesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_BuildingFeaturesDesc
            End Get
            Set(value As String)
                '_IRPM_BuildingFeaturesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_BuildingFeaturesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 2</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_Premises As String
            Get
                'Return _IRPM_Premises
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_Premises
            End Get
            Set(value As String)
                '_IRPM_Premises = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_Premises = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 2</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_PremisesDesc As String
            Get
                'Return _IRPM_PremisesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_PremisesDesc
            End Get
            Set(value As String)
                '_IRPM_PremisesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_PremisesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_Employees As String
            Get
                'Return _IRPM_Employees
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_Employees
            End Get
            Set(value As String)
                '_IRPM_Employees = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_Employees = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_EmployeesDesc As String
            Get
                'Return _IRPM_EmployeesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_EmployeesDesc
            End Get
            Set(value As String)
                '_IRPM_EmployeesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_EmployeesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 12</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_Protection As String
            Get
                'Return _IRPM_Protection
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_Protection
            End Get
            Set(value As String)
                '_IRPM_Protection = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_Protection = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 12</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ProtectionDesc As String
            Get
                'Return _IRPM_ProtectionDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ProtectionDesc
            End Get
            Set(value As String)
                '_IRPM_ProtectionDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ProtectionDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CatostrophicHazards As String
            Get
                'Return _IRPM_CatostrophicHazards
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CatostrophicHazards
            End Get
            Set(value As String)
                '_IRPM_CatostrophicHazards = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CatostrophicHazards = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CatostrophicHazardsDesc As String
            Get
                'Return _IRPM_CatostrophicHazardsDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CatostrophicHazardsDesc
            End Get
            Set(value As String)
                '_IRPM_CatostrophicHazardsDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CatostrophicHazardsDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 16</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ManagementExperience As String
            Get
                'Return _IRPM_ManagementExperience
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ManagementExperience
            End Get
            Set(value As String)
                '_IRPM_ManagementExperience = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ManagementExperience = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 16</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ManagementExperienceDesc As String
            Get
                'Return _IRPM_ManagementExperienceDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ManagementExperienceDesc
            End Get
            Set(value As String)
                '_IRPM_ManagementExperienceDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ManagementExperienceDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_Equipment As String
            Get
                'Return _IRPM_Equipment
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_Equipment
            End Get
            Set(value As String)
                '_IRPM_Equipment = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_Equipment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_EquipmentDesc As String
            Get
                'Return _IRPM_EquipmentDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_EquipmentDesc
            End Get
            Set(value As String)
                '_IRPM_EquipmentDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_EquipmentDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 19</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_MedicalFacilities As String
            Get
                'Return _IRPM_MedicalFacilities
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_MedicalFacilities
            End Get
            Set(value As String)
                '_IRPM_MedicalFacilities = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_MedicalFacilities = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 19</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_MedicalFacilitiesDesc As String
            Get
                'Return _IRPM_MedicalFacilitiesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_MedicalFacilitiesDesc
            End Get
            Set(value As String)
                '_IRPM_MedicalFacilitiesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_MedicalFacilitiesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 17</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ClassificationPeculiarities As String
            Get
                'Return _IRPM_ClassificationPeculiarities
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ClassificationPeculiarities
            End Get
            Set(value As String)
                '_IRPM_ClassificationPeculiarities = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ClassificationPeculiarities = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 17</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_ClassificationPeculiaritiesDesc As String
            Get
                'Return _IRPM_ClassificationPeculiaritiesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_ClassificationPeculiaritiesDesc
            End Get
            Set(value As String)
                '_IRPM_ClassificationPeculiaritiesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_ClassificationPeculiaritiesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_ManagementCooperation As String
            Get
                'Return _IRPM_GL_ManagementCooperation
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_ManagementCooperation
            End Get
            Set(value As String)
                '_IRPM_GL_ManagementCooperation = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_ManagementCooperation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_ManagementCooperationDesc As String
            Get
                'Return _IRPM_GL_ManagementCooperationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_ManagementCooperationDesc
            End Get
            Set(value As String)
                '_IRPM_GL_ManagementCooperationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_ManagementCooperationDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 1</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_Location As String
            Get
                'Return _IRPM_GL_Location
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_Location
            End Get
            Set(value As String)
                '_IRPM_GL_Location = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_Location = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 1</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_LocationDesc As String
            Get
                'Return _IRPM_GL_LocationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_LocationDesc
            End Get
            Set(value As String)
                '_IRPM_GL_LocationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_LocationDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 2</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_Premises As String
            Get
                'Return _IRPM_GL_Premises
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_Premises
            End Get
            Set(value As String)
                '_IRPM_GL_Premises = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_Premises = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 2</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_PremisesDesc As String
            Get
                'Return _IRPM_GL_PremisesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_PremisesDesc
            End Get
            Set(value As String)
                '_IRPM_GL_PremisesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_PremisesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_Equipment As String
            Get
                'Return _IRPM_GL_Equipment
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_Equipment
            End Get
            Set(value As String)
                '_IRPM_GL_Equipment = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_Equipment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_EquipmentDesc As String
            Get
                'Return _IRPM_GL_EquipmentDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_EquipmentDesc
            End Get
            Set(value As String)
                '_IRPM_GL_EquipmentDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_EquipmentDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_Employees As String
            Get
                'Return _IRPM_GL_Employees
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_Employees
            End Get
            Set(value As String)
                '_IRPM_GL_Employees = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_Employees = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_EmployeesDesc As String
            Get
                'Return _IRPM_GL_EmployeesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_EmployeesDesc
            End Get
            Set(value As String)
                '_IRPM_GL_EmployeesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_EmployeesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 17</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_ClassificationPeculiarities As String
            Get
                'Return _IRPM_GL_ClassificationPeculiarities
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_ClassificationPeculiarities
            End Get
            Set(value As String)
                '_IRPM_GL_ClassificationPeculiarities = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_ClassificationPeculiarities = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 5 (Premises) or 6 (Products) and RiskCharacteristicTypeId 17</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_GL_ClassificationPeculiaritiesDesc As String
            Get
                'Return _IRPM_GL_ClassificationPeculiaritiesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_GL_ClassificationPeculiaritiesDesc
            End Get
            Set(value As String)
                '_IRPM_GL_ClassificationPeculiaritiesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_GL_ClassificationPeculiaritiesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Management As String
            Get
                'Return _IRPM_CAP_Management
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Management
            End Get
            Set(value As String)
                '_IRPM_CAP_Management = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Management = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_ManagementDesc As String
            Get
                'Return _IRPM_CAP_ManagementDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_ManagementDesc
            End Get
            Set(value As String)
                '_IRPM_CAP_ManagementDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_ManagementDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Employees As String
            Get
                'Return _IRPM_CAP_Employees
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Employees
            End Get
            Set(value As String)
                '_IRPM_CAP_Employees = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Employees = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_EmployeesDesc As String
            Get
                'Return _IRPM_CAP_EmployeesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_EmployeesDesc
            End Get
            Set(value As String)
                '_IRPM_CAP_EmployeesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_EmployeesDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Equipment As String
            Get
                'Return _IRPM_CAP_Equipment
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Equipment
            End Get
            Set(value As String)
                '_IRPM_CAP_Equipment = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Equipment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_EquipmentDesc As String
            Get
                'Return _IRPM_CAP_EquipmentDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_EquipmentDesc
            End Get
            Set(value As String)
                '_IRPM_CAP_EquipmentDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_EquipmentDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_SafetyOrganization As String
            Get
                'Return _IRPM_CAP_SafetyOrganization
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_SafetyOrganization
            End Get
            Set(value As String)
                '_IRPM_CAP_SafetyOrganization = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_SafetyOrganization = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 1 (Liability) and RiskCharacteristicTypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_SafetyOrganizationDesc As String
            Get
                'Return _IRPM_CAP_SafetyOrganizationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_SafetyOrganizationDesc
            End Get
            Set(value As String)
                '_IRPM_CAP_SafetyOrganizationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_SafetyOrganizationDesc = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Management_Phys_Damage As String
            Get
                'Return _IRPM_CAP_Management
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Management_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_Management = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Management_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_ManagementDesc_Phys_Damage As String
            Get
                'Return _IRPM_CAP_ManagementDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_ManagementDesc_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_ManagementDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_ManagementDesc_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Employees_Phys_Damage As String
            Get
                'Return _IRPM_CAP_Employees
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Employees_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_Employees = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Employees_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 4</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_EmployeesDesc_Phys_Damage As String
            Get
                'Return _IRPM_CAP_EmployeesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_EmployeesDesc_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_EmployeesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_EmployeesDesc_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_Equipment_Phys_Damage As String
            Get
                'Return _IRPM_CAP_Equipment
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_Equipment_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_Equipment = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_Equipment_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_EquipmentDesc_Phys_Damage As String
            Get
                'Return _IRPM_CAP_EquipmentDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_EquipmentDesc_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_EquipmentDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_EquipmentDesc_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_SafetyOrganization_Phys_Damage As String
            Get
                'Return _IRPM_CAP_SafetyOrganization
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_SafetyOrganization_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_SafetyOrganization = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_SafetyOrganization_Phys_Damage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 2 (Physical Damage) and RiskCharacteristicTypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CAP_SafetyOrganizationDesc_Phys_Damage As String
            Get
                'Return _IRPM_CAP_SafetyOrganizationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CAP_SafetyOrganizationDesc_Phys_Damage
            End Get
            Set(value As String)
                '_IRPM_CAP_SafetyOrganizationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CAP_SafetyOrganizationDesc_Phys_Damage = value
            End Set
        End Property


        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CPR_Management As String
            Get
                'Return _IRPM_CPR_Management
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CPR_Management
            End Get
            Set(value As String)
                '_IRPM_CPR_Management = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CPR_Management = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 5</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CPR_ManagementDesc As String
            Get
                'Return _IRPM_CPR_ManagementDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CPR_ManagementDesc
            End Get
            Set(value As String)
                '_IRPM_CPR_ManagementDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CPR_ManagementDesc = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 24</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CPR_PremisesAndEquipment As String
            Get
                'Return _IRPM_CPR_PremisesAndEquipment
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CPR_PremisesAndEquipment
            End Get
            Set(value As String)
                '_IRPM_CPR_PremisesAndEquipment = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CPR_PremisesAndEquipment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond ScheduledRating w/ ScheduleRatingTypeId 4 (IRPM) and RiskCharacteristicTypeId 24</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_CPR_PremisesAndEquipmentDesc As String
            Get
                'Return _IRPM_CPR_PremisesAndEquipmentDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_CPR_PremisesAndEquipmentDesc
            End Get
            Set(value As String)
                '_IRPM_CPR_PremisesAndEquipmentDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_CPR_PremisesAndEquipmentDesc = value
            End Set
        End Property
        'added 6/11/2015 for FAR IRPM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_CareConditionOfEquipPremises As String
            Get
                'Return _IRPM_FAR_CareConditionOfEquipPremises
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_CareConditionOfEquipPremises
            End Get
            Set(value As String)
                '_IRPM_FAR_CareConditionOfEquipPremises = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_CareConditionOfEquipPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_CareConditionOfEquipPremisesDesc As String
            Get
                'Return _IRPM_FAR_CareConditionOfEquipPremisesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_CareConditionOfEquipPremisesDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_CareConditionOfEquipPremisesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_CareConditionOfEquipPremisesDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_Cooperation As String
            Get
                'Return _IRPM_FAR_Cooperation
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_Cooperation
            End Get
            Set(value As String)
                '_IRPM_FAR_Cooperation = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_Cooperation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_CooperationDesc As String
            Get
                'Return _IRPM_FAR_CooperationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_CooperationDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_CooperationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_CooperationDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_DamageSusceptibility As String
            Get
                'Return _IRPM_FAR_DamageSusceptibility
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_DamageSusceptibility
            End Get
            Set(value As String)
                '_IRPM_FAR_DamageSusceptibility = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_DamageSusceptibility = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_DamageSusceptibilityDesc As String
            Get
                'Return _IRPM_FAR_DamageSusceptibilityDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_DamageSusceptibilityDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_DamageSusceptibilityDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_DamageSusceptibilityDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_DispersionOrConcentration As String
            Get
                'Return _IRPM_FAR_DispersionOrConcentration
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_DispersionOrConcentration
            End Get
            Set(value As String)
                '_IRPM_FAR_DispersionOrConcentration = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_DispersionOrConcentration = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_DispersionOrConcentrationDesc As String
            Get
                'Return _IRPM_FAR_DispersionOrConcentrationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_DispersionOrConcentrationDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_DispersionOrConcentrationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_DispersionOrConcentrationDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_SuperiorOrInferiorStructureFeatures As String
            Get
                'Return _IRPM_FAR_SuperiorOrInferiorStructureFeatures
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_SuperiorOrInferiorStructureFeatures
            End Get
            Set(value As String)
                '_IRPM_FAR_SuperiorOrInferiorStructureFeatures = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_SuperiorOrInferiorStructureFeatures = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc As String
            Get
                'Return _IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding As String
            Get
                'Return _IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding
            End Get
            Set(value As String)
                '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc As String
            Get
                'Return _IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_Location As String
            Get
                'Return _IRPM_FAR_Location
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_Location
            End Get
            Set(value As String)
                '_IRPM_FAR_Location = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_Location = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_LocationDesc As String
            Get
                'Return _IRPM_FAR_LocationDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_LocationDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_LocationDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_LocationDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_MiscProtectFeaturesOrHazards As String
            Get
                'Return _IRPM_FAR_MiscProtectFeaturesOrHazards
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_MiscProtectFeaturesOrHazards
            End Get
            Set(value As String)
                '_IRPM_FAR_MiscProtectFeaturesOrHazards = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_MiscProtectFeaturesOrHazards = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_MiscProtectFeaturesOrHazardsDesc As String
            Get
                'Return _IRPM_FAR_MiscProtectFeaturesOrHazardsDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_MiscProtectFeaturesOrHazardsDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_RoofCondition As String
            Get
                'Return _IRPM_FAR_RoofCondition
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_RoofCondition
            End Get
            Set(value As String)
                '_IRPM_FAR_RoofCondition = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_RoofCondition = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_RoofConditionDesc As String
            Get
                'Return _IRPM_FAR_RoofConditionDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_RoofConditionDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_RoofConditionDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_RoofConditionDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_StoragePracticesAndHazardousOperations As String
            Get
                'Return _IRPM_FAR_StoragePracticesAndHazardousOperations
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_StoragePracticesAndHazardousOperations
            End Get
            Set(value As String)
                '_IRPM_FAR_StoragePracticesAndHazardousOperations = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_StoragePracticesAndHazardousOperations = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_StoragePracticesAndHazardousOperationsDesc As String
            Get
                'Return _IRPM_FAR_StoragePracticesAndHazardousOperationsDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_StoragePracticesAndHazardousOperationsDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_PastLosses As String
            Get
                'Return _IRPM_FAR_PastLosses
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_PastLosses
            End Get
            Set(value As String)
                '_IRPM_FAR_PastLosses = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_PastLosses = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_PastLossesDesc As String
            Get
                'Return _IRPM_FAR_PastLossesDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_PastLossesDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_PastLossesDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_PastLossesDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_SupportingBusiness As String
            Get
                'Return _IRPM_FAR_SupportingBusiness
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_SupportingBusiness
            End Get
            Set(value As String)
                '_IRPM_FAR_SupportingBusiness = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_SupportingBusiness = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_SupportingBusinessDesc As String
            Get
                'Return _IRPM_FAR_SupportingBusinessDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_SupportingBusinessDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_SupportingBusinessDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_SupportingBusinessDesc = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_RegularOnsiteInspections As String
            Get
                'Return _IRPM_FAR_RegularOnsiteInspections
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_RegularOnsiteInspections
            End Get
            Set(value As String)
                '_IRPM_FAR_RegularOnsiteInspections = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_RegularOnsiteInspections = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IRPM_FAR_RegularOnsiteInspectionsDesc As String
            Get
                'Return _IRPM_FAR_RegularOnsiteInspectionsDesc
                'updated 7/20/2018
                Return VersionAndLobInfo.IRPM_FAR_RegularOnsiteInspectionsDesc
            End Get
            Set(value As String)
                '_IRPM_FAR_RegularOnsiteInspectionsDesc = value
                'updated 7/20/2018
                VersionAndLobInfo.IRPM_FAR_RegularOnsiteInspectionsDesc = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledRatings As Generic.List(Of QuickQuoteScheduledRating)
            Get
                'SetParentOfListItems(_ScheduledRatings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03980}")
                'Return _ScheduledRatings
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledRatings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03980}")
                Return VersionAndLobInfo.ScheduledRatings
            End Get
            Set(value As Generic.List(Of QuickQuoteScheduledRating))
                '_ScheduledRatings = value
                'SetParentOfListItems(_ScheduledRatings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03980}")
                'updated 7/20/2018
                VersionAndLobInfo.ScheduledRatings = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledRatings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03980}")
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 12</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExclusionOfAmishWorkerRecords As Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
            Get
                'SetParentOfListItems(_ExclusionOfAmishWorkerRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03981}")
                'Return _ExclusionOfAmishWorkerRecords
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfAmishWorkerRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03981}")
                Return VersionAndLobInfo.ExclusionOfAmishWorkerRecords
            End Get
            Set(value As Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord))
                '_ExclusionOfAmishWorkerRecords = value
                'SetParentOfListItems(_ExclusionOfAmishWorkerRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03981}")
                'updated 7/20/2018
                VersionAndLobInfo.ExclusionOfAmishWorkerRecords = value
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfAmishWorkerRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03981}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 13</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExclusionOfSoleProprietorRecords As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
            Get
                'SetParentOfListItems(_ExclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03982}")
                'Return _ExclusionOfSoleProprietorRecords
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03982}")
                Return VersionAndLobInfo.ExclusionOfSoleProprietorRecords
            End Get
            Set(value As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord))
                '_ExclusionOfSoleProprietorRecords = value
                'SetParentOfListItems(_ExclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03982}")
                'updated 7/20/2018
                VersionAndLobInfo.ExclusionOfSoleProprietorRecords = value
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03982}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 14</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InclusionOfSoleProprietorRecords As Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
            Get
                'SetParentOfListItems(_InclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03983}")
                'Return _InclusionOfSoleProprietorRecords
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.InclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03983}")
                Return VersionAndLobInfo.InclusionOfSoleProprietorRecords
            End Get
            Set(value As Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord))
                '_InclusionOfSoleProprietorRecords = value
                'SetParentOfListItems(_InclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03983}")
                'updated 7/20/2018
                VersionAndLobInfo.InclusionOfSoleProprietorRecords = value
                SetParentOfListItems(VersionAndLobInfo.InclusionOfSoleProprietorRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03983}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 15</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WaiverOfSubrogationRecords As Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
            Get
                'SetParentOfListItems(_WaiverOfSubrogationRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03984}")
                'Return _WaiverOfSubrogationRecords
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.WaiverOfSubrogationRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03984}")
                Return VersionAndLobInfo.WaiverOfSubrogationRecords
            End Get
            Set(value As Generic.List(Of QuickQuoteWaiverOfSubrogationRecord))
                '_WaiverOfSubrogationRecords = value
                'SetParentOfListItems(_WaiverOfSubrogationRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03984}")
                'updated 7/20/2018
                VersionAndLobInfo.WaiverOfSubrogationRecords = value
                SetParentOfListItems(VersionAndLobInfo.WaiverOfSubrogationRecords, "{663B7C7B-F2AC-4BF6-965A-D30F41A03984}")
            End Set
        End Property
        'added 10/10/2017
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ExclusionOfAmishWorkerRecordsBackup As Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
            Get
                'SetParentOfListItems(_ExclusionOfAmishWorkerRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03985}")
                'Return _ExclusionOfAmishWorkerRecordsBackup
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfAmishWorkerRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03985}")
                Return VersionAndLobInfo.ExclusionOfAmishWorkerRecordsBackup
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ExclusionOfSoleProprietorRecordsBackup As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
            Get
                'SetParentOfListItems(_ExclusionOfSoleProprietorRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03986}")
                'Return _ExclusionOfSoleProprietorRecordsBackup
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ExclusionOfSoleProprietorRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03986}")
                Return VersionAndLobInfo.ExclusionOfSoleProprietorRecordsBackup
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property InclusionOfSoleProprietorRecordsBackup As Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
            Get
                'SetParentOfListItems(_InclusionOfSoleProprietorRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03987}")
                'Return _InclusionOfSoleProprietorRecordsBackup
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.InclusionOfSoleProprietorRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03987}")
                Return VersionAndLobInfo.InclusionOfSoleProprietorRecordsBackup
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property WaiverOfSubrogationRecordsBackup As Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
            Get
                'SetParentOfListItems(_WaiverOfSubrogationRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03988}")
                'Return _WaiverOfSubrogationRecordsBackup
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.WaiverOfSubrogationRecordsBackup, "{663B7C7B-F2AC-4BF6-965A-D30F41A03988}")
                Return VersionAndLobInfo.WaiverOfSubrogationRecordsBackup
            End Get
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 165 on all buildings</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_BuildingLimit_All_Premium As String
            Get
                'Return _Dec_BuildingLimit_All_Premium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_BuildingLimit_All_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_BuildingLimit_All_Premium
            End Get
            Set(value As String)
                '_Dec_BuildingLimit_All_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_BuildingLimit_All_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_BuildingLimit_All_Premium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21037 on all buildings</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_BuildingPersPropLimit_All_Premium As String
            Get
                'Return _Dec_BuildingPersPropLimit_All_Premium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_BuildingPersPropLimit_All_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_BuildingPersPropLimit_All_Premium
            End Get
            Set(value As String)
                '_Dec_BuildingPersPropLimit_All_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_BuildingPersPropLimit_All_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_BuildingPersPropLimit_All_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_BOP_OptCovs_Premium As String
            Get
                'Return _Dec_BOP_OptCovs_Premium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_BOP_OptCovs_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_BOP_OptCovs_Premium
            End Get
            Set(value As String)
                '_Dec_BOP_OptCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_BOP_OptCovs_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_BOP_OptCovs_Premium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); value for CoverageAdditionalInfoRecord w/ description containing 'Experience Mod Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExpModQuotedPremium As String
            Get
                'Return _ExpModQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ExpModQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ExpModQuotedPremium
            End Get
            Set(value As String)
                '_ExpModQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ExpModQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ExpModQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); value for CoverageAdditionalInfoRecord w/ description containing 'Scheduled Rating Plan Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduleModQuotedPremium As String
            Get
                'Return _ScheduleModQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ScheduleModQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ScheduleModQuotedPremium
            End Get
            Set(value As String)
                '_ScheduleModQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ScheduleModQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ScheduleModQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); value for CoverageAdditionalInfoRecord w/ description containing 'Terrorism Risk Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TerrorismQuotedPremium As String
            Get
                'Return _TerrorismQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_TerrorismQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.TerrorismQuotedPremium
            End Get
            Set(value As String)
                '_TerrorismQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TerrorismQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.TerrorismQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); sum of all values for CoverageAdditionalInfoRecords w/ description containing 'Workers Compensation - Premium Discount'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PremDiscountQuotedPremium As String
            Get
                'Return _PremDiscountQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_PremDiscountQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.PremDiscountQuotedPremium
            End Get
            Set(value As String)
                '_PremDiscountQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PremDiscountQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.PremDiscountQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); value for CoverageAdditionalInfoRecord w/ description containing 'Minimum Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MinimumQuotedPremium As String
            Get
                'If _MinimumQuotedPremium = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_MinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'End If
                'Return _MinimumQuotedPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.MinimumQuotedPremium
            End Get
            Set(value As String)
                '_MinimumQuotedPremium = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_MinimumQuotedPremium)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_MinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'updated 7/20/2018
                VersionAndLobInfo.MinimumQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10124 (Workers Compensation); value for CoverageAdditionalInfoRecord w/ description containing 'Minimum Premium Adjustment'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MinimumPremiumAdjustment As String
            Get
                'If _MinimumPremiumAdjustment = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_MinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'End If
                'Return _MinimumPremiumAdjustment
                'updated 7/20/2018
                Return VersionAndLobInfo.MinimumPremiumAdjustment
            End Get
            Set(value As String)
                '_MinimumPremiumAdjustment = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_MinimumPremiumAdjustment)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_MinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'updated 7/20/2018
                VersionAndLobInfo.MinimumPremiumAdjustment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10055 (Subject)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TotalEstimatedPlanPremium As String
            Get
                'Return _TotalEstimatedPlanPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_TotalEstimatedPlanPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.TotalEstimatedPlanPremium
            End Get
            Set(value As String)
                '_TotalEstimatedPlanPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TotalEstimatedPlanPremium)
                'updated 7/20/2018
                VersionAndLobInfo.TotalEstimatedPlanPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 20227</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SecondInjuryFundQuotedPremium As String
            Get
                'Return _SecondInjuryFundQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_SecondInjuryFundQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.SecondInjuryFundQuotedPremium
            End Get
            Set(value As String)
                '_SecondInjuryFundQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SecondInjuryFundQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.SecondInjuryFundQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80559</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IL_WCP_CommissionOperationsFundSurcharge As String
            Get
                'Return _SecondInjuryFundQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_SecondInjuryFundQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.IL_WCP_CommissionOperationsFundSurcharge
            End Get
            Set(value As String)
                '_SecondInjuryFundQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SecondInjuryFundQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.IL_WCP_CommissionOperationsFundSurcharge = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_LossConstantPremium As String
            Get
                'Return _Dec_LossConstantPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_LossConstantPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_LossConstantPremium
            End Get
            Set(value As String)
                '_Dec_LossConstantPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_LossConstantPremium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_LossConstantPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_ExpenseConstantPremium As String
            Get
                'Return _Dec_ExpenseConstantPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_ExpenseConstantPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_ExpenseConstantPremium
            End Get
            Set(value As String)
                '_Dec_ExpenseConstantPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_ExpenseConstantPremium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_ExpenseConstantPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_WC_TotalPremiumDue As String
            Get
                'Return _Dec_WC_TotalPremiumDue
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_WC_TotalPremiumDue)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_WC_TotalPremiumDue
            End Get
            Set(value As String)
                '_Dec_WC_TotalPremiumDue = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_WC_TotalPremiumDue)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_WC_TotalPremiumDue = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyUnderwritings As Generic.List(Of QuickQuotePolicyUnderwriting)
            Get
                'SetParentOfListItems(_PolicyUnderwritings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03989}")
                'Return _PolicyUnderwritings
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.PolicyUnderwritings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03989}")
                Return VersionAndLobInfo.PolicyUnderwritings
            End Get
            Set(value As Generic.List(Of QuickQuotePolicyUnderwriting))
                '_PolicyUnderwritings = value
                'SetParentOfListItems(_PolicyUnderwritings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03989}")
                'updated 7/20/2018
                VersionAndLobInfo.PolicyUnderwritings = value
                SetParentOfListItems(VersionAndLobInfo.PolicyUnderwritings, "{663B7C7B-F2AC-4BF6-965A-D30F41A03989}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyUnderwritingCodeAndLevelAndTabIds As Generic.List(Of String)
            Get
                'Return _PolicyUnderwritingCodeAndLevelAndTabIds
                'updated 7/20/2018
                Return VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds
            End Get
            Set(value As Generic.List(Of String))
                '_PolicyUnderwritingCodeAndLevelAndTabIds = value
                'updated 7/20/2018
                VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property QuoteTypeId As String
            Get
                'Return _QuoteTypeId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.QuoteTypeId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteTypeId
            End Get
            Set(value As String)
                '_QuoteTypeId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.QuoteTypeId = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteTypeId = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_Deductible As String
            Get
                'Return _GL_PremisesAndProducts_Deductible
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_Deductible
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_Deductible = value
                'Select Case _GL_PremisesAndProducts_Deductible
                '    Case "N/A"
                '        _GL_PremisesAndProducts_DeductibleId = "0"
                '    Case "250"
                '        _GL_PremisesAndProducts_DeductibleId = "4"
                '    Case "500"
                '        _GL_PremisesAndProducts_DeductibleId = "8"
                '    Case "750"
                '        _GL_PremisesAndProducts_DeductibleId = "27"
                '    Case "1,000"
                '        _GL_PremisesAndProducts_DeductibleId = "9"
                '    Case "2,000"
                '        _GL_PremisesAndProducts_DeductibleId = "28"
                '    Case "3,000"
                '        _GL_PremisesAndProducts_DeductibleId = "29"
                '    Case "4,000"
                '        _GL_PremisesAndProducts_DeductibleId = "30"
                '    Case "5,000"
                '        _GL_PremisesAndProducts_DeductibleId = "16"
                '    Case "10,000"
                '        _GL_PremisesAndProducts_DeductibleId = "17"
                '    Case "15,000"
                '        _GL_PremisesAndProducts_DeductibleId = "31"
                '    Case "20,000"
                '        _GL_PremisesAndProducts_DeductibleId = "18"
                '    Case "25,000"
                '        _GL_PremisesAndProducts_DeductibleId = "19"
                '    Case "50,000"
                '        _GL_PremisesAndProducts_DeductibleId = "20"
                '    Case "75,000"
                '        _GL_PremisesAndProducts_DeductibleId = "21"
                '    Case Else
                '        _GL_PremisesAndProducts_DeductibleId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_Deductible = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_DeductibleId As String
            Get
                'Return _GL_PremisesAndProducts_DeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_DeductibleId
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_DeductibleId = value
                '_GL_PremisesAndProducts_Deductible = ""
                'If IsNumeric(_GL_PremisesAndProducts_DeductibleId) = True Then
                '    Select Case _GL_PremisesAndProducts_DeductibleId
                '        Case "0"
                '            _GL_PremisesAndProducts_Deductible = "N/A"
                '        Case "4"
                '            _GL_PremisesAndProducts_Deductible = "250"
                '        Case "8"
                '            _GL_PremisesAndProducts_Deductible = "500"
                '        Case "27"
                '            _GL_PremisesAndProducts_Deductible = "750"
                '        Case "9"
                '            _GL_PremisesAndProducts_Deductible = "1,000"
                '        Case "28"
                '            _GL_PremisesAndProducts_Deductible = "2,000"
                '        Case "29"
                '            _GL_PremisesAndProducts_Deductible = "3,000"
                '        Case "30"
                '            _GL_PremisesAndProducts_Deductible = "4,000"
                '        Case "16"
                '            _GL_PremisesAndProducts_Deductible = "5,000"
                '        Case "17"
                '            _GL_PremisesAndProducts_Deductible = "10,000"
                '        Case "31"
                '            _GL_PremisesAndProducts_Deductible = "15,000"
                '        Case "18"
                '            _GL_PremisesAndProducts_Deductible = "20,000"
                '        Case "19"
                '            _GL_PremisesAndProducts_Deductible = "25,000"
                '        Case "20"
                '            _GL_PremisesAndProducts_Deductible = "50,000"
                '        Case "21"
                '            _GL_PremisesAndProducts_Deductible = "75,000"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_DeductibleId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_Description As String
            Get
                'Return _GL_PremisesAndProducts_Description
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_Description
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_Description = value
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_Description = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_DeductibleCategoryType As String
            Get
                'Return _GL_PremisesAndProducts_DeductibleCategoryType
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_DeductibleCategoryType
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_DeductibleCategoryType = value
                'Select Case _GL_PremisesAndProducts_DeductibleCategoryType
                '    Case "N/A"
                '        _GL_PremisesAndProducts_DeductibleCategoryTypeId = "0"
                '    Case "Bodily Injury"
                '        _GL_PremisesAndProducts_DeductibleCategoryTypeId = "5"
                '    Case "Property Damage"
                '        _GL_PremisesAndProducts_DeductibleCategoryTypeId = "6"
                '    Case "Bodily Injury & Property Damage"
                '        _GL_PremisesAndProducts_DeductibleCategoryTypeId = "7"
                '    Case Else
                '        _GL_PremisesAndProducts_DeductibleCategoryTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_DeductibleCategoryType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_DeductibleCategoryTypeId As String
            Get
                'Return _GL_PremisesAndProducts_DeductibleCategoryTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_DeductibleCategoryTypeId
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_DeductibleCategoryTypeId = value
                '_GL_PremisesAndProducts_DeductibleCategoryType = ""
                'If IsNumeric(_GL_PremisesAndProducts_DeductibleCategoryTypeId) = True Then
                '    Select Case _GL_PremisesAndProducts_DeductibleCategoryTypeId
                '        Case "0"
                '            _GL_PremisesAndProducts_DeductibleCategoryType = "N/A"
                '        Case "5"
                '            _GL_PremisesAndProducts_DeductibleCategoryType = "Bodily Injury"
                '        Case "6"
                '            _GL_PremisesAndProducts_DeductibleCategoryType = "Property Damage"
                '        Case "7"
                '            _GL_PremisesAndProducts_DeductibleCategoryType = "Bodily Injury & Property Damage"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_DeductibleCategoryTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_DeductiblePerType As String
            Get
                'Return _GL_PremisesAndProducts_DeductiblePerType
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_DeductiblePerType
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_DeductiblePerType = value
                'Select Case _GL_PremisesAndProducts_DeductiblePerType
                '    Case "N/A"
                '        _GL_PremisesAndProducts_DeductiblePerTypeId = "0"
                '    Case "Per Occurrence"
                '        _GL_PremisesAndProducts_DeductiblePerTypeId = "1"
                '    Case "Per Claim"
                '        _GL_PremisesAndProducts_DeductiblePerTypeId = "2"
                '    Case Else
                '        _GL_PremisesAndProducts_DeductiblePerTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_DeductiblePerType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesAndProducts_DeductiblePerTypeId As String
            Get
                'Return _GL_PremisesAndProducts_DeductiblePerTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesAndProducts_DeductiblePerTypeId
            End Get
            Set(value As String)
                '_GL_PremisesAndProducts_DeductiblePerTypeId = value
                ''(0-N/A; 1=Per Occurrence; 2=Per Claim)
                '_GL_PremisesAndProducts_DeductiblePerType = ""
                'If IsNumeric(_GL_PremisesAndProducts_DeductiblePerTypeId) = True Then
                '    Select Case _GL_PremisesAndProducts_DeductiblePerTypeId
                '        Case "0"
                '            _GL_PremisesAndProducts_DeductiblePerType = "N/A"
                '        Case "1"
                '            _GL_PremisesAndProducts_DeductiblePerType = "Per Occurrence"
                '        Case "2"
                '            _GL_PremisesAndProducts_DeductiblePerType = "Per Claim"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesAndProducts_DeductiblePerTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21153 (Premises) and 21154 (Products)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Has_GL_PremisesAndProducts As Boolean
            Get
                'Return _Has_GL_PremisesAndProducts
                'updated 7/20/2018
                Return VersionAndLobInfo.Has_GL_PremisesAndProducts
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.Has_GL_PremisesAndProducts
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.Has_GL_PremisesAndProducts = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_Has_GL_PremisesAndProducts = value
                'updated 7/20/2018
                VersionAndLobInfo.Has_GL_PremisesAndProducts = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond GLClassifications and coverages w/ coveragecode_id 80150; combines policy level w/ all locations</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesTotalQuotedPremium As String
            Get
                'Return _GL_PremisesTotalQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_GL_PremisesTotalQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesTotalQuotedPremium
            End Get
            Set(value As String)
                '_GL_PremisesTotalQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesTotalQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesTotalQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond GLClassifications and coverages w/ coveragecode_id 80152; combines policy level w/ all locations</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_ProductsTotalQuotedPremium As String
            Get
                'Return _GL_ProductsTotalQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_GL_ProductsTotalQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_ProductsTotalQuotedPremium
            End Get
            Set(value As String)
                '_GL_ProductsTotalQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsTotalQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.GL_ProductsTotalQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond GLClassifications and coverages w/ coveragecode_id 80150</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesPolicyLevelQuotedPremium As String
            Get
                'Return _GL_PremisesPolicyLevelQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_GL_PremisesPolicyLevelQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesPolicyLevelQuotedPremium
            End Get
            Set(value As String)
                '_GL_PremisesPolicyLevelQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesPolicyLevelQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesPolicyLevelQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond GLClassifications and coverages w/ coveragecode_id 80152</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_ProductsPolicyLevelQuotedPremium As String
            Get
                'Return _GL_ProductsPolicyLevelQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_GL_ProductsPolicyLevelQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_ProductsPolicyLevelQuotedPremium
            End Get
            Set(value As String)
                '_GL_ProductsPolicyLevelQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsPolicyLevelQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.GL_ProductsPolicyLevelQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80245 (Commercial GL Subline 334 - Policy [premises]); value for CoverageAdditionalInfoRecord w/ description of 'Minimum Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesMinimumQuotedPremium As String
            Get
                'If _GL_PremisesMinimumQuotedPremium = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'End If
                'Return _GL_PremisesMinimumQuotedPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesMinimumQuotedPremium
            End Get
            Set(value As String)
                '_GL_PremisesMinimumQuotedPremium = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumQuotedPremium)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesMinimumQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80245 (Commercial GL Subline 334 - Policy [premises]); value for CoverageAdditionalInfoRecord w/ description of 'Minimum Premium Adjustment'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_PremisesMinimumPremiumAdjustment As String
            Get
                'If _GL_PremisesMinimumPremiumAdjustment = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'End If
                'Return _GL_PremisesMinimumPremiumAdjustment
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_PremisesMinimumPremiumAdjustment
            End Get
            Set(value As String)
                '_GL_PremisesMinimumPremiumAdjustment = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumPremiumAdjustment)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_PremisesMinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'updated 7/20/2018
                VersionAndLobInfo.GL_PremisesMinimumPremiumAdjustment = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80247 (Commercial GL Subline 336 - Policy [products]); value for CoverageAdditionalInfoRecord w/ description of 'Minimum Premium'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_ProductsMinimumQuotedPremium As String
            Get
                'If _GL_ProductsMinimumQuotedPremium = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'End If
                'Return _GL_ProductsMinimumQuotedPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_ProductsMinimumQuotedPremium
            End Get
            Set(value As String)
                '_GL_ProductsMinimumQuotedPremium = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumQuotedPremium)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumQuotedPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'updated 7/20/2018
                VersionAndLobInfo.GL_ProductsMinimumQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80247 (Commercial GL Subline 336 - Policy [products]); value for CoverageAdditionalInfoRecord w/ description of 'Minimum Premium Adjustment'</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GL_ProductsMinimumPremiumAdjustment As String
            Get
                'If _GL_ProductsMinimumPremiumAdjustment = "" Then 'added 1/30/2013 in case property was never set (nothing in xml)
                '    qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'End If
                'Return _GL_ProductsMinimumPremiumAdjustment
                'updated 7/20/2018
                Return VersionAndLobInfo.GL_ProductsMinimumPremiumAdjustment
            End Get
            Set(value As String)
                '_GL_ProductsMinimumPremiumAdjustment = value
                ''qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumPremiumAdjustment)
                ''added optional param 1/29/2013
                'qqHelper.ConvertToQuotedPremiumFormat(_GL_ProductsMinimumPremiumAdjustment, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.Zero)
                'updated 7/20/2018
                VersionAndLobInfo.GL_ProductsMinimumPremiumAdjustment = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_GL_OptCovs_Premium As String
            Get
                'Return _Dec_GL_OptCovs_Premium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_GL_OptCovs_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_GL_OptCovs_Premium
            End Get
            Set(value As String)
                '_Dec_GL_OptCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_GL_OptCovs_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_GL_OptCovs_Premium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Drivers As Generic.List(Of QuickQuoteDriver)
            Get
                'SetParentOfListItems(_Drivers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03990}")
                'Return _Drivers
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Drivers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03990}")
                Return VersionAndLobInfo.Drivers
            End Get
            Set(value As Generic.List(Of QuickQuoteDriver))
                '_Drivers = value
                'SetParentOfListItems(_Drivers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03990}")
                'updated 7/20/2018
                VersionAndLobInfo.Drivers = value
                SetParentOfListItems(VersionAndLobInfo.Drivers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03990}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Vehicles As Generic.List(Of QuickQuoteVehicle)
            Get
                'SetParentOfListItems(_Vehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A03991}")
                'Return _Vehicles
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Vehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A03991}")
                Return VersionAndLobInfo.Vehicles
            End Get
            Set(value As Generic.List(Of QuickQuoteVehicle))
                '_Vehicles = value
                'SetParentOfListItems(_Vehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A03991}")
                'updated 7/20/2018
                VersionAndLobInfo.Vehicles = value
                SetParentOfListItems(VersionAndLobInfo.Vehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A03991}")
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Family Cyber Protection Diamond coverage w/ coveragecode_id 80572 (HOM)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFamilyCyberProtection As Boolean
            Get
                'missing from sprint 2.4 checkin
                Return VersionAndLobInfo.HasFamilyCyberProtection
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasFamilyCyberProtection = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Family Cyber Protection Diamond coverage w/ coveragecode_id 80572 (HOM)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FamilyCyberProtectionQuotedPremium As String
            Get
                'missing from sprint 2.4 checkin
                Return VersionAndLobInfo.FamilyCyberProtectionQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.FamilyCyberProtectionQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10125 (CAP)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmPollutionLiability As Boolean
            Get
                'Return _HasFarmPollutionLiability
                'updated 7/20/2018
                Return VersionAndLobInfo.HasFarmPollutionLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmPollutionLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmPollutionLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmPollutionLiability = value
                'updated 7/20/2018
                VersionAndLobInfo.HasFarmPollutionLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10125 (CAP)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmPollutionLiabilityQuotedPremium As String
            Get
                'Return _FarmPollutionLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_FarmPollutionLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.FarmPollutionLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_FarmPollutionLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmPollutionLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.FarmPollutionLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 10066, 10062, 10063, 10064, or 10065</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasHiredBorrowedNonOwned As Boolean
            Get
                'Return _HasHiredBorrowedNonOwned
                'updated 7/20/2018
                Return VersionAndLobInfo.HasHiredBorrowedNonOwned
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasHiredBorrowedNonOwned
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasHiredBorrowedNonOwned = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasHiredBorrowedNonOwned = value
                'updated 7/20/2018
                VersionAndLobInfo.HasHiredBorrowedNonOwned = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10066</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasNonOwnershipLiability As Boolean
            Get
                'Return _HasNonOwnershipLiability
                'updated 7/20/2018
                Return VersionAndLobInfo.HasNonOwnershipLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasNonOwnershipLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasNonOwnershipLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasNonOwnershipLiability = value
                'updated 7/20/2018
                VersionAndLobInfo.HasNonOwnershipLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10066</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnershipLiabilityNumberOfEmployees As String
            Get
                'Return _NonOwnershipLiabilityNumberOfEmployees
                'updated 7/20/2018
                Return VersionAndLobInfo.NonOwnershipLiabilityNumberOfEmployees
            End Get
            Set(value As String)
                '_NonOwnershipLiabilityNumberOfEmployees = value
                'updated 7/20/2018
                VersionAndLobInfo.NonOwnershipLiabilityNumberOfEmployees = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10066</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnership_ENO_RatingTypeId As String
            Get
                'Return _NonOwnership_ENO_RatingTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.NonOwnership_ENO_RatingTypeId
            End Get
            Set(value As String)
                '_NonOwnership_ENO_RatingTypeId = value
                '_NonOwnership_ENO_RatingType = ""
                'If IsNumeric(_NonOwnership_ENO_RatingTypeId) = True Then
                '    Select Case _NonOwnership_ENO_RatingTypeId
                '        Case "0"
                '            _NonOwnership_ENO_RatingType = "N/A"
                '        Case "1"
                '            _NonOwnership_ENO_RatingType = "Employees Only"
                '        Case "2"
                '            _NonOwnership_ENO_RatingType = "Volunteers Only"
                '        Case "3"
                '            _NonOwnership_ENO_RatingType = "Employees and Volunteers"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.NonOwnership_ENO_RatingTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10066</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnership_ENO_RatingType As String
            Get
                'Return _NonOwnership_ENO_RatingType
                'updated 7/20/2018
                Return VersionAndLobInfo.NonOwnership_ENO_RatingType
            End Get
            Set(value As String)
                '_NonOwnership_ENO_RatingType = value
                'Select Case _NonOwnership_ENO_RatingType
                '    Case "N/A"
                '        _NonOwnership_ENO_RatingTypeId = "0"
                '    Case "Employees Only"
                '        _NonOwnership_ENO_RatingTypeId = "1"
                '    Case "Volunteers Only"
                '        _NonOwnership_ENO_RatingTypeId = "2"
                '    Case "Employees and Volunteers"
                '        _NonOwnership_ENO_RatingTypeId = "3"
                '    Case Else
                '        _NonOwnership_ENO_RatingTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.NonOwnership_ENO_RatingType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10066</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnershipLiabilityQuotedPremium As String
            Get
                'Return _NonOwnershipLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_NonOwnershipLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.NonOwnershipLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_NonOwnershipLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_NonOwnershipLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.NonOwnershipLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10062; CoverageTypeId = 2 (Excess)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasHiredBorrowedLiability As Boolean
            Get
                'Return _HasHiredBorrowedLiability
                'updated 7/20/2018
                Return VersionAndLobInfo.HasHiredBorrowedLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasHiredBorrowedLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasHiredBorrowedLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasHiredBorrowedLiability = value
                'updated 7/20/2018
                VersionAndLobInfo.HasHiredBorrowedLiability = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10062</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HiredBorrowedLiabilityQuotedPremium As String
            Get
                'Return _HiredBorrowedLiabilityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_HiredBorrowedLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.HiredBorrowedLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_HiredBorrowedLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_HiredBorrowedLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.HiredBorrowedLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10062 (would also use 10065 if present in response xml); IfAnyBasis</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasHiredCarPhysicalDamage As Boolean
            Get
                'Return _HasHiredCarPhysicalDamage
                'updated 7/20/2018
                Return VersionAndLobInfo.HasHiredCarPhysicalDamage
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasHiredCarPhysicalDamage
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasHiredCarPhysicalDamage = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasHiredCarPhysicalDamage = value
                'updated 7/20/2018
                VersionAndLobInfo.HasHiredCarPhysicalDamage = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10065</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HiredBorrowedLossOfUseQuotedPremium As String
            Get
                'Return _HiredBorrowedLossOfUseQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_HiredBorrowedLossOfUseQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.HiredBorrowedLossOfUseQuotedPremium
            End Get
            Set(value As String)
                '_HiredBorrowedLossOfUseQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_HiredBorrowedLossOfUseQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.HiredBorrowedLossOfUseQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10063; OtherThanCollisionTypeId = 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComprehensiveDeductible As String
            Get
                'Return _ComprehensiveDeductible
                'updated 7/20/2018
                Return VersionAndLobInfo.ComprehensiveDeductible
            End Get
            Set(value As String)
                '_ComprehensiveDeductible = value
                'Select Case _ComprehensiveDeductible
                '    Case "N/A"
                '        _ComprehensiveDeductibleId = "0"
                '    Case "Full"
                '        _ComprehensiveDeductibleId = "10"
                '    Case "50"
                '        _ComprehensiveDeductibleId = "1"
                '    Case "100"
                '        _ComprehensiveDeductibleId = "2"
                '    Case Else
                '        _ComprehensiveDeductibleId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.ComprehensiveDeductible = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10063; OtherThanCollisionTypeId = 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComprehensiveDeductibleId As String
            Get
                'Return _ComprehensiveDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.ComprehensiveDeductibleId
            End Get
            Set(value As String)
                '_ComprehensiveDeductibleId = value
                '_ComprehensiveDeductible = ""
                'If IsNumeric(_ComprehensiveDeductibleId) = True Then
                '    Select Case _ComprehensiveDeductibleId
                '        Case "0"
                '            _ComprehensiveDeductible = "N/A"
                '        Case "10"
                '            _ComprehensiveDeductible = "Full"
                '        Case "1"
                '            _ComprehensiveDeductible = "50"
                '        Case "2"
                '            _ComprehensiveDeductible = "100"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.ComprehensiveDeductibleId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10063; OtherThanCollisionTypeId = 3</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComprehensiveQuotedPremium As String
            Get
                'Return _ComprehensiveQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_ComprehensiveQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ComprehensiveQuotedPremium
            End Get
            Set(value As String)
                '_ComprehensiveQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ComprehensiveQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ComprehensiveQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10064</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CollisionDeductible As String
            Get
                'Return _CollisionDeductible
                'updated 7/20/2018
                Return VersionAndLobInfo.CollisionDeductible
            End Get
            Set(value As String)
                '_CollisionDeductible = value
                'Select Case _CollisionDeductible
                '    Case "N/A"
                '        _CollisionDeductibleId = "0"
                '    Case "100"
                '        _CollisionDeductibleId = "2"
                '    Case "250"
                '        _CollisionDeductibleId = "4"
                '    Case "500"
                '        _CollisionDeductibleId = "8"
                '    Case "1,000"
                '        _CollisionDeductibleId = "9"
                '    Case Else
                '        _CollisionDeductibleId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.CollisionDeductible = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10064</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CollisionDeductibleId As String
            Get
                'Return _CollisionDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.CollisionDeductibleId
            End Get
            Set(value As String)
                '_CollisionDeductibleId = value
                '_CollisionDeductible = ""
                'If IsNumeric(_CollisionDeductibleId) = True Then
                '    Select Case _CollisionDeductibleId
                '        Case "0"
                '            _CollisionDeductible = "N/A"
                '        Case "2"
                '            _CollisionDeductible = "100"
                '        Case "4"
                '            _CollisionDeductible = "250"
                '        Case "8"
                '            _CollisionDeductible = "500"
                '        Case "9"
                '            _CollisionDeductible = "1,000"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.CollisionDeductibleId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 10064</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CollisionQuotedPremium As String
            Get
                'Return _CollisionQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_CollisionQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CollisionQuotedPremium
            End Get
            Set(value As String)
                '_CollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CollisionQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CollisionQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21552</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_Limit As String '5/10/2017 note: added static data values to DiamondStaticData.xml (specific to CAP/GAR)
            Get
                'Return _Liability_UM_UIM_Limit
                'updated 7/20/2018
                Return VersionAndLobInfo.Liability_UM_UIM_Limit
            End Get
            Set(value As String)
                '_Liability_UM_UIM_Limit = value
                'Select Case _Liability_UM_UIM_Limit
                '    Case "N/A"
                '        _Liability_UM_UIM_LimitId = "0"
                '    Case "60,000"
                '        _Liability_UM_UIM_LimitId = "324"
                '    Case "100,000"
                '        _Liability_UM_UIM_LimitId = "10"
                '    Case "250,000"
                '        _Liability_UM_UIM_LimitId = "55"
                '    Case "300,000"
                '        _Liability_UM_UIM_LimitId = "33"
                '    Case "350,000"
                '        _Liability_UM_UIM_LimitId = "176"
                '    Case "500,000"
                '        _Liability_UM_UIM_LimitId = "34"
                '    Case "750,000"
                '        _Liability_UM_UIM_LimitId = "180"
                '    Case "1,000,000"
                '        _Liability_UM_UIM_LimitId = "56"
                '    Case Else
                '        _Liability_UM_UIM_LimitId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.Liability_UM_UIM_Limit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21552</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_LimitId As String '5/10/2017 note: added static data values to DiamondStaticData.xml (specific to CAP/GAR)
            Get
                'Return _Liability_UM_UIM_LimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.Liability_UM_UIM_LimitId
            End Get
            Set(value As String)
                '_Liability_UM_UIM_LimitId = value
                '_Liability_UM_UIM_Limit = ""
                'If IsNumeric(_Liability_UM_UIM_LimitId) = True Then
                '    Select Case _Liability_UM_UIM_LimitId
                '        Case "0"
                '            _Liability_UM_UIM_Limit = "N/A"
                '        Case "324"
                '            _Liability_UM_UIM_Limit = "60,000"
                '        Case "10"
                '            _Liability_UM_UIM_Limit = "100,000"
                '        Case "55"
                '            _Liability_UM_UIM_Limit = "250,000"
                '        Case "33"
                '            _Liability_UM_UIM_Limit = "300,000"
                '        Case "176"
                '            _Liability_UM_UIM_Limit = "350,000"
                '        Case "34"
                '            _Liability_UM_UIM_Limit = "500,000"
                '        Case "180"
                '            _Liability_UM_UIM_Limit = "750,000"
                '        Case "56"
                '            _Liability_UM_UIM_Limit = "1,000,000"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.Liability_UM_UIM_LimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21552</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_QuotedPremium As String
            Get
                'Return _Liability_UM_UIM_QuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_Liability_UM_UIM_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Liability_UM_UIM_QuotedPremium
            End Get
            Set(value As String)
                '_Liability_UM_UIM_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Liability_UM_UIM_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.Liability_UM_UIM_QuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21540 (CAP) or 70072 (HOM and DFR)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalPaymentsLimit As String '8/11/2014 note: need to update to use static data list... w/ param for lobType; '4/29/2015 note: FAR may now use the MedicalPaymentsLimitId property (unless we decide to create a new prop)... will need to update logic for FAR values and/or update logic to use the static data file; 5/11/2017 note: still need to update to use static data and send LOB
            Get
                'Return _MedicalPaymentsLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.MedicalPaymentsLimit
            End Get
            Set(value As String)
                '_MedicalPaymentsLimit = value
                'Select Case _MedicalPaymentsLimit
                '    Case "N/A"
                '        _MedicalPaymentsLimitId = "0"
                '    Case "1,000"
                '        _MedicalPaymentsLimitId = "11"
                '    Case "2,000"
                '        _MedicalPaymentsLimitId = "12"
                '    Case "5,000"
                '        _MedicalPaymentsLimitId = "15"
                '        'updated 7/30/2013 for HOM
                '    Case "500" '5/11/2017 note: also good for DFR
                '        _MedicalPaymentsLimitId = "166"
                '    Case "1,000" '5/11/2017 note: also good for DFR, FAR
                '        _MedicalPaymentsLimitId = "170"
                '        'updated 5/11/2017 for GAR
                '    Case "500"
                '        _MedicalPaymentsLimitId = "113"
                '    Case "750"
                '        _MedicalPaymentsLimitId = "325"
                '    Case "2,000"
                '        _MedicalPaymentsLimitId = "326"
                '        '5/11/2017 - updates for HOM, DFR, FAR
                '    Case "2,000" 'HOM, DFR, FAR
                '        _MedicalPaymentsLimitId = "171"
                '    Case "3,000" 'HOM, DFR, FAR
                '        _MedicalPaymentsLimitId = "13"
                '    Case "4,000" 'HOM, DFR, FAR
                '        _MedicalPaymentsLimitId = "14"
                '    Case "5,000" 'HOM, DFR, FAR
                '        _MedicalPaymentsLimitId = "173"
                '        '5/11/2017 note: options for FAR that aren't currently shown: 6,000 = 307; 7,000 = 308; 8,000 = 309; 9,000 = 310
                '    Case "10,000" 'FAR
                '        _MedicalPaymentsLimit = "289"
                '        '5/11/2017 note: options for FAR that aren't currently shown: 11,000 = 290; 12,000 = 291; 13,000 = 292; 14,000 = 293; 15,000 = 294; 16,000 = 295; 17,000 = 296; 18,000 = 297; 19,000 = 298; 20,000 = 299; 21,000 = 300; 22,000 = 301; 23,000 = 302; 24,000 = 303; 25,000 = 304
                '    Case Else
                '        _MedicalPaymentsLimitId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.MedicalPaymentsLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21540 (CAP) or 70072 (HOM and DFR)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalPaymentsLimitid As String '8/11/2014 note: need to update to use static data list... w/ param for lobType; 4/29/2015 note: FAR may now use the MedicalPaymentsLimitId property (unless we decide to create a new prop)... will need to update logic for FAR values and/or update logic to use the static data file; 5/11/2017 note: still need to update to use static data and send LOB
            Get
                'Return _MedicalPaymentsLimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.MedicalPaymentsLimitid
            End Get
            Set(value As String)
                '_MedicalPaymentsLimitId = value
                '_MedicalPaymentsLimit = ""
                'If IsNumeric(_MedicalPaymentsLimitId) = True Then
                '    Select Case _MedicalPaymentsLimitId
                '        Case "0"
                '            _MedicalPaymentsLimit = "N/A"
                '        Case "11"
                '            _MedicalPaymentsLimit = "1,000"
                '        Case "12"
                '            _MedicalPaymentsLimit = "2,000"
                '        Case "15"
                '            _MedicalPaymentsLimit = "5,000"
                '            'updated 7/30/2013 for HOM
                '        Case "166" '5/11/2017 note: also good for DFR
                '            _MedicalPaymentsLimit = "500"
                '        Case "170" '5/11/2017 note: also good for DFR, FAR
                '            _MedicalPaymentsLimit = "1,000"
                '            'updated 5/11/2017 for GAR
                '        Case "113"
                '            _MedicalPaymentsLimit = "500"
                '        Case "325"
                '            _MedicalPaymentsLimit = "750"
                '        Case "326"
                '            _MedicalPaymentsLimit = "2,000"
                '            '5/11/2017 - updates for HOM, DFR, FAR
                '        Case "171" 'HOM, DFR, FAR
                '            _MedicalPaymentsLimit = "2,000"
                '        Case "13" 'HOM, DFR, FAR
                '            _MedicalPaymentsLimit = "3,000"
                '        Case "14" 'HOM, DFR, FAR
                '            _MedicalPaymentsLimit = "4,000"
                '        Case "173" 'HOM, DFR, FAR
                '            _MedicalPaymentsLimit = "5,000"
                '            '5/11/2017 note: options for FAR that aren't currently shown: 6,000 = 307; 7,000 = 308; 8,000 = 309; 9,000 = 310
                '        Case "289" 'FAR
                '            _MedicalPaymentsLimit = "10,000"
                '            '5/11/2017 note: options for FAR that aren't currently shown: 11,000 = 290; 12,000 = 291; 13,000 = 292; 14,000 = 293; 15,000 = 294; 16,000 = 295; 17,000 = 296; 18,000 = 297; 19,000 = 298; 20,000 = 299; 21,000 = 300; 22,000 = 301; 23,000 = 302; 24,000 = 303; 25,000 = 304
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.MedicalPaymentsLimitid = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21540 (CAP) or 70072 (HOM and DFR)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalPaymentsQuotedPremium As String
            Get
                'Return _MedicalPaymentsQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_MedicalPaymentsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.MedicalPaymentsQuotedPremium
            End Get
            Set(value As String)
                '_MedicalPaymentsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MedicalPaymentsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.MedicalPaymentsQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to modifier w/ Diamond ModifierTypeId 61 (Quote) or 62 (Issue/Bound)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property QuoteOrIssueBound As QuickQuoteQuoteOrIssueBound
            Get
                'Return _QuoteOrIssueBound
                'updated 7/20/2018
                Return VersionAndLobInfo.QuoteOrIssueBound
            End Get
            Set(value As QuickQuoteQuoteOrIssueBound)
                '_QuoteOrIssueBound = value
                'updated 7/20/2018
                VersionAndLobInfo.QuoteOrIssueBound = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to modifier w/ Diamond ModifierTypeId 63 (Issue/Bound EffDate; goes w/ ModifierTypeId 62 - Issue/Bound)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IssueBoundEffectiveDate As String
            Get
                'Return _IssueBoundEffectiveDate
                'updated 7/20/2018
                Return VersionAndLobInfo.IssueBoundEffectiveDate
            End Get
            Set(value As String)
                '_IssueBoundEffectiveDate = value
                'qqHelper.ConvertToShortDate(_IssueBoundEffectiveDate)
                'updated 7/20/2018
                VersionAndLobInfo.IssueBoundEffectiveDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Modifiers As Generic.List(Of QuickQuoteModifier)
            Get
                'SetParentOfListItems(_Modifiers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03992}")
                'Return _Modifiers
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Modifiers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03992}")
                Return VersionAndLobInfo.Modifiers
            End Get
            Set(value As Generic.List(Of QuickQuoteModifier))
                '_Modifiers = value
                'SetParentOfListItems(_Modifiers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03992}")
                'updated 7/20/2018
                VersionAndLobInfo.Modifiers = value
                SetParentOfListItems(VersionAndLobInfo.Modifiers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03992}")
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasLocation As Boolean
            Get
                'Return _HasLocation
                'updated 7/20/2018
                'Return VersionAndLobInfo.HasLocation
                'updated 9/14/2018
                Dim hasIt As Boolean = VersionAndLobInfo.HasLocation
                If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.HasLocation = True Then
                            hasIt = True
                            Exit For
                        End If
                    Next
                End If
                Return hasIt
            End Get
            Set(value As Boolean)
                '_HasLocation = value
                'updated 7/20/2018
                VersionAndLobInfo.HasLocation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasLocationWithBuilding As Boolean
            Get
                'Return _HasLocationWithBuilding
                'updated 7/20/2018
                'Return VersionAndLobInfo.HasLocationWithBuilding
                'updated 9/14/2018
                Dim hasIt As Boolean = VersionAndLobInfo.HasLocationWithBuilding
                If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.HasLocationWithBuilding = True Then
                            hasIt = True
                            Exit For
                        End If
                    Next
                End If
                Return hasIt
            End Get
            Set(value As Boolean)
                '_HasLocationWithBuilding = value
                'updated 7/20/2018
                VersionAndLobInfo.HasLocationWithBuilding = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasLocationWithClassification As Boolean
            Get
                'Return _HasLocationWithClassification
                'updated 7/20/2018
                'Return VersionAndLobInfo.HasLocationWithClassification
                'updated 9/14/2018
                Dim hasIt As Boolean = VersionAndLobInfo.HasLocationWithClassification
                If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.HasLocationWithClassification = True Then
                            hasIt = True
                            Exit For
                        End If
                    Next
                End If
                Return hasIt
            End Get
            Set(value As Boolean)
                '_HasLocationWithClassification = value
                'updated 7/20/2018
                VersionAndLobInfo.HasLocationWithClassification = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoSymbols As Generic.List(Of QuickQuoteAutoSymbol)
            Get
                'SetParentOfListItems(_AutoSymbols, "{663B7C7B-F2AC-4BF6-965A-D30F41A03993}")
                'Return _AutoSymbols
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.AutoSymbols, "{663B7C7B-F2AC-4BF6-965A-D30F41A03993}")
                Return VersionAndLobInfo.AutoSymbols
            End Get
            Set(value As Generic.List(Of QuickQuoteAutoSymbol))
                '_AutoSymbols = value
                'SetParentOfListItems(_AutoSymbols, "{663B7C7B-F2AC-4BF6-965A-D30F41A03993}")
                'updated 7/20/2018
                VersionAndLobInfo.AutoSymbols = value
                SetParentOfListItems(VersionAndLobInfo.AutoSymbols, "{663B7C7B-F2AC-4BF6-965A-D30F41A03993}")
            End Set
        End Property
        'Public Property LiabilityAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _LiabilityAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _LiabilityAutoSymbols = value
        '    End Set
        'End Property
        'Public Property MedicalPaymentsAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _MedicalPaymentsAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _MedicalPaymentsAutoSymbols = value
        '    End Set
        'End Property
        'Public Property UninsuredMotoristAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _UninsuredMotoristAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _UninsuredMotoristAutoSymbols = value
        '    End Set
        'End Property
        'Public Property UnderinsuredMotoristAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _UnderinsuredMotoristAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _UnderinsuredMotoristAutoSymbols = value
        '    End Set
        'End Property
        'Public Property ComprehensiveCoverageAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _ComprehensiveCoverageAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _ComprehensiveCoverageAutoSymbols = value
        '    End Set
        'End Property
        'Public Property CollisionCoverageAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _CollisionCoverageAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _CollisionCoverageAutoSymbols = value
        '    End Set
        'End Property
        'Public Property NonOwnershipAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _NonOwnershipAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _NonOwnershipAutoSymbols = value
        '    End Set
        'End Property
        'Public Property HiredBorrowedAutoSymbols As Generic.List(Of Integer)
        '    Get
        '        Return _HiredBorrowedAutoSymbols
        '    End Get
        '    Set(value As Generic.List(Of Integer))
        '        _HiredBorrowedAutoSymbols = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiabilityAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_LiabilityAutoSymbolObject)
                'Return _LiabilityAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.LiabilityAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_LiabilityAutoSymbolObject = value
                ''SetObjectsParent(_LiabilityAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.LiabilityAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalPaymentsAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_MedicalExpensesLimit)
                'Return _MedicalPaymentsAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.MedicalPaymentsAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_MedicalPaymentsAutoSymbolObject = value
                ''SetObjectsParent(_MedicalExpensesLimit)
                'updated 7/20/2018
                VersionAndLobInfo.MedicalPaymentsAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_UninsuredMotoristAutoSymbolObject)
                'Return _UninsuredMotoristAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.UninsuredMotoristAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_UninsuredMotoristAutoSymbolObject = value
                ''SetObjectsParent(_UninsuredMotoristAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.UninsuredMotoristAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnderinsuredMotoristAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_UnderinsuredMotoristAutoSymbolObject)
                'Return _UnderinsuredMotoristAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.UnderinsuredMotoristAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_UnderinsuredMotoristAutoSymbolObject = value
                ''SetObjectsParent(_UnderinsuredMotoristAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.UnderinsuredMotoristAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComprehensiveCoverageAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_ComprehensiveCoverageAutoSymbolObject)
                'Return _ComprehensiveCoverageAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.ComprehensiveCoverageAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_ComprehensiveCoverageAutoSymbolObject = value
                ''SetObjectsParent(_ComprehensiveCoverageAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.ComprehensiveCoverageAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CollisionCoverageAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_CollisionCoverageAutoSymbolObject)
                'Return _CollisionCoverageAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.CollisionCoverageAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_CollisionCoverageAutoSymbolObject = value
                ''SetObjectsParent(_CollisionCoverageAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.CollisionCoverageAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NonOwnershipAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_NonOwnershipAutoSymbolObject)
                'Return _NonOwnershipAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.NonOwnershipAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_NonOwnershipAutoSymbolObject = value
                ''SetObjectsParent(_NonOwnershipAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.NonOwnershipAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HiredBorrowedAutoSymbolObject As QuickQuoteDeveloperAutoSymbol
            Get
                'SetObjectsParent(_HiredBorrowedAutoSymbolObject)
                'Return _HiredBorrowedAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.HiredBorrowedAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_HiredBorrowedAutoSymbolObject = value
                ''SetObjectsParent(_HiredBorrowedAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.HiredBorrowedAutoSymbolObject = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TowingAndLaborAutoSymbolObject As QuickQuoteDeveloperAutoSymbol 'added 4/16/2013 for CAP
            Get
                'SetObjectsParent(_TowingAndLaborAutoSymbolObject)
                'Return _TowingAndLaborAutoSymbolObject
                'updated 7/20/2018
                Return VersionAndLobInfo.TowingAndLaborAutoSymbolObject
            End Get
            Set(value As QuickQuoteDeveloperAutoSymbol)
                '_TowingAndLaborAutoSymbolObject = value
                ''SetObjectsParent(_TowingAndLaborAutoSymbolObject)
                'updated 7/20/2018
                VersionAndLobInfo.TowingAndLaborAutoSymbolObject = value
            End Set
        End Property
        ''' <summary>
        ''' flag used to determine if developer auto symbols should be used instead of QuickQuoteAutoSymbols
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>always set to True when saveType is Quote instead of AppGap</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UseDeveloperAutoSymbols As Boolean
            Get
                'Return _UseDeveloperAutoSymbols
                'updated 7/20/2018
                Return VersionAndLobInfo.UseDeveloperAutoSymbols
            End Get
            Set(value As Boolean)
                '_UseDeveloperAutoSymbols = value
                'updated 7/20/2018
                VersionAndLobInfo.UseDeveloperAutoSymbols = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyTypeId As String 'only coded for CPR right now (9/27/2012)
            Get
                'Return _PolicyTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.PolicyTypeId
            End Get
            Set(value As String)
                '_PolicyTypeId = value
                '_PolicyType = ""
                'If IsNumeric(_PolicyTypeId) = True Then
                '    Select Case _PolicyTypeId
                '        Case "0"
                '            _PolicyType = "N/A"
                '        Case "1"
                '            _PolicyType = "None"
                '        Case "60"
                '            _PolicyType = "Standard"
                '        Case "61"
                '            _PolicyType = "Preferred"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.PolicyTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyType As String 'only coded for CPR right now (9/27/2012)
            Get
                'Return _PolicyType
                'updated 7/20/2018
                Return VersionAndLobInfo.PolicyType
            End Get
            Set(value As String)
                '_PolicyType = value
                'Select Case _PolicyType
                '    Case "N/A"
                '        _PolicyTypeId = "0"
                '    Case "None"
                '        _PolicyTypeId = "1"
                '    Case "Standard"
                '        _PolicyTypeId = "60"
                '    Case "Preferred"
                '        _PolicyTypeId = "61"
                '    Case Else
                '        'won't set _PolicyTypeId = "" for now
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.PolicyType = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 2; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium As String
            Get
                'Return _VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium
                'updated 8/25/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 60006 (CAP) or 6 (PPA); sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_MedicalPaymentsQuotedPremium As String
            Get
                'Return _VehiclesTotal_MedicalPaymentsQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_MedicalPaymentsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_MedicalPaymentsQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_MedicalPaymentsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_MedicalPaymentsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_MedicalPaymentsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 8; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium As String
            Get
                'Return _VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 30013; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium As String
            Get
                'Return _VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverages w/ coveragecode_ids 8 and 30013; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UM_UIM_CovsQuotedPremium As String
            Get
                'Return _VehiclesTotal_UM_UIM_CovsQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UM_UIM_CovsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UM_UIM_CovsQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UM_UIM_CovsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UM_UIM_CovsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UM_UIM_CovsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 3; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_ComprehensiveCoverageQuotedPremium As String
            Get
                'Return _VehiclesTotal_ComprehensiveCoverageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_ComprehensiveCoverageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_ComprehensiveCoverageQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_ComprehensiveCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_ComprehensiveCoverageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_ComprehensiveCoverageQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 5; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_CollisionCoverageQuotedPremium As String
            Get
                'Return _VehiclesTotal_CollisionCoverageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_CollisionCoverageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_CollisionCoverageQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_CollisionCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_CollisionCoverageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_CollisionCoverageQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverage w/ coveragecode_id 60008; sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_TowingAndLaborQuotedPremium As String
            Get
                'Return _VehiclesTotal_TowingAndLaborQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_TowingAndLaborQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_TowingAndLaborQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_TowingAndLaborQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_TowingAndLaborQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_TowingAndLaborQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond vehicle coverages w/ coveragecode_ids 10094 (Comp) and 10095 (Coll); sum of all vehicles</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_RentalReimbursementQuotedPremium As String
            Get
                'Return _VehiclesTotal_RentalReimbursementQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_RentalReimbursementQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_RentalReimbursementQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_RentalReimbursementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_RentalReimbursementQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_RentalReimbursementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_CAP_OptCovs_Premium As String
            Get
                'Return _Dec_CAP_OptCovs_Premium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_Dec_CAP_OptCovs_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_CAP_OptCovs_Premium
            End Get
            Set(value As String)
                '_Dec_CAP_OptCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_CAP_OptCovs_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_CAP_OptCovs_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Dec_CAP_OptCovs_Premium_Without_GarageKeepers As String 'added 5/10/2017 for CAP/GAR
            Get
                'Return _Dec_CAP_OptCovs_Premium_Without_GarageKeepers
                'Return qqHelper.QuotedPremiumFormat(_Dec_CAP_OptCovs_Premium_Without_GarageKeepers)
                'updated 7/20/2018
                Return VersionAndLobInfo.Dec_CAP_OptCovs_Premium_Without_GarageKeepers
            End Get
            Set(value As String)
                '_Dec_CAP_OptCovs_Premium_Without_GarageKeepers = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Dec_CAP_OptCovs_Premium_Without_GarageKeepers)
                'updated 7/20/2018
                VersionAndLobInfo.Dec_CAP_OptCovs_Premium_Without_GarageKeepers = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageParts As Generic.List(Of QuickQuotePackagePart)
            Get
                'SetParentOfListItems(_PackageParts, "{663B7C7B-F2AC-4BF6-965A-D30F41A03996}")
                'Return _PackageParts
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.PackageParts, "{663B7C7B-F2AC-4BF6-965A-D30F41A03996}")
                Return TopLevelQuoteInfo.PackageParts
            End Get
            Set(value As Generic.List(Of QuickQuotePackagePart))
                '_PackageParts = value
                'SetParentOfListItems(_PackageParts, "{663B7C7B-F2AC-4BF6-965A-D30F41A03996}")
                'updated 7/27/2018
                TopLevelQuoteInfo.PackageParts = value
                SetParentOfListItems(TopLevelQuoteInfo.PackageParts, "{663B7C7B-F2AC-4BF6-965A-D30F41A03996}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageTypeId As String
            Get
                'Return _PackageTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageTypeId
            End Get
            Set(value As String)
                '_PackageTypeId = value
                '_PackageType = ""
                'If IsNumeric(_PackageTypeId) = True Then
                '    Select Case _PackageTypeId
                '        Case "0"
                '            _PackageType = "N/A"
                '        Case "1"
                '            _PackageType = "CPP"
                '        Case "2"
                '            _PackageType = "POP"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.PackageTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageType As String
            Get
                'Return _PackageType
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageType
            End Get
            Set(value As String)
                '_PackageType = value
                'Select Case _PackageType
                '    Case "N/A"
                '        _PackageTypeId = "0"
                '    Case "CPP"
                '        _PackageTypeId = "1"
                '    Case "POP"
                '        _PackageTypeId = "2"
                '    Case Else
                '        _PackageTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.PackageType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageModificationAssignmentTypeId As String
            Get
                'Return _PackageModificationAssignmentTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageModificationAssignmentTypeId
            End Get
            Set(value As String)
                '_PackageModificationAssignmentTypeId = value
                '_PackageModificationAssignmentType = ""
                'If IsNumeric(_PackageModificationAssignmentTypeId) = True Then
                '    Select Case _PackageModificationAssignmentTypeId
                '        Case "0"
                '            _PackageModificationAssignmentType = "N/A"
                '        Case "1"
                '            _PackageModificationAssignmentType = "Apartment House Risk"
                '        Case "2"
                '            _PackageModificationAssignmentType = "Contractors Risk"
                '        Case "3"
                '            _PackageModificationAssignmentType = "Institutional Risk"
                '        Case "4"
                '            _PackageModificationAssignmentType = "Industrial and Processing Risk"
                '        Case "5"
                '            _PackageModificationAssignmentType = "Mercantile Risk"
                '        Case "6"
                '            _PackageModificationAssignmentType = "Motel/Hotel Risk"
                '        Case "7"
                '            _PackageModificationAssignmentType = "Office Risk"
                '        Case "8"
                '            _PackageModificationAssignmentType = "Service Risk"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.PackageModificationAssignmentTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageModificationAssignmentType As String
            Get
                'Return _PackageModificationAssignmentType
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageModificationAssignmentType
            End Get
            Set(value As String)
                '_PackageModificationAssignmentType = value
                'Select Case _PackageModificationAssignmentType
                '    Case "N/A"
                '        _PackageModificationAssignmentTypeId = "0"
                '    Case "Apartment House Risk"
                '        _PackageModificationAssignmentTypeId = "1"
                '    Case "Contractors Risk"
                '        _PackageModificationAssignmentTypeId = "2"
                '    Case "Institutional Risk"
                '        _PackageModificationAssignmentTypeId = "3"
                '    Case "Industrial and Processing Risk"
                '        _PackageModificationAssignmentTypeId = "4"
                '    Case "Mercantile Risk"
                '        _PackageModificationAssignmentTypeId = "5"
                '    Case "Motel/Hotel Risk"
                '        _PackageModificationAssignmentTypeId = "6"
                '    Case "Office Risk"
                '        _PackageModificationAssignmentTypeId = "7"
                '    Case "Service Risk"
                '        _PackageModificationAssignmentTypeId = "8"
                '    Case Else
                '        _PackageModificationAssignmentTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.PackageModificationAssignmentType = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286; specific to the GL package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Has_PackageGL_EnhancementEndorsement As Boolean
            Get
                'Return _Has_PackageGL_EnhancementEndorsement
                'updated 7/20/2018
                Return VersionAndLobInfo.Has_PackageGL_EnhancementEndorsement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.Has_PackageGL_EnhancementEndorsement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.Has_PackageGL_EnhancementEndorsement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_Has_PackageGL_EnhancementEndorsement = value
                'updated 7/20/2018
                VersionAndLobInfo.Has_PackageGL_EnhancementEndorsement = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286; specific to the GL package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageGL_EnhancementEndorsementQuotedPremium As String
            Get
                'Return _PackageGL_EnhancementEndorsementQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_PackageGL_EnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageGL_EnhancementEndorsementQuotedPremium
            End Get
            Set(value As String)
                '_PackageGL_EnhancementEndorsementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PackageGL_EnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.PackageGL_EnhancementEndorsementQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Has_PackageGL_PlusEnhancementEndorsement As Boolean
            Get
                Return VersionAndLobInfo.Has_PackageGL_PlusEnhancementEndorsement
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.Has_PackageGL_PlusEnhancementEndorsement = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageGL_PlusEnhancementEndorsementQuotedPremium As String
            Get
                Return VersionAndLobInfo.PackageGL_PlusEnhancementEndorsementQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.PackageGL_PlusEnhancementEndorsementQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286; specific to the CPR package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Has_PackageCPR_EnhancementEndorsement As Boolean
            Get
                'Return _Has_PackageCPR_EnhancementEndorsement
                'updated 7/20/2018
                Return VersionAndLobInfo.Has_PackageCPR_EnhancementEndorsement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.Has_PackageCPR_EnhancementEndorsement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.Has_PackageCPR_EnhancementEndorsement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_Has_PackageCPR_EnhancementEndorsement = value
                'updated 7/20/2018
                VersionAndLobInfo.Has_PackageCPR_EnhancementEndorsement = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 286; specific to the CPR package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageCPR_EnhancementEndorsementQuotedPremium As String
            Get
                'Return _PackageCPR_EnhancementEndorsementQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_PackageCPR_EnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageCPR_EnhancementEndorsementQuotedPremium
            End Get
            Set(value As String)
                '_PackageCPR_EnhancementEndorsementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PackageCPR_EnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.PackageCPR_EnhancementEndorsementQuotedPremium = value
            End Set
        End Property

        'Added 6/27/2022 for task 75780 MLW
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 100009; specific to the CPR package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Has_PackageCPR_PlusEnhancementEndorsement As Boolean
            Get
                'Return _Has_PackageCPR_EnhancementEndorsement
                'updated 7/20/2018
                Return VersionAndLobInfo.Has_PackageCPR_PlusEnhancementEndorsement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.Has_PackageCPR_PlusEnhancementEndorsement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.Has_PackageCPR_PlusEnhancementEndorsement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_Has_PackageCPR_PlusEnhancementEndorsement = value
                'updated 7/20/2018
                VersionAndLobInfo.Has_PackageCPR_PlusEnhancementEndorsement = value
            End Set
        End Property
        'Added 6/27/2022 for task 75780 MLW
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 100009; specific to the CPR package part for CPP</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PackageCPR_PlusEnhancementEndorsementQuotedPremium As String
            Get
                'Return _PackageCPR_PlusEnhancementEndorsementQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_PackageCPR_PlusEnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.PackageCPR_PlusEnhancementEndorsementQuotedPremium
            End Get
            Set(value As String)
                '_PackageCPR_PlusEnhancementEndorsementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PackageCPR_PlusEnhancementEndorsementQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.PackageCPR_PlusEnhancementEndorsementQuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 165 on all buildings</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BuildingsTotal_BuildingCovQuotedPremium As String
            Get
                'Return _CPR_BuildingsTotal_BuildingCovQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BuildingsTotal_BuildingCovQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BuildingsTotal_BuildingCovQuotedPremium
            End Get
            Set(value As String)
                '_CPR_BuildingsTotal_BuildingCovQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BuildingsTotal_BuildingCovQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BuildingsTotal_BuildingCovQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21090 (when BusinessPropertyTypeId &lt;&gt; 8 [Personal Property of Others]) on all buildings; found inside building ScheduledCoverage</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BuildingsTotal_PersPropCoverageQuotedPremium As String
            Get
                'Return _CPR_BuildingsTotal_PersPropCoverageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BuildingsTotal_PersPropCoverageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BuildingsTotal_PersPropCoverageQuotedPremium
            End Get
            Set(value As String)
                '_CPR_BuildingsTotal_PersPropCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BuildingsTotal_PersPropCoverageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BuildingsTotal_PersPropCoverageQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21090 (when BusinessPropertyTypeId = 8 [Personal Property of Others]) on all buildings; found inside building ScheduledCoverage</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BuildingsTotal_PersPropOfOthersQuotedPremium As String
            Get
                'Return _CPR_BuildingsTotal_PersPropOfOthersQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BuildingsTotal_PersPropOfOthersQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BuildingsTotal_PersPropOfOthersQuotedPremium
            End Get
            Set(value As String)
                '_CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BuildingsTotal_PersPropOfOthersQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21095 on all buildings</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium As String
            Get
                'Return _CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium
            End Get
            Set(value As String)
                '_CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverages w/ coveragecode_ids 21155 (building EQ), 21163 (business income EQ), and 21160 (persProp and persPropOfOthers EQ; found inside building ScheduledCoverage) on all buildings</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BuildingsTotal_EQ_QuotedPremium As String
            Get
                'Return _CPR_BuildingsTotal_EQ_QuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BuildingsTotal_EQ_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BuildingsTotal_EQ_QuotedPremium
            End Get
            Set(value As String)
                '_CPR_BuildingsTotal_EQ_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BuildingsTotal_EQ_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BuildingsTotal_EQ_QuotedPremium = value
            End Set
        End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21042 on all locations</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_EquipmentBreakdownQuotedPremium As String
            Get
                'Return _LocationsTotal_EquipmentBreakdownQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_EquipmentBreakdownQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.LocationsTotal_EquipmentBreakdownQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_EquipmentBreakdownQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_EquipmentBreakdownQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.LocationsTotal_EquipmentBreakdownQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_GL_PackagePart_QuotedPremium As String
            Get
                'Return _CPP_GL_PackagePart_QuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPP_GL_PackagePart_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPP_GL_PackagePart_QuotedPremium
            End Get
            Set(value As String)
                '_CPP_GL_PackagePart_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_GL_PackagePart_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPP_GL_PackagePart_QuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_PackagePart_QuotedPremium As String
            Get
                'Return _CPP_CPR_PackagePart_QuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPP_CPR_PackagePart_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPP_CPR_PackagePart_QuotedPremium
            End Get
            Set(value As String)
                '_CPP_CPR_PackagePart_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CPR_PackagePart_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPP_CPR_PackagePart_QuotedPremium = value
            End Set
        End Property
        'added 1/26/2015 for CIM and CRM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_PackagePart_QuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_CPP_CIM_PackagePart_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPP_CIM_PackagePart_QuotedPremium
            End Get
            Set(value As String)
                '_CPP_CIM_PackagePart_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CIM_PackagePart_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPP_CIM_PackagePart_QuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_PackagePart_QuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_CPP_CRM_PackagePart_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPP_CRM_PackagePart_QuotedPremium
            End Get
            Set(value As String)
                '_CPP_CRM_PackagePart_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CRM_PackagePart_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPP_CRM_PackagePart_QuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_GAR_PackagePart_QuotedPremium As String 'added 4/22/2017
            Get
                'Return qqHelper.QuotedPremiumFormat(_CPP_GAR_PackagePart_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPP_GAR_PackagePart_QuotedPremium
            End Get
            Set(value As String)
                '_CPP_GAR_PackagePart_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_GAR_PackagePart_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPP_GAR_PackagePart_QuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_Liability_WouldHaveSymbol8 As Boolean
            Get
                'Return _CAP_Liability_WouldHaveSymbol8
                'updated 7/20/2018
                Return VersionAndLobInfo.CAP_Liability_WouldHaveSymbol8
            End Get
            Set(value As Boolean)
                '_CAP_Liability_WouldHaveSymbol8 = value
                'updated 7/20/2018
                VersionAndLobInfo.CAP_Liability_WouldHaveSymbol8 = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_Liability_WouldHaveSymbol9 As Boolean
            Get
                'Return _CAP_Liability_WouldHaveSymbol9
                'updated 7/20/2018
                Return VersionAndLobInfo.CAP_Liability_WouldHaveSymbol9
            End Get
            Set(value As Boolean)
                '_CAP_Liability_WouldHaveSymbol9 = value
                'updated 7/20/2018
                VersionAndLobInfo.CAP_Liability_WouldHaveSymbol9 = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_Comprehensive_WouldHaveSymbol8 As Boolean
            Get
                'Return _CAP_Comprehensive_WouldHaveSymbol8
                'updated 7/20/2018
                Return VersionAndLobInfo.CAP_Comprehensive_WouldHaveSymbol8
            End Get
            Set(value As Boolean)
                '_CAP_Comprehensive_WouldHaveSymbol8 = value
                'updated 7/20/2018
                VersionAndLobInfo.CAP_Comprehensive_WouldHaveSymbol8 = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_Collision_WouldHaveSymbol8 As Boolean
            Get
                'Return _CAP_Collision_WouldHaveSymbol8
                'updated 7/20/2018
                Return VersionAndLobInfo.CAP_Collision_WouldHaveSymbol8
            End Get
            Set(value As Boolean)
                '_CAP_Collision_WouldHaveSymbol8 = value
                'updated 7/20/2018
                VersionAndLobInfo.CAP_Collision_WouldHaveSymbol8 = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EFT_BankRoutingNumber As String
            Get
                'Return _EFT_BankRoutingNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.EFT_BankRoutingNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankRoutingNumber
            End Get
            Set(value As String)
                '_EFT_BankRoutingNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.EFT_BankRoutingNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankRoutingNumber = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EFT_BankAccountNumber As String
            Get
                'Return _EFT_BankAccountNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.EFT_BankAccountNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankAccountNumber
            End Get
            Set(value As String)
                '_EFT_BankAccountNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.EFT_BankAccountNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankAccountNumber = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EFT_BankAccountTypeId As String '1=Checking; 2=Savings
            Get
                'Return _EFT_BankAccountTypeId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.EFT_BankAccountTypeId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankAccountTypeId
            End Get
            Set(value As String)
                '_EFT_BankAccountTypeId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.EFT_BankAccountTypeId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_BankAccountTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EFT_DeductionDay As String
            Get
                'Return _EFT_DeductionDay
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.EFT_DeductionDay
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_DeductionDay
            End Get
            Set(value As String)
                '_EFT_DeductionDay = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.EFT_DeductionDay = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.EFT_DeductionDay = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OnlyUsePropertyToSetFieldWithSameName As Boolean
            Get
                'Return _OnlyUsePropertyToSetFieldWithSameName
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.OnlyUsePropertyToSetFieldWithSameName
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.OnlyUsePropertyToSetFieldWithSameName
            End Get
            Set(value As Boolean)
                '_OnlyUsePropertyToSetFieldWithSameName = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.OnlyUsePropertyToSetFieldWithSameName = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.OnlyUsePropertyToSetFieldWithSameName = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteId As String
            Get
                'Return _Database_QuoteId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_QuoteId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteId
            End Get
            Set(value As String)
                '_Database_QuoteId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_QuoteId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteXmlId As String
            Get
                'Return _Database_QuoteXmlId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_QuoteXmlId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteXmlId
            End Get
            Set(value As String)
                '_Database_QuoteXmlId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_QuoteXmlId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteXmlId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteNumber As String
            Get
                'Return _Database_QuoteNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_QuoteNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteNumber
            End Get
            Set(value As String)
                '_Database_QuoteNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_QuoteNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteNumber = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_LobId As String
            Get
                'Return _Database_LobId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_LobId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LobId
            End Get
            Set(value As String)
                '_Database_LobId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_LobId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LobId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_CurrentQuoteXmlId As String
            Get
                'Return _Database_CurrentQuoteXmlId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_CurrentQuoteXmlId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_CurrentQuoteXmlId
            End Get
            Set(value As String)
                '_Database_CurrentQuoteXmlId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_CurrentQuoteXmlId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_CurrentQuoteXmlId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_XmlQuoteId As String
            Get
                'Return _Database_XmlQuoteId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_XmlQuoteId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_XmlQuoteId
            End Get
            Set(value As String)
                '_Database_XmlQuoteId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_XmlQuoteId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_XmlQuoteId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_LastAvailableQuoteNumber As String
            Get
                'Return _Database_LastAvailableQuoteNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_LastAvailableQuoteNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LastAvailableQuoteNumber
            End Get
            Set(value As String)
                '_Database_LastAvailableQuoteNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_LastAvailableQuoteNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LastAvailableQuoteNumber = value
            End Set
        End Property
        'added more 1/8/2016
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteStatusId As String
            Get
                'Return _Database_QuoteStatusId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_QuoteStatusId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteStatusId
            End Get
            Set(value As String)
                '_Database_QuoteStatusId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_QuoteStatusId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteStatusId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_XmlStatusId As String
            Get
                'Return _Database_XmlStatusId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_XmlStatusId
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_XmlStatusId
            End Get
            Set(value As String)
                '_Database_XmlStatusId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_XmlStatusId = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_XmlStatusId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_IsPolicy As Boolean
            Get
                'Return _Database_IsPolicy
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_IsPolicy
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_IsPolicy
            End Get
            Set(value As Boolean)
                '_Database_IsPolicy = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_IsPolicy = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_IsPolicy = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DiamondPolicyNumber As String
            Get
                'Return _Database_DiamondPolicyNumber
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_DiamondPolicyNumber
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondPolicyNumber
            End Get
            Set(value As String)
                '_Database_DiamondPolicyNumber = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_DiamondPolicyNumber = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondPolicyNumber = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_OriginatedInVR As Boolean
            Get
                'Return _Database_OriginatedInVR
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_OriginatedInVR
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_OriginatedInVR
            End Get
            Set(value As Boolean)
                '_Database_OriginatedInVR = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_OriginatedInVR = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_OriginatedInVR = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_EffectiveDate As String
            Get
                'Return _Database_EffectiveDate
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.Database_EffectiveDate
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_EffectiveDate
            End Get
            Set(value As String)
                '_Database_EffectiveDate = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.Database_EffectiveDate = value
                'updated 8/7/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_EffectiveDate = value
            End Set
        End Property
        'added 9/28/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_ActualLobId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_ActualLobId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_ActualLobId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_GoverningStateId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_GoverningStateId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_GoverningStateId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_StateIds As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_StateIds
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_StateIds = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteActualLobId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteActualLobId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteActualLobId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteGoverningStateId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteGoverningStateId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteGoverningStateId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteStateIds As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteStateIds
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteStateIds = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_AppActualLobId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppActualLobId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppActualLobId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_AppGoverningStateId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppGoverningStateId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppGoverningStateId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_AppStateIds As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppStateIds
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppStateIds = value
            End Set
        End Property

        'Public Property TestObjects As Generic.List(Of TestObject)
        '    Get
        '        Return _TestObjects
        '    End Get
        '    Set(value As Generic.List(Of TestObject))
        '        _TestObjects = value
        '    End Set
        'End Property

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBlanketBuilding As Boolean
            Get
                'Return _HasBlanketBuilding
                'updated 7/20/2018
                Return VersionAndLobInfo.HasBlanketBuilding
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBlanketBuilding
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBlanketBuilding = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBlanketBuilding = value
                'updated 7/20/2018
                VersionAndLobInfo.HasBlanketBuilding = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBlanketContents As Boolean
            Get
                'Return _HasBlanketContents
                'updated 7/20/2018
                Return VersionAndLobInfo.HasBlanketContents
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBlanketContents
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBlanketContents = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBlanketContents = value
                'updated 7/20/2018
                VersionAndLobInfo.HasBlanketContents = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBlanketBuildingAndContents As Boolean
            Get
                'Return _HasBlanketBuildingAndContents
                'updated 7/20/2018
                Return VersionAndLobInfo.HasBlanketBuildingAndContents
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBlanketBuildingAndContents
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBlanketBuildingAndContents = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBlanketBuildingAndContents = value
                'updated 7/20/2018
                VersionAndLobInfo.HasBlanketBuildingAndContents = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBlanketBusinessIncome As Boolean
            Get
                'Return _HasBlanketBusinessIncome
                'updated 7/20/2018
                Return VersionAndLobInfo.HasBlanketBusinessIncome
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBlanketBusinessIncome
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBlanketBusinessIncome = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBlanketBusinessIncome = value
                'updated 7/20/2018
                VersionAndLobInfo.HasBlanketBusinessIncome = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingQuotedPremium As String
            Get
                'Return _BlanketBuildingQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketBuildingQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingQuotedPremium
            End Get
            Set(value As String)
                '_BlanketBuildingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketBuildingQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsQuotedPremium As String
            Get
                'Return _BlanketContentsQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketContentsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsQuotedPremium
            End Get
            Set(value As String)
                '_BlanketContentsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketContentsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsQuotedPremium As String
            Get
                'Return _BlanketBuildingAndContentsQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketBuildingAndContentsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsQuotedPremium
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketBuildingAndContentsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeQuotedPremium As String
            Get
                'Return _BlanketBusinessIncomeQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketBusinessIncomeQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeQuotedPremium
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketBusinessIncomeQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingCauseOfLossTypeId As String
            Get
                'Return _BlanketBuildingCauseOfLossTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingCauseOfLossTypeId
            End Get
            Set(value As String)
                '_BlanketBuildingCauseOfLossTypeId = value
                '_BlanketBuildingCauseOfLossType = ""
                'If IsNumeric(_BlanketBuildingCauseOfLossTypeId) = True Then
                '    Select Case _BlanketBuildingCauseOfLossTypeId
                '        Case "0"
                '            _BlanketBuildingCauseOfLossType = "N/A"
                '        Case "1"
                '            _BlanketBuildingCauseOfLossType = "Basic Form"
                '        Case "2"
                '            _BlanketBuildingCauseOfLossType = "Broad Form"
                '        Case "3"
                '            _BlanketBuildingCauseOfLossType = "Special Form Including Theft"
                '        Case "4"
                '            _BlanketBuildingCauseOfLossType = "Special Form Excluding Theft"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingCauseOfLossTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingCauseOfLossType As String
            Get
                'Return _BlanketBuildingCauseOfLossType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingCauseOfLossType
            End Get
            Set(value As String)
                '_BlanketBuildingCauseOfLossType = value
                'Select Case _BlanketBuildingCauseOfLossType
                '    Case "N/A"
                '        _BlanketBuildingCauseOfLossTypeId = "0"
                '    Case "Basic Form"
                '        _BlanketBuildingCauseOfLossTypeId = "1"
                '    Case "Broad Form"
                '        _BlanketBuildingCauseOfLossTypeId = "2"
                '    Case "Special Form Including Theft"
                '        _BlanketBuildingCauseOfLossTypeId = "3"
                '    Case "Special Form Excluding Theft"
                '        _BlanketBuildingCauseOfLossTypeId = "4"
                '    Case Else
                '        _BlanketBuildingCauseOfLossTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingCauseOfLossType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsCauseOfLossTypeId As String
            Get
                'Return _BlanketContentsCauseOfLossTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsCauseOfLossTypeId
            End Get
            Set(value As String)
                '_BlanketContentsCauseOfLossTypeId = value
                '_BlanketContentsCauseOfLossType = ""
                'If IsNumeric(_BlanketContentsCauseOfLossTypeId) = True Then
                '    Select Case _BlanketContentsCauseOfLossTypeId
                '        Case "0"
                '            _BlanketContentsCauseOfLossType = "N/A"
                '        Case "1"
                '            _BlanketContentsCauseOfLossType = "Basic Form"
                '        Case "2"
                '            _BlanketContentsCauseOfLossType = "Broad Form"
                '        Case "3"
                '            _BlanketContentsCauseOfLossType = "Special Form Including Theft"
                '        Case "4"
                '            _BlanketContentsCauseOfLossType = "Special Form Excluding Theft"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsCauseOfLossTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsCauseOfLossType As String
            Get
                'Return _BlanketContentsCauseOfLossType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsCauseOfLossType
            End Get
            Set(value As String)
                '_BlanketContentsCauseOfLossType = value
                'Select Case _BlanketContentsCauseOfLossType
                '    Case "N/A"
                '        _BlanketContentsCauseOfLossTypeId = "0"
                '    Case "Basic Form"
                '        _BlanketContentsCauseOfLossTypeId = "1"
                '    Case "Broad Form"
                '        _BlanketContentsCauseOfLossTypeId = "2"
                '    Case "Special Form Including Theft"
                '        _BlanketContentsCauseOfLossTypeId = "3"
                '    Case "Special Form Excluding Theft"
                '        _BlanketContentsCauseOfLossTypeId = "4"
                '    Case Else
                '        _BlanketContentsCauseOfLossTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsCauseOfLossType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsCauseOfLossTypeId As String
            Get
                'Return _BlanketBuildingAndContentsCauseOfLossTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsCauseOfLossTypeId
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsCauseOfLossTypeId = value
                '_BlanketBuildingAndContentsCauseOfLossType = ""
                'If IsNumeric(_BlanketBuildingAndContentsCauseOfLossTypeId) = True Then
                '    Select Case _BlanketBuildingAndContentsCauseOfLossTypeId
                '        Case "0"
                '            _BlanketBuildingAndContentsCauseOfLossType = "N/A"
                '        Case "1"
                '            _BlanketBuildingAndContentsCauseOfLossType = "Basic Form"
                '        Case "2"
                '            _BlanketBuildingAndContentsCauseOfLossType = "Broad Form"
                '        Case "3"
                '            _BlanketBuildingAndContentsCauseOfLossType = "Special Form Including Theft"
                '        Case "4"
                '            _BlanketBuildingAndContentsCauseOfLossType = "Special Form Excluding Theft"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsCauseOfLossTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsCauseOfLossType As String
            Get
                'Return _BlanketBuildingAndContentsCauseOfLossType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsCauseOfLossType
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsCauseOfLossType = value
                'Select Case _BlanketBuildingAndContentsCauseOfLossType
                '    Case "N/A"
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = "0"
                '    Case "Basic Form"
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = "1"
                '    Case "Broad Form"
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = "2"
                '    Case "Special Form Including Theft"
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = "3"
                '    Case "Special Form Excluding Theft"
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = "4"
                '    Case Else
                '        _BlanketBuildingAndContentsCauseOfLossTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsCauseOfLossType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeCauseOfLossTypeId As String
            Get
                'Return _BlanketBusinessIncomeCauseOfLossTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeCauseOfLossTypeId
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeCauseOfLossTypeId = value
                '_BlanketBusinessIncomeCauseOfLossType = ""
                'If IsNumeric(_BlanketBusinessIncomeCauseOfLossTypeId) = True Then
                '    Select Case _BlanketBusinessIncomeCauseOfLossTypeId
                '        Case "0"
                '            _BlanketBusinessIncomeCauseOfLossType = "N/A"
                '        Case "1"
                '            _BlanketBusinessIncomeCauseOfLossType = "Basic Form"
                '        Case "2"
                '            _BlanketBusinessIncomeCauseOfLossType = "Broad Form"
                '        Case "3"
                '            _BlanketBusinessIncomeCauseOfLossType = "Special Form Including Theft"
                '        Case "4"
                '            _BlanketBusinessIncomeCauseOfLossType = "Special Form Excluding Theft"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeCauseOfLossTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeCauseOfLossType As String
            Get
                'Return _BlanketBusinessIncomeCauseOfLossType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeCauseOfLossType
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeCauseOfLossType = value
                'Select Case _BlanketBusinessIncomeCauseOfLossType
                '    Case "N/A"
                '        _BlanketBusinessIncomeCauseOfLossTypeId = "0"
                '    Case "Basic Form"
                '        _BlanketBusinessIncomeCauseOfLossTypeId = "1"
                '    Case "Broad Form"
                '        _BlanketBusinessIncomeCauseOfLossTypeId = "2"
                '    Case "Special Form Including Theft"
                '        _BlanketBusinessIncomeCauseOfLossTypeId = "3"
                '    Case "Special Form Excluding Theft"
                '        _BlanketBusinessIncomeCauseOfLossTypeId = "4"
                '    Case Else
                '        _BlanketBusinessIncomeCauseOfLossTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeCauseOfLossType = value
            End Set
        End Property
        'added more blanket stuff 4/16/2013
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingLimit As String
            Get
                'Return _BlanketBuildingLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingLimit
            End Get
            Set(value As String)
                '_BlanketBuildingLimit = value
                'qqHelper.ConvertToLimitFormat(_BlanketBuildingLimit)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingCoinsuranceTypeId As String
            Get
                'Return _BlanketBuildingCoinsuranceTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingCoinsuranceTypeId
            End Get
            Set(value As String)
                '_BlanketBuildingCoinsuranceTypeId = value
                '_BlanketBuildingCoinsuranceType = ""
                'If IsNumeric(_BlanketBuildingCoinsuranceTypeId) = True Then
                '    Select Case _BlanketBuildingCoinsuranceTypeId
                '        Case "0"
                '            _BlanketBuildingCoinsuranceType = "N/A"
                '        Case "1"
                '            _BlanketBuildingCoinsuranceType = "Waived"
                '        Case "2"
                '            _BlanketBuildingCoinsuranceType = "50%"
                '        Case "3"
                '            _BlanketBuildingCoinsuranceType = "60%"
                '        Case "4"
                '            _BlanketBuildingCoinsuranceType = "70%"
                '        Case "5"
                '            _BlanketBuildingCoinsuranceType = "80%"
                '        Case "6"
                '            _BlanketBuildingCoinsuranceType = "90%"
                '        Case "7"
                '            _BlanketBuildingCoinsuranceType = "100%"
                '        Case "8"
                '            _BlanketBuildingCoinsuranceType = "10%"
                '        Case "9"
                '            _BlanketBuildingCoinsuranceType = "20%"
                '        Case "10"
                '            _BlanketBuildingCoinsuranceType = "30%"
                '        Case "11"
                '            _BlanketBuildingCoinsuranceType = "40%"
                '        Case "12"
                '            _BlanketBuildingCoinsuranceType = "125%"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingCoinsuranceTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingCoinsuranceType As String
            Get
                'Return _BlanketBuildingCoinsuranceType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingCoinsuranceType
            End Get
            Set(value As String)
                '_BlanketBuildingCoinsuranceType = value
                'Select Case _BlanketBuildingCoinsuranceType
                '    Case "N/A"
                '        _BlanketBuildingCoinsuranceTypeId = "0"
                '    Case "Waived"
                '        _BlanketBuildingCoinsuranceTypeId = "1"
                '    Case "50%"
                '        _BlanketBuildingCoinsuranceTypeId = "2"
                '    Case "60%"
                '        _BlanketBuildingCoinsuranceTypeId = "3"
                '    Case "70%"
                '        _BlanketBuildingCoinsuranceTypeId = "4"
                '    Case "80%"
                '        _BlanketBuildingCoinsuranceTypeId = "5"
                '    Case "90%"
                '        _BlanketBuildingCoinsuranceTypeId = "6"
                '    Case "100%"
                '        _BlanketBuildingCoinsuranceTypeId = "7"
                '    Case "10%"
                '        _BlanketBuildingCoinsuranceTypeId = "8"
                '    Case "20%"
                '        _BlanketBuildingCoinsuranceTypeId = "9"
                '    Case "30%"
                '        _BlanketBuildingCoinsuranceTypeId = "10"
                '    Case "40%"
                '        _BlanketBuildingCoinsuranceTypeId = "11"
                '    Case "125%"
                '        _BlanketBuildingCoinsuranceTypeId = "12"
                '    Case Else
                '        _BlanketBuildingCoinsuranceTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingCoinsuranceType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingValuationId As String
            Get
                'Return _BlanketBuildingValuationId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingValuationId
            End Get
            Set(value As String)
                '_BlanketBuildingValuationId = value
                ''(1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation)
                '_BlanketBuildingValuation = ""
                'If IsNumeric(_BlanketBuildingValuationId) = True Then
                '    Select Case _BlanketBuildingValuationId
                '        Case "-1" 'added 10/19/2012 for CPR to match specs
                '            _BlanketBuildingValuation = "N/A"
                '        Case "1"
                '            _BlanketBuildingValuation = "Replacement Cost"
                '        Case "2"
                '            _BlanketBuildingValuation = "Actual Cash Value"
                '        Case "3"
                '            _BlanketBuildingValuation = "Functional Building Valuation"
                '        Case "7" 'added 10/18/2012 for CPR
                '            _BlanketBuildingValuation = "Functional Replacement Cost"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingValuationId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21082</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingValuation As String
            Get
                'Return _BlanketBuildingValuation
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingValuation
            End Get
            Set(value As String)
                '_BlanketBuildingValuation = value
                'Select Case _BlanketBuildingValuation
                '    Case "N/A" 'added 10/19/2012 for CPR to match specs
                '        _BlanketBuildingValuationId = "-1"
                '    Case "Replacement Cost"
                '        _BlanketBuildingValuationId = "1"
                '    Case "Actual Cash Value"
                '        _BlanketBuildingValuationId = "2"
                '    Case "Functional Building Valuation"
                '        _BlanketBuildingValuationId = "3"
                '    Case "Functional Replacement Cost" 'added 10/18/2012 for CPR
                '        _BlanketBuildingValuationId = "7"
                '    Case Else
                '        _BlanketBuildingValuationId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingValuation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsLimit As String
            Get
                'Return _BlanketContentsLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsLimit
            End Get
            Set(value As String)
                '_BlanketContentsLimit = value
                'qqHelper.ConvertToLimitFormat(_BlanketContentsLimit)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsCoinsuranceTypeId As String
            Get
                'Return _BlanketContentsCoinsuranceTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsCoinsuranceTypeId
            End Get
            Set(value As String)
                '_BlanketContentsCoinsuranceTypeId = value
                '_BlanketContentsCoinsuranceType = ""
                'If IsNumeric(_BlanketContentsCoinsuranceTypeId) = True Then
                '    Select Case _BlanketContentsCoinsuranceTypeId
                '        Case "0"
                '            _BlanketContentsCoinsuranceType = "N/A"
                '        Case "1"
                '            _BlanketContentsCoinsuranceType = "Waived"
                '        Case "2"
                '            _BlanketContentsCoinsuranceType = "50%"
                '        Case "3"
                '            _BlanketContentsCoinsuranceType = "60%"
                '        Case "4"
                '            _BlanketContentsCoinsuranceType = "70%"
                '        Case "5"
                '            _BlanketContentsCoinsuranceType = "80%"
                '        Case "6"
                '            _BlanketContentsCoinsuranceType = "90%"
                '        Case "7"
                '            _BlanketContentsCoinsuranceType = "100%"
                '        Case "8"
                '            _BlanketContentsCoinsuranceType = "10%"
                '        Case "9"
                '            _BlanketContentsCoinsuranceType = "20%"
                '        Case "10"
                '            _BlanketContentsCoinsuranceType = "30%"
                '        Case "11"
                '            _BlanketContentsCoinsuranceType = "40%"
                '        Case "12"
                '            _BlanketContentsCoinsuranceType = "125%"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsCoinsuranceTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsCoinsuranceType As String
            Get
                'Return _BlanketContentsCoinsuranceType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsCoinsuranceType
            End Get
            Set(value As String)
                '_BlanketContentsCoinsuranceType = value
                'Select Case _BlanketContentsCoinsuranceType
                '    Case "N/A"
                '        _BlanketContentsCoinsuranceTypeId = "0"
                '    Case "Waived"
                '        _BlanketContentsCoinsuranceTypeId = "1"
                '    Case "50%"
                '        _BlanketContentsCoinsuranceTypeId = "2"
                '    Case "60%"
                '        _BlanketContentsCoinsuranceTypeId = "3"
                '    Case "70%"
                '        _BlanketContentsCoinsuranceTypeId = "4"
                '    Case "80%"
                '        _BlanketContentsCoinsuranceTypeId = "5"
                '    Case "90%"
                '        _BlanketContentsCoinsuranceTypeId = "6"
                '    Case "100%"
                '        _BlanketContentsCoinsuranceTypeId = "7"
                '    Case "10%"
                '        _BlanketContentsCoinsuranceTypeId = "8"
                '    Case "20%"
                '        _BlanketContentsCoinsuranceTypeId = "9"
                '    Case "30%"
                '        _BlanketContentsCoinsuranceTypeId = "10"
                '    Case "40%"
                '        _BlanketContentsCoinsuranceTypeId = "11"
                '    Case "125%"
                '        _BlanketContentsCoinsuranceTypeId = "12"
                '    Case Else
                '        _BlanketContentsCoinsuranceTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsCoinsuranceType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsValuationId As String
            Get
                'Return _BlanketContentsValuationId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsValuationId
            End Get
            Set(value As String)
                '_BlanketContentsValuationId = value
                ''(1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation)
                '_BlanketContentsValuation = ""
                'If IsNumeric(_BlanketContentsValuationId) = True Then
                '    Select Case _BlanketContentsValuationId
                '        Case "-1" 'added 10/19/2012 for CPR to match specs
                '            _BlanketContentsValuation = "N/A"
                '        Case "1"
                '            _BlanketContentsValuation = "Replacement Cost"
                '        Case "2"
                '            _BlanketContentsValuation = "Actual Cash Value"
                '        Case "3"
                '            _BlanketContentsValuation = "Functional Building Valuation"
                '        Case "7" 'added 10/18/2012 for CPR
                '            _BlanketContentsValuation = "Functional Replacement Cost"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsValuationId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21083</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsValuation As String
            Get
                'Return _BlanketContentsValuation
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsValuation
            End Get
            Set(value As String)
                '_BlanketContentsValuation = value
                'Select Case _BlanketContentsValuation
                '    Case "N/A" 'added 10/19/2012 for CPR to match specs
                '        _BlanketContentsValuationId = "-1"
                '    Case "Replacement Cost"
                '        _BlanketContentsValuationId = "1"
                '    Case "Actual Cash Value"
                '        _BlanketContentsValuationId = "2"
                '    Case "Functional Building Valuation"
                '        _BlanketContentsValuationId = "3"
                '    Case "Functional Replacement Cost" 'added 10/18/2012 for CPR
                '        _BlanketContentsValuationId = "7"
                '    Case Else
                '        _BlanketContentsValuationId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsValuation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsLimit As String
            Get
                'Return _BlanketBuildingAndContentsLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsLimit
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsLimit = value
                'qqHelper.ConvertToLimitFormat(_BlanketBuildingAndContentsLimit)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsCoinsuranceTypeId As String
            Get
                'Return _BlanketBuildingAndContentsCoinsuranceTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsCoinsuranceTypeId
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsCoinsuranceTypeId = value
                '_BlanketBuildingAndContentsCoinsuranceType = ""
                'If IsNumeric(_BlanketBuildingAndContentsCoinsuranceTypeId) = True Then
                '    Select Case _BlanketBuildingAndContentsCoinsuranceTypeId
                '        Case "0"
                '            _BlanketBuildingAndContentsCoinsuranceType = "N/A"
                '        Case "1"
                '            _BlanketBuildingAndContentsCoinsuranceType = "Waived"
                '        Case "2"
                '            _BlanketBuildingAndContentsCoinsuranceType = "50%"
                '        Case "3"
                '            _BlanketBuildingAndContentsCoinsuranceType = "60%"
                '        Case "4"
                '            _BlanketBuildingAndContentsCoinsuranceType = "70%"
                '        Case "5"
                '            _BlanketBuildingAndContentsCoinsuranceType = "80%"
                '        Case "6"
                '            _BlanketBuildingAndContentsCoinsuranceType = "90%"
                '        Case "7"
                '            _BlanketBuildingAndContentsCoinsuranceType = "100%"
                '        Case "8"
                '            _BlanketBuildingAndContentsCoinsuranceType = "10%"
                '        Case "9"
                '            _BlanketBuildingAndContentsCoinsuranceType = "20%"
                '        Case "10"
                '            _BlanketBuildingAndContentsCoinsuranceType = "30%"
                '        Case "11"
                '            _BlanketBuildingAndContentsCoinsuranceType = "40%"
                '        Case "12"
                '            _BlanketBuildingAndContentsCoinsuranceType = "125%"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsCoinsuranceTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsCoinsuranceType As String
            Get
                'Return _BlanketBuildingAndContentsCoinsuranceType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsCoinsuranceType
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsCoinsuranceType = value
                'Select Case _BlanketBuildingAndContentsCoinsuranceType
                '    Case "N/A"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "0"
                '    Case "Waived"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "1"
                '    Case "50%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "2"
                '    Case "60%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "3"
                '    Case "70%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "4"
                '    Case "80%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "5"
                '    Case "90%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "6"
                '    Case "100%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "7"
                '    Case "10%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "8"
                '    Case "20%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "9"
                '    Case "30%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "10"
                '    Case "40%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "11"
                '    Case "125%"
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = "12"
                '    Case Else
                '        _BlanketBuildingAndContentsCoinsuranceTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsCoinsuranceType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsValuationId As String
            Get
                'Return _BlanketBuildingAndContentsValuationId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsValuationId
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsValuationId = value
                ''(1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation)
                '_BlanketBuildingAndContentsValuation = ""
                'If IsNumeric(_BlanketBuildingAndContentsValuationId) = True Then
                '    Select Case _BlanketBuildingAndContentsValuationId
                '        Case "-1" 'added 10/19/2012 for CPR to match specs
                '            _BlanketBuildingAndContentsValuation = "N/A"
                '        Case "1"
                '            _BlanketBuildingAndContentsValuation = "Replacement Cost"
                '        Case "2"
                '            _BlanketBuildingAndContentsValuation = "Actual Cash Value"
                '        Case "3"
                '            _BlanketBuildingAndContentsValuation = "Functional Building Valuation"
                '        Case "7" 'added 10/18/2012 for CPR
                '            _BlanketBuildingAndContentsValuation = "Functional Replacement Cost"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsValuationId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21084</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsValuation As String
            Get
                'Return _BlanketBuildingAndContentsValuation
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsValuation
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsValuation = value
                'Select Case _BlanketBuildingAndContentsValuation
                '    Case "N/A" 'added 10/19/2012 for CPR to match specs
                '        _BlanketBuildingAndContentsValuationId = "-1"
                '    Case "Replacement Cost"
                '        _BlanketBuildingAndContentsValuationId = "1"
                '    Case "Actual Cash Value"
                '        _BlanketBuildingAndContentsValuationId = "2"
                '    Case "Functional Building Valuation"
                '        _BlanketBuildingAndContentsValuationId = "3"
                '    Case "Functional Replacement Cost" 'added 10/18/2012 for CPR
                '        _BlanketBuildingAndContentsValuationId = "7"
                '    Case Else
                '        _BlanketBuildingAndContentsValuationId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsValuation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeLimit As String
            Get
                'Return _BlanketBusinessIncomeLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeLimit
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeLimit = value
                'qqHelper.ConvertToLimitFormat(_BlanketBusinessIncomeLimit)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeLimit = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeCoinsuranceTypeId As String
            Get
                'Return _BlanketBusinessIncomeCoinsuranceTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeCoinsuranceTypeId
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeCoinsuranceTypeId = value
                '_BlanketBusinessIncomeCoinsuranceType = ""
                'If IsNumeric(_BlanketBusinessIncomeCoinsuranceTypeId) = True Then
                '    Select Case _BlanketBusinessIncomeCoinsuranceTypeId
                '        Case "0"
                '            _BlanketBusinessIncomeCoinsuranceType = "N/A"
                '        Case "1"
                '            _BlanketBusinessIncomeCoinsuranceType = "Waived"
                '        Case "2"
                '            _BlanketBusinessIncomeCoinsuranceType = "50%"
                '        Case "3"
                '            _BlanketBusinessIncomeCoinsuranceType = "60%"
                '        Case "4"
                '            _BlanketBusinessIncomeCoinsuranceType = "70%"
                '        Case "5"
                '            _BlanketBusinessIncomeCoinsuranceType = "80%"
                '        Case "6"
                '            _BlanketBusinessIncomeCoinsuranceType = "90%"
                '        Case "7"
                '            _BlanketBusinessIncomeCoinsuranceType = "100%"
                '        Case "8"
                '            _BlanketBusinessIncomeCoinsuranceType = "10%"
                '        Case "9"
                '            _BlanketBusinessIncomeCoinsuranceType = "20%"
                '        Case "10"
                '            _BlanketBusinessIncomeCoinsuranceType = "30%"
                '        Case "11"
                '            _BlanketBusinessIncomeCoinsuranceType = "40%"
                '        Case "12"
                '            _BlanketBusinessIncomeCoinsuranceType = "125%"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeCoinsuranceTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeCoinsuranceType As String
            Get
                'Return _BlanketBusinessIncomeCoinsuranceType
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeCoinsuranceType
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeCoinsuranceType = value
                'Select Case _BlanketBusinessIncomeCoinsuranceType
                '    Case "N/A"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "0"
                '    Case "Waived"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "1"
                '    Case "50%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "2"
                '    Case "60%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "3"
                '    Case "70%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "4"
                '    Case "80%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "5"
                '    Case "90%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "6"
                '    Case "100%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "7"
                '    Case "10%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "8"
                '    Case "20%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "9"
                '    Case "30%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "10"
                '    Case "40%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "11"
                '    Case "125%"
                '        _BlanketBusinessIncomeCoinsuranceTypeId = "12"
                '    Case Else
                '        _BlanketBusinessIncomeCoinsuranceTypeId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeCoinsuranceType = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeValuationId As String
            Get
                'Return _BlanketBusinessIncomeValuationId
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeValuationId
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeValuationId = value
                ''(1=Replacement Cost; 2=Actual Cash Value; 3=Functional Building Valuation)
                '_BlanketBusinessIncomeValuation = ""
                'If IsNumeric(_BlanketBusinessIncomeValuationId) = True Then
                '    Select Case _BlanketBusinessIncomeValuationId
                '        Case "-1" 'added 10/19/2012 for CPR to match specs
                '            _BlanketBusinessIncomeValuation = "N/A"
                '        Case "1"
                '            _BlanketBusinessIncomeValuation = "Replacement Cost"
                '        Case "2"
                '            _BlanketBusinessIncomeValuation = "Actual Cash Value"
                '        Case "3"
                '            _BlanketBusinessIncomeValuation = "Functional Building Valuation"
                '        Case "7" 'added 10/18/2012 for CPR
                '            _BlanketBusinessIncomeValuation = "Functional Replacement Cost"
                '    End Select
                'End If
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeValuationId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21085</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeValuation As String
            Get
                'Return _BlanketBusinessIncomeValuation
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeValuation
            End Get
            Set(value As String)
                '_BlanketBusinessIncomeValuation = value
                'Select Case _BlanketBusinessIncomeValuation
                '    Case "N/A" 'added 10/19/2012 for CPR to match specs
                '        _BlanketBusinessIncomeValuationId = "-1"
                '    Case "Replacement Cost"
                '        _BlanketBusinessIncomeValuationId = "1"
                '    Case "Actual Cash Value"
                '        _BlanketBusinessIncomeValuationId = "2"
                '    Case "Functional Building Valuation"
                '        _BlanketBusinessIncomeValuationId = "3"
                '    Case "Functional Replacement Cost" 'added 10/18/2012 for CPR
                '        _BlanketBusinessIncomeValuationId = "7"
                '    Case Else
                '        _BlanketBusinessIncomeValuationId = ""
                'End Select
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeValuation = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverages w/ coveragecode_ids 21082 (building), 21083 (contents), 21084 (building and contents), 21085 (business income), and 21122 (combined EQ)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPR_BlanketCoverages_TotalPremium As String
            Get
                'Return _CPR_BlanketCoverages_TotalPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_CPR_BlanketCoverages_TotalPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.CPR_BlanketCoverages_TotalPremium
            End Get
            Set(value As String)
                '_CPR_BlanketCoverages_TotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPR_BlanketCoverages_TotalPremium)
                'updated 7/20/2018
                VersionAndLobInfo.CPR_BlanketCoverages_TotalPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 21122</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketCombinedEarthquake_QuotedPremium As String
            Get
                'Return _BlanketCombinedEarthquake_QuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_BlanketCombinedEarthquake_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketCombinedEarthquake_QuotedPremium
            End Get
            Set(value As String)
                '_BlanketCombinedEarthquake_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketCombinedEarthquake_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketCombinedEarthquake_QuotedPremium = value
            End Set
        End Property
        'added 5/3/2018 for CPR
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingIsAgreedValue As Boolean
            Get
                'Return _BlanketBuildingIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingIsAgreedValue
            End Get
            Set(value As Boolean)
                '_BlanketBuildingIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingIsAgreedValue = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsIsAgreedValue As Boolean
            Get
                'Return _BlanketContentsIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsIsAgreedValue
            End Get
            Set(value As Boolean)
                '_BlanketContentsIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsIsAgreedValue = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsIsAgreedValue As Boolean
            Get
                'Return _BlanketBuildingAndContentsIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsIsAgreedValue
            End Get
            Set(value As Boolean)
                '_BlanketBuildingAndContentsIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsIsAgreedValue = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingAndContentsDeductibleID As String
            Get
                'Return _BlanketBuildingAndContentsIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingAndContentsDeductibleID
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingAndContentsDeductibleID = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketContentsDeductibleID As String
            Get
                'Return _BlanketBuildingAndContentsIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketContentsDeductibleID
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketContentsDeductibleID = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBuildingDeductibleID As String
            Get
                'Return _BlanketBuildingAndContentsIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBuildingDeductibleID
            End Get
            Set(value As String)
                '_BlanketBuildingAndContentsIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBuildingDeductibleID = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketBusinessIncomeIsAgreedValue As Boolean
            Get
                'Return _BlanketBusinessIncomeIsAgreedValue
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketBusinessIncomeIsAgreedValue
            End Get
            Set(value As Boolean)
                '_BlanketBusinessIncomeIsAgreedValue = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketBusinessIncomeIsAgreedValue = value
            End Set
        End Property

        'added 4/17/2013 for CPR to total up Property in the Open coverage premiums
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21107 on all locations; found inside location ScheduledCoverage where UICoverageScheduledCoverageParentTypeId = 91 (Property in the Open)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PropertyInTheOpenRecords_QuotedPremium As String
            Get
                'Return _LocationsTotal_PropertyInTheOpenRecords_QuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PropertyInTheOpenRecords_QuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.LocationsTotal_PropertyInTheOpenRecords_QuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PropertyInTheOpenRecords_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PropertyInTheOpenRecords_QuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.LocationsTotal_PropertyInTheOpenRecords_QuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>combined prem for Diamond coverage w/ coveragecode_id 21520 on all locations; found inside location ScheduledCoverage where UICoverageScheduledCoverageParentTypeId = 91 (Property in the Open)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PropertyInTheOpenRecords_EQ_Premium As String
            Get
                'Return _LocationsTotal_PropertyInTheOpenRecords_EQ_Premium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PropertyInTheOpenRecords_EQ_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.LocationsTotal_PropertyInTheOpenRecords_EQ_Premium
            End Get
            Set(value As String)
                '_LocationsTotal_PropertyInTheOpenRecords_EQ_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PropertyInTheOpenRecords_EQ_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.LocationsTotal_PropertyInTheOpenRecords_EQ_Premium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks><see cref="LocationsTotal_PropertyInTheOpenRecords_EQ_Premium"/> + <see cref="CPR_BuildingsTotal_EQ_QuotedPremium"/></remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium As String
            Get
                'Return _LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium
            End Get
            Set(value As String)
                '_LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Agency As QuickQuoteAgency
            Get
                'SetObjectsParent(_Agency)
                'Return _Agency
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.Agency)
                'Return TopLevelQuoteInfo.Agency
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Agency
            End Get
            Set(value As QuickQuoteAgency)
                '_Agency = value
                'SetObjectsParent(_Agency)
                'updated 7/27/2018
                'TopLevelQuoteInfo.Agency = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Agency = value
                SetObjectsParent(TopLevelQuoteInfo.Agency)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyImageId As String 'testing 7/2/2013
            Get
                'Return _PolicyImageId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.PolicyImageId
                'updated 8/28/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyImageId
            End Get
            Set(value As String)
                '_PolicyImageId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.PolicyImageId = value
                'updated 8/28/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyImageId = value
            End Set
        End Property

        'added 7/25/2013 for PPA
        ''' <summary>
        ''' used for tier override
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>uses Diamond's TierType table (N/A=-1, None=0, Uniform=1, Variable=2); should just be used for testing</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TierTypeId As String 'N/A=-1; None=0; Uniform=1; Variable=2
            Get
                'Return _TierTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.TierTypeId
            End Get
            Set(value As String)
                '_TierTypeId = value
                'updated 7/20/2018
                VersionAndLobInfo.TierTypeId = value
            End Set
        End Property
        ''' <summary>
        ''' used for tier override
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>should just be used for testing</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UseTierOverride As Boolean
            Get
                'Return _UseTierOverride
                'updated 7/20/2018
                Return VersionAndLobInfo.UseTierOverride
            End Get
            Set(value As Boolean)
                '_UseTierOverride = value
                'updated 7/20/2018
                VersionAndLobInfo.UseTierOverride = value
            End Set
        End Property
        ''' <summary>
        ''' used for tier override
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>uses Diamond's TierAdjustmentType table; should just be used for testing</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TierAdjustmentTypeId As String 'TierAdjustmentType table: N/A=0; 1=13; etc.
            Get
                'Return _TierAdjustmentTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.TierAdjustmentTypeId
            End Get
            Set(value As String)
                '_TierAdjustmentTypeId = value
                'updated 7/20/2018
                VersionAndLobInfo.TierAdjustmentTypeId = value
            End Set
        End Property

        'added 7/30/2013 for HOM
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 30007 (HOM and DFR)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PersonalLiabilityLimitId As String '259=25,000; 262=100,000
            Get
                'Return _PersonalLiabilityLimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.PersonalLiabilityLimitId
            End Get
            Set(value As String)
                '_PersonalLiabilityLimitId = value
                'updated 7/20/2018
                VersionAndLobInfo.PersonalLiabilityLimitId = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 30007 (HOM and DFR)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PersonalLiabilityQuotedPremium As String
            Get
                'Return _PersonalLiabilityQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_PersonalLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.PersonalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_PersonalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PersonalLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.PersonalLiabilityQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Applicants As List(Of QuickQuoteApplicant)
            Get
                'SetParentOfListItems(_Applicants, "{663B7C7B-F2AC-4BF6-965A-D30F41A03994}")
                'Return _Applicants
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Applicants, "{663B7C7B-F2AC-4BF6-965A-D30F41A03994}")
                Return VersionAndLobInfo.Applicants
            End Get
            Set(value As List(Of QuickQuoteApplicant))
                '_Applicants = value
                'SetParentOfListItems(_Applicants, "{663B7C7B-F2AC-4BF6-965A-D30F41A03994}")
                'updated 7/20/2018
                VersionAndLobInfo.Applicants = value
                SetParentOfListItems(VersionAndLobInfo.Applicants, "{663B7C7B-F2AC-4BF6-965A-D30F41A03994}")
            End Set
        End Property
        ''' <summary>
        ''' property to add operators at the policy level
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>used to populate available operators drop-down lists (i.e. for HOM RvWatercraft); policyholders are automatically added but must be explicitly added w/ OperatorNum to assign</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Operators As List(Of QuickQuoteOperator)
            Get
                'SetParentOfListItems(_Operators, "{663B7C7B-F2AC-4BF6-965A-D30F41A03995}")
                'Return _Operators
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Operators, "{663B7C7B-F2AC-4BF6-965A-D30F41A03995}")
                Return VersionAndLobInfo.Operators
            End Get
            Set(value As List(Of QuickQuoteOperator))
                '_Operators = value
                'SetParentOfListItems(_Operators, "{663B7C7B-F2AC-4BF6-965A-D30F41A03995}")
                'updated 7/20/2018
                VersionAndLobInfo.Operators = value
                SetParentOfListItems(VersionAndLobInfo.Operators, "{663B7C7B-F2AC-4BF6-965A-D30F41A03995}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Exclusions As List(Of QuickQuoteExclusion)
            Get
                'SetParentOfListItems(_Exclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03997}")
                'Return _Exclusions
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.Exclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03997}")
                Return VersionAndLobInfo.Exclusions
            End Get
            Set(value As List(Of QuickQuoteExclusion))
                '_Exclusions = value
                'SetParentOfListItems(_Exclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03997}")
                'updated 7/20/2018
                VersionAndLobInfo.Exclusions = value
                SetParentOfListItems(VersionAndLobInfo.Exclusions, "{663B7C7B-F2AC-4BF6-965A-D30F41A03997}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HouseholdMembers As List(Of QuickQuoteHouseholdMember)
            Get
                'SetParentOfListItems(_HouseholdMembers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03998}")
                'Return _HouseholdMembers
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.HouseholdMembers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03998}")
                Return VersionAndLobInfo.HouseholdMembers
            End Get
            Set(value As List(Of QuickQuoteHouseholdMember))
                '_HouseholdMembers = value
                'SetParentOfListItems(_HouseholdMembers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03998}")
                'updated 7/20/2018
                VersionAndLobInfo.HouseholdMembers = value
                SetParentOfListItems(VersionAndLobInfo.HouseholdMembers, "{663B7C7B-F2AC-4BF6-965A-D30F41A03998}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ResidenceInfo As QuickQuoteResidenceInfo
            Get
                'SetObjectsParent(_ResidenceInfo)
                'Return _ResidenceInfo
                'updated 7/20/2018
                SetObjectsParent(VersionAndLobInfo.ResidenceInfo)
                Return VersionAndLobInfo.ResidenceInfo
            End Get
            Set(value As QuickQuoteResidenceInfo)
                '_ResidenceInfo = value
                'SetObjectsParent(_ResidenceInfo)
                'updated 7/20/2018
                VersionAndLobInfo.ResidenceInfo = value
                SetObjectsParent(VersionAndLobInfo.ResidenceInfo)
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ThirdPartyData As QuickQuoteThirdPartyData
            Get
                'SetObjectsParent(_ThirdPartyData)
                'Return _ThirdPartyData
                'updated 7/20/2018
                SetObjectsParent(VersionAndLobInfo.ThirdPartyData)
                Return VersionAndLobInfo.ThirdPartyData
            End Get
            Set(value As QuickQuoteThirdPartyData)
                '_ThirdPartyData = value
                'SetObjectsParent(_ThirdPartyData)
                'updated 7/20/2018
                VersionAndLobInfo.ThirdPartyData = value
                SetObjectsParent(VersionAndLobInfo.ThirdPartyData)
            End Set
        End Property

        'added 1/14/2014 for PPA
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>shown as Multi Policy Discount in Diamond UI (for PPA); HOM uses Location.MultiPolicyDiscount</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoHome As Boolean
            Get
                'Return _AutoHome
                'updated 7/20/2018
                Return VersionAndLobInfo.AutoHome
            End Get
            Set(value As Boolean)
                '_AutoHome = value
                'updated 7/20/2018
                VersionAndLobInfo.AutoHome = value
            End Set
        End Property

        ''added 5-9-18 Parachute
        'Public ReadOnly Property HasMultiLineDiscount As Boolean
        '    Get
        '        Return String.IsNullOrWhiteSpace(MultiLineDiscount)
        '    End Get
        'End Property

        'added 5-9-18 Parachute
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MultiLineDiscount As String
            Get
                'Return _MultiLineDiscountValue
                'updated 7/20/2018
                Return VersionAndLobInfo.MultiLineDiscount
            End Get
            Set(value As String)
                '_MultiLineDiscountValue = value
                'updated 7/20/2018
                VersionAndLobInfo.MultiLineDiscount = value
            End Set
        End Property

        'added 4/1/2019 - Bug 30754 - DJG
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasAdvancedQuoteDiscount As Boolean
            Get
                Return VersionAndLobInfo.HasAdvancedQuoteDiscount
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasAdvancedQuoteDiscount = value
            End Set
        End Property
        'added 08/18/2023 - Task WS-855 - BD
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmIndicator As Boolean
            Get
                Return VersionAndLobInfo.HasFarmIndicator
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasFarmIndicator = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeDiscount As Boolean
            Get
                'Return _EmployeeDiscount
                'updated 7/20/2018
                Return VersionAndLobInfo.EmployeeDiscount
            End Get
            Set(value As Boolean)
                '_EmployeeDiscount = value
                'updated 7/20/2018
                VersionAndLobInfo.EmployeeDiscount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FacultativeReinsurance As Boolean
            Get
                'Return _FacultativeReinsurance
                'updated 7/20/2018
                Return VersionAndLobInfo.FacultativeReinsurance
            End Get
            Set(value As Boolean)
                '_FacultativeReinsurance = value
                'updated 7/20/2018
                VersionAndLobInfo.FacultativeReinsurance = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to PPA; HOM uses Location.SelectMarketCredit</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SelectMarketCredit As Boolean
            Get
                'Return _SelectMarketCredit
                'updated 7/20/2018
                Return VersionAndLobInfo.SelectMarketCredit
            End Get
            Set(value As Boolean)
                '_SelectMarketCredit = value
                'updated 7/20/2018
                VersionAndLobInfo.SelectMarketCredit = value
            End Set
        End Property

        'added 2/18/2014
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedCoverages As Boolean
            Get
                'Return _HasConvertedCoverages
                'updated 7/20/2018
                Return VersionAndLobInfo.HasConvertedCoverages
            End Get
            Set(value As Boolean)
                ' _HasConvertedCoverages = value
                'updated 7/20/2018
                VersionAndLobInfo.HasConvertedCoverages = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedInclusionsExclusions As Boolean
            Get
                'Return _HasConvertedInclusionsExclusions
                'updated 7/20/2018
                Return VersionAndLobInfo.HasConvertedInclusionsExclusions
            End Get
            Set(value As Boolean)
                '_HasConvertedInclusionsExclusions = value
                'updated 7/20/2018
                VersionAndLobInfo.HasConvertedInclusionsExclusions = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedModifiers As Boolean
            Get
                'Return _HasConvertedModifiers
                'updated 7/20/2018
                Return VersionAndLobInfo.HasConvertedModifiers
            End Get
            Set(value As Boolean)
                '_HasConvertedModifiers = value
                'updated 7/20/2018
                VersionAndLobInfo.HasConvertedModifiers = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedScheduledRatings As Boolean
            Get
                'Return _HasConvertedScheduledRatings
                'updated 7/20/2018
                Return VersionAndLobInfo.HasConvertedScheduledRatings
            End Get
            Set(value As Boolean)
                '_HasConvertedScheduledRatings = value
                'updated 7/20/2018
                VersionAndLobInfo.HasConvertedScheduledRatings = value
            End Set
        End Property

        'added 4/2/2014
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_PremiumFullTerm As String
            Get
                'Return _VehiclesTotal_PremiumFullTerm
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_PremiumFullTerm)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_PremiumFullTerm
            End Get
            Set(value As String)
                '_VehiclesTotal_PremiumFullTerm = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_PremiumFullTerm)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_PremiumFullTerm = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PremiumFullTerm As String
            Get
                'Return _LocationsTotal_PremiumFullTerm
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PremiumFullTerm)
                'updated 7/20/2018
                Return VersionAndLobInfo.LocationsTotal_PremiumFullTerm
            End Get
            Set(value As String)
                '_LocationsTotal_PremiumFullTerm = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PremiumFullTerm)
                'updated 7/20/2018
                VersionAndLobInfo.LocationsTotal_PremiumFullTerm = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_BuildingsTotal_PremiumFullTerm As String
            Get
                'Return _Locations_BuildingsTotal_PremiumFullTerm
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_Locations_BuildingsTotal_PremiumFullTerm)
                'updated 7/20/2018
                Return VersionAndLobInfo.Locations_BuildingsTotal_PremiumFullTerm
            End Get
            Set(value As String)
                '_Locations_BuildingsTotal_PremiumFullTerm = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_BuildingsTotal_PremiumFullTerm)
                'updated 7/20/2018
                VersionAndLobInfo.Locations_BuildingsTotal_PremiumFullTerm = value
            End Set
        End Property

        'added 4/22/2014
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseDriverNumForDriverReconciliation As Boolean
            Get
                'Return _CanUseDriverNumForDriverReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseDriverNumForDriverReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseDriverNumForDriverReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseDriverNumForDriverReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseDriverNumForDriverReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseDriverNumForDriverReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForVehicleReconciliation As Boolean
            Get
                'Return _CanUseVehicleNumForVehicleReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseVehicleNumForVehicleReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseVehicleNumForVehicleReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseVehicleNumForVehicleReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseVehicleNumForVehicleReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseVehicleNumForVehicleReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseExclusionNumForExclusionReconciliation As Boolean 'added 4/23/2014
            Get
                'Return _CanUseExclusionNumForExclusionReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseExclusionNumForExclusionReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseExclusionNumForExclusionReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseExclusionNumForExclusionReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseExclusionNumForExclusionReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseExclusionNumForExclusionReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLossHistoryNumForLossHistoryReconciliation As Boolean 'added 4/23/2014
            Get
                'Return _CanUseLossHistoryNumForLossHistoryReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseLossHistoryNumForLossHistoryReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseLossHistoryNumForLossHistoryReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseLossHistoryNumForLossHistoryReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseLossHistoryNumForLossHistoryReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseLossHistoryNumForLossHistoryReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForLocationReconciliation As Boolean 'added 4/23/2014
            Get
                'Return _CanUseLocationNumForLocationReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseLocationNumForLocationReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseLocationNumForLocationReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseLocationNumForLocationReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseLocationNumForLocationReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseLocationNumForLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseApplicantNumForApplicantReconciliation As Boolean 'added 4/24/2014
            Get
                'Return _CanUseApplicantNumForApplicantReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseApplicantNumForApplicantReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseApplicantNumForApplicantReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseApplicantNumForApplicantReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseApplicantNumForApplicantReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseApplicantNumForApplicantReconciliation = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BillingAddressee As QuickQuoteBillingAddressee 'added 5/19/2014
            Get
                'SetObjectsParent(_BillingAddressee)
                'Return _BillingAddressee
                'updated 7/27/2018
                SetObjectsParent(TopLevelQuoteInfo.BillingAddressee)
                'Return TopLevelQuoteInfo.BillingAddressee
                'updated 8/7/2018; Parent setting will still just happen on Current
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.BillingAddressee
            End Get
            Set(value As QuickQuoteBillingAddressee)
                '_BillingAddressee = value
                'SetObjectsParent(_BillingAddressee)
                'updated 7/27/2018
                'TopLevelQuoteInfo.BillingAddressee = value
                'updated 8/7/2018; Parent setting will still just happen on Current
                GetTopLevelQuoteObject().TopLevelQuoteInfo.BillingAddressee = value
                SetObjectsParent(TopLevelQuoteInfo.BillingAddressee)
            End Set
        End Property

        'added 5/22/2014 for PPA
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_BodilyInjuryLiabilityQuotedPremium As String
            Get
                'Return _VehiclesTotal_BodilyInjuryLiabilityQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_BodilyInjuryLiabilityQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_BodilyInjuryLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_BodilyInjuryLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_BodilyInjuryLiabilityQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_BodilyInjuryLiabilityQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_PropertyDamageQuotedPremium As String
            Get
                'Return _VehiclesTotal_PropertyDamageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_PropertyDamageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_PropertyDamageQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_PropertyDamageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_PropertyDamageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_PropertyDamageQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UninsuredCombinedSingleQuotedPremium As String
            Get
                'Return _VehiclesTotal_UninsuredCombinedSingleQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UninsuredCombinedSingleQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UninsuredCombinedSingleQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UninsuredCombinedSingleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UninsuredCombinedSingleQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UninsuredCombinedSingleQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium As String
            Get
                'Return _VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium As String
            Get
                'Return _VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium As String
            Get
                'Return _VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_TransportationExpenseQuotedPremium As String
            Get
                'Return _VehiclesTotal_TransportationExpenseQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_TransportationExpenseQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_TransportationExpenseQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_TransportationExpenseQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_TransportationExpenseQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_TransportationExpenseQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_AutoLoanOrLeaseQuotedPremium As String
            Get
                'Return _VehiclesTotal_AutoLoanOrLeaseQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_AutoLoanOrLeaseQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_AutoLoanOrLeaseQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_AutoLoanOrLeaseQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_AutoLoanOrLeaseQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_AutoLoanOrLeaseQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_TapesAndRecordsQuotedPremium As String
            Get
                'Return _VehiclesTotal_TapesAndRecordsQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_TapesAndRecordsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_TapesAndRecordsQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_TapesAndRecordsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_TapesAndRecordsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_TapesAndRecordsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_SoundEquipmentQuotedPremium As String
            Get
                'Return _VehiclesTotal_SoundEquipmentQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_SoundEquipmentQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_SoundEquipmentQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_SoundEquipmentQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_SoundEquipmentQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_SoundEquipmentQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_ElectronicEquipmentQuotedPremium As String
            Get
                'Return _VehiclesTotal_ElectronicEquipmentQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_ElectronicEquipmentQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_ElectronicEquipmentQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_ElectronicEquipmentQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_ElectronicEquipmentQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_ElectronicEquipmentQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_TripInterruptionQuotedPremium As String
            Get
                'Return _VehiclesTotal_TripInterruptionQuotedPremium
                'updated 8/26/2014
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_TripInterruptionQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.VehiclesTotal_TripInterruptionQuotedPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_TripInterruptionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_TripInterruptionQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.VehiclesTotal_TripInterruptionQuotedPremium = value
            End Set
        End Property
        'added 10/12/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium As String 'covCodeId 296 (PPA IL only)
            Get
                Return VersionAndLobInfo.VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UninsuredBodilyInjuryQuotedPremium As String 'covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL)
            Get
                Return VersionAndLobInfo.VehiclesTotal_UninsuredBodilyInjuryQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.VehiclesTotal_UninsuredBodilyInjuryQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium As String 'covCodeId 295 (PPA IL only)
            Get
                Return VersionAndLobInfo.VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UM_UIM_CombinedSingleLimitQuotedPremium As String 'VehiclesTotal_UninsuredCombinedSingleQuotedPremium: covCodeId 10007 (PPA IN only) or covCodeId 7 (PPA IL only) + VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium: covCodeId 296 (PPA IL only)
            Get
                Return VersionAndLobInfo.VehiclesTotal_UM_UIM_CombinedSingleLimitQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.VehiclesTotal_UM_UIM_CombinedSingleLimitQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium As String 'VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium: covCodeId 8 (PPA IN/IL, CAP IN/IL, GAR IN) + VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium: covCodeId 30013 (CAP IN/IL, GAR IN) + VehiclesTotal_UninsuredBodilyInjuryQuotedPremium: covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL) + VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium: covCodeId 295 (PPA IL only)
            Get
                Return VersionAndLobInfo.VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TieringInformation As QuickQuoteTieringInformation 'added 7/28/2014
            Get
                'SetObjectsParent(_TieringInformation)
                'Return _TieringInformation
                'updated 7/20/2018
                SetObjectsParent(VersionAndLobInfo.TieringInformation)
                Return VersionAndLobInfo.TieringInformation
            End Get
            Set(value As QuickQuoteTieringInformation)
                '_TieringInformation = value
                'SetObjectsParent(_TieringInformation)
                'updated 7/20/2018
                VersionAndLobInfo.TieringInformation = value
                SetObjectsParent(VersionAndLobInfo.TieringInformation)
            End Set
        End Property

        '9/23/2014 - added EPLI logic from DiamondQuickQuote
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasEPLI As Boolean '4/9/2014
            Get
                'Return _HasEPLI
                'updated 7/20/2018
                Return VersionAndLobInfo.HasEPLI
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasEPLI
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasEPLI = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasEPLI = value
                'updated 7/20/2018
                VersionAndLobInfo.HasEPLI = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EPLI_Applied As Boolean 'added 10/7/2014 for new VR Commercial; not currently used from library
            Get
                'Return _EPLI_Applied
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLI_Applied
            End Get
            Set(value As Boolean)
                '_EPLI_Applied = value
                'updated 7/20/2018
                VersionAndLobInfo.EPLI_Applied = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EPLIPremium As String '4/10/2014
            Get
                'qqHelper.ConvertToQuotedPremiumFormat(_EPLIPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'Return _EPLIPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLIPremium
            End Get
            Set(value As String)
                '_EPLIPremium = value
                'updated 7/20/2018
                VersionAndLobInfo.EPLIPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EPLICoverageLimitId As String '4-10-2014
            Get
                'Return _EPLICoverageLimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLICoverageLimitId
            End Get
            Set(value As String)
                '_EPLICoverageLimitId = value
                'updated 7/20/2018
                VersionAndLobInfo.EPLICoverageLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property EPLICoverageLimit As String '4-10-2014
            Get
                'Select Case _EPLICoverageLimitId
                '    Case "0"
                '        Return "N/A"
                '    Case "360"
                '        Return "100,000/100,000"
                '    Case "361"
                '        Return "250,000/250,000"
                '    Case "362"
                '        Return "500,000/500,000"
                '    Case "363"
                '        Return "1,000,000/1,000,000"
                '    Case Else
                'End Select
                'Return ""
                ''N/A = 0
                ''100,000/100,000 = 360
                ''250,000/250,000 = 361
                ''500,000/500,000 = 362
                ''1,000,000/1,000,000 = 363
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLICoverageLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EPLIDeductibleId As String '4-10-2014
            Get
                'Return _EPLIDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLIDeductibleId
            End Get
            Set(value As String)
                '_EPLIDeductibleId = value
                'updated 7/20/2018
                VersionAndLobInfo.EPLIDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property EPLIDeductible As String '4-10-2014
            Get
                'Select Case _EPLIDeductibleId
                '    Case "16"
                '        Return "5,000"
                '    Case "17"
                '        Return "10,000"
                '    Case "31"
                '        Return "15,000"
                '    Case "18"
                '        Return "20,000"
                '    Case "19"
                '        Return "25,000"
                '    Case Else

                'End Select
                'Return ""
                ''5,000 = 16
                ''10,000 = 17
                ''15,000 = 31
                ''20,000 = 18
                ''25,000 = 19
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLIDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EPLICoverageTypeID As String '4-10-2014
            Get
                'Return _EPLICoverageTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLICoverageTypeID
            End Get
            Set(value As String)
                '_EPLICoverageTypeId = value
                'updated 7/20/2018
                VersionAndLobInfo.EPLICoverageTypeID = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property EPLICoverageType As String '4-10-2014
            Get
                'Select Case _EPLICoverageTypeId
                '    Case "19"
                '        Return "Opt-Out"
                '    Case "20"
                '        Return "Ineligible"
                '    Case "21"
                '        Return "EPLI (underwritten)"
                '    Case "22"
                '        Return "EPLI (non-underwritten)"
                '    Case Else

                'End Select
                'Return ""
                ''EPLI (non-underwritten) = 22
                ''EPLI (underwritten) = 21
                ''Opt-Out = 19
                ''Ineligible = 20
                'Return _EPLICoverageTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.EPLICoverageType
            End Get
        End Property

        ''' <summary>
        ''' MGB 2/9/15 BUG 4040; ported over from DiamondQuickQuote 3/5/2015
        ''' CGL - Blanket Waiver of Subrogation
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketWaiverOfSubrogation As String
            Get
                'Return _BlanketWaiverOfSubrogation
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketWaiverOfSubrogation
            End Get
            Set(value As String)
                '_BlanketWaiverOfSubrogation = value
                'updated 7/20/2018
                VersionAndLobInfo.BlanketWaiverOfSubrogation = value
            End Set
        End Property
        ''' <summary>
        ''' MGB 2/9/15 BUG 4040; ported over from DiamondQuickQuote 3/5/2015
        ''' CGL - Blanket Waiver of Subrogation Quoted Premium
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 70017 (BOP) or 80154 (CGL)</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BlanketWaiverOfSubrogationQuotedPremium As String 'added 8/14/2012 for QuoteSummary dec section
            Get
                'Return _BlanketWaiverOfSubrogationQuotedPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.BlanketWaiverOfSubrogationQuotedPremium
            End Get
            Set(value As String)
                '_BlanketWaiverOfSubrogationQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BlanketWaiverOfSubrogationQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.BlanketWaiverOfSubrogationQuotedPremium = value
            End Set
        End Property


        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasCondoDandO As Boolean ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'Return _HasCondoDandO
                'updated 7/20/2018
                Return VersionAndLobInfo.HasCondoDandO
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasCondoDandO
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasCondoDandO = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasCondoDandO = value
                'updated 7/20/2018
                VersionAndLobInfo.HasCondoDandO = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CondoDandOAssociatedName As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'Return _CondoDandOAssociatedName
                'updated 7/20/2018
                Return VersionAndLobInfo.CondoDandOAssociatedName
            End Get
            Set(value As String)
                '_CondoDandOAssociatedName = value
                'updated 7/20/2018
                VersionAndLobInfo.CondoDandOAssociatedName = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CondoDandODeductibleId As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'Return _CondoDandODeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.CondoDandODeductibleId
            End Get
            Set(value As String)
                '_CondoDandODeductibleId = value
                'updated 7/20/2018
                VersionAndLobInfo.CondoDandODeductibleId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property CondoDandODeductible As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'Select Case _CondoDandODeductibleId
                '    Case "9"
                '        Return "1,000"
                '    Case "15"
                '        Return "2,500"
                '    Case "16"
                '        Return "5,000"
                '    Case "17"
                '        Return "10,000"
                ''Case "31"
                ''    Return "15,000"
                ''Case "18"
                ''    Return "20,000"
                '    Case "19"
                '        Return "25,000"
                '    Case Else

                'End Select
                'Return ""
                'updated 7/20/2018
                Return VersionAndLobInfo.CondoDandODeductible
            End Get

        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CondoDandOPremium As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'qqHelper.ConvertToQuotedPremiumFormat(_CondoDandOPremium, QuickQuoteHelperClass.QuickQuoteEmptyStringReplacementType.NonApplicable)
                'Return _CondoDandOPremium
                'updated 7/20/2018
                Return VersionAndLobInfo.CondoDandOPremium
            End Get
            Set(value As String)
                '_CondoDandOPremium = value
                'updated 7/20/2018
                VersionAndLobInfo.CondoDandOPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CondoDandOManualLimit As String ' added 12/20/2016 Matt A ; added 2/6/2017 from source version to local version
            Get
                'Return _CondoDandOManualLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.CondoDandOManualLimit
            End Get
            Set(value As String)
                '_CondoDandOManualLimit = value
                'updated 7/20/2018
                VersionAndLobInfo.CondoDandOManualLimit = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation As Boolean 'added 10/15/2014 for reconciliation
            Get
                'Return _CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseOperatorNumForOperatorReconciliation As Boolean 'added 10/29/2014
            Get
                'Return _CanUseOperatorNumForOperatorReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseOperatorNumForOperatorReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseOperatorNumForOperatorReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseOperatorNumForOperatorReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseOperatorNumForOperatorReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseOperatorNumForOperatorReconciliation = value
            End Set
        End Property

        'added 11/17/2014 for HOM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_InlandMarinesTotal_Premium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_InlandMarinesTotal_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Locations_InlandMarinesTotal_Premium
            End Get
            Set(value As String)
                '_Locations_InlandMarinesTotal_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_InlandMarinesTotal_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Locations_InlandMarinesTotal_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_InlandMarinesTotal_CoveragePremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_InlandMarinesTotal_CoveragePremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Locations_InlandMarinesTotal_CoveragePremium
            End Get
            Set(value As String)
                '_Locations_InlandMarinesTotal_CoveragePremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_InlandMarinesTotal_CoveragePremium)
                'updated 7/20/2018
                VersionAndLobInfo.Locations_InlandMarinesTotal_CoveragePremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_RvWatercraftsTotal_Premium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_RvWatercraftsTotal_Premium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Locations_RvWatercraftsTotal_Premium
            End Get
            Set(value As String)
                '_Locations_RvWatercraftsTotal_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_RvWatercraftsTotal_Premium)
                'updated 7/20/2018
                VersionAndLobInfo.Locations_RvWatercraftsTotal_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_RvWatercraftsTotal_CoveragesPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_RvWatercraftsTotal_CoveragesPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.Locations_RvWatercraftsTotal_CoveragesPremium
            End Get
            Set(value As String)
                '_Locations_RvWatercraftsTotal_CoveragesPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_RvWatercraftsTotal_CoveragesPremium)
                'updated 7/20/2018
                VersionAndLobInfo.Locations_RvWatercraftsTotal_CoveragesPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FirstWrittenDate As String 'added 11/19/2014; will only be used if it's there... else will keep Diamond default
            Get
                'Return _FirstWrittenDate
                'updated 7/27/2018
                Return TopLevelQuoteInfo.FirstWrittenDate
            End Get
            Set(value As String)
                '_FirstWrittenDate = value
                'qqHelper.ConvertToShortDate(_FirstWrittenDate)
                'updated 7/27/2018
                TopLevelQuoteInfo.FirstWrittenDate = value
            End Set
        End Property

        'added 1/19/2015 for CIM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledCoverages As Generic.List(Of QuickQuoteScheduledCoverage)
            Get
                'SetParentOfListItems(_ScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03999}")
                'Return _ScheduledCoverages
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03999}")
                Return VersionAndLobInfo.ScheduledCoverages
            End Get
            Set(value As Generic.List(Of QuickQuoteScheduledCoverage))
                '_ScheduledCoverages = value
                'SetParentOfListItems(_ScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03999}")
                'updated 7/20/2018
                VersionAndLobInfo.ScheduledCoverages = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A03999}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedScheduledCoverages As Boolean
            Get
                'Return _HasConvertedScheduledCoverages
                'updated 7/20/2018
                Return VersionAndLobInfo.HasConvertedScheduledCoverages
            End Get
            Set(value As Boolean)
                '_HasConvertedScheduledCoverages = value
                'updated 7/20/2018
                VersionAndLobInfo.HasConvertedScheduledCoverages = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseScheduledCoverageNumForScheduledCoverageReconciliation As Boolean 'added 1/22/2015
            Get
                'Return _CanUseScheduledCoverageNumForScheduledCoverageReconciliation
                'updated 7/20/2018
                'Return VersionAndLobInfo.CanUseScheduledCoverageNumForScheduledCoverageReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseScheduledCoverageNumForScheduledCoverageReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseScheduledCoverageNumForScheduledCoverageReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseScheduledCoverageNumForScheduledCoverageReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.CanUseScheduledCoverageNumForScheduledCoverageReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduledCoverages As List(Of QuickQuoteContractorsEquipmentScheduledCoverage) 'added 1/22/2015
            Get
                'SetParentOfListItems(_ContractorsEquipmentScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04000}")
                'Return _ContractorsEquipmentScheduledCoverages
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.ContractorsEquipmentScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04000}")
                Return VersionAndLobInfo.ContractorsEquipmentScheduledCoverages
            End Get
            Set(value As List(Of QuickQuoteContractorsEquipmentScheduledCoverage))
                '_ContractorsEquipmentScheduledCoverages = value
                'SetParentOfListItems(_ContractorsEquipmentScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04000}")
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentScheduledCoverages = value
                SetParentOfListItems(VersionAndLobInfo.ContractorsEquipmentScheduledCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04000}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ContractorsEquipmentScheduledCoveragesTotalQuotedPremium As String 'added 1/28/2015; won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for ContractorsEquipmentScheduledCoverages
            Get
                'Dim tot As String = "0"
                'If _ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso _ContractorsEquipmentScheduledCoverages.Count > 0 Then
                '    For Each sc As QuickQuoteContractorsEquipmentScheduledCoverage In _ContractorsEquipmentScheduledCoverages
                '        tot = qqHelper.getSum(tot, sc.QuotedPremium)
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduledCoveragesTotalQuotedPremium
            End Get
        End Property
        'added 1/23/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduleCoinsuranceTypeId As String 'may need static data placeholder; may be defaulted as there's just one value in dropdown (1 = per 100)
            Get
                'Return _ContractorsEquipmentScheduleCoinsuranceTypeId
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduleCoinsuranceTypeId
            End Get
            Set(value As String)
                '_ContractorsEquipmentScheduleCoinsuranceTypeId = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentScheduleCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduleDeductibleId As String 'may need static data placeholder
            Get
                'Return _ContractorsEquipmentScheduleDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduleDeductibleId
            End Get
            Set(value As String)
                '_ContractorsEquipmentScheduleDeductibleId = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentScheduleDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduleRate As String
            Get
                'Return _ContractorsEquipmentScheduleRate
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduleRate
            End Get
            Set(value As String)
                '_ContractorsEquipmentScheduleRate = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentScheduleRate = value
            End Set
        End Property
        'Public Property ContractorsEquipmentScheduleCoverageBasisTypeId As String 'may need static data placeholder; removed 4/2/2015... will default to 1
        '    Get
        '        Return _ContractorsEquipmentScheduleCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentScheduleCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentScheduleQuotedPremium As String
            Get
                'Return _ContractorsEquipmentScheduleQuotedPremium
                'updated 4/2/2015 to use latest logic; must've been an oversight when initially coding
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentScheduleQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduleQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentScheduleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentScheduleQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentScheduleQuotedPremium = value
            End Set
        End Property
        'Public Property ContractorsEquipmentScheduleDepositPremiumFactor As String 'may not need; appears to be defaulted to 0.500; would need to add DepositPremiumFactor prop to Coverage object (CoverageDetail)
        '    Get
        '        Return _ContractorsEquipmentScheduleDepositPremiumFactor
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentScheduleDepositPremiumFactor = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ContractorsEquipmentScheduleManualLimitAmount As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for ContractorsEquipmentScheduledCoverages
            Get
                'Dim tot As String = "0"
                'If _ContractorsEquipmentScheduledCoverages IsNot Nothing AndAlso _ContractorsEquipmentScheduledCoverages.Count > 0 Then
                '    For Each ce As QuickQuoteContractorsEquipmentScheduledCoverage In _ContractorsEquipmentScheduledCoverages
                '        tot = qqHelper.getSum(tot, ce.ManualLimitAmount)
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentScheduleManualLimitAmount
            End Get
        End Property
        'added 1/27/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentLeasedRentedFromOthersLimit As String
            Get
                'Return _ContractorsEquipmentLeasedRentedFromOthersLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentLeasedRentedFromOthersLimit = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEquipmentLeasedRentedFromOthersLimit)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersLimit = value
            End Set
        End Property
        'Public Property ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId As String
            Get
                'Return _ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId
            End Get
            Set(value As String)
                '_ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentLeasedRentedFromOthersRate As String
            Get
                'Return _ContractorsEquipmentLeasedRentedFromOthersRate
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersRate
            End Get
            Set(value As String)
                '_ContractorsEquipmentLeasedRentedFromOthersRate = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentLeasedRentedFromOthersQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentLeasedRentedFromOthersQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentLeasedRentedFromOthersQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentLeasedRentedFromOthersQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentLeasedRentedFromOthersQuotedPremium = value
            End Set
        End Property
        'added 1/27/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentRentalReimbursementLimit As String
            Get
                'Return _ContractorsEquipmentRentalReimbursementLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentRentalReimbursementLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentRentalReimbursementLimit = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEquipmentRentalReimbursementLimit)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentRentalReimbursementLimit = value
            End Set
        End Property
        'Public Property ContractorsEquipmentRentalReimbursementCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _ContractorsEquipmentRentalReimbursementCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentRentalReimbursementRate As String
            Get
                'Return _ContractorsEquipmentRentalReimbursementRate
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentRentalReimbursementRate
            End Get
            Set(value As String)
                '_ContractorsEquipmentRentalReimbursementRate = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentRentalReimbursementRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentRentalReimbursementQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentRentalReimbursementQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentRentalReimbursementQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentRentalReimbursementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentRentalReimbursementQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentRentalReimbursementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit As String
            Get
                'Return _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = value
            End Set
        End Property
        'Public Property ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate As String
            Get
                'Return _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId As String
            Get
                'Return _ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = value
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerToolLimit As String
            Get
                'Return _ContractorsEquipmentSmallToolsEndorsementPerToolLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerToolLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerToolLimit = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEquipmentSmallToolsEndorsementPerToolLimit)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerToolLimit = value
            End Set
        End Property
        'Public Property ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsLimit As String
            Get
                'Return _SmallToolsLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsLimit
            End Get
            Set(value As String)
                '_SmallToolsLimit = value
                'qqHelper.ConvertToLimitFormat(_SmallToolsLimit)
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsLimit = value
            End Set
        End Property
        'Public Property SmallToolsCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _SmallToolsCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _SmallToolsCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsRate As String
            Get
                'Return _SmallToolsRate
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsRate
            End Get
            Set(value As String)
                '_SmallToolsRate = value
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsDeductibleId As String
            Get
                'Return _SmallToolsDeductibleId
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsDeductibleId
            End Get
            Set(value As String)
                '_SmallToolsDeductibleId = value
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_SmallToolsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04001}")
                'Return _SmallToolsAdditionalInterests
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.SmallToolsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04001}")
                Return VersionAndLobInfo.SmallToolsAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_SmallToolsAdditionalInterests = value
                'SetParentOfListItems(_SmallToolsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04001}")
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.SmallToolsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04001}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_SmallToolsQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsQuotedPremium
            End Get
            Set(value As String)
                '_SmallToolsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SmallToolsQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsIsEmployeeTools As Boolean 'added 7/15/2015 for missed CIM requirement (on small tools floater)
            Get
                'Return _SmallToolsIsEmployeeTools
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsIsEmployeeTools
            End Get
            Set(value As Boolean)
                '_SmallToolsIsEmployeeTools = value
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsIsEmployeeTools = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsIsToolsLeasedOrRented As Boolean 'added 7/15/2015 for missed CIM requirement (on small tools floater)
            Get
                'Return _SmallToolsIsToolsLeasedOrRented
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsIsToolsLeasedOrRented
            End Get
            Set(value As Boolean)
                '_SmallToolsIsToolsLeasedOrRented = value
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsIsToolsLeasedOrRented = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsAnyOneLossCatastropheLimit As String
            Get
                'Return _SmallToolsAnyOneLossCatastropheLimit
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsAnyOneLossCatastropheLimit
            End Get
            Set(value As String)
                '_SmallToolsAnyOneLossCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_SmallToolsAnyOneLossCatastropheLimit)
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsAnyOneLossCatastropheLimit = value
            End Set
        End Property
        'Public Property SmallToolsAnyOneLossCatastropheCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _SmallToolsAnyOneLossCatastropheCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SmallToolsAnyOneLossCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_SmallToolsAnyOneLossCatastropheQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.SmallToolsAnyOneLossCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_SmallToolsAnyOneLossCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SmallToolsAnyOneLossCatastropheQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.SmallToolsAnyOneLossCatastropheQuotedPremium = value
            End Set
        End Property
        'added 1/28/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationScheduledLocations As List(Of QuickQuoteInstallationScheduledLocation)
            Get
                'SetParentOfListItems(_InstallationScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04002}")
                'Return _InstallationScheduledLocations
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.InstallationScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04002}")
                Return VersionAndLobInfo.InstallationScheduledLocations
            End Get
            Set(value As List(Of QuickQuoteInstallationScheduledLocation))
                '_InstallationScheduledLocations = value
                'SetParentOfListItems(_InstallationScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04002}")
                'updated 7/20/2018
                VersionAndLobInfo.InstallationScheduledLocations = value
                SetParentOfListItems(VersionAndLobInfo.InstallationScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04002}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property InstallationScheduledLocationsTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for InstallationScheduledLocations
            Get
                'Dim tot As String = "0"
                'If _InstallationScheduledLocations IsNot Nothing AndAlso _InstallationScheduledLocations.Count > 0 Then
                '    For Each isl As QuickQuoteInstallationScheduledLocation In _InstallationScheduledLocations
                '        tot = qqHelper.getSum(tot, isl.Limit)
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/20/2018
                Return VersionAndLobInfo.InstallationScheduledLocationsTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property InstallationScheduledLocationsTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for InstallationScheduledLocations
            Get
                'Dim tot As String = "0"
                'If _InstallationScheduledLocations IsNot Nothing AndAlso _InstallationScheduledLocations.Count > 0 Then
                '    For Each isl As QuickQuoteInstallationScheduledLocation In _InstallationScheduledLocations
                '        tot = qqHelper.getSum(tot, isl.QuotedPremium)
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/20/2018
                Return VersionAndLobInfo.InstallationScheduledLocationsTotalQuotedPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationQuotedPremium)
                'updated 7/20/2018
                Return VersionAndLobInfo.InstallationQuotedPremium
            End Get
            Set(value As String)
                '_InstallationQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationQuotedPremium)
                'updated 7/20/2018
                VersionAndLobInfo.InstallationQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_InstallationAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04003}")
                'Return _InstallationAdditionalInterests
                'updated 7/20/2018
                SetParentOfListItems(VersionAndLobInfo.InstallationAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04003}")
                Return VersionAndLobInfo.InstallationAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_InstallationAdditionalInterests = value
                'SetParentOfListItems(_InstallationAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04003}")
                'updated 7/20/2018
                VersionAndLobInfo.InstallationAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.InstallationAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04003}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketLimit As String
            Get
                'Return _InstallationBlanketLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketLimit
            End Get
            Set(value As String)
                '_InstallationBlanketLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationBlanketLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketCoinsuranceTypeId As String
            Get
                'Return _InstallationBlanketCoinsuranceTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketCoinsuranceTypeId
            End Get
            Set(value As String)
                '_InstallationBlanketCoinsuranceTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketDeductibleId As String
            Get
                'Return _InstallationBlanketDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketDeductibleId
            End Get
            Set(value As String)
                '_InstallationBlanketDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketRate As String
            Get
                'Return _InstallationBlanketRate
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketRate
            End Get
            Set(value As String)
                '_InstallationBlanketRate = value
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketRate = value
            End Set
        End Property
        'Public Property InstallationBlanketCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _InstallationBlanketCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _InstallationBlanketCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationBlanketQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketQuotedPremium
            End Get
            Set(value As String)
                '_InstallationBlanketQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationBlanketQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketAnyOneLossCatastropheLimit As String
            Get
                'Return _InstallationBlanketAnyOneLossCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketAnyOneLossCatastropheLimit
            End Get
            Set(value As String)
                '_InstallationBlanketAnyOneLossCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationBlanketAnyOneLossCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketAnyOneLossCatastropheLimit = value
            End Set
        End Property
        'Public Property InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId As String 'removed 4/2/2015... will default to 1
        '    Get
        '        Return _InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId
        '    End Get
        '    Set(value As String)
        '        _InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = value
        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationBlanketAnyOneLossCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationBlanketAnyOneLossCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationBlanketAnyOneLossCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_InstallationBlanketAnyOneLossCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationBlanketAnyOneLossCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationBlanketAnyOneLossCatastropheQuotedPremium = value
            End Set
        End Property
        'added 2/2/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationAdditionalDebrisRemovalExpenseLimit As String
            Get
                'Return _InstallationAdditionalDebrisRemovalExpenseLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationAdditionalDebrisRemovalExpenseLimit
            End Get
            Set(value As String)
                '_InstallationAdditionalDebrisRemovalExpenseLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationAdditionalDebrisRemovalExpenseLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationAdditionalDebrisRemovalExpenseLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationAdditionalDebrisRemovalExpenseQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationAdditionalDebrisRemovalExpenseQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationAdditionalDebrisRemovalExpenseQuotedPremium
            End Get
            Set(value As String)
                '_InstallationAdditionalDebrisRemovalExpenseQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationAdditionalDebrisRemovalExpenseQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationAdditionalDebrisRemovalExpenseQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationStorageLocationsLimit As String
            Get
                'Return _InstallationStorageLocationsLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationStorageLocationsLimit
            End Get
            Set(value As String)
                '_InstallationStorageLocationsLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationStorageLocationsLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationStorageLocationsLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationStorageLocationsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationStorageLocationsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationStorageLocationsQuotedPremium
            End Get
            Set(value As String)
                '_InstallationStorageLocationsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationStorageLocationsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationStorageLocationsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationTransitLimit As String
            Get
                'Return _InstallationTransitLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationTransitLimit
            End Get
            Set(value As String)
                '_InstallationTransitLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationTransitLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationTransitLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationTransitQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationTransitQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationTransitQuotedPremium
            End Get
            Set(value As String)
                '_InstallationTransitQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationTransitQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationTransitQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationTestingLimit As String
            Get
                'Return _InstallationTestingLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationTestingLimit
            End Get
            Set(value As String)
                '_InstallationTestingLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationTestingLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationTestingLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationTestingQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationTestingQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationTestingQuotedPremium
            End Get
            Set(value As String)
                '_InstallationTestingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationTestingQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationTestingQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationSewerBackupLimit As String
            Get
                'Return _InstallationSewerBackupLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationSewerBackupLimit
            End Get
            Set(value As String)
                '_InstallationSewerBackupLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationSewerBackupLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationSewerBackupLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationSewerBackupDeductible As String
            Get
                'Return _InstallationSewerBackupDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationSewerBackupDeductible
            End Get
            Set(value As String)
                '_InstallationSewerBackupDeductible = value 'might need limit formatting
                'updated 7/21/2018
                VersionAndLobInfo.InstallationSewerBackupDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationSewerBackupQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationSewerBackupQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationSewerBackupQuotedPremium
            End Get
            Set(value As String)
                '_InstallationSewerBackupQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationSewerBackupQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationSewerBackupQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationSewerBackupCatastropheLimit As String
            Get
                'Return _InstallationSewerBackupCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationSewerBackupCatastropheLimit
            End Get
            Set(value As String)
                '_InstallationSewerBackupCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationSewerBackupCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationSewerBackupCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationSewerBackupCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationSewerBackupCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationSewerBackupCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_InstallationSewerBackupCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationSewerBackupCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationSewerBackupCatastropheQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationEarthquakeLimit As String
            Get
                'Return _InstallationEarthquakeLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationEarthquakeLimit
            End Get
            Set(value As String)
                '_InstallationEarthquakeLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationEarthquakeLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationEarthquakeLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationEarthquakeDeductible As String
            Get
                'Return _InstallationEarthquakeDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationEarthquakeDeductible
            End Get
            Set(value As String)
                '_InstallationEarthquakeDeductible = value 'might need limit formatting
                'updated 7/21/2018
                VersionAndLobInfo.InstallationEarthquakeDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationEarthquakeQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationEarthquakeQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationEarthquakeQuotedPremium
            End Get
            Set(value As String)
                '_InstallationEarthquakeQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationEarthquakeQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationEarthquakeQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationEarthquakeCatastropheLimit As String
            Get
                'Return _InstallationEarthquakeCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationEarthquakeCatastropheLimit
            End Get
            Set(value As String)
                '_InstallationEarthquakeCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_InstallationEarthquakeCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationEarthquakeCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InstallationEarthquakeCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InstallationEarthquakeCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InstallationEarthquakeCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_InstallationEarthquakeCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InstallationEarthquakeCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InstallationEarthquakeCatastropheQuotedPremium = value
            End Set
        End Property
        'added 2/9/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BusinessPersonalPropertyLimit As String 'shown in UI Installation Coverage Extensions section, but may not be specific to Installation
            Get
                'Return _BusinessPersonalPropertyLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.BusinessPersonalPropertyLimit
            End Get
            Set(value As String)
                '_BusinessPersonalPropertyLimit = value
                'qqHelper.ConvertToLimitFormat(_BusinessPersonalPropertyLimit)
                'updated 7/21/2018
                VersionAndLobInfo.BusinessPersonalPropertyLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BusinessPersonalPropertyQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BusinessPersonalPropertyQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BusinessPersonalPropertyQuotedPremium
            End Get
            Set(value As String)
                '_BusinessPersonalPropertyQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BusinessPersonalPropertyQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BusinessPersonalPropertyQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyItems As List(Of QuickQuoteScheduledPropertyItem)
            Get
                'SetParentOfListItems(_ScheduledPropertyItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A04004}")
                'Return _ScheduledPropertyItems
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledPropertyItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A04004}")
                Return VersionAndLobInfo.ScheduledPropertyItems
            End Get
            Set(value As List(Of QuickQuoteScheduledPropertyItem))
                '_ScheduledPropertyItems = value
                'SetParentOfListItems(_ScheduledPropertyItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A04004}")
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyItems = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledPropertyItems, "{663B7C7B-F2AC-4BF6-965A-D30F41A04004}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ScheduledPropertyItemsTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for ScheduledPropertyItems
            Get
                'Dim tot As String = "0"
                'If _ScheduledPropertyItems IsNot Nothing AndAlso _ScheduledPropertyItems.Count > 0 Then
                '    For Each sp As QuickQuoteScheduledPropertyItem In _ScheduledPropertyItems
                '        tot = qqHelper.getSum(tot, sp.Limit)
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyItemsTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ScheduledPropertyItemsTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for ScheduledPropertyItems
            Get
                'Dim tot As String = "0"
                'If _ScheduledPropertyItems IsNot Nothing AndAlso _ScheduledPropertyItems.Count > 0 Then
                '    For Each sp As QuickQuoteScheduledPropertyItem In _ScheduledPropertyItems
                '        tot = qqHelper.getSum(tot, sp.QuotedPremium)
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyItemsTotalQuotedPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_ScheduledPropertyAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04005}")
                'Return _ScheduledPropertyAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledPropertyAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04005}")
                Return VersionAndLobInfo.ScheduledPropertyAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_ScheduledPropertyAdditionalInterests = value
                'SetParentOfListItems(_ScheduledPropertyAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04005}")
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledPropertyAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04005}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyCoinsuranceTypeId As String
            Get
                'Return _ScheduledPropertyCoinsuranceTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyCoinsuranceTypeId
            End Get
            Set(value As String)
                '_ScheduledPropertyCoinsuranceTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyDeductibleId As String
            Get
                'Return _ScheduledPropertyDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyDeductibleId
            End Get
            Set(value As String)
                '_ScheduledPropertyDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyRate As String
            Get
                'Return _ScheduledPropertyRate
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyRate
            End Get
            Set(value As String)
                '_ScheduledPropertyRate = value
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyNamedPerils As Boolean
            Get
                'Return _ScheduledPropertyNamedPerils
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyNamedPerils
            End Get
            Set(value As Boolean)
                '_ScheduledPropertyNamedPerils = value
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyNamedPerils = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPropertyQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ScheduledPropertyQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ScheduledPropertyQuotedPremium
            End Get
            Set(value As String)
                '_ScheduledPropertyQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ScheduledPropertyQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPropertyQuotedPremium = value
            End Set
        End Property
        'added 2/10/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ComputerBuildingsTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for applicable buildings covs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                tot = qqHelper.getSum(tot, b.ComputerHardwareLimit)
                '                tot = qqHelper.getSum(tot, b.ComputerProgramsApplicationsAndMediaLimit)
                '                tot = qqHelper.getSum(tot, b.ComputerBusinessIncomeLimit)
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.ComputerBuildingsTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ComputerBuildingsTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for applicable buildings covs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                tot = qqHelper.getSum(tot, b.ComputerHardwareQuotedPremium)
                '                tot = qqHelper.getSum(tot, b.ComputerProgramsApplicationsAndMediaQuotedPremium)
                '                tot = qqHelper.getSum(tot, b.ComputerBusinessIncomeQuotedPremium)
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.ComputerBuildingsTotalQuotedPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerCoinsuranceTypeId As String 'cov also has CoverageBasisTypeId set to 1
            Get
                'Return _ComputerCoinsuranceTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerCoinsuranceTypeId
            End Get
            Set(value As String)
                '_ComputerCoinsuranceTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.ComputerCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerExcludeEarthquake As Boolean
            Get
                'Return _ComputerExcludeEarthquake
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerExcludeEarthquake
            End Get
            Set(value As Boolean)
                '_ComputerExcludeEarthquake = value
                'updated 7/21/2018
                VersionAndLobInfo.ComputerExcludeEarthquake = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerValuationMethodTypeId As String
            Get
                'Return _ComputerValuationMethodTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerValuationMethodTypeId
            End Get
            Set(value As String)
                '_ComputerValuationMethodTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.ComputerValuationMethodTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_ComputerAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04006}")
                'Return _ComputerAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ComputerAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04006}")
                Return VersionAndLobInfo.ComputerAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_ComputerAdditionalInterests = value
                'SetParentOfListItems(_ComputerAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04006}")
                'updated 7/21/2018
                VersionAndLobInfo.ComputerAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.ComputerAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04006}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ComputerQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerQuotedPremium
            End Get
            Set(value As String)
                '_ComputerQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ComputerQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ComputerQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerAllPerilsDeductibleId As String 'cov also has CoverageBasisTypeId set to 1
            Get
                'Return _ComputerAllPerilsDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerAllPerilsDeductibleId
            End Get
            Set(value As String)
                '_ComputerAllPerilsDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.ComputerAllPerilsDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerAllPerilsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ComputerAllPerilsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerAllPerilsQuotedPremium
            End Get
            Set(value As String)
                '_ComputerAllPerilsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ComputerAllPerilsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ComputerAllPerilsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerEarthquakeVolcanicEruptionDeductible As String 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
            Get
                'Return _ComputerEarthquakeVolcanicEruptionDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerEarthquakeVolcanicEruptionDeductible
            End Get
            Set(value As String)
                '_ComputerEarthquakeVolcanicEruptionDeductible = value 'might need limit formatting
                'updated 7/21/2018
                VersionAndLobInfo.ComputerEarthquakeVolcanicEruptionDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerEarthquakeVolcanicEruptionQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ComputerEarthquakeVolcanicEruptionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerEarthquakeVolcanicEruptionQuotedPremium
            End Get
            Set(value As String)
                '_ComputerEarthquakeVolcanicEruptionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ComputerEarthquakeVolcanicEruptionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ComputerEarthquakeVolcanicEruptionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerMechanicalBreakdownDeductible As String 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
            Get
                'Return _ComputerMechanicalBreakdownDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerMechanicalBreakdownDeductible
            End Get
            Set(value As String)
                '_ComputerMechanicalBreakdownDeductible = value 'might need limit formatting
                'updated 7/21/2018
                VersionAndLobInfo.ComputerMechanicalBreakdownDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerMechanicalBreakdownQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ComputerMechanicalBreakdownQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ComputerMechanicalBreakdownQuotedPremium
            End Get
            Set(value As String)
                '_ComputerMechanicalBreakdownQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ComputerMechanicalBreakdownQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ComputerMechanicalBreakdownQuotedPremium = value
            End Set
        End Property
        'added 2/18/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskDeductibleId As String 'cov also has CoverageBasisTypeId set to 1
            Get
                'Return _BuildersRiskDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskDeductibleId
            End Get
            Set(value As String)
                '_BuildersRiskDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskRate As String
            Get
                'Return _BuildersRiskRate
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskRate
            End Get
            Set(value As String)
                '_BuildersRiskRate = value
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_BuildersRiskAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04007}")
                'Return _BuildersRiskAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.BuildersRiskAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04007}")
                Return VersionAndLobInfo.BuildersRiskAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_BuildersRiskAdditionalInterests = value
                'SetParentOfListItems(_BuildersRiskAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04007}")
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.BuildersRiskAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04007}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BuildersRiskQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskQuotedPremium
            End Get
            Set(value As String)
                '_BuildersRiskQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BuildersRiskQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduledLocations As List(Of QuickQuoteBuildersRiskScheduledLocation)
            Get
                'SetParentOfListItems(_BuildersRiskScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04008}")
                'Return _BuildersRiskScheduledLocations
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.BuildersRiskScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04008}")
                Return VersionAndLobInfo.BuildersRiskScheduledLocations
            End Get
            Set(value As List(Of QuickQuoteBuildersRiskScheduledLocation))
                '_BuildersRiskScheduledLocations = value
                'SetParentOfListItems(_BuildersRiskScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04008}")
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduledLocations = value
                SetParentOfListItems(VersionAndLobInfo.BuildersRiskScheduledLocations, "{663B7C7B-F2AC-4BF6-965A-D30F41A04008}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property BuildersRiskScheduledLocationsTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for BuildersRiskScheduledLocations; 2/19/2015 note: this should also include Coverage.ManualLimitAmount for other covs under ScheduledCoverage... currently looking at 21348 (Builder's Risk - Schedule) only
            Get
                'Dim tot As String = "0"
                'If _BuildersRiskScheduledLocations IsNot Nothing AndAlso _BuildersRiskScheduledLocations.Count > 0 Then
                '    For Each isl As QuickQuoteBuildersRiskScheduledLocation In _BuildersRiskScheduledLocations
                '        tot = qqHelper.getSum(tot, isl.Limit)
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduledLocationsTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property BuildersRiskScheduledLocationsTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for BuildersRiskScheduledLocations
            Get
                'Dim tot As String = "0"
                'If _BuildersRiskScheduledLocations IsNot Nothing AndAlso _BuildersRiskScheduledLocations.Count > 0 Then
                '    For Each isl As QuickQuoteBuildersRiskScheduledLocation In _BuildersRiskScheduledLocations
                '        tot = qqHelper.getSum(tot, isl.QuotedPremium)
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduledLocationsTotalQuotedPremium
            End Get
        End Property
        'added 6/17/2017 for Diamond Proposals
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleStorageLocationsLimit As String
            Get
                'Return _BuildersRiskScheduleStorageLocationsLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleStorageLocationsLimit
            End Get
            Set(value As String)
                '_BuildersRiskScheduleStorageLocationsLimit = value
                'qqHelper.ConvertToLimitFormat(_BuildersRiskScheduleStorageLocationsLimit)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleStorageLocationsLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleStorageLocationsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BuildersRiskScheduleStorageLocationsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleStorageLocationsQuotedPremium
            End Get
            Set(value As String)
                '_BuildersRiskScheduleStorageLocationsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BuildersRiskScheduleStorageLocationsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleStorageLocationsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleTransitLimit As String
            Get
                'Return _BuildersRiskScheduleTransitLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleTransitLimit
            End Get
            Set(value As String)
                '_BuildersRiskScheduleTransitLimit = value
                'qqHelper.ConvertToLimitFormat(_BuildersRiskScheduleTransitLimit)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleTransitLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleTransitQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BuildersRiskScheduleTransitQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleTransitQuotedPremium
            End Get
            Set(value As String)
                '_BuildersRiskScheduleTransitQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BuildersRiskScheduleTransitQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleTransitQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleTestingLimit As String
            Get
                'Return _BuildersRiskScheduleTestingLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleTestingLimit
            End Get
            Set(value As String)
                '_BuildersRiskScheduleTestingLimit = value
                'qqHelper.ConvertToLimitFormat(_BuildersRiskScheduleTestingLimit)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleTestingLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BuildersRiskScheduleTestingQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BuildersRiskScheduleTestingQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BuildersRiskScheduleTestingQuotedPremium
            End Get
            Set(value As String)
                '_BuildersRiskScheduleTestingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BuildersRiskScheduleTestingQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BuildersRiskScheduleTestingQuotedPremium = value
            End Set
        End Property
        'added 3/16/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsDeductibleCategoryTypeId As String 'static data
            Get
                'Return _FineArtsDeductibleCategoryTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsDeductibleCategoryTypeId
            End Get
            Set(value As String)
                '_FineArtsDeductibleCategoryTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsDeductibleCategoryTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsRate As String
            Get
                'Return _FineArtsRate
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsRate
            End Get
            Set(value As String)
                '_FineArtsRate = value
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsDeductibleId As String 'static data
            Get
                'Return _FineArtsDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsDeductibleId
            End Get
            Set(value As String)
                '_FineArtsDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FineArtsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsQuotedPremium
            End Get
            Set(value As String)
                '_FineArtsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FineArtsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_FineArtsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04009}")
                'Return _FineArtsAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.FineArtsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04009}")
                Return VersionAndLobInfo.FineArtsAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_FineArtsAdditionalInterests = value
                'SetParentOfListItems(_FineArtsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04009}")
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.FineArtsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04009}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FineArtsBuildingsTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for applicable buildings covs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                If b.FineArtsScheduledItems IsNot Nothing AndAlso b.FineArtsScheduledItems.Count > 0 Then
                '                    For Each fa As QuickQuoteFineArtsScheduledItem In b.FineArtsScheduledItems
                '                        tot = qqHelper.getSum(tot, fa.Limit)
                '                    Next
                '                End If
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018; note: this one works fine but will use Property on VersionAndLobInfo instead to keep more of that logic together
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.FineArtsBuildingsTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FineArtsBuildingsTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for applicable buildings covs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                If b.FineArtsScheduledItems IsNot Nothing AndAlso b.FineArtsScheduledItems.Count > 0 Then
                '                    For Each fa As QuickQuoteFineArtsScheduledItem In b.FineArtsScheduledItems
                '                        tot = qqHelper.getSum(tot, fa.QuotedPremium)
                '                    Next
                '                End If
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018; note: this one works fine but will use Property on VersionAndLobInfo instead to keep more of that logic together
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.FineArtsBuildingsTotalQuotedPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsBreakageMarringOrScratching As Boolean 'renamed 3/17/2015 from HasFineArtsBreakageMarringOrScratching
            Get
                'Return _FineArtsBreakageMarringOrScratching
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsBreakageMarringOrScratching
            End Get
            Set(value As Boolean)
                '_FineArtsBreakageMarringOrScratching = value
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsBreakageMarringOrScratching = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FineArtsBreakageMarringOrScratchingQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FineArtsBreakageMarringOrScratchingQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FineArtsBreakageMarringOrScratchingQuotedPremium
            End Get
            Set(value As String)
                '_FineArtsBreakageMarringOrScratchingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FineArtsBreakageMarringOrScratchingQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FineArtsBreakageMarringOrScratchingQuotedPremium = value
            End Set
        End Property
        'added 3/17/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleLimit As String
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleLimit
            End Get
            Set(value As String)
                '_OwnersCargoAnyOneOwnedVehicleLimit = value
                'qqHelper.ConvertToLimitFormat(_OwnersCargoAnyOneOwnedVehicleLimit)
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleDeductibleId As String 'static data
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleDeductibleId
            End Get
            Set(value As String)
                '_OwnersCargoAnyOneOwnedVehicleDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleRate As String
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleRate
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleRate
            End Get
            Set(value As String)
                '_OwnersCargoAnyOneOwnedVehicleRate = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleDescription As String
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleDescription
            End Get
            Set(value As String)
                '_OwnersCargoAnyOneOwnedVehicleDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_OwnersCargoAnyOneOwnedVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04010}")
                'Return _OwnersCargoAnyOneOwnedVehicleAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04010}")
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_OwnersCargoAnyOneOwnedVehicleAdditionalInterests = value
                'SetParentOfListItems(_OwnersCargoAnyOneOwnedVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04010}")
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04010}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleLoadingUnloading As Boolean
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleLoadingUnloading
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleLoadingUnloading
            End Get
            Set(value As Boolean)
                '_OwnersCargoAnyOneOwnedVehicleLoadingUnloading = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleLoadingUnloading = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleNamedPerils As Boolean
            Get
                'Return _OwnersCargoAnyOneOwnedVehicleNamedPerils
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleNamedPerils
            End Get
            Set(value As Boolean)
                '_OwnersCargoAnyOneOwnedVehicleNamedPerils = value
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleNamedPerils = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoAnyOneOwnedVehicleQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_OwnersCargoAnyOneOwnedVehicleQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleQuotedPremium
            End Get
            Set(value As String)
                '_OwnersCargoAnyOneOwnedVehicleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_OwnersCargoAnyOneOwnedVehicleQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoAnyOneOwnedVehicleQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoCatastropheLimit As String
            Get
                'Return _OwnersCargoCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoCatastropheLimit
            End Get
            Set(value As String)
                '_OwnersCargoCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_OwnersCargoCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersCargoCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_OwnersCargoCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.OwnersCargoCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_OwnersCargoCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_OwnersCargoCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.OwnersCargoCatastropheQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheLimit As String
            Get
                'Return _TransportationCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheLimit
            End Get
            Set(value As String)
                '_TransportationCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_TransportationCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheDeductibleId As String 'static data
            Get
                'Return _TransportationCatastropheDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheDeductibleId
            End Get
            Set(value As String)
                '_TransportationCatastropheDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheDescription As String
            Get
                'Return _TransportationCatastropheDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheDescription
            End Get
            Set(value As String)
                '_TransportationCatastropheDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_TransportationCatastropheAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04011}")
                'Return _TransportationCatastropheAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.TransportationCatastropheAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04011}")
                Return VersionAndLobInfo.TransportationCatastropheAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_TransportationCatastropheAdditionalInterests = value
                'SetParentOfListItems(_TransportationCatastropheAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04011}")
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.TransportationCatastropheAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04011}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheLoadingUnloading As Boolean
            Get
                'Return _TransportationCatastropheLoadingUnloading
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheLoadingUnloading
            End Get
            Set(value As Boolean)
                '_TransportationCatastropheLoadingUnloading = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheLoadingUnloading = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheNamedPerils As Boolean
            Get
                'Return _TransportationCatastropheNamedPerils
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheNamedPerils
            End Get
            Set(value As Boolean)
                '_TransportationCatastropheNamedPerils = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheNamedPerils = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_TransportationCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_TransportationCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TransportationCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.TransportationCatastropheQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationAnyOneOwnedVehicleLimit As String 'note: cov also has CoverageBasisTypeId set to 1
            Get
                'Return _TransportationAnyOneOwnedVehicleLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationAnyOneOwnedVehicleLimit
            End Get
            Set(value As String)
                '_TransportationAnyOneOwnedVehicleLimit = value
                'qqHelper.ConvertToLimitFormat(_TransportationAnyOneOwnedVehicleLimit)
                'updated 7/21/2018
                VersionAndLobInfo.TransportationAnyOneOwnedVehicleLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationAnyOneOwnedVehicleNumberOfVehicles As String 'CoverageDetail
            Get
                'Return _TransportationAnyOneOwnedVehicleNumberOfVehicles
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationAnyOneOwnedVehicleNumberOfVehicles
            End Get
            Set(value As String)
                '_TransportationAnyOneOwnedVehicleNumberOfVehicles = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationAnyOneOwnedVehicleNumberOfVehicles = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationAnyOneOwnedVehicleRate As String
            Get
                'Return _TransportationAnyOneOwnedVehicleRate
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationAnyOneOwnedVehicleRate
            End Get
            Set(value As String)
                '_TransportationAnyOneOwnedVehicleRate = value
                'updated 7/21/2018
                VersionAndLobInfo.TransportationAnyOneOwnedVehicleRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransportationAnyOneOwnedVehicleQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_TransportationAnyOneOwnedVehicleQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.TransportationAnyOneOwnedVehicleQuotedPremium
            End Get
            Set(value As String)
                '_TransportationAnyOneOwnedVehicleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_TransportationAnyOneOwnedVehicleQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.TransportationAnyOneOwnedVehicleQuotedPremium = value
            End Set
        End Property
        'added 3/18/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicles As List(Of QuickQuoteScheduledVehicle)
            Get
                'SetParentOfListItems(_MotorTruckCargoScheduledVehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A04012}")
                'Return _MotorTruckCargoScheduledVehicles
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoScheduledVehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A04012}")
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicles
            End Get
            Set(value As List(Of QuickQuoteScheduledVehicle))
                '_MotorTruckCargoScheduledVehicles = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicles = value
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoScheduledVehicles, "{663B7C7B-F2AC-4BF6-965A-D30F41A04012}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property MotorTruckCargoScheduledVehiclesTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for MotorTruckCargoScheduledVehicles
            Get
                'Dim tot As String = "0"
                'If _MotorTruckCargoScheduledVehicles IsNot Nothing AndAlso _MotorTruckCargoScheduledVehicles.Count > 0 Then
                '    For Each sv As QuickQuoteScheduledVehicle In _MotorTruckCargoScheduledVehicles
                '        tot = qqHelper.getSum(tot, sv.Limit)
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehiclesTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property MotorTruckCargoScheduledVehiclesTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for MotorTruckCargoScheduledVehicles
            Get
                'Dim tot As String = "0"
                'If _MotorTruckCargoScheduledVehicles IsNot Nothing AndAlso _MotorTruckCargoScheduledVehicles.Count > 0 Then
                '    For Each sv As QuickQuoteScheduledVehicle In _MotorTruckCargoScheduledVehicles
                '        tot = qqHelper.getSum(tot, sv.QuotedPremium)
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehiclesTotalQuotedPremium
            End Get
        End Property
        'added 3/23/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_MotorTruckCargoScheduledVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04013}")
                'Return _MotorTruckCargoScheduledVehicleAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoScheduledVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04013}")
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_MotorTruckCargoScheduledVehicleAdditionalInterests = value
                'SetParentOfListItems(_MotorTruckCargoScheduledVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04013}")
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoScheduledVehicleAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04013}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleLoadingUnloading As Boolean 'CoverageDetail
            Get
                'Return _MotorTruckCargoScheduledVehicleLoadingUnloading
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleLoadingUnloading
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoScheduledVehicleLoadingUnloading = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleLoadingUnloading = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleNamedPerils As Boolean 'CoverageDetail
            Get
                'Return _MotorTruckCargoScheduledVehicleNamedPerils
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleNamedPerils
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoScheduledVehicleNamedPerils = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleNamedPerils = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleOperatingRadius As String 'CoverageDetail
            Get
                'Return _MotorTruckCargoScheduledVehicleOperatingRadius
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleOperatingRadius
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleOperatingRadius = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleOperatingRadius = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleRate As String 'CoverageDetail
            Get
                'Return _MotorTruckCargoScheduledVehicleRate
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleRate
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleRate = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleDeductibleId As String 'static data
            Get
                'Return _MotorTruckCargoScheduledVehicleDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleDeductibleId
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleDescription As String
            Get
                'Return _MotorTruckCargoScheduledVehicleDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleDescription
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_MotorTruckCargoScheduledVehicleQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleQuotedPremium
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotorTruckCargoScheduledVehicleQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleQuotedPremium = value
            End Set
        End Property
        'added 3/24/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleCatastropheLimit As String
            Get
                'Return _MotorTruckCargoScheduledVehicleCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleCatastropheLimit
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_MotorTruckCargoScheduledVehicleCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoScheduledVehicleCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_MotorTruckCargoScheduledVehicleCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoScheduledVehicleCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_MotorTruckCargoScheduledVehicleCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotorTruckCargoScheduledVehicleCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.MotorTruckCargoScheduledVehicleCatastropheQuotedPremium = value
            End Set
        End Property
        'added 7/08/2025
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledNumberOfVehicles As String
            Get
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledNumberOfVehicles
            End Get
            Set(value As String)
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledNumberOfVehicles = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledAnyVehicleLimit As String
            Get
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledAnyVehicleLimit
            End Get
            Set(value As String)
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledAnyVehicleLimit = value
            End Set
        End Property
        'updated 7/8/2025
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleAdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleAdditionalInterests, "{4DD71976-954E-4DA5-B417-8ABC763D692F}")
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleAdditionalInterests, "{4DD71976-954E-4DA5-B417-8ABC763D692F}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleLoadingUnloading As Boolean 'CoverageDetail
            Get
                'Return _MotorTruckCargoUnScheduledVehicleLoadingUnloading
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleLoadingUnloading
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoUnScheduledVehicleLoadingUnloading = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleLoadingUnloading = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleNamedPerils As Boolean 'CoverageDetail
            Get
                'Return _MotorTruckCargoUnScheduledVehicleNamedPerils
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleNamedPerils
            End Get
            Set(value As Boolean)
                '_MotorTruckCargoUnScheduledVehicleNamedPerils = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleNamedPerils = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleOperatingRadius As String 'CoverageDetail
            Get
                'Return _MotorTruckCargoUnScheduledVehicleOperatingRadius
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleOperatingRadius
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleOperatingRadius = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleOperatingRadius = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleRate As String 'CoverageDetail
            Get
                'Return _MotorTruckCargoUnScheduledVehicleRate
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleRate
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleRate = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleDeductibleId As String 'static data
            Get
                'Return _MotorTruckCargoUnScheduledVehicleDeductibleId
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleDeductibleId
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleDeductibleId = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleDescription As String
            Get
                'Return _MotorTruckCargoUnScheduledVehicleDescription
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleDescription
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleDescription = value
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleQuotedPremium As String
            Get
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleQuotedPremium = value
            End Set
        End Property
        'updated 7/8/2025
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleCatastropheLimit As String
            Get
                'Return _MotorTruckCargoUnScheduledVehicleCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCatastropheLimit
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_MotorTruckCargoUnScheduledVehicleCatastropheLimit)
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium)
                'updated 7/8/2025
                Return VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium)
                'updated 7/8/2025
                VersionAndLobInfo.MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium = value
            End Set
        End Property

        'added 3/25/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsAdditionalInterests As List(Of QuickQuoteAdditionalInterest) 'note: cov also has CoverageBasisTypeId set to 1
            Get
                'SetParentOfListItems(_SignsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04014}")
                'Return _SignsAdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.SignsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04014}")
                Return VersionAndLobInfo.SignsAdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_SignsAdditionalInterests = value
                'SetParentOfListItems(_SignsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04014}")
                'updated 7/21/2018
                VersionAndLobInfo.SignsAdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.SignsAdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04014}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation
            End Get
            Set(value As Boolean)
                '_SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsMaximumDeductible As String 'CoverageDetail; may need limit formatting
            Get
                'Return _SignsMaximumDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsMaximumDeductible
            End Get
            Set(value As String)
                '_SignsMaximumDeductible = value
                'updated 7/21/2018
                VersionAndLobInfo.SignsMaximumDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsMinimumDeductible As String 'CoverageDetail; may need limit formatting
            Get
                'Return _SignsMinimumDeductible
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsMinimumDeductible
            End Get
            Set(value As String)
                '_SignsMinimumDeductible = value
                'updated 7/21/2018
                VersionAndLobInfo.SignsMinimumDeductible = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsValuationMethodTypeId As String 'CoverageDetail; static data
            Get
                'Return _SignsValuationMethodTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsValuationMethodTypeId
            End Get
            Set(value As String)
                '_SignsValuationMethodTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.SignsValuationMethodTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsDeductibleId As String 'static data
            Get
                'Return _SignsDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsDeductibleId
            End Get
            Set(value As String)
                '_SignsDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.SignsDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_SignsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsQuotedPremium
            End Get
            Set(value As String)
                '_SignsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SignsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.SignsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property SignsBuildingTotalLimit As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for building scheduled/unscheduled signs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                'updated logic to use building props 3/26/2015
                '                If b.ScheduledSigns IsNot Nothing AndAlso b.ScheduledSigns.Count > 0 Then
                '                    For Each ss As QuickQuoteScheduledSign In b.ScheduledSigns
                '                        tot = qqHelper.getSum(tot, ss.Limit)
                '                    Next
                '                End If
                '                tot = qqHelper.getSum(tot, b.UnscheduledSignsLimit)
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToLimitFormat(tot)

                'Return tot
                'updated 7/21/2018; note: this one works fine but will use Property on VersionAndLobInfo instead to keep more of that logic together
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.SignsBuildingTotalLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property SignsBuildingTotalQuotedPremium As String 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.FullTermPremium for building scheduled/unscheduled signs
            Get
                'Dim tot As String = "0"
                'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                '            For Each b As QuickQuoteBuilding In l.Buildings
                '                'updated logic to use building props 3/26/2015
                '                If b.ScheduledSigns IsNot Nothing AndAlso b.ScheduledSigns.Count > 0 Then
                '                    For Each ss As QuickQuoteScheduledSign In b.ScheduledSigns
                '                        tot = qqHelper.getSum(tot, ss.QuotedPremium)
                '                    Next
                '                End If
                '                tot = qqHelper.getSum(tot, b.UnscheduledSignsQuotedPremium)
                '            Next
                '        End If
                '    Next
                'End If
                'qqHelper.ConvertToQuotedPremiumFormat(tot)

                'Return tot
                'updated 7/21/2018; note: this one works fine but will use Property on VersionAndLobInfo instead to keep more of that logic together
                '10/15/2018 note: shouldn't need to call ResetStateLevelLocationsIfNeeded (like is being done from VersionAndLobInfo object) since this should only be used in spots where lists should already be set (i.e. Saving or Summary/Proposal)
                Return VersionAndLobInfo.SignsBuildingTotalQuotedPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsAnyOneLossCatastropheLimit As String 'note: cov also has CoverageBasisTypeId set to 1
            Get
                'Return _SignsAnyOneLossCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsAnyOneLossCatastropheLimit
            End Get
            Set(value As String)
                '_SignsAnyOneLossCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_SignsAnyOneLossCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.SignsAnyOneLossCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property SignsAnyOneLossCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_SignsAnyOneLossCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.SignsAnyOneLossCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_SignsAnyOneLossCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_SignsAnyOneLossCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.SignsAnyOneLossCatastropheQuotedPremium = value
            End Set
        End Property
        'added 5/29/2015 for CIM
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentCatastropheLimit As String
            Get
                'Return _ContractorsEquipmentCatastropheLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.ContractorsEquipmentCatastropheLimit
            End Get
            Set(value As String)
                '_ContractorsEquipmentCatastropheLimit = value
                'qqHelper.ConvertToLimitFormat(_ContractorsEquipmentCatastropheLimit)
                'updated 7/21/2018
                VersionAndLobInfo.ContractorsEquipmentCatastropheLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEquipmentCatastropheQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEquipmentCatastropheQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ContractorsEquipmentCatastropheQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEquipmentCatastropheQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEquipmentCatastropheQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ContractorsEquipmentCatastropheQuotedPremium = value
            End Set
        End Property

        'added 1/20/2015 for Crime
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ClassificationCodes As List(Of QuickQuoteClassificationCode)
            Get
                'SetParentOfListItems(_ClassificationCodes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04015}")
                'Return _ClassificationCodes
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ClassificationCodes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04015}")
                Return VersionAndLobInfo.ClassificationCodes
            End Get
            Set(value As List(Of QuickQuoteClassificationCode))
                '_ClassificationCodes = value
                'SetParentOfListItems(_ClassificationCodes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04015}")
                'updated 7/21/2018
                VersionAndLobInfo.ClassificationCodes = value
                SetParentOfListItems(VersionAndLobInfo.ClassificationCodes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04015}")
            End Set
        End Property
        'added 3/26/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseClassificationCodeNumForClassificationCodeReconciliation As Boolean 'for reconciliation
            Get
                'Return _CanUseClassificationCodeNumForClassificationCodeReconciliation
                'updated 7/21/2018
                'Return VersionAndLobInfo.CanUseClassificationCodeNumForClassificationCodeReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseClassificationCodeNumForClassificationCodeReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseClassificationCodeNumForClassificationCodeReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseClassificationCodeNumForClassificationCodeReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.CanUseClassificationCodeNumForClassificationCodeReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AggregateLimit As String 'decimal
            Get
                'Return _AggregateLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.AggregateLimit
            End Get
            Set(value As String)
                '_AggregateLimit = value
                'qqHelper.ConvertToLimitFormat(_AggregateLimit)
                'updated 7/21/2018
                VersionAndLobInfo.AggregateLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NumberOfEmployees As String 'int
            Get
                'Return _NumberOfEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.NumberOfEmployees
            End Get
            Set(value As String)
                '_NumberOfEmployees = value
                'updated 7/21/2018
                VersionAndLobInfo.NumberOfEmployees = value
            End Set
        End Property
        'added 3/31/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftLimit As String 'note: cov also has CoverageBasisTypeId 1
            Get
                'Return _EmployeeTheftLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftLimit
            End Get
            Set(value As String)
                '_EmployeeTheftLimit = value
                'qqHelper.ConvertToLimitFormat(_EmployeeTheftLimit)
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftDeductibleId As String 'static data; 5/17/2017 note: proposal doesn't currently show values that weren't used for VR (less than 500); full list: 0=N/A, 2=100, 4=250, 8=500, 9=1,000, 15=2,500, 17=10,000, 19=25,000, 20=50,000, 21=75,000, 22=100,000
            Get
                'Return _EmployeeTheftDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftDeductibleId
            End Get
            Set(value As String)
                '_EmployeeTheftDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftNumberOfRatableEmployees As String 'CoverageDetail
            Get
                'Return _EmployeeTheftNumberOfRatableEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftNumberOfRatableEmployees
            End Get
            Set(value As String)
                '_EmployeeTheftNumberOfRatableEmployees = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftNumberOfRatableEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftNumberOfAdditionalPremises As String 'CoverageDetail
            Get
                'Return _EmployeeTheftNumberOfAdditionalPremises
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftNumberOfAdditionalPremises
            End Get
            Set(value As String)
                '_EmployeeTheftNumberOfAdditionalPremises = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftNumberOfAdditionalPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftFaithfulPerformanceOfDutyTypeId As String 'CoverageDetail; static data
            Get
                'Return _EmployeeTheftFaithfulPerformanceOfDutyTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftFaithfulPerformanceOfDutyTypeId
            End Get
            Set(value As String)
                '_EmployeeTheftFaithfulPerformanceOfDutyTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftFaithfulPerformanceOfDutyTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftScheduledEmployeeBenefitPlans As List(Of String)
            Get
                'Return _EmployeeTheftScheduledEmployeeBenefitPlans
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftScheduledEmployeeBenefitPlans
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftScheduledEmployeeBenefitPlans = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftScheduledEmployeeBenefitPlans = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftIncludedPersonsOrClasses As List(Of String)
            Get
                'Return _EmployeeTheftIncludedPersonsOrClasses
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftIncludedPersonsOrClasses
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftIncludedPersonsOrClasses = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftIncludedPersonsOrClasses = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers As List(Of String)
            Get
                'Return _EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftScheduledPartners As List(Of String)
            Get
                'Return _EmployeeTheftScheduledPartners
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftScheduledPartners
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftScheduledPartners = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftScheduledPartners = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftScheduledLLCMembers As List(Of String)
            Get
                'Return _EmployeeTheftScheduledLLCMembers
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftScheduledLLCMembers
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftScheduledLLCMembers = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftScheduledLLCMembers = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftScheduledNonCompensatedOfficers As List(Of String)
            Get
                'Return _EmployeeTheftScheduledNonCompensatedOfficers
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftScheduledNonCompensatedOfficers
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftScheduledNonCompensatedOfficers = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftScheduledNonCompensatedOfficers = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftExcludedPersonsOrClasses As List(Of String)
            Get
                'Return _EmployeeTheftExcludedPersonsOrClasses
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftExcludedPersonsOrClasses
            End Get
            Set(value As List(Of String))
                '_EmployeeTheftExcludedPersonsOrClasses = value
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftExcludedPersonsOrClasses = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeeTheftQuotedPremium As String
            Get
                ' qqHelper.QuotedPremiumFormat(_EmployeeTheftQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeeTheftQuotedPremium
            End Get
            Set(value As String)
                '_EmployeeTheftQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_EmployeeTheftQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.EmployeeTheftQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesLimit As String 'note: cov also has CoverageBasisTypeId 1
            Get
                'Return _InsidePremisesTheftOfMoneyAndSecuritiesLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesLimit
            End Get
            Set(value As String)
                '_InsidePremisesTheftOfMoneyAndSecuritiesLimit = value
                'qqHelper.ConvertToLimitFormat(_InsidePremisesTheftOfMoneyAndSecuritiesLimit)
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId As String 'static data
            Get
                'Return _InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId
            End Get
            Set(value As String)
                '_InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises As String 'CoverageDetail
            Get
                'Return _InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises
            End Get
            Set(value As String)
                '_InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = value
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty As Boolean 'CoverageDetail
            Get
                'Return _InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty
            End Get
            Set(value As Boolean)
                '_InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = value
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks As Boolean 'CoverageDetail
            Get
                'Return _InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks
            End Get
            Set(value As Boolean)
                '_InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = value
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium
            End Get
            Set(value As String)
                '_InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesLimit As String 'note: cov also has CoverageBasisTypeId 1
            Get
                'Return _OutsideThePremisesLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesLimit
            End Get
            Set(value As String)
                '_OutsideThePremisesLimit = value
                'qqHelper.ConvertToLimitFormat(_OutsideThePremisesLimit)
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesDeductibleId As String 'static data
            Get
                'Return _OutsideThePremisesDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesDeductibleId
            End Get
            Set(value As String)
                '_OutsideThePremisesDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesNumberOfPremises As String 'CoverageDetail
            Get
                'Return _OutsideThePremisesNumberOfPremises
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesNumberOfPremises
            End Get
            Set(value As String)
                '_OutsideThePremisesNumberOfPremises = value
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesNumberOfPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesIncludeSellingPrice As Boolean 'CoverageDetail
            Get
                'Return _OutsideThePremisesIncludeSellingPrice
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesIncludeSellingPrice
            End Get
            Set(value As Boolean)
                '_OutsideThePremisesIncludeSellingPrice = value
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesIncludeSellingPrice = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesLimitToRobberyOnly As Boolean 'CoverageDetail
            Get
                'Return _OutsideThePremisesLimitToRobberyOnly
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesLimitToRobberyOnly
            End Get
            Set(value As Boolean)
                '_OutsideThePremisesLimitToRobberyOnly = value
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesLimitToRobberyOnly = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesRequireRecordOfChecks As Boolean 'CoverageDetail
            Get
                'Return _OutsideThePremisesRequireRecordOfChecks
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesRequireRecordOfChecks
            End Get
            Set(value As Boolean)
                '_OutsideThePremisesRequireRecordOfChecks = value
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesRequireRecordOfChecks = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OutsideThePremisesQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_OutsideThePremisesQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.OutsideThePremisesQuotedPremium
            End Get
            Set(value As String)
                '_OutsideThePremisesQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_OutsideThePremisesQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.OutsideThePremisesQuotedPremium = value
            End Set
        End Property

        'added 02/03/2020 for new crime coverages
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ForgeryAlterationDeductibleId As String
            Get
                Return VersionAndLobInfo.ForgeryAlterationDeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.ForgeryAlterationDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ForgeryAlterationLimit As String
            Get
                Return VersionAndLobInfo.ForgeryAlterationLimit
            End Get
            Set
                VersionAndLobInfo.ForgeryAlterationLimit = Value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ForgeryAlterationNumberOfRatableEmployees As String
            Get
                Return VersionAndLobInfo.ForgeryAlterationNumberOfRatableEmployees
            End Get
            Set(value As String)
                VersionAndLobInfo.ForgeryAlterationNumberOfRatableEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ForgeryAlterationAdditionalPremises As String
            Get
                Return VersionAndLobInfo.ForgeryAlterationAdditionalPremises
            End Get
            Set(value As String)
                VersionAndLobInfo.ForgeryAlterationAdditionalPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ForgeryAlterationQuotedPremium As String
            Get
                Return VersionAndLobInfo.ForgeryAlterationQuotedPremium
            End Get
            Set
                VersionAndLobInfo.ForgeryAlterationQuotedPremium = Value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerFraudDeductibleId As String
            Get
                Return VersionAndLobInfo.ComputerFraudDeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.ComputerFraudDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerFraudLimit As String
            Get
                Return VersionAndLobInfo.ComputerFraudLimit
            End Get
            Set
                VersionAndLobInfo.ComputerFraudLimit = Value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerFraudNumberOfRatableEmployees As String
            Get
                Return VersionAndLobInfo.ComputerFraudNumberOfRatableEmployees
            End Get
            Set(value As String)
                VersionAndLobInfo.ComputerFraudNumberOfRatableEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerFraudAdditionalPremises As String
            Get
                Return VersionAndLobInfo.ComputerFraudAdditionalPremises
            End Get
            Set(value As String)
                VersionAndLobInfo.ComputerFraudAdditionalPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ComputerFraudQuotedPremium As String
            Get
                Return VersionAndLobInfo.ComputerFraudQuotedPremium
            End Get
            Set
                VersionAndLobInfo.ComputerFraudQuotedPremium = Value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FundsTransferFraudDeductibleId As String
            Get
                Return VersionAndLobInfo.FundsTransferFraudDeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.FundsTransferFraudDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FundsTransferFraudLimit As String
            Get
                Return VersionAndLobInfo.FundsTransferFraudLimit
            End Get
            Set
                VersionAndLobInfo.FundsTransferFraudLimit = Value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FundsTransferFraudNumberOfRatableEmployees As String
            Get
                Return VersionAndLobInfo.FundsTransferFraudNumberOfRatableEmployees
            End Get
            Set(value As String)
                VersionAndLobInfo.FundsTransferFraudNumberOfRatableEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FundsTransferFraudAdditionalPremises As String
            Get
                Return VersionAndLobInfo.FundsTransferFraudAdditionalPremises
            End Get
            Set(value As String)
                VersionAndLobInfo.FundsTransferFraudAdditionalPremises = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FundsTransferFraudQuotedPremium As String
            Get
                Return VersionAndLobInfo.FundsTransferFraudQuotedPremium
            End Get
            Set
                VersionAndLobInfo.FundsTransferFraudQuotedPremium = Value
            End Set
        End Property

        'added 2/19/2015 for Farm
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmIncidentalLimitCoverages As List(Of QuickQuoteCoverage)
            Get
                'SetParentOfListItems(_FarmIncidentalLimitCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04016}")
                'Return _FarmIncidentalLimitCoverages
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.FarmIncidentalLimitCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04016}")
                Return VersionAndLobInfo.FarmIncidentalLimitCoverages
            End Get
            Set(value As List(Of QuickQuoteCoverage))
                '_FarmIncidentalLimitCoverages = value
                'SetParentOfListItems(_FarmIncidentalLimitCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04016}")
                'updated 7/21/2018
                VersionAndLobInfo.FarmIncidentalLimitCoverages = value
                SetParentOfListItems(VersionAndLobInfo.FarmIncidentalLimitCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04016}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedFarmIncidentalLimitCoverages As Boolean
            Get
                'Return _HasConvertedFarmIncidentalLimitCoverages
                'updated 7/21/2018
                Return VersionAndLobInfo.HasConvertedFarmIncidentalLimitCoverages
            End Get
            Set(value As Boolean)
                '_HasConvertedFarmIncidentalLimitCoverages = value
                'updated 7/21/2018
                VersionAndLobInfo.HasConvertedFarmIncidentalLimitCoverages = value
            End Set
        End Property
        'added 2/21/105
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledPersonalPropertyCoverages As List(Of QuickQuoteScheduledPersonalPropertyCoverage)
            Get
                'SetParentOfListItems(_ScheduledPersonalPropertyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04017}")
                'Return _ScheduledPersonalPropertyCoverages
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledPersonalPropertyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04017}")
                Return VersionAndLobInfo.ScheduledPersonalPropertyCoverages
            End Get
            Set(value As List(Of QuickQuoteScheduledPersonalPropertyCoverage))
                '_ScheduledPersonalPropertyCoverages = value
                'SetParentOfListItems(_ScheduledPersonalPropertyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04017}")
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledPersonalPropertyCoverages = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledPersonalPropertyCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04017}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedScheduledPersonalPropertyCoverages As Boolean
            Get
                'Return _HasConvertedScheduledPersonalPropertyCoverages
                'updated 7/21/2018
                Return VersionAndLobInfo.HasConvertedScheduledPersonalPropertyCoverages
            End Get
            Set(value As Boolean)
                '_HasConvertedScheduledPersonalPropertyCoverages = value
                'updated 7/21/2018
                VersionAndLobInfo.HasConvertedScheduledPersonalPropertyCoverages = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnscheduledPersonalPropertyCoverage As QuickQuoteUnscheduledPersonalPropertyCoverage
            Get
                'SetObjectsParent(_UnscheduledPersonalPropertyCoverage)
                'Return _UnscheduledPersonalPropertyCoverage
                'updated 7/21/2018
                SetObjectsParent(VersionAndLobInfo.UnscheduledPersonalPropertyCoverage)
                Return VersionAndLobInfo.UnscheduledPersonalPropertyCoverage
            End Get
            Set(value As QuickQuoteUnscheduledPersonalPropertyCoverage)
                '_UnscheduledPersonalPropertyCoverage = value
                'SetObjectsParent(_UnscheduledPersonalPropertyCoverage)
                'updated 7/21/2018
                VersionAndLobInfo.UnscheduledPersonalPropertyCoverage = value
                SetObjectsParent(VersionAndLobInfo.UnscheduledPersonalPropertyCoverage)
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedUnscheduledPersonalPropertyCoverages As Boolean
            Get
                'Return _HasConvertedUnscheduledPersonalPropertyCoverages
                'updated 7/21/2018
                Return VersionAndLobInfo.HasConvertedUnscheduledPersonalPropertyCoverages
            End Get
            Set(value As Boolean)
                '_HasConvertedUnscheduledPersonalPropertyCoverages = value
                'updated 7/21/2018
                VersionAndLobInfo.HasConvertedUnscheduledPersonalPropertyCoverages = value
            End Set
        End Property
        'added 2/21/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation As Boolean
            Get
                'Return _CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation
                'updated 7/21/2018
                'Return VersionAndLobInfo.CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation As Boolean
            Get
                'Return _CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation
                'updated 7/21/2018
                'Return VersionAndLobInfo.CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = value
            End Set
        End Property
        'added 2/25/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OptionalCoverages As List(Of QuickQuoteOptionalCoverage)
            Get
                'SetParentOfListItems(_OptionalCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04018}")
                'Return _OptionalCoverages
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.OptionalCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04018}")
                Return VersionAndLobInfo.OptionalCoverages
            End Get
            Set(value As List(Of QuickQuoteOptionalCoverage))
                '_OptionalCoverages = value
                'SetParentOfListItems(_OptionalCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04018}")
                'updated 7/21/2018
                VersionAndLobInfo.OptionalCoverages = value
                SetParentOfListItems(VersionAndLobInfo.OptionalCoverages, "{663B7C7B-F2AC-4BF6-965A-D30F41A04018}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasConvertedOptionalCoverages As Boolean
            Get
                'Return _HasConvertedOptionalCoverages
                'updated 7/21/2018
                Return VersionAndLobInfo.HasConvertedOptionalCoverages
            End Get
            Set(value As Boolean)
                '_HasConvertedOptionalCoverages = value
                'updated 7/21/2018
                VersionAndLobInfo.HasConvertedOptionalCoverages = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseOptionalCoveragesNumForOptionalCoverageReconciliation As Boolean 'added 5/12/2015 for reconciliation
            Get
                'Return _CanUseOptionalCoveragesNumForOptionalCoverageReconciliation
                'updated 7/21/2018
                'Return VersionAndLobInfo.CanUseOptionalCoveragesNumForOptionalCoverageReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseOptionalCoveragesNumForOptionalCoverageReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = value
            End Set
        End Property
        'added 2/27/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInterests As List(Of QuickQuoteAdditionalInterest)
            Get
                'SetParentOfListItems(_AdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04019}")
                'Return _AdditionalInterests
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.AdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04019}")
                Return VersionAndLobInfo.AdditionalInterests
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterest))
                '_AdditionalInterests = value
                'SetParentOfListItems(_AdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04019}")
                'updated 7/21/2018
                VersionAndLobInfo.AdditionalInterests = value
                SetParentOfListItems(VersionAndLobInfo.AdditionalInterests, "{663B7C7B-F2AC-4BF6-965A-D30F41A04019}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseAdditionalInterestNumForAdditionalInterestReconciliation As Boolean
            Get
                'Return _CanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 7/21/2018
                'Return VersionAndLobInfo.CanUseAdditionalInterestNumForAdditionalInterestReconciliation
                'updated 9/14/2018
                Dim canUse As Boolean = VersionAndLobInfo.CanUseAdditionalInterestNumForAdditionalInterestReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                '_CanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
                'updated 7/21/2018
                VersionAndLobInfo.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = value
            End Set
        End Property
        'added 3/3/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AggregateLiabilityIncrementTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 1 = 2; from example)
            Get
                'Return _AggregateLiabilityIncrementTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.AggregateLiabilityIncrementTypeId
            End Get
            Set(value As String)
                '_AggregateLiabilityIncrementTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.AggregateLiabilityIncrementTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property DrivecamContractEffectiveDate As String '/DateTime; may not be needed... identified in xml but not UI
            Get
                'Return _DrivecamContractEffectiveDate
                'updated 7/21/2018
                Return VersionAndLobInfo.DrivecamContractEffectiveDate
            End Get
            Set(value As String)
                '_DrivecamContractEffectiveDate = value
                'qqHelper.ConvertToShortDate(_DrivecamContractEffectiveDate)
                'updated 7/21/2018
                VersionAndLobInfo.DrivecamContractEffectiveDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeesFullTime As String 'under Detail/Optional Liability for Farm
            Get
                'Return _EmployeesFullTime
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeesFullTime
            End Get
            Set(value As String)
                '_EmployeesFullTime = value 'could add numeric formatting... maybe limit formatting (whole #)
                'updated 7/21/2018
                VersionAndLobInfo.EmployeesFullTime = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeesPartTime1To40Days As String 'under Detail/Optional Liability for Farm
            Get
                'Return _EmployeesPartTime1To40Days
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeesPartTime1To40Days
            End Get
            Set(value As String)
                '_EmployeesPartTime1To40Days = value 'could add numeric formatting... maybe limit formatting (whole #)
                'updated 7/21/2018
                VersionAndLobInfo.EmployeesPartTime1To40Days = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EmployeesPartTime41To179Days As String 'under Detail/Optional Liability for Farm
            Get
                'Return _EmployeesPartTime41To179Days
                'updated 7/21/2018
                Return VersionAndLobInfo.EmployeesPartTime41To179Days
            End Get
            Set(value As String)
                '_EmployeesPartTime41To179Days = value 'could add numeric formatting... maybe limit formatting (whole #)
                'updated 7/21/2018
                VersionAndLobInfo.EmployeesPartTime41To179Days = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property EntityTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 2 = Partnership; from example)
            Get
                'Return _EntityTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.EntityTypeId
            End Get
            Set(value As String)
                '_EntityTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.EntityTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LiabilityOptionId As String 'static data; dropdown at top of Detail screen for Farm (id 1 = Farm Personal; from example)
            Get
                'Return _LiabilityOptionId
                'updated 7/21/2018
                Return VersionAndLobInfo.LiabilityOptionId
            End Get
            Set(value As String)
                '_LiabilityOptionId = value
                'updated 7/21/2018
                VersionAndLobInfo.LiabilityOptionId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LimitedPerilsCategoryTypeId As String 'static data; dropdown at top of Detail screen for Farm (id 3 = Both; from example)
            Get
                'Return _LimitedPerilsCategoryTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.LimitedPerilsCategoryTypeId
            End Get
            Set(value As String)
                '_LimitedPerilsCategoryTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.LimitedPerilsCategoryTypeId = value
            End Set
        End Property
        'added 4/30/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Farm_F_and_G_DeductibleLimitId As String 'static data
            Get
                'Return _Farm_F_and_G_DeductibleLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.Farm_F_and_G_DeductibleLimitId
            End Get
            Set(value As String)
                '_Farm_F_and_G_DeductibleLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.Farm_F_and_G_DeductibleLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Farm_F_and_G_DeductibleQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Farm_F_and_G_DeductibleQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.Farm_F_and_G_DeductibleQuotedPremium
            End Get
            Set(value As String)
                '_Farm_F_and_G_DeductibleQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Farm_F_and_G_DeductibleQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.Farm_F_and_G_DeductibleQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmEquipmentBreakdown As Boolean
            Get
                'Return _HasFarmEquipmentBreakdown
                'updated 7/21/2018
                Return VersionAndLobInfo.HasFarmEquipmentBreakdown
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmEquipmentBreakdown
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmEquipmentBreakdown = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmEquipmentBreakdown = value
                'updated 7/21/2018
                VersionAndLobInfo.HasFarmEquipmentBreakdown = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmEquipmentBreakdownQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmEquipmentBreakdownQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmEquipmentBreakdownQuotedPremium
            End Get
            Set(value As String)
                '_FarmEquipmentBreakdownQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmEquipmentBreakdownQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmEquipmentBreakdownQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmExtender As Boolean
            Get
                'Return _HasFarmExtender
                'updated 7/21/2018
                Return VersionAndLobInfo.HasFarmExtender
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmExtender
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmExtender = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmExtender = value
                'updated 7/21/2018
                VersionAndLobInfo.HasFarmExtender = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmExtenderQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmExtenderQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmExtenderQuotedPremium
            End Get
            Set(value As String)
                '_FarmExtenderQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmExtenderQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmExtenderQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmAllStarLimitId As String 'static data
            Get
                'Return _FarmAllStarLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmAllStarLimitId
            End Get
            Set(value As String)
                '_FarmAllStarLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmAllStarLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmAllStarQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmAllStarQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmAllStarQuotedPremium
            End Get
            Set(value As String)
                '_FarmAllStarQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmAllStarQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmAllStarQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmAllStar As Boolean
            Get
                Return VersionAndLobInfo.HasFarmAllStar
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasFarmAllStar = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmAllStarWaterBackupLimitId As String 'static data
            Get
                Return VersionAndLobInfo.FarmAllStarWaterBackupLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.FarmAllStarWaterBackupLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmAllStarWaterDamageLimitId As String 'static data
            Get
                Return VersionAndLobInfo.FarmAllStarWaterDamageLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.FarmAllStarWaterDamageLimitId = value
            End Set
        End Property
        'added 5/5/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmEmployersLiability As Boolean
            Get
                'Return _HasFarmEmployersLiability
                'updated 7/21/2018
                Return VersionAndLobInfo.HasFarmEmployersLiability
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmEmployersLiability
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmEmployersLiability = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmEmployersLiability = value
                'updated 7/21/2018
                VersionAndLobInfo.HasFarmEmployersLiability = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmEmployersLiabilityQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmEmployersLiabilityQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmEmployersLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_FarmEmployersLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmEmployersLiabilityQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmEmployersLiabilityQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmFireLegalLiabilityLimitId As String 'static data
            Get
                'Return _FarmFireLegalLiabilityLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmFireLegalLiabilityLimitId
            End Get
            Set(value As String)
                '_FarmFireLegalLiabilityLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmFireLegalLiabilityLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmFireLegalLiabilityQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmFireLegalLiabilityQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmFireLegalLiabilityQuotedPremium
            End Get
            Set(value As String)
                '_FarmFireLegalLiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmFireLegalLiabilityQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmFireLegalLiabilityQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmPersonalAndAdvertisingInjury As Boolean
            Get
                'Return _HasFarmPersonalAndAdvertisingInjury
                'updated 7/21/2018
                Return VersionAndLobInfo.HasFarmPersonalAndAdvertisingInjury
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmPersonalAndAdvertisingInjury
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmPersonalAndAdvertisingInjury = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmPersonalAndAdvertisingInjury = value
                'updated 7/21/2018
                VersionAndLobInfo.HasFarmPersonalAndAdvertisingInjury = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmPersonalAndAdvertisingInjuryQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmPersonalAndAdvertisingInjuryQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmPersonalAndAdvertisingInjuryQuotedPremium
            End Get
            Set(value As String)
                '_FarmPersonalAndAdvertisingInjuryQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmPersonalAndAdvertisingInjuryQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmPersonalAndAdvertisingInjuryQuotedPremium = value
            End Set
        End Property
#Region "Farm Contract Growers"
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmContractGrowersCareCustodyControlLimitId As String 'static data
            Get
                'Return _FarmContractGrowersCareCustodyControlLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmContractGrowersCareCustodyControlLimitId
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmContractGrowersCareCustodyControlLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmContractGrowersCareCustodyControlDescription As String
            Get
                'Return _FarmContractGrowersCareCustodyControlDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmContractGrowersCareCustodyControlDescription
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmContractGrowersCareCustodyControlDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmContractGrowersCareCustodyControlQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmContractGrowersCareCustodyControlQuotedPremium
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmContractGrowersCareCustodyControlQuotedPremium = value
            End Set
        End Property
#End Region

#Region "Farm Custom Feeding"
        'Cattle
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingCattleLimitId As String 'static data
            Get
                'Return _FarmContractGrowersCareCustodyControlLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingCattleLimitId
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingCattleLimitId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FarmCustomFeedingCattleLimit As String
            Get
                Return VersionAndLobInfo.FarmCustomFeedingCattleLimit
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingCattleDescription As String
            Get
                'Return _FarmContractGrowersCareCustodyControlDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingCattleDescription
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingCattleDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingCattleQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingCattleQuotedPremium
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingCattleQuotedPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingEquineLimitId As String 'static data
            Get
                'Return _FarmContractGrowersCareCustodyControlLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingEquineLimitId
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingEquineLimitId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FarmCustomFeedingEquineLimit As String
            Get
                Return VersionAndLobInfo.FarmCustomFeedingEquineLimit
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingEquineDescription As String
            Get
                'Return _FarmContractGrowersCareCustodyControlDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingEquineDescription
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingEquineDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingEquineQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingEquineQuotedPremium
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingEquineQuotedPremium = value
            End Set
        End Property
        'Poultry
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingPoultryLimitId As String 'static data
            Get
                'Return _FarmContractGrowersCareCustodyControlLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingPoultryLimitId
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingPoultryLimitId = value
            End Set
        End Property


        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FarmCustomFeedingPoultryLimit As String
            Get
                Return VersionAndLobInfo.FarmCustomFeedingPoultryLimit
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingPoultryDescription As String
            Get
                'Return _FarmContractGrowersCareCustodyControlDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingPoultryDescription
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingPoultryDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingPoultryQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingPoultryQuotedPremium
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingPoultryQuotedPremium = value
            End Set
        End Property
        'Swine
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingSwineLimitId As String 'static data
            Get
                'Return _FarmContractGrowersCareCustodyControlLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingSwineLimitId
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingSwineLimitId = value
            End Set
        End Property


        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FarmCustomFeedingSwineLimit As String
            Get
                Return VersionAndLobInfo.FarmCustomFeedingSwineLimit
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingSwineDescription As String
            Get
                'Return _FarmContractGrowersCareCustodyControlDescription
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingSwineDescription
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlDescription = value
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingSwineDescription = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmCustomFeedingSwineQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmCustomFeedingSwineQuotedPremium
            End Get
            Set(value As String)
                '_FarmContractGrowersCareCustodyControlQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmContractGrowersCareCustodyControlQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmCustomFeedingSwineQuotedPremium = value
            End Set
        End Property
#End Region
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFarmExclusionOfProductsCompletedWork As Boolean
            Get
                'Return _HasFarmExclusionOfProductsCompletedWork
                'updated 7/21/2018
                Return VersionAndLobInfo.HasFarmExclusionOfProductsCompletedWork
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasFarmExclusionOfProductsCompletedWork
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasFarmExclusionOfProductsCompletedWork = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasFarmExclusionOfProductsCompletedWork = value
                'updated 7/21/2018
                VersionAndLobInfo.HasFarmExclusionOfProductsCompletedWork = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmExclusionOfProductsCompletedWorkQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_FarmExclusionOfProductsCompletedWorkQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmExclusionOfProductsCompletedWorkQuotedPremium
            End Get
            Set(value As String)
                '_FarmExclusionOfProductsCompletedWorkQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmExclusionOfProductsCompletedWorkQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmExclusionOfProductsCompletedWorkQuotedPremium = value
            End Set
        End Property
        'added 5/12/2015; goes w/ FarmIncidentalLimitCoverages
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmIncidentalLimits As List(Of QuickQuoteFarmIncidentalLimit)
            Get
                'SetParentOfListItems(_FarmIncidentalLimits, "{663B7C7B-F2AC-4BF6-965A-D30F41A04020}")
                'Return _FarmIncidentalLimits
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.FarmIncidentalLimits, "{663B7C7B-F2AC-4BF6-965A-D30F41A04020}")
                Return VersionAndLobInfo.FarmIncidentalLimits
            End Get
            Set(value As List(Of QuickQuoteFarmIncidentalLimit))
                '_FarmIncidentalLimits = value
                'SetParentOfListItems(_FarmIncidentalLimits, "{663B7C7B-F2AC-4BF6-965A-D30F41A04020}")
                'updated 7/21/2018
                VersionAndLobInfo.FarmIncidentalLimits = value
                SetParentOfListItems(VersionAndLobInfo.FarmIncidentalLimits, "{663B7C7B-F2AC-4BF6-965A-D30F41A04020}")
            End Set
        End Property
        'added 9/23/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_Farm_L_Liability_QuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_Farm_L_Liability_QuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_Farm_L_Liability_QuotedPremium
            End Get
            Set(value As String)
                '_Locations_Farm_L_Liability_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_Farm_L_Liability_QuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.Locations_Farm_L_Liability_QuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_Farm_M_Medical_Payments_QuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_Locations_Farm_M_Medical_Payments_QuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_Farm_M_Medical_Payments_QuotedPremium
            End Get
            Set(value As String)
                '_Locations_Farm_M_Medical_Payments_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Locations_Farm_M_Medical_Payments_QuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.Locations_Farm_M_Medical_Payments_QuotedPremium = value
            End Set
        End Property

        'added 3/3/2015 for new CPP package parts
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Has_InlandMarine_PackagePart As Boolean
            Get
                'Return _CPP_Has_InlandMarine_PackagePart
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_Has_InlandMarine_PackagePart
            End Get
            Set(value As Boolean)
                '_CPP_Has_InlandMarine_PackagePart = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_Has_InlandMarine_PackagePart = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Has_Crime_PackagePart As Boolean
            Get
                'Return _CPP_Has_Crime_PackagePart
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_Has_Crime_PackagePart
            End Get
            Set(value As Boolean)
                '_CPP_Has_Crime_PackagePart = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_Has_Crime_PackagePart = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Has_Garage_PackagePart As Boolean 'added 4/22/2017
            Get
                'Return _CPP_Has_Garage_PackagePart
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_Has_Garage_PackagePart
            End Get
            Set(value As Boolean)
                '_CPP_Has_Garage_PackagePart = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_Has_Garage_PackagePart = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Has_Property_PackagePart As Boolean 'added 5/11/2017; will likely always be on CPP
            Get
                'Return _CPP_Has_Property_PackagePart
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_Has_Property_PackagePart
            End Get
            Set(value As Boolean)
                '_CPP_Has_Property_PackagePart = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_Has_Property_PackagePart = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_Has_GeneralLiability_PackagePart As Boolean 'added 5/11/2017; typically on CPP but shouldn't be when Garage PackagePart is there
            Get
                'Return _CPP_Has_GeneralLiability_PackagePart
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_Has_GeneralLiability_PackagePart
            End Get
            Set(value As Boolean)
                '_CPP_Has_GeneralLiability_PackagePart = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_Has_GeneralLiability_PackagePart = value
            End Set
        End Property
        'added 4/2/2015 for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CRM_ProgramTypeId As String
            Get
                'Return _CPP_CRM_ProgramTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CRM_ProgramTypeId
            End Get
            Set(value As String)
                '_CPP_CRM_ProgramTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CRM_ProgramTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_GAR_ProgramTypeId As String 'added 5/8/2017
            Get
                'Return _CPP_GAR_ProgramTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_GAR_ProgramTypeId
            End Get
            Set(value As String)
                '_CPP_GAR_ProgramTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.CPP_GAR_ProgramTypeId = value
            End Set
        End Property

        'added 3/6/2015 for CPR/CPP Business Income ALS (eff 4/1/2015)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasBusinessIncomeALS As Boolean
            Get
                'Return _HasBusinessIncomeALS
                'updated 7/21/2018
                Return VersionAndLobInfo.HasBusinessIncomeALS
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasBusinessIncomeALS
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasBusinessIncomeALS = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasBusinessIncomeALS = value
                'updated 7/21/2018
                VersionAndLobInfo.HasBusinessIncomeALS = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BusinessIncomeALSLimit As String
            Get
                'Return _BusinessIncomeALSLimit
                'updated 7/21/2018
                Return VersionAndLobInfo.BusinessIncomeALSLimit
            End Get
            Set(value As String)
                '_BusinessIncomeALSLimit = value
                'qqHelper.ConvertToLimitFormat(_BusinessIncomeALSLimit)
                'updated 7/21/2018
                VersionAndLobInfo.BusinessIncomeALSLimit = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property BusinessIncomeALSQuotedPremium As String
            Get
                'Return qqHelper.QuotedPremiumFormat(_BusinessIncomeALSQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.BusinessIncomeALSQuotedPremium
            End Get
            Set(value As String)
                '_BusinessIncomeALSQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_BusinessIncomeALSQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.BusinessIncomeALSQuotedPremium = value
            End Set
        End Property

        'added 5/29/2015 for CPP Contractors Enhancement Endorsement (CPR, CGL, CIM; eff 5/12/2015)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasContractorsEnhancement As Boolean
            Get
                'Return _HasContractorsEnhancement
                'updated 7/21/2018
                Return VersionAndLobInfo.HasContractorsEnhancement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasContractorsEnhancement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasContractorsEnhancement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasContractorsEnhancement = value
                'updated 7/21/2018
                VersionAndLobInfo.HasContractorsEnhancement = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ContractorsEnhancementQuotedPremium As String
            Get
                'Return _ContractorsEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ContractorsEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_ContractorsEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ContractorsEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_ContractorsEnhancementQuotedPremium As String
            Get
                'Return _CPP_CPR_ContractorsEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_CPP_CPR_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CPR_ContractorsEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_CPP_CPR_ContractorsEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CPR_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CPR_ContractorsEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_ContractorsEnhancementQuotedPremium As String
            Get
                'Return _CPP_CGL_ContractorsEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_CPP_CGL_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CGL_ContractorsEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_CPP_CGL_ContractorsEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CGL_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CGL_ContractorsEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CIM_ContractorsEnhancementQuotedPremium As String
            Get
                'Return _CPP_CIM_ContractorsEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_CPP_CIM_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CIM_ContractorsEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_CPP_CIM_ContractorsEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CIM_ContractorsEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CIM_ContractorsEnhancementQuotedPremium = value
            End Set
        End Property
        'added 5/29/2015 for CPP Manufacturers Enhancement (CPR, CGL; eff 6/30/2015)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasManufacturersEnhancement As Boolean
            Get
                'Return _HasManufacturersEnhancement
                'updated 7/21/2018
                Return VersionAndLobInfo.HasManufacturersEnhancement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasManufacturersEnhancement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasManufacturersEnhancement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasManufacturersEnhancement = value
                'updated 7/21/2018
                VersionAndLobInfo.HasManufacturersEnhancement = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ManufacturersEnhancementQuotedPremium As String
            Get
                'Return _ManufacturersEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_ManufacturersEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ManufacturersEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_ManufacturersEnhancementQuotedPremium As String
            Get
                'Return _CPP_CPR_ManufacturersEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_CPP_CPR_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CPR_ManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_CPP_CPR_ManufacturersEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CPR_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CPR_ManufacturersEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_ManufacturersEnhancementQuotedPremium As String
            Get
                'Return _CPP_CGL_ManufacturersEnhancementQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_CPP_CGL_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_CGL_ManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                '_CPP_CGL_ManufacturersEnhancementQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_CGL_ManufacturersEnhancementQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_CGL_ManufacturersEnhancementQuotedPremium = value
            End Set
        End Property

        'added 5/11/2015
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmMachinerySpecialCoverageG_QuotedPremium As String
            Get
                'Return _FarmMachinerySpecialCoverageG_QuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_FarmMachinerySpecialCoverageG_QuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.FarmMachinerySpecialCoverageG_QuotedPremium
            End Get
            Set(value As String)
                '_FarmMachinerySpecialCoverageG_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_FarmMachinerySpecialCoverageG_QuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.FarmMachinerySpecialCoverageG_QuotedPremium = value
            End Set
        End Property

        'added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasAutoPlusEnhancement As Boolean
            Get
                'Return _HasAutoPlusEnhancement
                'updated 7/21/2018
                Return VersionAndLobInfo.HasAutoPlusEnhancement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasAutoPlusEnhancement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasAutoPlusEnhancement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasAutoPlusEnhancement = value
                'updated 7/21/2018
                VersionAndLobInfo.HasAutoPlusEnhancement = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoPlusEnhancement_QuotedPremium As String
            Get
                'Return _AutoPlusEnhancement_QuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_AutoPlusEnhancement_QuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.AutoPlusEnhancement_QuotedPremium
            End Get
            Set(value As String)
                '_AutoPlusEnhancement_QuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AutoPlusEnhancement_QuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.AutoPlusEnhancement_QuotedPremium = value
            End Set
        End Property

        'added 10/28/2016 - will be used to determine if QuickQuoteObject should be used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes; 11/10/2016 note: QuickQuoteHelperClass.CloneObject function manually updated w/ logic to handle specified ReadOnly props... will need to continue to maintain if more are added
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property QuoteTransactionType As QuickQuoteTransactionType
            Get
                'Return _QuoteTransactionType
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.QuoteTransactionType
                'updated 8/7/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.QuoteTransactionType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalEffectiveDate As String
            Get
                'Return _OriginalEffectiveDate
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.OriginalEffectiveDate
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.OriginalEffectiveDate
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalExpirationDate As String
            Get
                'Return _OriginalExpirationDate
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.OriginalExpirationDate
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.OriginalExpirationDate
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalTransactionEffectiveDate As String
            Get
                'Return _OriginalTransactionEffectiveDate
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.OriginalTransactionEffectiveDate
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.OriginalTransactionEffectiveDate
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalTransactionExpirationDate As String
            Get
                'Return _OriginalTransactionExpirationDate
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.OriginalTransactionExpirationDate
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.OriginalTransactionExpirationDate
            End Get
        End Property

        'added 11/4/2016
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionRemark As String
            Get
                'Return _TransactionRemark
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.TransactionRemark
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.TransactionRemark
            End Get
            Set(value As String)
                '_TransactionRemark = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.TransactionRemark = value
                'updated 8/8/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.TransactionRemark = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property TransactionReasonId As String
            Get
                'Return _TransactionReasonId
                'updated 7/27/2018
                'Return TopLevelQuoteInfo.TransactionReasonId
                'updated 8/8/2018
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.TransactionReasonId
            End Get
            Set(value As String)
                '_TransactionReasonId = value
                'updated 7/27/2018
                'TopLevelQuoteInfo.TransactionReasonId = value
                'updated 8/8/2018
                GetTopLevelQuoteObject().TopLevelQuoteInfo.TransactionReasonId = value
            End Set
        End Property

        'added 11/10/2016 for Endorsements; note: QuickQuoteHelperClass.CloneObject function manually updated w/ logic to handle specified ReadOnly props... will need to continue to maintain if more are added
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property AnnualPremium As String 'PolicyImage.premium_annual
            Get
                'Return qqHelper.QuotedPremiumFormat(_AnnualPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.AnnualPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ChangeInFullTermPremium As String 'PolicyImage.premium_chg_fullterm
            Get
                'Return qqHelper.QuotedPremiumFormat(_ChangeInFullTermPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ChangeInFullTermPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ChangeInWrittenPremium As String 'PolicyImage.premium_chg_written
            Get
                'Return qqHelper.QuotedPremiumFormat(_ChangeInWrittenPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.ChangeInWrittenPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property DifferenceChangeInFullTermPremium As String 'PolicyImage.premium_diff_chg_fullterm
            Get
                'Return qqHelper.QuotedPremiumFormat(_DifferenceChangeInFullTermPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.DifferenceChangeInFullTermPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property DifferenceChangeInWrittenPremium As String 'PolicyImage.premium_diff_chg_written
            Get
                'Return qqHelper.QuotedPremiumFormat(_DifferenceChangeInWrittenPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.DifferenceChangeInWrittenPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FullTermPremium As String 'PolicyImage.premium_fullterm
            Get
                'Return qqHelper.QuotedPremiumFormat(_FullTermPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.FullTermPremium
            End Get
        End Property
        'updated 11/10/2016 to make it so this property would still get serialized
        'Public Property FullTermPremium As String
        '    Get
        '        Return qqHelper.QuotedPremiumFormat(_FullTermPremium)
        '    End Get
        '    Protected Friend Set(value As String)
        '        _FullTermPremium = value
        '    End Set
        'End Property
        '11/10/2016 - didn't work; now trying Public Property w/ setter that doesn't do anything; may not work either since that's probably the Setter the serialization needs... confirmed this doesn't work either
        'Public Property FullTermPremium As String
        '    Get
        '        Return qqHelper.QuotedPremiumFormat(_FullTermPremium)
        '    End Get
        '    Set(value As String)

        '    End Set
        'End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FullTermPremiumOffsetForPreviousImage As String 'PolicyImage.ftp_offset_for_prev_image
            Get
                'Return qqHelper.QuotedPremiumFormat(_FullTermPremiumOffsetForPreviousImage)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.FullTermPremiumOffsetForPreviousImage
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property FullTermPremiumOnsetForCurrent As String 'PolicyImage.ftp_onset_for_current
            Get
                'Return qqHelper.QuotedPremiumFormat(_FullTermPremiumOnsetForCurrent)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.FullTermPremiumOnsetForCurrent
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OffsetPremiumForPreviousImage As String 'PolicyImage.offset_for_prev_image
            Get
                'Return qqHelper.QuotedPremiumFormat(_OffsetPremiumForPreviousImage)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.OffsetPremiumForPreviousImage
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OnsetPremiumForCurrentImage As String 'PolicyImage.onset_for_current
            Get
                'Return qqHelper.QuotedPremiumFormat(_OnsetPremiumForCurrentImage)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.OnsetPremiumForCurrentImage
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property PreviousWrittenPremium As String 'PolicyImage.premium_previous_written
            Get
                'Return qqHelper.QuotedPremiumFormat(_PreviousWrittenPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.PreviousWrittenPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property WrittenPremium As String 'PolicyImage.premium_written
            Get
                'Return qqHelper.QuotedPremiumFormat(_WrittenPremium)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.WrittenPremium
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property PriorTermAnnual As String 'PolicyImage.prior_term_annual_premium
            Get
                'Return qqHelper.QuotedPremiumFormat(_PriorTermAnnual)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.PriorTermAnnual
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property PriorTermFullterm As String 'PolicyImage.prior_term_fullterm
            Get
                'Return qqHelper.QuotedPremiumFormat(_PriorTermFullterm)
                'updated 7/27/2018
                Return TopLevelQuoteInfo.PriorTermFullterm
            End Get
        End Property

        '3/9/2017 - BOP stuff
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80387; stored in xml at policy level</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasApartmentBuildings As Boolean
            Get
                'Return _HasApartmentBuildings
                'updated 7/21/2018
                Return VersionAndLobInfo.HasApartmentBuildings
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasApartmentBuildings
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasApartmentBuildings = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasApartmentBuildings = value
                'updated 7/21/2018
                VersionAndLobInfo.HasApartmentBuildings = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80387; stored in xml at policy level</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property NumberOfLocationsWithApartments As String
            Get
                'Return _NumberOfLocationsWithApartments
                'updated 7/21/2018
                Return VersionAndLobInfo.NumberOfLocationsWithApartments
            End Get
            Set(value As String)
                '_NumberOfLocationsWithApartments = value
                'updated 7/21/2018
                VersionAndLobInfo.NumberOfLocationsWithApartments = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80387; stored in xml at policy level</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ApartmentQuotedPremium As String
            Get
                'Return _ApartmentQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_ApartmentQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.ApartmentQuotedPremium
            End Get
            Set(value As String)
                '_ApartmentQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_ApartmentQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.ApartmentQuotedPremium = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80387; stored in xml at policy level</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasRestaurantEndorsement As Boolean
            Get
                'Return _HasRestaurantEndorsement
                'updated 7/21/2018
                Return VersionAndLobInfo.HasRestaurantEndorsement
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasRestaurantEndorsement
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasRestaurantEndorsement = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasRestaurantEndorsement = value
                'updated 7/21/2018
                VersionAndLobInfo.HasRestaurantEndorsement = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>corresponds to Diamond coverage w/ coveragecode_id 80387; stored in xml at policy level</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property RestaurantQuotedPremium As String
            Get
                'Return _RestaurantQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_RestaurantQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.RestaurantQuotedPremium
            End Get
            Set(value As String)
                '_RestaurantQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_RestaurantQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.RestaurantQuotedPremium = value
            End Set
        End Property

        'added 3/27/2017 for Diamond Proposals
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Comments As List(Of QuickQuoteComment)
            Get
                'SetParentOfListItems(_Comments, "{663B7C7B-F2AC-4BF6-965A-D30F41A04190}")
                'Return _Comments
                'updated 7/27/2018
                Return TopLevelQuoteInfo.Comments
            End Get
            Set(value As List(Of QuickQuoteComment))
                '_Comments = value
                'updated 7/27/2018
                TopLevelQuoteInfo.Comments = value
                'SetParentOfListItems(_Comments, "{663B7C7B-F2AC-4BF6-965A-D30F41A04190}")
            End Set
        End Property

        'added 5/4/2017 for CIM (Golf)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledGolfCourses As List(Of QuickQuoteScheduledGolfCourse)
            Get
                'SetParentOfListItems(_ScheduledGolfCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04021}")
                'Return _ScheduledGolfCourses
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledGolfCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04021}")
                Return VersionAndLobInfo.ScheduledGolfCourses
            End Get
            Set(value As List(Of QuickQuoteScheduledGolfCourse))
                '_ScheduledGolfCourses = value
                'SetParentOfListItems(_ScheduledGolfCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04021}")
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledGolfCourses = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledGolfCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04021}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ScheduledGolfCartCourses As List(Of QuickQuoteScheduledGolfCartCourse)
            Get
                'SetParentOfListItems(_ScheduledGolfCartCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04022}")
                'Return _ScheduledGolfCartCourses
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.ScheduledGolfCartCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04022}")
                Return VersionAndLobInfo.ScheduledGolfCartCourses
            End Get
            Set(value As List(Of QuickQuoteScheduledGolfCartCourse))
                '_ScheduledGolfCartCourses = value
                'SetParentOfListItems(_ScheduledGolfCartCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04022}")
                'updated 7/21/2018
                VersionAndLobInfo.ScheduledGolfCartCourses = value
                SetParentOfListItems(VersionAndLobInfo.ScheduledGolfCartCourses, "{663B7C7B-F2AC-4BF6-965A-D30F41A04022}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCourseQuotedPremium As String 'covCodeId 21341
            Get
                'Return _GolfCourseQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_GolfCourseQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseQuotedPremium
            End Get
            Set(value As String)
                '_GolfCourseQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GolfCourseQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.GolfCourseQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCourseCoverageLimitId As String 'covCodeId 21341
            Get
                'Return _GolfCourseCoverageLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseCoverageLimitId
            End Get
            Set(value As String)
                '_GolfCourseCoverageLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCourseCoverageLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCourseCoverageLimit As String 'added 5/8/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCourseCoverageLimitId, _GolfCourseCoverageLimitId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseCoverageLimit
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCourseDeductibleId As String 'covCodeId 21341
            Get
                'Return _GolfCourseDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseDeductibleId
            End Get
            Set(value As String)
                '_GolfCourseDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCourseDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCourseDeductible As String 'added 5/8/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCourseDeductibleId, _GolfCourseDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCourseCoinsuranceTypeId As String 'covCodeId 21341
            Get
                'Return _GolfCourseCoinsuranceTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseCoinsuranceTypeId
            End Get
            Set(value As String)
                '_GolfCourseCoinsuranceTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCourseCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCourseCoinsuranceType As String 'added 5/8/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCourseCoinsuranceTypeId, _GolfCourseCoinsuranceTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseCoinsuranceType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCourseRate As String 'covCodeId 21341
            Get
                'Return _GolfCourseRate
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCourseRate
            End Get
            Set(value As String)
                '_GolfCourseRate = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCourseRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartQuotedPremium As String 'covCodeId 50121
            Get
                'Return _GolfCartQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_GolfCartQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartQuotedPremium
            End Get
            Set(value As String)
                '_GolfCartQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GolfCartQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartManualLimitAmount As String 'covCodeId 50121
            Get
                'Return _GolfCartManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartManualLimitAmount
            End Get
            Set(value As String)
                '_GolfCartManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_GolfCartManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartDeductibleId As String 'covCodeId 50121
            Get
                'Return _GolfCartDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartDeductibleId
            End Get
            Set(value As String)
                '_GolfCartDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCartDeductible As String 'added 5/8/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCartDeductibleId, _GolfCartDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartCoinsuranceTypeId As String 'covCodeId 50121
            Get
                'Return _GolfCartCoinsuranceTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartCoinsuranceTypeId
            End Get
            Set(value As String)
                '_GolfCartCoinsuranceTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartCoinsuranceTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCartCoinsuranceType As String 'added 5/8/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCartCoinsuranceTypeId, _GolfCartCoinsuranceTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartCoinsuranceType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartRate As String 'covCodeId 50121
            Get
                'Return _GolfCartRate
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartRate
            End Get
            Set(value As String)
                '_GolfCartRate = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartRate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartCatastropheManualLimitAmount As String 'covCodeId 21343
            Get
                'Return _GolfCartCatastropheManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartCatastropheManualLimitAmount
            End Get
            Set(value As String)
                '_GolfCartCatastropheManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_GolfCartCatastropheManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartCatastropheManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GolfCartDebrisRemovalCoverageLimitId As String 'covCodeId 80223
            Get
                'Return _GolfCartDebrisRemovalCoverageLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartDebrisRemovalCoverageLimitId
            End Get
            Set(value As String)
                '_GolfCartDebrisRemovalCoverageLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.GolfCartDebrisRemovalCoverageLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GolfCartDebrisRemovalCoverageLimit As String 'added 5/9/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GolfCartDebrisRemovalCoverageLimitId, _GolfCartDebrisRemovalCoverageLimitId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GolfCartDebrisRemovalCoverageLimit
            End Get
        End Property

        'added 5/8/2017 for GAR
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_AggregateLiabilityIncrementTypeId As String 'covDetail; covCodeId 21552
            Get
                'Return _Liability_UM_UIM_AggregateLiabilityIncrementTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.Liability_UM_UIM_AggregateLiabilityIncrementTypeId
            End Get
            Set(value As String)
                '_Liability_UM_UIM_AggregateLiabilityIncrementTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.Liability_UM_UIM_AggregateLiabilityIncrementTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Liability_UM_UIM_AggregateLiabilityIncrementType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.Liability_UM_UIM_AggregateLiabilityIncrementTypeId, _Liability_UM_UIM_AggregateLiabilityIncrementTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.Liability_UM_UIM_AggregateLiabilityIncrementType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_DeductibleCategoryTypeId As String 'covDetail; covCodeId 21552
            Get
                'Return _Liability_UM_UIM_DeductibleCategoryTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.Liability_UM_UIM_DeductibleCategoryTypeId
            End Get
            Set(value As String)
                '_Liability_UM_UIM_DeductibleCategoryTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.Liability_UM_UIM_DeductibleCategoryTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Liability_UM_UIM_DeductibleCategoryType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.Liability_UM_UIM_DeductibleCategoryTypeId, _Liability_UM_UIM_DeductibleCategoryTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.Liability_UM_UIM_DeductibleCategoryType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_LiabilityQuotedPremium As String 'loc covCodeId 10111
            Get
                'Return _LocationsTotal_LiabilityQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_LiabilityQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_LiabilityQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_LiabilityQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_LiabilityQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_LiabilityQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasUninsuredMotoristPropertyDamage As Boolean 'covCodeId 21539
            Get
                'Return _HasUninsuredMotoristPropertyDamage
                'updated 7/21/2018
                Return VersionAndLobInfo.HasUninsuredMotoristPropertyDamage
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasUninsuredMotoristPropertyDamage
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasUninsuredMotoristPropertyDamage = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasUninsuredMotoristPropertyDamage = value
                'updated 7/21/2018
                VersionAndLobInfo.HasUninsuredMotoristPropertyDamage = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamageQuotedPremium As String 'covCodeId 21539; may not be populated
            Get
                'Return _UninsuredMotoristPropertyDamageQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_UninsuredMotoristPropertyDamageQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamageQuotedPremium
            End Get
            Set(value As String)
                '_UninsuredMotoristPropertyDamageQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_UninsuredMotoristPropertyDamageQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.UninsuredMotoristPropertyDamageQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MedicalPaymentsTypeId As String 'covDetail; covCodeId 21540
            Get
                'Return _MedicalPaymentsTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.MedicalPaymentsTypeId
            End Get
            Set(value As String)
                '_MedicalPaymentsTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.MedicalPaymentsTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property MedicalPaymentsType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.MedicalPaymentsTypeId, _MedicalPaymentsTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.MedicalPaymentsType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_MedicalPaymentsQuotedPremium As String 'loc covCodeId 10112
            Get
                'Return _LocationsTotal_MedicalPaymentsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_MedicalPaymentsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_MedicalPaymentsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_MedicalPaymentsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_MedicalPaymentsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_MedicalPaymentsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPhysicalDamageOtherThanCollision As Boolean 'covCodeId 21550
            Get
                'Return _HasPhysicalDamageOtherThanCollision
                'updated 7/21/2018
                Return VersionAndLobInfo.HasPhysicalDamageOtherThanCollision
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPhysicalDamageOtherThanCollision
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPhysicalDamageOtherThanCollision = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPhysicalDamageOtherThanCollision = value
                'updated 7/21/2018
                VersionAndLobInfo.HasPhysicalDamageOtherThanCollision = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhysicalDamageOtherThanCollisionQuotedPremium As String 'covCodeId 21550; may not be populated
            Get
                'Return _PhysicalDamageOtherThanCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_PhysicalDamageOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.PhysicalDamageOtherThanCollisionQuotedPremium
            End Get
            Set(value As String)
                '_PhysicalDamageOtherThanCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PhysicalDamageOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.PhysicalDamageOtherThanCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium As String 'loc covCodeId 10116
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasPhysicalDamageCollision As Boolean 'covCodeId 21551
            Get
                'Return _HasPhysicalDamageCollision
                'updated 7/21/2018
                Return VersionAndLobInfo.HasPhysicalDamageCollision
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasPhysicalDamageCollision
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasPhysicalDamageCollision = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasPhysicalDamageCollision = value
                'updated 7/21/2018
                VersionAndLobInfo.HasPhysicalDamageCollision = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhysicalDamageCollisionQuotedPremium As String 'covCodeId 21551; may not be populated
            Get
                'Return _PhysicalDamageCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_PhysicalDamageCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.PhysicalDamageCollisionQuotedPremium
            End Get
            Set(value As String)
                '_PhysicalDamageCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_PhysicalDamageCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.PhysicalDamageCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PhysicalDamageCollisionDeductibleId As String 'covCodeId 21551
            Get
                'Return _PhysicalDamageCollisionDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.PhysicalDamageCollisionDeductibleId
            End Get
            Set(value As String)
                '_PhysicalDamageCollisionDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.PhysicalDamageCollisionDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property PhysicalDamageCollisionDeductible As String 'added 5/9/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PhysicalDamageCollisionDeductibleId, _PhysicalDamageCollisionDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.PhysicalDamageCollisionDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasGarageKeepersOtherThanCollision As Boolean 'covCodeId 21541
            Get
                'Return _HasGarageKeepersOtherThanCollision
                'updated 7/21/2018
                Return VersionAndLobInfo.HasGarageKeepersOtherThanCollision
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasGarageKeepersOtherThanCollision
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasGarageKeepersOtherThanCollision = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasGarageKeepersOtherThanCollision = value
                'updated 7/21/2018
                VersionAndLobInfo.HasGarageKeepersOtherThanCollision = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionQuotedPremium As String 'covCodeId 21541
            Get
                'Return _GarageKeepersOtherThanCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_GarageKeepersOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionQuotedPremium
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GarageKeepersOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionManualLimitAmount As String 'covCodeId 21541
            Get
                'updated 7/15/2017
                'Dim _garageKeepersOtcTotalLimitFromLocs As String = qqHelper.GarageKeepersOtherThanCollisionTotalLimitFromLocations(_Locations, returnInLimitFormat:=True)
                'If qqHelper.IsPositiveDecimalString(_garageKeepersOtcTotalLimitFromLocs) = True Then
                '    _GarageKeepersOtherThanCollisionManualLimitAmount = _garageKeepersOtcTotalLimitFromLocs
                'End If
                'Return _GarageKeepersOtherThanCollisionManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionManualLimitAmount
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_GarageKeepersOtherThanCollisionManualLimitAmount)
                ''added 7/17/2017
                'qqHelper.UpdateGarageKeepersOtherThanCollisionAtLocationLevelBasedOnTotalLimit(value, _Locations)
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionBasisTypeId As String 'covDetail; covCodeId 21541
            Get
                'Return _GarageKeepersOtherThanCollisionBasisTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionBasisTypeId
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionBasisTypeId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersOtherThanCollisionBasisTypeId(_GarageKeepersOtherThanCollisionBasisTypeId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionBasisTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersOtherThanCollisionBasisType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersOtherThanCollisionBasisTypeId, _GarageKeepersOtherThanCollisionBasisTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionBasisType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionDeductibleCategoryTypeId As String 'covDetail; covCodeId 21541
            Get
                'Return _GarageKeepersOtherThanCollisionDeductibleCategoryTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId(_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersOtherThanCollisionDeductibleCategoryType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersOtherThanCollisionDeductibleCategoryTypeId, _GarageKeepersOtherThanCollisionDeductibleCategoryTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductibleCategoryType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionTypeId As String 'covDetail; covCodeId 21541
            Get
                'Return _GarageKeepersOtherThanCollisionTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionTypeId
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionTypeId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersOtherThanCollisionTypeId(_GarageKeepersOtherThanCollisionTypeId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersOtherThanCollisionType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersOtherThanCollisionTypeId, _GarageKeepersOtherThanCollisionTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersOtherThanCollisionDeductibleId As String 'covCodeId 21541
            Get
                'Return _GarageKeepersOtherThanCollisionDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductibleId
            End Get
            Set(value As String)
                '_GarageKeepersOtherThanCollisionDeductibleId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersOtherThanCollisionDeductibleId(_GarageKeepersOtherThanCollisionDeductibleId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersOtherThanCollisionDeductible As String 'added 5/9/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersOtherThanCollisionDeductibleId, _GarageKeepersOtherThanCollisionDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersOtherThanCollisionDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasGarageKeepersCollision As Boolean 'covCodeId 21542
            Get
                'Return _HasGarageKeepersCollision
                'updated 7/21/2018
                Return VersionAndLobInfo.HasGarageKeepersCollision
                'updated 9/14/2018
                'Dim hasIt As Boolean = VersionAndLobInfo.HasGarageKeepersCollision
                'If hasIt = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                '    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                '        If msq IsNot Nothing AndAlso msq.HasGarageKeepersCollision = True Then
                '            hasIt = True
                '            Exit For
                '        End If
                '    Next
                'End If
                'Return hasIt
            End Get
            Set(value As Boolean)
                '_HasGarageKeepersCollision = value
                'updated 7/21/2018
                VersionAndLobInfo.HasGarageKeepersCollision = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersCollisionQuotedPremium As String 'covCodeId 21542
            Get
                'Return _GarageKeepersCollisionQuotedPremiumm
                'Return qqHelper.QuotedPremiumFormat(_GarageKeepersCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionQuotedPremium
            End Get
            Set(value As String)
                '_GarageKeepersCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GarageKeepersCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersCollisionManualLimitAmount As String 'covCodeId 21542
            Get
                'updated 7/17/2017
                'Dim _garageKeepersCollTotalLimitFromLocs As String = qqHelper.GarageKeepersCollisionTotalLimitFromLocations(_Locations, returnInLimitFormat:=True)
                'If qqHelper.IsPositiveDecimalString(_garageKeepersCollTotalLimitFromLocs) = True Then
                '    _GarageKeepersCollisionManualLimitAmount = _garageKeepersCollTotalLimitFromLocs
                'End If
                'Return _GarageKeepersCollisionManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionManualLimitAmount
            End Get
            Set(value As String)
                '_GarageKeepersCollisionManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_GarageKeepersCollisionManualLimitAmount)
                ''added 7/17/2017
                'qqHelper.UpdateGarageKeepersCollisionAtLocationLevelBasedOnTotalLimit(value, _Locations)
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersCollisionManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersCollisionBasisTypeId As String 'covDetail; covCodeId 21542
            Get
                'Return _GarageKeepersCollisionBasisTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionBasisTypeId
            End Get
            Set(value As String)
                '_GarageKeepersCollisionBasisTypeId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersCollisionBasisTypeId(_GarageKeepersCollisionBasisTypeId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersCollisionBasisTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersCollisionBasisType As String 'added 5/9/2017
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersCollisionBasisTypeId, _GarageKeepersCollisionBasisTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionBasisType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersCollisionDeductibleId As String 'covCodeId 21542
            Get
                'Return _GarageKeepersCollisionDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionDeductibleId
            End Get
            Set(value As String)
                '_GarageKeepersCollisionDeductibleId = value
                ''updated 7/15/2017 to set on all Locations
                'If qqHelper.LocationCount(_Locations) > 0 Then
                '    For Each l As QuickQuoteLocation In _Locations
                '        If l IsNot Nothing Then
                '            l.Set_GarageKeepersCollisionDeductibleId(_GarageKeepersCollisionDeductibleId)
                '        End If
                '    Next
                'End If
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersCollisionDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersCollisionDeductible As String 'added 5/9/2017; still needs update to static data values
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.GarageKeepersCollisionDeductibleId, _GarageKeepersCollisionDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersCollisionDeductible
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersTotalPremium As String 'added 5/9/2017; SUM of prems for policy (covCodeIds 21541 and 21542 - has prem) and loc (covCodeIds 10086, 10087, and 10126 - no prem) covs
            Get
                'Return _GarageKeepersTotalPremium
                'Return qqHelper.QuotedPremiumFormat(_GarageKeepersTotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersTotalPremium
            End Get
            Set(value As String)
                '_GarageKeepersTotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_GarageKeepersTotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersTotalPremium = value
            End Set
        End Property
        'added 8/26/2017
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property GarageKeepersBasisTypeId As String 'covDetail; covCodeIds 21541 (OtherThanColl) and 21542 (Coll)
            Get
                'Dim gkBasisTypeId As String = ""

                'If qqHelper.IsPositiveIntegerString(_GarageKeepersOtherThanCollisionBasisTypeId) = True Then
                '    gkBasisTypeId = _GarageKeepersOtherThanCollisionBasisTypeId
                'ElseIf qqHelper.IsPositiveIntegerString(_GarageKeepersCollisionBasisTypeId) = True Then
                '    gkBasisTypeId = _GarageKeepersCollisionBasisTypeId
                'ElseIf String.IsNullOrWhiteSpace(_GarageKeepersOtherThanCollisionBasisTypeId) = False Then
                '    gkBasisTypeId = _GarageKeepersOtherThanCollisionBasisTypeId
                'ElseIf String.IsNullOrWhiteSpace(_GarageKeepersCollisionBasisTypeId) = False Then
                '    gkBasisTypeId = _GarageKeepersCollisionBasisTypeId
                'End If

                'Return gkBasisTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersBasisTypeId
            End Get
            Set(value As String)
                'GarageKeepersOtherThanCollisionBasisTypeId = value
                'GarageKeepersCollisionBasisTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.GarageKeepersBasisTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property GarageKeepersBasisType As String
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteCoverage, QuickQuoteHelperClass.QuickQuotePropertyName.BasisTypeId, GarageKeepersBasisTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.GarageKeepersBasisType
            End Get
        End Property

        'added 5/10/2017 for GAR (also CAP)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoLiabilityTotalPremium As String 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs
            Get
                'Return _AutoLiabilityTotalPremium
                'Return qqHelper.QuotedPremiumFormat(_AutoLiabilityTotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.AutoLiabilityTotalPremium
            End Get
            Set(value As String)
                '_AutoLiabilityTotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AutoLiabilityTotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.AutoLiabilityTotalPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoMedicalPaymentsTotalPremium As String 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs
            Get
                'Return _AutoMedicalPaymentsTotalPremium
                'Return qqHelper.QuotedPremiumFormat(_AutoMedicalPaymentsTotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.AutoMedicalPaymentsTotalPremium
            End Get
            Set(value As String)
                '_AutoMedicalPaymentsTotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AutoMedicalPaymentsTotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.AutoMedicalPaymentsTotalPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Auto_UM_UIM_TotalPremium As String 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs
            Get
                'Return _Auto_UM_UIM_TotalPremium
                'Return qqHelper.QuotedPremiumFormat(_Auto_UM_UIM_TotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.Auto_UM_UIM_TotalPremium
            End Get
            Set(value As String)
                '_Auto_UM_UIM_TotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_Auto_UM_UIM_TotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.Auto_UM_UIM_TotalPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoComprehensiveTotalPremium As String 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs
            Get
                'Return _AutoComprehensiveTotalPremium
                'Return qqHelper.QuotedPremiumFormat(_AutoComprehensiveTotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.AutoComprehensiveTotalPremium
            End Get
            Set(value As String)
                '_AutoComprehensiveTotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AutoComprehensiveTotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.AutoComprehensiveTotalPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AutoCollisionTotalPremium As String 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs
            Get
                'Return _AutoCollisionTotalPremium
                'Return qqHelper.QuotedPremiumFormat(_AutoCollisionTotalPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.AutoCollisionTotalPremium
            End Get
            Set(value As String)
                '_AutoCollisionTotalPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_AutoCollisionTotalPremium)
                'updated 7/21/2018
                VersionAndLobInfo.AutoCollisionTotalPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_GAR_OptCovs_Premium As String 'diff of CAP/GAR totalPremium minus above premiums, towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
            Get
                'Return _CAP_GAR_OptCovs_Premium
                'Return qqHelper.QuotedPremiumFormat(_CAP_GAR_OptCovs_Premium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CAP_GAR_OptCovs_Premium
            End Get
            Set(value As String)
                '_CAP_GAR_OptCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CAP_GAR_OptCovs_Premium)
                'updated 7/21/2018
                VersionAndLobInfo.CAP_GAR_OptCovs_Premium = value
            End Set
        End Property
        'added 5/11/2017 for GAR
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIIEmployees25AndOlder As String
            Get
                'Return _LocationsTotal_ClassIIEmployees25AndOlder
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIIEmployees25AndOlder
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIIEmployees25AndOlder = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIIEmployees25AndOlder)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIIEmployees25AndOlder = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIIEmployeesUnderAge25 As String
            Get
                'Return _LocationsTotal_ClassIIEmployeesUnderAge25
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIIEmployeesUnderAge25
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIIEmployeesUnderAge25 = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIIEmployeesUnderAge25)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIIEmployeesUnderAge25 = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIOtherEmployees As String
            Get
                'Return _LocationsTotal_ClassIOtherEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIOtherEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIOtherEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIOtherEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIOtherEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIRegularEmployees As String
            Get
                'Return _LocationsTotal_ClassIRegularEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIRegularEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIRegularEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIRegularEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIRegularEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_NumberOfEmployees As String
            Get
                'Return _LocationsTotal_NumberOfEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_NumberOfEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_NumberOfEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_NumberOfEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_NumberOfEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_Payroll As String
            Get
                'Return _LocationsTotal_Payroll
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_Payroll
            End Get
            Set(value As String)
                '_LocationsTotal_Payroll = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_Payroll)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_Payroll = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates As String 'covCodeId 10113; covDetail
            Get
                'Return _LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates
            End Get
            Set(value As String)
                '_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates = value
            End Set
        End Property
        'added 5/16/2017 for GAR
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIEmployees As String
            Get
                'Return _LocationsTotal_ClassIEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIIEmployees As String
            Get
                'Return _LocationsTotal_ClassIIEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIIEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIIEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIIEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIIEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_ClassIandIIEmployees As String
            Get
                'Return _LocationsTotal_ClassIandIIEmployees
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_ClassIandIIEmployees
            End Get
            Set(value As String)
                '_LocationsTotal_ClassIandIIEmployees = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_ClassIandIIEmployees)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_ClassIandIIEmployees = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_DealersBlanketCollisionQuotedPremium As String 'loc covCodeId 10120
            Get
                'Return _LocationsTotal_DealersBlanketCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_DealersBlanketCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_DealersBlanketCollisionQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_DealersBlanketCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_DealersBlanketCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_DealersBlanketCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium As String 'loc covCodeId 10115
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount As String 'loc covCodeId 10115
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium As String 'loc covCodeId 10117
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount As String 'loc covCodeId 10117
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium As String 'loc covCodeId 10118
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount As String 'loc covCodeId 10118
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium As String 'loc covCodeId 10119
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount As String 'loc covCodeId 10119
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium As String 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount As String 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            Get
                'Return _LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount
            End Get
            Set(value As String)
                '_LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount = value
                'qqHelper.ConvertToLimitFormat(_LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId As String 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            Get
                'Return _Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId
            End Get
            Set(value As String)
                '_Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryType As String
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId, _Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_PhysicalDamageOtherThanCollisionTypeId As String 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            Get
                'Return _Locations_PhysicalDamageOtherThanCollisionTypeId
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionTypeId
            End Get
            Set(value As String)
                '_Locations_PhysicalDamageOtherThanCollisionTypeId = value
                'updated 7/21/2018
                VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Locations_PhysicalDamageOtherThanCollisionType As String
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.Locations_PhysicalDamageOtherThanCollisionTypeId, _Locations_PhysicalDamageOtherThanCollisionTypeId)
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Locations_PhysicalDamageOtherThanCollisionDeductibleId As String 'loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            Get
                'Return _Locations_PhysicalDamageOtherThanCollisionDeductibleId
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductibleId
            End Get
            Set(value As String)
                '_Locations_PhysicalDamageOtherThanCollisionDeductibleId = value
                'updated 7/21/2018
                VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Locations_PhysicalDamageOtherThanCollisionDeductible As String
            Get
                'Return qqHelper.GetStaticDataTextForValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.Locations_PhysicalDamageOtherThanCollisionDeductibleId, _Locations_PhysicalDamageOtherThanCollisionDeductibleId)
                'updated 7/21/2018
                Return VersionAndLobInfo.Locations_PhysicalDamageOtherThanCollisionDeductible
            End Get
        End Property
        'added 5/16/2017 for CPP
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_MinPremAdj_CPR As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            Get
                'Return _CPP_MinPremAdj_CPR
                'Return qqHelper.QuotedPremiumFormat(_CPP_MinPremAdj_CPR)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_MinPremAdj_CPR
            End Get
            Set(value As String)
                '_CPP_MinPremAdj_CPR = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_MinPremAdj_CPR)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_MinPremAdj_CPR = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_MinPremAdj_CGL As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            Get
                'Return _CPP_MinPremAdj_CGL
                'Return qqHelper.QuotedPremiumFormat(_CPP_MinPremAdj_CGL)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_MinPremAdj_CGL
            End Get
            Set(value As String)
                '_CPP_MinPremAdj_CGL = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_MinPremAdj_CGL)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_MinPremAdj_CGL = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_MinPremAdj_CIM As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            Get
                'Return _CPP_MinPremAdj_CIM
                'Return qqHelper.QuotedPremiumFormat(_CPP_MinPremAdj_CIM)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_MinPremAdj_CIM
            End Get
            Set(value As String)
                '_CPP_MinPremAdj_CIM = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_MinPremAdj_CIM)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_MinPremAdj_CIM = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_MinPremAdj_CRM As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            Get
                'Return _CPP_MinPremAdj_CRM
                'Return qqHelper.QuotedPremiumFormat(_CPP_MinPremAdj_CRM)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_MinPremAdj_CRM
            End Get
            Set(value As String)
                '_CPP_MinPremAdj_CRM = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_MinPremAdj_CRM)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_MinPremAdj_CRM = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_MinPremAdj_GAR As String 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            Get
                'Return _CPP_MinPremAdj_GAR
                'Return qqHelper.QuotedPremiumFormat(_CPP_MinPremAdj_GAR)
                'updated 7/21/2018
                Return VersionAndLobInfo.CPP_MinPremAdj_GAR
            End Get
            Set(value As String)
                '_CPP_MinPremAdj_GAR = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CPP_MinPremAdj_GAR)
                'updated 7/21/2018
                VersionAndLobInfo.CPP_MinPremAdj_GAR = value
            End Set
        End Property
        'added 5/25/2017 for GAR
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_GAR_PolicyLevelCovs_Premium As String
            Get
                'Return _CAP_GAR_PolicyLevelCovs_Premium
                'Return qqHelper.QuotedPremiumFormat(_CAP_GAR_PolicyLevelCovs_Premium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CAP_GAR_PolicyLevelCovs_Premium
            End Get
            Set(value As String)
                '_CAP_GAR_PolicyLevelCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CAP_GAR_PolicyLevelCovs_Premium)
                'updated 7/21/2018
                VersionAndLobInfo.CAP_GAR_PolicyLevelCovs_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_GAR_LocationLevelCovs_Premium As String
            Get
                'Return _CAP_GAR_LocationLevelCovs_Premium
                'Return qqHelper.QuotedPremiumFormat(_CAP_GAR_LocationLevelCovs_Premium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CAP_GAR_LocationLevelCovs_Premium
            End Get
            Set(value As String)
                '_CAP_GAR_LocationLevelCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CAP_GAR_LocationLevelCovs_Premium)
                'updated 7/21/2018
                VersionAndLobInfo.CAP_GAR_LocationLevelCovs_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_GAR_VehicleLevelCovs_Premium As String
            Get
                'Return _CAP_GAR_VehicleLevelCovs_Premium
                'Return qqHelper.QuotedPremiumFormat(_CAP_GAR_VehicleLevelCovs_Premium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CAP_GAR_VehicleLevelCovs_Premium
            End Get
            Set(value As String)
                '_CAP_GAR_VehicleLevelCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CAP_GAR_VehicleLevelCovs_Premium)
                'updated 7/21/2018
                VersionAndLobInfo.CAP_GAR_VehicleLevelCovs_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium As String 'loc covCodeId 10113
            Get
                'Return _LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium As String 'loc covCodeId 10086
            Get
                'Return _LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_GarageKeepersCollisionQuotedPremium As String 'loc covCodeId 10087
            Get
                'Return _LocationsTotal_GarageKeepersCollisionQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_GarageKeepersCollisionQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_GarageKeepersCollisionQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_GarageKeepersCollisionQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_GarageKeepersCollisionQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_GarageKeepersCollisionQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium As String 'loc covCodeId 10126
            Get
                'Return _LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium
                'Return qqHelper.QuotedPremiumFormat(_LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium
            End Get
            Set(value As String)
                '_LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium)
                'updated 7/21/2018
                VersionAndLobInfo.LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CAP_GAR_PolicyAndLocationLevelCovs_Premium As String 'added 5/26/2017
            Get
                'Return _CAP_GAR_PolicyAndLocationLevelCovs_Premium
                'Return qqHelper.QuotedPremiumFormat(_CAP_GAR_PolicyAndLocationLevelCovs_Premium)
                'updated 7/21/2018
                Return VersionAndLobInfo.CAP_GAR_PolicyAndLocationLevelCovs_Premium
            End Get
            Set(value As String)
                '_CAP_GAR_PolicyAndLocationLevelCovs_Premium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_CAP_GAR_PolicyAndLocationLevelCovs_Premium)
                'updated 7/21/2018
                VersionAndLobInfo.CAP_GAR_PolicyAndLocationLevelCovs_Premium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_CAP_GAR_TotalCoveragesPremium As String 'added 5/26/2017; should essentially match CAP_GAR_VehicleLevelCovs_Premium
            Get
                'Return _VehiclesTotal_CAP_GAR_TotalCoveragesPremium
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_CAP_GAR_TotalCoveragesPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.VehiclesTotal_CAP_GAR_TotalCoveragesPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_CAP_GAR_TotalCoveragesPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_CAP_GAR_TotalCoveragesPremium)
                'updated 7/21/2018
                VersionAndLobInfo.VehiclesTotal_CAP_GAR_TotalCoveragesPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property VehiclesTotal_TotalCoveragesPremium As String 'added 5/26/2017
            Get
                'Return _VehiclesTotal_TotalCoveragesPremium
                'Return qqHelper.QuotedPremiumFormat(_VehiclesTotal_TotalCoveragesPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.VehiclesTotal_TotalCoveragesPremium
            End Get
            Set(value As String)
                '_VehiclesTotal_TotalCoveragesPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_VehiclesTotal_TotalCoveragesPremium)
                'updated 7/21/2018
                VersionAndLobInfo.VehiclesTotal_TotalCoveragesPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property DriversTotal_TotalCoveragesPremium As String 'added 5/27/2017
            Get
                'Return _DriversTotal_TotalCoveragesPremium
                'Return qqHelper.QuotedPremiumFormat(_DriversTotal_TotalCoveragesPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.DriversTotal_TotalCoveragesPremium
            End Get
            Set(value As String)
                '_DriversTotal_TotalCoveragesPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_DriversTotal_TotalCoveragesPremium)
                'updated 7/21/2018
                VersionAndLobInfo.DriversTotal_TotalCoveragesPremium = value
            End Set
        End Property

        'added 5/23/2017
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AdditionalInterestListLinks As List(Of QuickQuoteAdditionalInterestListLink)
            Get
                'SetParentOfListItems(_AdditionalInterestListLinks, "{663B7C7B-F2AC-4BF6-965A-D30F41A04023}")
                'Return _AdditionalInterestListLinks
                'updated 7/21/2018
                SetParentOfListItems(VersionAndLobInfo.AdditionalInterestListLinks, "{663B7C7B-F2AC-4BF6-965A-D30F41A04023}")
                Return VersionAndLobInfo.AdditionalInterestListLinks
            End Get
            Set(value As List(Of QuickQuoteAdditionalInterestListLink))
                '_AdditionalInterestListLinks = value
                'SetParentOfListItems(_AdditionalInterestListLinks, "{663B7C7B-F2AC-4BF6-965A-D30F41A04023}")
                'updated 7/21/2018
                VersionAndLobInfo.AdditionalInterestListLinks = value
                SetParentOfListItems(VersionAndLobInfo.AdditionalInterestListLinks, "{663B7C7B-F2AC-4BF6-965A-D30F41A04023}")
            End Set
        End Property

        'added 8/19/2017 for WCP Risk Grade; could also be used for other warnings/stops/kills
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Messages As List(Of QuickQuoteMessage) 'TODO: Dan - Parent?
            Get
                'Return _Messages
                'updated 7/27/2018
                Return TopLevelQuoteInfo.Messages
            End Get
            Set(value As List(Of QuickQuoteMessage))
                '_Messages = value
                'updated 7/27/2018
                TopLevelQuoteInfo.Messages = value
            End Set
        End Property
        'added 8/24/2017
        'Public Property QuoteStatus As QuickQuoteXML.QuickQuoteStatusType
        '    Get
        '        Dim qStatusType As QuickQuoteXML.QuickQuoteStatusType = Nothing
        '        If System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuoteStatusType), _Database_QuoteStatusId) = True Then
        '            qStatusType = _Database_QuoteStatusId
        '        End If
        '        'If System.Enum.TryParse(Of QuickQuoteXML.QuickQuoteStatusType)(_Database_QuoteStatusId, qStatusType) = False Then
        '        '    qStatusType = Nothing
        '        'End If
        '        Return qStatusType
        '    End Get
        '    Set(value As QuickQuoteXML.QuickQuoteStatusType)
        '        _Database_QuoteStatusId = CInt(value)
        '    End Set
        'End Property
        Public ReadOnly Property QuoteStatus As QuickQuoteXML.QuickQuoteStatusType
            Get
                Dim qStatusType As QuickQuoteXML.QuickQuoteStatusType = Nothing
                'If qqHelper.IsPositiveIntegerString(_Database_QuoteStatusId) = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuoteStatusType), CInt(_Database_QuoteStatusId)) = True Then
                '    qStatusType = CInt(_Database_QuoteStatusId)
                'End If
                'updated 7/27/2018
                If qqHelper.IsPositiveIntegerString(TopLevelQuoteInfo.Database_QuoteStatusId) = True AndAlso System.Enum.IsDefined(GetType(QuickQuoteXML.QuickQuoteStatusType), CInt(TopLevelQuoteInfo.Database_QuoteStatusId)) = True Then
                    qStatusType = CInt(TopLevelQuoteInfo.Database_QuoteStatusId)
                End If
                'If qqHelper.IsPositiveIntegerString(_Database_QuoteStatusId) = False OrElse System.Enum.TryParse(Of QuickQuoteXML.QuickQuoteStatusType)(CInt(_Database_QuoteStatusId), qStatusType) = False Then
                '    qStatusType = Nothing
                'End If
                Return qStatusType
            End Get
        End Property

        'added 8/29/2017
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WCP_WaiverPremium As String 'covCodeId 10124 CovAddInfo w/ "Waiver Premium" in desc
            Get
                'Return _WCP_WaiverPremium
                'Return qqHelper.QuotedPremiumFormat(_WCP_WaiverPremium)
                'updated 7/21/2018
                Return VersionAndLobInfo.WCP_WaiverPremium
            End Get
            Set(value As String)
                '_WCP_WaiverPremium = value
                'qqHelper.ConvertToQuotedPremiumFormat(_WCP_WaiverPremium)
                'updated 7/21/2018
                VersionAndLobInfo.WCP_WaiverPremium = value
            End Set
        End Property

        Public ReadOnly Property AnnualPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "Annual"
                Dim strIgnoreList As List(Of String) = Nothing
                helper.AddStringToList("MTG", strIgnoreList)
                helper.AddStringToList("Semi", strIgnoreList)

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property SemiAnnualPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "Semi Annual"
                Dim strIgnoreList As List(Of String) = Nothing

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property QuarterlyPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "Quarterly"
                Dim strIgnoreList As List(Of String) = Nothing

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property MonthlyPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "Monthly"
                Dim strIgnoreList As List(Of String) = Nothing
                helper.AddStringToList("Account Bill", strIgnoreList)
                helper.AddStringToList("Credit Card", strIgnoreList)
                helper.AddStringToList("EFT", strIgnoreList)

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property CreditCardMonthlyPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "Credit Card Monthly"
                Dim strIgnoreList As List(Of String) = Nothing
                helper.AddStringToList("Account Bill", strIgnoreList)

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property EFTMonthlyPaymentOption As QuickQuotePaymentOption
            Get
                Dim po As QuickQuotePaymentOption = Nothing

                Dim txtToFind As String = "EFT Monthly"
                Dim strIgnoreList As List(Of String) = Nothing
                helper.AddStringToList("Account Bill", strIgnoreList)

                po = helper.QuickQuotePaymentOptionWithMatchingTextInDescriptionAndTextToIgnore(PaymentOptions, txtToFind, strIgnoreList)

                Return po
            End Get
        End Property
        Public ReadOnly Property AnnualPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = AnnualPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property
        Public ReadOnly Property SemiAnnualPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = SemiAnnualPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property
        Public ReadOnly Property QuarterlyPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = QuarterlyPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property
        Public ReadOnly Property MonthlyPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = MonthlyPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property
        Public ReadOnly Property CreditCardMonthlyPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = CreditCardMonthlyPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property
        Public ReadOnly Property EFTMonthlyPaymentOption_DownPayment As String
            Get
                Dim dp As String = ""

                Dim po As QuickQuotePaymentOption = EFTMonthlyPaymentOption
                If po IsNot Nothing Then
                    'dp = po.DepositAmount
                    dp = qqHelper.QuotedPremiumFormat(po.DepositAmount)
                End If

                Return dp
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PriorBodilyInjuryLimitId As String 'added 5-9-18
            Get
                'Return _PriorBodilyInjuryLimitId
                'updated 7/21/2018
                Return VersionAndLobInfo.PriorBodilyInjuryLimitId
            End Get
            Set(value As String)
                '_PriorBodilyInjuryLimitId = value
                'updated 7/21/2018
                VersionAndLobInfo.PriorBodilyInjuryLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        <ObsoleteAttribute("This property is obsolete. Use PriorBodilyInjuryLimitId instead. Will be removed post Parachute.", False)>
        Public Property PriorBodilyInjuryLimit As String 'added 5-9-18
            Get
                Return PriorBodilyInjuryLimitId
            End Get
            Set(value As String)
                PriorBodilyInjuryLimitId = value
            End Set
        End Property

        'added 9/25/2018 for multi-state
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Liability_UM_UIM_DeductibleId As String 'covCodeId 21552
            Get
                Return VersionAndLobInfo.Liability_UM_UIM_DeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.Liability_UM_UIM_DeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamageLimitId As String 'covCodeId 21539; note: same prop exists on Vehicle
            Get
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamageLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.UninsuredMotoristPropertyDamageLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamageDeductibleId As String 'covCodeId 21539
            Get
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamageDeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.UninsuredMotoristPropertyDamageDeductibleId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnderinsuredMotoristBodilyInjuryLiabilityLimitId As String 'covCodeId 21548
            Get
                Return VersionAndLobInfo.UnderinsuredMotoristBodilyInjuryLiabilityLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.UnderinsuredMotoristBodilyInjuryLiabilityLimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium As String 'covCodeId 21548
            Get
                Return VersionAndLobInfo.UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = value
            End Set
        End Property

        'added 10/15/2018 for IL (similar to existing props w/o IL, but different form # and typeId)
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 287</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasExclusionOfSoleProprietorsPartnersOfficersAndOthers_IL As Boolean
            Get
                Return VersionAndLobInfo.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers_IL
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasExclusionOfSoleProprietorsPartnersOfficersAndOthers_IL = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 287</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ExclusionOfSoleProprietorRecords_IL As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL)
            Get
                Return VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL
            End Get
            Set(value As List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL))
                VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property ExclusionOfSoleProprietorRecordsBackup_IL As Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL)
            Get
                Return VersionAndLobInfo.ExclusionOfSoleProprietorRecordsBackup_IL
            End Get
        End Property
        'added 4/26/2019 for KY
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 291</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasKentuckyRejectionOfCoverageEndorsement As Boolean
            Get
                Return VersionAndLobInfo.HasKentuckyRejectionOfCoverageEndorsement
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasKentuckyRejectionOfCoverageEndorsement = value
            End Set
        End Property
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>specific to Diamond InclusionsExclusions w/ TypeId 291</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property KentuckyRejectionOfCoverageEndorsementRecords As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement)
            Get
                Return VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords
            End Get
            Set(value As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement))
                VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property KentuckyRejectionOfCoverageEndorsementRecordsBackup As List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement)
            Get
                Return VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecordsBackup
            End Get
        End Property

        'added 10/24/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasIllinoisContractorsHomeRepairAndRemodeling As Boolean
            Get
                Return VersionAndLobInfo.HasIllinoisContractorsHomeRepairAndRemodeling
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasIllinoisContractorsHomeRepairAndRemodeling = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IllinoisContractorsHomeRepairAndRemodelingManualLimitAmount As String
            Get
                Return VersionAndLobInfo.IllinoisContractorsHomeRepairAndRemodelingManualLimitAmount
            End Get
            Set(value As String)
                VersionAndLobInfo.IllinoisContractorsHomeRepairAndRemodelingManualLimitAmount = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property IllinoisContractorsHomeRepairAndRemodelingQuotedPremium As String
            Get
                Return VersionAndLobInfo.IllinoisContractorsHomeRepairAndRemodelingQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.IllinoisContractorsHomeRepairAndRemodelingQuotedPremium = value
            End Set
        End Property

        'added 11/28/2018 for WCP IL (included in total premium)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CatastropheOtherThanCertifiedActsOfTerrorismQuotedPremium As String
            Get
                Return VersionAndLobInfo.CatastropheOtherThanCertifiedActsOfTerrorismQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.CatastropheOtherThanCertifiedActsOfTerrorismQuotedPremium = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiability As Boolean
            Get
                Return VersionAndLobInfo.CyberLiability
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.CyberLiability = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityPremium As String
            Get
                Return VersionAndLobInfo.CyberLiabilityPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityPremium = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityLimit As String
            Get
                Return VersionAndLobInfo.CyberLiabilityLimit
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityLimit = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityLimitId As String
            Get
                Return VersionAndLobInfo.CyberLiabilityLimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityLimitId = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityDeductible As String
            Get
                Return VersionAndLobInfo.CyberLiabilityDeductible
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityDeductible = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityDeductibleId As String
            Get
                Return VersionAndLobInfo.CyberLiabilityDeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityDeductibleId = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityTypeId As String
            Get
                Return VersionAndLobInfo.CyberLiabilityTypeId
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityTypeId = value
            End Set
        End Property

        'added 04/15/2019 for CGG-CPP-BOP Cyber Liability
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CyberLiabilityType As String
            Get
                Return VersionAndLobInfo.CyberLiabilityType
            End Get
            Set(value As String)
                VersionAndLobInfo.CyberLiabilityType = value
            End Set
        End Property

        'added 7/15/2019 for WCP KY
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property KentuckySpecialFundAssessmentQuotedPremium As String
            Get
                Return VersionAndLobInfo.KentuckySpecialFundAssessmentQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.KentuckySpecialFundAssessmentQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property WCP_KY_PremSurcharge As String
            Get
                Return VersionAndLobInfo.WCP_KY_PremSurcharge
            End Get
            Set(value As String)
                VersionAndLobInfo.WCP_KY_PremSurcharge = value
            End Set
        End Property

        'added 4/20/2020 for PUP/FUP
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmSizeTypeId As String 'static data
            Get
                Return VersionAndLobInfo.FarmSizeTypeId
            End Get
            Set(value As String)
                VersionAndLobInfo.FarmSizeTypeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FarmTypeId As String 'static data
            Get
                Return VersionAndLobInfo.FarmTypeId
            End Get
            Set(value As String)
                VersionAndLobInfo.FarmTypeId = value
            End Set
        End Property


        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UnderlyingPolicies As List(Of QuickQuoteUnderlyingPolicy)
            Get
                SetParentOfListItems(VersionAndLobInfo.UnderlyingPolicies, "{663B7C7B-F2AC-4BF6-965A-D30F41A04025}")
                Return VersionAndLobInfo.UnderlyingPolicies
            End Get
            Set(value As List(Of QuickQuoteUnderlyingPolicy))
                VersionAndLobInfo.UnderlyingPolicies = value
                SetParentOfListItems(VersionAndLobInfo.UnderlyingPolicies, "{663B7C7B-F2AC-4BF6-965A-D30F41A04025}")
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation As Boolean
            Get
                'Return VersionAndLobInfo.CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation
                Dim canUse As Boolean = VersionAndLobInfo.CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation
                If canUse = False AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing AndAlso msq.CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation = True Then
                            canUse = True
                            Exit For
                        End If
                    Next
                End If
                Return canUse
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation = value
            End Set
        End Property

        'added 10/17/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForMasterPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForMasterPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForMasterPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForCGLPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForCGLPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForCGLPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForCPRPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForCPRPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForCPRPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForCIMPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForCIMPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForCIMPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForCRMPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForCRMPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForCRMPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseLocationNumForGARPartLocationReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseLocationNumForGARPartLocationReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseLocationNumForGARPartLocationReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForMasterPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForMasterPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForMasterPartVehicleReconciliation = value
            End Set
        End Property
        'added 10/18/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForCGLPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForCGLPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForCGLPartVehicleReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForCPRPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForCPRPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForCPRPartVehicleReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForCIMPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForCIMPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForCIMPartVehicleReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForCRMPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForCRMPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForCRMPartVehicleReconciliation = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CanUseVehicleNumForGARPartVehicleReconciliation As Boolean
            Get
                Return TopLevelQuoteInfo.CanUseVehicleNumForGARPartVehicleReconciliation
            End Get
            Set(value As Boolean)
                TopLevelQuoteInfo.CanUseVehicleNumForGARPartVehicleReconciliation = value
            End Set
        End Property

        'added 3/19/2019
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DiamondImageInfoId As Integer
            Get
                'Return TopLevelQuoteInfo.Database_DiamondImageInfoId
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageInfoId
            End Get
            Set(value As Integer)
                'TopLevelQuoteInfo.Database_DiamondImageInfoId = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageInfoId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DiamondImageXmlId As Integer
            Get
                'Return TopLevelQuoteInfo.Database_DiamondImageXmlId
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageXmlId
            End Get
            Set(value As Integer)
                'TopLevelQuoteInfo.Database_DiamondImageXmlId = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageXmlId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DiamondImageInfoType As QuickQuoteDiamondImageInfo.ImageInfoType
            Get
                'Return TopLevelQuoteInfo.Database_DiamondImageInfoType
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageInfoType
            End Get
            Set(value As QuickQuoteDiamondImageInfo.ImageInfoType)
                'TopLevelQuoteInfo.Database_DiamondImageInfoType = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiamondImageInfoType = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_IsBillingUpdate As Boolean
            Get
                'Return TopLevelQuoteInfo.Database_IsBillingUpdate
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_IsBillingUpdate
            End Get
            Set(value As Boolean)
                'TopLevelQuoteInfo.Database_IsBillingUpdate = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_IsBillingUpdate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_EndorsementOrigin As QuickQuoteEndorsementForPolicyIdAndTransactionDateInput.EndorsementOriginTypes
            Get
                'Return TopLevelQuoteInfo.Database_IsBillingUpdate
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_EndorsementOrigin
            End Get
            Set(value As QuickQuoteEndorsementForPolicyIdAndTransactionDateInput.EndorsementOriginTypes)
                'TopLevelQuoteInfo.Database_IsBillingUpdate = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_EndorsementOrigin = value
            End Set
        End Property

        'added 3/19/2019
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DevDictionaryID As Integer
            Get
                'Return TopLevelQuoteInfo.Database_DiamondImageInfoId
                'updated 7/2/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DevDictionaryID
            End Get
            Set(value As Integer)
                'TopLevelQuoteInfo.Database_DiamondImageInfoId = value
                'updated 7/2/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DevDictionaryID = value
            End Set
        End Property

        'added 1/4/2020 (Interoperability)
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_LastRulesOverrideRecordModifiedDate As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LastRulesOverrideRecordModifiedDate
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_LastRulesOverrideRecordModifiedDate = value
            End Set
        End Property

        'added 5/13/2021
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuickQuote_Inserted As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuickQuote_Inserted
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuickQuote_Inserted = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuickQuote_Updated As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuickQuote_Updated
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuickQuote_Updated = value
            End Set
        End Property

        'added 11/27/2022
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_CompanyId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_CompanyId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_CompanyId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_QuoteCompanyId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteCompanyId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_QuoteCompanyId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_AppCompanyId As String
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppCompanyId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_AppCompanyId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property Database_DiaCompanyId As String 'added 7/27/2023
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiaCompanyId
            End Get
            Set(value As String)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiaCompanyId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property Database_DiaCompany As QuickQuoteHelperClass.QuickQuoteCompany 'added 7/27/2023
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.Database_DiaCompany
            End Get
        End Property


        'added 5/22/2019; note: could use GetTopLevelQuoteObject() for all 3
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property AddedDate As String
            Get
                Return TopLevelQuoteInfo.AddedDate
            End Get
            Set(value As String)
                TopLevelQuoteInfo.AddedDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property LastModifiedDate As String
            Get
                Return TopLevelQuoteInfo.LastModifiedDate
            End Get
            Set(value As String)
                TopLevelQuoteInfo.LastModifiedDate = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PCAdded_Date As String
            Get
                Return TopLevelQuoteInfo.PCAdded_Date
            End Get
            Set(value As String)
                TopLevelQuoteInfo.PCAdded_Date = value
            End Set
        End Property

        'added 6/15/2019
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyCurrentStatusId As String
            Get
                'Return TopLevelQuoteInfo.PolicyCurrentStatusId
                'updated 6/16/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyCurrentStatusId
            End Get
            Set(value As String)
                'TopLevelQuoteInfo.PolicyCurrentStatusId = value
                'updated 6/16/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyCurrentStatusId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property PolicyStatusCodeId As String
            Get
                'Return TopLevelQuoteInfo.PolicyStatusCodeId
                'updated 6/16/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyStatusCodeId
            End Get
            Set(value As String)
                'TopLevelQuoteInfo.PolicyStatusCodeId = value
                'updated 6/16/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.PolicyStatusCodeId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CancelDate As String
            Get
                'Return TopLevelQuoteInfo.CancelDate
                'updated 6/16/2019
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.CancelDate
            End Get
            Set(value As String)
                'TopLevelQuoteInfo.CancelDate = value
                'updated 6/16/2019
                GetTopLevelQuoteObject().TopLevelQuoteInfo.CancelDate = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property DevDictionary As IReadOnlyList(Of QuickQuoteDevDictionaryItem)
            Get
                Dim myReadOnly As IReadOnlyList(Of QuickQuoteDevDictionaryItem) = InternalDevDictionary.ToList()
                Return myReadOnly
            End Get
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Protected Friend Property InternalDevDictionary As QuickQuoteDevDictionaryList
            Get
                Return GetTopLevelQuoteObject().TopLevelQuoteInfo.InternalDevDictionary
            End Get
            Set(value As QuickQuoteDevDictionaryList)
                GetTopLevelQuoteObject().TopLevelQuoteInfo.InternalDevDictionary = value
            End Set
        End Property

        'added 7/16/2018
        Public Property VersionAndLobInfo As QuickQuoteVersionAndLobInfo
            Get
                If _VersionAndLobInfo Is Nothing Then
                    _VersionAndLobInfo = New QuickQuoteVersionAndLobInfo
                End If
                '_VersionAndLobInfo.SetParent = Me
                'updated 7/25/2018
                SetObjectsParent(_VersionAndLobInfo)
                Return _VersionAndLobInfo
            End Get
            Set(value As QuickQuoteVersionAndLobInfo)
                _VersionAndLobInfo = value
                SetObjectsParent(_VersionAndLobInfo) 'added 7/25/2018
            End Set
        End Property
        'added 7/27/2018
        Public Property TopLevelQuoteInfo As QuickQuoteTopLevelQuoteInfo
            Get
                If _TopLevelQuoteInfo Is Nothing Then
                    _TopLevelQuoteInfo = New QuickQuoteTopLevelQuoteInfo
                End If
                SetObjectsParent(_TopLevelQuoteInfo)
                Return _TopLevelQuoteInfo
            End Get
            Set(value As QuickQuoteTopLevelQuoteInfo)
                _TopLevelQuoteInfo = value
                SetObjectsParent(_TopLevelQuoteInfo)
            End Set
        End Property

        'added 7/25/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property MultiStateQuotes As List(Of QuickQuoteObject)
            Get
                'SetParentOfListItems(_MultiStateQuotes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04024}")
                'Return _MultiStateQuotes
                'updated 7/27/2018
                SetParentOfListItems(TopLevelQuoteInfo.MultiStateQuotes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04024}")
                Return TopLevelQuoteInfo.MultiStateQuotes
            End Get
            Set(value As List(Of QuickQuoteObject))
                '_MultiStateQuotes = value
                'SetParentOfListItems(_MultiStateQuotes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04024}")
                'updated 7/27/2018
                TopLevelQuoteInfo.MultiStateQuotes = value
                SetParentOfListItems(TopLevelQuoteInfo.MultiStateQuotes, "{663B7C7B-F2AC-4BF6-965A-D30F41A04024}")
            End Set
        End Property
        'added 7/28/2018
        Public ReadOnly Property QuoteStates As List(Of QuickQuoteHelperClass.QuickQuoteState)
            Get
                Return helper.QuickQuoteStatesForQuote(Me)
            End Get
        End Property
        Public ReadOnly Property QuoteStateIds As List(Of Integer) 'added 7/31/2018
            Get
                Dim stIds As List(Of Integer) = Nothing

                Dim sts As List(Of helper.QuickQuoteState) = QuoteStates
                If sts IsNot Nothing AndAlso sts.Count > 0 Then
                    For Each st As helper.QuickQuoteState In sts
                        Dim sId As Integer = helper.DiamondStateIdForQuickQuoteState(st, defaultToIndiana:=False)
                        If sId > 0 Then
                            If stIds Is Nothing Then
                                stIds = New List(Of Integer)
                            End If
                            stIds.Add(sId)
                        End If
                    Next
                End If

                Return stIds
            End Get
        End Property
        Public ReadOnly Property HasMultipleQuoteStates As Boolean
            Get
                Dim hasMultiple As Boolean = False

                Dim qStates As List(Of helper.QuickQuoteState) = QuoteStates
                If qStates IsNot Nothing AndAlso qStates.Count > 1 Then
                    hasMultiple = True
                End If

                Return hasMultiple
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginallyHadMultipleQuoteStates As Boolean
            Get
                Return TopLevelQuoteInfo.OriginallyHadMultipleQuoteStates
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalQuoteStates As List(Of helper.QuickQuoteState)
            Get
                Return TopLevelQuoteInfo.OriginalQuoteStates
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginalGoverningState As QuickQuoteHelperClass.QuickQuoteState
            Get
                Return TopLevelQuoteInfo.OriginalGoverningState
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property TotalQuotedPremiumType As QuickQuoteHelperClass.PremiumType
            Get
                Return TopLevelQuoteInfo.TotalQuotedPremiumType
            End Get
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property QuoteLevel As QuickQuoteHelperClass.QuoteLevel 'added 7/28/2018
            Get
                Return TopLevelQuoteInfo.QuoteLevel
            End Get
        End Property
        'added 7/31/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property OriginallyInMultiStatePackageFormat As Boolean
            Get
                Return TopLevelQuoteInfo.OriginallyInMultiStatePackageFormat
            End Get
        End Property

        'added 8/1/2018
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public ReadOnly Property NeedsMultiStateFormat As Boolean
            Get
                Return TopLevelQuoteInfo.NeedsMultiStateFormat
            End Get
        End Property
        Public ReadOnly Property LobIdToUse As String
            Get
                Dim _lobIdToUse As String = TopLevelQuoteInfo.LobIdToUse
                If String.IsNullOrWhiteSpace(_lobIdToUse) = True Then
                    _lobIdToUse = LobId
                End If
                Return _lobIdToUse
            End Get
        End Property

        'added 7/9/2021
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property HasFoodManufacturersEnhancement As Boolean 'covCodeId 100000
            Get
                Return VersionAndLobInfo.HasFoodManufacturersEnhancement
            End Get
            Set(value As Boolean)
                VersionAndLobInfo.HasFoodManufacturersEnhancement = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property FoodManufacturersEnhancementQuotedPremium As String 'covCodeId 100000
            Get
                Return VersionAndLobInfo.FoodManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.FoodManufacturersEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CPR_FoodManufacturersEnhancementQuotedPremium As String 'covCodeId 100000
            Get
                Return VersionAndLobInfo.CPP_CPR_FoodManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.CPP_CPR_FoodManufacturersEnhancementQuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property CPP_CGL_FoodManufacturersEnhancementQuotedPremium As String 'covCodeId 100000
            Get
                Return VersionAndLobInfo.CPP_CGL_FoodManufacturersEnhancementQuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.CPP_CGL_FoodManufacturersEnhancementQuotedPremium = value
            End Set
        End Property

#Region "Umbrella Props"
#Region "Umbrella"
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaSelfInsuredRetentionLimitId() As String
            Get
                Return _VersionAndLobInfo.UmbrellaSelfInsuredRetentionLimitId
            End Get
            Set(ByVal value As String)
                _VersionAndLobInfo.UmbrellaSelfInsuredRetentionLimitId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaCoverageLimitId() As String
            Get
                Return _VersionAndLobInfo.UmbrellaCoverageLimitId
            End Get
            Set(ByVal value As String)
                _VersionAndLobInfo.UmbrellaCoverageLimitId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaUmUimLimitId() As String
            Get
                Return _VersionAndLobInfo.UmbrellaUmUimLimitId
            End Get
            Set(ByVal value As String)
                _VersionAndLobInfo.UmbrellaUmUimLimitId = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaCoverageCalculation() As String
            Get
                Return _VersionAndLobInfo.UmbrellaCoverageCalculation
            End Get
            Protected Friend Set(value As String)
                _VersionAndLobInfo.UmbrellaCoverageCalculation = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaUmUimCoverageCalculation() As String
            Get
                Return _VersionAndLobInfo.UmbrellaUmUimCoverageCalculation
            End Get
            Protected Friend Set(value As String)
                _VersionAndLobInfo.UmbrellaUmUimCoverageCalculation = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaLimitPremium() As String
            Get
                Return _VersionAndLobInfo.UmbrellaLimitPremium
            End Get
            Protected Friend Set(value As String)
                _VersionAndLobInfo.UmbrellaLimitPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UmbrellaUmUimPremium() As String
            Get
                Return _VersionAndLobInfo.UmbrellaUmUimPremium
            End Get
            Protected Friend Set(value As String)
                _VersionAndLobInfo.UmbrellaUmUimPremium = value
            End Set
        End Property

        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property ManualAggregateLiabilityLimit() As String
            Get
                Return _VersionAndLobInfo.ManualAggregateLiabilityLimit
            End Get
            Set(value As String)
                _VersionAndLobInfo.ManualAggregateLiabilityLimit = value
            End Set
        End Property

#End Region
#End Region
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamage_IL_QuotedPremium As String 'covCodeId 30015; may not be populated
            Get
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_QuotedPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_QuotedPremium = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamage_IL_LimitId As String 'covCodeId 30015
            Get
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_LimitId
            End Get
            Set(value As String)
                VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_LimitId = value
            End Set
        End Property
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property UninsuredMotoristPropertyDamage_IL_DeductibleId As String 'covCodeId 30015
            Get
                Return VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_DeductibleId
            End Get
            Set(value As String)
                VersionAndLobInfo.UninsuredMotoristPropertyDamage_IL_DeductibleId = value
            End Set
        End Property

        ''' <remarks>CovCodeId 80446</remarks>
        <Script.Serialization.ScriptIgnore>
        <System.Xml.Serialization.XmlIgnore()>
        Public Property OwnersLesseesorContractorsCompletedOperationsTotalPremium As String
            Get
                Return VersionAndLobInfo.OwnersLesseesorContractorsCompletedOperationsTotalPremium
            End Get
            Set(value As String)
                VersionAndLobInfo.OwnersLesseesorContractorsCompletedOperationsTotalPremium = value
            End Set
        End Property

        ''' <summary>
        ''' instantiates QuickQuote object and sets initial values
        ''' </summary>
        ''' <remarks></remarks>
        Public Sub New()
            MyBase.New() 'added 8/4/2014
            SetDefaults()
        End Sub
        Private Sub SetDefaults()
            _TopLevelQuoteInfo = New QuickQuoteTopLevelQuoteInfo 'added 7/27/2018; at the top so main stuff can be defaulted first
            'added 7/16/2018; added at the top so VersionAndLobInfo properties can be defaulted first and then overwritten if needed by QuickQuoteObject (instead of being set first and then overwritten by VersionAndLobInfo constructor)
            _VersionAndLobInfo = New QuickQuoteVersionAndLobInfo

            '_XmlType = QuickQuoteXmlType.None'removed 7/27/2018
            '_LobType = QuickQuoteLobType.None 'removed 7/16/2018

            '_LobId = "" '*10 for BOP (lob_id 25); 13 for CGL (lob_id 9); 7 for WC (lob_id 21); 14 for CPP (package lob_id 23); 16 for CPR (prop lob_id 28); 8 for CAP (lob_id 20); removed 7/16/2018
            '_CompanyId = "1" '12/11/2013 note: not worth using xml right now; company_code is blank for both company_id 0 and 1; 1 has am_best_number 2251; removed 7/27/2018

            '_Success = False'removed 7/27/2018

            '_AgencyCode = "6000-3000" '*defaulting to test agency for now
            '_AgencyId = "441" '*defaulting to test agency for now
            ''removed 7/27/2018
            '_AgencyCode = "" 'removed hard-coded test values 7/25/2012
            '_AgencyId = "" 'removed hard-coded test values 7/25/2012
            'If System.Web.HttpContext.Current?.Session("DiamondAgencyCode") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString <> "" Then
            '    _AgencyCode = System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    _AgencyCode = ConfigurationManager.AppSettings("QuickQuoteTestAgencyCode").ToString
            'End If
            'If System.Web.HttpContext.Current?.Session("DiamondAgencyId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString) = True Then
            '    _AgencyId = System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    _AgencyId = ConfigurationManager.AppSettings("QuickQuoteTestAgencyId").ToString
            'End If
            '8/13/2014 note: could update to use new shared functions in QuickQuoteHelperClass

            'removed 7/27/2018
            ''added 8/1/2012 for staff
            'If _AgencyCode = "" OrElse _AgencyId = "" Then
            '    qqHelper.SetUserAgencyVariables()
            '    If System.Web.HttpContext.Current?.Session("DiamondAgencyCode") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString <> "" Then
            '        _AgencyCode = System.Web.HttpContext.Current?.Session("DiamondAgencyCode").ToString
            '    End If
            '    If System.Web.HttpContext.Current?.Session("DiamondAgencyId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString) = True Then
            '        _AgencyId = System.Web.HttpContext.Current?.Session("DiamondAgencyId").ToString
            '    End If
            'End If


            '_AgencyProducerId = "" 'removed 7/27/2018
            '_AgencyProducerCode = "" 'removed 7/27/2018
            '_AgencyProducerName = New QuickQuoteName 'removed 7/27/2018
            '_AgencyProducerName.NameAddressSourceId = "9" 'Agency Producer
            'updated 12/11/2013
            '_AgencyProducerName.NameAddressSourceId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Agency Producer") 'removed 7/27/2018

            '_QuoteNumber = "" '10/30/2016 note: now being reset from quickQuote.Reset_Database_Values() too; removed 7/27/2018
            '_PolicyNumber = "" 'added 10/30/2016; note: being reset from quickQuote.Reset_Database_Values() too; removed 7/27/2018
            '_QuoteDescription = "" 'removed 7/27/2018
            '_State = "IN" 'removed 7/16/2018
            '_StateId = "16"
            'updated 12/11/2013
            '_StateId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.StateId, _State)
            'updated 7/16/2018 to use new Enum
            QuickQuoteState = helper.QuickQuoteState.Indiana
            Company = helper.QuickQuoteCompany.IndianaFarmersMutual 'added 11/26/2022

            '_EffectiveDate = "" 'removed 7/27/2018
            'VersionAndLobInfo.Set_QuoteEffectiveDate(_EffectiveDate) 'added 7/17/2018; redundant in this case since VersionAndLobInfo instantiation above would've already set it to emptystring
            'updated 7/27/2018
            VersionAndLobInfo.Set_QuoteEffectiveDate(TopLevelQuoteInfo.EffectiveDate) 'redundant in this case since VersionAndLobInfo instantiation above would've already set it to emptystring like TopLevelQuoteInfo object does
            '_ExpirationDate = "" 'removed 7/27/2018
            '_TotalQuotedPremium = "" 'removed 7/27/2018
            'removed 7/17/2018
            '_OccurrenceLiabilityLimit = ""
            '_OccurrenceLiabilityLimitId = ""
            '_OccurrencyLiabilityQuotedPremium = ""
            '_TenantsFireLiability = ""
            '_TenantsFireLiabilityId = ""
            '_TenantsFireLiabilityQuotedPremium = ""
            '_PropertyDamageLiabilityDeductible = ""
            '_PropertyDamageLiabilityDeductibleId = ""
            '_PropertyDamageLiabilityDeductibleOption = ""
            '_PropertyDamageLiabilityDeductibleOptionId = ""
            '_HasBusinessMasterEnhancement = False
            '_BusinessMasterEnhancementQuotedPremium = ""
            '_BlanketRatingOption = ""
            '_BlanketRatingOptionId = ""
            '_BlanketRatingQuotedPremium = ""

            '_AdditionalInsuredsText = ""
            'removed 7/17/2018
            '_AdditionalInsuredsCount = 0
            '_AdditionalInsuredsCheckboxBOP = Nothing '3/9/2017 - BOP stuff
            '_HasAdditionalInsuredsCheckboxBOP = False '3/9/2017 - BOP stuff
            '_AdditionalInsuredsManualCharge = "" 'added for GL 7/12/2012
            '_AdditionalInsuredsQuotedPremium = ""
            '_EmployeeBenefitsLiabilityText = ""
            'removed 7/17/2018
            '_EmployeeBenefitsLiabilityOccurrenceLimit = "" 'added for GL 7/12/2012
            '_EmployeeBenefitsLiabilityOccurrenceLimitId = "" 'added for GL 7/12/2012
            '_EmployeeBenefitsLiabilityQuotedPremium = ""
            '_EmployeeBenefitsLiabilityRetroactiveDate = "" 'added 8/29/2012
            '_EmployeeBenefitsLiabilityAggregateLimit = ""
            '_EmployeeBenefitsLiabilityDeductible = ""
            '_ContractorsEquipmentInstallationLimit = ""
            '_ContractorsEquipmentInstallationLimitId = ""
            '_ContractorsEquipmentInstallationLimitQuotedPremium = ""
            '_ContractorsToolsEquipmentBlanket = ""
            '_ContractorsToolsEquipmentBlanketSubLimitId = "" '3/9/2017 - BOP stuff
            '_ContractorsToolsEquipmentBlanketQuotedPremium = ""
            '_ContractorsToolsEquipmentScheduled = ""
            '_ContractorsToolsEquipmentScheduledQuotedPremium = ""
            '_ContractorsToolsEquipmentRented = ""
            '_ContractorsToolsEquipmentRentedQuotedPremium = ""
            '_ContractorsEmployeeTools = ""
            '_ContractorsEmployeeToolsQuotedPremium = ""
            '_CrimeEmpDisEmployeeText = ""
            '_CrimeEmpDisLocationText = ""
            '_CrimeEmpDisLimit = ""
            '_CrimeEmpDisLimitId = ""
            '_CrimeEmpDisQuotedPremium = ""
            '_CrimeForgeryLimit = ""
            '_CrimeForgeryLimitId = ""
            '_CrimeForgeryQuotedPremium = ""
            '_HasEarthquake = False
            '_EarthquakeQuotedPremium = ""
            '_HasHiredAuto = False
            '_HiredAutoQuotedPremium = ""
            '_HasNonOwnedAuto = False
            '_NonOwnedAutoWithDelivery = False '3/9/2017 - BOP stuff
            '_NonOwnedAutoQuotedPremium = ""

            '_Locations = New Generic.List(Of QuickQuoteLocation)
            '_Locations = Nothing 'added 8/4/2014; removed 7/18/2018
            '_PolicyCoverages = New Generic.List(Of QuickQuoteCoverage)
            '_PolicyCoverages = Nothing 'added 8/4/2014; removed 7/18/2018
            '_ValidationItems = New Generic.List(Of QuickQuoteValidationItem)
            '_ValidationItems = Nothing 'added 8/4/2014; removed 7/27/2018

            '_PropertyDeductibleId = "" 'removed 7/18/2018

            '_Client = New QuickQuoteClient'removed 7/27/2018
            '_Client.Name.NameAddressSourceId = "1"
            'updated 12/11/2013
            '_Client.Name.NameAddressSourceId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 1") 'removed 7/27/2018
            '_Client.Name2.NameAddressSourceId = "2"
            'updated 12/11/2013
            '_Client.Name2.NameAddressSourceId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Client 2") 'removed 7/27/2018

            '_IsNew = False'removed 7/27/2018
            '_BillToId = "1" '*defaulting to Insured
            'updated 12/11/2013
            '_BillToId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.BillToId, "Insured")
            '_BillToId = "" 'updated 12/3/2014 to no longer default; removed 7/27/2018
            '_CurrentBilltoId = "1" '*defaulting to Insured
            'updated 12/11/2013
            '_CurrentBilltoId = _BillToId 'qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.CurrentBilltoId, "Insured"); removed 7/27/2018
            '_CurrentPayplanId = "12" '*defaulting to Annual 2; 12/11/2012 - triggered off this instead of BillingPayPlanId
            'updated 12/11/2013
            '_CurrentPayplanId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.CurrentPayplanId, "Annual 2")
            '_CurrentPayplanId = "" 'updated 12/3/2014 to no longer default; removed 7/27/2018
            '_PolicyTermId = "2" '*defaulting to 12 Month
            'updated 12/11/2013
            '_PolicyTermId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyTermId, "12 Month"); removed 7/27/2018
            '_ReceivedDate = Date.Today.ToShortDateString '*defaulting to current date; removed 7/27/2018
            '_TransactionEffectiveDate = Date.Today.ToShortDateString '*defaulting to current date; note 12/11/2013: may need to change to always use EffectiveDate; removed 7/27/2018
            '_TransactionExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_TransactionEffectiveDate)).ToShortDateString 'added 4/10/2014; removed 7/27/2018
            '_TransactionTypeId = "2" '*defaulting to New Business
            'updated 12/11/2013
            '_TransactionTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.TransactionTypeId, "New Business") 'removed 7/27/2018
            '_TransactionUsersId = "3033" '*current Diamond user id (defaulting to TestNxTech for now)
            '_TransactionUsersId = "" 'removed hard-coded test values 7/25/2012; removed 7/27/2018
            'If System.Web.HttpContext.Current?.Session("DiamondUserId") IsNot Nothing AndAlso System.Web.HttpContext.Current?.Session("DiamondUserId").ToString <> "" AndAlso IsNumeric(System.Web.HttpContext.Current?.Session("DiamondUserId").ToString) = True Then
            '    _TransactionUsersId = System.Web.HttpContext.Current?.Session("DiamondUserId").ToString
            'ElseIf ConfigurationManager.AppSettings("TestOrProd") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("TestOrProd").ToString) = "TEST" AndAlso ConfigurationManager.AppSettings("QuickQuote_UseTestVariables") IsNot Nothing AndAlso UCase(ConfigurationManager.AppSettings("QuickQuote_UseTestVariables").ToString) = "YES" Then
            '    _TransactionUsersId = ConfigurationManager.AppSettings("QuickQuoteTestUserId").ToString
            'End If
            'updated 4/8/2014 to use helper Sub
            'QuickQuoteHelperClass.SetDiamondUserId(_TransactionUsersId) 'removed 7/27/2018
            '_VersionId = "" '*10 for BOP (lob_id 25); 13 for CGL (lob_id 9); 7 for WC (lob_id 21); 14 for CPP (package lob_id 23); 16 for CPR (prop lob_id 28); 8 for CAP (lob_id 20); removed 7/16/2018
            '_AddFormsVersionId = "" 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
            '_RatingVersionId = "" 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
            '_UnderwritingVersionId = "" 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
            '_CPP_CPR_PackagePart_VersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CPR_PackagePart_AddFormsVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CPR_PackagePart_RatingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CPR_PackagePart_UnderwritingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CGL_PackagePart_VersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CGL_PackagePart_AddFormsVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CGL_PackagePart_RatingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            '_CPP_CGL_PackagePart_UnderwritingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
            'updated 11/4/2014 to call new method
            'ResetPackagePartVersionIds() 'removed 7/18/2018
            '_WorkflowQueueId = "545" '*defaulting to 6000-3000_ComparativeRating (same as what Martin was using); Martin has code to get the workflowqueueid based on the agency code
            '_WorkflowQueueId = "" 'removed hard-coded test values 7/25/2012; removed 7/27/2018

            '_Policyholder = New QuickQuotePolicyholder'removed 7/27/2018
            '_Policyholder.Name.NameAddressSourceId = "3"
            'updated 12/11/2013
            '_Policyholder.Name.NameAddressSourceId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 1") 'removed 7/27/2018
            '_Policyholder2 = New QuickQuotePolicyholder'removed 7/27/2018
            '_Policyholder2.Name.NameAddressSourceId = "4"
            'updated 12/11/2013
            '_Policyholder2.Name.NameAddressSourceId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteName, QuickQuoteHelperClass.QuickQuotePropertyName.NameAddressSourceId, "Policy Holder 2") 'removed 7/27/2018

            '_BillMethodId = "2" '*defaulting to direct bill
            'updated 12/11/2013
            '_BillMethodId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.BillMethodId, "Direct Bill") 'removed 7/27/2018
            '_BillingPayPlanId = "12" '*might default to 12 like CurrentPayplanId; 12/11/2012 - triggered off CurrentPayPlanId instead of this one
            'updated 12/11/2013
            '_BillingPayPlanId = _CurrentPayplanId 'qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.BillingPayPlanId, "Annual 2"); removed 7/27/2018

            '_PolicyOriginTypeId = "1" '*might default to 1 since that's what Martin is sending (Web; 0 = Diamond)
            'updated 12/11/2013
            '_PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "Web") 'replaced this logic 10/28/2016 w/ below logic
            '_PolicyOriginTypeId = "0" 'testing 12/14/2012 since WC exp mod can only be edited when 0; caused error on re-rate (policy # already exists)
            '10/28/2016 note: need to update for new types; also static data file needs to be updated since it's no longer in sync w/ Diamond... 0=Diamond, 1=Comparative Rating (used to be Web), 2=VelociRater (new), 3=Consumer Quoting (new); updated 10/28/2016 to default to VelociRater (note: also need to update Copy logic to default to VelociRater)
            '_PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "VelociRater")
            'If qqHelper.IsNumericString(_PolicyOriginTypeId) = False Then 'added just in case static data file isn't updated in environment
            '    _PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "Comparative Rating")
            '    If qqHelper.IsNumericString(_PolicyOriginTypeId) = False Then 'added just in case static data file hasn't been updated w/ change from Web to Comparative Rating
            '        _PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "Web")
            '    End If
            'End If
            'updated 10/28/2016 to use new common method
            'Default_PolicyOriginTypeId() 'removed 7/27/2018

            'removed 7/19/2018
            '_RiskGrade = ""
            '_RiskGradeLookupId = ""
            '_RiskGradeLookupId_Original = "" 'added 8/15/2017
            '_CPP_CGL_RiskGrade = ""
            '_CPP_CGL_RiskGradeLookupId = ""
            '_CPP_CPR_RiskGrade = ""
            '_CPP_CPR_RiskGradeLookupId = ""
            '_ErrorRiskGradeLookupId = ""
            '_ReplacementRiskGradeLookupId = ""
            '_CPP_CGL_ErrorRiskGradeLookupId = ""
            '_CPP_CGL_ReplacementRiskGradeLookupId = ""
            '_CPP_CPR_ErrorRiskGradeLookupId = ""
            '_CPP_CPR_ReplacementRiskGradeLookupId = ""
            'added 1/26/2015 for CIM and CRM
            'removed 7/19/2018
            '_CPP_CIM_RiskGrade = ""
            '_CPP_CIM_RiskGradeLookupId = ""
            '_CPP_CIM_ErrorRiskGradeLookupId = ""
            '_CPP_CIM_ReplacementRiskGradeLookupId = ""
            '_CPP_CRM_RiskGrade = ""
            '_CPP_CRM_RiskGradeLookupId = ""
            '_CPP_CRM_ErrorRiskGradeLookupId = ""
            '_CPP_CRM_ReplacementRiskGradeLookupId = ""

            '_HasInitiatedFinalize = False 'removed 7/27/2018

            '4/2/2014 - moved to Reset_Database_Values method
            '_PolicyId = ""
            '_PolicyImageNum = ""

            '_PolicyBridgingURL = "" 'removed 7/27/2018

            '_PaymentOptions = New Generic.List(Of QuickQuotePaymentOption)
            '_PaymentOptions = Nothing 'added 8/4/2014; removed 7/27/2018
            '_CurrentlyParsingPaymentOptions = False 'added 9/8/2017; removed 7/27/2018

            '_GLClassifications = New Generic.List(Of QuickQuoteGLClassification)
            '_GLClassifications = Nothing 'added 8/4/2014; removed 7/19/2018

            'removed 7/19/2018
            '_EmployersLiability = ""
            '_EmployersLiabilityId = ""
            '_EmployersLiabilityQuotedPremium = ""
            'removed 7/27/2018
            '_ExperienceModificationFactor = ""
            '_ExperienceModificationBureauTypeId = ""
            '_ExperienceModificationRiskIdentifier = ""
            '_ExperienceModifications = Nothing 'added 9/18/2017
            '_CanUseExperienceModificationNumForExperienceModificationReconciliation = False 'added 9/18/2017
            '_HasConvertedExperienceModifications = False 'added 9/21/2017
            '_DiamondExperienceModificationIndexesToUpdate = Nothing 'added 9/23/2017

            'removed 7/19/2018
            '_ProgramType = ""
            '_ProgramTypeId = "" '4/2/2015 note: added separate variable/property for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
            '_GeneralAggregateLimit = ""
            '_GeneralAggregateLimitId = ""
            '_GeneralAggregateQuotedPremium = ""
            '_ProductsCompletedOperationsAggregateLimit = ""
            '_ProductsCompletedOperationsAggregateLimitId = ""
            '_ProductsCompletedOperationsAggregateQuotedPremium = ""
            '_PersonalAndAdvertisingInjuryLimit = ""
            '_PersonalAndAdvertisingInjuryLimitId = ""
            '_PersonalAndAdvertisingInjuryQuotedPremium = ""
            '_DamageToPremisesRentedLimit = ""
            '_DamageToPremisesRentedLimitId = ""
            '_DamageToPremisesRentedQuotedPremium = ""
            '_MedicalExpensesLimit = ""
            '_MedicalExpensesLimitId = ""
            '_MedicalExpensesQuotedPremium = ""

            '_AdditionalInsureds = New Generic.List(Of QuickQuoteAdditionalInsured)
            '_AdditionalInsureds = Nothing 'added 8/4/2014; removed 7/19/2018
            '_AdditionalInsuredsBackup = Nothing 'added 6/5/2017; removed 7/19/2018

            'removed 7/19/2018
            '_HasExclusionOfAmishWorkers = False
            '_HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = False
            '_HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = False
            '_HasWaiverOfSubrogation = False
            '_WaiverOfSubrogationNumberOfWaivers = 0
            '_WaiverOfSubrogationPremium = ""
            '_WaiverOfSubrogationPremiumId = ""
            '_NeedsToUpdateWaiverOfSubrogationPremiumId = False 'added 10/13/2017

            '_InclusionsExclusions = New Generic.List(Of QuickQuoteInclusionExclusion)
            '_InclusionsExclusions = Nothing 'added 8/4/2014; removed 7/19/2018

            '_AnniversaryRatingEffectiveDate = "" 'removed 7/19/2018
            '_AnniversaryRatingExpirationDate = "" 'removed 7/19/2018
            '_GuaranteedRatePeriodEffectiveDate = ""
            '_GuaranteedRatePeriodExpirationDate = ""
            'updated to default GuaranteedRatePeriod dates 6/3/2014 (so SubmitRate doesn't fail sending "" to date parameter when EffectiveDate is blank)... will be updated to use EffectiveDate and ExpirationDate when those properties are set
            'removed 7/27/2018
            '_GuaranteedRatePeriodEffectiveDate = Date.Today.ToShortDateString
            '_GuaranteedRatePeriodExpirationDate = DateAdd(DateInterval.Year, 1, CDate(_GuaranteedRatePeriodEffectiveDate)).ToShortDateString
            '_ModificationProductionDate = ""
            '_RatingEffectiveDate = ""

            '_ContractorsEquipmentScheduledItems = New Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem)
            '_ContractorsEquipmentScheduledItems = Nothing 'added 8/4/2014; removed 7/19/2018
            '_ContractorsEquipmentScheduledItemsBackup = Nothing 'added 6/5/2017; removed 7/19/2018

            '_AdditionalPolicyholders = New Generic.List(Of QuickQuoteAdditionalPolicyholder)
            '_AdditionalPolicyholders = Nothing 'added 8/4/2014; removed 7/27/2018

            '_LossHistoryRecords = New Generic.List(Of QuickQuoteLossHistoryRecord)
            '_LossHistoryRecords = Nothing 'added 8/4/2014; removed 7/19/2018

            '_PriorCarrier = New QuickQuotePriorCarrier 'removed 7/19/2018

            '_AdditionalInterestNamesAndAddresses = New Generic.List(Of QuickQuoteGenericNameAddress)'removed 7/19/2018

            'removed 7/19/2018
            '_HasResidentialCleaning = False
            ResidentialCleaningQuotedPremium = "" '7/19/2018 note: this was already using property so formatting may be applied to turn empty string into $0.00
            '_HasBarbersProfessionalLiability = False
            '_BarbersProfessionalLiabiltyQuotedPremium = ""
            '_BarbersProfessionalLiabilityFullTimeEmpNum = ""
            '_BarbersProfessionalLiabilityPartTimeEmpNum = ""
            '_BarbersProfessionalLiabilityDescription = "" '3/9/2017 - BOP stuff
            '_HasBeauticiansProfessionalLiability = False
            '_BeauticiansProfessionalLiabilityQuotedPremium = ""
            '_BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
            '_BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
            '_BeauticiansProfessionalLiabilityDescription = "" '3/9/2017 - BOP stuff
            '_HasFuneralDirectorsProfessionalLiability = False
            '_FuneralDirectorsProfessionalLiabilityQuotedPremium = ""
            '_FuneralDirectorsProfessionalLiabilityEmpNum = ""
            '_HasPrintersProfessionalLiability = False
            '_PrintersProfessionalLiabilityQuotedPremium = ""
            '_PrintersProfessionalLiabilityLocNum = ""
            '_HasSelfStorageFacility = False
            '_SelfStorageFacilityQuotedPremium = ""
            ''_SelfStorageFacilityLocNum = ""
            '_SelfStorageFacilityLimit = ""
            '_HasVeterinariansProfessionalLiability = False
            '_VeterinariansProfessionalLiabilityEmpNum = ""
            '_VeterinariansProfessionalLiabilityQuotedPremium = ""
            '_HasPharmacistProfessionalLiability = False '3/9/2017 - BOP stuff
            '_PharmacistAnnualGrossSales = "" '3/9/2017 - BOP stuff
            '_PharmacistQuotedPremium = "" '3/9/2017 - BOP stuff
            '_HasOpticalAndHearingAidProfessionalLiability = False
            '_OpticalAndHearingAidProfessionalLiabilityEmpNum = ""
            '_OpticalAndHearingAidProfessionalLiabilityQuotedPremium = ""

            '3/9/2017 - BOP stuff
            '_HasMotelCoverage = False
            '_MotelCoveragePerGuestLimitId = ""
            '_MotelCoveragePerGuestQuotedPremium = ""
            '_MotelCoverageSafeDepositDeductibleId = ""
            '_MotelCoverageSafeDepositLimitId = ""
            '_MotelCoverageSafeDepositQuotedPremium = ""
            '_MotelCoverageQuotedPremium = ""
            '_HasPhotographyCoverage = False
            '_HasPhotographyCoverageScheduledCoverages = False
            '_HasPhotographyMakeupAndHair = False
            PhotographyMakeupAndHairQuotedPremium = "" '7/19/2018 note: this was already using property so formatting may be applied to turn empty string into $0.00
            '_PhotographyScheduledCoverages = New List(Of QuickQuoteCoverage)
            '_PhotographyCoverageQuotedPremium = ""
            '_LiquorLiabilityClassCodeTypeId = ""
            '_LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
            '_LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
            '_HasLiquorLiability = False

            'removed 7/21/2018
            ''added 7/13/2012 for GL
            '_LiquorLiabilityOccurrenceLimit = ""
            '_LiquorLiabilityOccurrenceLimitId = ""
            '_LiquorLiabilityClassification = ""
            '_LiquorLiabilityClassificationId = ""
            '_LiquorSales = ""
            '_LiquorLiabilityQuotedPremium = ""
            ''_LiquorRate = ""
            ''_LiquorMinimumPremium = ""
            '_ProfessionalLiabilityCemetaryNumberOfBurials = ""
            '_ProfessionalLiabilityCemetaryQuotedPremium = ""
            '_ProfessionalLiabilityFuneralDirectorsNumberOfBodies = ""
            '_ProfessionalLiabilityPastoralNumberOfClergy = ""
            '_ProfessionalLiabilityPastoralQuotedPremium = ""

            'added default factor values 8/8/2012
            'Reset_IRPM_Values() 'added method 10/5/2012; removed 7/21/2018; now happening at the top on VersionAndLobInfo instantiation

            'removed 7/21/2018
            ''_ScheduledRatings = New Generic.List(Of QuickQuoteScheduledRating)
            '_ScheduledRatings = Nothing 'added 8/4/2014

            'removed 7/21/2018
            ''_ExclusionOfAmishWorkerRecords = New Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
            '_ExclusionOfAmishWorkerRecords = Nothing 'added 8/4/2014
            ''_ExclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
            '_ExclusionOfSoleProprietorRecords = Nothing 'added 8/4/2014
            ''_InclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
            '_InclusionOfSoleProprietorRecords = Nothing 'added 8/4/2014
            ''_WaiverOfSubrogationRecords = New Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
            '_WaiverOfSubrogationRecords = Nothing 'added 8/4/2014
            ''added 10/10/2017
            '_ExclusionOfAmishWorkerRecordsBackup = Nothing
            '_ExclusionOfSoleProprietorRecordsBackup = Nothing
            '_InclusionOfSoleProprietorRecordsBackup = Nothing
            '_WaiverOfSubrogationRecordsBackup = Nothing

            'removed 7/21/2018
            '_Dec_BuildingLimit_All_Premium = ""
            '_Dec_BuildingPersPropLimit_All_Premium = ""
            '_Dec_BOP_OptCovs_Premium = ""

            'removed 7/21/2018
            '_ExpModQuotedPremium = ""
            '_ScheduleModQuotedPremium = ""
            '_TerrorismQuotedPremium = ""
            '_PremDiscountQuotedPremium = ""
            '_MinimumQuotedPremium = ""
            '_MinimumPremiumAdjustment = ""
            '_TotalEstimatedPlanPremium = ""
            '_SecondInjuryFundQuotedPremium = ""
            'Dec_LossConstantPremium = "0" 'using property to set default so formatting happens
            ''Dec_ExpenseConstantPremium = "250" 'using property to set default so formatting happens
            ''updated 5/18/2017 to new values; should have officially changed to 160 as-of 1/1/2016; code will now find it for WCP and overwrite if needed
            'Dec_ExpenseConstantPremium = "160"
            '_Dec_WC_TotalPremiumDue = ""

            'removed 7/21/2018
            ''_PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
            '_PolicyUnderwritings = Nothing 'added 8/4/2014
            ''_PolicyUnderwritingCodeIds = New Generic.List(Of String)
            ''_PolicyUnderwritingCodeAndLevelAndTabIds = New Generic.List(Of String)
            '_PolicyUnderwritingCodeAndLevelAndTabIds = Nothing 'added 8/4/2014

            '_QuoteTypeId = "" 'removed 7/27/2018

            'removed 7/21/2018
            '_GL_PremisesAndProducts_Deductible = ""
            '_GL_PremisesAndProducts_DeductibleId = ""
            '_GL_PremisesAndProducts_Description = ""
            '_GL_PremisesAndProducts_DeductibleCategoryType = ""
            '_GL_PremisesAndProducts_DeductibleCategoryTypeId = ""
            '_GL_PremisesAndProducts_DeductiblePerType = ""
            '_GL_PremisesAndProducts_DeductiblePerTypeId = ""
            '_Has_GL_PremisesAndProducts = False

            'removed 7/21/2018
            '_GL_PremisesTotalQuotedPremium = ""
            '_GL_ProductsTotalQuotedPremium = ""
            '_GL_PremisesPolicyLevelQuotedPremium = ""
            '_GL_ProductsPolicyLevelQuotedPremium = ""
            '_GL_PremisesMinimumQuotedPremium = ""
            '_GL_PremisesMinimumPremiumAdjustment = ""
            '_GL_ProductsMinimumQuotedPremium = ""
            '_GL_ProductsMinimumPremiumAdjustment = ""
            '_Dec_GL_OptCovs_Premium = ""

            'removed 7/21/2018
            ''_Drivers = New Generic.List(Of QuickQuoteDriver)
            '_Drivers = Nothing 'added 8/4/2014
            ''_Vehicles = New Generic.List(Of QuickQuoteVehicle)
            '_Vehicles = Nothing 'added 8/4/2014
            '_HasFarmPollutionLiability = False
            '_FarmPollutionLiabilityQuotedPremium = ""
            '_HasHiredBorrowedNonOwned = False
            '_HasNonOwnershipLiability = False
            '_NonOwnershipLiabilityNumberOfEmployees = ""
            '_NonOwnership_ENO_RatingTypeId = ""
            '_NonOwnership_ENO_RatingType = ""
            '_NonOwnershipLiabilityQuotedPremium = ""
            '_HasHiredBorrowedLiability = False
            '_HiredBorrowedLiabilityQuotedPremium = "" 'added 6/19/2017
            '_HasHiredCarPhysicalDamage = False
            '_HiredBorrowedLossOfUseQuotedPremium = ""
            '_ComprehensiveDeductible = ""
            '_ComprehensiveDeductibleId = ""
            '_ComprehensiveQuotedPremium = ""
            '_CollisionDeductible = ""
            '_CollisionDeductibleId = ""
            '_CollisionQuotedPremium = ""
            '_Liability_UM_UIM_Limit = ""
            '_Liability_UM_UIM_LimitId = ""
            '_Liability_UM_UIM_QuotedPremium = ""
            '_MedicalPaymentsLimit = ""
            '_MedicalPaymentsLimitId = ""
            '_MedicalPaymentsQuotedPremium = ""

            'removed 7/21/2018
            '_QuoteOrIssueBound = QuickQuoteQuoteOrIssueBound.Quote
            '_IssueBoundEffectiveDate = ""
            ''_Modifiers = New Generic.List(Of QuickQuoteModifier)
            '_Modifiers = Nothing 'added 8/4/2014

            'removed 7/21/2018
            '_HasLocation = False
            '_HasLocationWithBuilding = False
            '_HasLocationWithClassification = False

            'removed 7/21/2018
            ''_AutoSymbols = New Generic.List(Of QuickQuoteAutoSymbol)
            '_AutoSymbols = Nothing 'added 8/4/2014
            ''_LiabilityAutoSymbols = New Generic.List(Of Integer)
            ''_MedicalPaymentsAutoSymbols = New Generic.List(Of Integer)
            ''_UninsuredMotoristAutoSymbols = New Generic.List(Of Integer)
            ''_UnderinsuredMotoristAutoSymbols = New Generic.List(Of Integer)
            ''_ComprehensiveCoverageAutoSymbols = New Generic.List(Of Integer)
            ''_CollisionCoverageAutoSymbols = New Generic.List(Of Integer)
            ''_NonOwnershipAutoSymbols = New Generic.List(Of Integer)
            ''_HiredBorrowedAutoSymbols = New Generic.List(Of Integer)
            '_LiabilityAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_MedicalPaymentsAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_UninsuredMotoristAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_UnderinsuredMotoristAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_ComprehensiveCoverageAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_CollisionCoverageAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_NonOwnershipAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_HiredBorrowedAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol
            '_TowingAndLaborAutoSymbolObject = New QuickQuoteDeveloperAutoSymbol 'added 4/16/2013 for CAP
            '_UseDeveloperAutoSymbols = False

            'removed 7/21/2018
            '_PolicyTypeId = ""
            '_PolicyType = ""

            'removed 7/21/2018
            '_VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium = ""
            '_VehiclesTotal_MedicalPaymentsQuotedPremium = ""
            '_VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium = ""
            '_VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = ""
            '_VehiclesTotal_UM_UIM_CovsQuotedPremium = ""
            '_VehiclesTotal_ComprehensiveCoverageQuotedPremium = ""
            '_VehiclesTotal_CollisionCoverageQuotedPremium = ""
            '_VehiclesTotal_TowingAndLaborQuotedPremium = ""
            '_VehiclesTotal_RentalReimbursementQuotedPremium = ""
            '_Dec_CAP_OptCovs_Premium = ""
            '_Dec_CAP_OptCovs_Premium_Without_GarageKeepers = "" 'added 5/10/2017 for CAP/GAR

            '_PackageParts = New Generic.List(Of QuickQuotePackagePart)
            '_PackageParts = Nothing 'added 8/4/2014; removed 7/27/2018
            'removed 7/21/2018
            '_PackageTypeId = ""
            '_PackageType = ""
            '_PackageModificationAssignmentTypeId = ""
            '_PackageModificationAssignmentType = ""

            'removed 7/21/2018
            '_Has_PackageGL_EnhancementEndorsement = False
            '_PackageGL_EnhancementEndorsementQuotedPremium = ""
            '_Has_PackageCPR_EnhancementEndorsement = False
            '_PackageCPR_EnhancementEndorsementQuotedPremium = ""

            'removed 7/21/2018
            '_CPR_BuildingsTotal_BuildingCovQuotedPremium = ""
            '_CPR_BuildingsTotal_PersPropCoverageQuotedPremium = ""
            '_CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = ""
            '_CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium = ""
            '_CPR_BuildingsTotal_EQ_QuotedPremium = ""

            'removed 7/21/2018
            '_LocationsTotal_EquipmentBreakdownQuotedPremium = ""

            'removed 7/21/2018
            '_CPP_GL_PackagePart_QuotedPremium = ""
            '_CPP_CPR_PackagePart_QuotedPremium = ""
            ''added 1/26/2015 for CIM and CRM
            '_CPP_CIM_PackagePart_QuotedPremium = ""
            '_CPP_CRM_PackagePart_QuotedPremium = ""
            '_CPP_GAR_PackagePart_QuotedPremium = "" 'added 4/22/2017

            'removed 7/21/2018
            '_CAP_Liability_WouldHaveSymbol8 = False
            '_CAP_Liability_WouldHaveSymbol9 = False
            '_CAP_Comprehensive_WouldHaveSymbol8 = False
            '_CAP_Collision_WouldHaveSymbol8 = False

            'removed 7/27/2018
            '_EFT_BankRoutingNumber = ""
            '_EFT_BankAccountNumber = ""
            '_EFT_BankAccountTypeId = ""
            '_EFT_DeductionDay = ""

            '_OnlyUsePropertyToSetFieldWithSameName = False 'removed 7/27/2018

            '_Database_QuoteId = ""
            '_Database_QuoteXmlId = ""
            '_Database_QuoteNumber = ""
            '_Database_LobId = ""
            '_Database_CurrentQuoteXmlId = ""
            '_Database_XmlQuoteId = ""
            '_Database_LastAvailableQuoteNumber = ""
            'updated 4/2/2014 to use new method
            Reset_Database_Values() '7/27/2018 note: this is already being called in TopLevelQuoteInfo object, but will still call from here so properties can be cleared on VersionAndLobInfo.PolicyLevelInfoExtended even though they should already be defaulted to emptystring on instantiation

            '_TestObjects = New Generic.List(Of TestObject)

            'removed 7/21/2018
            '_HasBlanketBuilding = False
            '_HasBlanketContents = False
            '_HasBlanketBuildingAndContents = False
            '_HasBlanketBusinessIncome = False
            '_BlanketBuildingQuotedPremium = ""
            '_BlanketContentsQuotedPremium = ""
            '_BlanketBuildingAndContentsQuotedPremium = ""
            '_BlanketBusinessIncomeQuotedPremium = ""
            '_BlanketBuildingCauseOfLossTypeId = ""
            '_BlanketBuildingCauseOfLossType = ""
            '_BlanketContentsCauseOfLossTypeId = ""
            '_BlanketContentsCauseOfLossType = ""
            '_BlanketBuildingAndContentsCauseOfLossTypeId = ""
            '_BlanketBuildingAndContentsCauseOfLossType = ""
            '_BlanketBusinessIncomeCauseOfLossTypeId = ""
            '_BlanketBusinessIncomeCauseOfLossType = ""
            ''added more blanket stuff 4/16/2013
            '_BlanketBuildingLimit = ""
            '_BlanketBuildingCoinsuranceTypeId = ""
            '_BlanketBuildingCoinsuranceType = ""
            '_BlanketBuildingValuationId = ""
            '_BlanketBuildingValuation = ""
            '_BlanketContentsLimit = ""
            '_BlanketContentsCoinsuranceTypeId = ""
            '_BlanketContentsCoinsuranceType = ""
            '_BlanketContentsValuationId = ""
            '_BlanketContentsValuation = ""
            '_BlanketBuildingAndContentsLimit = ""
            '_BlanketBuildingAndContentsCoinsuranceTypeId = ""
            '_BlanketBuildingAndContentsCoinsuranceType = ""
            '_BlanketBuildingAndContentsValuationId = ""
            '_BlanketBuildingAndContentsValuation = ""
            '_BlanketBusinessIncomeLimit = ""
            '_BlanketBusinessIncomeCoinsuranceTypeId = ""
            '_BlanketBusinessIncomeCoinsuranceType = ""
            '_BlanketBusinessIncomeValuationId = ""
            '_BlanketBusinessIncomeValuation = ""
            '_CPR_BlanketCoverages_TotalPremium = ""
            '_BlanketCombinedEarthquake_QuotedPremium = ""
            ''added 5/3/2018 for CPR
            '_BlanketBuildingIsAgreedValue = False
            '_BlanketContentsIsAgreedValue = False
            '_BlanketBuildingAndContentsIsAgreedValue = False
            '_BlanketBusinessIncomeIsAgreedValue = False

            'removed 7/21/2018
            ''added 4/17/2013 for CPR to total up Property in the Open coverage premiums
            '_LocationsTotal_PropertyInTheOpenRecords_QuotedPremium = ""
            '_LocationsTotal_PropertyInTheOpenRecords_EQ_Premium = ""
            '_LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium = ""

            '_Agency = New QuickQuoteAgency 'removed 7/27/2018

            '_PolicyImageId = "" 'testing 7/2/2013; 4/2/2014 - moved to Reset_Database_Values method

            'removed 7/21/2018
            '_TierTypeId = ""
            '_UseTierOverride = False
            '_TierAdjustmentTypeId = ""

            'removed 7/21/2018
            '_PersonalLiabilityLimitId = ""
            '_PersonalLiabilityQuotedPremium = ""

            'removed 7/21/2018
            ''_Applicants = New List(Of QuickQuoteApplicant)
            '_Applicants = Nothing 'added 8/4/2014
            ''_Operators = New List(Of QuickQuoteOperator)
            '_Operators = Nothing 'added 8/4/2014
            ''_Exclusions = New List(Of QuickQuoteExclusion)
            '_Exclusions = Nothing 'added 8/4/2014
            ''_HouseholdMembers = New List(Of QuickQuoteHouseholdMember)
            '_HouseholdMembers = Nothing 'added 8/4/2014
            '_ResidenceInfo = New QuickQuoteResidenceInfo

            'removed 7/21/2018
            '_ThirdPartyData = New QuickQuoteThirdPartyData

            'removed 7/21/2018
            ''added 1/14/2014 for PPA
            '_AutoHome = False
            '_EmployeeDiscount = False
            '_FacultativeReinsurance = False
            '_SelectMarketCredit = False

            'removed 7/21/2018
            ''added 2/18/2014
            '_HasConvertedCoverages = False
            '_HasConvertedInclusionsExclusions = False
            '_HasConvertedModifiers = False
            '_HasConvertedScheduledRatings = False

            'removed 7/21/2018
            ''added 4/2/2014
            '_VehiclesTotal_PremiumFullTerm = ""
            '_LocationsTotal_PremiumFullTerm = ""
            '_Locations_BuildingsTotal_PremiumFullTerm = ""

            'removed 7/21/2018
            ''added 4/22/2014
            '_CanUseDriverNumForDriverReconciliation = False
            '_CanUseVehicleNumForVehicleReconciliation = False
            '_CanUseExclusionNumForExclusionReconciliation = False 'added 4/23/2014
            '_CanUseLossHistoryNumForLossHistoryReconciliation = False 'added 4/23/2014
            '_CanUseLocationNumForLocationReconciliation = False 'added 4/23/2014
            '_CanUseApplicantNumForApplicantReconciliation = False 'added 4/24/2014

            '_BillingAddressee = New QuickQuoteBillingAddressee 'added 5/19/2014; removed 7/27/2018

            'removed 7/21/2018
            ''added 5/22/2014 for PPA
            '_VehiclesTotal_BodilyInjuryLiabilityQuotedPremium = ""
            '_VehiclesTotal_PropertyDamageQuotedPremium = ""
            '_VehiclesTotal_UninsuredCombinedSingleQuotedPremium = ""
            '_VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium = ""
            '_VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium = ""
            '_VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium = ""
            '_VehiclesTotal_TransportationExpenseQuotedPremium = ""
            '_VehiclesTotal_AutoLoanOrLeaseQuotedPremium = ""
            '_VehiclesTotal_TapesAndRecordsQuotedPremium = ""
            '_VehiclesTotal_SoundEquipmentQuotedPremium = ""
            '_VehiclesTotal_ElectronicEquipmentQuotedPremium = ""
            '_VehiclesTotal_TripInterruptionQuotedPremium = ""

            'removed 7/21/2018
            '_TieringInformation = New QuickQuoteTieringInformation 'added 7/28/2014

            'removed 7/21/2018
            ''9/23/2014 - added for EPLI logic brought over from DiamondQuickQuote
            '_HasEPLI = False
            '_EPLI_Applied = False 'added 10/7/2014 for new VR Commercial; not currently used from library
            '_EPLIPremium = ""
            '_EPLICoverageLimitId = ""
            '_EPLIDeductibleId = ""
            '_EPLICoverageTypeId = ""

            'removed 7/21/2018
            '' MGB 2/9/15 Bug 4040; ported over from DiamondQuickQuote 3/5/2015
            '_BlanketWaiverOfSubrogation = 0  ' 0 = None; 1 = CGL1004; 2 = CGL1002; 3/5/2015 note: may need to be updated to empty string; now use this for 3 = CAP and 4 = WCP Matt A 4-14-17
            '_BlanketWaiverOfSubrogationQuotedPremium = "" 'added 3/5/2015

            'removed 7/21/2018
            ''added 2/6/2017 for Condo D&O logic
            '_HasCondoDandO = False
            '_CondoDandOAssociatedName = ""
            '_CondoDandODeductibleId = ""
            '_CondoDandOPremium = ""
            '_CondoDandOManualLimit = ""

            'removed 7/21/2018
            '_CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = False 'added 10/15/2014 for reconciliation

            'removed 7/21/2018
            '_CanUseOperatorNumForOperatorReconciliation = False 'added 10/29/2014

            'removed 7/21/2018
            ''added 11/17/2014 for HOM
            '_Locations_InlandMarinesTotal_Premium = ""
            '_Locations_InlandMarinesTotal_CoveragePremium = ""
            '_Locations_RvWatercraftsTotal_Premium = ""
            '_Locations_RvWatercraftsTotal_CoveragesPremium = ""

            '_FirstWrittenDate = "" 'added 11/19/2014; will only be used if it's there... else will keep Diamond default; removed 7/27/2018

            'removed 7/21/2018
            ''added 1/19/2015 for CIM
            ''_ScheduledCoverages = New List(Of QuickQuoteScheduledCoverage)
            '_ScheduledCoverages = Nothing
            '_HasConvertedScheduledCoverages = False
            '_CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False 'added 1/22/2015
            ''_ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage) 'added 1/22/2015
            '_ContractorsEquipmentScheduledCoverages = Nothing
            ''added 1/23/2015
            '_ContractorsEquipmentScheduleCoinsuranceTypeId = "" 'may need static data placeholder; may be defaulted as there's just one value in dropdown (1 = per 100)
            '_ContractorsEquipmentScheduleDeductibleId = "" 'may need static data placeholder
            '_ContractorsEquipmentScheduleRate = ""
            ''_ContractorsEquipmentScheduleCoverageBasisTypeId = "" 'may need static data placeholder; removed 4/2/2015... will default to 1
            '_ContractorsEquipmentScheduleQuotedPremium = ""
            ''_ContractorsEquipmentScheduleDepositPremiumFactor = "" 'may not need; appears to be defaulted to 0.500; would need to add DepositPremiumFactor prop to Coverage object (CoverageDetail)
            ''_ContractorsEquipmentScheduleManualLimitAmount = "" 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for ContractorsEquipmentScheduledCoverages
            ''added 1/27/2015
            '_ContractorsEquipmentLeasedRentedFromOthersLimit = ""
            ''_ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = ""
            '_ContractorsEquipmentLeasedRentedFromOthersRate = ""
            '_ContractorsEquipmentLeasedRentedFromOthersQuotedPremium = ""
            ''added 1/27/2015
            '_ContractorsEquipmentRentalReimbursementLimit = ""
            ''_ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_ContractorsEquipmentRentalReimbursementRate = ""
            '_ContractorsEquipmentRentalReimbursementQuotedPremium = ""
            '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = ""
            ''_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = ""
            '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = ""
            '_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium = ""
            '_ContractorsEquipmentSmallToolsEndorsementPerToolLimit = ""
            ''_ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium = ""
            '_SmallToolsLimit = ""
            ''_SmallToolsCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_SmallToolsRate = ""
            '_SmallToolsDeductibleId = ""
            ''_SmallToolsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_SmallToolsAdditionalInterests = Nothing
            '_SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_SmallToolsQuotedPremium = ""
            '_SmallToolsIsEmployeeTools = False 'added 7/15/2015 for missed CIM requirement (on small tools floater)
            '_SmallToolsIsToolsLeasedOrRented = False 'added 7/15/2015 for missed CIM requirement (on small tools floater)
            '_SmallToolsAnyOneLossCatastropheLimit = ""
            ''_SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_SmallToolsAnyOneLossCatastropheQuotedPremium = ""
            ''added 1/28/2015
            ''_InstallationScheduledLocations = New List(Of QuickQuoteInstallationScheduledLocation)
            '_InstallationScheduledLocations = Nothing
            '_InstallationQuotedPremium = ""
            ''_InstallationAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_InstallationAdditionalInterests = Nothing
            '_InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_InstallationBlanketLimit = ""
            '_InstallationBlanketCoinsuranceTypeId = ""
            '_InstallationBlanketDeductibleId = ""
            '_InstallationBlanketRate = ""
            ''_InstallationBlanketCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_InstallationBlanketQuotedPremium = ""
            '_InstallationBlanketAnyOneLossCatastropheLimit = ""
            ''_InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = "" 'removed 4/2/2015... will default to 1
            '_InstallationBlanketAnyOneLossCatastropheQuotedPremium = ""
            ''added 2/2/2015
            '_InstallationAdditionalDebrisRemovalExpenseLimit = ""
            '_InstallationAdditionalDebrisRemovalExpenseQuotedPremium = ""
            '_InstallationStorageLocationsLimit = ""
            '_InstallationStorageLocationsQuotedPremium = ""
            '_InstallationTransitLimit = ""
            '_InstallationTransitQuotedPremium = ""
            '_InstallationTestingLimit = ""
            '_InstallationTestingQuotedPremium = ""
            '_InstallationSewerBackupLimit = ""
            '_InstallationSewerBackupDeductible = ""
            '_InstallationSewerBackupQuotedPremium = ""
            '_InstallationSewerBackupCatastropheLimit = ""
            '_InstallationSewerBackupCatastropheQuotedPremium = ""
            '_InstallationEarthquakeLimit = ""
            '_InstallationEarthquakeDeductible = ""
            '_InstallationEarthquakeQuotedPremium = ""
            '_InstallationEarthquakeCatastropheLimit = ""
            '_InstallationEarthquakeCatastropheQuotedPremium = ""
            ''added 2/9/2015
            '_BusinessPersonalPropertyLimit = "" 'shown in UI Installation Coverage Extensions section, but may not be specific to Installation
            '_BusinessPersonalPropertyQuotedPremium = ""
            ''_ScheduledPropertyItems = New List(Of QuickQuoteScheduledPropertyItem)
            '_ScheduledPropertyItems = Nothing
            ''_ScheduledPropertyAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_ScheduledPropertyAdditionalInterests = Nothing
            '_ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_ScheduledPropertyCoinsuranceTypeId = ""
            '_ScheduledPropertyDeductibleId = ""
            '_ScheduledPropertyRate = ""
            '_ScheduledPropertyNamedPerils = False
            '_ScheduledPropertyQuotedPremium = ""
            ''added 2/10/2015
            '_ComputerCoinsuranceTypeId = "" 'cov also has CoverageBasisTypeId set to 1
            '_ComputerExcludeEarthquake = False
            '_ComputerValuationMethodTypeId = ""
            ''_ComputerAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_ComputerAdditionalInterests = Nothing
            '_ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_ComputerQuotedPremium = ""
            '_ComputerAllPerilsDeductibleId = "" 'cov also has CoverageBasisTypeId set to 1
            '_ComputerAllPerilsQuotedPremium = ""
            '_ComputerEarthquakeVolcanicEruptionDeductible = "" 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
            '_ComputerEarthquakeVolcanicEruptionQuotedPremium = ""
            '_ComputerMechanicalBreakdownDeductible = "" 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
            '_ComputerMechanicalBreakdownQuotedPremium = ""
            ''added 2/18/2015
            '_BuildersRiskDeductibleId = "" 'cov also has CoverageBasisTypeId set to 1
            '_BuildersRiskRate = ""
            ''_BuildersRiskAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_BuildersRiskAdditionalInterests = Nothing
            '_BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_BuildersRiskQuotedPremium = ""
            ''_BuildersRiskScheduledLocations = New List(Of QuickQuoteBuildersRiskScheduledLocation)
            '_BuildersRiskScheduledLocations = Nothing
            ''added 6/17/2017 for Diamond Proposals
            '_BuildersRiskScheduleStorageLocationsLimit = ""
            '_BuildersRiskScheduleStorageLocationsQuotedPremium = ""
            '_BuildersRiskScheduleTransitLimit = ""
            '_BuildersRiskScheduleTransitQuotedPremium = ""
            '_BuildersRiskScheduleTestingLimit = ""
            '_BuildersRiskScheduleTestingQuotedPremium = ""
            ''added 3/16/2015
            '_FineArtsDeductibleCategoryTypeId = ""
            '_FineArtsRate = ""
            '_FineArtsDeductibleId = ""
            '_FineArtsQuotedPremium = ""
            ''_FineArtsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_FineArtsAdditionalInterests = Nothing
            '_FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_FineArtsBreakageMarringOrScratching = False 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching
            '_FineArtsBreakageMarringOrScratchingQuotedPremium = ""
            ''added 3/17/2015
            '_OwnersCargoAnyOneOwnedVehicleLimit = ""
            '_OwnersCargoAnyOneOwnedVehicleDeductibleId = "" 'static data
            '_OwnersCargoAnyOneOwnedVehicleRate = ""
            '_OwnersCargoAnyOneOwnedVehicleDescription = ""
            ''_OwnersCargoAnyOneOwnedVehicleAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_OwnersCargoAnyOneOwnedVehicleAdditionalInterests = Nothing
            '_OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_OwnersCargoAnyOneOwnedVehicleLoadingUnloading = False
            '_OwnersCargoAnyOneOwnedVehicleNamedPerils = False
            '_OwnersCargoAnyOneOwnedVehicleQuotedPremium = ""
            '_OwnersCargoCatastropheLimit = ""
            '_OwnersCargoCatastropheQuotedPremium = ""
            '_TransportationCatastropheLimit = ""
            '_TransportationCatastropheDeductibleId = "" 'static data
            '_TransportationCatastropheDescription = ""
            ''_TransportationCatastropheAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_TransportationCatastropheAdditionalInterests = Nothing
            '_TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_TransportationCatastropheLoadingUnloading = False
            '_TransportationCatastropheNamedPerils = False
            '_TransportationCatastropheQuotedPremium = ""
            '_TransportationAnyOneOwnedVehicleLimit = "" 'note: cov also has CoverageBasisTypeId set to 1
            '_TransportationAnyOneOwnedVehicleNumberOfVehicles = "" 'CoverageDetail
            '_TransportationAnyOneOwnedVehicleRate = ""
            '_TransportationAnyOneOwnedVehicleQuotedPremium = ""
            ''added 3/18/2015
            ''_MotorTruckCargoScheduledVehicles = New List(Of QuickQuoteScheduledVehicle)
            '_MotorTruckCargoScheduledVehicles = Nothing
            ''added 3/23/2015
            ''_MotorTruckCargoScheduledVehicleAdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_MotorTruckCargoScheduledVehicleAdditionalInterests = Nothing
            '_MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_MotorTruckCargoScheduledVehicleLoadingUnloading = False 'CoverageDetail
            '_MotorTruckCargoScheduledVehicleNamedPerils = False 'CoverageDetail
            '_MotorTruckCargoScheduledVehicleOperatingRadius = "" 'CoverageDetail
            '_MotorTruckCargoScheduledVehicleRate = "" 'CoverageDetail
            '_MotorTruckCargoScheduledVehicleDeductibleId = "" 'static data
            '_MotorTruckCargoScheduledVehicleDescription = ""
            '_MotorTruckCargoScheduledVehicleQuotedPremium = ""
            ''added 3/24/2015
            '_MotorTruckCargoScheduledVehicleCatastropheLimit = ""
            '_MotorTruckCargoScheduledVehicleCatastropheQuotedPremium = ""
            ''added 3/25/2015
            ''_SignsAdditionalInterests = New List(Of QuickQuoteAdditionalInterest) 'note: cov also has CoverageBasisTypeId set to 1
            '_SignsAdditionalInterests = Nothing
            '_SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            '_SignsMaximumDeductible = "" 'CoverageDetail
            '_SignsMinimumDeductible = "" 'CoverageDetail
            '_SignsValuationMethodTypeId = "" 'CoverageDetail; static data
            '_SignsDeductibleId = "" 'static data
            '_SignsQuotedPremium = ""
            '_SignsAnyOneLossCatastropheLimit = "" 'note: cov also has CoverageBasisTypeId set to 1
            '_SignsAnyOneLossCatastropheQuotedPremium = ""
            ''added 5/29/2015 for CIM
            '_ContractorsEquipmentCatastropheLimit = ""
            '_ContractorsEquipmentCatastropheQuotedPremium = ""

            'removed 7/21/2018
            ''added 1/20/2015 for Crime
            ''_ClassificationCodes = New List(Of QuickQuoteClassificationCode)
            '_ClassificationCodes = Nothing
            ''added 3/26/2015
            '_CanUseClassificationCodeNumForClassificationCodeReconciliation = False
            '_AggregateLimit = ""
            '_NumberOfEmployees = ""
            ''added 3/31/2015
            '_EmployeeTheftLimit = "" 'note: cov also has CoverageBasisTypeId 1
            '_EmployeeTheftDeductibleId = "" 'static data
            '_EmployeeTheftNumberOfRatableEmployees = "" 'CoverageDetail
            '_EmployeeTheftNumberOfAdditionalPremises = "" 'CoverageDetail
            '_EmployeeTheftFaithfulPerformanceOfDutyTypeId = "" 'CoverageDetail; static data
            ''_EmployeeTheftScheduledEmployeeBenefitPlans = New List(Of String)
            '_EmployeeTheftScheduledEmployeeBenefitPlans = Nothing
            ''_EmployeeTheftIncludedPersonsOrClasses = New List(Of String)
            '_EmployeeTheftIncludedPersonsOrClasses = Nothing
            ''_EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = New List(Of String)
            '_EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = Nothing
            ''_EmployeeTheftScheduledPartners = New List(Of String)
            '_EmployeeTheftScheduledPartners = Nothing
            ''_EmployeeTheftScheduledLLCMembers = New List(Of String)
            '_EmployeeTheftScheduledLLCMembers = Nothing
            ''_EmployeeTheftScheduledNonCompensatedOfficers = New List(Of String)
            '_EmployeeTheftScheduledNonCompensatedOfficers = Nothing
            ''_EmployeeTheftExcludedPersonsOrClasses = New List(Of String)
            '_EmployeeTheftExcludedPersonsOrClasses = Nothing
            '_EmployeeTheftQuotedPremium = ""
            '_InsidePremisesTheftOfMoneyAndSecuritiesLimit = "" 'note: cov also has CoverageBasisTypeId 1
            '_InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = "" 'static data
            '_InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = "" 'CoverageDetail
            '_InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = False 'CoverageDetail
            '_InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = False 'CoverageDetail
            '_InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium = ""
            '_OutsideThePremisesLimit = "" 'note: cov also has CoverageBasisTypeId 1
            '_OutsideThePremisesDeductibleId = "" 'static data
            '_OutsideThePremisesNumberOfPremises = "" 'CoverageDetail
            '_OutsideThePremisesIncludeSellingPrice = False 'CoverageDetail
            '_OutsideThePremisesLimitToRobberyOnly = False 'CoverageDetail
            '_OutsideThePremisesRequireRecordOfChecks = False 'CoverageDetail
            '_OutsideThePremisesQuotedPremium = ""

            'removed 7/21/2018
            ''added 2/19/2015 for Farm
            ''_FarmIncidentalLimitCoverages = New List(Of QuickQuoteCoverage)
            '_FarmIncidentalLimitCoverages = Nothing
            '_HasConvertedFarmIncidentalLimitCoverages = False
            ''added 2/21/105
            ''_ScheduledPersonalPropertyCoverages = New List(Of QuickQuoteScheduledPersonalPropertyCoverage)
            '_ScheduledPersonalPropertyCoverages = Nothing
            '_HasConvertedScheduledPersonalPropertyCoverages = False
            ''_UnscheduledPersonalPropertyCoverage = New QuickQuoteUnscheduledPersonalPropertyCoverage
            '_UnscheduledPersonalPropertyCoverage = Nothing
            '_HasConvertedUnscheduledPersonalPropertyCoverages = False
            ''added 2/21/2015
            '_CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = False
            '_CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = False
            ''added 2/25/2015
            ''_OptionalCoverages = New List(Of QuickQuoteOptionalCoverage)
            '_OptionalCoverages = Nothing
            '_HasConvertedOptionalCoverages = False
            '_CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = False 'added 5/12/2015 for reconciliation
            ''added 2/27/2015
            ''_AdditionalInterests = New List(Of QuickQuoteAdditionalInterest)
            '_AdditionalInterests = Nothing
            '_CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
            ''added 3/3/2015
            '_AggregateLiabilityIncrementTypeId = "" 'static data; dropdown at top of Detail screen for Farm (id 1 = 2; from example)
            '_DrivecamContractEffectiveDate = "" '/DateTime; may not be needed... identified in xml but not UI
            '_EmployeesFullTime = "" 'under Detail/Optional Liability for Farm
            '_EmployeesPartTime1To40Days = "" 'under Detail/Optional Liability for Farm
            '_EmployeesPartTime41To179Days = "" 'under Detail/Optional Liability for Farm
            '_EntityTypeId = "" 'static data; dropdown at top of Detail screen for Farm (id 2 = Partnership; from example)
            '_LiabilityOptionId = "" 'static data; dropdown at top of Detail screen for Farm (id 1 = Farm Personal; from example)
            '_LimitedPerilsCategoryTypeId = "" 'static data; dropdown at top of Detail screen for Farm (id 3 = Both; from example)
            ''added 4/30/2015
            '_Farm_F_and_G_DeductibleLimitId = "" 'static data
            '_Farm_F_and_G_DeductibleQuotedPremium = ""
            '_HasFarmEquipmentBreakdown = False
            '_FarmEquipmentBreakdownQuotedPremium = ""
            '_HasFarmExtender = False
            '_FarmExtenderQuotedPremium = ""
            '_FarmAllStarLimitId = ""
            '_FarmAllStarQuotedPremium = ""
            ''added 5/5/2015
            '_HasFarmEmployersLiability = False
            '_FarmEmployersLiabilityQuotedPremium = ""
            '_FarmFireLegalLiabilityLimitId = ""
            '_FarmFireLegalLiabilityQuotedPremium = ""
            '_HasFarmPersonalAndAdvertisingInjury = False
            '_FarmPersonalAndAdvertisingInjuryQuotedPremium = ""
            '_FarmContractGrowersCareCustodyControlLimitId = ""
            '_FarmContractGrowersCareCustodyControlDescription = ""
            '_FarmContractGrowersCareCustodyControlQuotedPremium = ""
            '_HasFarmExclusionOfProductsCompletedWork = False
            '_FarmExclusionOfProductsCompletedWorkQuotedPremium = ""
            ''added 5/12/2015; goes w/ FarmIncidentalLimitCoverages
            ''_FarmIncidentalLimits = New List(Of QuickQuoteFarmIncidentalLimit)
            '_FarmIncidentalLimits = Nothing
            ''added 9/23/2015
            '_Locations_Farm_L_Liability_QuotedPremium = ""
            '_Locations_Farm_M_Medical_Payments_QuotedPremium = ""

            'removed 7/21/2018
            ''added 3/3/2015 for new CPP package parts
            '_CPP_Has_InlandMarine_PackagePart = False
            '_CPP_Has_Crime_PackagePart = False
            '_CPP_Has_Garage_PackagePart = False 'added 4/22/2017
            '_CPP_Has_Property_PackagePart = False 'added 5/11/2017; will likely always be on CPP
            '_CPP_Has_GeneralLiability_PackagePart = False 'added 5/11/2017; typically on CPP but shouldn't be when Garage PackagePart is there
            ''added 4/2/2015 for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
            '_CPP_CRM_ProgramTypeId = ""
            '_CPP_GAR_ProgramTypeId = "" 'added 5/8/2017

            'removed 7/21/2018
            ''added 3/6/2015 for CPR/CPP Business Income ALS (eff 4/1/2015)
            '_HasBusinessIncomeALS = False
            '_BusinessIncomeALSLimit = ""
            '_BusinessIncomeALSQuotedPremium = ""

            'removed 7/21/2018
            ''added 5/29/2015 for CPP Contractors Enhancement Endorsement (CPR, CGL, CIM; eff 5/12/2015)
            '_HasContractorsEnhancement = False
            '_ContractorsEnhancementQuotedPremium = ""
            '_CPP_CPR_ContractorsEnhancementQuotedPremium = ""
            '_CPP_CGL_ContractorsEnhancementQuotedPremium = ""
            '_CPP_CIM_ContractorsEnhancementQuotedPremium = ""
            ''added 5/29/2015 for CPP Manufacturers Enhancement (CPR, CGL; eff 6/30/2015)
            '_HasManufacturersEnhancement = False
            '_ManufacturersEnhancementQuotedPremium = ""
            '_CPP_CPR_ManufacturersEnhancementQuotedPremium = ""
            '_CPP_CGL_ManufacturersEnhancementQuotedPremium = ""

            'removed 7/21/2018
            ''added 5/11/2015
            '_FarmMachinerySpecialCoverageG_QuotedPremium = ""

            'removed 7/21/2018
            ''added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443)
            '_HasAutoPlusEnhancement = False
            '_AutoPlusEnhancement_QuotedPremium = ""

            'added 10/28/2016 - will be used to determine if QuickQuoteObject should be used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes
            '_QuoteTransactionType = QuickQuoteTransactionType.NewBusinessQuote 'removed 7/27/2018
            'VersionAndLobInfo.Set_QuoteTransactionType(_QuoteTransactionType) 'added 7/17/2018
            'updated 7/27/2018
            VersionAndLobInfo.Set_QuoteTransactionType(TopLevelQuoteInfo.QuoteTransactionType)
            'removed 7/27/2018
            '_OriginalEffectiveDate = ""
            '_OriginalExpirationDate = ""
            '_OriginalTransactionEffectiveDate = ""
            '_OriginalTransactionExpirationDate = ""

            'removed 7/27/2018
            ''added 11/4/2016
            '_TransactionRemark = ""
            '_TransactionReasonId = ""

            'removed 7/27/2018
            ''added 11/10/2016 for Endorsements
            '_AnnualPremium = "" 'PolicyImage.premium_annual
            '_ChangeInFullTermPremium = "" 'PolicyImage.premium_chg_fullterm
            '_ChangeInWrittenPremium = "" 'PolicyImage.premium_chg_written
            '_DifferenceChangeInFullTermPremium = "" 'PolicyImage.premium_diff_chg_fullterm
            '_DifferenceChangeInWrittenPremium = "" 'PolicyImage.premium_diff_chg_written
            '_FullTermPremium = "" 'PolicyImage.premium_fullterm
            '_FullTermPremiumOffsetForPreviousImage = "" 'PolicyImage.ftp_offset_for_prev_image
            '_FullTermPremiumOnsetForCurrent = "" 'PolicyImage.ftp_onset_for_current
            '_OffsetPremiumForPreviousImage = "" 'PolicyImage.offset_for_prev_image
            '_OnsetPremiumForCurrentImage = "" 'PolicyImage.onset_for_current
            '_PreviousWrittenPremium = "" 'PolicyImage.premium_previous_written
            '_WrittenPremium = "" 'PolicyImage.premium_written
            '_PriorTermAnnual = "" 'PolicyImage.prior_term_annual_premium
            '_PriorTermFullterm = "" 'PolicyImage.prior_term_fullterm

            'added 3/27/2017 for Diamond Proposals
            '_Comments = Nothing 'removed 7/27/2018

            'removed 7/21/2018
            ''added 5/4/2017 for CIM (Golf)
            '_ScheduledGolfCourses = Nothing
            '_ScheduledGolfCartCourses = Nothing
            '_GolfCourseQuotedPremium = "" 'covCodeId 21341
            '_GolfCourseCoverageLimitId = "" 'covCodeId 21341
            '_GolfCourseDeductibleId = "" 'covCodeId 21341
            '_GolfCourseCoinsuranceTypeId = "" 'covCodeId 21341
            '_GolfCourseRate = "" 'covCodeId 21341
            '_GolfCartQuotedPremium = "" 'covCodeId 50121
            '_GolfCartManualLimitAmount = "" 'covCodeId 50121
            '_GolfCartDeductibleId = "" 'covCodeId 50121
            '_GolfCartCoinsuranceTypeId = "" 'covCodeId 50121
            '_GolfCartRate = "" 'covCodeId 50121
            '_GolfCartCatastropheManualLimitAmount = "" 'covCodeId 21343
            '_GolfCartDebrisRemovalCoverageLimitId = "" 'covCodeId 80223

            'removed 7/21/2018
            ''added 5/8/2017 for GAR
            '_Liability_UM_UIM_AggregateLiabilityIncrementTypeId = "" 'covDetail; covCodeId 21552
            '_Liability_UM_UIM_DeductibleCategoryTypeId = "" 'covDetail; covCodeId 21552
            '_LocationsTotal_LiabilityQuotedPremium = "" 'loc covCodeId 10111
            '_HasUninsuredMotoristPropertyDamage = False 'covCodeId 21539
            '_UninsuredMotoristPropertyDamageQuotedPremium = "" 'covCodeId 21539; may not be populated
            '_MedicalPaymentsTypeId = "" 'covDetail; covCodeId 21540
            '_LocationsTotal_MedicalPaymentsQuotedPremium = "" 'loc covCodeId 10112
            '_HasPhysicalDamageOtherThanCollision = False 'covCodeId 21550; may not be populated
            '_PhysicalDamageOtherThanCollisionQuotedPremium = "" 'covCodeId 21550
            '_LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium = "" 'loc covCodeId 10116
            '_HasPhysicalDamageCollision = False 'covCodeId 21551
            '_PhysicalDamageCollisionQuotedPremium = "" 'covCodeId 21551; may not be populated
            '_PhysicalDamageCollisionDeductibleId = "" 'covCodeId 21551
            '_HasGarageKeepersOtherThanCollision = False 'covCodeId 21541
            '_GarageKeepersOtherThanCollisionQuotedPremium = "" 'covCodeId 21541
            '_GarageKeepersOtherThanCollisionManualLimitAmount = "" 'covCodeId 21541
            '_GarageKeepersOtherThanCollisionBasisTypeId = "" 'covDetail; covCodeId 21541
            '_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = "" 'covDetail; covCodeId 21541
            '_GarageKeepersOtherThanCollisionTypeId = "" 'covDetail; covCodeId 21541
            '_GarageKeepersOtherThanCollisionDeductibleId = "" 'covCodeId 21541
            '_HasGarageKeepersCollision = False 'covCodeId 21542
            '_GarageKeepersCollisionQuotedPremium = "" 'covCodeId 21542
            '_GarageKeepersCollisionManualLimitAmount = "" 'covCodeId 21542
            '_GarageKeepersCollisionBasisTypeId = "" 'covDetail; covCodeId 21542
            '_GarageKeepersCollisionDeductibleId = "" 'covCodeId 21542
            '_GarageKeepersTotalPremium = "" 'added 5/9/2017; SUM of prems for policy (covCodeIds 21541 and 21542 - has prem) and loc (covCodeIds 10086, 10087, and 10126 - no prem) covs
            ''added 5/10/2017 for GAR (also CAP)
            '_AutoLiabilityTotalPremium = "" 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs
            '_AutoMedicalPaymentsTotalPremium = "" 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs
            '_Auto_UM_UIM_TotalPremium = "" 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs
            '_AutoComprehensiveTotalPremium = "" 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs
            '_AutoCollisionTotalPremium = "" 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs
            '_CAP_GAR_OptCovs_Premium = "" 'diff of CAP/GAR totalPremium minus above premiums, towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
            ''added 5/11/2017 for GAR
            '_LocationsTotal_ClassIIEmployees25AndOlder = ""
            '_LocationsTotal_ClassIIEmployeesUnderAge25 = ""
            '_LocationsTotal_ClassIOtherEmployees = ""
            '_LocationsTotal_ClassIRegularEmployees = ""
            '_LocationsTotal_NumberOfEmployees = ""
            '_LocationsTotal_Payroll = ""
            '_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates = "" 'covCodeId 10113; covDetail
            ''added 5/16/2017 for GAR
            '_LocationsTotal_ClassIEmployees = ""
            '_LocationsTotal_ClassIIEmployees = ""
            '_LocationsTotal_ClassIandIIEmployees = ""
            '_LocationsTotal_DealersBlanketCollisionQuotedPremium = "" 'loc covCodeId 10120
            '_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium = "" 'loc covCodeId 10115
            '_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount = "" 'loc covCodeId 10115
            '_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium = "" 'loc covCodeId 10117
            '_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount = "" 'loc covCodeId 10117
            '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium = "" 'loc covCodeId 10118
            '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount = "" 'loc covCodeId 10118
            '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium = "" 'loc covCodeId 10119
            '_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount = "" 'loc covCodeId 10119
            '_LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium = "" 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            '_LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount = "" 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            '_Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId = "" 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            '_Locations_PhysicalDamageOtherThanCollisionTypeId = "" 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            '_Locations_PhysicalDamageOtherThanCollisionDeductibleId = "" 'loc covCodeIds 10115, 10116, 10117, 10118, and 10119
            ''added 5/16/2017 for CPP
            '_CPP_MinPremAdj_CPR = "" 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            '_CPP_MinPremAdj_CGL = "" 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            '_CPP_MinPremAdj_CIM = "" 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            '_CPP_MinPremAdj_CRM = "" 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            '_CPP_MinPremAdj_GAR = "" 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
            ''added 5/25/2017 for GAR
            '_CAP_GAR_PolicyLevelCovs_Premium = ""
            '_CAP_GAR_LocationLevelCovs_Premium = ""
            '_CAP_GAR_VehicleLevelCovs_Premium = ""
            '_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium = "" 'loc covCodeId 10113
            '_LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium = "" 'loc covCodeId 10086
            '_LocationsTotal_GarageKeepersCollisionQuotedPremium = "" 'loc covCodeId 10087
            '_LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium = "" 'loc covCodeId 10126
            '_CAP_GAR_PolicyAndLocationLevelCovs_Premium = "" 'added 5/26/2017
            '_VehiclesTotal_CAP_GAR_TotalCoveragesPremium = "" 'added 5/26/2017; should essentially match CAP_GAR_VehicleLevelCovs_Premium
            '_VehiclesTotal_TotalCoveragesPremium = "" 'added 5/26/2017
            '_DriversTotal_TotalCoveragesPremium = "" 'added 5/27/2017

            'removed 7/21/2018
            ''added 5/23/2017
            '_AdditionalInterestListLinks = Nothing

            'added 8/19/2017 for WCP Risk Grade; could also be used for other warnings/stops/kills
            '_Messages = Nothing 'removed 7/27/2018

            'removed 7/21/2018
            ''added 8/29/2017
            '_WCP_WaiverPremium = "" 'covCodeId 10124 CovAddInfo w/ "Waiver Premium" in desc

            'removed 7/21/2018
            ''added 5/30/2018 for PARAchute stuff
            '_MultiLineDiscountValue = ""
            '_PriorBodilyInjuryLimitId = ""

            'added 7/25/2018
            '_MultiStateQuotes = Nothing 'removed 7/27/2018

            Set_QuoteLevel(helper.QuoteLevel.TopLevel) 'added 7/28/2018; SET call can trigger Setting of other things

            'added 5/14/2021; removed 5/19/2021... see below
            '_CopiedAnySourceAIsToTopLevelOnLastCheck = False
            '_RemovedAnySourceAIsFromTopLevelOnLastCheck = False

        End Sub
        ''' <summary>
        ''' used to reset IRPM figures
        ''' </summary>
        ''' <remarks>always executed when new quote is started or copied; doesn't specifically needed to be called by developer code</remarks>
        Public Sub Reset_IRPM_Values() 'added 10/5/2012 so these aren't automatically reused on copy quote
            '_IRPM_ManagementCooperation = "1.000"
            '_IRPM_ManagementCooperationDesc = ""
            '_IRPM_Location = "1.000"
            '_IRPM_LocationDesc = ""
            '_IRPM_BuildingFeatures = "1.000"
            '_IRPM_BuildingFeaturesDesc = ""
            '_IRPM_Premises = "1.000"
            '_IRPM_PremisesDesc = ""
            '_IRPM_Employees = "1.000"
            '_IRPM_EmployeesDesc = ""
            '_IRPM_Protection = "1.000"
            '_IRPM_ProtectionDesc = ""
            '_IRPM_CatostrophicHazards = "1.000"
            '_IRPM_CatostrophicHazardsDesc = ""
            '_IRPM_ManagementExperience = "1.000"
            '_IRPM_ManagementExperienceDesc = ""
            '_IRPM_Equipment = "1.000"
            '_IRPM_EquipmentDesc = ""
            '_IRPM_MedicalFacilities = "1.000"
            '_IRPM_MedicalFacilitiesDesc = ""
            '_IRPM_ClassificationPeculiarities = "1.000"
            '_IRPM_ClassificationPeculiaritiesDesc = ""
            '_IRPM_GL_ManagementCooperation = "1.000"
            '_IRPM_GL_ManagementCooperationDesc = ""
            '_IRPM_GL_Location = "1.000"
            '_IRPM_GL_LocationDesc = ""
            '_IRPM_GL_Premises = "1.000"
            '_IRPM_GL_PremisesDesc = ""
            '_IRPM_GL_Equipment = "1.000"
            '_IRPM_GL_EquipmentDesc = ""
            '_IRPM_GL_Employees = "1.000"
            '_IRPM_GL_EmployeesDesc = ""
            '_IRPM_GL_ClassificationPeculiarities = "1.000"
            '_IRPM_GL_ClassificationPeculiaritiesDesc = ""
            '_IRPM_CAP_Management = "1.000"
            '_IRPM_CAP_ManagementDesc = ""
            '_IRPM_CAP_Employees = "1.000"
            '_IRPM_CAP_EmployeesDesc = ""
            '_IRPM_CAP_Equipment = "1.000"
            '_IRPM_CAP_EquipmentDesc = ""
            '_IRPM_CAP_SafetyOrganization = "1.000"
            '_IRPM_CAP_SafetyOrganizationDesc = ""
            '_IRPM_CPR_Management = "1.000"
            '_IRPM_CPR_ManagementDesc = ""
            '_IRPM_CPR_PremisesAndEquipment = "1.000"
            '_IRPM_CPR_PremisesAndEquipmentDesc = ""
            ''added 6/11/2015 for FAR IRPM
            '_IRPM_FAR_CareConditionOfEquipPremises = "1.000"
            '_IRPM_FAR_CareConditionOfEquipPremisesDesc = ""
            '_IRPM_FAR_Cooperation = "1.000"
            '_IRPM_FAR_CooperationDesc = ""
            '_IRPM_FAR_DamageSusceptibility = "1.000"
            '_IRPM_FAR_DamageSusceptibilityDesc = ""
            '_IRPM_FAR_DispersionOrConcentration = "1.000"
            '_IRPM_FAR_DispersionOrConcentrationDesc = ""
            '_IRPM_FAR_SuperiorOrInferiorStructureFeatures = "1.000"
            '_IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = ""
            '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = "1.000"
            '_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = ""
            '_IRPM_FAR_Location = "1.000"
            '_IRPM_FAR_LocationDesc = ""
            '_IRPM_FAR_MiscProtectFeaturesOrHazards = "1.000"
            '_IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = ""
            '_IRPM_FAR_RoofCondition = "1.000"
            '_IRPM_FAR_RoofConditionDesc = ""
            '_IRPM_FAR_StoragePracticesAndHazardousOperations = "1.000"
            '_IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = ""
            '_IRPM_FAR_PastLosses = "1.000"
            '_IRPM_FAR_PastLossesDesc = ""
            '_IRPM_FAR_SupportingBusiness = "1.000"
            '_IRPM_FAR_SupportingBusinessDesc = ""
            '_IRPM_FAR_RegularOnsiteInspections = "1.000"
            '_IRPM_FAR_RegularOnsiteInspectionsDesc = ""
            'updated 7/21/2018
            VersionAndLobInfo.Reset_IRPM_Values()
        End Sub
        ''' <summary>
        ''' used to reset Database figures
        ''' </summary>
        ''' <remarks>always executed when new quote is started or copied; doesn't specifically needed to be called by developer code</remarks>
        Public Sub Reset_Database_Values() 'added 4/2/2014 for Copy Quote functionality so database values (specifically quoteId) aren't tied to new quote... since new validation will now prevent save or rate from completing... also don't want to inadvertently use previous policyId, imageNum, or policyImageId from copied quote when using Diamond services
            '_QuoteNumber = "" 'added 10/30/2016; note: already being reset from SetDefaults() too
            '_PolicyNumber = "" 'added 10/30/2016; note: already being reset from SetDefaults() too

            '_PolicyId = ""
            '_PolicyImageNum = ""
            '_PolicyImageId = ""
            'If _VersionAndLobInfo IsNot Nothing AndAlso _VersionAndLobInfo.PolicyLevelInfoExtended IsNot Nothing Then 'added 7/25/2018
            '    _VersionAndLobInfo.PolicyLevelInfoExtended.PolicyId = ""
            '    _VersionAndLobInfo.PolicyLevelInfoExtended.PolicyImageNum = ""
            'End If

            '_Database_QuoteId = ""
            '_Database_QuoteXmlId = ""
            '_Database_QuoteNumber = ""
            '_Database_LobId = ""
            '_Database_CurrentQuoteXmlId = ""
            '_Database_XmlQuoteId = ""
            '_Database_LastAvailableQuoteNumber = ""
            ''added more 1/8/2016
            '_Database_QuoteStatusId = ""
            '_Database_XmlStatusId = ""
            '_Database_IsPolicy = False
            '_Database_DiamondPolicyNumber = ""
            '_Database_OriginatedInVR = False

            ''added more 4/6/2018 HOM2011 Upgrade
            '_Database_EffectiveDate = ""

            'updated 7/27/2018
            If _TopLevelQuoteInfo IsNot Nothing Then
                _TopLevelQuoteInfo.Reset_Database_Values()
            End If
            If _VersionAndLobInfo IsNot Nothing AndAlso _VersionAndLobInfo.PolicyLevelInfoExtended IsNot Nothing Then
                _VersionAndLobInfo.PolicyLevelInfoExtended.PolicyId = ""
                _VersionAndLobInfo.PolicyLevelInfoExtended.PolicyImageNum = ""
            End If
        End Sub
        'added 1/7/2015 to centralize logic
        'Public Sub ResetValuesForCopiedQuote()

        'End Sub
        'Private Sub SetLobIdForType() '11/27/2013 - shouldn't be needed anymore
        '    Select Case _LobType
        '        Case QuickQuoteLobType.CommercialAuto
        '            _LobId = "20"
        '        Case QuickQuoteLobType.CommercialBOP
        '            _LobId = "25"
        '        Case QuickQuoteLobType.CommercialGeneralLiability
        '            _LobId = "9"
        '        Case QuickQuoteLobType.CommercialPackage
        '            _LobId = "23"
        '        Case QuickQuoteLobType.CommercialProperty
        '            _LobId = "28"
        '        Case QuickQuoteLobType.WorkersCompensation
        '            _LobId = "21"
        '        Case QuickQuoteLobType.AutoPersonal 'added 7/24/2013
        '            _LobId = "1"
        '        Case QuickQuoteLobType.HomePersonal 'added 7/24/2013
        '            _LobId = "2"
        '        Case QuickQuoteLobType.DwellingFirePersonal 'added 8/15/2013
        '            _LobId = "3"
        '        Case Else
        '            _LobId = ""
        '    End Select
        'End Sub
        'added 11/4/2014; removed 7/18/2018
        'Private Sub ResetPackagePartVersionIds()
        '    Dim old_CPR_VersionId As String = _CPP_CPR_PackagePart_VersionId
        '    Dim old_CPR_AddFormsVersionId As String = _CPP_CPR_PackagePart_AddFormsVersionId
        '    Dim old_CPR_RatingVersionId As String = _CPP_CPR_PackagePart_RatingVersionId
        '    Dim old_CPR_UnderwritingVersionId As String = _CPP_CPR_PackagePart_UnderwritingVersionId
        '    Dim old_CGL_VersionId As String = _CPP_CGL_PackagePart_VersionId
        '    Dim old_CGL_AddFormsVersionId As String = _CPP_CGL_PackagePart_AddFormsVersionId
        '    Dim old_CGL_RatingVersionId As String = _CPP_CGL_PackagePart_RatingVersionId
        '    Dim old_CGL_UnderwritingVersionId As String = _CPP_CGL_PackagePart_UnderwritingVersionId
        '    Dim old_Main_VersionId As String = _CPP_Main_PackagePart_VersionId 'added 11/5/2014
        '    Dim old_Main_AddFormsVersionId As String = _CPP_Main_PackagePart_AddFormsVersionId 'added 11/5/2014
        '    Dim old_Main_RatingVersionId As String = _CPP_Main_PackagePart_RatingVersionId 'added 11/5/2014
        '    Dim old_Main_UnderwritingVersionId As String = _CPP_Main_PackagePart_UnderwritingVersionId 'added 11/5/2014
        '    Dim old_CRM_VersionId As String = _CPP_CRM_PackagePart_VersionId 'added 1/21/2015
        '    Dim old_CRM_AddFormsVersionId As String = _CPP_CRM_PackagePart_AddFormsVersionId 'added 1/21/2015
        '    Dim old_CRM_RatingVersionId As String = _CPP_CRM_PackagePart_RatingVersionId 'added 1/21/2015
        '    Dim old_CRM_UnderwritingVersionId As String = _CPP_CRM_PackagePart_UnderwritingVersionId 'added 1/21/2015
        '    Dim old_CIM_VersionId As String = _CPP_CIM_PackagePart_VersionId 'added 1/21/2015
        '    Dim old_CIM_AddFormsVersionId As String = _CPP_CIM_PackagePart_AddFormsVersionId 'added 1/21/2015
        '    Dim old_CIM_RatingVersionId As String = _CPP_CIM_PackagePart_RatingVersionId 'added 1/21/2015
        '    Dim old_CIM_UnderwritingVersionId As String = _CPP_CIM_PackagePart_UnderwritingVersionId 'added 1/21/2015
        '    _CPP_CPR_PackagePart_VersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CPR_PackagePart_AddFormsVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CPR_PackagePart_RatingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CPR_PackagePart_UnderwritingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CGL_PackagePart_VersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CGL_PackagePart_AddFormsVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CGL_PackagePart_RatingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CGL_PackagePart_UnderwritingVersionId = "" 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_Main_PackagePart_VersionId = "" 'added 11/5/2014
        '    _CPP_Main_PackagePart_AddFormsVersionId = "" 'added 11/5/2014
        '    _CPP_Main_PackagePart_RatingVersionId = "" 'added 11/5/2014
        '    _CPP_Main_PackagePart_UnderwritingVersionId = "" 'added 11/5/2014
        '    _CPP_CRM_PackagePart_VersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CRM_PackagePart_AddFormsVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CRM_PackagePart_RatingVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CRM_PackagePart_UnderwritingVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CIM_PackagePart_VersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CIM_PackagePart_AddFormsVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CIM_PackagePart_RatingVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
        '    _CPP_CIM_PackagePart_UnderwritingVersionId = "" 'added 1/21/2015 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part

        '    If _LobType <> Nothing AndAlso _LobType = QuickQuoteLobType.CommercialPackage Then
        '        '_VersionId = "14" 'main package part
        '        '_AddFormsVersionId = "14" 'main package part
        '        '_RatingVersionId = "20" 'main package part
        '        '_UnderwritingVersionId = "14" 'main package part
        '        '_CPP_CPR_PackagePart_VersionId = "16"
        '        '_CPP_CPR_PackagePart_AddFormsVersionId = "16"
        '        '_CPP_CPR_PackagePart_RatingVersionId = "22"
        '        '_CPP_CPR_PackagePart_UnderwritingVersionId = "16"
        '        '_CPP_CGL_PackagePart_VersionId = "13"
        '        '_CPP_CGL_PackagePart_AddFormsVersionId = "13"
        '        '_CPP_CGL_PackagePart_RatingVersionId = "19"
        '        '_CPP_CGL_PackagePart_UnderwritingVersionId = "13"

        '        'added 11/5/2014
        '        If _VersionId = old_Main_VersionId Then
        '            _CPP_Main_PackagePart_AddFormsVersionId = old_Main_AddFormsVersionId
        '            _CPP_Main_PackagePart_RatingVersionId = old_Main_RatingVersionId
        '            _CPP_Main_PackagePart_UnderwritingVersionId = old_Main_UnderwritingVersionId
        '            'ElseIf _VersionId = "14" Then 'now handled w/ Validate_CPP_PackagePart_VersionIds()
        '            '    '_CPP_Main_PackagePart_AddFormsVersionId = "14"
        '            '    '_CPP_Main_PackagePart_RatingVersionId = "20"
        '            '    '_CPP_Main_PackagePart_UnderwritingVersionId = "14"
        '            '    Default_Main_PackagePart_VersionIds()
        '        End If

        '        Dim CPR_LobId As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), QuickQuoteLobType.CommercialProperty), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
        '        _CPP_CPR_PackagePart_VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, CPR_LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
        '        If _CPP_CPR_PackagePart_VersionId = old_CPR_VersionId Then
        '            _CPP_CPR_PackagePart_AddFormsVersionId = old_CPR_AddFormsVersionId
        '            _CPP_CPR_PackagePart_RatingVersionId = old_CPR_RatingVersionId
        '            _CPP_CPR_PackagePart_UnderwritingVersionId = old_CPR_UnderwritingVersionId
        '            'ElseIf _CPP_CPR_PackagePart_VersionId = "16" Then 'now handled w/ Validate_CPP_PackagePart_VersionIds()
        '            '    '_CPP_CPR_PackagePart_AddFormsVersionId = "16"
        '            '    '_CPP_CPR_PackagePart_RatingVersionId = "22"
        '            '    '_CPP_CPR_PackagePart_UnderwritingVersionId = "16"
        '            '    Default_CPR_PackagePart_VersionIds()
        '        End If

        '        Dim CGL_LobId As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), QuickQuoteLobType.CommercialGeneralLiability), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
        '        _CPP_CGL_PackagePart_VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, CGL_LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
        '        If _CPP_CGL_PackagePart_VersionId = old_CGL_VersionId Then
        '            _CPP_CGL_PackagePart_AddFormsVersionId = old_CGL_AddFormsVersionId
        '            _CPP_CGL_PackagePart_RatingVersionId = old_CGL_RatingVersionId
        '            _CPP_CGL_PackagePart_UnderwritingVersionId = old_CGL_UnderwritingVersionId
        '            'ElseIf _CPP_CGL_PackagePart_VersionId = "13" Then 'now handled w/ Validate_CPP_PackagePart_VersionIds()
        '            '    '_CPP_CGL_PackagePart_AddFormsVersionId = "13"
        '            '    '_CPP_CGL_PackagePart_RatingVersionId = "19"
        '            '    '_CPP_CGL_PackagePart_UnderwritingVersionId = "13"
        '            '    Default_CGL_PackagePart_VersionIds()
        '        End If

        '        'updated 1/21/2015
        '        Dim CRM_LobId As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), QuickQuoteLobType.CommercialCrime), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
        '        _CPP_CRM_PackagePart_VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, CRM_LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
        '        If _CPP_CRM_PackagePart_VersionId = old_CRM_VersionId Then
        '            _CPP_CRM_PackagePart_AddFormsVersionId = old_CRM_AddFormsVersionId
        '            _CPP_CRM_PackagePart_RatingVersionId = old_CRM_RatingVersionId
        '            _CPP_CRM_PackagePart_UnderwritingVersionId = old_CRM_UnderwritingVersionId
        '        End If

        '        Dim CIM_LobId As String = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobType, System.Enum.GetName(GetType(QuickQuoteLobType), QuickQuoteLobType.CommercialInlandMarine), QuickQuoteHelperClass.QuickQuotePropertyName.LobId)
        '        _CPP_CIM_PackagePart_VersionId = qqHelper.GetRelatedStaticDataValueForOptionValue(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.LobId, CIM_LobId, QuickQuoteHelperClass.QuickQuotePropertyName.VersionId)
        '        If _CPP_CIM_PackagePart_VersionId = old_CIM_VersionId Then
        '            _CPP_CIM_PackagePart_AddFormsVersionId = old_CIM_AddFormsVersionId
        '            _CPP_CIM_PackagePart_RatingVersionId = old_CIM_RatingVersionId
        '            _CPP_CIM_PackagePart_UnderwritingVersionId = old_CIM_UnderwritingVersionId
        '        End If

        '        'added 11/5/2014
        '        Validate_CPP_PackagePart_VersionIds()
        '    End If
        'End Sub
        'Private Sub Default_CPR_PackagePart_VersionIds()
        '    If _CPP_CPR_PackagePart_VersionId = "16" Then 'added IF/ELSE 5/31/2018 so we can use new ids and still handle old ones; original logic in IF
        '        _CPP_CPR_PackagePart_VersionId = "16"
        '        _CPP_CPR_PackagePart_AddFormsVersionId = "16"
        '        _CPP_CPR_PackagePart_RatingVersionId = "22"
        '        _CPP_CPR_PackagePart_UnderwritingVersionId = "16"
        '    Else
        '        _CPP_CPR_PackagePart_VersionId = "123"
        '        _CPP_CPR_PackagePart_AddFormsVersionId = "122"
        '        _CPP_CPR_PackagePart_RatingVersionId = "263"
        '        _CPP_CPR_PackagePart_UnderwritingVersionId = "122"
        '    End If
        'End Sub
        'Private Sub Default_CGL_PackagePart_VersionIds()
        '    If _CPP_CGL_PackagePart_VersionId = "13" Then 'added IF/ELSE 5/31/2018 so we can use new ids and still handle old ones; original logic in IF
        '        _CPP_CGL_PackagePart_VersionId = "13"
        '        _CPP_CGL_PackagePart_AddFormsVersionId = "13"
        '        _CPP_CGL_PackagePart_RatingVersionId = "19"
        '        _CPP_CGL_PackagePart_UnderwritingVersionId = "13"
        '    Else
        '        _CPP_CGL_PackagePart_VersionId = "113"
        '        _CPP_CGL_PackagePart_AddFormsVersionId = "113"
        '        _CPP_CGL_PackagePart_RatingVersionId = "265"
        '        _CPP_CGL_PackagePart_UnderwritingVersionId = "113"
        '    End If
        'End Sub
        ''added 11/5/2014
        'Private Sub Default_Main_PackagePart_VersionIds()
        '    If _CPP_Main_PackagePart_VersionId = "14" Then 'added IF/ELSE 5/31/2018 so we can use new ids and still handle old ones; original logic in IF
        '        _CPP_Main_PackagePart_VersionId = "14"
        '        _CPP_Main_PackagePart_AddFormsVersionId = "14"
        '        _CPP_Main_PackagePart_RatingVersionId = "20"
        '        _CPP_Main_PackagePart_UnderwritingVersionId = "14"
        '    Else
        '        _CPP_Main_PackagePart_VersionId = "88"
        '        _CPP_Main_PackagePart_AddFormsVersionId = "88"
        '        _CPP_Main_PackagePart_RatingVersionId = "134"
        '        _CPP_Main_PackagePart_UnderwritingVersionId = "88"
        '    End If
        'End Sub
        ''added 1/21/2015
        'Private Sub Default_CRM_PackagePart_VersionIds()
        '    If _CPP_CRM_PackagePart_VersionId = "12" Then 'added IF/ELSE 5/31/2018 so we can use new ids and still handle old ones; original logic in IF
        '        _CPP_CRM_PackagePart_VersionId = "12"
        '        _CPP_CRM_PackagePart_AddFormsVersionId = "12"
        '        _CPP_CRM_PackagePart_RatingVersionId = "18"
        '        _CPP_CRM_PackagePart_UnderwritingVersionId = "12"
        '    Else
        '        _CPP_CRM_PackagePart_VersionId = "79"
        '        _CPP_CRM_PackagePart_AddFormsVersionId = "79"
        '        _CPP_CRM_PackagePart_RatingVersionId = "125"
        '        _CPP_CRM_PackagePart_UnderwritingVersionId = "79"
        '    End If
        'End Sub
        'Private Sub Default_CIM_PackagePart_VersionIds()
        '    If _CPP_CIM_PackagePart_VersionId = "46" Then 'added IF/ELSE 5/31/2018 so we can use new ids and still handle old ones; original logic in IF
        '        _CPP_CIM_PackagePart_VersionId = "46"
        '        _CPP_CIM_PackagePart_AddFormsVersionId = "46"
        '        _CPP_CIM_PackagePart_RatingVersionId = "80"
        '        _CPP_CIM_PackagePart_UnderwritingVersionId = "46"
        '    Else
        '        _CPP_CIM_PackagePart_VersionId = "114"
        '        _CPP_CIM_PackagePart_AddFormsVersionId = "114"
        '        _CPP_CIM_PackagePart_RatingVersionId = "247"
        '        _CPP_CIM_PackagePart_UnderwritingVersionId = "114"
        '    End If
        'End Sub
        Public Sub Validate_CPP_PackagePart_VersionIds()
            'Validate_Main_PackagePart_VersionIds()

            'Validate_CPR_PackagePart_VersionIds()

            'Validate_CGL_PackagePart_VersionIds()

            ''updated 1/21/2015
            'Validate_CRM_PackagePart_VersionIds()

            'Validate_CIM_PackagePart_VersionIds()

            'updated 7/18/2018
            VersionAndLobInfo.Validate_CPP_PackagePart_VersionIds()
        End Sub
        'removed 7/18/2018
        'Private Sub Validate_Main_PackagePart_VersionIds()
        '    'If _CPP_Main_PackagePart_VersionId = "" OrElse (_CPP_Main_PackagePart_VersionId = "14" AndAlso _CPP_Main_PackagePart_RatingVersionId = "") Then
        '    'updated 6/1/2018 for newer versionId
        '    If _CPP_Main_PackagePart_VersionId = "" OrElse ((_CPP_Main_PackagePart_VersionId = "14" OrElse _CPP_Main_PackagePart_VersionId = "88") AndAlso _CPP_Main_PackagePart_RatingVersionId = "") Then
        '        If _VersionId <> "" Then
        '            _CPP_Main_PackagePart_VersionId = _VersionId
        '            _CPP_Main_PackagePart_AddFormsVersionId = _AddFormsVersionId
        '            _CPP_Main_PackagePart_RatingVersionId = _RatingVersionId
        '            _CPP_Main_PackagePart_UnderwritingVersionId = _UnderwritingVersionId

        '            'If _CPP_Main_PackagePart_VersionId = "14" AndAlso _CPP_Main_PackagePart_RatingVersionId = "" Then
        '            'updated 6/1/2018 for newer versionId
        '            If (_CPP_Main_PackagePart_VersionId = "14" OrElse _CPP_Main_PackagePart_VersionId = "88") AndAlso _CPP_Main_PackagePart_RatingVersionId = "" Then
        '                Default_Main_PackagePart_VersionIds()
        '            End If
        '        Else
        '            Default_Main_PackagePart_VersionIds()
        '        End If
        '    End If
        'End Sub
        'Private Sub Validate_CPR_PackagePart_VersionIds()
        '    'If _CPP_CPR_PackagePart_VersionId = "" OrElse (_CPP_CPR_PackagePart_VersionId = "16" AndAlso _CPP_CPR_PackagePart_RatingVersionId = "") Then
        '    'updated 6/1/2018 for newer versionId
        '    If _CPP_CPR_PackagePart_VersionId = "" OrElse ((_CPP_CPR_PackagePart_VersionId = "16" OrElse _CPP_CPR_PackagePart_VersionId = "123") AndAlso _CPP_CPR_PackagePart_RatingVersionId = "") Then
        '        Default_CPR_PackagePart_VersionIds()
        '    End If
        'End Sub
        'Private Sub Validate_CGL_PackagePart_VersionIds()
        '    'If _CPP_CGL_PackagePart_VersionId = "" OrElse (_CPP_CGL_PackagePart_VersionId = "13" AndAlso _CPP_CGL_PackagePart_RatingVersionId = "") Then
        '    'updated 6/1/2018 for newer versionId
        '    If _CPP_CGL_PackagePart_VersionId = "" OrElse ((_CPP_CGL_PackagePart_VersionId = "13" OrElse _CPP_CGL_PackagePart_VersionId = "113") AndAlso _CPP_CGL_PackagePart_RatingVersionId = "") Then
        '        Default_CGL_PackagePart_VersionIds()
        '    End If
        'End Sub
        ''added 1/21/2015
        'Private Sub Validate_CRM_PackagePart_VersionIds()
        '    'If _CPP_CRM_PackagePart_VersionId = "" OrElse (_CPP_CRM_PackagePart_VersionId = "12" AndAlso _CPP_CRM_PackagePart_RatingVersionId = "") Then
        '    'updated 6/1/2018 for newer versionId
        '    If _CPP_CRM_PackagePart_VersionId = "" OrElse ((_CPP_CRM_PackagePart_VersionId = "12" OrElse _CPP_CRM_PackagePart_VersionId = "79") AndAlso _CPP_CRM_PackagePart_RatingVersionId = "") Then
        '        Default_CRM_PackagePart_VersionIds()
        '    End If
        'End Sub
        'Private Sub Validate_CIM_PackagePart_VersionIds()
        '    'If _CPP_CIM_PackagePart_VersionId = "" OrElse (_CPP_CIM_PackagePart_VersionId = "46" AndAlso _CPP_CIM_PackagePart_RatingVersionId = "") Then
        '    'updated 6/1/2018 for newer versionId
        '    If _CPP_CIM_PackagePart_VersionId = "" OrElse ((_CPP_CIM_PackagePart_VersionId = "46" OrElse _CPP_CIM_PackagePart_VersionId = "114") AndAlso _CPP_CIM_PackagePart_RatingVersionId = "") Then
        '        Default_CIM_PackagePart_VersionIds()
        '    End If
        'End Sub
        'Private Sub SetLiquorRateAndMinimumPremForClassificationId()
        '    Select Case _LiquorLiabilityClassificationId
        '        Case "50911"
        '            _LiquorRate = "1.08"
        '            _LiquorMinimumPremium = "0"
        '        Case "58161"
        '            _LiquorRate = "9.97"
        '            _LiquorMinimumPremium = "40"
        '        Case "59211"
        '            _LiquorRate = "4.05"
        '            _LiquorMinimumPremium = "0"
        '        Case "70412"
        '            _LiquorRate = "6.51"
        '            _LiquorMinimumPremium = "0"
        '        Case Else
        '            _LiquorRate = ""
        '            _LiquorMinimumPremium = ""
        '    End Select
        'End Sub


        '7/27/2018 - added new FinalizeQuickQuote to check for multi-state; original method renamed to Protected Sub FinalizeQuickQuote_Original_SingleState()
        ''' <summary>
        ''' used to parse thru different objects to calculate totals and set properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically need to be called by developer code</remarks>
        Public Sub FinalizeQuickQuote()
            'should maybe clear out MultiStateQuotes 1st if there are any
            Dim isMultiState As Boolean = False
            Dim inMultiStatePackageFormat As Boolean = False 'added 7/31/2018

            Dim packagePartStates As List(Of helper.QuickQuoteState) = Nothing
            If TopLevelQuoteInfo.PackageParts IsNot Nothing AndAlso TopLevelQuoteInfo.PackageParts.Count > 0 Then
                packagePartStates = helper.QuickQuoteStatesForPackageParts(TopLevelQuoteInfo.PackageParts)

                If packagePartStates IsNot Nothing AndAlso packagePartStates.Count > 1 Then
                    isMultiState = True
                    TopLevelQuoteInfo.Set_OriginallyHadMultipleQuoteStates(True) 'added 7/28/2018
                    inMultiStatePackageFormat = True 'added 7/31/2018
                    TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True) 'added 7/31/2018
                Else 'added 7/31/2018; may still be in multiStatePackage format since it has packageParts (if not CPP or if non-Indiana state or unknown packagePartType based on original IN ones)
                    If LobType <> QuickQuoteLobType.CommercialPackage Then
                        inMultiStatePackageFormat = True 'added 7/31/2018
                        TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True) 'added 7/31/2018
                    Else
                        If packagePartStates IsNot Nothing AndAlso packagePartStates.Count > 0 Then
                            For Each s As helper.QuickQuoteState In packagePartStates
                                If s <> helper.QuickQuoteState.Indiana Then
                                    inMultiStatePackageFormat = True 'added 7/31/2018
                                    TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True) 'added 7/31/2018
                                    Exit For
                                End If
                            Next
                        Else
                            '12/11/2018 note: MultiStatePackageFormat logic below relies on packagePartStates being something, so shouldn't allow this case to go down multiStateFormat route
                            Dim hasUnknownPackagePart As Boolean = False 'added 12/11/2018
                            For Each pp As QuickQuotePackagePart In TopLevelQuoteInfo.PackageParts
                                If String.IsNullOrWhiteSpace(pp.PackagePartType) = True Then
                                    'inMultiStatePackageFormat = True 'added 7/31/2018
                                    'TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True) 'added 7/31/2018
                                    'updated 12/11/2018... will update packagePartTypes if needed but won't send down multiStateFormat route
                                    hasUnknownPackagePart = True
                                    Exit For
                                End If
                            Next
                            If hasUnknownPackagePart = True Then 'added 12/11/2018
                                qqHelper.UpdatePackagePartsWithOriginalPackagePartTypes(TopLevelQuoteInfo.PackageParts)
                            End If
                        End If

                        'added IF 2/8/2023 for newCo
                        If inMultiStatePackageFormat = False AndAlso System.Enum.IsDefined(GetType(QuickQuoteHelperClass.QuickQuoteCompany), Company) = True AndAlso Company <> QuickQuoteHelperClass.QuickQuoteCompany.None AndAlso Company <> QuickQuoteHelperClass.QuickQuoteCompany.IndianaFarmersMutual Then
                            inMultiStatePackageFormat = True
                            TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True)
                        End If

                        'added 12/7/2018 to allow for single-state IN CPP to use latest package logic as long as it would be saved w/ latest package logic according to lob/effDate/transType
                        'If inMultiStatePackageFormat = False AndAlso helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType) = True Then
                        'updated 12/11/2018 to also make sure packagePartStates are something
                        'If inMultiStatePackageFormat = False AndAlso helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType) = True AndAlso packagePartStates IsNot Nothing AndAlso packagePartStates.Count > 0 Then
                        'updated 12/23/2018
                        'If inMultiStatePackageFormat = False AndAlso helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True) = True AndAlso packagePartStates IsNot Nothing AndAlso packagePartStates.Count > 0 Then
                        'updated 2/8/2023 for newCo
                        If inMultiStatePackageFormat = False AndAlso helper.OkayToUseMultiStateQuoteFormatForLob_WithCompanyParam(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True, qqCompany:=Company, considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass:=True) = True AndAlso packagePartStates IsNot Nothing AndAlso packagePartStates.Count > 0 Then
                            inMultiStatePackageFormat = True
                            TopLevelQuoteInfo.Set_OriginallyInMultiStatePackageFormat(True)
                        End If
                    End If
                End If
            End If

            'If isMultiState = False Then
            'updated 7/31/2018
            If inMultiStatePackageFormat = False Then
                'normal single-state; run original logic
                FinalizeQuickQuote_Original_SingleState()
            Else
                'was multi-state; now just multi-state package format (either multi-state or non-CPP w/ package parts or CPP w/ non-Indiana state or CPP w/ unknown packagePartType according to original IN logic)
                TopLevelQuoteInfo.ArchiveAndClearPackageParts() 'package parts will now be TopLevelQuoteInfo.OriginalPackageParts

                'packagePart list has now been cleared; now add Master packagePart to main list if needed
                Dim ppMaster As QuickQuotePackagePart = qqHelper.GetMasterPackagePart(TopLevelQuoteInfo.OriginalPackageParts, clonePart:=True)
                If ppMaster IsNot Nothing Then
                    If TopLevelQuoteInfo.PackageParts Is Nothing Then
                        TopLevelQuoteInfo.PackageParts = New List(Of QuickQuotePackagePart)
                    End If
                    TopLevelQuoteInfo.PackageParts.Add(ppMaster)
                    qqHelper.UpdatePackagePartsWithOriginalPackagePartTypes(TopLevelQuoteInfo.PackageParts) 'added 9/19/2018 so master part could always be parsed correctly (i.e. to pull Locations, Vehicles, AdditionalInterests, etc.)
                End If

                Dim nonMasterPackageParts As List(Of QuickQuotePackagePart) = qqHelper.GetNonMasterPackageParts(TopLevelQuoteInfo.OriginalPackageParts, cloneList:=True) 'added 7/31/2018

                For Each s As helper.QuickQuoteState In packagePartStates
                    Dim multiStateQuote As New QuickQuoteObject
                    qqHelper.CopyInformationFromOneQuoteToAnother(Me, multiStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.MultiStateBase) '12/30/2018 - moved here from after AddToList in next step so Copy doesn't potentially overwrite anything... should be okay after moving QuoteLevel from TopLevelBaseCommonInfo to StateAndLobParts
                    'multiStateQuote.LobType = LobType
                    'multiStateQuote.QuickQuoteState = s
                    'helper.AddNewQuickQuoteObjectToList(TopLevelQuoteInfo.MultiStateQuotes, multiStateQuote, lobType:=LobType, qqState:=s, level:=helper.QuoteLevel.StateLevel) 'updated 7/28/2018 for quoteLevel
                    'updated 11/28/2022
                    helper.AddNewQuickQuoteObjectToList_WithCompany(TopLevelQuoteInfo.MultiStateQuotes, multiStateQuote, lobType:=LobType, qqState:=s, qqCompany:=Company, level:=helper.QuoteLevel.StateLevel) 'updated 7/28/2018 for quoteLevel

                    'qqHelper.CopyInformationFromOneQuoteToAnother(Me, multiStateQuote, copyTypeForDefaultParams:=QuickQuote_Copy_Parameters.QuoteCopyType.MultiStateBase) '12/30/2018 - moved above AddToList in previous step so Copy doesn't potentially overwrite anything... should be okay after moving QuoteLevel from TopLevelBaseCommonInfo to StateAndLobParts

                    ''multiStateQuote.TopLevelQuoteInfo.PackageParts = qqHelper.PackagePartsForQuickQuoteState(TopLevelQuoteInfo.PackageParts, s, cloneList:=True)
                    ''updated 7/31/2018
                    'multiStateQuote.TopLevelQuoteInfo.PackageParts = qqHelper.PackagePartsForQuickQuoteState(nonMasterPackageParts, s, cloneList:=False)

                    ''7/28/2018 - added logic to add packagePart premiums into TotalQuotedPremium
                    'If multiStateQuote.TopLevelQuoteInfo.PackageParts IsNot Nothing AndAlso multiStateQuote.TopLevelQuoteInfo.PackageParts.Count > 0 Then
                    '    For Each pp As QuickQuotePackagePart In multiStateQuote.TopLevelQuoteInfo.PackageParts
                    '        multiStateQuote.TotalQuotedPremium = qqHelper.getSum(multiStateQuote.TotalQuotedPremium, pp.FullTermPremium)
                    '    Next
                    'End If
                    'updated 8/1/2018
                    If LobType = QuickQuoteLobType.CommercialPackage Then
                        multiStateQuote.TopLevelQuoteInfo.PackageParts = qqHelper.PackagePartsForQuickQuoteState(nonMasterPackageParts, s, cloneList:=False) 'note: not cloning here since cloning would've already been done from GetNonMasterPackageParts above if needed
                        qqHelper.UpdatePackagePartsWithOriginalPackagePartTypes(multiStateQuote.TopLevelQuoteInfo.PackageParts)

                        'logic to add packagePart premiums into TotalQuotedPremium
                        If multiStateQuote.TopLevelQuoteInfo.PackageParts IsNot Nothing AndAlso multiStateQuote.TopLevelQuoteInfo.PackageParts.Count > 0 Then
                            For Each pp As QuickQuotePackagePart In multiStateQuote.TopLevelQuoteInfo.PackageParts
                                multiStateQuote.TotalQuotedPremium = qqHelper.getSum(multiStateQuote.TotalQuotedPremium, pp.FullTermPremium)
                            Next
                        End If
                    Else
                        'monoline
                        Dim stateLobPart As QuickQuotePackagePart = qqHelper.PackagePartForQuickQuoteStateAndLobType(nonMasterPackageParts, s, LobType, clonePart:=False) 'note: not cloning here since cloning would've already been done from GetNonMasterPackageParts above if needed
                        If stateLobPart IsNot Nothing Then
                            'copy VersionAndLobInfo from statePart to new multiStateQuote (includes all lobInfo stuff; can double-check version/lob/state info but it should be okay)
                            multiStateQuote.VersionAndLobInfo = qqHelper.CloneObject(stateLobPart.VersionAndLobInfo)
                            'checking lobType and state just in case
                            If multiStateQuote.LobType <> LobType Then
                                multiStateQuote.LobType = LobType
                            End If
                            If multiStateQuote.QuickQuoteState <> s Then
                                multiStateQuote.QuickQuoteState = s
                            End If
                            If multiStateQuote.Company <> Company Then 'added 11/28/2022
                                multiStateQuote.Company = Company
                            End If
                            multiStateQuote.TotalQuotedPremium = stateLobPart.FullTermPremium
                        Else
                            'should find something above but will include logic to treat like CPP just in case
                            multiStateQuote.TopLevelQuoteInfo.PackageParts = qqHelper.PackagePartsForQuickQuoteState(nonMasterPackageParts, s, cloneList:=False) 'note: not cloning here since cloning would've already been done from GetNonMasterPackageParts above if needed
                            qqHelper.UpdatePackagePartsWithOriginalPackagePartTypes(multiStateQuote.TopLevelQuoteInfo.PackageParts)

                            'logic to add packagePart premiums into TotalQuotedPremium
                            If multiStateQuote.TopLevelQuoteInfo.PackageParts IsNot Nothing AndAlso multiStateQuote.TopLevelQuoteInfo.PackageParts.Count > 0 Then
                                For Each pp As QuickQuotePackagePart In multiStateQuote.TopLevelQuoteInfo.PackageParts
                                    multiStateQuote.TotalQuotedPremium = qqHelper.getSum(multiStateQuote.TotalQuotedPremium, pp.FullTermPremium)
                                Next
                            End If
                        End If
                    End If

                    'might need to combine package part premiums for multiStateQuote.TotalQuotedPremium... added above 7/28/2018
                    multiStateQuote.FinalizeQuickQuote_Original_SingleState()
                Next

                'If helper.ShouldRevertSingleStateQuotesToSingleStateFormat(LobType) = True Then 'added IF 9/20/2018; moved below Finalization 12/23/2018
                '    If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0).QuickQuoteState = QuickQuoteState Then
                '        VersionAndLobInfo = qqHelper.CloneObject(TopLevelQuoteInfo.MultiStateQuotes.Item(0).VersionAndLobInfo)

                '        helper.RemoveQuickQuoteObjectByIndex(TopLevelQuoteInfo.MultiStateQuotes, 0)
                '    End If
                'End If

                FinalizeQuickQuote_Original_SingleState() 'added 7/31/2018 to run for top-level quote; PackageParts should now just contain Master PackagePart instead of all

                'added 12/22/2018 to fix IL new quote issue w/ initial IN-only save, re-pull in multiState format and then re-save as IL-only (was previously turning into 2-state quote w/ messed up govState part)
                'If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 2 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(1) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = QuickQuoteState AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).QuickQuoteState <> QuickQuoteState AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.PolicyUnderwritings Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.PolicyUnderwritings.Count = 0) AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).VersionAndLobInfo.PolicyUnderwritings IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).VersionAndLobInfo.PolicyUnderwritings.Count > 0 AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Locations Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Locations.Count = 0) AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Vehicles Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Vehicles.Count = 0) Then
                'updated 12/23/2018 to also make sure policyNumber/quoteNumber hasn't been set yet
                If String.IsNullOrWhiteSpace(PolicyNumber) = True AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 2 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(1) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = QuickQuoteState AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).QuickQuoteState <> QuickQuoteState AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.PolicyUnderwritings Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.PolicyUnderwritings.Count = 0) AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).VersionAndLobInfo.PolicyUnderwritings IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes(1).VersionAndLobInfo.PolicyUnderwritings.Count > 0 AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Locations Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Locations.Count = 0) AndAlso (TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Vehicles Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes(0).VersionAndLobInfo.Vehicles.Count = 0) Then
                    '2 subQuotes, 1st = govStatePart, 2nd = otherStatePart; govStatePart is missing UW questions but otherStatePart has then; govStatePart doesn't have any Locations or Vehicles yet
                    'need to remove govStatePart and turn otherStatePart into govStatePart
                    helper.RemoveQuickQuoteObjectByIndex(TopLevelQuoteInfo.MultiStateQuotes, 0)
                    TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState = QuickQuoteState
                End If

                'moved here from above Finalization 12/23/2018; also updated
                Dim okayToRevertToSingleStateFormat As Boolean = False
                If helper.ShouldRevertSingleStateQuotesToSingleStateFormat(LobType) = True Then
                    'If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0).QuickQuoteState = QuickQuoteState Then
                    'updated 2/8/2023 for newCo
                    If (LobType <> QuickQuoteLobType.CommercialPackage OrElse (LobType = QuickQuoteLobType.CommercialPackage AndAlso (System.Enum.IsDefined(GetType(QuickQuoteHelperClass.QuickQuoteCompany), Company) = False OrElse Company = QuickQuoteHelperClass.QuickQuoteCompany.None OrElse Company = helper.QuickQuoteCompany.IndianaFarmersMutual))) AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0).QuickQuoteState = QuickQuoteState Then
                        okayToRevertToSingleStateFormat = True
                    End If
                End If

                'If okayToRevertToSingleStateFormat = False AndAlso String.IsNullOrWhiteSpace(PolicyNumber) = True AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0).QuickQuoteState = QuickQuoteState AndAlso helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True) = False Then
                'updated 2/8/2023 for newCo
                If okayToRevertToSingleStateFormat = False AndAlso String.IsNullOrWhiteSpace(PolicyNumber) = True AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0) IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Item(0).QuickQuoteState = QuickQuoteState AndAlso helper.OkayToUseMultiStateQuoteFormatForLob_WithCompanyParam(LobType, effDate:=EffectiveDate, transType:=QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True, qqCompany:=Company, considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass:=True) = False Then
                    'no policy/quote #, only 1 subQuote that matches top-level state, and would not typically be Saved in multiState format unless already that way
                    okayToRevertToSingleStateFormat = True
                End If

                If okayToRevertToSingleStateFormat = True Then
                    VersionAndLobInfo = qqHelper.CloneObject(TopLevelQuoteInfo.MultiStateQuotes.Item(0).VersionAndLobInfo)

                    helper.RemoveQuickQuoteObjectByIndex(TopLevelQuoteInfo.MultiStateQuotes, 0)
                End If
            End If

            'added 7/28/2018
            TopLevelQuoteInfo.Set_OriginalQuoteStates(QuoteStates)
            TopLevelQuoteInfo.Set_OriginalGoverningState(QuickQuoteState)

            'added 8/10/2018
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                'If helper.CopyLocationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                '    qqHelper.CopyLocationsFromStateLevelToTopLevel(Me)
                'End If
                'If helper.CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                '    qqHelper.CopyVehiclesFromStateLevelToTopLevel(Me)
                'End If
                'If helper.CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/19/2018
                '    qqHelper.CopyGLClassificationsFromStateLevelToTopLevel(Me)
                'End If
                'If helper.CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/24/2018
                '    qqHelper.CopyAdditionalInsuredsFromStateLevelToTopLevel(Me)
                'End If
                'If helper.CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(LobType) = True Then 'added 9/19/2018
                '    qqHelper.CopyAdditionalInterestsFromStateLevelToTopLevel(Me)
                'End If
                '10/21/2021: moved to separate method so it can be called independently of Finalize
                CopyApplicableStateLevelObjectsToTopLevel()

                CheckForCopyingSourceAdditionalInterestsToTopLevel() 'added 5/14/2021

                'added 9/29/2021
                If helper.ConvertPayPlanIdsIfNeeded() = True Then
                    qqHelper.CheckBillingPayPlanIdForRetrieval(Me, okayToUpdateIfNeeded:=True)
                End If

                'added 1/28/2019; already being called in FinalizeQuickQuote_Original_SingleState, but that would likely only work for CPP non-master parts (CGL, CPR) since items (locations, vehicles, etc.) haven't been copied to top-level yet
                qqHelper.SetPackagePartDiamondNums(Me)

                'added 9/15/2021; note: this spot is too early on quote retrieval since it hasn't picked up quote inserted date, which is required for this code to work - moved to QuickQuoteXml.GetQuote_TrackDBInfo
                'qqHelper.PerformDiamondRiskGradeConversionCleanup(Me)
            End If

        End Sub

        ''' <summary>
        ''' used to parse thru different objects to calculate totals and set properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically need to be called by developer code</remarks>
        Protected Sub FinalizeQuickQuote_Original_SingleState() 'renamed 7/27/2018 from Public Sub FinalizeQuickQuote() so new method of same name could check for multi-state
            'moved initializing here (from below ParseThruScheduledRatings) on 8/28/2012
            Dec_BuildingLimit_All_Premium = ""
            Dec_BuildingPersPropLimit_All_Premium = ""
            Dec_BOP_OptCovs_Premium = ""
            Dec_WC_TotalPremiumDue = ""
            'added 8/28/2012
            GL_PremisesTotalQuotedPremium = ""
            GL_ProductsTotalQuotedPremium = ""
            Dec_GL_OptCovs_Premium = ""
            'added 2/20/2014 so these are also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
            HasConvertedCoverages = False 'updated 7/21/2018 from private variable to public property
            HasConvertedScheduledCoverages = False 'added 1/19/2015 for CIM; updated 7/21/2018 from private variable to public property
            HasConvertedFarmIncidentalLimitCoverages = False 'added 2/19/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedScheduledPersonalPropertyCoverages = False 'added 2/21/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedUnscheduledPersonalPropertyCoverages = False 'added 2/21/2015; updated 7/21/2018 from private variable to public property
            HasConvertedOptionalCoverages = False 'added 2/25/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedInclusionsExclusions = False 'updated 7/21/2018 from private variable to public property
            HasConvertedModifiers = False 'updated 7/21/2018 from private variable to public property
            HasConvertedScheduledRatings = False 'updated 7/21/2018 from private variable to public property
            HasConvertedExperienceModifications = False 'added 9/21/2017; updated from private variable to public property
            qqHelper.DisposeIntegers(DiamondExperienceModificationIndexesToUpdate) 'added 9/23/2017; updated from private variable to public property

            Dim hasParsedCoverages As Boolean = False 'added 4/9/2015
            Dim hasParsedScheduledCoverages As Boolean = False 'added 4/13/2015
            Dim hasProcessedLocations As Boolean = False 'added 4/13/2015
            ParseThruPackageParts(hasParsedCoverages, hasParsedScheduledCoverages, hasProcessedLocations) 'added 10/30/2012 for CPP; needs to happen before other parsing routines; updated 4/9/2015 w/ optional byref params... added hasProcessedLocations 4/13/2015

            ParseThruAutoSymbols() 'added 10/1/2012 for CAP
            If hasParsedCoverages = False Then 'added IF 4/9/2015
                ParseThruCoverages()
            End If
            If hasParsedScheduledCoverages = False Then 'added IF 4/13/2015
                ParseThruScheduledCoverages() 'added 1/19/2015 for CIM
            End If
            ParseThruClassificationCodes() 'added 3/26/2015 for CRM... only lob so far that appears to use list... even though you only enter 1 from UI
            ParseThruFarmIncidentalLimitCoverages() 'added 2/19/2015 for Farm
            ParseThruScheduledPersonalPropertyCoverages() 'added 2/21/2015 for Farm
            ParseThruUnscheduledPersonalPropertyCoverages() 'added 2/21/2015 for Farm
            ParseThruOptionalCoverages() 'added 2/25/2015 for Farm
            ParseThruGLClassifications() 'added 8/22/2012
            GL_PremisesTotalQuotedPremium = GL_PremisesPolicyLevelQuotedPremium 'added 8/28/2012; updated 7/21/2018 from private variable to public property (was _GL_PremisesPolicyLevelQuotedPremium; didn't match Products logic directly below)
            GL_ProductsTotalQuotedPremium = GL_ProductsPolicyLevelQuotedPremium 'added 8/28/2012
            ParseThruInclusionsExclusions() 'added 7/17/2012 for WC; moved 8/22/2012 from below
            ParseThruModifiers() 'added 9/4/2012
            ParseThruScheduledRatings()
            ParseThruDrivers() 'moved here 4/24/2014; was previously after ParseThruVehicles... needs to happen 1st so vehicle.DriverNum props can be converted to QQ sequential driver #s when needed (when rated xml is used or quote xml was created from Diamond image)

            'added 5/9/2017; 5/10/2017 note: just needs to happen after ParseCoverages and ParsePackageParts
            GarageKeepersTotalPremium = "" 'updated 7/21/2018 from private variable to public property
            GarageKeepersTotalPremium = qqHelper.getSum(GarageKeepersTotalPremium, GarageKeepersOtherThanCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            GarageKeepersTotalPremium = qqHelper.getSum(GarageKeepersTotalPremium, GarageKeepersCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)

            'added 5/10/2017 for GAR (also CAP); note: needs to happen after ParseCoverages/ParsePackageParts but before ParseVehicles
            AutoLiabilityTotalPremium = "" 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs; updated 7/21/2018 from private variable to public property
            AutoLiabilityTotalPremium = qqHelper.getSum(AutoLiabilityTotalPremium, Liability_UM_UIM_QuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoLiabilityTotalPremium = qqHelper.getSum(AutoLiabilityTotalPremium, HiredBorrowedLiabilityQuotedPremium) 'covCodeId 10062; added 5/25/2017; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoLiabilityTotalPremium = qqHelper.getSum(AutoLiabilityTotalPremium, NonOwnershipLiabilityQuotedPremium) 'covCodeId 10066; added 5/25/2017; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoMedicalPaymentsTotalPremium = "" 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs; updated 7/21/2018 from private variable to public property
            AutoMedicalPaymentsTotalPremium = qqHelper.getSum(AutoMedicalPaymentsTotalPremium, MedicalPaymentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            Auto_UM_UIM_TotalPremium = "" 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs; updated 7/21/2018 from private variable to public property
            Auto_UM_UIM_TotalPremium = qqHelper.getSum(Auto_UM_UIM_TotalPremium, UninsuredMotoristPropertyDamageQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            Auto_UM_UIM_TotalPremium = qqHelper.getSum(Auto_UM_UIM_TotalPremium, UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'added 9/25/2018; covCodeId 21548
            AutoComprehensiveTotalPremium = "" 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs; updated 7/21/2018 from private variable to public property
            AutoComprehensiveTotalPremium = qqHelper.getSum(AutoComprehensiveTotalPremium, PhysicalDamageOtherThanCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoComprehensiveTotalPremium = qqHelper.getSum(AutoComprehensiveTotalPremium, ComprehensiveQuotedPremium) 'added 6/19/2017; 10063 - Hired/Borrowed Other than Collision; updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoCollisionTotalPremium = "" 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs; updated 7/21/2018 from private variable to public property
            AutoCollisionTotalPremium = qqHelper.getSum(AutoCollisionTotalPremium, PhysicalDamageCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            AutoCollisionTotalPremium = qqHelper.getSum(AutoCollisionTotalPremium, CollisionQuotedPremium) 'added 6/19/2017; 10064 - Hired/Borrowed Collision; updated 7/21/2018 from private variable to public property (params in GetSum)
            CAP_GAR_OptCovs_Premium = "" 'diff of CAP/GAR totalPremium minus above premiums, towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017; updated 7/21/2018 from private variable to public property
            'added 5/25/2017 for GAR
            CAP_GAR_PolicyLevelCovs_Premium = "" 'updated 7/21/2018 from private variable to public property
            CAP_GAR_LocationLevelCovs_Premium = "" 'updated 7/21/2018 from private variable to public property
            CAP_GAR_VehicleLevelCovs_Premium = "" 'updated 7/21/2018 from private variable to public property
            CAP_GAR_PolicyAndLocationLevelCovs_Premium = "" 'added 5/26/2017; updated 7/21/2018 from private variable to public property

            ParseThruVehicles() 'added 8/31/2012; 2/20/2014 - v.HasConvertedCoverages being reset in parse method (for 1st rate; was previously only being done in FinalizeQuickQuoteLight)
            'ParseThruDrivers() 'added 4/22/2014 for driver reconciliation; 4/24/2014 note: needs to happen before ParseThruVehicles so vehicle.DriverNum props can be converted to QQ sequential driver #s when needed (when rated xml is used or quote xml was created from Diamond image)
            ParseThruExclusions() 'added 4/23/2014 for exclusion reconciliation
            ParseThruApplicants() 'added 4/23/2014 for applicant reconciliation
            ParseThruLossHistories() 'added 4/23/2014 for lossHistory reconciliation
            ParseThruContractorsEquipmentScheduledItems() 'added 4/29/2014 for reconciliation; 6/3/2017 note: currently only looking at AIs, which won't actually be there until they're pulled from the Buildings... may need to call later on
            ParseThruPolicyUnderwritings() 'added 10/15/2014 for reconciliation
            ParseThruOperators() 'added 10/29/2014 for reconciliation
            ParseThruAdditionalInterests() 'added 2/27/2015 for reconciliation (Farm)
            ParseThruExperienceModifications() 'added 9/18/2017

            'added 10/18/2018 for getting diamondNums for packageParts; could also include None at the front of list and remove normal call below
            Dim packagePartTypes As New List(Of QuickQuoteXML.QuickQuotePackagePartType)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Package)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Crime)
            packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Garage)

            If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                '_HasLocation = True 'added 9/10/2012 PM for validation purposes; updated 7/21/2018 from private variable to public property
                For Each Loc As QuickQuoteLocation In VersionAndLobInfo.Locations
                    Loc.HasConvertedCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                    Loc.HasConvertedModifiers = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                    Loc.HasConvertedScheduledCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                    Loc.HasConvertedSectionCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                    Loc.HasConvertedIncidentalDwellingCoverages = False 'added 2/25/2015
                    Loc.HasConvertedIncomeLosses = False 'added 2/26/2015
                    Loc.ParseThruClassifications() 'added 8/20/2012
                    If HasLocationWithClassification = False AndAlso Loc.HasClassification = True Then 'added 9/10/2012 PM for validation purposes; updated 7/21/2018 from private variable to public property
                        HasLocationWithClassification = True
                    End If
                    If hasProcessedLocations = False Then 'added IF 4/13/2015
                        Loc.ParseThruCoverages()
                    End If
                    Loc.ParseThruGLClassifications() 'added 8/22/2012
                    If hasProcessedLocations = False Then 'added IF 4/13/2015
                        Loc.ParseThruScheduledCoverages() 'added 3/20/2013 for CPR (specific to Property in the Open)
                    End If
                    Loc.ParseThruModifiers() 'added 7/31/2013 for HOM (specific to credits and surcharges)
                    Loc.ParseThruSectionCoverages() 'added 8/1/2013 for HOM
                    Loc.ParseThruInlandMarines() 'added 8/6/2013 for HOM
                    Loc.ParseThruRvWatercrafts(VersionAndLobInfo.Operators) 'added 8/6/2013 for HOM; 2/20/2014 - rv.HasConvertedCoverages being reset in parse method (for 1st rate; was previously only being done in FinalizeQuickQuoteLight); updated 10/30/2014 for policyLevelOperators and RvWatercraft; updated 7/21/2018 to pass in VersionAndLobInfo Prop... could use QuickQuoteObject's Prop but wouldn't need to go through Parent logic
                    Loc.ParseThruAdditionalInterests() 'added 4/29/2014 for reconciliation
                    Loc.ParseThruExclusions() 'added 10/14/2014 for reconciliation
                    Loc.ParseThruPolicyUnderwritings() 'added 10/15/2014 for reconciliation
                    Loc.ParseThruIncidentalDwellingCoverages() 'added 2/25/2015
                    Loc.ParseThruAcreages() 'added 2/26/2015 for Farm
                    Loc.ParseThruIncomeLosses() 'added 2/26/2015 for Farm
                    Loc.ParseThruResidentNames() 'added 2/26/2015 for Farm
                    LocationsTotal_PropertyInTheOpenRecords_QuotedPremium = qqHelper.getSum(LocationsTotal_PropertyInTheOpenRecords_QuotedPremium, Loc.PropertyInTheOpenRecordsTotal_QuotedPremium) 'added 4/17/2013; 9/26/2013 note: should probably initialize as empty string at top of method; updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PropertyInTheOpenRecords_EQ_Premium = qqHelper.getSum(LocationsTotal_PropertyInTheOpenRecords_EQ_Premium, Loc.PropertyInTheOpenRecordsTotal_EQ_Premium) 'added 4/17/2013; 9/26/2013 note: should probably initialize as empty string at top of method; updated 7/21/2018 from private variable to public property (param in GetSum)
                    GL_PremisesTotalQuotedPremium = qqHelper.getSum(GL_PremisesTotalQuotedPremium, Loc.GL_PremisesQuotedPremium) 'added 8/28/2012; updated 7/21/2018 from private variable to public property (param in GetSum)
                    GL_ProductsTotalQuotedPremium = qqHelper.getSum(GL_ProductsTotalQuotedPremium, Loc.GL_ProductsQuotedPremium) 'added 8/28/2012; updated 7/21/2018 from private variable to public property (param in GetSum)
                    'ParseThruInclusionsExclusions() 'added 7/17/2012 for WC; moved 8/22/2012 to above

                    'added 11/16/2012 for CPR declarations section (could be used for any LOB though); 9/26/2013 note: should probably initialize as empty string at top of method
                    LocationsTotal_EquipmentBreakdownQuotedPremium = qqHelper.getSum(LocationsTotal_EquipmentBreakdownQuotedPremium, Loc.EquipmentBreakdownDeductibleQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 4/23/2014; should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseLocationNumForLocationReconciliation = False Then 'updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If Loc.HasValidLocationNum = True Then
                            CanUseLocationNumForLocationReconciliation = True
                        End If
                    End If
                    'added 10/18/2018; shouldn't do anything since the other diamondNums aren't set yet; will need to remove code above if None is added to PackagePartTypes list
                    If packagePartTypes IsNot Nothing AndAlso packagePartTypes.Count > 0 Then
                        For Each ppt As QuickQuoteXML.QuickQuotePackagePartType In packagePartTypes
                            If CanUseLocationNumFlagForPackagePartType(ppt) = False Then
                                If Loc.HasValidLocationNum(ppt) = True Then
                                    SetCanUseLocationNumFlagForPackagePartType(True, ppt)
                                End If
                            End If
                        Next
                    End If

                    If Loc.Buildings IsNot Nothing AndAlso Loc.Buildings.Count > 0 Then
                        Loc.HasBuilding = True 'added 9/10/2012 PM for validation purposes
                        HasLocationWithBuilding = True 'added 9/10/2012 PM for validation purposes; updated 7/21/2018 from private variable to public property
                        For Each build As QuickQuoteBuilding In Loc.Buildings
                            build.HasConvertedClassifications = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                            build.HasConvertedCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                            build.HasConvertedScheduledCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                            build.HasConvertedModifiers = False 'added 6/15/2015 for Farm
                            build.HasConvertedOptionalCoverageEs = False 'added 6/24/2015 for Farm
                            build.EffectiveDate = EffectiveDate '3/9/2017 - BOP stuff; updated from private variable to public property
                            build.HasBusinessMasterEnhancement = HasBusinessMasterEnhancement 'updated 7/18/2018 from private variable to public property
                            'If build.PropertyDeductibleId = "" Then
                            '    build.PropertyDeductibleId = _PropertyDeductibleId
                            'ElseIf _PropertyDeductibleId = "" Then 'added reverse logic 6/21/2012 (for when developers set at building level and policy level needs it); did same for ProtectionClassId below
                            '    _PropertyDeductibleId = build.PropertyDeductibleId
                            'End If
                            'updated 4/11/2018; will just be backup for BOP since everything will be handled from page level logic (Each Location will get the PropDed set on the 1st building; policy level will get the value from the 1st location); will also ensure that building level continues to have value in the case Proposal uses it
                            If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = False Then
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property for LobType
                                    build.PropertyDeductibleId = Loc.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property
                                    build.PropertyDeductibleId = PropertyDeductibleId
                                End If
                            End If
                            If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = False Then 'updated 7/18/2018 from private variable to public property for LobType
                                If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                                    Loc.PropertyDeductibleId = build.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property
                                    Loc.PropertyDeductibleId = PropertyDeductibleId
                                End If
                            End If
                            If qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = False Then 'updated 7/18/2018 from private variable to public property
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property for LobType
                                    PropertyDeductibleId = Loc.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                                    PropertyDeductibleId = build.PropertyDeductibleId
                                End If
                            End If
                            'maybe use something like this at some point; 4/11/2018 note: logic below was older idea and logic above is now more accurate
                            'If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = False AndAlso qqHelper.IsPositiveIntegerString(_PropertyDeductibleId) = True Then
                            '    build.PropertyDeductibleId = _PropertyDeductibleId
                            'ElseIf qqHelper.IsPositiveIntegerString(_PropertyDeductibleId) = False AndAlso qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                            '    _PropertyDeductibleId = build.PropertyDeductibleId
                            'End If
                            '9/17/2012 - found out CPR can store protection class at location level (BOP using building level)
                            If Loc.ProtectionClassId = "" AndAlso build.ProtectionClassId <> "" Then
                                Loc.ProtectionClassId = build.ProtectionClassId
                            ElseIf Loc.ProtectionClassId <> "" AndAlso build.ProtectionClassId = "" Then
                                build.ProtectionClassId = Loc.ProtectionClassId
                            End If
                            '1/29/2013 added similar logic for feet to fire hydrant and miles to fire department (like protection class id)
                            If Loc.FeetToFireHydrant = "" AndAlso build.FeetToFireHydrant <> "" Then
                                Loc.FeetToFireHydrant = build.FeetToFireHydrant
                            ElseIf Loc.FeetToFireHydrant <> "" AndAlso build.FeetToFireHydrant = "" Then
                                build.FeetToFireHydrant = Loc.FeetToFireHydrant
                            End If
                            If Loc.MilesToFireDepartment = "" AndAlso build.MilesToFireDepartment <> "" Then
                                Loc.MilesToFireDepartment = build.MilesToFireDepartment
                            ElseIf Loc.MilesToFireDepartment <> "" AndAlso build.MilesToFireDepartment = "" Then
                                build.MilesToFireDepartment = Loc.MilesToFireDepartment
                            End If
                            If hasProcessedLocations = False Then 'added IF 4/13/2015
                                build.ParseThruCoverages()
                            End If
                            build.ParseThruClassifications()
                            If hasProcessedLocations = False Then 'added IF 4/13/2015
                                build.ParseThruScheduledCoverages() 'added 9/27/2012 for CPR
                            End If
                            build.ParseThruAdditionalInterests() 'added 4/29/2014 for reconciliation
                            build.ParseThruModifiers() 'added 6/15/2015 for Farm
                            build.ParseThruOptionalCoverageEs() 'added 6/24/2015 for Farm
                            build.Calculate_CPR_Covs_TotalBuildingPremium() 'added 10/16/2012 for CPR
                            build.Calculate_CPR_Covs_TotalBuilding_EQ_Premium() 'added 11/15/2012 for CPR
                            build.Calculate_CPR_Covs_With_EQ_Premium() 'added 11/26/2012 for CPR

                            Dec_BuildingLimit_All_Premium = qqHelper.getSum(Dec_BuildingLimit_All_Premium, build.LimitQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                            Dec_BuildingPersPropLimit_All_Premium = qqHelper.getSum(Dec_BuildingPersPropLimit_All_Premium, build.PersonalPropertyLimitQuotedPremium)

                            'added 11/15/2012 for CPR declarations section; 9/26/2013 note: should probably initialize as empty string at top of method
                            CPR_BuildingsTotal_BuildingCovQuotedPremium = qqHelper.getSum(CPR_BuildingsTotal_BuildingCovQuotedPremium, build.LimitQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                            'CPR_BuildingsTotal_PersPropCoverageQuotedPremium = qqHelper.getSum(_CPR_BuildingsTotal_PersPropCoverageQuotedPremium, build.PersPropCov_QuotedPremium)
                            'CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = qqHelper.getSum(_CPR_BuildingsTotal_PersPropOfOthersQuotedPremium, build.PersPropOfOthers_QuotedPremium)
                            'updated 7/8/2017 for Diamond Proposals... since you can have multiple in Diamond whereas VR was coded w/ the assumption that there could only be one
                            CPR_BuildingsTotal_PersPropCoverageQuotedPremium = qqHelper.getSum(CPR_BuildingsTotal_PersPropCoverageQuotedPremium, build.TotalPersonalPropertyNormalQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                            CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = qqHelper.getSum(CPR_BuildingsTotal_PersPropOfOthersQuotedPremium, build.TotalPersonalPropertyOfOthersQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                            CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium = qqHelper.getSum(CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium, build.BusinessIncomeCov_QuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                            CPR_BuildingsTotal_EQ_QuotedPremium = qqHelper.getSum(CPR_BuildingsTotal_EQ_QuotedPremium, build.CPR_Covs_TotalBuilding_EQ_Premium) 'updated 7/21/2018 from private variable to public property (param in GetSum)

                            'added 4/2/2014
                            Loc.BuildingsTotal_PremiumFullterm = qqHelper.getSum(Loc.BuildingsTotal_PremiumFullterm, build.PremiumFullterm) 'might want to initialize before this FOR loop

                            'added 4/23/2014; should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                            If Loc.CanUseFarmBarnBuildingNumForBuildingReconciliation = False Then
                                If build.HasValidFarmBarnBuildingNum = True Then
                                    Loc.CanUseFarmBarnBuildingNumForBuildingReconciliation = True
                                End If
                            End If
                            'added 10/18/2018; shouldn't do anything since the other diamondNums aren't set yet
                            If packagePartTypes IsNot Nothing AndAlso packagePartTypes.Count > 0 Then
                                For Each ppt As QuickQuoteXML.QuickQuotePackagePartType In packagePartTypes
                                    If Loc.CanUseFarmBarnBuildingNumFlagForPackagePartType(ppt) = False Then
                                        If build.HasValidFarmBarnBuildingNum(ppt) = True Then
                                            Loc.SetCanUseFarmBarnBuildingNumFlagForPackagePartType(True, ppt)
                                        End If
                                    End If
                                Next
                            End If

                            'added 9/2/2017
                            If build.BuildingClassifications IsNot Nothing AndAlso build.BuildingClassifications.Count > 0 Then
                                For Each bc As QuickQuoteClassification In build.BuildingClassifications
                                    If bc IsNot Nothing Then
                                        bc.QuoteEffectiveDate = EffectiveDate 'updated from Private variable To Public Property
                                    End If
                                Next
                            End If
                        Next
                    End If
                    'added 4/2/2014
                    LocationsTotal_PremiumFullTerm = qqHelper.getSum(LocationsTotal_PremiumFullTerm, Loc.PremiumFullterm) 'might want to initialize before this FOR loop; updated 7/21/2018 from private variable to public property (param in GetSum)
                    Locations_BuildingsTotal_PremiumFullTerm = qqHelper.getSum(Locations_BuildingsTotal_PremiumFullTerm, Loc.BuildingsTotal_PremiumFullterm) 'might want to initialize before this FOR loop; updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 11/17/2014
                    Locations_InlandMarinesTotal_Premium = qqHelper.getSum(Locations_InlandMarinesTotal_Premium, Loc.InlandMarinesTotal_Premium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    Locations_InlandMarinesTotal_CoveragePremium = qqHelper.getSum(Locations_InlandMarinesTotal_CoveragePremium, Loc.InlandMarinesTotal_CoveragePremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    Locations_RvWatercraftsTotal_Premium = qqHelper.getSum(Locations_RvWatercraftsTotal_Premium, Loc.RvWatercraftsTotal_Premium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    Locations_RvWatercraftsTotal_CoveragesPremium = qqHelper.getSum(Locations_RvWatercraftsTotal_CoveragesPremium, Loc.RvWatercraftsTotal_CoveragesPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 9/23/2015 for Farm
                    Locations_Farm_L_Liability_QuotedPremium = qqHelper.getSum(Locations_Farm_L_Liability_QuotedPremium, Loc.Farm_L_Liability_QuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    Locations_Farm_M_Medical_Payments_QuotedPremium = qqHelper.getSum(Locations_Farm_M_Medical_Payments_QuotedPremium, Loc.Farm_M_Medical_Payments_QuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 5/8/2017 for GAR
                    LocationsTotal_LiabilityQuotedPremium = qqHelper.getSum(LocationsTotal_LiabilityQuotedPremium, Loc.LiabilityQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_MedicalPaymentsQuotedPremium = qqHelper.getSum(LocationsTotal_MedicalPaymentsQuotedPremium, Loc.MedicalPaymentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium, Loc.PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    'added 5/16/2017 for GAR
                    LocationsTotal_DealersBlanketCollisionQuotedPremium = qqHelper.getSum(LocationsTotal_DealersBlanketCollisionQuotedPremium, Loc.DealersBlanketCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium, Loc.PhysicalDamageOtherThanCollisionBuildingQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount, Loc.PhysicalDamageOtherThanCollisionBuildingManualLimitAmount) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium, Loc.PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount, Loc.PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium, Loc.PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount, Loc.PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium, Loc.PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount, Loc.PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium, Loc.PhysicalDamageOtherThanCollisionTotalQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount = qqHelper.getSum(LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount, Loc.PhysicalDamageOtherThanCollisionTotalManualLimitAmount) 'updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 5/9/2017
                    GarageKeepersTotalPremium = qqHelper.getSum(GarageKeepersTotalPremium, Loc.GarageKeepersOtherThanCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    GarageKeepersTotalPremium = qqHelper.getSum(GarageKeepersTotalPremium, Loc.GarageKeepersCollisionQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    GarageKeepersTotalPremium = qqHelper.getSum(GarageKeepersTotalPremium, Loc.GarageKeepersCoverageExtensionsQuotedPremium) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    'added 5/25/2017
                    LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium = qqHelper.getSum(LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium, Loc.GarageKeepersOtherThanCollisionQuotedPremium) 'loc covCodeId 10086; updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_GarageKeepersCollisionQuotedPremium = qqHelper.getSum(LocationsTotal_GarageKeepersCollisionQuotedPremium, Loc.GarageKeepersCollisionQuotedPremium) 'loc covCodeId 10087; updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium = qqHelper.getSum(LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium, Loc.GarageKeepersCoverageExtensionsQuotedPremium) 'loc covCodeId 10126; updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 5/10/2017 for GAR (also CAP)
                    AutoLiabilityTotalPremium = qqHelper.getSum(AutoLiabilityTotalPremium, Loc.LiabilityQuotedPremium) 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs
                    AutoMedicalPaymentsTotalPremium = qqHelper.getSum(AutoMedicalPaymentsTotalPremium, Loc.MedicalPaymentsQuotedPremium) 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs; updated 7/21/2018 from private variable to public property (param in GetSum)
                    Auto_UM_UIM_TotalPremium = qqHelper.getSum(Auto_UM_UIM_TotalPremium, Loc.UninsuredUnderinsuredMotoristBIandPDQuotedPremium) 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs; updated 7/21/2018 from private variable to public property (param in GetSum)
                    'AutoComprehensiveTotalPremium = qqHelper.getSum(_AutoComprehensiveTotalPremium, Loc.PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium) 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs; updated 7/21/2018 from private variable to public property (param in GetSum)
                    'updated 5/16/2017
                    AutoComprehensiveTotalPremium = qqHelper.getSum(AutoComprehensiveTotalPremium, Loc.PhysicalDamageOtherThanCollisionTotalQuotedPremium) 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeIds 10115 - GAR: PhysicalDamageOtherThanCollisionBuildingQuotedPremium, 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium, 10117 - GAR: PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium, 10118 - GAR: PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium, 10119 - GAR: PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs; updated 7/21/2018 from private variable to public property (param in GetSum)
                    AutoCollisionTotalPremium = qqHelper.getSum(AutoCollisionTotalPremium, Loc.DealersBlanketCollisionQuotedPremium) 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs; updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 5/25/2017
                    LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium = qqHelper.getSum(LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium, Loc.UninsuredUnderinsuredMotoristBIandPDQuotedPremium) 'loc covCodeId 10113; updated 7/21/2018 from private variable to public property (param in GetSum)

                    'added 5/11/2017 (for GAR)
                    LocationsTotal_ClassIIEmployees25AndOlder = qqHelper.getSum(LocationsTotal_ClassIIEmployees25AndOlder, Loc.ClassIIEmployees25AndOlder) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_ClassIIEmployeesUnderAge25 = qqHelper.getSum(LocationsTotal_ClassIIEmployeesUnderAge25, Loc.ClassIIEmployeesUnderAge25) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_ClassIOtherEmployees = qqHelper.getSum(LocationsTotal_ClassIOtherEmployees, Loc.ClassIOtherEmployees) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_ClassIRegularEmployees = qqHelper.getSum(LocationsTotal_ClassIRegularEmployees, Loc.ClassIRegularEmployees) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_NumberOfEmployees = qqHelper.getSum(LocationsTotal_NumberOfEmployees, Loc.NumberOfEmployees) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_Payroll = qqHelper.getSum(LocationsTotal_Payroll, Loc.Payroll) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                    LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates = qqHelper.getSum(LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates, Loc.UninsuredUnderinsuredMotoristBIandPDNumberOfPlates) 'covCodeId 10113; covDetail; updated 7/21/2018 from private variable to public property (param in GetSum)
                    'added 5/16/2017 for GAR
                    If qqHelper.IsPositiveIntegerString(Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId) = False Then 'good for all loc PD OtherThanCollision covs (10115, 10116, 10117, 10118, 10119); updated 7/21/2018 from private variable to public property
                        Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId = Loc.PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId
                    End If
                    If qqHelper.IsPositiveIntegerString(Locations_PhysicalDamageOtherThanCollisionTypeId) = False Then 'good for all loc PD OtherThanCollision covs (10115, 10116, 10117, 10118, 10119); updated 7/21/2018 from private variable to public property
                        Locations_PhysicalDamageOtherThanCollisionTypeId = Loc.PhysicalDamageOtherThanCollisionTypeId
                    End If
                    If qqHelper.IsPositiveIntegerString(Locations_PhysicalDamageOtherThanCollisionDeductibleId) = False Then 'good for all loc PD OtherThanCollision covs (10115, 10116, 10117, 10118, 10119); updated 7/21/2018 from private variable to public property
                        Locations_PhysicalDamageOtherThanCollisionDeductibleId = Loc.PhysicalDamageOtherThanCollisionDeductibleId
                    End If

                    'added 10/7/2016 to compare before/after address
                    Loc.Set_OriginalAddress(qqHelper.CloneObject(Loc.Address))

                    'added 11/1/2017
                    Loc.Set_EquipmentBreakdownDeductibleIdBackup(Loc.EquipmentBreakdownDeductibleId)

                    'added 12/29/2018; only do it at singleState level or top level if there are no subQuotes
                    If QuoteLevel = helper.QuoteLevel.TopLevel AndAlso (TopLevelQuoteInfo.MultiStateQuotes Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes.Count = 0) Then
                        If Loc.Address IsNot Nothing AndAlso Loc.Address.HasData = False AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso Loc.Address.QuickQuoteState <> QuickQuoteState AndAlso helper.QuoteHasState(Me, Loc.Address.QuickQuoteState) = False Then
                            Loc.Address.QuickQuoteState = QuickQuoteState
                        End If
                    ElseIf QuoteLevel = helper.QuoteLevel.StateLevel Then
                        If Loc.Address IsNot Nothing AndAlso Loc.Address.HasData = False AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso Loc.Address.QuickQuoteState <> QuickQuoteState Then
                            Loc.Address.QuickQuoteState = QuickQuoteState
                        End If
                    End If
                Next
                LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium = qqHelper.getSum(LocationsTotal_PropertyInTheOpenRecords_EQ_Premium, CPR_BuildingsTotal_EQ_QuotedPremium) 'added 4/17/2013 (specific to CPR); 9/26/2013 note: should probably initialize as empty string at top of method; updated 7/21/2018 from private variable to public property (params in GetSum)

                'added 5/16/2017 for GAR
                LocationsTotal_ClassIEmployees = qqHelper.getSum(LocationsTotal_ClassIOtherEmployees, LocationsTotal_ClassIRegularEmployees) 'updated 7/21/2018 from private variable to public property (params in GetSum)
                LocationsTotal_ClassIIEmployees = qqHelper.getSum(LocationsTotal_ClassIIEmployees25AndOlder, LocationsTotal_ClassIIEmployeesUnderAge25) 'updated 7/21/2018 from private variable to public property (params in GetSum)
                LocationsTotal_ClassIandIIEmployees = qqHelper.getSum(LocationsTotal_ClassIEmployees, LocationsTotal_ClassIIEmployees) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            End If

            'added 5/7/2013 to combine CPR blanket premiums
            CPR_BlanketCoverages_TotalPremium = qqHelper.getSum(BlanketBuildingQuotedPremium, BlanketContentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            CPR_BlanketCoverages_TotalPremium = qqHelper.getSum(CPR_BlanketCoverages_TotalPremium, BlanketBuildingAndContentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            CPR_BlanketCoverages_TotalPremium = qqHelper.getSum(CPR_BlanketCoverages_TotalPremium, BlanketBusinessIncomeQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
            CPR_BlanketCoverages_TotalPremium = qqHelper.getSum(CPR_BlanketCoverages_TotalPremium, BlanketCombinedEarthquake_QuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)

            'moved logic here (from it's own Sub) 8/16/2012
            If LobType <> Nothing AndAlso LobType <> QuickQuoteLobType.None Then 'updated 7/18/2018 from private variable to public property for LobType
                Select Case LobType
                    Case QuickQuoteLobType.Farm
                        If String.IsNullOrWhiteSpace(PayrollAmount) = False AndAlso IsNumeric(PayrollAmount) AndAlso CDec(PayrollAmount) > 0 Then
                            StopGapPayroll = PayrollAmount
                        End If
                    Case QuickQuoteLobType.CommercialBOP
                        'Dec_BuildingLimit_All_Premium = ""
                        'Dec_BuildingPersPropLimit_All_Premium = ""
                        'Dec_BOP_OptCovs_Premium = ""

                        'If _Locations IsNot Nothing AndAlso _Locations.Count > 0 Then
                        '    For Each l As QuickQuoteLocation In _Locations
                        '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                        '            For Each b As QuickQuoteBuilding In l.Buildings
                        '                Dec_BuildingLimit_All_Premium = qqHelper.getSum(_Dec_BuildingLimit_All_Premium, b.LimitQuotedPremium)
                        '                Dec_BuildingPersPropLimit_All_Premium = qqHelper.getSum(Dec_BuildingPersPropLimit_All_Premium, b.PersonalPropertyLimitQuotedPremium)
                        '            Next
                        '        End If
                        '    Next
                        'End If

                        'If _HasBusinessMasterEnhancement = True Then
                        '    Dec_BOP_EnhEnd_Premium = "100"
                        'Else
                        '    Dec_BOP_EnhEnd_Premium = "0"
                        'End If

                        'subtract everything else from totalPrem to get OptCovs prem
                        Dec_BOP_OptCovs_Premium = qqHelper.getDiff(TotalQuotedPremium, Dec_BuildingLimit_All_Premium) 'updated 7/21/2018 from private variable to public property (params in GetDiff); updated _TotalQuotedPremium on 7/27/2018
                        Dec_BOP_OptCovs_Premium = qqHelper.getDiff(Dec_BOP_OptCovs_Premium, Dec_BuildingPersPropLimit_All_Premium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_BOP_OptCovs_Premium = qqHelper.getDiff(Dec_BOP_OptCovs_Premium, OccurrencyLiabilityQuotedPremium) 'updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_BOP_OptCovs_Premium = qqHelper.getDiff(Dec_BOP_OptCovs_Premium, BusinessMasterEnhancementQuotedPremium) 'updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_BOP_OptCovs_Premium = qqHelper.getDiff(Dec_BOP_OptCovs_Premium, MinimumPremiumAdjustment) 'added 1/29/2013 to also exclude min prem adj (phase 2 item); updated 7/21/2018 from private variable to public property (params in GetDiff)

                        'added 6/3/2017
                        'If helper.UseComparativeRaterForLob(lob:=QuickQuoteLobType.CommercialBOP, quoteTransactionType:=_QuoteTransactionType) = helper.QuickQuoteYesNoMaybeType.No Then
                        If helper.UseComparativeRaterForLob(lob:=QuickQuoteLobType.CommercialBOP, quoteTransactionType:=QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe; updated 7/27/2018 from private variable to public property
                            If QuoteTransactionType <> QuickQuoteTransactionType.EndorsementQuote Then
                                helper.UpdateContractorsEquipmentScheduledItemAdditionalInterestsFromBuildings(Me)
                            End If
                        End If

                    Case QuickQuoteLobType.WorkersCompensation
                        'Dec_WC_TotalPremiumDue = ""
                        '_EmployersLiabilityQuotedPremium = increased limit
                        'updated 11/1/2012 to subtract Increased limit prem (employers liability) from Subject coverage prem (TotalEstimatedPlanPremium)
                        'TotalEstimatedPlanPremium = qqHelper.getDiff(_TotalEstimatedPlanPremium, _EmployersLiabilityQuotedPremium)
                        'updated 7/19/2018; may need property on VersionAndLobInfo object that returns unformatted value
                        TotalEstimatedPlanPremium = qqHelper.getDiff(TotalEstimatedPlanPremium, EmployersLiabilityQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        'updated 11/1/2012 to show premium discount as negative; updated 7/21/2018 from private variable to public property (SET was already using Prop)
                        If PremDiscountQuotedPremium <> "" AndAlso IsNumeric(PremDiscountQuotedPremium) = True AndAlso CDec(PremDiscountQuotedPremium) <> 0 Then
                            PremDiscountQuotedPremium = "-" & PremDiscountQuotedPremium
                        End If
                        Dec_WC_TotalPremiumDue = qqHelper.getSum(TotalQuotedPremium, SecondInjuryFundQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum); updated _TotalQuotedPremium on 7/27/2018
                        'added 7/16/2019 for KY
                        Dec_WC_TotalPremiumDue = qqHelper.getSum(Dec_WC_TotalPremiumDue, KentuckySpecialFundAssessmentQuotedPremium)
                        Dec_WC_TotalPremiumDue = qqHelper.getSum(Dec_WC_TotalPremiumDue, WCP_KY_PremSurcharge)
                        'added 1/28/2020 
                        Dec_WC_TotalPremiumDue = qqHelper.getSum(Dec_WC_TotalPremiumDue, IL_WCP_CommissionOperationsFundSurcharge)
                    Case QuickQuoteLobType.CommercialGeneralLiability
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(TotalQuotedPremium, BusinessMasterEnhancementQuotedPremium) 'updated 7/18/2018 from private variable to public property; updated _TotalQuotedPremium on 7/27/2018
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_PremisesTotalQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_ProductsTotalQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_PremisesMinimumPremiumAdjustment) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_ProductsMinimumPremiumAdjustment) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        'updated 6/23/2015 to take Contractors and Manufacturers enhancements into account
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, CPP_CGL_ContractorsEnhancementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, CPP_CGL_ManufacturersEnhancementQuotedPremium)'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        'Case QuickQuoteLobType.CommercialAuto 'added logic 10/4/2012
                        'updated 5/9/2017 to include GAR
                    Case QuickQuoteLobType.CommercialAuto, QuickQuoteLobType.CommercialGarage
                        VehiclesTotal_UM_UIM_CovsQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium, VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(TotalQuotedPremium, VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff); updated _TotalQuotedPremium on 7/27/2018
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_MedicalPaymentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_UM_UIM_CovsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_ComprehensiveCoverageQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_CollisionCoverageQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium)
                        Dec_CAP_OptCovs_Premium_Without_GarageKeepers = Dec_CAP_OptCovs_Premium 'added 5/10/2017 for CAP/GAR
                        Dec_CAP_OptCovs_Premium_Without_GarageKeepers = qqHelper.getDiff(Dec_CAP_OptCovs_Premium_Without_GarageKeepers, GarageKeepersTotalPremium) 'added 5/9/2017 for GAR; applies to CAP also; updated 7/21/2018 from private variable to public property (params in GetDiff)

                        'added 5/10/2017; diff of CAP/GAR totalPremium minus new combined premiums (also added 5/10/2017), towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(TotalQuotedPremium, AutoLiabilityTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff); updated _TotalQuotedPremium on 7/27/2018
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoMedicalPaymentsTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, Auto_UM_UIM_TotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoComprehensiveTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoCollisionTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, GarageKeepersTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        'added 6/20/2017 since Enhancement Endorsement will now show in Proposal Summary; won't apply to GAR
                        CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, BusinessMasterEnhancementQuotedPremium) 'updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetDiff)

                        'added 5/25/2017
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, Liability_UM_UIM_QuotedPremium) 'covCodeId 21552; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, UninsuredMotoristPropertyDamageQuotedPremium) 'covCodeId 21539; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, MedicalPaymentsQuotedPremium) 'covCodeId 21540; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, HiredBorrowedLiabilityQuotedPremium) 'covCodeId 10062; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, NonOwnershipLiabilityQuotedPremium) 'covCodeId 10066; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, PhysicalDamageOtherThanCollisionQuotedPremium) 'covCodeId 21550; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, PhysicalDamageCollisionQuotedPremium) 'covCodeId 21551; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, GarageKeepersOtherThanCollisionQuotedPremium) 'covCodeId 21541; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, GarageKeepersCollisionQuotedPremium) 'covCodeId 21542; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        'added 6/19/2017
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, ComprehensiveQuotedPremium) 'covCodeId 10063; has fullTermPrem here for at least CAP; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, CollisionQuotedPremium) 'covCodeId 10064; has fullTermPrem here for at least CAP; updated 7/21/2018 from private variable to public property (params in GetSum)
                        'added 6/20/2017 since Enhancement Endorsement will now show in Proposal Summary; won't apply to GAR
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, BusinessMasterEnhancementQuotedPremium) 'covCodeId 286; has fullTermPrem here for CAP; updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'added 9/25/2018; covCodeId 21548

                        CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, LegalEntityTypeQuotedPremium) 'added 9/28/2020; covCodeId 80560 - For OH CAP - DJG

                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_LiabilityQuotedPremium) 'loc covCodeId 10111; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_MedicalPaymentsQuotedPremium) 'loc covCodeId 10112; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium) 'loc covCodeId 10113; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium) 'SUM of loc covCodeIds 10115 (LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium), 10116 (LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), 10117 (LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium), 10118 (LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium), 10119 (LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium); has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_DealersBlanketCollisionQuotedPremium) 'loc covCodeId 10120; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium) 'loc covCodeId 10086; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersCollisionQuotedPremium) 'loc covCodeId 10087; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium) 'loc covCodeId 10126; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)

                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium) 'veh covCodeId 2 (Liability_UM_UIM_QuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_MedicalPaymentsQuotedPremium) 'veh covCodeId 60006 (MedicalPaymentsQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_UM_UIM_CovsQuotedPremium) 'veh covCodeIds 8 (VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium - UninsuredMotoristLiabilityQuotedPremium) and 30013 (VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium - UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_ComprehensiveCoverageQuotedPremium) 'veh covCodeId 3 (ComprehensiveQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_CollisionCoverageQuotedPremium) 'veh covCodeId 5 (CollisionQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'veh covCodeId 60008 (TowingAndLaborQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                        CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium) 'veh covCodeIds 10094 and 10095 (RentalReimbursementQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)

                        CAP_GAR_PolicyAndLocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, CAP_GAR_LocationLevelCovs_Premium) 'added 5/26/2017; updated 7/21/2018 from private variable to public property (params in GetSum)

                    Case QuickQuoteLobType.CommercialProperty 'added 4/17/2013 (was going to combine building and property in the open EQ prems, but now doing above); would also need to be done in CPP if left here

                    Case QuickQuoteLobType.CommercialPackage 'added 11/19/2012 for CPP (should do CGL and CPR stuff)
                        'Dec_GL_OptCovs_Premium = qqHelper.getDiff(_TotalQuotedPremium, _BusinessMasterEnhancementQuotedPremium)
                        'updated (from GL logic) to make sure it just looks at GL prem
                        'Dec_GL_OptCovs_Premium = qqHelper.getDiff(_CPP_GL_PackagePart_QuotedPremium, _BusinessMasterEnhancementQuotedPremium)
                        'update 12/4/2012 for correct enhancement endorsement property
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(CPP_GL_PackagePart_QuotedPremium, PackageGL_EnhancementEndorsementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_PremisesTotalQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_ProductsTotalQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_PremisesMinimumPremiumAdjustment) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, GL_ProductsMinimumPremiumAdjustment) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        'updated 6/23/2015 to take Contractors and Manufacturers enhancements into account
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, CPP_CGL_ContractorsEnhancementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                        Dec_GL_OptCovs_Premium = qqHelper.getDiff(Dec_GL_OptCovs_Premium, CPP_CGL_ManufacturersEnhancementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)

                        'added 5/9/2017 for GAR; taken from CAP above, but changed _TotalQuotedPremium to _CPP_GAR_PackagePart_QuotedPremium
                        If CPP_Has_Garage_PackagePart = True Then 'updated 7/21/2018 from private variable to public property
                            VehiclesTotal_UM_UIM_CovsQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium, VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetSum)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(CPP_GAR_PackagePart_QuotedPremium, VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_MedicalPaymentsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_UM_UIM_CovsQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_ComprehensiveCoverageQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_CollisionCoverageQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium = qqHelper.getDiff(Dec_CAP_OptCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            Dec_CAP_OptCovs_Premium_Without_GarageKeepers = Dec_CAP_OptCovs_Premium 'added 5/10/2017 for CAP/GAR
                            Dec_CAP_OptCovs_Premium_Without_GarageKeepers = qqHelper.getDiff(Dec_CAP_OptCovs_Premium_Without_GarageKeepers, GarageKeepersTotalPremium) 'added 5/9/2017 for GAR; applies to CAP also; updated 7/21/2018 from private variable to public property (params in GetDiff)

                            'added 5/10/2017; diff of CAP/GAR totalPremium minus new combined premiums (also added 5/10/2017), towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CPP_GAR_PackagePart_QuotedPremium, AutoLiabilityTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoMedicalPaymentsTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, Auto_UM_UIM_TotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoComprehensiveTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, AutoCollisionTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, GarageKeepersTotalPremium) 'updated 7/21/2018 from private variable to public property (params in GetDiff)
                            'added 6/20/2017 since Enhancement Endorsement will now show in Proposal Summary; won't apply to GAR
                            CAP_GAR_OptCovs_Premium = qqHelper.getDiff(CAP_GAR_OptCovs_Premium, BusinessMasterEnhancementQuotedPremium) 'updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetDiff)

                            'added 5/25/2017
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, Liability_UM_UIM_QuotedPremium) 'covCodeId 21552; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, UninsuredMotoristPropertyDamageQuotedPremium) 'covCodeId 21539; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, MedicalPaymentsQuotedPremium) 'covCodeId 21540; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, HiredBorrowedLiabilityQuotedPremium) 'covCodeId 10062; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, NonOwnershipLiabilityQuotedPremium) 'covCodeId 10066; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, PhysicalDamageOtherThanCollisionQuotedPremium) 'covCodeId 21550; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, PhysicalDamageCollisionQuotedPremium) 'covCodeId 21551; no fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, GarageKeepersOtherThanCollisionQuotedPremium) 'covCodeId 21541; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, GarageKeepersCollisionQuotedPremium) 'covCodeId 21542; has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            'added 6/19/2017
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, ComprehensiveQuotedPremium) 'covCodeId 10063; has fullTermPrem here for at least CAP; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, CollisionQuotedPremium) 'covCodeId 10064; has fullTermPrem here for at least CAP; updated 7/21/2018 from private variable to public property (params in GetSum)
                            'added 6/20/2017 since Enhancement Endorsement will now show in Proposal Summary; won't apply to GAR
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, BusinessMasterEnhancementQuotedPremium) 'covCodeId 286; has fullTermPrem here for CAP; updated 7/18/2018 from private variable to public property; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_PolicyLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'added 9/25/2018; covCodeId 21548

                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_LiabilityQuotedPremium) 'loc covCodeId 10111; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_MedicalPaymentsQuotedPremium) 'loc covCodeId 10112; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium) 'loc covCodeId 10113; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium) 'SUM of loc covCodeIds 10115 (LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium), 10116 (LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), 10117 (LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium), 10118 (LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium), 10119 (LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium); has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_DealersBlanketCollisionQuotedPremium) 'loc covCodeId 10120; has fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium) 'loc covCodeId 10086; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersCollisionQuotedPremium) 'loc covCodeId 10087; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_LocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_LocationLevelCovs_Premium, LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium) 'loc covCodeId 10126; no fullTermPrem for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)

                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium) 'veh covCodeId 2 (Liability_UM_UIM_QuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_MedicalPaymentsQuotedPremium) 'veh covCodeId 60006 (MedicalPaymentsQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_UM_UIM_CovsQuotedPremium) 'veh covCodeIds 8 (VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium - UninsuredMotoristLiabilityQuotedPremium) and 30013 (VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium - UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_ComprehensiveCoverageQuotedPremium) 'veh covCodeId 3 (ComprehensiveQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_CollisionCoverageQuotedPremium) 'veh covCodeId 5 (CollisionQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_TowingAndLaborQuotedPremium) 'veh covCodeId 60008 (TowingAndLaborQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)
                            CAP_GAR_VehicleLevelCovs_Premium = qqHelper.getSum(CAP_GAR_VehicleLevelCovs_Premium, VehiclesTotal_RentalReimbursementQuotedPremium) 'veh covCodeIds 10094 and 10095 (RentalReimbursementQuotedPremium); has fullTermPrem here for GAR; updated 7/21/2018 from private variable to public property (params in GetSum)

                            CAP_GAR_PolicyAndLocationLevelCovs_Premium = qqHelper.getSum(CAP_GAR_PolicyLevelCovs_Premium, CAP_GAR_LocationLevelCovs_Premium) 'added 5/26/2017; updated 7/21/2018 from private variable to public property (params in GetSum)
                        End If
                End Select
            End If

            'added 6/5/2017
            'If _AdditionalInsureds IsNot Nothing Then
            '    _AdditionalInsuredsBackup = qqHelper.CloneObject(_AdditionalInsureds)
            'End If
            'updated 7/19/2018
            If VersionAndLobInfo.AdditionalInsureds IsNot Nothing Then
                VersionAndLobInfo.Set_AdditionalInsuredsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.AdditionalInsureds))
            End If
            'If _ContractorsEquipmentScheduledItems IsNot Nothing Then
            '    _ContractorsEquipmentScheduledItemsBackup = qqHelper.CloneObject(_ContractorsEquipmentScheduledItems)
            'End If
            'updated 7/19/2018
            If VersionAndLobInfo.ContractorsEquipmentScheduledItems IsNot Nothing Then
                VersionAndLobInfo.Set_ContractorsEquipmentScheduledItemsBackup_variable(qqHelper.CloneObject(VersionAndLobInfo.ContractorsEquipmentScheduledItems))
            End If
            'added 10/10/2017
            'If _ExclusionOfAmishWorkerRecords IsNot Nothing Then
            '    _ExclusionOfAmishWorkerRecordsBackup = qqHelper.CloneObject(_ExclusionOfAmishWorkerRecords)
            'End If
            'If _ExclusionOfSoleProprietorRecords IsNot Nothing Then
            '    _ExclusionOfSoleProprietorRecordsBackup = qqHelper.CloneObject(_ExclusionOfSoleProprietorRecords)
            'End If
            'If _InclusionOfSoleProprietorRecords IsNot Nothing Then
            '    _InclusionOfSoleProprietorRecordsBackup = qqHelper.CloneObject(_InclusionOfSoleProprietorRecords)
            'End If
            'If _WaiverOfSubrogationRecords IsNot Nothing Then
            '    _WaiverOfSubrogationRecordsBackup = qqHelper.CloneObject(_WaiverOfSubrogationRecords)
            'End If
            'updated 7/21/2018
            If VersionAndLobInfo.ExclusionOfAmishWorkerRecords IsNot Nothing Then
                VersionAndLobInfo.Set_ExclusionOfAmishWorkerRecordsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.ExclusionOfAmishWorkerRecords))
            End If
            If VersionAndLobInfo.ExclusionOfSoleProprietorRecords IsNot Nothing Then
                VersionAndLobInfo.Set_ExclusionOfSoleProprietorRecordsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.ExclusionOfSoleProprietorRecords))
            End If
            If VersionAndLobInfo.InclusionOfSoleProprietorRecords IsNot Nothing Then
                VersionAndLobInfo.Set_InclusionOfSoleProprietorRecordsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.InclusionOfSoleProprietorRecords))
            End If
            If VersionAndLobInfo.WaiverOfSubrogationRecords IsNot Nothing Then
                VersionAndLobInfo.Set_WaiverOfSubrogationRecordsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.WaiverOfSubrogationRecords))
            End If
            'added 10/15/2018
            If VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL IsNot Nothing Then
                VersionAndLobInfo.Set_ExclusionOfSoleProprietorRecordsBackup_IL_Variable(qqHelper.CloneObject(VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL))
            End If
            'added 4/26/2019
            If VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords IsNot Nothing Then
                VersionAndLobInfo.Set_KentuckyRejectionOfCoverageEndorsementRecordsBackup_Variable(qqHelper.CloneObject(VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords))
            End If

            'added 10/28/2016 - will possibly be used to determine with new QuoteTransactionType property that tells whether QuickQuoteObject is used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes
            'Set_OriginalEffectiveDate(_EffectiveDate)
            'Set_OriginalExpirationDate(_ExpirationDate)
            'Set_OriginalTransactionEffectiveDate(_TransactionEffectiveDate)
            'Set_OriginalTransactionExpirationDate(_TransactionExpirationDate)
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OriginalEffectiveDate(TopLevelQuoteInfo.EffectiveDate)
            TopLevelQuoteInfo.Set_OriginalExpirationDate(TopLevelQuoteInfo.ExpirationDate)
            TopLevelQuoteInfo.Set_OriginalTransactionEffectiveDate(TopLevelQuoteInfo.TransactionEffectiveDate)
            TopLevelQuoteInfo.Set_OriginalTransactionExpirationDate(TopLevelQuoteInfo.TransactionExpirationDate)

            'added 8/15/2017
            Set_RiskGradeLookupId_Original(RiskGradeLookupId) 'updated 7/19/2018 to use public property instead of private variable

            'added 9/5/2017
            'If _PaymentOptions IsNot Nothing AndAlso _PaymentOptions.Count > 0 Then
            '    qqHelper.NumberPaymentOptions(_PaymentOptions)
            'End If
            'updated 7/27/2018
            TopLevelQuoteInfo.NumberPaymentOptionsIfPresent()

            'added 10/18/2018
            qqHelper.SetPackagePartDiamondNums(Me)

            HasInitiatedFinalize = True 'updated 7/27/2018 from private variable to public property
        End Sub
        ''' <summary>
        ''' used to parse thru different objects to set properties
        ''' </summary>
        ''' <remarks>always executed when xml is saved/rated; doesn't specifically needed to be called by developer code</remarks>
        Public Sub FinalizeQuickQuoteLight()
            'added 2/18/2014
            HasConvertedCoverages = False 'updated 7/21/2018 from private variable to public property
            HasConvertedScheduledCoverages = False 'added 1/19/2015 for CIM; updated 7/21/2018 from private variable to public property
            HasConvertedFarmIncidentalLimitCoverages = False 'added 2/19/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedScheduledPersonalPropertyCoverages = False 'added 2/21/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedUnscheduledPersonalPropertyCoverages = False 'added 2/21/2015; updated 7/21/2018 from private variable to public property
            HasConvertedOptionalCoverages = False 'added 2/25/2015 for Farm; updated 7/21/2018 from private variable to public property
            HasConvertedInclusionsExclusions = False 'updated 7/21/2018 from private variable to public property
            HasConvertedModifiers = False 'updated 7/21/2018 from private variable to public property
            HasConvertedScheduledRatings = False 'updated 7/21/2018 from private variable to public property
            HasConvertedExperienceModifications = False 'added 9/21/2017; updated 7/27/2018 from private variable to public property
            qqHelper.DisposeIntegers(DiamondExperienceModificationIndexesToUpdate) 'added 9/23/2017; updated 7/27/2018 from private variable to public property

            'added 8/1/2018
            CheckForMultiStateAndVerifyVersionIds()

            'added 8/10/2018
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If LobType = QuickQuoteLobType.Farm AndAlso helper.FAR_OkayToDefaultLocationFormTypeIdFromFirstLocation() = True Then 'added 1/29/2019
                    Dim qqLocs As List(Of QuickQuoteLocation) = qqHelper.AllQuickQuoteLocations(Me, level:=helper.MultiStateLevel.AllStates)
                    If qqLocs IsNot Nothing AndAlso qqLocs.Count > 1 AndAlso qqLocs(0) IsNot Nothing Then 'more than 1 location and 1st is something
                        Dim firstLocFormTypeId As Integer = qqHelper.IntegerForString(qqLocs(0).FormTypeId)
                        If firstLocFormTypeId > 0 Then
                            Dim locCounter As Integer = 0
                            For Each l As QuickQuoteLocation In qqLocs
                                locCounter += 1
                                If l IsNot Nothing Then
                                    If locCounter > 1 Then
                                        If qqHelper.IsPositiveIntegerString(l.FormTypeId) = False Then
                                            l.FormTypeId = firstLocFormTypeId
                                        End If
                                    End If
                                End If
                            Next
                        End If
                    End If
                End If

                If helper.CopyLocationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                    qqHelper.CopyLocationsFromTopLevelToStateLevel(Me)
                End If
                If helper.CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                    qqHelper.CopyVehiclesFromTopLevelToStateLevel(Me)
                End If
                If helper.CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/19/2018
                    qqHelper.CopyGLClassificationsFromTopLevelToStateLevel(Me)
                End If
                If helper.CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/24/2018
                    qqHelper.CopyAdditionalInsuredsFromTopLevelToStateLevel(Me)
                End If
                If helper.CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(LobType) = True Then 'added 9/19/2018
                    qqHelper.CopyAdditionalInterestsFromTopLevelToGoverningState(Me)
                End If
                qqHelper.CopyMultiStateUWQuestionsToMasterPartIfNeeded(Me) 'added 10/11/2018

                CheckForRemovingSourceAdditionalInterestsFromTopLevel() 'added 5/14/2021

                'added 9/15/2021
                qqHelper.PerformDiamondRiskGradeConversionCleanup(Me)

                'added 9/29/2021
                If helper.ConvertPayPlanIdsIfNeeded() = True Then
                    qqHelper.CheckBillingPayPlanIdForSave(Me, okayToUpdateIfNeeded:=True)
                End If
            End If

            If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                For Each Loc As QuickQuoteLocation In VersionAndLobInfo.Locations
                    Loc.HasConvertedCoverages = False 'added 2/18/2014
                    Loc.HasConvertedModifiers = False 'added 2/18/2014
                    Loc.HasConvertedScheduledCoverages = False 'added 2/18/2014
                    Loc.HasConvertedSectionCoverages = False 'added 2/18/2014
                    Loc.HasConvertedIncidentalDwellingCoverages = False 'added 2/25/2015
                    Loc.HasConvertedIncomeLosses = False 'added 2/26/2015
                    If Loc.Buildings IsNot Nothing AndAlso Loc.Buildings.Count > 0 Then
                        For Each build As QuickQuoteBuilding In Loc.Buildings
                            build.HasConvertedClassifications = False 'added 2/18/2014
                            build.HasConvertedCoverages = False 'added 2/18/2014
                            build.HasConvertedScheduledCoverages = False 'added 2/18/2014
                            build.HasConvertedModifiers = False 'added 6/15/2015 for Farm
                            build.HasConvertedOptionalCoverageEs = False 'added 6/24/2015 for Farm
                            build.HasBusinessMasterEnhancement = HasBusinessMasterEnhancement 'updated 7/18/2018 from private variable to public property
                            'If build.PropertyDeductibleId = "" Then
                            '    build.PropertyDeductibleId = _PropertyDeductibleId
                            'ElseIf _PropertyDeductibleId = "" Then 'added reverse logic 6/21/2012 (for when developers set at building level and policy level needs it); did same for ProtectionClassId below
                            '    _PropertyDeductibleId = build.PropertyDeductibleId
                            'End If
                            'updated 4/11/2018; will just be backup for BOP since everything will be handled from page level logic (Each Location will get the PropDed set on the 1st building; policy level will get the value from the 1st location); will also ensure that building level continues to have value in the case Proposal uses it
                            If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = False Then
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property for LobType
                                    build.PropertyDeductibleId = Loc.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property
                                    build.PropertyDeductibleId = PropertyDeductibleId
                                End If
                            End If
                            If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = False Then 'updated 7/18/2018 from private variable to public property for LobType
                                If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                                    Loc.PropertyDeductibleId = build.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property
                                    Loc.PropertyDeductibleId = PropertyDeductibleId
                                End If
                            End If
                            If qqHelper.IsPositiveIntegerString(PropertyDeductibleId) = False Then 'updated 7/18/2018 from private variable to public property
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveIntegerString(Loc.PropertyDeductibleId) = True Then 'updated 7/18/2018 from private variable to public property for LobType
                                    PropertyDeductibleId = Loc.PropertyDeductibleId
                                ElseIf qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                                    PropertyDeductibleId = build.PropertyDeductibleId
                                End If
                            End If
                            'maybe use something like this at some point; 4/11/2018 note: logic below was older idea and logic above is now more accurate
                            'If qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = False AndAlso qqHelper.IsPositiveIntegerString(_PropertyDeductibleId) = True Then
                            '    build.PropertyDeductibleId = _PropertyDeductibleId
                            'ElseIf qqHelper.IsPositiveIntegerString(_PropertyDeductibleId) = False AndAlso qqHelper.IsPositiveIntegerString(build.PropertyDeductibleId) = True Then
                            '    _PropertyDeductibleId = build.PropertyDeductibleId
                            'End If
                            '9/17/2012 - found out CPR can store protection class at location level (BOP using building level)
                            If Loc.ProtectionClassId = "" AndAlso build.ProtectionClassId <> "" Then
                                Loc.ProtectionClassId = build.ProtectionClassId
                            ElseIf Loc.ProtectionClassId <> "" AndAlso build.ProtectionClassId = "" Then
                                build.ProtectionClassId = Loc.ProtectionClassId
                            End If
                            '1/29/2013 added similar logic for feet to fire hydrant and miles to fire department (like protection class id)
                            If Loc.FeetToFireHydrant = "" AndAlso build.FeetToFireHydrant <> "" Then
                                Loc.FeetToFireHydrant = build.FeetToFireHydrant
                            ElseIf Loc.FeetToFireHydrant <> "" AndAlso build.FeetToFireHydrant = "" Then
                                build.FeetToFireHydrant = Loc.FeetToFireHydrant
                            End If
                            If Loc.MilesToFireDepartment = "" AndAlso build.MilesToFireDepartment <> "" Then
                                Loc.MilesToFireDepartment = build.MilesToFireDepartment
                            ElseIf Loc.MilesToFireDepartment <> "" AndAlso build.MilesToFireDepartment = "" Then
                                build.MilesToFireDepartment = Loc.MilesToFireDepartment
                            End If
                        Next
                    End If

                    'added 2/18/2014
                    If Loc.RvWatercrafts IsNot Nothing AndAlso Loc.RvWatercrafts.Count > 0 Then
                        For Each rv As QuickQuoteRvWatercraft In Loc.RvWatercrafts
                            rv.HasConvertedCoverages = False
                            rv.HasConvertedAssignedOperators = False 'added 10/29/2014
                        Next
                    End If

                    'If _LobType = QuickQuoteLobType.CommercialBOP Then 'removed 4/11/2018 since everything will be handled from page level logic (Each Location will get the PropDed set on the 1st building; policy level will get the value from the 1st location)
                    '    Loc.PropertyDeductibleId = _PropertyDeductibleId
                    'End If

                    'added 7/15/2017
                    Loc.Set_GarageKeepersOtherThanCollisionBasisTypeId(GarageKeepersOtherThanCollisionBasisTypeId) 'updated 7/21/2018 from private variable to public property
                    Loc.Set_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId(GarageKeepersOtherThanCollisionDeductibleCategoryTypeId) 'updated 7/21/2018 from private variable to public property
                    Loc.Set_GarageKeepersOtherThanCollisionTypeId(GarageKeepersOtherThanCollisionTypeId) 'updated 7/21/2018 from private variable to public property
                    Loc.Set_GarageKeepersOtherThanCollisionDeductibleId(GarageKeepersOtherThanCollisionDeductibleId) 'updated 7/21/2018 from private variable to public property
                    Loc.Set_GarageKeepersCollisionBasisTypeId(GarageKeepersCollisionBasisTypeId) 'updated 7/21/2018 from private variable to public property
                    Loc.Set_GarageKeepersCollisionDeductibleId(GarageKeepersCollisionDeductibleId) 'updated 7/21/2018 from private variable to public property

                    'added 12/29/2018; only do it at singleState level or top level if there are no subQuotes
                    If QuoteLevel = helper.QuoteLevel.TopLevel AndAlso (TopLevelQuoteInfo.MultiStateQuotes Is Nothing OrElse TopLevelQuoteInfo.MultiStateQuotes.Count = 0) Then
                        If Loc.Address IsNot Nothing AndAlso Loc.Address.HasData = False AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso Loc.Address.QuickQuoteState <> QuickQuoteState AndAlso helper.QuoteHasState(Me, Loc.Address.QuickQuoteState) = False Then
                            Loc.Address.QuickQuoteState = QuickQuoteState
                        End If
                    ElseIf QuoteLevel = helper.QuoteLevel.StateLevel Then
                        If Loc.Address IsNot Nothing AndAlso Loc.Address.HasData = False AndAlso System.Enum.IsDefined(GetType(helper.QuickQuoteState), QuickQuoteState) = True AndAlso QuickQuoteState <> helper.QuickQuoteState.None AndAlso Loc.Address.QuickQuoteState <> QuickQuoteState Then
                            Loc.Address.QuickQuoteState = QuickQuoteState
                        End If
                    End If

                Next
                'added 7/17/2017
                If HasGarageKeepersOtherThanCollision = True Then 'updated 7/21/2018 from private variable to public property
                    'update policy level prop if location level props are set; else push policy level down to locations
                    Dim _garageKeepersOtcTotalLimitFromLocs As String = qqHelper.GarageKeepersOtherThanCollisionTotalLimitFromLocations(VersionAndLobInfo.Locations, returnInLimitFormat:=True) 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    If qqHelper.IsPositiveDecimalString(_garageKeepersOtcTotalLimitFromLocs) = True Then
                        '_GarageKeepersOtherThanCollisionManualLimitAmount = _garageKeepersOtcTotalLimitFromLocs
                        'updated 7/21/2018
                        VersionAndLobInfo.Set_GarageKeepersOtherThanCollisionManualLimitAmount_Variable(_garageKeepersOtcTotalLimitFromLocs)
                    Else
                        'qqHelper.UpdateGarageKeepersOtherThanCollisionAtLocationLevelBasedOnTotalLimit(_GarageKeepersOtherThanCollisionManualLimitAmount, VersionAndLobInfo.Locations) 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                        'updated 7/21/2018
                        qqHelper.UpdateGarageKeepersOtherThanCollisionAtLocationLevelBasedOnTotalLimit(VersionAndLobInfo.Get_GarageKeepersOtherThanCollisionManualLimitAmount_Variable(), VersionAndLobInfo.Locations)
                    End If
                Else
                    'clear out property value, which will do the same to location level property too
                    GarageKeepersOtherThanCollisionManualLimitAmount = ""
                End If
                If HasGarageKeepersCollision = True Then 'updated 7/21/2018 from private variable to public property
                    'update policy level prop if location level props are set; else push policy level down to locations
                    Dim _garageKeepersCollTotalLimitFromLocs As String = qqHelper.GarageKeepersCollisionTotalLimitFromLocations(VersionAndLobInfo.Locations, returnInLimitFormat:=True) 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    If qqHelper.IsPositiveDecimalString(_garageKeepersCollTotalLimitFromLocs) = True Then
                        '_GarageKeepersCollisionManualLimitAmount = _garageKeepersCollTotalLimitFromLocs
                        'updated 7/21/2018
                        VersionAndLobInfo.Set_GarageKeepersCollisionManualLimitAmount_Variable(_garageKeepersCollTotalLimitFromLocs)
                    Else
                        'qqHelper.UpdateGarageKeepersCollisionAtLocationLevelBasedOnTotalLimit(_GarageKeepersCollisionManualLimitAmount, VersionAndLobInfo.Locations) 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                        'updated 7/21/2018
                        qqHelper.UpdateGarageKeepersCollisionAtLocationLevelBasedOnTotalLimit(VersionAndLobInfo.Get_GarageKeepersCollisionManualLimitAmount_Variable(), VersionAndLobInfo.Locations)
                    End If
                Else
                    'clear out property value, which will do the same to location level property too
                    GarageKeepersCollisionManualLimitAmount = ""
                End If
            End If

            'added 10/13/2017
            'If _NeedsToUpdateWaiverOfSubrogationPremiumId = True AndAlso helper.UseComparativeRaterForLob(lob:=LobType, quoteTransactionType:=_QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then; updated 7/18/2018 from private variable to public property for LobType
            '    helper.UpdateWaiverOfSubrogationRecordListWithPremiumId(_WaiverOfSubrogationRecords, _WaiverOfSubrogationPremiumId)
            'End If
            'updated 7/19/2018
            If VersionAndLobInfo.Get_NeedsToUpdateWaiverOfSubrogationPremiumId_Variable() = True AndAlso helper.UseComparativeRaterForLob(lob:=LobType, quoteTransactionType:=QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe Then; updated 7/18/2018 from private variable to public property for LobType; updated _QuoteTransactionType on 7/27/2018
                helper.UpdateWaiverOfSubrogationRecordListWithPremiumId(VersionAndLobInfo.WaiverOfSubrogationRecords, VersionAndLobInfo.Get_WaiverOfSubrogationPremiumId_Variable())
            End If

            'added 2/18/2014
            If VersionAndLobInfo.Vehicles IsNot Nothing AndAlso VersionAndLobInfo.Vehicles.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each v As QuickQuoteVehicle In VersionAndLobInfo.Vehicles
                    v.HasConvertedCoverages = False
                Next
            End If

            'added 10/30/2014
            qqHelper.SetPolicyLevelAssignmentNumForOperators(VersionAndLobInfo.Operators) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic

            'added 6/3/2017
            If LobType = QuickQuoteLobType.CommercialBOP Then 'updated 7/18/2018 from private variable to public property for LobType
                'If helper.UseComparativeRaterForLob(lob:=QuickQuoteLobType.CommercialBOP, quoteTransactionType:=_QuoteTransactionType) = helper.QuickQuoteYesNoMaybeType.No Then
                If helper.UseComparativeRaterForLob(lob:=QuickQuoteLobType.CommercialBOP, quoteTransactionType:=QuoteTransactionType) <> helper.QuickQuoteYesNoMaybeType.Yes Then 'using <> Yes to also allow on Maybe; updated 7/27/2018 from private variable to public property
                    If QuoteTransactionType <> QuickQuoteTransactionType.EndorsementQuote Then
                        helper.UpdateBuildingAdditionalInterestsFromContractorsEquipmentScheduledItems(Me)
                    End If
                End If
            End If

            'DJG - Bug 58975 - This scenario doesn't cause Diamond to revert the billing addressee back automatically for some reason. Doing it manually. Going from Mortgagee BillTo to Insured BillTo
            If BillToId = "1" AndAlso CurrentBilltoId = "2" AndAlso BillingAddressee Is Nothing Then
                If Policyholder IsNot Nothing AndAlso Policyholder.HasData Then
                    qqHelper.CopyQuickQuotePolicyholder1NameAndAddressToBillingAddressee(Policyholder, BillingAddressee, Me)
                ElseIf Client IsNot Nothing Then
                    If Client.HasPrimaryData Then
                        qqHelper.CopyQuickQuoteClientNameAndAddressToBillingAddressee(Client, BillingAddressee, Me)
                    ElseIf Client.HasValidClientId Then
                        Dim qqxml As New QuickQuoteXML
                        qqxml.LoadDiamondClientIntoQuickQuoteClient(Client.ClientId, Client)
                        If Client.HasPrimaryData = True Then
                            qqHelper.CopyQuickQuoteClientNameAndAddressToBillingAddressee(Client, BillingAddressee, Me)
                        End If
                    End If
                End If
            End If

            'added 8/1/2018
            If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                    If msq IsNot Nothing Then
                        msq.FinalizeQuickQuoteLight()
                    End If
                Next
            End If

            '1/20/2014 note (for PPA): may need to call MoveUpVehicleDrivers() for each vehicle; may also need to verify that vehicle drivers exist
            '_HasInitiatedFinalize = True
        End Sub
        Protected Friend Sub CheckForMultiStateAndVerifyVersionIds()
            TopLevelQuoteInfo.Set_NeedsMultiStateFormat(False)
            TopLevelQuoteInfo.Set_LobIdToUse(LobId)

            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                Dim quoteStateCount As Integer = 0
                Dim qqStates As List(Of helper.QuickQuoteState) = QuoteStates
                If qqStates IsNot Nothing Then
                    quoteStateCount = qqStates.Count
                End If

                If quoteStateCount = 0 Then 'just in case
                    QuickQuoteState = helper.QuickQuoteState.Indiana
                    quoteStateCount = 1
                End If

                'If HasMultipleQuoteStates = True OrElse helper.OkayToUseMultiStateQuoteFormatForLob(LobType) = True Then
                'If quoteStateCount > 1 OrElse helper.OkayToUseMultiStateQuoteFormatForLob(LobType) = True Then
                'updated 9/7/2018
                'If quoteStateCount > 1 OrElse (quoteStateCount = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso QuickQuoteState = TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState) OrElse helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType) = True Then
                'updated 12/23/2018
                'If quoteStateCount > 1 OrElse (quoteStateCount = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso QuickQuoteState = TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState) OrElse helper.OkayToUseMultiStateQuoteFormatForLob(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True) = True Then
                'updated 2/8/2023 for newCo
                If quoteStateCount > 1 OrElse (quoteStateCount = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count = 1 AndAlso TopLevelQuoteInfo.MultiStateQuotes(0) IsNot Nothing AndAlso QuickQuoteState = TopLevelQuoteInfo.MultiStateQuotes(0).QuickQuoteState) OrElse helper.OkayToUseMultiStateQuoteFormatForLob_WithCompanyParam(LobType, effDate:=EffectiveDate, transType:=TopLevelQuoteInfo.QuoteTransactionType, qqState:=QuickQuoteState, dateToUseWithMissingEffectiveDate:=helper.DefaultDateToUseWithMissingEffectiveDate(), considerAnyValidNonIndianaStateAsMultiStateWhenNonDateParamsPass:=True, qqCompany:=Company, considerAnyValidNonIfmCompanyAsMultiStateWhenNonDateParamsPass:=True) = True Then
                    'added 8/27/2018 - need to make sure single-state quotes in multi-state format have a separate storage spot for the versionIds as they will be different between Master level and state level; may not make sense here since retrieving Quote for State will not automatically add it to MultiStateQuotes list unless there are multiple; may need extra Property to hold onto SingleState versionIds
                    'note: all is well... will get or verify state-level versionId(s) at applicable spots (WriteLobNode for normal Save or CompRater; QuoteObjectToDiamondImageConversion_LOB_and_PackageParts for DiamondServices)
                    'Dim multiStateQuoteCount As Integer = 0
                    'If MultiStateQuotes IsNot Nothing AndAlso MultiStateQuotes.Count > 0 Then
                    '    multiStateQuoteCount = MultiStateQuotes.Count
                    'End If
                    'If multiStateQuoteCount < quoteStateCount Then

                    'End If

                    'TopLevelQuoteInfo.Set_NeedsMultiStateFormat(True)
                    'TopLevelQuoteInfo.Set_LobIdToUse(helper.MasterLobIdForLobType(LobType))
                    'If qqHelper.IsPositiveIntegerString(TopLevelQuoteInfo.LobIdToUse) = True AndAlso helper.isTextMatch(TopLevelQuoteInfo.LobIdToUse, LobId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                    '    Dim lobTypeToUse As QuickQuoteLobType = QuickQuoteLobType.None 'won't be used for anything; only for method call
                    '    Dim versionIdToUse As String = ""
                    '    helper.SetLobTypeAndDiamondVersionIdFromLobIdAndStateId(TopLevelQuoteInfo.LobIdToUse, StateId, lobTypeToUse, versionIdToUse)
                    '    If qqHelper.IsPositiveIntegerString(versionIdToUse) = True AndAlso helper.isTextMatch(versionIdToUse, VersionId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                    '        VersionAndLobInfo.Set_VersionId_Variable(versionIdToUse) 'this won't go through logic to update other variables like normal Property Setter (i.e. stateId, lobId, lobType)
                    '    End If
                    'End If
                    'updated 9/7/2018 to use new method
                    ForceMultiStateFormat()
                End If
            End If

        End Sub
        'added 9/7/2018; logic taken from CheckForMultiStateAndVerifyVersionIds so it could be called from other spots
        Protected Friend Sub ForceMultiStateFormat()
            TopLevelQuoteInfo.Set_NeedsMultiStateFormat(True)
            TopLevelQuoteInfo.Set_LobIdToUse(helper.MasterLobIdForLobType(LobType))
            If qqHelper.IsPositiveIntegerString(TopLevelQuoteInfo.LobIdToUse) = True AndAlso helper.isTextMatch(TopLevelQuoteInfo.LobIdToUse, LobId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False AndAlso helper.isTextMatch(TopLevelQuoteInfo.LobIdToUse, VersionAndLobInfo.ActualLobId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                Dim lobTypeToUse As QuickQuoteLobType = QuickQuoteLobType.None 'won't be used for anything; only for method call
                Dim versionIdToUse As String = ""
                'helper.SetLobTypeAndDiamondVersionIdFromLobIdAndStateId(TopLevelQuoteInfo.LobIdToUse, StateId, lobTypeToUse, versionIdToUse)
                'updated 11/27/2022
                helper.SetLobTypeAndDiamondVersionIdFromLobIdStateIdAndCompanyId(TopLevelQuoteInfo.LobIdToUse, StateId, CompanyId, lobTypeToUse, versionIdToUse)
                If qqHelper.IsPositiveIntegerString(versionIdToUse) = True AndAlso helper.isTextMatch(versionIdToUse, VersionId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                    VersionAndLobInfo.Set_VersionId_Variable(versionIdToUse) 'this won't go through logic to update other variables like normal Property Setter (i.e. stateId, lobId, lobType)
                End If
            End If
        End Sub

        ''' <summary>
        ''' used to parse thru coverages and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruCoverages() 'added 4/8/2015
            ParseThruCoverages(VersionAndLobInfo.Coverages) 'updated 7/18/2018 from _PolicyCoverages; could have used QuickQuoteObject's PolicyCoverages property, but we shouldn't need to go through Parent logic
        End Sub
        'Public Sub ParseThruCoverages()
        'changed to Private 7/18/2013
        ''' <summary>
        ''' used to parse thru coverages and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        ''' 'Private Sub ParseThruCoverages()
        ''' 'Private Sub ParseThruCoverages(ByVal covs As List(Of QuickQuoteCoverage), Optional ByVal packagePartType As QuickQuotePackagePartType = QuickQuotePackagePartType.None) 'added new params 4/8/2015 for CPP
        Private Sub ParseThruCoverages(ByVal covs As List(Of QuickQuoteCoverage), Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            Dim usingInstallationBlanketCov As Boolean = False 'added 1/29/2015 for CIM
            'If _PolicyCoverages IsNot Nothing AndAlso _PolicyCoverages.Count > 0 Then
            'updated 4/8/2015 to use param
            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                'For Each cov As QuickQuoteCoverage In _PolicyCoverages
                'updated 4/8/2015 to use param
                For Each cov As QuickQuoteCoverage In covs
                    cov.ParseThruAdditionalInterests() 'added 1/27/2015; used w/ CIM and SmallTools
                    Select Case cov.CoverageCodeId
                        Case "70017", "80154" 'Combo; values for BOP, GL; 3/20/2013 note: Farm_L_Liability (BOP), General Liability Occurrence (GL); 4/8/2015 note: looks like Farm_L_Liability is the xmlnodename value from CoverageCode table for coveragecode_id 70017... 70017: Occurrence Liability (BOP); 80154: General Liability Occurrence (GL); 4/28/2015 note: FAR also uses 70017... latest example has CoverageLimitId 10 (100,000)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                OccurrenceLiabilityLimitId = cov.CoverageLimitId
                                OccurrencyLiabilityQuotedPremium = cov.FullTermPremium
                            End If
                            'Case "70017" 'Combo: Occurrence Liability; added for Farm 3/2/2015
                        Case "80144" 'Combo; 3/20/2013 note: Tenants Fire Liability
                            TenantsFireLiabilityId = cov.CoverageLimitId
                            TenantsFireLiabilityQuotedPremium = cov.FullTermPremium
                        Case "80146" 'Combo; 3/20/2013 note: Liability PD Deductible
                            PropertyDamageLiabilityDeductibleId = cov.CoverageLimitId
                        Case "80557" 'added 2020/07/02 - For Ohio - DJG
                            StopGapPayroll = cov.Payroll
                            StopGapLimitId = cov.CoverageLimitId
                            StopGapQuotedPremium = qqHelper.getSum(StopGapQuotedPremium, cov.FullTermPremium)
                        Case "80560" 'added 2020/09/28 - for CAP OHIO - DJG
                            Select Case cov.CoverageLimitId
                                Case "26"
                                    LegalEntityType = TriState.True
                                Case "40"
                                    LegalEntityType = TriState.False
                                Case Else
                                    LegalEntityType = TriState.UseDefault
                            End Select
                            LegalEntityTypeQuotedPremium = cov.FullTermPremium
                        Case "286", "80094" 'Checkbox; 3/20/2013 note: Coverage Enhancement Endorsement; updated 8/12/2013 for PPA (80094 - CheckBox: Enhancement Endorsement); 6/20/2017 note: 286 - CGL/CAP/BOP/CPR, 80094 - PPA/FAR
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability OrElse packagePartType = QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                'If packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'IF and ELSEIF added 4/8/2015; original logic in ELSE
                                If packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    Has_PackageGL_EnhancementEndorsement = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                                    PackageGL_EnhancementEndorsementQuotedPremium = cov.FullTermPremium
                                    'ElseIf packagePartType = QuickQuotePackagePartType.CommercialProperty Then
                                ElseIf packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    Has_PackageCPR_EnhancementEndorsement = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                                    PackageCPR_EnhancementEndorsementQuotedPremium = cov.FullTermPremium
                                Else
                                    HasBusinessMasterEnhancement = cov.Checkbox 'updated 7/17/2018 from _HasBusinessMasterEnhancement
                                    BusinessMasterEnhancementQuotedPremium = cov.FullTermPremium
                                End If
                            End If
                            'Case "21021" 'Checkbox (*per specs, might need combination of 21053, 21054, 21055)
                            'updated w/ other types 7/16/2012; 11/13/2012 - added 926 - Additional Insured Controlling Interest for GL (same as BOP's 501 - Controlling Interest)
                            'Case "926", "21018", "501", "21022", "21019", "21023", "21020", "21053", "21054", "21055", "21024", "21025", "21026", "21016", "21017", "21021"
                            '3/9/2017 - BOP stuff
                            'Case "926", "21018", "501", "21022", "21019", "21023", "21020", "21053", "21054", "21055", "21024", "21025", "21026", "21016", "21017", "21021", "80369", "80370", "80371", "21081", "80367", "80368"
                            'updated 8/22/2018 for multi-state; 80537 for IL; only CGL right now
                        Case "926", "21018", "501", "21022", "21019", "21023", "21020", "21053", "21054", "21055", "21024", "21025", "21026", "21016", "21017", "21021", "80369", "80370", "80371", "21081", "80367", "80368", "80537"
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                '3/20/2013 note: coverage descriptions shown in QuickQuoteAdditionalInsured class
                                'AdditionalInsuredsCount += 1
                                'AdditionalInsuredsQuotedPremium = qqHelper.getSum(_AdditionalInsuredsQuotedPremium, cov.FullTermPremium)
                                'If cov.ManuallyRated = True Then
                                '    AdditionalInsuredsManualCharge = cov.ManualPremium
                                'End If
                                ''added 7/16/2012
                                'AddAdditionalInsuredFromCoverage(cov)
                                '3/9/2017 - BOP stuff
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.doUseNewBOPVersion(EffectiveDate) AndAlso (cov.CoverageCodeId = "21019" OrElse cov.CoverageCodeId = "21017" OrElse cov.CoverageCodeId = "80369" OrElse cov.CoverageCodeId = "80370" OrElse cov.CoverageCodeId = "80371" OrElse cov.CoverageCodeId = "21025" OrElse cov.CoverageCodeId = "21081" OrElse cov.CoverageCodeId = "80367") Then
                                    If cov.CoverageCodeId = "80367" Then
                                        AdditionalInsuredsQuotedPremium = cov.FullTermPremium
                                    Else
                                        Dim myAI As New QuickQuoteAdditionalInsured
                                        myAI.DesignationOfPremises = cov.AddressInformation
                                        myAI.HasWaiverOfSubrogation = cov.HasWaiverOfSubrogation
                                        myAI.NameOfPersonOrOrganization = cov.NameInformation
                                        myAI.Description = cov.Description
                                        myAI.CoverageCodeId = cov.CoverageCodeId
                                        myAI.ProductDescription = cov.ProductDescription
                                        myAI.FullTermPremium = cov.FullTermPremium
                                        If cov.ManuallyRated = True AndAlso Not String.IsNullOrWhiteSpace(cov.ManualPremium) Then
                                            myAI.ManualPremiumAmount = cov.ManualPremium
                                        End If
                                        If AdditionalInsuredsCheckboxBOP Is Nothing Then 'updated 7/17/2018 from _AdditionalInsuredsCheckboxBOP
                                            AdditionalInsuredsCheckboxBOP = New List(Of QuickQuoteAdditionalInsured)
                                        End If
                                        AdditionalInsuredsCheckboxBOP.Add(myAI) 'updated 7/17/2018 from _AdditionalInsuredsCheckboxBOP
                                        HasAdditionalInsuredsCheckboxBOP = True 'updated 7/17/2018 from _HasAdditionalInsuredsCheckboxBOP
                                    End If
                                Else
                                    'AdditionalInsuredsCount += 1
                                    'updated 6/5/2017 to just use private variable
                                    '_AdditionalInsuredsCount += 1
                                    'updated 7/17/2018
                                    VersionAndLobInfo.Set_AdditionalInsuredsCount_Variable(VersionAndLobInfo.Get_AdditionalInsuredsCount_Variable() + 1)
                                    'AdditionalInsuredsQuotedPremium = qqHelper.getSum(_AdditionalInsuredsQuotedPremium, cov.FullTermPremium)
                                    'updated 7/17/2018; may need property on VersionAndLobInfo object that returns unformatted value
                                    AdditionalInsuredsQuotedPremium = qqHelper.getSum(AdditionalInsuredsQuotedPremium, cov.FullTermPremium)
                                    If cov.ManuallyRated = True Then
                                        'AdditionalInsuredsManualCharge = cov.ManualPremium
                                        'updated 5/27/2017 so it is correct in the case that multiple items are returned; nevermind... this wouldn't be accurate since it should only be for 1 item, and the amount should always be the same for all; 6/5/2017 note: was correct the 1st time... this will be used... un-commented
                                        'AdditionalInsuredsManualCharge = qqHelper.getSum(_AdditionalInsuredsManualCharge, cov.ManualPremium)
                                        'updated 6/5/2017 to just use private variable
                                        '_AdditionalInsuredsManualCharge = qqHelper.getSum(_AdditionalInsuredsManualCharge, cov.ManualPremium)
                                        'updated 7/17/2018
                                        VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable(qqHelper.getSum(VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable(), cov.ManualPremium))
                                        'updated 6/6/2017 to reset to empty string if zero
                                        'If qqHelper.IsZeroAmount(_AdditionalInsuredsManualCharge) = True Then
                                        '    _AdditionalInsuredsManualCharge = ""
                                        'End If
                                        'updated 7/17/2018
                                        If qqHelper.IsZeroAmount(VersionAndLobInfo.Get_AdditionalInsuredsManualCharge_Variable()) = True Then
                                            VersionAndLobInfo.Set_AdditionalInsuredsManualCharge_Variable("")
                                        End If
                                    End If
                                    'added 7/16/2012
                                    AddAdditionalInsuredFromCoverage(cov)
                                End If
                            End If
                            'None = 0
                            'AdditionalInsuredControllingInterest = 926 'added 11/13/2012 for GL (equivalent to BOP's 501 - Controlling Interest)
                            'CoOwnerOfInsuredPremises = 21018
                            'ControllingInterest = 501
                            'DesignatedPersonOrOrganization = 21022
                            'EngineersArchitectsOrSurveyors = 21019
                            'EngineersArchitectsOrSurveyorsNotEngagedByTheNamedInsured = 21023
                            'LessorOfLeasedEquipment = 21020
                            'ManagersOrLessorsOfPremises = 21053
                            'MortgageeAssigneeOrReceiver = 21054
                            'OwnerOrOtherInterestsFromWhomLandHasBeenLeased = 21055
                            'OwnersLesseesOrContractors = 21024
                            'OwnersLesseesOrContractorsWithAdditionalInsuredRequirementInConstructionContract = 21025
                            'StateOrPoliticalSubdivisionsPermits = 21026
                            'StateOrPoliticalSubdivisionsPermitsRelatingToPremises = 21016
                            'TownhouseAssociations = 21017
                            'Vendors = 21021

                        Case "185" 'Combo; 3/20/2013 note: Employee Benefits Liability
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015; may not be needed here
                                EmployeeBenefitsLiabilityText = cov.NumberOfEmployees 'updated 7/17/2018 from _EmployeeBenefitsLiabilityText
                                '-removed appending text 8/6/2012
                                'If _EmployeeBenefitsLiabilityText <> "" AndAlso IsNumeric(_EmployeeBenefitsLiabilityText) = True AndAlso UCase(_EmployeeBenefitsLiabilityText).Contains("EMPLOYEE") = False Then
                                '    _EmployeeBenefitsLiabilityText &= " Employees"
                                'End Ifu
                                EmployeeBenefitsLiabilityOccurrenceLimitId = cov.CoverageLimitId 'added 7/12/2012 for GL
                                EmployeeBenefitsLiabilityQuotedPremium = cov.FullTermPremium
                                EmployeeBenefitsLiabilityRetroactiveDate = cov.RetroactiveDate 'added 8/29/2012
                                'added 12/3/2012 for GL
                                EmployeeBenefitsLiabilityAggregateLimit = cov.AggregateLimit
                                EmployeeBenefitsLiabilityDeductible = cov.Deductible
                            End If
                        Case "21004" 'Combo; 3/20/2013 note: Contractors Installation Coverage
                            'ContractorsEquipmentInstallationLimit = cov.ManualLimitAmount'changed 6/18/2012
                            ContractorsEquipmentInstallationLimitId = cov.CoverageLimitId
                            ContractorsEquipmentInstallationLimitQuotedPremium = cov.FullTermPremium
                        Case "21007" 'Edit; 3/20/2013 note: Contractors Equipment: Tools & Equipment Blanket
                            ContractorsToolsEquipmentBlanket = cov.ManualLimitAmount
                            ContractorsToolsEquipmentBlanketSubLimitId = cov.RiskTypeId '3/9/2017 - BOP stuff
                            ContractorsToolsEquipmentBlanketQuotedPremium = cov.FullTermPremium
                        Case "21008" 'Edit; 3/20/2013 note: Contractors Equipment: Tools & Equipment Scheduled
                            'ContractorsToolsEquipmentScheduled = cov.ManualLimitAmount
                            'ContractorsToolsEquipmentScheduledQuotedPremium = cov.FullTermPremium
                            'updated 7/19/2012 for App Gap
                            'ContractorsToolsEquipmentScheduled = qqHelper.getSum(_ContractorsToolsEquipmentScheduled, cov.ManualLimitAmount)
                            'updated 6/6/2017 to just use private variable; will maintain formatting
                            '_ContractorsToolsEquipmentScheduled = qqHelper.getSum(_ContractorsToolsEquipmentScheduled, cov.ManualLimitAmount)
                            'qqHelper.ConvertToLimitFormat(_ContractorsToolsEquipmentScheduled)
                            'ContractorsToolsEquipmentScheduledQuotedPremium = qqHelper.getSum(_ContractorsToolsEquipmentScheduledQuotedPremium, cov.FullTermPremium)
                            'updated 7/17/2018; may need property on VersionAndLobInfo object that returns unformatted value for ContractorsToolsEquipmentScheduledQuotedPremium
                            VersionAndLobInfo.Set_ContractorsToolsEquipmentScheduled_Variable(qqHelper.getSum(VersionAndLobInfo.Get_ContractorsToolsEquipmentScheduled_Variable(), cov.ManualLimitAmount), convertToLimitFormat:=True)
                            ContractorsToolsEquipmentScheduledQuotedPremium = qqHelper.getSum(ContractorsToolsEquipmentScheduledQuotedPremium, cov.FullTermPremium)
                            'added 7/19/2012 for App Gap
                            AddContractorsEquipmentScheduledItemFromCov(cov)
                            'Case "21421", "21005" '*not in spreadsheet; maybe use 21005 - Edit (currently writing 21005); 3/20/2013 note: Contractor's Equipment - Equipment Leased / Rented From Others (not for current VR comm lines), Contractors Equipment: Non-Owned Tools & Equipment (BOP); 4/1/2015 note: also for IM (21421)... coded below (will need to move code here)
                        Case "21005" 'updated 4/1/2015 to only use 21005 up here; 21421 listed below for CIM
                            ContractorsToolsEquipmentRented = cov.ManualLimitAmount
                            ContractorsToolsEquipmentRentedQuotedPremium = cov.FullTermPremium
                            'Case "80225", "21006" '*80225 not in spreadsheet; 21006 - Edit (currently writing 21006); 3/20/2013 note: Contractors Equipment - Employee Tools (not for current VR comm lines), Contractors Equipment: Employees Tools (BOP); 1/20/2015 note: may use 80225 (Contractors Equipment - Employee Tools) for CIM
                        Case "21006" 'updated 4/1/2015 to only use 21006 up here; 80225 listed below for CIM
                            ContractorsEmployeeTools = cov.ManualLimitAmount
                            ContractorsEmployeeToolsQuotedPremium = cov.FullTermPremium
                        Case "21009" 'Combo; 3/20/2013 note: Employee Dishonesty; 11/9/2018 note: BOP IN/IL
                            CrimeEmpDisEmployeeText = cov.NumberOfEmployees 'updated 7/17/2018 from _CrimeEmpDisEmployeeText
                            '-removed appending text 8/6/2012
                            'If _CrimeEmpDisEmployeeText <> "" AndAlso IsNumeric(_CrimeEmpDisEmployeeText) = True AndAlso UCase(_CrimeEmpDisEmployeeText).Contains("EMPLOYEE") = False Then
                            '    _CrimeEmpDisEmployeeText &= " Employees"
                            'End If
                            CrimeEmpDisLocationText = cov.NumberOfLocations 'updated 7/17/2018 from _CrimeEmpDisLocationText
                            '-removed appending text 8/6/2012
                            'If _CrimeEmpDisLocationText <> "" AndAlso IsNumeric(_CrimeEmpDisLocationText) = True AndAlso UCase(_CrimeEmpDisLocationText).Contains("LOCATION") = False Then
                            '    _CrimeEmpDisLocationText &= " Locations"
                            'End If
                            CrimeEmpDisLimitId = cov.CoverageLimitId
                            CrimeEmpDisQuotedPremium = cov.FullTermPremium
                        Case "21010" 'Combo; 3/20/2013 note: Forgery and Alteration; 11/9/2018 note: BOP IN/IL, CRM IN/IL
                            CrimeForgeryLimitId = cov.CoverageLimitId
                            CrimeForgeryQuotedPremium = cov.FullTermPremium
                            ForgeryAlterationLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                            ForgeryAlterationDeductibleId = cov.DeductibleId 'static data
                            ForgeryAlterationNumberOfRatableEmployees = cov.NumberOfRatableEmployees 'CoverageDetail
                            ForgeryAlterationAdditionalPremises = cov.NumberOfAdditionalPremises 'CoverageDetail
                            ForgeryAlterationQuotedPremium = cov.FullTermPremium
                        Case "309" 'Checkbox; 3/20/2013 note: Earthquake
                            HasEarthquake = cov.Checkbox 'updated 7/17/2018 from _HasEarthquake
                            EarthquakeQuotedPremium = cov.FullTermPremium
                        Case "21029" 'Combo; 10/18/2012:  GL = CheckBox/Edit; 3/20/2013 note: Hired Auto
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                '_HasHiredAuto = cov.Checkbox
                                HasHiredAuto = True 'changed to not use Checkbox 6/27/2012; updated 7/17/2018 from _HasHiredAuto
                                HiredAutoQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21030" 'Combo; 10/18/2012:  GL = CheckBox/Edit; 3/20/2013 note: Non-Owned Auto
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                '_HasNonOwnedAuto = cov.Checkbox
                                HasNonOwnedAuto = True 'changed to not use Checkbox 6/27/2012; updated 7/17/2018 from _HasNonOwnedAuto
                                If qqHelper.IntegerForString(cov.RiskTypeId) = 17 Then '3/9/2017 - BOP stuff
                                    NonOwnedAutoWithDelivery = True 'updated 7/17/2018 from _NonOwnedAutoWithDelivery
                                Else
                                    NonOwnedAutoWithDelivery = False '18 would technically be false; updated 7/17/2018 from _NonOwnedAutoWithDelivery
                                End If
                                NonOwnedAutoQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80145" 'Combo; 3/20/2013 note: Property Deductible; 11/2/2017 note: BOP only
                            PropertyDeductibleId = cov.CoverageLimitId'updated 7/18/2018 from private variable to public property
                        Case "21085" 'Checkbox (*obtained from specs - not currently sending this coveragecode_id since BlanketRating stuff has its own nodes); 3/20/2013 note: Blanket Business Income
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                If cov.Checkbox = True Then
                                    BlanketRatingQuotedPremium = cov.FullTermPremium
                                End If
                                HasBlanketBusinessIncome = cov.Checkbox 'added 3/26/2013 for CPR (coveragecode_id is also below w/ CPR blanket coverages; this one was originally for BOP); updated 7/21/2018 from private variable to public property
                                BlanketBusinessIncomeQuotedPremium = cov.FullTermPremium
                                BlanketBusinessIncomeCauseOfLossTypeId = cov.CauseOfLossTypeId
                                'added more blanket stuff 4/16/2013; 5/7/2013 - copied to here from Case below for same coveragecode_id
                                BlanketBusinessIncomeLimit = cov.ManualLimitAmount
                                BlanketBusinessIncomeCoinsuranceTypeId = cov.CoinsuranceTypeId
                                BlanketBusinessIncomeValuationId = cov.ValuationMethodTypeId
                                BlanketBusinessIncomeIsAgreedValue = cov.IsAgreedValue 'added 5/3/2018; updated 7/21/2018 from private variable to public property
                            End If
                        Case "21032" 'Checkbox-Professional Liability: Barbers (*entered at building but sent/returned at policy level); 12/10/2018 note: BOP only (IN/IL)
                            HasBarbersProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            BarbersProfessionalLiabiltyQuotedPremium = cov.FullTermPremium
                            '*the Classification node has child-nodes for NumberOfFullTimeEmployees and NumberOfPartTimeEmployees; CoverageDetail has NumberOfParttimeEmployees (watch casing) but not FullTime
                            '_BarbersProfessionalLiabilityFullTimeEmpNum = cov.NumberOfFullTimeEmployees
                            BarbersProfessionalLiabilityFullTimeEmpNum = cov.NumberOfEmployees 'same as full time; updated 7/19/2018 from private variable to public property
                            BarbersProfessionalLiabilityPartTimeEmpNum = cov.NumberOfPartTimeEmployees 'updated 7/19/2018 from private variable to public property
                            BarbersProfessionalLiabilityDescription = cov.DescriptionInformation'3/9/2017 - BOP stuff; updated 7/19/2018 from private variable to public property
                        Case "21033" 'Checkbox-Professional Liability: Beauticians (*entered at building but sent/returned at policy level); 12/10/2018 note: BOP only (IN/IL)
                            HasBeauticiansProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            BeauticiansProfessionalLiabilityQuotedPremium = cov.FullTermPremium
                            '*the Classification node has child-nodes for NumberOfFullTimeEmployees and NumberOfPartTimeEmployees
                            BeauticiansProfessionalLiabilityFullTimeEmpNum = cov.NumberOfEmployees 'updated 7/19/2018 from private variable to public property
                            BeauticiansProfessionalLiabilityPartTimeEmpNum = cov.NumberOfPartTimeEmployees 'updated 7/19/2018 from private variable to public property
                            BeauticiansProfessionalLiabilityDescription = cov.DescriptionInformation'3/9/2017 - BOP stuff; updated 7/19/2018 from private variable to public property
                        Case "21034" 'Checkbox-Professional Liability: Funeral Directors (*entered at building but sent/returned at policy level); 12/10/2018 note: BOP/CGL only (IN/IL)
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                HasFuneralDirectorsProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                                FuneralDirectorsProfessionalLiabilityQuotedPremium = cov.FullTermPremium
                                FuneralDirectorsProfessionalLiabilityEmpNum = cov.NumberOfEmployees 'updated 7/19/2018 from private variable to public property
                                'added for GL 7/13/2012
                                ProfessionalLiabilityFuneralDirectorsNumberOfBodies = cov.NumberOfBodies 'updated 7/21/2018 from private variable to public property
                            End If
                        Case "21036" 'Checkbox-Professional Liability: Printers Errors and Omissions (*entered at building but sent/returned at policy level); 12/10/2018 note: BOP only (IN/IL)
                            HasPrintersProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            PrintersProfessionalLiabilityQuotedPremium = cov.FullTermPremium
                            PrintersProfessionalLiabilityLocNum = cov.NumberOfLocations'updated 7/19/2018 from private variable to public property
                        Case "21058" 'Edit-Self Storage Facilities (*entered at building but sent/returned at policy level); doesn't appear to be working; 12/10/2018 note: BOP only (IN/IL)
                            HasSelfStorageFacility = True '*might also need to check Checkbox; updated 7/19/2018 from private variable to public property
                            SelfStorageFacilityQuotedPremium = cov.FullTermPremium
                            '_SelfStorageFacilityLocNum = cov.NumberOfLocations'removed 7/3/2012 since not available from UI
                            SelfStorageFacilityLimit = cov.ManualLimitAmount 'added 7/3/2012 since QuoteSummary requirements didn't have it
                        Case "164" 'Checkbox 'added 7/3/2012 (wasn't on QuoteSummary requirements); 3/20/2013 note: Professional Liability: Veterinarians; 12/10/2018 note: BOP only (IN/IL)
                            HasVeterinariansProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            VeterinariansProfessionalLiabilityQuotedPremium = cov.FullTermPremium
                            VeterinariansProfessionalLiabilityEmpNum = cov.NumberOfEmployees'updated 7/19/2018 from private variable to public property

                            '3/9/2017 - BOP stuff
                        Case "80373" 'CheckBox: Professional Liability: Pharmacists; 12/10/2018 note: BOP only (IN/IL)
                            HasPharmacistProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            PharmacistAnnualGrossSales = cov.Receipts
                            PharmacistQuotedPremium = cov.FullTermPremium
                        Case "80375" 'CheckBox: Apartments; 12/10/2018 note: BOP only (IN/IL)
                            HasApartmentBuildings = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                            NumberOfLocationsWithApartments = cov.NumberOfLocations 'updated 7/21/2018 from private variable to public property
                            ApartmentQuotedPremium = cov.FullTermPremium
                        Case "80381" 'CheckBox: Restaurant Endorsement; 12/10/2018 note: BOP only (IN/IL)
                            HasRestaurantEndorsement = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                            RestaurantQuotedPremium = cov.FullTermPremium
                        Case "80376" 'CheckBox: Motels; 12/10/2018 note: BOP only (IN/IL)
                            HasMotelCoverage = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                            MotelCoveragePerGuestLimitId = cov.CoverageLimitId
                            MotelCoveragePerGuestQuotedPremium = cov.FullTermPremium
                        Case "80377" 'Combo: Liability for Guests Property; 12/10/2018 note: BOP only (IN/IL)
                            MotelCoverageSafeDepositDeductibleId = cov.DeductibleId
                            MotelCoverageSafeDepositLimitId = cov.CoverageLimitId
                            MotelCoverageSafeDepositQuotedPremium = cov.FullTermPremium
                        Case "80378" 'CheckBox: Photography Makeup & Hairstyling; 12/10/2018 note: BOP only (IN/IL)
                            If cov.Checkbox = True Then
                                HasPhotographyCoverage = True 'updated 7/19/2018 from private variable to public property
                                HasPhotographyMakeupAndHair = True 'updated 7/19/2018 from private variable to public property
                                PhotographyMakeupAndHairQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80398" 'CheckBox: Photography; 12/10/2018 note: BOP only (IN/IL)
                            If cov.Checkbox = True Then
                                HasPhotographyCoverage = True 'updated 7/19/2018 from private variable to public property
                                PhotographyCoverageQuotedPremium = cov.FullTermPremium
                                If Not String.IsNullOrWhiteSpace(cov.ManualLimitAmount) AndAlso cov.ManualLimitAmount > 0 Then
                                    HasPhotographyCoverageScheduledCoverages = True 'updated 7/19/2018 from private variable to public property
                                End If
                            End If
                        Case "80380" 'CheckBox: Residential Cleaning Services; 12/10/2018 note: BOP only (IN/IL)
                            If cov.Checkbox = True Then
                                HasResidentialCleaning = True 'updated 7/19/2018 from private variable to public property
                                ResidentialCleaningQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21035" 'Checkbox'added 7/3/2012 (wasn't on QuoteSummary requirements); 3/20/2013 note: Professional Liability: Optical and Hearing Aid Establishments; 12/10/2018 note: BOP/CGL only (IN/IL)
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here; originally coded for BOP but is also valid cov for CGL
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                HasOpticalAndHearingAidProfessionalLiability = cov.Checkbox 'updated 7/19/2018 from private variable to public property
                                OpticalAndHearingAidProfessionalLiabilityQuotedPremium = cov.FullTermPremium
                                OpticalAndHearingAidProfessionalLiabilityEmpNum = cov.NumberOfEmployees 'updated 7/19/2018 from private variable to public property
                            End If

                            'started adding WC coverages 7/9/2012
                        Case "10054" 'Combo; 3/20/2013 note: Employer's Liability
                            EmployersLiabilityId = cov.CoverageLimitId
                            EmployersLiabilityQuotedPremium = cov.FullTermPremium 'added 8/14/2012
                            'added for GL 7/12/2012
                        Case "80155" 'Combo; 3/20/2013 note: General Liability General Aggregate
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                GeneralAggregateLimitId = cov.CoverageLimitId
                                GeneralAggregateQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80156" 'Combo; 3/20/2013 note: General Liability Products/Completed Operations Aggregate
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                ProductsCompletedOperationsAggregateLimitId = cov.CoverageLimitId
                                ProductsCompletedOperationsAggregateQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80169" 'Combo; 3/20/2013 note: Business Owners Liability Personal/Advertising Injury
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                PersonalAndAdvertisingInjuryLimitId = cov.CoverageLimitId
                                PersonalAndAdvertisingInjuryQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80178" 'Combo; 3/20/2013 note: General Liability Damage To Premises Rented
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                DamageToPremisesRentedLimitId = cov.CoverageLimitId
                                DamageToPremisesRentedQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80170" 'Combo; 3/20/2013 note: Business Owners Liability Medical Expense
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                MedicalExpensesLimitId = cov.CoverageLimitId
                                MedicalExpensesQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21134" 'Combo (added for GL 7/13/2012); 3/20/2013 note: Liquor Liability; 12/10/2018 note: BOP/CGL only (IN/IL)
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                '3/9/2017 - BOP stuff
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.doUseNewBOPVersion(EffectiveDate) Then
                                    If qqHelper.IsNumericString(cov.LiquorLiabilityClassCodeTypeId) AndAlso CInt(cov.LiquorLiabilityClassCodeTypeId) > 0 AndAlso (Not String.IsNullOrWhiteSpace(cov.Receipts) OrElse Not String.IsNullOrWhiteSpace(cov.PriorGrossReceipts)) Then
                                        LiquorLiabilityClassCodeTypeId = cov.LiquorLiabilityClassCodeTypeId 'updated 7/19/2018 from private variable to public property
                                        Select Case LiquorLiabilityClassCodeTypeId'updated 7/19/2018 from private variable to public property
                                            Case "12"
                                                If qqHelper.IsNumericString(cov.Receipts) AndAlso CInt(cov.Receipts) > 0 Then
                                                    HasLiquorLiability = True 'updated 7/19/2018 from private variable to public property
                                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = cov.Receipts
                                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
                                                End If
                                            Case "13"
                                                If qqHelper.IsNumericString(cov.PriorGrossReceipts) AndAlso CInt(cov.PriorGrossReceipts) > 0 Then
                                                    HasLiquorLiability = True 'updated 7/19/2018 from private variable to public property
                                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = cov.PriorGrossReceipts
                                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
                                                End If
                                        End Select
                                        '_LiquorLiabilityAggregateLimit = cov.AggregateLimit
                                    End If
                                End If

                                LiquorLiabilityOccurrenceLimitId = cov.CoverageLimitId
                                LiquorLiabilityQuotedPremium = cov.FullTermPremium 'added 8/27/2012 for GL
                                'added 7/18/2012 after confirmation from IS
                                'updated 10/9/2012 to check for number greater than 0
                                If cov.SalesClubs <> "" AndAlso IsNumeric(cov.SalesClubs) = True AndAlso CDec(cov.SalesClubs) > 0 Then
                                    LiquorLiabilityClassificationId = "70412"
                                    LiquorClubsSales = cov.SalesClubs
                                    LiquorSales = cov.SalesClubs 'updated 7/21/2018 from private variable to public property
                                End If

                                If cov.SalesManufacturers <> "" AndAlso IsNumeric(cov.SalesManufacturers) = True AndAlso CDec(cov.SalesManufacturers) > 0 Then
                                    LiquorLiabilityClassificationId = "50911"
                                    LiquorManufacturersSales = cov.SalesManufacturers
                                    LiquorSales = cov.SalesManufacturers 'updated 7/21/2018 from private variable to public property
                                End If

                                If cov.SalesPackageStores <> "" AndAlso IsNumeric(cov.SalesPackageStores) = True AndAlso CDec(cov.SalesPackageStores) > 0 Then
                                    LiquorLiabilityClassificationId = "59211"
                                    LiquorPackageStoresSales = cov.SalesPackageStores
                                    LiquorSales = cov.SalesPackageStores 'updated 7/21/2018 from private variable to public property
                                End If

                                If cov.SalesRestaurants <> "" AndAlso IsNumeric(cov.SalesRestaurants) = True AndAlso CDec(cov.SalesRestaurants) > 0 Then
                                    LiquorLiabilityClassificationId = "58161"
                                    LiquorRestaurantsSales = cov.SalesRestaurants
                                    LiquorSales = cov.SalesRestaurants 'updated 7/21/2018 from private variable to public property
                                End If

                                If LiquorSales = "" Then 'added 10/9/2012 (probably no amount entered; try to get classification)
                                    If cov.CoverageAdditionalInfoRecords IsNot Nothing AndAlso cov.CoverageAdditionalInfoRecords.Count > 0 Then
                                        For Each add As QuickQuoteCoverageAdditionalInfoRecord In cov.CoverageAdditionalInfoRecords
                                            If add.Description.Contains("70412") = True Then
                                                LiquorLiabilityClassificationId = "70412"
                                                Exit For
                                            ElseIf add.Description.Contains("50911") = True Then
                                                LiquorLiabilityClassificationId = "50911"
                                                Exit For
                                            ElseIf add.Description.Contains("59211") = True Then
                                                LiquorLiabilityClassificationId = "59211"
                                                Exit For
                                            ElseIf add.Description.Contains("58161") = True Then
                                                LiquorLiabilityClassificationId = "58161"
                                                Exit For
                                            End If
                                        Next
                                    End If
                                End If
                            End If
                            'added for GL 7/13/2012
                        Case "21131" 'Checkbox; 3/20/2013 note: Professional Liability: Cemetery; 12/10/2018 note: CGL only (IN/IL)
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                ProfessionalLiabilityCemetaryNumberOfBurials = cov.NumberOfBurials 'updated 7/21/2018 from private variable to public property
                                ProfessionalLiabilityCemetaryQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21132" 'Checkbox; 3/20/2013 note: Professional Liability: Pastoral; 12/10/2018 note: CGL only (IN/IL)
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                ProfessionalLiabilityPastoralNumberOfClergy = cov.NumberOfPastoralCounselors 'updated 7/21/2018 from private variable to public property
                                ProfessionalLiabilityPastoralQuotedPremium = cov.FullTermPremium
                            End If

                        Case "10124" 'Checkbox: Workers Compensation; added 8/14/2012 for QuoteSummary dec section
                            If cov.CoverageAdditionalInfoRecords IsNot Nothing AndAlso cov.CoverageAdditionalInfoRecords.Count > 0 Then
                                'added 6/19/2017
                                Dim foundTotalPremDiscount As Boolean = False
                                For Each add As QuickQuoteCoverageAdditionalInfoRecord In cov.CoverageAdditionalInfoRecords
                                    'might also include class code info
                                    If UCase(add.Description).Contains("EXPERIENCE MOD PREMIUM") = True Then
                                        ExpModQuotedPremium = add.Value
                                    ElseIf UCase(add.Description).Contains("SCHEDULED RATING PLAN PREMIUM") = True Then
                                        ScheduleModQuotedPremium = add.Value
                                    ElseIf UCase(add.Description).Contains("TERRORISM RISK PREMIUM") = True Then
                                        TerrorismQuotedPremium = add.Value
                                        'ElseIf UCase(add.Description).Contains("WORKERS COMPENSATION - PREMIUM DISCOUNT") = True Then
                                        '    PremDiscountQuotedPremium = add.Value
                                        'updated 11/1/2012 to combine discounts and exclude discount factors
                                    ElseIf UCase(add.Description).Contains("WORKERS COMPENSATION - PREMIUM DISCOUNT") = True AndAlso UCase(add.Description).Contains("FACTOR") = False Then
                                        'If _PremDiscountQuotedPremium = "" Then
                                        '    PremDiscountQuotedPremium = add.Value
                                        'Else
                                        '    PremDiscountQuotedPremium = qqHelper.getSum(_PremDiscountQuotedPremium, add.Value)
                                        'End If
                                        'updated 6/19/2017 to avoid discounts being doubled... IS must've made an update to also include a total premium, which wasn't there before... so our logic was adding them all up and also adding in the total
                                        If UCase(add.Description).Contains("WORKERS COMPENSATION - PREMIUM DISCOUNT PREMIUM") = True Then
                                            'this should be total for all
                                            foundTotalPremDiscount = True
                                            PremDiscountQuotedPremium = add.Value
                                        Else
                                            'not total; SUM as long as we haven't already found total
                                            If foundTotalPremDiscount = False Then
                                                'If _PremDiscountQuotedPremium = "" Then
                                                '    PremDiscountQuotedPremium = add.Value
                                                'Else
                                                '    PremDiscountQuotedPremium = qqHelper.getSum(_PremDiscountQuotedPremium, add.Value)
                                                'End If
                                                'updated 7/21/2018
                                                If VersionAndLobInfo.Get_PremDiscountQuotedPremium_Variable() = "" Then
                                                    PremDiscountQuotedPremium = add.Value
                                                Else
                                                    PremDiscountQuotedPremium = qqHelper.getSum(VersionAndLobInfo.Get_PremDiscountQuotedPremium_Variable(), add.Value)
                                                End If
                                            End If
                                        End If
                                    ElseIf UCase(add.Description) = "MINIMUM PREMIUM" Then
                                        MinimumQuotedPremium = add.Value
                                    ElseIf UCase(add.Description) = "MINIMUM PREMIUM ADJUSTMENT" Then
                                        MinimumPremiumAdjustment = add.Value
                                        'another WC example has:
                                        'description = 1 - Class Code
                                        'value = 1 - Class Code: 0005/0035/0037 (for the 3 classifications I added)
                                    ElseIf UCase(add.Description) = "EXPENSE CONSTANT" Then 'added 5/18/2017 (for Diamond proposals; still defaulting 250 in SetDefaults method, but this will override if available)
                                        Dec_ExpenseConstantPremium = add.Value
                                    ElseIf UCase(add.Description).Contains("WAIVER PREMIUM") = True Then 'added 8/29/2017
                                        If qqHelper.IsPositiveDecimalString(add.Value) = True Then
                                            'note: coded to handle multiple; only saw 1 in example
                                            WCP_WaiverPremium = qqHelper.getSum(WCP_WaiverPremium, add.Value) 'updated 7/21/2018 from private variable to public property (param in GetSum)
                                        End If
                                    ElseIf UCase(add.Description).Contains("KENTUCKY PREMIUM SURCHARGE") = True Then 'added 7/15/2019 for KY
                                        WCP_KY_PremSurcharge = add.Value
                                    End If
                                Next
                            End If
                        Case "10055" 'Checkbox: Subject (example is WC); added 8/14/2012 for QuoteSummary dec section
                            'cov.FullTermPremium is same as 'Code Total' on Worksheet
                            TotalEstimatedPlanPremium = cov.FullTermPremium
                        Case "20227" 'Checkbox: Second Injury Fund (example is WC); added 8/14/2012 for QuoteSummary dec section
                            'cov.FullTermPremium is same as '2nd Injury Fund Assessment' on Worksheet
                            SecondInjuryFundQuotedPremium = cov.FullTermPremium
                        Case "80559" 'Checkbox: Second Injury Fund (example is WC); added 8/14/2012 for QuoteSummary dec section
                            'cov.FullTermPremium is same as '2nd Injury Fund Assessment' on Worksheet
                            IL_WCP_CommissionOperationsFundSurcharge = cov.WrittenPremium

                            'added 8/22/2012 for GL
                        Case "21153" 'CheckBox:  Premises
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                If GL_PremisesAndProducts_DeductibleId = "" AndAlso GL_PremisesAndProducts_DeductibleCategoryTypeId = "" AndAlso GL_PremisesAndProducts_DeductiblePerTypeId = "" Then 'updated 7/21/2018 from private variables to public properties
                                    If cov.DeductibleId <> "0" OrElse cov.DeductibleCategoryTypeId <> "0" OrElse cov.DeductiblePerTypeId <> "0" Then
                                        'updated 10/22/2012 to only set if something isn't N/A (since coverage is always returned)
                                        Has_GL_PremisesAndProducts = True 'updated 7/21/2018 from private variable to public property
                                        GL_PremisesAndProducts_DeductibleId = cov.DeductibleId
                                        GL_PremisesAndProducts_DeductibleCategoryTypeId = cov.DeductibleCategoryTypeId
                                        GL_PremisesAndProducts_DeductiblePerTypeId = cov.DeductiblePerTypeId
                                        GL_PremisesAndProducts_Description = cov.Description 'updated 7/21/2018 from private variable to public property
                                    End If
                                End If
                            End If
                        Case "21154" 'CheckBox:  Products
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/9/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                If GL_PremisesAndProducts_DeductibleId = "" AndAlso GL_PremisesAndProducts_DeductibleCategoryTypeId = "" AndAlso GL_PremisesAndProducts_DeductiblePerTypeId = "" Then 'updated 7/21/2018 from private variables to public properties
                                    If cov.DeductibleId <> "0" OrElse cov.DeductibleCategoryTypeId <> "0" OrElse cov.DeductiblePerTypeId <> "0" Then
                                        'updated 10/22/2012 to only set if something isn't N/A (since coverage is always returned)
                                        Has_GL_PremisesAndProducts = True 'updated 7/21/2018 from private variable to public property
                                        GL_PremisesAndProducts_DeductibleId = cov.DeductibleId
                                        GL_PremisesAndProducts_DeductibleCategoryTypeId = cov.DeductibleCategoryTypeId
                                        GL_PremisesAndProducts_DeductiblePerTypeId = cov.DeductiblePerTypeId
                                        GL_PremisesAndProducts_Description = cov.Description 'updated 7/21/2018 from private variable to public property
                                    End If
                                End If
                            End If

                        Case "80245" 'CheckBox:  Commercial GL Subline 334 - Policy (premises); added 8/28/2012 for QuoteSummary dec section
                            If cov.CoverageAdditionalInfoRecords IsNot Nothing AndAlso cov.CoverageAdditionalInfoRecords.Count > 0 Then
                                For Each add As QuickQuoteCoverageAdditionalInfoRecord In cov.CoverageAdditionalInfoRecords
                                    If UCase(add.Description) = "MINIMUM PREMIUM" Then
                                        GL_PremisesMinimumQuotedPremium = add.Value
                                    ElseIf UCase(add.Description) = "MINIMUM PREMIUM ADJUSTMENT" Then
                                        GL_PremisesMinimumPremiumAdjustment = add.Value
                                    End If
                                Next
                            End If
                        Case "80247" 'CheckBox:  Commercial GL Subline 336 - Policy (products); added 8/28/2012 for QuoteSummary dec section
                            If cov.CoverageAdditionalInfoRecords IsNot Nothing AndAlso cov.CoverageAdditionalInfoRecords.Count > 0 Then
                                For Each add As QuickQuoteCoverageAdditionalInfoRecord In cov.CoverageAdditionalInfoRecords
                                    If UCase(add.Description) = "MINIMUM PREMIUM" Then
                                        GL_ProductsMinimumQuotedPremium = add.Value
                                    ElseIf UCase(add.Description) = "MINIMUM PREMIUM ADJUSTMENT" Then
                                        GL_ProductsMinimumPremiumAdjustment = add.Value
                                    End If
                                Next
                            End If
                        Case "10125" 'CheckBox:  Farm Truck Pollution Liability; added 8/31/2012 for CAP
                            'can check Checkbox property
                            HasFarmPollutionLiability = True 'updated 7/21/2018 from private variable to public property
                            FarmPollutionLiabilityQuotedPremium = cov.FullTermPremium
                        Case "21552" 'Combo:  Liability; not being used yet (added 9/4/2012); 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            Liability_UM_UIM_LimitId = cov.CoverageLimitId '4/22/2017 note for GAR: 33 = 1,000,000; 5/5/2017 correction note: 33 = 300,000 (file:///C:/Users/domin/Documents/QGAR010117(1087542-1)_Patch.xml); 56 = 1,000,000 (file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml)
                            Liability_UM_UIM_QuotedPremium = cov.FullTermPremium
                            'updated 4/22/2017 for GAR (file:///C:/Users/domin/Documents/QGAR010117(1087542-1)_Patch.xml or file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml)
                            'cov.AggregateLiabilityIncrementTypeId 'need to add property to Coverage object (CoverageDetail); Aggregate Limit ddl; 8 = 3 x Limit; 5/4/2017 note: CovDetail, other options are N/A, 1 x Limit, 2 x Limit, 5 x Limit, and 7 x Limit
                            'cov.DeductibleCategoryTypeId 'Liability Deductible Type ddl; 1 = Combined Single Limit
                            '5/8/2017 note for GAR: no premium here; see Location - Case "10111" 'Combo: Liability - Location (GAR only)
                            'added 5/8/2017
                            Liability_UM_UIM_AggregateLiabilityIncrementTypeId = cov.AggregateLiabilityIncrementTypeId
                            Liability_UM_UIM_DeductibleCategoryTypeId = cov.DeductibleCategoryTypeId
                            '5/11/2017 note: static data values for DeductibleId are currently plugged in for QuickQuoteLocation.LiabilityDeductibleId, which doesn't currently exist as a property
                            Liability_UM_UIM_DeductibleId = cov.DeductibleId'added 9/25/2018

                            'Case "21540", "70072" 'Combo:  Medical Payments; not being used yet (added 9/4/2012); updated 7/30/2013 for HOM (70072: Medical_Payments; 4/29/2015 note: also for DFR); 4/9/2015 note: 21540 can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            'updated 4/29/2015 for FAR
                        Case "21540", "70072", "70018" '21540 - Combo: Medical Payments (CAP, GAR); 70072 - Combo: Medical_Payments (HOM, DFR); 70018 - Combo: Farm_M_Medical_Payments (FAR)
                            MedicalPaymentsLimitid = cov.CoverageLimitId
                            MedicalPaymentsQuotedPremium = cov.FullTermPremium
                            '5/5/2017 note for GAR: CoverageLimitId 15 = 5,000; other values are N/A, 500, 750, 1,000, 2,000 (file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml)
                            '5/5/2017 note for GAR: CoverageDetail.MedicalPaymentsTypeId 3 = Automobile and Garage; other values are N/A, Automobile Only, Garage Only (file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml)
                            '5/8/2017 note for GAR (21540): no premium here; see Location - Case "10112" 'Combo: Medical Payments - Location (GAR only)
                            'added 5/8/2017
                            MedicalPaymentsTypeId = cov.MedicalPaymentsTypeId
                        Case "21539" 'CheckBox:  Uninsured Motorist Property Damage; not being used yet (going to default as-of 10/17/2012); 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            'can check Checkbox property
                            '5/5/2017 note for GAR: Checkbox True; DeductibleId 11 = No Deductible; other value is N/A (file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml)
                            '5/8/2017 note for GAR: no premium here; doesn't appear to be at Location either - Case "10113" 'CheckBox: Uninsured / Underinsured Motorist BI and PD - Location (GAR only)
                            'added 5/8/2017
                            '03/02/2021 Updated to remove if stmt - Diamond does not set checkbox True at policy level coverages, sets at vehicle level. MLW
                            'If cov.Checkbox = True Then
                            HasUninsuredMotoristPropertyDamage = True 'updated 7/21/2018 from private variable to public property
                            UninsuredMotoristPropertyDamageQuotedPremium = cov.FullTermPremium 'may not be populated
                            UninsuredMotoristPropertyDamageLimitId = cov.CoverageLimitId 'added 9/25/2018
                            UninsuredMotoristPropertyDamageDeductibleId = cov.DeductibleId 'added 9/25/2018
                            'End If
                            '5/11/2017 note: static data values for DeductibleId are currently plugged in for QuickQuoteLocation.UninsuredUnderinsuredMotoristBIandPDDeductibleId
                        Case "30015" 'Drop down:  Uninsured Motorist Property Damage; CAP IL UMPD
                            UninsuredMotoristPropertyDamage_IL_QuotedPremium = cov.FullTermPremium 'may not be populated, included in UM/UIM premium and does not have its own premium so this will be $0.00
                            UninsuredMotoristPropertyDamage_IL_LimitId = cov.CoverageLimitId
                            UninsuredMotoristPropertyDamage_IL_DeductibleId = cov.DeductibleId
                        Case "10066" 'Combo:  Non-Ownership Liability; 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            HasHiredBorrowedNonOwned = True 'updated 7/21/2018 from private variable to public property
                            HasNonOwnershipLiability = True 'updated 7/21/2018 from private variable to public property
                            NonOwnershipLiabilityNumberOfEmployees = cov.NumberOfEmployees 'updated 7/21/2018 from private variable to public property
                            NonOwnership_ENO_RatingTypeId = cov.ExtendNonOwnershipRatingTypeId
                            NonOwnershipLiabilityQuotedPremium = cov.FullTermPremium
                            '5/8/2017 note for GAR: no premium here
                        Case "10062" 'Combo:  Hired/Borrowed Liability; CoverageTypeId; 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            '_HasHiredBorrowedNonOwned = True
                            '_HasHiredBorrowedLiability = True
                            'updated 10/22/2012 for one or the other
                            'If cov.CoverageTypeId = "2" Then 'Excess
                            'updated 6/17/2017 for Diamond Proposals... non-VR quotes may not have CoverageType set to 2; note: HiredCarPhysicalDamage should probably not be used in this anyway... except to check IfAnyBasis box... HasHiredCarPhysicalDamage should probably just look for Hired Car Collision (10064) or Comp (10063) only
                            If cov.CoverageTypeId = "2" OrElse qqHelper.IsPositiveDecimalString(cov.FullTermPremium) = True Then 'Excess
                                HasHiredBorrowedLiability = True 'updated 7/21/2018 from private variable to public property
                            End If
                            HasHiredCarPhysicalDamage = cov.IfAnyBasis 'updated 7/21/2018 from private variable to public property
                            If HasHiredBorrowedLiability = True OrElse HasHiredCarPhysicalDamage = True Then 'updated 7/21/2018 from private variables to public properties
                                HasHiredBorrowedNonOwned = True 'updated 7/21/2018 from private variable to public property
                            End If
                            HiredBorrowedLiabilityQuotedPremium = cov.FullTermPremium
                            '5/8/2017 note for GAR: has premium here
                        Case "10063" 'Edit:  Hired/Borrowed Other than Collision; OtherThanCollisionTypeId; 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            If cov.OtherThanCollisionTypeId = "3" Then 'Comprehensive
                                HasHiredBorrowedNonOwned = True 'updated 7/21/2018 from private variable to public property
                                ComprehensiveDeductibleId = cov.DeductibleId
                                ComprehensiveQuotedPremium = cov.FullTermPremium
                            End If
                        Case "10064" 'Edit:  Hired/Borrowed Collision; 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            HasHiredBorrowedNonOwned = True 'updated 7/21/2018 from private variable to public property
                            CollisionDeductibleId = cov.DeductibleId
                            CollisionQuotedPremium = cov.FullTermPremium
                        Case "10065" 'CheckBox:  Hired/Borrowed Loss of Use; IfAnyBasis (not being used here as-of 10/22/2012); 4/9/2015 note: can be for CAP or GAR; would need PackagePart logic if ever quoting GAR
                            'can check Checkbox property
                            HasHiredCarPhysicalDamage = cov.IfAnyBasis 'updated 7/21/2018 from private variable to public property
                            If HasHiredCarPhysicalDamage = True Then 'updated 7/21/2018 from private variable to public property
                                HasHiredBorrowedNonOwned = True 'updated 7/21/2018 from private variable to public property
                            End If
                            HiredBorrowedLossOfUseQuotedPremium = cov.FullTermPremium

                            'added 10/17/2012 for CPR
                        Case "70142" 'Edit:  Farm_Fire_Department_Service_Charge (not being used)
                        Case "70152" 'Edit:  Farm_Pollutant_Clean_Up_and_Removal (not being used)
                        Case "10139" 'Edit:  Sod, Trees, Shrubs & Plants (not being used)
                        Case "10132" 'Edit:  Electronic Data (not being used) 'New BOP uses this coverage now 7/7/2016 (3/9/2017 here)
                            '3/9/2017 - BOP stuff
                            HasElectronicData = True 'updated 7/17/2018 from _HasElectronicData
                            ElectronicDataLimit = cov.ManualLimitAmount
                            ElectronicDataQuotedPremium = cov.FullTermPremium
                        Case "10140" 'Edit:  Non-owned Detached Trailers (not being used)
                        Case "10141" 'CheckBox:  Preservation of Property (not being used)
                        Case "10133" 'Edit:  Newly Acquired or Constructed Property - Personal Property (not being used)
                        Case "10152" 'Edit:  Newly Acquired or Constructed Property - Building (not being used)
                        Case "10134" 'Edit:  Property of Others (not being used)
                        Case "10135" 'Edit:  Valuable Papers and Records (other than electronic data) (not being used)
                        Case "10131" 'Edit:  Increase cost of insurance (not being used)
                        Case "10136" 'Edit:  Property off Premise (not being used)
                        Case "10137" 'Edit:  Business Personal Property - off premises - At any fair, exhibition or trade show (not being used)
                        Case "10138" 'Edit:  Business Personal Property - off premises other than that described on policy (not being used)
                        Case "10129" 'CheckBox/Question:  Church Extender Endorsement

                            'added 1/22/2013 for BOP (Phase 2)
                        Case "10121" 'CheckBox:  Minimum Premium Adjustment (currently getting lumped into Optional Coverages); 1/20/2015 note: may use for CIM; 5/16/2017 note: CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                            MinimumPremiumAdjustment = cov.FullTermPremium 'added code 1/29/2013
                            'updated 5/16/2017 for CPP
                            If packagePartType <> Nothing AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None Then
                                Select Case packagePartType
                                    Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                                        CPP_MinPremAdj_CPR = cov.FullTermPremium
                                    Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                                        CPP_MinPremAdj_CGL = cov.FullTermPremium
                                    Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                                        CPP_MinPremAdj_CIM = cov.FullTermPremium
                                    Case QuickQuoteXML.QuickQuotePackagePartType.Crime
                                        CPP_MinPremAdj_CRM = cov.FullTermPremium
                                    Case QuickQuoteXML.QuickQuotePackagePartType.Garage
                                        CPP_MinPremAdj_GAR = cov.FullTermPremium
                                End Select
                            End If

                            'added 2/11/2013 for BOP (being automatically set based on Occurency Liability); don't need to retrieve for now
                        Case "10128" 'Edit/Disabled Edit:  Business Owners Liability Products/Completed Operations Aggregate

                            'added 3/26/2013 for CPR (Blanket)
                        Case "21108" 'CheckBox:  Blanket Building - Group I
                        Case "21109" 'CheckBox:  Blanket Building - Group II
                        Case "21110" 'CheckBox:  Blanket Building - Broad
                        Case "21111" 'CheckBox:  Blanket Building - Special
                        Case "21112" 'CheckBox:  Blanket Building - Earthquake
                        Case "21113" 'CheckBox:  Blanket Contents - Group I
                        Case "21114" 'CheckBox:  Blanket Contents - Group II
                        Case "21115" 'CheckBox:  Blanket Contents - Broad
                        Case "21116" 'CheckBox:  Blanket Contents - Special
                        Case "21117" 'CheckBox:  Blanket Contents - Earthquake
                        Case "21118" 'CheckBox:  Blanket Combined - Group I
                        Case "21119" 'CheckBox:  Blanket Combined - Group II
                        Case "21120" 'CheckBox:  Blanket Combined - Broad
                        Case "21121" 'CheckBox:  Blanket Combined - Special
                        Case "21122" 'CheckBox:  Blanket Combined - Earthquake
                            'added logic 5/7/2013 (for CPR)
                            BlanketCombinedEarthquake_QuotedPremium = cov.FullTermPremium
                        Case "21123" 'CheckBox:  Blanket BI - Group I
                        Case "21124" 'CheckBox:  Blanket BI - Group II
                        Case "21125" 'CheckBox:  Blanket BI - Broad
                        Case "21126" 'CheckBox:  Blanket BI - Special
                        Case "21127" 'CheckBox:  Blanket BI - Earthquake
                        Case "21082" 'Edit:  Blanket Building
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                HasBlanketBuilding = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                                BlanketBuildingQuotedPremium = cov.FullTermPremium
                                BlanketBuildingCauseOfLossTypeId = cov.CauseOfLossTypeId
                                'added more blanket stuff 4/16/2013
                                BlanketBuildingLimit = cov.ManualLimitAmount
                                BlanketBuildingCoinsuranceTypeId = cov.CoinsuranceTypeId
                                BlanketBuildingValuationId = cov.ValuationMethodTypeId
                                BlanketBuildingIsAgreedValue = cov.IsAgreedValue 'added 5/3/2018; updated 7/21/2018 from private variable to public property
                                BlanketBuildingDeductibleID = cov.DeductibleId
                            End If
                        Case "21083" 'Edit:  Blanket Contents
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                HasBlanketContents = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                                BlanketContentsQuotedPremium = cov.FullTermPremium
                                BlanketContentsCauseOfLossTypeId = cov.CauseOfLossTypeId
                                'added more blanket stuff 4/16/2013
                                BlanketContentsLimit = cov.ManualLimitAmount
                                BlanketContentsCoinsuranceTypeId = cov.CoinsuranceTypeId
                                BlanketContentsValuationId = cov.ValuationMethodTypeId
                                BlanketContentsIsAgreedValue = cov.IsAgreedValue 'added 5/3/2018; updated 7/21/2018 from private variable to public property
                                BlanketContentsDeductibleID = cov.DeductibleId
                            End If
                        Case "21084" 'Edit:  Blanket Combined Build and Contents
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuotePackagePartType.None OrElse packagePartType = QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015; may not be needed here... was already being done in QuickQuoteXML
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                HasBlanketBuildingAndContents = cov.Checkbox 'updated 7/21/2018 from private variable to public property
                                BlanketBuildingAndContentsQuotedPremium = cov.FullTermPremium
                                BlanketBuildingAndContentsCauseOfLossTypeId = cov.CauseOfLossTypeId
                                'added more blanket stuff 4/16/2013
                                BlanketBuildingAndContentsLimit = cov.ManualLimitAmount
                                BlanketBuildingAndContentsCoinsuranceTypeId = cov.CoinsuranceTypeId
                                BlanketBuildingAndContentsValuationId = cov.ValuationMethodTypeId
                                BlanketBuildingAndContentsIsAgreedValue = cov.IsAgreedValue 'added 5/3/2018; updated 7/21/2018 from private variable to public property
                                BlanketBuildingAndContentsDeductibleID = cov.DeductibleId
                            End If
                            'Case "21085" 'Edit:  Blanket Business Income (coveragecode_id was already above for BOP); commented out 4/8/2015
                            '    _HasBlanketBusinessIncome = cov.Checkbox
                            '    BlanketBusinessIncomeQuotedPremium = cov.FullTermPremium
                            '    BlanketBusinessIncomeCauseOfLossTypeId = cov.CauseOfLossTypeId
                            '    'added more blanket stuff 4/16/2013
                            '    BlanketBusinessIncomeLimit = cov.ManualLimitAmount
                            '    BlanketBusinessIncomeCoinsuranceTypeId = cov.CoinsuranceTypeId
                            '    BlanketBusinessIncomeValuationId = cov.ValuationMethodTypeId

                            'added 7/24/2013 for PPA
                            'Case "80094" 'CheckBox: Enhancement Endorsement; 8/12/2013 - use existing property above for 286

                            'added 7/26/2013 for HOM
                        Case "30007" 'Combo: Personal Liability; added logic 7/30/2013
                            PersonalLiabilityLimitId = cov.CoverageLimitId
                            PersonalLiabilityQuotedPremium = cov.FullTermPremium
                            'Case "70072" 'Combo: Medical_Payments; use existing CAP property above

                            '9/23/2014 - added EPLI logic from DiamondQuickQuote
                        Case "80330" 'Checkbox: EPLI 4-09-2014 - Sent; 6/17/2017 note: CovCodeDscr = EPLI - Master
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                HasEPLI = cov.Checkbox
                                If qqHelper.IsPositiveDecimalString(EPLIPremium) = False Then 'added IF 6/17/2017 just in case this cov were to be checked after premium is already set by other EPLI cov; updated 7/21/2018 from private variable to public property
                                    EPLIPremium = cov.FullTermPremium
                                End If
                                EPLICoverageLimitId = cov.CoverageLimitId
                                EPLIDeductibleId = cov.DeductibleId
                                EPLICoverageTypeID = cov.CoverageTypeId
                            End If
                        Case "80331" 'Combo: EPLI - Underwritten; added 6/17/2017 for Diamond Proposals... looks like VR uses 80332 maybe, but it can also be 80331... looks to be dependent on EPLI Type dropdown (underwritten or non-underwritten; see CoverageType table values 21 and 22 for coveragetype_id)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                'HasEPLI = cov.Checkbox
                                EPLIPremium = helper.TryToGetDouble(EPLIPremium) + helper.TryToGetDouble(cov.FullTermPremium)
                                'EPLICoverageLimitId = cov.CoverageLimitId
                                'EPLIDeductibleId = cov.DeductibleId
                                'EPLICoverageTypeID = cov.CoverageTypeId
                            End If
                        Case "80332" 'Checkbox: EPLI 4-09-2014 - Returned After Rate; 6/17/2017 note: CovCodeDscr = EPLI - Non Underwritten
                            '4/28/2015 note: Diamond may automatically add other EPLI covs (80332, 80345; 80330 is main cov) when rating, but we may need to do something special to retain them on re-rate... Diamond service example re-rated w/o them and resulted in a prem decrease
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                'HasEPLI = cov.Checkbox
                                EPLIPremium = helper.TryToGetDouble(EPLIPremium) + helper.TryToGetDouble(cov.FullTermPremium)
                                'EPLICoverageLimitId = cov.CoverageLimitId
                                'EPLIDeductibleId = cov.DeductibleId
                                'EPLICoverageTypeID = cov.CoverageTypeId
                            End If
                        Case "80345" 'Checkbox: EPLI 4-09-2014 - For Min EPLI Prem Adjust
                            '4/28/2015 note: Diamond may automatically add other EPLI covs (80332, 80345; 80330 is main cov) when rating, but we may need to do something special to retain them on re-rate... Diamond service example re-rated w/o them and resulted in a prem decrease
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                'HasEPLI = cov.Checkbox
                                EPLIPremium = helper.TryToGetDouble(EPLIPremium) + helper.TryToGetDouble(cov.FullTermPremium)
                                'EPLICoverageLimitId = cov.CoverageLimitId
                                'EPLIDeductibleId = cov.DeductibleId
                                'EPLICoverageTypeID = cov.CoverageTypeId
                            End If

                        Case "80451" ' added 12/20/2016 Matt A  Only applies to CGL when in CPP - not for CGL monoline; added 2/6/2017 from source version to local version
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                HasCondoDandO = cov.Checkbox
                                CondoDandOPremium = cov.FullTermPremium
                                CondoDandOManualLimit = cov.ManualLimitAmount
                                CondoDandODeductibleId = cov.DeductibleId
                                CondoDandOAssociatedName = cov.NameInformation
                            End If

                            'ported over from DiamondQuickQuote 3/5/2015
                        Case "80347" ' MGB 2/9/15 Bug 4040 
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                BlanketWaiverOfSubrogation = "2"
                                BlanketWaiverOfSubrogationQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80348" ' MGB 2/9/15 Bug 4040 
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then 'added IF 4/8/2015
                                BlanketWaiverOfSubrogation = "1"
                                BlanketWaiverOfSubrogationQuotedPremium = cov.FullTermPremium
                            End If


                        Case "80453" ' this for CAP and WCP Blanket Waiver of Subro Matt A 4-14-17
                            If LobType = QuickQuoteLobType.CommercialAuto Then
                                BlanketWaiverOfSubrogation = "3"
                                BlanketWaiverOfSubrogationQuotedPremium = cov.FullTermPremium
                            End If


                            'added 3/6/2015 for CPR/CPP Business Income ALS (eff 4/1/2015); example has Checkbox true, ManualLimitAmount, CoverageBasisTypeId 1
                        Case "80349" 'CheckBox: Business Income ALS
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015
                                If cov.Checkbox = True Then 'could also just set Has prop to Checkbox value and always set limit and prem
                                    HasBusinessIncomeALS = True 'updated 7/21/2018 from private variable to public property
                                    BusinessIncomeALSLimit = cov.ManualLimitAmount
                                    BusinessIncomeALSQuotedPremium = cov.FullTermPremium
                                End If
                            End If

                            'added 1/19/2015 for CIM (Commercial Inland Marine)
                        Case "50026" 'Edit: Fine Arts; corresponds w/ 21321 (Building - Fine Arts - Schedule) on the Building; ManualLimitAmount * Rate = Premium; 3/11/2015 note: example has ManualLimitAmount (SUM from building 21321), CoverageBasisTypeId 1, DeductibleCategoryTypeId 3 (All Perils), Rate = 2.300, DeductibleId 8 (500)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/16/2015
                                FineArtsDeductibleCategoryTypeId = cov.DeductibleCategoryTypeId
                                FineArtsRate = cov.Rate
                                FineArtsDeductibleId = cov.DeductibleId
                                FineArtsQuotedPremium = cov.FullTermPremium
                                FineArtsAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                            End If
                        Case "80209" 'CheckBox: Fine Arts - Newly Acquired; added 3/11/2015; example has Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21318" 'Edit: Fine Arts - In Transit; added 3/11/2015; example has ManualLimitAmount and CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21319" 'Edit: Fine Arts - Off Premises; added 3/11/2015; example has ManualLimitAmount and CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21320" 'Edit: Fine Arts - Earth Movement; added 3/11/2015; example has Deductible, ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21553" 'CheckBox: Fine Arts Floater - Breakage, Marring, or Scratching; added 3/11/2015; example has Checkbox true and CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If cov.Checkbox = True Then 'could also just set Has prop to Checkbox value and always set prem
                                    FineArtsBreakageMarringOrScratching = True 'renamed 3/17/2015 from _HasFineArtsBreakageMarringOrScratching; updated 7/21/2018 from private variable to public property
                                    FineArtsBreakageMarringOrScratchingQuotedPremium = cov.FullTermPremium
                                End If
                            End If
                        Case "21310" 'Edit: Fine Arts Dealer; added 3/11/2015; corresponds w/ 21317 (Building - Fine Arts Dealer - Schedule) on the Building; example has ManualLimitAmount (SUM from building 21317; UI just allows 1), CoinsuranceTypeId 5 (80%), CoverageBasisTypeId 1, Rate 1.100, DeductibleId 8 (500)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21311" 'Edit: Fine Arts Dealer - In Transit; added 3/11/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21312" 'Edit: Fine Arts Dealer - Property on Exhibition; added 3/11/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21313" 'Edit: Fine Arts Dealer - Property at Customer's Premises; added 3/11/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21314" 'Edit: Fine Arts Dealer - Property at Other Premises; added 3/11/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21516" 'Edit: Fine Arts Dealer - Any One Catastrophe; added 3/11/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21315" 'Edit: Fine Arts Dealer - Earth Movement; added 3/11/2015; example has Deductible, ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21316" 'CheckBox: Fine Arts Dealer - Breakage, Marring, or Scratching; added 3/11/2015; example has Checkbox true, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21433" 'Edit: Motor Truck Cargo - Scheduled Vehicle; 3/18/2015 note: example has Checkbox true, ManualLimitAmount (SUM of ManualLimitAmount for all instances of 21437), AdditionalInterests, CoverageBasisTypeId 1, HasLoadingUnloading (CoverageDetail), IsNamedPerils (CoverageDetail), OperatingRadius (CoverageDetail; probably int), Rate, DeductibleId, Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/23/2015
                                'If cov.Checkbox = True Then '3/23/2015 note: may need this even though it's an Edit field; appears to always be True on examples
                                MotorTruckCargoScheduledVehicleAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                MotorTruckCargoScheduledVehicleLoadingUnloading = cov.HasLoadingUnloading 'CoverageDetail
                                MotorTruckCargoScheduledVehicleNamedPerils = cov.IsNamedPerils 'CoverageDetail
                                MotorTruckCargoScheduledVehicleOperatingRadius = cov.OperatingRadius 'CoverageDetail
                                MotorTruckCargoScheduledVehicleRate = cov.Rate 'CoverageDetail
                                MotorTruckCargoScheduledVehicleDeductibleId = cov.DeductibleId 'static data
                                MotorTruckCargoScheduledVehicleDescription = cov.Description
                                MotorTruckCargoScheduledVehicleQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21425" 'Edit: Motor Truck Cargo - UnScheduled Vehicle; 7/8/2025 note: example has Checkbox true, ManualLimitAmount (SUM of ManualLimitAmount for all instances of 21437), AdditionalInterests, CoverageBasisTypeId 1, HasLoadingUnloading (CoverageDetail), IsNamedPerils (CoverageDetail), OperatingRadius (CoverageDetail; probably int), Rate, DeductibleId, Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 7/8/2025
                                'If cov.Checkbox = True Then '8/8/2025 note: may need this even though it's an Edit field; appears to always be True on examples
                                MotorTruckCargoUnScheduledVehicleAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                MotorTruckCargoUnScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                MotorTruckCargoUnScheduledVehicleLoadingUnloading = cov.HasLoadingUnloading 'CoverageDetail
                                MotorTruckCargoUnScheduledVehicleNamedPerils = cov.IsNamedPerils 'CoverageDetail
                                MotorTruckCargoUnScheduledVehicleOperatingRadius = cov.OperatingRadius 'CoverageDetail
                                MotorTruckCargoUnScheduledVehicleRate = cov.Rate 'CoverageDetail
                                MotorTruckCargoUnScheduledVehicleDeductibleId = cov.DeductibleId 'static data
                                MotorTruckCargoUnScheduledVehicleDescription = cov.Description
                                MotorTruckCargoUnScheduledVehicleQuotedPremium = cov.FullTermPremium
                                MotorTruckCargoUnScheduledAnyVehicleLimit = cov.ManualLimitAmount
                                MotorTruckCargoUnScheduledNumberOfVehicles = cov.NumberOfVehicles 'CoverageDetail; 7/8/2025 note: example has NumberOfVehicles = 1
                                'End If
                            End If
                        Case "21434" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Newly Acquired Terminal; added 3/18/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21435" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Freight Charges; added 3/18/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21436" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Catastrophe; 3/18/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/24/2015
                                MotorTruckCargoScheduledVehicleCatastropheLimit = cov.ManualLimitAmount
                                MotorTruckCargoScheduledVehicleCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21428" 'Edit: Motor Truck Cargo - UnScheduled Vehicle - Catastrophe; 7/8/2025 note: example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 7/8/2025
                                MotorTruckCargoUnScheduledVehicleCatastropheLimit = cov.ManualLimitAmount
                                MotorTruckCargoUnScheduledVehicleCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21437" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Schedule; note: has CoverageDetail fields for Make, Model, VIN, Year (for Schedule of Vehicles... need to see what xml looks like if we add another... possibly 2 Coverages w/ the same coverageCodeId or 1 Coverage w/ multiple CoverageDetail or something; input screen has Limit, which ends up as ManualLimitAmount in Coverage... new Coverage per Scheduled Vehicle); 3/18/2015 note: same concept as other scheduled vehicle covs (21504 - Owner's Cargo, 21505 - Transportation)... limit, make, model, vin, year... should create custom object to house props for all varieties and then have specific list properties for each type that corresponds to its own coveragecodeid; 4/2/2015 note: example has ShouldSyncWithMasterCoverage true... now updated to use in xml
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/18/2015
                                If VersionAndLobInfo.MotorTruckCargoScheduledVehicles Is Nothing Then 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    VersionAndLobInfo.MotorTruckCargoScheduledVehicles = New List(Of QuickQuoteScheduledVehicle) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                End If
                                Dim sv As New QuickQuoteScheduledVehicle
                                With sv
                                    .Limit = cov.ManualLimitAmount
                                    .Make = cov.Make
                                    .Model = cov.Model
                                    .VIN = cov.VIN
                                    .Year = cov.Year
                                    .QuotedPremium = cov.FullTermPremium
                                End With
                                VersionAndLobInfo.MotorTruckCargoScheduledVehicles.Add(sv) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                            End If
                        Case "21439" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Refrigeration Breakdown - Any One Conveyance; added 3/18/2015; example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfVehicles (CoverageDetail), Rate, DeductibleId
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21440" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Refrigeration Breakdown - Catastrophe; added 3/18/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80317" 'CheckBox: Motor Truck Cargo - Scheduled Vehicle - Additional Information; added 3/18/2015; example has Checkbox true, City (CoverageDetail), CoverageBasisTypeId 1, ExcludedEggs (CoverageDetail; bool), ExcludedFursOrFurTrimmedGarments (CoverageDetail; bool), ExcludedLiquor (CoverageDetail; bool), ExcludedLivestockOrPoultry (CoverageDetail; bool), ExcludedTobacco (CoverageDetail; bool), ProductDescription (CoverageDetail; excluded prop other field in UI), StateId (CoverageDetail), WithinMiles (CoverageDetail)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80229" 'CheckBox: Motor Truck Cargo - Scheduled Vehicle - Debris Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80230" 'CheckBox: Motor Truck Cargo - Scheduled Vehicle - Pollutant Cleanup and Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21450" 'Edit: Transportation - Catastrophe; 3/17/2015 note: example has Checkbox true, ManualLimitAmount, AdditionalInterests, CoverageBasisTypeId 1, HasLoadingUnloading, IsNamedPerils, DeductibleId, Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/17/2015
                                'If cov.Checkbox = True Then '3/17/2015 note: may need this even though it's an Edit field; appears to always be True on examples
                                TransportationCatastropheLimit = cov.ManualLimitAmount
                                TransportationCatastropheDeductibleId = cov.DeductibleId
                                TransportationCatastropheDescription = cov.Description
                                TransportationCatastropheAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                TransportationCatastropheLoadingUnloading = cov.HasLoadingUnloading
                                TransportationCatastropheNamedPerils = cov.IsNamedPerils
                                TransportationCatastropheQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21452" 'Edit: Transportation - Any One Owned Vehicle; note: CoverageDetail field for NumberOfVehicles; 3/17/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfVehicles, Rate
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/17/2015
                                TransportationAnyOneOwnedVehicleLimit = cov.ManualLimitAmount
                                TransportationAnyOneOwnedVehicleNumberOfVehicles = cov.NumberOfVehicles
                                TransportationAnyOneOwnedVehicleRate = cov.Rate
                                TransportationAnyOneOwnedVehicleQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21451" 'Edit: Transportation - Any One Aircraft; note: CoverageDetail field for Number Of Shipments; 3/17/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfShipments, Rate
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21453" 'Edit: Transportation - Any One Carrier; note: CoverageDetail field for Number Of Shipments; 3/17/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfShipments, Rate
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21454" 'Edit: Transportation - Any One Railroad Car; note: CoverageDetail field for Number Of Shipments; 3/17/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfShipments, Rate
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21456" 'Edit: Transportation - Refrigeration Breakdown - Any One Conveyance; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfVehicles, Rate, DeductibleId
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21457" 'Edit: Transportation - Refrigeration Breakdown - Catastrophe; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21505" 'Edit: Transportation - Scheduled Vehicle; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1, Make, Model, VIN, Year; can have multiple; 4/2/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21442" 'Edit: Owner's Cargo - Any One Owned Vehicle; 3/17/2015 note: example has Checkbox true, ManualLimitAmount, AdditionalInterests, CoverageBasisTypeId 1 (CoverageDetail), HasLoadingUnloading true (CoverageDetail), IsNamedPerils true (CoverageDetail), Rate (CoverageDetail), DeductibleId, Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/17/2015
                                'If cov.Checkbox = True Then '3/17/2015 note: may need this even though it's an Edit field; appears to always be True on examples
                                OwnersCargoAnyOneOwnedVehicleLimit = cov.ManualLimitAmount
                                OwnersCargoAnyOneOwnedVehicleDeductibleId = cov.DeductibleId
                                OwnersCargoAnyOneOwnedVehicleRate = cov.Rate
                                OwnersCargoAnyOneOwnedVehicleDescription = cov.Description
                                OwnersCargoAnyOneOwnedVehicleAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                OwnersCargoAnyOneOwnedVehicleLoadingUnloading = cov.HasLoadingUnloading
                                OwnersCargoAnyOneOwnedVehicleNamedPerils = cov.IsNamedPerils
                                OwnersCargoAnyOneOwnedVehicleQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21446" 'Edit: Owner's Cargo - Refrigeration Breakdown - Any One Conveyance; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfVehicles (CoverageDetail), Rate, DeductibleId
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21443" 'Edit: Owner's Cargo - Catastrophe; 3/17/2015 note: example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                OwnersCargoCatastropheLimit = cov.ManualLimitAmount
                                OwnersCargoCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21444" 'Edit: Owner's Cargo - Backhaul Any One Owned Vehicle; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21447" 'Edit: Owner's Cargo - Refrigeration Breakdown - Catastrophe; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21504" 'Edit: Owner's Cargo - Scheduled Vehicle; added 3/17/2015; example has ManualLimitAmount, CoverageBasisTypeId 1, Make, Model, VIN, Year; can have multiple; 4/2/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80231" 'CheckBox: Owners Cargo - Debris Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80232" 'CheckBox: Owners Cargo - Pollutant Cleanup and Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21466" 'CheckBox: Computer - All Perils; 2/10/2015 note: can't add w/o Computer cov (21465), which appears to only be added after adding loc/building and setting limits
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/10/2015
                                '2/18/2015 note: may need hasCov prop in case we want to select cov w/o setting deductible
                                If cov.Checkbox = True Then 'may not need
                                    ComputerAllPerilsDeductibleId = cov.DeductibleId
                                    ComputerAllPerilsQuotedPremium = cov.FullTermPremium
                                End If
                            End If
                        Case "21467" 'CheckBox: Computer - Earthquake/Volcanic Eruption; added 1/20/2015; 2/10/2015 note: can't add w/o Computer cov (21465), which appears to only be added after adding loc/building and setting limits
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/10/2015
                                '2/18/2015 note: may need hasCov prop in case we want to select cov w/o setting deductible
                                If cov.Checkbox = True Then 'may not need
                                    ComputerEarthquakeVolcanicEruptionDeductible = cov.Deductible
                                    ComputerEarthquakeVolcanicEruptionQuotedPremium = cov.FullTermPremium
                                End If
                            End If
                        Case "21468" 'CheckBox: Computer - Mechanical Breakdown; added 1/20/2015; 2/10/2015 note: can't add w/o Computer cov (21465), which appears to only be added after adding loc/building and setting limits
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/10/2015
                                '2/18/2015 note: may need hasCov prop in case we want to select cov w/o setting deductible
                                If cov.Checkbox = True Then 'may not need
                                    ComputerMechanicalBreakdownDeductible = cov.Deductible
                                    ComputerMechanicalBreakdownQuotedPremium = cov.FullTermPremium
                                End If
                            End If
                        Case "21465" 'Edit: Computer; 1/20/2015 note: example showed AdditionalInterest; 2/10/2015 note: appears to only be added after adding loc/building and setting limits
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/10/2015
                                'If cov.Checkbox = True Then '2/10/2015 note: may need this even though it's an Edit field; appears to always be True on examples
                                ComputerCoinsuranceTypeId = cov.CoinsuranceTypeId 'cov also has CoverageBasisTypeId set to 1
                                ComputerExcludeEarthquake = cov.ExcludeEarthquake
                                ComputerValuationMethodTypeId = cov.ValuationMethodTypeId
                                ComputerAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                ComputerQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21469" 'Edit: Computer - Additional Debris Removal Expense; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21471" 'Edit: Computer - Emergency Remove Expense; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21470" 'Edit: Computer - Fraud and Deceit; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21474" 'Edit: Computer - Acquired Locations; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21475" 'Edit: Computer - Newly Purchased or Leased Hardware; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21477" 'Edit: Computer - Off-Site Computers; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21480" 'Edit: Computer - Pollutant Cleanup and Removal; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21478" 'Edit: Computer - Property In Transit; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21481" 'Edit: Computer - Propriety Programs and Data Records; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21476" 'Edit: Computer - Rewards; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21479" 'Edit: Computer - Software Storage; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21482" 'Edit: Computer - Virus and Hacking Coverage - One Occurrence; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21483" 'Edit: Computer - Virus and Hacking Coverage - 12 Month Period; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21492" 'Edit: Computer - Income - Acquired Locations; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21493" 'Edit: Computer - Income - Property in Transit; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21496" 'Edit: Computer - Income - Utility Services Interruption; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21494" 'Edit: Computer - Income - Virus and Hacking - One Occurrence; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21495" 'Edit: Computer - Income - Virus and Hacking - 12 Month Period; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21248" '3/9/2017 - BOP stuff
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None Then
                                If VersionAndLobInfo.ScheduledCoverages Is Nothing Then 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    VersionAndLobInfo.ScheduledCoverages = New List(Of QuickQuoteScheduledCoverage) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                End If
                                Dim qqsc As New QuickQuoteScheduledCoverage
                                If qqsc.Coverages Is Nothing Then
                                    qqsc.Coverages = New List(Of QuickQuoteCoverage)
                                End If

                                qqsc.Coverages.Add(qqHelper.CloneObject(cov))
                                VersionAndLobInfo.ScheduledCoverages.Add(qqsc) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                If VersionAndLobInfo.PhotographyScheduledCoverages Is Nothing Then 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    VersionAndLobInfo.PhotographyScheduledCoverages = New List(Of QuickQuoteCoverage) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                End If
                                VersionAndLobInfo.PhotographyScheduledCoverages.Add(qqHelper.CloneObject(cov)) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                            End If
                        Case "21268" 'Edit: Scheduled Property; 1/20/2015 note: example showed AdditionalInterest
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'If cov.Checkbox = True Then '2/10/2015 note: may need this even though it's an Edit field; initial example xml didn't have it, but it was there after checking IsNamedPerils checkbox and re-extracting... never acquired quote, though
                                ScheduledPropertyAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                ScheduledPropertyCoinsuranceTypeId = cov.CoinsuranceTypeId
                                ScheduledPropertyDeductibleId = cov.DeductibleId
                                ScheduledPropertyRate = cov.Rate
                                ScheduledPropertyNamedPerils = cov.IsNamedPerils
                                ScheduledPropertyQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21269" 'Edit: Scheduled Property - Schedule (1 for each scheduled prop); 4/1/2015 note: example has ShouldSyncWithMasterCoverage true... now updated to use in xml
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/9/2015
                                If VersionAndLobInfo.ScheduledPropertyItems Is Nothing Then 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    VersionAndLobInfo.ScheduledPropertyItems = New List(Of QuickQuoteScheduledPropertyItem) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                End If
                                Dim sp As New QuickQuoteScheduledPropertyItem
                                With sp
                                    .Limit = cov.ManualLimitAmount
                                    .Description = cov.Description
                                    .QuotedPremium = cov.FullTermPremium
                                End With
                                VersionAndLobInfo.ScheduledPropertyItems.Add(sp) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                            End If
                        Case "80195" 'CheckBox: Scheduled Property Floater - Debris Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80196" 'CheckBox: Scheduled Property Floater - Pollutant Cleanup and Removal
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21347" 'Edit: Builder's Risk (can have AdditionalInterests... not sure where it was entered from [can't find in UI]... see QA example CIM1001051... update 1/20/2015: no big deal... there was a + icon that expanded the section to show the AI); 2/18/2015 note: example xml QA_CIM1001051 has value for DepositPremiumFactor, which we may not use (in Reporting Information section in UI); also has CoverageBasisTypeId 1; ManualLimitAmount is SUM of ScheduledCoverages (UICoverageScheduledCoverageParentTypeId 35 [Jobsites - BR - Schedule]; CoverageCodeID 21348)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/18/2015
                                BuildersRiskDeductibleId = cov.DeductibleId
                                BuildersRiskRate = cov.Rate
                                BuildersRiskAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                BuildersRiskQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21355" 'Edit: Builder's Risk - Schedule - Additional Debris Removal Expense; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21367" 'Edit: Builder's Risk - Schedule - Storage Locations; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 6/17/2017 for Diamond Proposals
                                BuildersRiskScheduleStorageLocationsLimit = cov.ManualLimitAmount
                                BuildersRiskScheduleStorageLocationsQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21368" 'Edit: Builder's Risk - Schedule - Testing; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 6/17/2017 for Diamond Proposals
                                BuildersRiskScheduleTestingLimit = cov.ManualLimitAmount
                                BuildersRiskScheduleTestingQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21369" 'Edit: Builder's Risk - Schedule - Transit; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 6/17/2017 for Diamond Proposals
                                BuildersRiskScheduleTransitLimit = cov.ManualLimitAmount
                                BuildersRiskScheduleTransitQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21358" 'Edit: Builder's Risk - Schedule - Emergency Remove Expense; 2/19/2015 note: ManualLimitAmount and NumberOfDays (CoverageDetail) and CoverageBasisTypeId 1; example xml also showed Checkbox true; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21356" 'Edit: Builder's Risk - Schedule - Pollutant Cleanup and Removal; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21357" 'Edit: Builder's Risk - Schedule - Fraud and Deceit; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21371" 'Edit: Builder's Risk - Schedule - Waterborne Property; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21359" 'Edit: Builder's Risk - Schedule - Contract Penalty; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21360" 'Edit: Builder's Risk - Schedule - Expediting Expense; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21361" 'Edit: Builder's Risk - Schedule - Fire Department Service Charge; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21362" 'Edit: Builder's Risk - Schedule - Ordinance or Law, Demolition of Undamaged Parts or Building; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21363" 'Edit: Builder's Risk - Schedule - Ordinance or Law, Increased Cost to Repair and Cost to Demolish and Clear; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21364" 'Edit: Builder's Risk - Schedule - Personal Property; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21365" 'Edit: Builder's Risk - Schedule - Rewards; 2/19/2015 note: ManualLimitAmount; example xml also showed Checkbox true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21366" 'Edit: Builder's Risk - Schedule - Sewer Backup and Water Below Surface; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21370" 'Edit: Builder's Risk - Schedule - Trees, Shrubs, and Plants; 2/19/2015 note: ManualLimitAmount and CoverageBasisTypeId 1; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                            'added 1/20/2015 for CIM
                        Case "21288" 'Edit: Installation - Blanket
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 1/28/2015
                                InstallationBlanketLimit = cov.ManualLimitAmount 'may need logic to not overwrite if set from 21287
                                InstallationBlanketCoinsuranceTypeId = cov.CoinsuranceTypeId
                                InstallationBlanketDeductibleId = cov.DeductibleId
                                InstallationBlanketRate = cov.Rate
                                'InstallationBlanketCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                InstallationBlanketQuotedPremium = cov.FullTermPremium
                                '1/28/2015 note: also using same props for 21287 (except limit); doesn't appear that Diamond will add this coverage if the scheduled locations are being used
                                usingInstallationBlanketCov = True 'added 1/29/2015
                                'updated 6/18/2015 - may need to use this coverage or 21287 for AIs... existing Diamond issue to where they only work w/ Scheduled
                                If cov.AdditionalInterests IsNot Nothing AndAlso cov.AdditionalInterests.Count > 0 Then
                                    InstallationAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                    InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                End If
                            End If
                        Case "21289" 'Edit: Installation - Any One Loss Catastrophe
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 1/28/2015
                                InstallationBlanketAnyOneLossCatastropheLimit = cov.ManualLimitAmount
                                'InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                InstallationBlanketAnyOneLossCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                            'added 1/27/2015 for CIM
                        Case "21287" 'Edit: Installation; this cov appears to sum up all of the 21290 covs (ManualLimitAmount = Sum of ManualLimitAmount on each); includes some of the props set on 21288 (CoinsuranceTypeId, CoverageBasisTypeId [appears to be on everything; may not be used], DepositPremiumFactor [may not be used; in UI under 'Reporting Information' section], Rate, DeductibleId); 4/1/2015 note: example is using ShouldSyncWithMasterCoverage true like 21290... now updated to use in xml
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 1/28/2015
                                InstallationQuotedPremium = cov.FullTermPremium
                                If VersionAndLobInfo.InstallationAdditionalInterests Is Nothing OrElse VersionAndLobInfo.InstallationAdditionalInterests.Count = 0 OrElse (cov.AdditionalInterests IsNot Nothing AndAlso cov.AdditionalInterests.Count > 0) Then 'added IF 6/18/2015; previously happening every time - may need to use this coverage or 21288 for AIs... existing Diamond issue to where they only work w/ Scheduled; updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    InstallationAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                    InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                End If
                                '1/28/2015 note: now setting 21288 props on this coverage (except limit); doesn't appear that Diamond will allow you to have both... so this one will also need to pull 21288 props
                                If usingInstallationBlanketCov = False OrElse qqHelper.IsZeroPremium(cov.ManualLimitAmount) = False Then 'added IF 1/29/2015; doesn't appear that any of it is populated whenever cov is just there to hold AIs
                                    InstallationBlanketCoinsuranceTypeId = cov.CoinsuranceTypeId
                                    InstallationBlanketDeductibleId = cov.DeductibleId
                                    InstallationBlanketRate = cov.Rate
                                    'InstallationBlanketCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                End If
                            End If
                        Case "21290" 'Edit: Installation - Schedule; can have multiple... each will have its own coverage; 4/1/2015 note: now using ShouldSyncWithMasterCoverage true
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 1/28/2015
                                If VersionAndLobInfo.InstallationScheduledLocations Is Nothing Then 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                    VersionAndLobInfo.InstallationScheduledLocations = New List(Of QuickQuoteInstallationScheduledLocation) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                                End If
                                Dim isl As New QuickQuoteInstallationScheduledLocation
                                With isl
                                    .Limit = cov.ManualLimitAmount
                                    .AddressInfo = cov.AddressInformation
                                    .QuotedPremium = cov.FullTermPremium
                                End With
                                VersionAndLobInfo.InstallationScheduledLocations.Add(isl) 'updated 7/21/2018 from private variable; could have used QQO's Prop but we don't need to go through the Parent logic
                            End If
                            'added 1/28/2015... more Installation
                        Case "21291" 'Edit: Installation - Additional Debris Removal Expense; ManualLimitAmount only... also has CoverageBasisTypeId; 1st entry field in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationAdditionalDebrisRemovalExpenseLimit = cov.ManualLimitAmount
                                InstallationAdditionalDebrisRemovalExpenseQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21295" 'Edit: Installation - Storage Locations; ManualLimitAmount only... also has CoverageBasisTypeId; under Supplemental Coverages in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationStorageLocationsLimit = cov.ManualLimitAmount
                                InstallationStorageLocationsQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21296" 'Edit: Installation - Transit; ManualLimitAmount only... also has CoverageBasisTypeId; under Supplemental Coverages in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationTransitLimit = cov.ManualLimitAmount
                                InstallationTransitQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21297" 'Edit: Installation - Testing; ManualLimitAmount only... also has CoverageBasisTypeId; under Supplemental Coverages in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationTestingLimit = cov.ManualLimitAmount
                                InstallationTestingQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21300" 'Edit: Installation - Sewer Backup, and Below the Surface; Deductible and ManualLimitAmount only... also has CoverageBasisTypeId; under Sewer Backup, and Below the Surface Coverage in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationSewerBackupLimit = cov.ManualLimitAmount
                                InstallationSewerBackupDeductible = cov.Deductible
                                InstallationSewerBackupQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21301" 'Edit: Installation - Sewer Backup, and Below the Surface Catastrophe; ManualLimitAmount only... also has CoverageBasisTypeId; under Sewer Backup, and Below the Surface Coverage in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationSewerBackupCatastropheLimit = cov.ManualLimitAmount
                                InstallationSewerBackupCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21304" 'Edit: Installation - Earthquake - Any One Building; Deductible and ManualLimitAmount only... also has CoverageBasisTypeId; under Earthquake in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationEarthquakeLimit = cov.ManualLimitAmount
                                InstallationEarthquakeDeductible = cov.Deductible 'may need logic to not overwrite if set from 21305
                                InstallationEarthquakeQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21305" 'Edit: Installation - Earthquake Catastrophe - Any One Occurrence; Deductible and ManualLimitAmount only... also has CoverageBasisTypeId; under Earthquake in Coverage Extensions section in UI; uses same Deductible as entered for 21304 in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/2/2015
                                InstallationEarthquakeCatastropheLimit = cov.ManualLimitAmount
                                If qqHelper.IsZeroPremium(cov.Deductible) = False OrElse qqHelper.IsZeroPremium(InstallationEarthquakeDeductible) = True Then 'could also set only if currently blank; updated 2/3/2015; 'updated 7/21/2018 from private variable to public property
                                    InstallationEarthquakeDeductible = cov.Deductible
                                End If
                                InstallationEarthquakeCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "183" 'Edit: Business Personal Property; ManualLimitAmount only... also has CoverageBasisTypeId; under Business Personal Property in Coverage Extensions section in UI
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/9/2015
                                BusinessPersonalPropertyLimit = cov.ManualLimitAmount 'shown in UI Installation Coverage Extensions section, but may not be specific to Installation
                                BusinessPersonalPropertyQuotedPremium = cov.FullTermPremium
                            End If
                            'Case "10121" 'CheckBox: Minimum Premium Adjustment; note: already listed above
                            'If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            'End If
                        Case "21414" 'Edit: Contractor's Equipment - Schedule; 1/22/2015 note: ManualLimitAmount = Sum of ManualLimitAmount from ScheduledCoverages; includes Coinsurance, Deductible, Rate used for all contractors equipment
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 1/23/2015
                                ContractorsEquipmentScheduleCoinsuranceTypeId = cov.CoinsuranceTypeId
                                ContractorsEquipmentScheduleDeductibleId = cov.DeductibleId
                                ContractorsEquipmentScheduleRate = cov.Rate
                                'ContractorsEquipmentScheduleCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                ContractorsEquipmentScheduleQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21412" 'Edit: Contractor's Equipment - Small Tools Endorsement - Per Occurrence
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 1/27/2015
                                ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit = cov.ManualLimitAmount
                                'ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate = cov.Rate
                                ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId = cov.DeductibleId
                                ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21413" 'Edit: Contractor's Equipment - Small Tools Endorsement - Per Tool
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 1/27/2015
                                ContractorsEquipmentSmallToolsEndorsementPerToolLimit = cov.ManualLimitAmount
                                'ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21421" 'Edit: Contractor's Equipment - Equipment Leased / Rented From Others; 1/28/2015 note: appears that Diamond is also adding 21005 (Edit: Contractors Equipment: Non-Owned Tools & Equipment), but that cov is only valid for lob_id 25 (BOP)... already listed above in separate CASE; 4/1/2015 note: will need to move logic up to existing CASE... okay now: removed 21421 from above CASE
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 1/27/2015
                                'If cov.Checkbox = True Then '1/27/2015 note: may need this even though it's an Edit field; appears to always be True on examples
                                ContractorsEquipmentLeasedRentedFromOthersLimit = cov.ManualLimitAmount
                                'ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = cov.CoverageLimitId
                                ContractorsEquipmentLeasedRentedFromOthersRate = cov.Rate
                                ContractorsEquipmentLeasedRentedFromOthersQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21417" 'Edit: Contractor's Equipment - Rental Reimbursement
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'added 1/27/2015
                                ContractorsEquipmentRentalReimbursementLimit = cov.ManualLimitAmount
                                'ContractorsEquipmentRentalReimbursementCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                ContractorsEquipmentRentalReimbursementRate = cov.Rate
                                ContractorsEquipmentRentalReimbursementQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21410" 'Edit: Contractor's Equipment - Additional Debris Removal Expense; 1/28/2015 note: appears to be added by Diamond automatically; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true; 5/29/2015 note: new example has Checkbox true, ManualLimitAmount 6000, ApplyToWrittenPremium true, CoverageBasisTypeId 1, HasBoomRestriction true (CoverageDetail), HasWeightOfLoadExclusion true (CoverageDetail), ShouldSyncWithMasterCoverage false, CoverageLimitId 15 (6000 from ManualLimitAmount), Exposure 12
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80225" 'CheckBox: Contractors Equipment - Employee Tools; note: already listed above; 1/28/2015 note: appears to be added by Diamond automatically; 4/1/2015 note: no longer being used above
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80226" 'CheckBox: Contractors Equipment - Pollutant Cleanup and Removal; 1/28/2015 note: appears to be added by Diamond automatically
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "80227" 'CheckBox: Contractors Equipment - Spare Parts and Fuel; 1/28/2015 note: appears to be added by Diamond automatically
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015

                            End If
                        Case "21266" 'Edit: Small Tools
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                SmallToolsLimit = cov.ManualLimitAmount
                                'SmallToolsCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                SmallToolsRate = cov.Rate
                                SmallToolsDeductibleId = cov.DeductibleId
                                SmallToolsAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                SmallToolsQuotedPremium = cov.FullTermPremium
                                'added 7/15/2015 for missed CIM requirement (on small tools floater)
                                SmallToolsIsEmployeeTools = cov.IsEmployeeTools 'added 7/15/2015 for missed CIM requirement (on small tools floater)
                                SmallToolsIsToolsLeasedOrRented = cov.IsToolsLeasedOrRented 'added 7/15/2015 for missed CIM requirement (on small tools floater)
                            End If
                        Case "21267" 'Edit: Small Tools - Any One Loss Catastrophe
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                SmallToolsAnyOneLossCatastropheLimit = cov.ManualLimitAmount
                                'SmallToolsAnyOneLossCatastropheCoverageBasisTypeId = cov.CoverageBasisTypeId 'removed 4/2/2015... will default to 1
                                SmallToolsAnyOneLossCatastropheQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21256" 'Edit: Signs; corresponds w/ 21259 (Building - Signs - Schedule) on the Building; 3/24/2015 note: latest example has AdditionalInterests, ManualLimitAmount (SUM of limit on building covs 21259 [scheduled] and 21258 [unscheduled]), CoverageBasisTypeId 1, MaximumDeductible (CoverageDetail), MinimumDeductible (CoverageDetail), ValuationMethodTypeId (CoverageDetail), DeductibleId
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/25/2015
                                SignsAdditionalInterests = qqHelper.CloneObject(cov.AdditionalInterests)
                                SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = cov.CanUseAdditionalInterestNumForAdditionalInterestReconciliation 'note: ParseThruAdditionalInterests being called on Coverage above
                                SignsMaximumDeductible = cov.MaximumDeductible 'CoverageDetail
                                SignsMinimumDeductible = cov.MinimumDeductible 'CoverageDetail
                                SignsValuationMethodTypeId = cov.ValuationMethodTypeId
                                SignsDeductibleId = cov.DeductibleId
                                SignsQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21257" 'Edit: Signs - Any One Loss Catastrophe; added 3/24/2015; latest example has ManualLimitAmount, CoverageBasisTypeId 1
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 3/25/2015
                                SignsAnyOneLossCatastropheLimit = cov.ManualLimitAmount
                                SignsAnyOneLossCatastropheQuotedPremium = cov.FullTermPremium
                            End If

                            'added 1/20/2015 for Crime
                        Case "21061" 'Edit: Employee Theft; Coverage has ASLId field (see ASL table; example had 11, which is Commercial Multiple Peril (non-liability portion)); CoverageDetail uses NumberOfRatableEmployees field; 3/30/2015 note: latest example uses ManualLimitAmount (example has 50000), CoverageBasisTypeId 1 (CoverageDetail), FaithfulPerformanceOfDutyTypeId (CoverageDetail; example has 1), NumberOfAdditionalPremises (CoverageDetail; example has 1), NumberOfRatableEmployees (CoverageDetail; example has 11), DeductibleId (example has 9), ScheduledTextCollection (list of ScheduledText... different UICoverageScheduledCoverageParentTypeId for different types)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015
                                'updated w/ logic 3/30/2015 - 3/31/2015
                                EmployeeTheftLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                                EmployeeTheftDeductibleId = cov.DeductibleId 'static data
                                EmployeeTheftNumberOfRatableEmployees = cov.NumberOfRatableEmployees 'CoverageDetail
                                EmployeeTheftNumberOfAdditionalPremises = cov.NumberOfAdditionalPremises 'CoverageDetail
                                EmployeeTheftFaithfulPerformanceOfDutyTypeId = cov.FaithfulPerformanceOfDutyTypeId 'CoverageDetail; static data
                                EmployeeTheftQuotedPremium = cov.FullTermPremium

                                If cov.ScheduledTextCollection IsNot Nothing AndAlso cov.ScheduledTextCollection.Count > 0 Then
                                    For Each st As QuickQuoteScheduledText In cov.ScheduledTextCollection
                                        Select Case st.UICoverageScheduledCoverageParentTypeId
                                            Case "90" 'Employee Benefit Plans
                                                If EmployeeTheftScheduledEmployeeBenefitPlans Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftScheduledEmployeeBenefitPlans = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim ebp As String = st.Description
                                                EmployeeTheftScheduledEmployeeBenefitPlans.Add(ebp)'updated 7/21/2018 from private variable to public property
                                            Case "79" 'Designated Persons / Classes as Employees
                                                If EmployeeTheftIncludedPersonsOrClasses Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftIncludedPersonsOrClasses = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim ipc As String = st.Description
                                                EmployeeTheftIncludedPersonsOrClasses.Add(ipc)'updated 7/21/2018 from private variable to public property
                                            Case "77" 'Chairpersons and Members of Specified Committees as Employees
                                                If EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim cscm As String = st.Description
                                                EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers.Add(cscm)'updated 7/21/2018 from private variable to public property
                                            Case "87" 'Partners as Employees
                                                If EmployeeTheftScheduledPartners Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftScheduledPartners = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim sp As String = st.Description
                                                EmployeeTheftScheduledPartners.Add(sp)'updated 7/21/2018 from private variable to public property
                                            Case "82" 'Members of LLCs as Employees
                                                If EmployeeTheftScheduledLLCMembers Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftScheduledLLCMembers = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim llc As String = st.Description
                                                EmployeeTheftScheduledLLCMembers.Add(llc)'updated 7/21/2018 from private variable to public property
                                            Case "85" 'Non-Compensated Officers as Employees
                                                If EmployeeTheftScheduledNonCompensatedOfficers Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftScheduledNonCompensatedOfficers = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim nco As String = st.Description
                                                EmployeeTheftScheduledNonCompensatedOfficers.Add(nco)'updated 7/21/2018 from private variable to public property
                                            Case "80" 'Excluded Persons/Classes as Employees
                                                If EmployeeTheftExcludedPersonsOrClasses Is Nothing Then 'updated 7/21/2018 from private variable to public property
                                                    EmployeeTheftExcludedPersonsOrClasses = New List(Of String) 'updated 7/21/2018 from private variable to public property
                                                End If
                                                Dim epc As String = st.Description
                                                EmployeeTheftExcludedPersonsOrClasses.Add(epc) 'updated 7/21/2018 from private variable to public property
                                        End Select
                                    Next
                                End If
                            End If
                        Case "21071" 'Edit: Warehouse Receipts Forgery - Employee Theft; added 3/30/2015 for CRM; latest example has ManualLimitAmount (20000), CoverageBasisTypeId 1, LimitTypeId 4 (CoverageDetail; static)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21068" 'Edit: Employee Theft - Name or Position; added 3/30/2015 for CRM; latest example has Deductible (200), ManualLimitAmount (5000), CoverageBasisTypeId 1, EmployeeTheftScheduleTypeId 1 (Name; CoverageDetail; static), ShouldSyncWithMasterCoverage true (CoverageDetail), Description; 3/31/2015 note: can have multiple... 1st example was name... for position: also has AddressInformation (CoverageDetail), EmployeeTheftScheduleTypeId 2 (Position; CoverageDetail), NumberOfEmployees (CoverageDetail)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21065" 'Computer Fraud
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015
                                ComputerFraudLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                                ComputerFraudDeductibleId = cov.DeductibleId 'static data
                                ComputerFraudNumberOfRatableEmployees = cov.NumberOfRatableEmployees 'CoverageDetail
                                ComputerFraudAdditionalPremises = cov.NumberOfAdditionalPremises 'CoverageDetail
                                ComputerFraudQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21066" 'Funds Transfer Fraud
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015
                                FundsTransferFraudLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                                FundsTransferFraudDeductibleId = cov.DeductibleId 'static data
                                FundsTransferFraudNumberOfRatableEmployees = cov.NumberOfRatableEmployees 'CoverageDetail
                                FundsTransferFraudAdditionalPremises = cov.NumberOfAdditionalPremises 'CoverageDetail
                                FundsTransferFraudQuotedPremium = cov.FullTermPremium
                            End If
                        Case "21073" 'Edit: Credit/Debit Card Forgery; added 3/31/2015 for CRM; latest example has ManualLimitAmount (8000), CoverageBasisTypeId 1, LimitTypeId 5 (CoverageDetail; static data), NumberOfCardHolders (10; CoverageDetail)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21072" 'Edit: Warehouse Receipts Forgery - Forgery Or Alteration; added 3/31/2015 for CRM; latest example has ManualLimitAmount (5000), CoverageBasisTypeId 1, LimitTypeId 4
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "10081" 'Edit: Manuscript Endorsement; added 3/31/2015 for CRM; latest example has Deductible (100), ManualLimitAmount (12000), BasisTypeId 1 (CoverageDetail; static data), Comments, CoverageBasisTypeId 1, ManualPremium, ManuallyRated, PremiumChargeTypeId (CoverageDetail; static data), Rate, ShouldSyncWithMasterCoverage true, Description, OverrideFullyEarned; can have multiple
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21062" 'Edit: Inside Premises - Theft of Money and Securities; also has 11 for ASLId (like previous cov); CoverageDetail uses NumberOfPremises; 3/31/2015 note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; latest example has Checkbox true, ManualLimitAmount, CoverageBasisTypeId 1, IsIncludeGuestsProperty (CoverageDetail; boolean), IsRequireRecordOfChecks (CoverageDetail; boolean), NumberOfPremises (CoverageDetail; 3), DeductibleId 9
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015
                                'updated w/ logic 3/31/2015
                                'If cov.Checkbox = True Then 'note: may need this even though it's an Edit field; initial example xml didn't have it, but it was there after checking IsNamedPerils checkbox and re-extracting... never acquired quote, though
                                InsidePremisesTheftOfMoneyAndSecuritiesLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                                InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId = cov.DeductibleId 'static data
                                InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises = cov.NumberOfPremises 'CoverageDetail
                                InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = cov.IsIncludeGuestsProperty 'CoverageDetail
                                InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = cov.IsRequireRecordOfChecks 'CoverageDetail
                                InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21064" 'Edit: Outside The Premises; also has 11 for ASLId and used CoverageDetail.NumberOfPremises (like previous cov); 3/31/2015 note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; latest example has Checkbox true, ManualLimitAmount, CoverageBasisTypeId 1, IncludeSellingPrice (CoverageDetail; boolean), IsLimitToRobberyOnly (CoverageDetail; boolean), IsRequireRecordOfChecks (CoverageDetail; boolean), NumberOfPremises (CoverageDetail; 2), DeductibleId 15
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015
                                'updated w/ logic 3/31/2015
                                'If cov.Checkbox = True Then 'note: may need this even though it's an Edit field; initial example xml didn't have it, but it was there after checking IsNamedPerils checkbox and re-extracting... never acquired quote, though
                                OutsideThePremisesLimit = cov.ManualLimitAmount 'note: cov also has CoverageBasisTypeId 1
                                OutsideThePremisesDeductibleId = cov.DeductibleId 'static data
                                OutsideThePremisesNumberOfPremises = cov.NumberOfPremises 'CoverageDetail
                                OutsideThePremisesIncludeSellingPrice = cov.IncludeSellingPrice 'CoverageDetail
                                OutsideThePremisesLimitToRobberyOnly = cov.IsLimitToRobberyOnly 'CoverageDetail
                                OutsideThePremisesRequireRecordOfChecks = cov.IsRequireRecordOfChecks 'CoverageDetail
                                OutsideThePremisesQuotedPremium = cov.FullTermPremium
                                'End If
                            End If
                        Case "21074" 'Edit: Increase Limit of Insurance for Specified Periods - Inside Premises Theft; added 3/31/2015 for CRM; note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; can have multiple; latest example has ManualLimitAmount, CoverageBasisTypeId 1, FromDate (CoverageDetail; DateTime), NumberOfPremises (CoverageDetail; 2), ShouldSyncWithMasterCoverage true, ToDate (CoverageDetail; DateTime), Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21063" 'Edit: Inside Premises - Robbery/Safe Burglary of Other Property; added 3/31/2015 for CRM; note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; latest example has Checkbox true, ManualLimitAmount, CoverageBasisTypeId 1, IncludeSellingPrice (CoverageDetail; boolean), IsIncludeGuestsProperty (CoverageDetail; boolean), NumberOfPremises (CoverageDetail; 2), DeductibleId 8
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21075" 'Edit: Increase Limit of Insurance for Specified Periods - Inside Premises Robbery; added 3/31/2015 for CRM; note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; can have multiple; latest example has ManualLimitAmount, CoverageBasisTypeId 1, FromDate (CoverageDetail; DateTime), NumberOfPremises (CoverageDetail; 1), ShouldSyncWithMasterCoverage true, ToDate (CoverageDetail; DateTime), Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        Case "21076" 'Edit: Increase Limit of Insurance for Specified Periods - Outside Premises; added 3/31/2015 for CRM; note: only available in UI w/ Commercial Crime Program Type... was previously using Employee Theft & Forgery; can have multiple; latest example has ManualLimitAmount, CoverageBasisTypeId 1, FromDate (CoverageDetail; DateTime), NumberOfPremises, ShouldSyncWithMasterCoverage true, ToDate (CoverageDetail; DateTime), Description
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If
                        'Case "21065" 'Edit: Computer Fraud; added 3/31/2015 for CRM; latest example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfAdditionalPremises (CoverageDetail; 1), NumberOfRatableEmployees (CoverageDetail; 2), DeductibleId 4
                        '    If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                        '    End If
                        'Case "21066" 'Edit: Funds Transfer Fraud; added 3/31/2015 for CRM; latest example has ManualLimitAmount, CoverageBasisTypeId 1, NumberOfAdditionalPremises (CoverageDetail; 2), NumberOfRatableEmployees (CoverageDetail; 1), DeductibleId 8
                        '    If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                        '    End If
                        Case "21067" 'Edit: Money Orders and Counterfeit Money; added 3/31/2015 for CRM; latest example has ManualLimitAmount, CoverageBasisTypeId 1, DeductibleId 9
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Crime Then 'added IF 4/8/2015

                            End If

                            'added 5/29/2015 for CPP
                        Case "80351" 'CheckBox: Contractors Property Enhancement; valid for CGL, CPR, and CIM (all eff 5/12/2015); example on CPR part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Contractors Property Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12; example on CGL part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Contractors Liability Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12; example on CIM part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Contractors Inland Marine Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If cov.Checkbox = True Then
                                    HasContractorsEnhancement = True
                                    ContractorsEnhancementQuotedPremium = qqHelper.getSum(ContractorsEnhancementQuotedPremium, cov.FullTermPremium) 'updated 7/21/2018 from private variable to public property (GetSum param)
                                    Select Case packagePartType
                                        Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                                            CPP_CPR_ContractorsEnhancementQuotedPremium = cov.FullTermPremium
                                        Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                                            CPP_CGL_ContractorsEnhancementQuotedPremium = cov.FullTermPremium
                                        Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                                            CPP_CIM_ContractorsEnhancementQuotedPremium = cov.FullTermPremium
                                    End Select
                                End If
                            End If
                        Case "80353" 'CheckBox: Manufacturers Enhancement; valid for CGL and CPR (both eff 6/30/2015); example on CPR part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Manufacturers Property Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12; example on CGL part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Manufacturers Liability Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015
                                If cov.Checkbox = True Then
                                    HasManufacturersEnhancement = True
                                    ManufacturersEnhancementQuotedPremium = qqHelper.getSum(ManufacturersEnhancementQuotedPremium, cov.FullTermPremium) 'updated 7/21/2018 from private variable to public property (GetSum param)
                                    Select Case packagePartType
                                        Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                                            CPP_CPR_ManufacturersEnhancementQuotedPremium = cov.FullTermPremium
                                        Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                                            CPP_CGL_ManufacturersEnhancementQuotedPremium = cov.FullTermPremium
                                    End Select
                                End If
                            End If
                        Case "21409" 'Edit: Contractor's Equipment - Catastrophe Occurrence; example xml has ManualLimitAmount 34000, ApplyToWrittenPremium true, CoverageBasisTypeId 1, ShouldSyncWithMasterCoverage false, Exposure 12
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                ContractorsEquipmentCatastropheLimit = cov.ManualLimitAmount
                                ContractorsEquipmentCatastropheQuotedPremium = cov.FullTermPremium
                            End If

                            'added 3/2/2015 for Farm
                            'Case "70017" 'Combo: Occurrence Liability; already being used above; uses CoverageLimitId (10 in example)

                        Case "397" 'Edit: Aggregate Liability; uses ManualLimitAmount; 4/28/2015 note: Diamond UI appears to default this to double the Occ Liab (we have similar logic for BOP that uses the Occ Liab to determine something else)

                            'Case "70018" 'Combo: Farm_M_Medical_Payments; uses CoverageLimitId (171 in example); 4/28/2015 note: latest example has CoverageLimitId 14 (4,000); removed 4/29/2015... now being processed above w/ 21540 (CAP, GAR) and 70072 (HOM, DFR)

                        Case "80125" 'Combo: Farm All Star; uses CoverageLimitId (7 in example); 4/28/2015 note: latest example has CoverageLimitId 7 (10,000)
                            'This is a checkbox with the Farm All Star updates to include Water Backup and Water Damage combos 2/1/2024 effective date
                            'updated w/ logic 4/30/2015
                            HasFarmAllStar = cov.Checkbox
                            FarmAllStarLimitId = cov.CoverageLimitId
                            FarmAllStarQuotedPremium = cov.FullTermPremium
                        Case "144" 'Combo: Farm All Star Water Backup; uses CoverageLimitId (15 is 5,000 [inc] default - 48 is 15,000)
                            FarmAllStarWaterBackupLimitId = cov.CoverageLimitId
                        Case "80520" 'Combo: Farm All Star Water Damage; uses CoverageLimitId (15 is 5,000 [inc] default)
                            FarmAllStarWaterDamageLimitId = cov.CoverageLimitId
                        Case "80111" 'CheckBox: Farm Extender; uses Checkbox true; 4/28/2015 note: latest example didn't have Checkbox true since checkbox wasn't checked in UI
                            'updated w/ logic 4/30/2015
                            HasFarmExtender = cov.Checkbox
                            If HasFarmExtender = True Then 'updated 7/21/2018 from private variable to public property
                                FarmExtenderQuotedPremium = cov.FullTermPremium
                            End If
                        Case "40114" 'CheckBox: Farm Employer's Liability; uses Checkbox true
                            'updated w/ logic 5/5/2015
                            HasFarmEmployersLiability = cov.Checkbox
                            If HasFarmEmployersLiability = True Then 'updated 7/21/2018 from private variable to public property
                                FarmEmployersLiabilityQuotedPremium = cov.FullTermPremium
                            End If
                        Case "70009" 'Combo: Farm_O_Fire_Legal_Liability; uses ManualLimitAmount; 5/5/2015 note: actually uses CoverageLimitId... ManualLimitAmount reflects value for CoverageLimitId (9 = 50000... 50,000 in UI)
                            'updated w/ logic 5/5/2015
                            FarmFireLegalLiabilityLimitId = cov.CoverageLimitId
                            FarmFireLegalLiabilityQuotedPremium = cov.FullTermPremium
                        Case "80314" 'Combo: Contract_Growers_Care_Custody_Control; uses ManualLimitAmount, CoverageLimitId (34 in example), and Description; 5/5/2015 note: like w/ 70009 (Farm_O_Fire_Legal_Liability), ManualLimitAmount reflects value for CoverageLimitId (34 = 500000... 500,000 in UI)
                            'updated w/ logic 5/5/2015
                            FarmContractGrowersCareCustodyControlLimitId = cov.CoverageLimitId
                            FarmContractGrowersCareCustodyControlDescription = cov.Description
                            FarmContractGrowersCareCustodyControlQuotedPremium = cov.FullTermPremium

                            'these re hard-coded and duplicated - TODO: fix that
                        Case "80563"
                            FarmCustomFeedingCattleLimitId = cov.CoverageLimitId
                            FarmCustomFeedingCattleDescription = cov.Description
                            FarmCustomFeedingCattleQuotedPremium = cov.FullTermPremium
                        Case "80565"
                            FarmCustomFeedingEquineLimitId = cov.CoverageLimitId
                            FarmCustomFeedingEquineDescription = cov.Description
                            FarmCustomFeedingEquineQuotedPremium = cov.FullTermPremium
                        Case "80564"
                            FarmCustomFeedingPoultryLimitId = cov.CoverageLimitId
                            FarmCustomFeedingPoultryDescription = cov.Description
                            FarmCustomFeedingPoultryQuotedPremium = cov.FullTermPremium
                        Case "80562"
                            FarmCustomFeedingSwineLimitId = cov.CoverageLimitId
                            FarmCustomFeedingSwineDescription = cov.Description
                            FarmCustomFeedingSwineQuotedPremium = cov.FullTermPremium
                        Case "80315" 'CheckBox: Exclusion_Products_Completed_Work
                            'updated w/ logic 5/5/2015
                            HasFarmExclusionOfProductsCompletedWork = cov.Checkbox
                            If HasFarmExclusionOfProductsCompletedWork = True Then 'updated 7/21/2018 from private variable to public property
                                FarmExclusionOfProductsCompletedWorkQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80341" 'CheckBox: EPL 10 09; uses Checkbox true, CoverageBasisTypeId 1

                        Case "80342" 'CheckBox: EPL 10 10; uses Checkbox true, CoverageBasisTypeId 1, NameInformation (CoverageDetail); example had multiple... maybe just different NameInformation for each

                            'added 3/3/2015 (Farm)
                        Case "80333" 'CheckBox: EPLI - Extended Reporting; uses Checkbox true, CoverageBasisTypeId 1, ExtendedPeriodTypeId (CoverageDetail; example had 8), ManualPremium (CD), ManuallyRated true (CD), Rate (CD)

                        Case "80334" 'CheckBox: EPLI - 3rd Party Practices; uses Checkbox true, CoverageBasisTypeId 1, ManualPremium, ManuallyRated true, Rate

                        Case "80339" 'CheckBox: EPL 10 07; uses Checkbox true, CoverageBasisTypeId 1, NameInformation; example had multiple... maybe just different NameInformation for each

                        Case "80335" 'Combo: EPLI - Split Limits Prior Acts; uses CoverageBasisTypeId 1, FromDate (CoverageDetail; /DateTime), CoverageLimitId (360 in example)

                        Case "80338" 'CheckBox: EPL 10 06; uses Checkbox true, CoverageBasisTypeId 1, NameInformation; example had multiple... maybe just different NameInformation for each

                        Case "80340" 'CheckBox: EPL 10 08 - Operation Description; uses Checkbox true, CoverageBasisTypeId 1, DescriptionOfOperations (CoverageDetail)

                        Case "80344" 'CheckBox: EPL 10 08 - Designated location; uses Checkbox true, CoverageBasisTypeId 1, DesignatedJobSite (CoverageDetail); example had multiple... maybe just different DesignatedJobSite for each

                        Case "80343" 'CheckBox: EPL 10 11; uses Checkbox true, CoverageBasisTypeId 1, NameInformation

                        Case "70020" 'Combo: Farm_F_G_Deductible; CoverageLimitId (165 in example); 4/28/2015 note: latest example has CoverageLimitId 22 (500)
                            'updated w/ logic 4/30/2015
                            Farm_F_and_G_DeductibleLimitId = cov.CoverageLimitId
                            Farm_F_and_G_DeductibleQuotedPremium = cov.FullTermPremium
                        Case "40144" 'Combo: Policy Wind/Hail Deductible; nothing in example... cov probably not on test quote

                        Case "70050" 'Edit: Farm_Peak_Season_F; nothing in example... cov probably not on test quote

                        Case "80059" 'CheckBox: Equipment_Breakdown_Coverage; nothing in example... cov probably not on test quote
                            'updated w/ logic 4/30/2015; note: not available when primary residence location has F02 or F04 form type (I think)
                            HasFarmEquipmentBreakdown = cov.Checkbox
                            If HasFarmEquipmentBreakdown = True Then 'updated 7/21/2018 from private variable to public property
                                FarmEquipmentBreakdownQuotedPremium = cov.FullTermPremium
                            End If
                        Case "80572" 'CheckBox: Family Cyber Protection; 
                            'missing from sprint 2.4 checkin
                            'updated w/ logic 6/2/2020; note: only HO2, 3, 5, 6 when Occupancy Code is NOT Secondary or Seasonal
                            HasFamilyCyberProtection = cov.Checkbox
                            If HasFamilyCyberProtection = True Then
                                FamilyCyberProtectionQuotedPremium = cov.FullTermPremium
                            End If
                        Case "70177" 'CheckBox: Minimum_Premium_Adjustment; nothing in example... cov probably not on test quote; 5/29/2015 note: cov valid for DFR, FAR, and CPP

                            'added 5/5/2015 for Farm
                        Case "70138" 'CheckBox: Farm_P_Personal_and_Advertising_Injury
                            HasFarmPersonalAndAdvertisingInjury = cov.Checkbox
                            If HasFarmPersonalAndAdvertisingInjury = True Then 'updated 7/21/2018 from private variable to public property
                                FarmPersonalAndAdvertisingInjuryQuotedPremium = cov.FullTermPremium
                            End If

                            'added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443)
                        Case "80443" 'CheckBox: Auto Plus Enhancement
                            HasAutoPlusEnhancement = cov.Checkbox
                            If HasAutoPlusEnhancement = True Then 'updated 7/21/2018 from private variable to public property
                                AutoPlusEnhancement_QuotedPremium = cov.FullTermPremium
                            End If

                            'added 4/22/2017 for Comm Proposals
                        Case "21341" 'Combo: Golf Course (CIM)
                            'cov.FullTermPremium
                            'cov.CoverageLimitId 'Limit ddl; 328 = 5,000/50,000; 5/4/2017 note: other options are N/A and 10,000/100,000
                            'cov.DeductibleId 'Deductible ddl; 9 = 1,000; 5/4/2017 note: other options are 250, 500, 2,500, 5,000
                            'cov.CoinsuranceTypeId 'Coinsurance ddl; 5 - 80%
                            'cov.Rate 'Rate txtbox; example had 0.000
                            'cov.CoverageBasisTypeId 'Rate Per ddl; 1 = per 100
                            'updated 5/4/2017
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                GolfCourseQuotedPremium = cov.FullTermPremium
                                GolfCourseCoverageLimitId = cov.CoverageLimitId
                                GolfCourseDeductibleId = cov.DeductibleId
                                GolfCourseCoinsuranceTypeId = cov.CoinsuranceTypeId
                                GolfCourseRate = cov.Rate
                            End If
                        Case "50121" 'Edit: Golf Cart (CIM or PIM)
                            'cov.FullTermPremium
                            'cov.ManualLimitAmount 'Any One Cart Limit txtbox
                            'cov.DeductibleId 'Deductible ddl; 8 = 500
                            'cov.CoinsuranceTypeId 'Coinsurance ddl; 5 = 80%
                            'cov.Rate 'Rate txtbox; example had 1.250
                            'cov.CoverageBasisTypeId 'Rate Per ddl; 1 = per 100
                            'updated 5/4/2017
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                GolfCartQuotedPremium = cov.FullTermPremium
                                GolfCartManualLimitAmount = cov.ManualLimitAmount
                                GolfCartDeductibleId = cov.DeductibleId
                                GolfCartCoinsuranceTypeId = cov.CoinsuranceTypeId
                                GolfCartRate = cov.Rate
                            End If
                        Case "21343" 'Edit: Golf Cart - Catastrophe (CIM)
                            'cov.ManualLimitAmount 'Catastrophe Limit txtbox
                            'updated 5/4/2017
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                GolfCartCatastropheManualLimitAmount = cov.ManualLimitAmount
                            End If
                        Case "80223" 'CheckBox: Golf Cart - Debris Removal (CIM)
                            'cov.CoverageLimitId 'nothing on screen?; example had 15
                            'updated 5/4/2017
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                GolfCartDebrisRemovalCoverageLimitId = cov.CoverageLimitId
                            End If

                            'added 5/4/2017 for GAR
                        Case "10074" 'Combo: Registration Plates Liability (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then

                            End If
                        Case "10075" 'Combo: Registration Plates Medical Payments (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then

                            End If
                        Case "10076" 'Combo: Registration Plates Uninsured Motorist (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then

                            End If
                        Case "10077" 'Combo: Registration Plates Underinsured Motorist (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then

                            End If

                            '5/4/2017 note: original GAR example covs (file:///C:/Users/domin/Documents/QGAR010117(1087542-1)_Patch.xml): 21552, 21539, 21540, 10074, 10075, 10076, 10077
                            '5/5/2017 note: latest GAR example covs (file:///C:/Users/domin/Documents/GAR1000098(1143275-1)GKLL.xml): 21552, 21539, 21540, 10062, 10066, 21550, 21551, 21541, 21542

                        Case "21550" 'CheckBox: Physical Damage - Other Than Collision (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                                'GAR example values
                                'no cov.FullTermPremium
                                'cov.Checkbox = True
                                'cov.CoverageBasisTypeId = "1"
                                'cov.InterestInFinancedCoveredAutos = True 'requires new Cov prop (covDetail)
                                'cov.InterestInNonOwnedAuto = True 'requires new Cov prop (covDetail)
                                'cov.InterestInOwnCoveredAutos = True 'requires new Cov prop (covDetail)
                                'cov.InterestOfCreditorAsLossPayee = True 'requires new Cov prop (covDetail)
                                'cov.ShouldSyncWithMasterCoverage = True
                                'cov.TypeUsedAutomobile = True 'requires new Cov prop (covDetail); 5/4/2017 note: another checkbox for New Automobiles (maybe prop for TypeNewAutomobile)
                                '5/8/2017 note for GAR: no premium here; see Location - Case "10116" 'Edit: Physical Damage Other Than Collision Standard Open Lots (GAR only)
                                'added 5/8/2017
                                If cov.Checkbox = True Then
                                    HasPhysicalDamageOtherThanCollision = True 'updated 7/21/2018 from private variable to public property
                                    PhysicalDamageOtherThanCollisionQuotedPremium = cov.FullTermPremium 'may not be populated
                                End If
                            End If
                        Case "21551" 'CheckBox: Physical Damage - Collision (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                                'GAR example values
                                'no cov.FullTermPremium
                                'cov.Checkbox = True
                                'cov.CoverageBasisTypeId = "1"
                                'cov.InterestInFinancedCoveredAutos = True 'requires new Cov prop (covDetail)
                                'cov.InterestInNonOwnedAuto = True 'requires new Cov prop (covDetail)
                                'cov.InterestInOwnCoveredAutos = True 'requires new Cov prop (covDetail)
                                'cov.InterestOfCreditorAsLossPayee = True 'requires new Cov prop (covDetail)
                                'cov.ShouldSyncWithMasterCoverage = False
                                'cov.TypeUsedAutomobile = True 'requires new Cov prop (covDetail); 5/4/2017 note: another checkbox for New Automobiles (maybe prop for TypeNewAutomobile)
                                'cov.DeductibleId = "8" '500 in Blanket Collision Deductible ddl; 5/4/2017 note: other options are N/A, 100, 250, and 1,000
                                '5/8/2017 note for GAR: no premium here
                                'added 5/8/2017
                                If cov.Checkbox = True Then
                                    HasPhysicalDamageCollision = True 'updated 7/21/2018 from private variable to public property
                                    PhysicalDamageCollisionQuotedPremium = cov.FullTermPremium 'may not be populated
                                    PhysicalDamageCollisionDeductibleId = cov.DeductibleId
                                End If
                            End If
                        Case "21541" 'CheckBox: Garagekeepers Other than Collision (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                                'GAR example values
                                'cov.FullTermPremium = "685.00"
                                'cov.Checkbox = True
                                'cov.ManualLimitAmount = "100000.00"
                                'cov.BasisTypeId = "1" 'Direct Primary; 5/4/2017 note: other ddl options are N/A, Legal Liability, and Direct Excess
                                'cov.DeductibleCategoryTypeId = "3" 'All Perils; 5/4/2017 note: other options are N/A and Theft, Mischief or VMM
                                'cov.OtherThanCollisionTypeId = "3" 'Comprehensive; 5/4/2017 note: other ddl options are N/A and Specified Causes of Loss
                                'cov.DeductibleId = "7" '500/2500; 5/4/2017 note: other options are 100/500 and 250/1000

                                'CAP example values (file:///C:/Users/domin/Documents/CAP1008513(1143274-1)_GKLL.xml)
                                'cov.FullTermPremium = "1407.00"
                                'cov.Checkbox = True
                                'cov.ManualLimitAmount = "250000.00"
                                'cov.BasisTypeId = "1" 'Direct Primary
                                'cov.DeductibleCategoryTypeId = "3" 'All Perils
                                'cov.OtherThanCollisionTypeId = "3" 'Comprehensive
                                'cov.DeductibleId = "7"

                                '5/8/2017 note for GAR: has premium here
                                'added 5/8/2017
                                If cov.Checkbox = True Then
                                    HasGarageKeepersOtherThanCollision = True 'updated 7/21/2018 from private variable to public property
                                    GarageKeepersOtherThanCollisionQuotedPremium = cov.FullTermPremium
                                    GarageKeepersOtherThanCollisionManualLimitAmount = cov.ManualLimitAmount
                                    GarageKeepersOtherThanCollisionBasisTypeId = cov.BasisTypeId
                                    GarageKeepersOtherThanCollisionDeductibleCategoryTypeId = cov.DeductibleCategoryTypeId
                                    GarageKeepersOtherThanCollisionTypeId = cov.OtherThanCollisionTypeId
                                    GarageKeepersOtherThanCollisionDeductibleId = cov.DeductibleId
                                End If
                            End If
                        Case "21542" 'CheckBox: Garagekeepers Collision (CAP, GAR)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                                'GAR example values
                                'cov.FullTermPremium = "368.00"
                                'cov.Checkbox = True
                                'cov.ManualLimitAmount = "100000.00"
                                'cov.BasisTypeId = "1" 'Direct Primary
                                'cov.DeductibleId = "8" '500; 5/4/2017 note: other options are N/A, 100, 250

                                '5/8/2017 note for GAR: has premium here
                                'added 5/8/2017
                                If cov.Checkbox = True Then
                                    HasGarageKeepersCollision = True 'updated 7/21/2018 from private variable to public property
                                    GarageKeepersCollisionQuotedPremium = cov.FullTermPremium
                                    GarageKeepersCollisionManualLimitAmount = cov.ManualLimitAmount
                                    GarageKeepersCollisionBasisTypeId = cov.BasisTypeId
                                    GarageKeepersCollisionDeductibleId = cov.DeductibleId
                                End If
                            End If
                        Case "80446"
                            OwnersLesseesorContractorsCompletedOperationsTotalPremium = cov.FullTermPremium

                        Case "80534" 'added 5-9-18
                            'PriorBodilyInjuryLimitId = cov.CoverageDescription
                            'updated 9/14/2018
                            PriorBodilyInjuryLimitId = cov.CoverageLimitId

                        Case "21548" 'Combo: Underinsured Motorist Bodily Injury Liability; added 9/25/2018; CAP, GAR
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.Garage Then
                                UnderinsuredMotoristBodilyInjuryLiabilityLimitId = cov.CoverageLimitId
                                UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = cov.FullTermPremium
                            End If

                        Case "80536" 'CheckBox: Illinois Contractors - Home Repair and Remodeling; added 10/24/2018; CGL and BOP in IL only
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then
                                If cov.Checkbox = True Then
                                    HasIllinoisContractorsHomeRepairAndRemodeling = True
                                    IllinoisContractorsHomeRepairAndRemodelingManualLimitAmount = cov.ManualLimitAmount
                                    IllinoisContractorsHomeRepairAndRemodelingQuotedPremium = cov.FullTermPremium
                                End If
                            End If

                        Case "80545" 'CheckBox: Catastrophe (other than Certified Acts of Terrorism); added 11/28/2018; WCP IL only
                            CatastropheOtherThanCertifiedActsOfTerrorismQuotedPremium = cov.FullTermPremium
                        Case "80547"
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then
                                If cov.Checkbox = True Then
                                    CyberLiability = True
                                    CyberLiabilityDeductibleId = cov.DeductibleId
                                    CyberLiabilityPremium = cov.FullTermPremium
                                    CyberLiabilityLimitId = cov.CoverageLimitId
                                    CyberLiabilityTypeId = cov.CoverageTypeId
                                End If
                            End If
                        Case "80551" 'CheckBox: Kentucky Special Fund Assessment; added 7/15/2019 for KY; WCP KY only
                            KentuckySpecialFundAssessmentQuotedPremium = cov.FullTermPremium

                        Case "100000" 'CheckBox: Food Manufacturers Enhancement; valid for CGL and CPR (eff 9/1/2021); example on CPR part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Food Manufacturers Property Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12; example on CGL part: Checkbox true, ApplyToWrittenPremium true, CoverageBasisTypeId 1, CoverageDescription Food Manufacturers Liability Enhancement, ShouldSyncWithMasterCoverage true, Exposure 12
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then 'added IF 4/8/2015
                                If cov.Checkbox = True Then
                                    HasFoodManufacturersEnhancement = True
                                    FoodManufacturersEnhancementQuotedPremium = qqHelper.getSum(FoodManufacturersEnhancementQuotedPremium, cov.FullTermPremium)
                                    Select Case packagePartType
                                        Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                                            CPP_CPR_FoodManufacturersEnhancementQuotedPremium = cov.FullTermPremium
                                        Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                                            CPP_CGL_FoodManufacturersEnhancementQuotedPremium = cov.FullTermPremium
                                    End Select
                                End If
                            End If

    '"Umbrella"
                        Case "342" 'Umbrella limit
                            UmbrellaCoverageLimitId = cov.CoverageLimitId
                            UmbrellaCoverageCalculation = cov.Calc
                            UmbrellaLimitPremium = cov.FullTermPremium
                        Case "30003" 'Umbrella SIR
                            UmbrellaSelfInsuredRetentionLimitId = cov.CoverageLimitId
                        Case "343" 'Umbrella Auto UmUim
                            UmbrellaUmUimLimitId = cov.CoverageLimitId
                            UmbrellaUmUimCoverageCalculation = cov.Calc
                            UmbrellaUmUimPremium = cov.FullTermPremium
                        Case "100009" 'Property Plus Enhancement Endorsement, CPR & CPP; Added 6/27/2022 for task 75780 MLW
                            If (packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability) Then
                                If cov.Checkbox = True Then
                                    If LobType = QuickQuoteLobType.CommercialProperty OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then
                                        Has_PackageCPR_PlusEnhancementEndorsement = True
                                        PackageCPR_PlusEnhancementEndorsementQuotedPremium = qqHelper.getSum(PackageCPR_PlusEnhancementEndorsementQuotedPremium, cov.FullTermPremium)
                                    ElseIf LobType = QuickQuoteLobType.CommercialGeneralLiability OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then
                                        Has_PackageGL_PlusEnhancementEndorsement = True
                                        PackageGL_PlusEnhancementEndorsementQuotedPremium = qqHelper.getSum(PackageGL_PlusEnhancementEndorsementQuotedPremium, cov.FullTermPremium)
                                    End If
                                End If
                            End If
                    End Select
                Next
            End If
        End Sub
        Private Sub ParseThruScheduledCoverages() 'added 4/8/2015
            ParseThruScheduledCoverages(VersionAndLobInfo.ScheduledCoverages) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
        End Sub
        'added 1/19/2015 for CIM; updated 1/20/2015
        'Public Sub ParseThruScheduledCoverages()
        '2/19/2015 - changed from public to private
        'Private Sub ParseThruScheduledCoverages()
        'Private Sub ParseThruScheduledCoverages(ByVal schCovs As List(Of QuickQuoteScheduledCoverage), Optional ByVal packagePartType As QuickQuotePackagePartType = QuickQuotePackagePartType.None) 'added new params 4/8/2015 for CPP
        Private Sub ParseThruScheduledCoverages(ByVal schCovs As List(Of QuickQuoteScheduledCoverage), Optional ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType = QuickQuoteXML.QuickQuotePackagePartType.None) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            'If _ScheduledCoverages IsNot Nothing AndAlso _ScheduledCoverages.Count > 0 Then
            'updated 4/8/2015 to use param
            If schCovs IsNot Nothing AndAlso schCovs.Count > 0 Then
                'For Each sc As QuickQuoteScheduledCoverage In _ScheduledCoverages
                'updated 4/8/2015 to use param
                For Each sc As QuickQuoteScheduledCoverage In schCovs
                    'added 1/22/2015; note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseScheduledCoverageNumForScheduledCoverageReconciliation = False Then 'updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If sc.HasValidScheduledCoverageNum = True Then
                            CanUseScheduledCoverageNumForScheduledCoverageReconciliation = True 'updated 7/21/2018 from private variable to public property
                        End If
                    End If
                    sc.ParseThruAdditionalInterests() 'added 1/22/2015; will be called here and then canUse property will be copied to the objects being used
                    'Select Case sc.UICoverageScheduledCoverageParentTypeId 'may need to use different logic depending on this... TO-DO
                    '    Case "35" 'Jobsites - BR - Schedule (21348)

                    '    Case "11" 'Contractors Equipment (21521); 1/20/2015 note: examples showed AdditionalInterests on ScheduledCoverage
                    '        'If _ContractorsEquipmentScheduledCoverages Is Nothing Then
                    '        '    _ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage)
                    '        'End If
                    'End Select
                    'If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                    '    For Each c As QuickQuoteCoverage In sc.Coverages
                    '        Select Case c.CoverageCodeId
                    '            Case "21348" 'Edit: Builder's Risk - Schedule; CoverageDetail includes AddressInformation field (for free-flow address)

                    '            Case "21521" 'Edit: Contractor's Equipment - Scheduled Equipment; CoverageDetail includes fields for ManufacturerName, Model, SerialNumber, Year

                    '        End Select
                    '    Next
                    'End If
                    'updated 1/22/2015
                    Select Case sc.UICoverageScheduledCoverageParentTypeId 'may need to use different logic depending on this... TO-DO
                        Case "35" 'Jobsites - BR - Schedule (21348)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                'updated w/ logic 2/18/2015
                                If VersionAndLobInfo.BuildersRiskScheduledLocations Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.BuildersRiskScheduledLocations = New List(Of QuickQuoteBuildersRiskScheduledLocation) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                Dim sl As New QuickQuoteBuildersRiskScheduledLocation
                                With sl
                                    .ScheduledCoverageNum = sc.ScheduledCoverageNum
                                    If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                        For Each c As QuickQuoteCoverage In sc.Coverages
                                            Select Case c.CoverageCodeId
                                                Case "21348" 'Edit: Builder's Risk - Schedule; CoverageDetail includes AddressInformation field (for free-flow address); 4/1/2015 note: example has ShouldSyncWithMasterCoverage true... now updated to use in xml
                                                    'updated w/ logic 2/18/2015
                                                    .Limit = c.ManualLimitAmount
                                                    .AddressInfo = c.AddressInformation
                                                    .QuotedPremium = c.FullTermPremium 'may update logic to SUM up all coverage prems
                                                    '2/19/2015 note: also fields for PermissionToOccupyAfter (DateTime; CoverageDetail) and WaitingPeriodTypeId

                                                    'added more covs 2/19/2015
                                                Case "21349" 'Edit: Builder's Risk - Schedule - Soft Cost - Any 30 Day; ManualLimitAmount and Rate and CoverageBasisTypeId 1

                                                Case "21350" 'Edit: Builder's Risk - Schedule - Soft Cost - Any One Occurrence; ManualLimitAmount and CoverageBasisTypeId 1; may need Rate too (if it either goes w/ 30-day or one-occurrence cov)

                                                Case "21351" 'Edit: Builder's Risk - Schedule - Rental Income - Any 30 Day; ManualLimitAmount and Rate and CoverageBasisTypeId 1

                                                Case "21352" 'Edit: Builder's Risk - Schedule - Rental Income - Any One Occurrence; ManualLimitAmount and CoverageBasisTypeId 1; may need Rate too (if it either goes w/ 30-day or one-occurrence cov)

                                                Case "21353" 'Edit: Builder's Risk - Schedule - Extra Expense - Any 30 Day; ManualLimitAmount and CoverageBasisTypeId 1; may need Rate too (if it either goes w/ 30-day or one-occurrence cov)

                                                Case "21354" 'Edit: Builder's Risk - Schedule - Extra Expense - Any One Occurrence; ManualLimitAmount and CoverageBasisTypeId 1; may need Rate too (if it either goes w/ 30-day or one-occurrence cov)

                                            End Select
                                        Next
                                    End If
                                End With
                                VersionAndLobInfo.BuildersRiskScheduledLocations.Add(sl) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            End If
                        Case "11" 'Contractors Equipment (21521); 1/20/2015 note: examples showed AdditionalInterests on ScheduledCoverage
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If VersionAndLobInfo.ContractorsEquipmentScheduledCoverages Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.ContractorsEquipmentScheduledCoverages = New List(Of QuickQuoteContractorsEquipmentScheduledCoverage) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                Dim ce As New QuickQuoteContractorsEquipmentScheduledCoverage
                                With ce
                                    .AdditionalInterests = qqHelper.CloneObject(sc.AdditionalInterests)
                                    .ScheduledCoverageNum = sc.ScheduledCoverageNum
                                    .CanUseAdditionalInterestNumForAdditionalInterestReconciliation = sc.CanUseAdditionalInterestNumForAdditionalInterestReconciliation
                                    If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                        For Each c As QuickQuoteCoverage In sc.Coverages
                                            Select Case c.CoverageCodeId
                                                Case "21521" 'Edit: Contractor's Equipment - Scheduled Equipment; CoverageDetail includes fields for ManufacturerName, Model, SerialNumber, Year; 4/1/2015 note: example has ShouldSyncWithMasterCoverage true... now updated to use in xml
                                                    .ManualLimitAmount = c.ManualLimitAmount
                                                    .Description = c.Description
                                                    .ManufacturerName = c.ManufacturerName
                                                    .Model = c.Model
                                                    .SerialNumber = c.SerialNumber
                                                    .ValuationMethodTypeId = c.ValuationMethodTypeId
                                                    .Year = c.Year
                                                    .QuotedPremium = c.FullTermPremium 'added 1/28/2015; may update logic to SUM up all coverage prems
                                            End Select
                                        Next
                                    End If
                                End With
                                VersionAndLobInfo.ContractorsEquipmentScheduledCoverages.Add(ce) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            End If
                        Case "72" 'Terminal Locations (21448); added 3/17/2015 for CIM; has Address node; can have multiple
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        Select Case c.CoverageCodeId
                                            Case "21448" 'Edit: Owner's Cargo - Terminal; example has ManualLimitAmount, CoverageBasisTypeId 1, NameInformation

                                        End Select
                                    Next
                                End If
                            End If
                        Case "73" 'Terminal Locations (21458); added 3/17/2015 for CIM; has Address node; can have multiple
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        Select Case c.CoverageCodeId
                                            Case "21458" 'Edit: Transportation - Terminal; example has ManualLimitAmount, CoverageBasisTypeId 1, NameInformation

                                        End Select
                                    Next
                                End If
                            End If
                        Case "94" 'Terminal Locations (80248); added 3/18/2015 for CIM; has Address node; can have multiple
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then 'added IF 4/8/2015
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        Select Case c.CoverageCodeId
                                            Case "80248" 'Edit: Motor Truck Cargo - Scheduled Vehicle - Scheduled Terminal; example has ManualLimitAmount, CoverageBasisTypeId 1, NameInformation

                                        End Select
                                    Next
                                End If
                            End If
                        Case "116" '3/9/2017 - BOP stuff
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None Then 'added IF 4/8/2015
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    If VersionAndLobInfo.PhotographyScheduledCoverages Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                        VersionAndLobInfo.PhotographyScheduledCoverages = New List(Of QuickQuoteCoverage) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    End If
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        If c IsNot Nothing Then
                                            Select Case c.CoverageCodeId
                                                Case "21248"
                                                    VersionAndLobInfo.PhotographyScheduledCoverages.Add(qqHelper.CloneObject(c)) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                            End Select
                                        End If
                                    Next
                                    If VersionAndLobInfo.PhotographyScheduledCoverages IsNot Nothing AndAlso VersionAndLobInfo.PhotographyScheduledCoverages.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                        HasPhotographyCoverageScheduledCoverages = True 'updated 7/21/2018 from private variable to public property
                                    End If
                                End If
                            End If

                            'added 4/22/2017 for Comm Proposals
                        Case "26" 'Golf Course (CIM)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                'updated 5/4/2017
                                If VersionAndLobInfo.ScheduledGolfCourses Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.ScheduledGolfCourses = New List(Of QuickQuoteScheduledGolfCourse) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                Dim gc As New QuickQuoteScheduledGolfCourse
                                'sc.Address 'need to add property to ScheduledCoverage object; holds golf course address
                                'updated 5/4/2017
                                gc.Address = qqHelper.CloneObject(sc.Address)
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        Select Case c.CoverageCodeId
                                            Case "21507" 'CheckBox: Golf Course - Scheduled Golf Course
                                                'c.Checkbox 'example has true
                                                'c.Description 'Course Name txtbox
                                                'c.IsFairways 'need to add property to Coverage object; Fairways chkbox
                                                'c.CoveredHolesFairways 'need to add property to Coverage object; Fairways Covered Holes txtbox
                                                'c.IsGreens 'need to add property to Coverage object; Greens chkbox
                                                'c.CoveredHolesGreens 'need to add property to Coverage object; Greens Covered Holes txtbox
                                                'c.IsTees 'need to add property to Coverage object; Tees chkbox
                                                'c.CoveredHolesTees 'need to add property to Coverage object; Tees Covered Holes txtbox
                                                'c.IsTrees 'need to add property to Coverage object; Trees, Shrubs and Plants chkbox
                                                'c.CoveredHolesTrees 'need to add property to Coverage object; Trees, Shrubs and Plants Covered Holes txtbox
                                                'c.ShouldSyncWithMasterCoverage 'true
                                                'updated 5/4/2017
                                                gc.Description = c.Description
                                                gc.IsFairways = c.IsFairways
                                                gc.CoveredHolesFairways = c.CoveredHolesFairways
                                                gc.IsGreens = c.IsGreens
                                                gc.CoveredHolesGreens = c.CoveredHolesGreens
                                                gc.IsTees = c.IsTees
                                                gc.CoveredHolesTees = c.CoveredHolesTees
                                                gc.IsTrees = c.IsTrees
                                                gc.CoveredHolesTrees = c.CoveredHolesTrees
                                        End Select
                                    Next
                                End If
                                'updated 5/4/2017
                                VersionAndLobInfo.ScheduledGolfCourses.Add(gc) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            End If
                        Case "25" 'Golf Cart Courses (CIM)
                            If packagePartType = Nothing OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.None OrElse packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then
                                'updated 5/4/2017
                                If VersionAndLobInfo.ScheduledGolfCartCourses Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.ScheduledGolfCartCourses = New List(Of QuickQuoteScheduledGolfCartCourse) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                Dim gc As New QuickQuoteScheduledGolfCartCourse
                                'sc.Address 'need to add property to ScheduledCoverage object; holds golf course address
                                'updated 5/4/2017
                                gc.Address = qqHelper.CloneObject(sc.Address)
                                If sc.Coverages IsNot Nothing AndAlso sc.Coverages.Count > 0 Then
                                    For Each c As QuickQuoteCoverage In sc.Coverages
                                        Select Case c.CoverageCodeId
                                            Case "21508" 'CheckBox: Golf Cart - Scheduled Golf Course
                                                'c.Checkbox 'example has true
                                                'c.Description 'Course Name txtbox
                                                'c.NumberOfCarts 'need to add property to Coverage object; Number of Carts txtbox
                                                'c.ShouldSyncWithMasterCoverage 'true
                                                'updated 5/4/2017
                                                gc.Description = c.Description
                                                gc.NumberOfCarts = c.NumberOfCarts
                                        End Select
                                    Next
                                End If
                                'updated 5/4/2017
                                VersionAndLobInfo.ScheduledGolfCartCourses.Add(gc) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            End If
                    End Select
                Next
            End If
        End Sub
        'added 3/26/2015 for CRM... only lob so far that appears to use list... even though you only enter 1 from UI
        Private Sub ParseThruClassificationCodes()
            If VersionAndLobInfo.ClassificationCodes IsNot Nothing AndAlso VersionAndLobInfo.ClassificationCodes.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each cc As QuickQuoteClassificationCode In VersionAndLobInfo.ClassificationCodes
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseClassificationCodeNumForClassificationCodeReconciliation = False Then 'updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If cc.HasValidClassificationCodeNum = True Then
                            CanUseClassificationCodeNumForClassificationCodeReconciliation = True
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        'added 2/19/2015 for Farm
        Private Sub ParseThruFarmIncidentalLimitCoverages()
            If VersionAndLobInfo.FarmIncidentalLimitCoverages IsNot Nothing AndAlso VersionAndLobInfo.FarmIncidentalLimitCoverages.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each c As QuickQuoteCoverage In VersionAndLobInfo.FarmIncidentalLimitCoverages
                    'Select Case c.CoverageCodeId
                    '    Case "70151" 'Edit: Farm_Farm_Records; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "70152" 'Combo: Farm_Pollutant_Clean_Up_and_Removal; ManualLimitAmount, ManualLimitAmountIncluded; 5/12/2015 note: also has CoverageLimitId when set (corresponding limit is combined w/ ManualLimitIncluded to get ManualLimitAmount)

                    '    Case "70155" 'Edit: Farm_Property_in_Care_Custody_or_Control_of_Common_Carrier; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "70156" 'Edit: Farm_Glass_Breakage_in_Cabs; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "70159" 'Edit: Farm_Signs; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "80114" 'Edit: Farm_Signs_Electric; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "70142" 'Edit: Farm_Fire_Department_Service_Charge; ManualLimitAmount, ManualLimitAmountIncluded

                    '    Case "70149" 'CheckBox: Farm_Debris_Removal; Checkbox true

                    'End Select
                    'updated 5/12/2015
                    If VersionAndLobInfo.FarmIncidentalLimits Is Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                        VersionAndLobInfo.FarmIncidentalLimits = New List(Of QuickQuoteFarmIncidentalLimit) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                    Dim fil As New QuickQuoteFarmIncidentalLimit
                    With fil
                        .CoverageCodeId = c.CoverageCodeId
                        .IncreasedLimitId = c.CoverageLimitId
                        .IncreasedLimit = c.ManualLimitIncreased
                        .IncludedLimit = c.ManualLimitIncluded
                        .TotalLimit = c.ManualLimitAmount
                        .Premium = c.FullTermPremium
                    End With
                    'added okayToAdd logic 5/13/2015; previously adding every time
                    Dim okayToAdd As Boolean = True
                    If fil.CoverageType = QuickQuoteFarmIncidentalLimit.QuickQuoteFarmIncidentalLimitType.Farm_Debris_Removal AndAlso c.Checkbox = False Then
                        okayToAdd = False
                    End If
                    If okayToAdd = True Then
                        VersionAndLobInfo.FarmIncidentalLimits.Add(fil) 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                Next
            End If
        End Sub
        'added 2/21/2015 for Farm
        Private Sub ParseThruScheduledPersonalPropertyCoverages()
            If VersionAndLobInfo.ScheduledPersonalPropertyCoverages IsNot Nothing AndAlso VersionAndLobInfo.ScheduledPersonalPropertyCoverages.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each c As QuickQuoteScheduledPersonalPropertyCoverage In VersionAndLobInfo.ScheduledPersonalPropertyCoverages
                    If VersionAndLobInfo.CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = False Then 'updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If c.HasValidScheduledFarmPersonalPropertyNum = True Then
                            CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = True
                        End If
                    End If
                    'c.CheckCoverage()
                    'c.CheckEarthquakeCoverage()
                    'c.ParseThruPeakSeasonCoverages()
                    'updated 5/11/2015 to call 1 method to handle all
                    c.CheckCoveragesAndSetTotalPremium()
                Next
            End If
        End Sub
        Private Sub ParseThruUnscheduledPersonalPropertyCoverages()
            If VersionAndLobInfo.UnscheduledPersonalPropertyCoverage IsNot Nothing Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                If VersionAndLobInfo.CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = False Then 'updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                    If VersionAndLobInfo.UnscheduledPersonalPropertyCoverage.HasValidUnscheduledFarmPersonalPropertyNum = True Then
                        CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = True
                    End If
                End If
                '_UnscheduledPersonalPropertyCoverage.CheckCoverage()
                '_UnscheduledPersonalPropertyCoverage.CheckEarthquakeCoverage()
                '_UnscheduledPersonalPropertyCoverage.ParseThruPeakSeasonCoverages()
                '_UnscheduledPersonalPropertyCoverage.ParseThruExclusions()
                'updated 5/11/2015 to call 1 method to handle all
                VersionAndLobInfo.UnscheduledPersonalPropertyCoverage.CheckCoveragesAndSetTotalPremium()
            End If
        End Sub
        Private Sub ParseThruOptionalCoverages() 'added 2/25/2015
            If VersionAndLobInfo.OptionalCoverages IsNot Nothing AndAlso VersionAndLobInfo.OptionalCoverages.Count > 0 Then 'updated 7/21/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each oc As QuickQuoteOptionalCoverage In VersionAndLobInfo.OptionalCoverages
                    If VersionAndLobInfo.CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = False Then 'added 5/12/2015 for reconciliation; updated 7/21/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If oc.HasValidOptionalCoveragesNum = True Then
                            CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = True
                        End If
                    End If
                    oc.CheckCoverage()

                    'added 5/11/2016
                    Select Case oc.CoverageCodeId
                        Case "80362" 'CheckBox: Farm Machinery - Special Coverage - Coverage G
                            FarmMachinerySpecialCoverageG_QuotedPremium = oc.Premium
                    End Select
                Next
            End If
        End Sub
        'added 8/22/2012 for GL
        'Public Sub ParseThruGLClassifications()
        'changed to Private 7/18/2013
        ''' <summary>
        ''' used to parse thru GL classifications and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruGLClassifications()
            'added 8/28/2012
            GL_PremisesPolicyLevelQuotedPremium = ""
            GL_ProductsPolicyLevelQuotedPremium = ""

            If VersionAndLobInfo.GLClassifications IsNot Nothing AndAlso VersionAndLobInfo.GLClassifications.Count > 0 Then 'updated 7/19/2018 from _GLClassifications; could have used QuickQuoteObject's GLClassifications property, but we shouldn't need to go through Parent logic
                For Each gl As QuickQuoteGLClassification In VersionAndLobInfo.GLClassifications
                    gl.ParseThruCoverages()
                    'added 8/28/2012
                    GL_PremisesPolicyLevelQuotedPremium = qqHelper.getSum(GL_PremisesPolicyLevelQuotedPremium, gl.PremisesQuotedPremium) 'updated 7/21/2018 from private variable to public property (GetSum param)
                    GL_ProductsPolicyLevelQuotedPremium = qqHelper.getSum(GL_ProductsPolicyLevelQuotedPremium, gl.ProductsQuotedPremium) 'updated 7/21/2018 from private variable to public property (GetSum param)
                Next
            End If
        End Sub
        'Public Sub ParseThruInclusionsExclusions()
        'changed to Private 7/18/2013
        ''' <summary>
        ''' used to parse thru inclusions/exclusions and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruInclusionsExclusions()
            If VersionAndLobInfo.InclusionsExclusions IsNot Nothing AndAlso VersionAndLobInfo.InclusionsExclusions.Count > 0 Then 'updated 7/19/2018 from _InclusionsExclusions; could have used QuickQuoteObject's InclusionsExclusions property, but we shouldn't need to go through Parent logic
                For Each ie As QuickQuoteInclusionExclusion In VersionAndLobInfo.InclusionsExclusions
                    Select Case ie.TypeId
                        Case "14" 'Inclusion of Sole Proprietors, Partners, Officers and Others; 10/6/2018 note: WC 00 03 10; valid for IN and IL (should probably go on GoverningState when multi-state)
                            '_HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = True
                            'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't want to go through SET logic
                            VersionAndLobInfo.Set_HasInclusionOfSoleProprietorsPartnersOfficersAndOthers_Variable(True)
                            'added 8/13/2012
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    AddInclusionOfSoleProprietorFromScheduledItem(si)
                                Next
                            End If
                        Case "15" 'Waiver of Subrogation; 10/6/2018 note: WC 00 03 13; valid for IN and IL (should probably go on GoverningState when multi-state)
                            '_HasWaiverOfSubrogation = True
                            'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't want to go through SET logic
                            VersionAndLobInfo.Set_HasWaiverOfSubrogation_Variable(True)
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    '_WaiverOfSubrogationNumberOfWaivers += 1
                                    'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't want to go through SET logic
                                    VersionAndLobInfo.Set_WaiverOfSubrogationNumberOfWaivers_Variable(VersionAndLobInfo.Get_WaiverOfSubrogationNumberOfWaivers_Variable() + 1)
                                    If si.WaiverOfSubrogationAmountTypeId <> "" Then
                                        'WaiverOfSubrogationPremiumId = si.WaiverOfSubrogationAmountTypeId
                                        'updated 7/19/2018
                                        VersionAndLobInfo.Set_WaiverOfSubrogationPremiumId_Variable(si.WaiverOfSubrogationAmountTypeId)
                                    End If
                                    'added 8/13/2012
                                    AddWaiverOfSubrogationFromScheduledItem(si)
                                Next
                            End If
                        Case "12" 'Exclusion of Amish Workers; 10/6/2018 note: WC 00 03 08; valid for IN only
                            '_HasExclusionOfAmishWorkers = True
                            'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't want to go through SET logic
                            VersionAndLobInfo.Set_HasExclusionOfAmishWorkers_Variable(True)
                            'added 8/13/2012
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    AddExclusionOfAmishWorkerFromScheduledItem(si)
                                Next
                            End If
                        Case "13" 'Exclusion of Sole Proprietors, Partners, Officers and Others; 10/6/2018 note: WC 00 03 08; valid for IN only
                            '_HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = True
                            'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't want to go through SET logic
                            VersionAndLobInfo.Set_HasExclusionOfSoleProprietorsPartnersOfficersAndOthers_Variable(True)
                            'added 8/13/2012
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    AddExclusionOfSoleProprietorFromScheduledItem(si)
                                Next
                            End If
                        Case "283" '4-14-17 Inclusion for Blanket Waiver of Subro WCP; 10/6/2018 note: WCP 1001; valid for IN and IL (should probably go on GoverningState when multi-state)
                            BlanketWaiverOfSubrogation = "4" 'updated 7/23/2018 from private variable to public property
                            BlanketWaiverOfSubrogationQuotedPremium = "0.00" 'updated 7/23/2018 from private variable to public property

                        Case "287" 'Illinois Sole Proprietor, Partners, Officers, Members of Limited Liability Corporations and other Excluded EE's and Emloyment Excl Endt; added 10/6/2018; note: WC 12 03 07; valid for IL only
                            VersionAndLobInfo.Set_HasExclusionOfSoleProprietorsPartnersOfficersAndOthers_IL_Variable(True)
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    AddExclusionOfSoleProprietorFromScheduledItem_IL(si)
                                Next
                            End If

                        Case "291" 'Kentucky Rejection of Coverage Endorsement; added 4/26/2019
                            VersionAndLobInfo.Set_HasKentuckyRejectionOfCoverageEndorsement_Variable(True)
                            If ie.ScheduledItems IsNot Nothing AndAlso ie.ScheduledItems.Count > 0 Then
                                For Each si As QuickQuoteInclusionExclusionScheduledItem In ie.ScheduledItems
                                    AddKentuckyRejectionOfCoverageEndorsementFromScheduledItem(si)
                                Next
                            End If

                    End Select
                Next
            End If
        End Sub
        'Public Sub ParseThruScheduledRatings()
        'changed to Private 7/18/2013
        ''' <summary>
        ''' used to parse thru scheduled ratings and set different properties (for IRPM)
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruScheduledRatings()
            If VersionAndLobInfo.ScheduledRatings IsNot Nothing AndAlso VersionAndLobInfo.ScheduledRatings.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each sr As QuickQuoteScheduledRating In VersionAndLobInfo.ScheduledRatings
                    Select Case sr.ScheduleRatingTypeId
                        Case "4" 'IRPM
                            If sr.RiskCharacteristicTypeId <> "" AndAlso IsNumeric(sr.RiskCharacteristicTypeId) AndAlso CInt(sr.RiskCharacteristicTypeId) > 0 Then
                                Select Case CInt(sr.RiskCharacteristicTypeId)
                                    Case "14" 'Management/Cooperation
                                        IRPM_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "1" 'Location
                                        IRPM_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "9" 'Building Features
                                        IRPM_BuildingFeatures = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_BuildingFeaturesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "2" 'Premises
                                        IRPM_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "4" 'Employees
                                        IRPM_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "12" 'Protection
                                        IRPM_Protection = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ProtectionDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "15" 'Catastrophic Hazards
                                        IRPM_CatostrophicHazards = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CatostrophicHazardsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "16" 'Management Experience
                                        IRPM_ManagementExperience = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ManagementExperienceDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "3" 'Equipment
                                        IRPM_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "19" 'Medical Facilities
                                        IRPM_MedicalFacilities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_MedicalFacilitiesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "17" 'Classification Peculiarities
                                        IRPM_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ClassificationPeculiaritiesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'added 10/17/2012 for CPR IRPM
                                    Case "5" 'Management
                                        IRPM_CPR_Management = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CPR_ManagementDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "24" 'Premises and Equipment
                                        IRPM_CPR_PremisesAndEquipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CPR_PremisesAndEquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'added 4/30/2015 for FAR IRPM
                                    Case "26" 'Care and condition of equipment and premises
                                        'added logic 6/11/2015
                                        IRPM_FAR_CareConditionOfEquipPremises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_CareConditionOfEquipPremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "27" 'Cooperation of owners or operators with insured's recommendations with respect to structure features, segregation, and control hazards and maintenance of protective equipment
                                        'added logic 6/11/2015
                                        IRPM_FAR_Cooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_CooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "28" 'Damage susceptibility
                                        'added logic 6/11/2015
                                        IRPM_FAR_DamageSusceptibility = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_DamageSusceptibilityDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "29" 'Dispersion or concentration
                                        'added logic 6/11/2015
                                        IRPM_FAR_DispersionOrConcentration = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_DispersionOrConcentrationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "30" 'Superior or inferior structure features
                                        'added logic 6/11/2015
                                        IRPM_FAR_SuperiorOrInferiorStructureFeatures = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "31" 'Use of Rice Hulls or flame retardant bedding
                                        'added logic 6/11/2015
                                        IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "32" 'Location, accessibility, congestion, and exposures
                                        'added logic 6/11/2015
                                        IRPM_FAR_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "33" 'Miscellaneous protect features or hazards
                                        'added logic 6/11/2015
                                        IRPM_FAR_MiscProtectFeaturesOrHazards = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "34" 'Roof condition and other windstorm exposures
                                        'added logic 6/11/2015
                                        IRPM_FAR_RoofCondition = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_RoofConditionDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "35" 'Storage practices and hazardous operations
                                        'added logic 6/11/2015
                                        IRPM_FAR_StoragePracticesAndHazardousOperations = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "36" 'Past losses relative to number or exposure units and subsequent preventative measures
                                        'added logic 6/11/2015
                                        IRPM_FAR_PastLosses = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_PastLossesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "37" 'Supporting Business
                                        'added logic 6/11/2015
                                        IRPM_FAR_SupportingBusiness = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_SupportingBusinessDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "38" 'Regular on-site inspections by Turkey Provider
                                        'added logic 6/11/2015
                                        IRPM_FAR_RegularOnsiteInspections = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_RegularOnsiteInspectionsDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            Else 'use description
                                Select Case UCase(sr.Description)
                                    Case "MANAGEMENT/COOPERATION"
                                        IRPM_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "LOCATION"
                                        IRPM_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "BUILDING FEATURES"
                                        IRPM_BuildingFeatures = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_BuildingFeaturesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "PREMISES"
                                        IRPM_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EMPLOYEES"
                                        IRPM_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "PROTECTION"
                                        IRPM_Protection = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ProtectionDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "CATASTROPHIC HAZARDS"
                                        IRPM_CatostrophicHazards = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CatostrophicHazardsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "MANAGEMENT EXPERIENCE"
                                        IRPM_ManagementExperience = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ManagementExperienceDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EQUIPMENT"
                                        IRPM_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "MEDICAL FACILITIES"
                                        IRPM_MedicalFacilities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_MedicalFacilitiesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "CLASSIFICATION PECULIARITIES"
                                        IRPM_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_ClassificationPeculiaritiesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'added 10/17/2012 for CPR IRPM
                                    Case "MANAGEMENT"
                                        IRPM_CPR_Management = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CPR_ManagementDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "PREMISES AND EQUIPMENT"
                                        IRPM_CPR_PremisesAndEquipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CPR_PremisesAndEquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'added 4/30/2015 for FAR IRPM
                                    Case UCase("Care and condition of equipment and premises") '26
                                        'added logic 6/11/2015
                                        IRPM_FAR_CareConditionOfEquipPremises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_CareConditionOfEquipPremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Cooperation of owners or operators with insured's recommendations with respect to structure features, segregation, and control hazards and maintenance of protective equipment") '27
                                        'added logic 6/11/2015
                                        IRPM_FAR_Cooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_CooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Damage susceptibility") '28
                                        'added logic 6/11/2015
                                        IRPM_FAR_DamageSusceptibility = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_DamageSusceptibilityDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Dispersion or concentration") '29
                                        'added logic 6/11/2015
                                        IRPM_FAR_DispersionOrConcentration = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_DispersionOrConcentrationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Superior or inferior structure features") '30
                                        'added logic 6/11/2015
                                        IRPM_FAR_SuperiorOrInferiorStructureFeatures = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Use of Rice Hulls or flame retardant bedding") '31
                                        'added logic 6/11/2015
                                        IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Location, accessibility, congestion, and exposures") '32
                                        'added logic 6/11/2015
                                        IRPM_FAR_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Miscellaneous protect features or hazards") '33
                                        'added logic 6/11/2015
                                        IRPM_FAR_MiscProtectFeaturesOrHazards = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_MiscProtectFeaturesOrHazardsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Roof condition and other windstorm exposures") '34
                                        'added logic 6/11/2015
                                        IRPM_FAR_RoofCondition = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_RoofConditionDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Storage practices and hazardous operations") '35
                                        'added logic 6/11/2015
                                        IRPM_FAR_StoragePracticesAndHazardousOperations = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_StoragePracticesAndHazardousOperationsDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Past losses relative to number or exposure units and subsequent preventative measures") '36
                                        'added logic 6/11/2015
                                        IRPM_FAR_PastLosses = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_PastLossesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Supporting Business") '37
                                        'added logic 6/11/2015
                                        IRPM_FAR_SupportingBusiness = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_SupportingBusinessDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case UCase("Regular on-site inspections by Turkey Provider") '38
                                        'added logic 6/11/2015
                                        IRPM_FAR_RegularOnsiteInspections = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_FAR_RegularOnsiteInspectionsDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            End If
                        Case "5" 'Premises
                            If sr.RiskCharacteristicTypeId <> "" AndAlso IsNumeric(sr.RiskCharacteristicTypeId) AndAlso CInt(sr.RiskCharacteristicTypeId) > 0 Then
                                Select Case CInt(sr.RiskCharacteristicTypeId)
                                    Case "14" 'Management/Cooperation
                                        'If _IRPM_GL_ManagementCooperation = "" Then
                                        IRPM_GL_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "1" 'Location
                                        'If _IRPM_GL_Location = "" Then
                                        IRPM_GL_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "2" 'Premises
                                        'If _IRPM_GL_Premises = "" Then
                                        IRPM_GL_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "4" 'Employees
                                        'If _IRPM_GL_Employees = "" Then
                                        IRPM_GL_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "3" 'Equipment
                                        'If _IRPM_GL_Equipment = "" Then
                                        IRPM_GL_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "17" 'Classification Peculiarities
                                        'If _IRPM_GL_ClassificationPeculiarities = "" Then
                                        IRPM_GL_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ClassificationPeculiaritiesDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                        'End If
                                End Select
                            Else 'use description
                                Select Case UCase(sr.Description)
                                    Case "MANAGEMENT/COOPERATION"
                                        'If _IRPM_GL_ManagementCooperation = "" Then
                                        IRPM_GL_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "LOCATION"
                                        'If _IRPM_GL_Location = "" Then
                                        IRPM_GL_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "PREMISES"
                                        'If _IRPM_GL_Premises = "" Then
                                        IRPM_GL_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "EMPLOYEES"
                                        'If _IRPM_GL_Employees = "" Then
                                        IRPM_GL_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "EQUIPMENT"
                                        'If _IRPM_GL_Equipment = "" Then
                                        IRPM_GL_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "CLASSIFICATION PECULIARITIES"
                                        'If _IRPM_GL_ClassificationPeculiarities = "" Then
                                        IRPM_GL_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ClassificationPeculiaritiesDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                        'End If
                                End Select
                            End If
                        Case "6" 'Products
                            If sr.RiskCharacteristicTypeId <> "" AndAlso IsNumeric(sr.RiskCharacteristicTypeId) AndAlso CInt(sr.RiskCharacteristicTypeId) > 0 Then
                                Select Case CInt(sr.RiskCharacteristicTypeId)
                                    Case "14" 'Management/Cooperation
                                        'If _IRPM_GL_ManagementCooperation = "" Then
                                        IRPM_GL_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "1" 'Location
                                        'If _IRPM_GL_Location = "" Then
                                        IRPM_GL_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "2" 'Premises
                                        'If _IRPM_GL_Premises = "" Then
                                        IRPM_GL_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "4" 'Employees
                                        'If _IRPM_GL_Employees = "" Then
                                        IRPM_GL_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "3" 'Equipment
                                        'If _IRPM_GL_Equipment = "" Then
                                        IRPM_GL_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "17" 'Classification Peculiarities
                                        'If _IRPM_GL_ClassificationPeculiarities = "" Then
                                        IRPM_GL_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ClassificationPeculiaritiesDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                        'End If
                                End Select
                            Else 'use description
                                Select Case UCase(sr.Description)
                                    Case "MANAGEMENT/COOPERATION"
                                        'If _IRPM_GL_ManagementCooperation = "" Then
                                        IRPM_GL_ManagementCooperation = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ManagementCooperationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "LOCATION"
                                        'If _IRPM_GL_Location = "" Then
                                        IRPM_GL_Location = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_LocationDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "PREMISES"
                                        'If _IRPM_GL_Premises = "" Then
                                        IRPM_GL_Premises = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_PremisesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "EMPLOYEES"
                                        'If _IRPM_GL_Employees = "" Then
                                        IRPM_GL_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "EQUIPMENT"
                                        'If _IRPM_GL_Equipment = "" Then
                                        IRPM_GL_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                        'End If
                                    Case "CLASSIFICATION PECULIARITIES"
                                        'If _IRPM_GL_ClassificationPeculiarities = "" Then
                                        IRPM_GL_ClassificationPeculiarities = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_GL_ClassificationPeculiaritiesDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                        'End If
                                End Select
                            End If
                        Case "1" 'Liability (added logic 10/3/2012 for CAP IRPM)
                            If sr.RiskCharacteristicTypeId <> "" AndAlso IsNumeric(sr.RiskCharacteristicTypeId) AndAlso CInt(sr.RiskCharacteristicTypeId) > 0 Then
                                Select Case CInt(sr.RiskCharacteristicTypeId)
                                    Case "5" 'Management
                                        IRPM_CAP_Management = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_ManagementDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "4" 'Employees
                                        IRPM_CAP_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "3" 'Equipment
                                        IRPM_CAP_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "13" 'Safety Organization
                                        IRPM_CAP_SafetyOrganization = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_SafetyOrganizationDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            Else 'use description
                                Select Case UCase(sr.Description)
                                    Case "MANAGEMENT"
                                        IRPM_CAP_Management = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_ManagementDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EMPLOYEES"
                                        IRPM_CAP_Employees = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EmployeesDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EQUIPMENT"
                                        IRPM_CAP_Equipment = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EquipmentDesc = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "SAFETY ORGANIZATION"
                                        IRPM_CAP_SafetyOrganization = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_SafetyOrganizationDesc = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            End If
                        Case "2" 'Physical Damage (added logic 10/3/2012 for CAP IRPM)
                            If sr.RiskCharacteristicTypeId <> "" AndAlso IsNumeric(sr.RiskCharacteristicTypeId) AndAlso CInt(sr.RiskCharacteristicTypeId) > 0 Then
                                Select Case CInt(sr.RiskCharacteristicTypeId)
                                    Case "5" 'Management
                                        IRPM_CAP_Management_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_ManagementDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "4" 'Employees
                                        IRPM_CAP_Employees_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EmployeesDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "3" 'Equipment
                                        IRPM_CAP_Equipment_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EquipmentDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "13" 'Safety Organization
                                        IRPM_CAP_SafetyOrganization_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_SafetyOrganizationDesc_Phys_Damage = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            Else 'use description
                                Select Case UCase(sr.Description)
                                    Case "MANAGEMENT"
                                        IRPM_CAP_Management_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_ManagementDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EMPLOYEES"
                                        IRPM_CAP_Employees_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EmployeesDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "EQUIPMENT"
                                        IRPM_CAP_Equipment_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_EquipmentDesc_Phys_Damage = sr.Remark'updated 7/23/2018 from private variable to public property
                                    Case "SAFETY ORGANIZATION"
                                        IRPM_CAP_SafetyOrganization_Phys_Damage = sr.RiskFactor 'updated 7/23/2018 from private variable to public property
                                        IRPM_CAP_SafetyOrganizationDesc_Phys_Damage = sr.Remark 'updated 7/23/2018 from private variable to public property
                                End Select
                            End If
                    End Select
                Next
            End If
        End Sub
        ''' <summary>
        ''' used to parse thru vehicles and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruVehicles() 'added 8/31/2012
            'updated 12/12/2012 for CAP auto symbols
            CAP_Liability_WouldHaveSymbol8 = False 'updated 7/23/2018 from private variable to public property
            CAP_Liability_WouldHaveSymbol9 = False 'updated 7/23/2018 from private variable to public property
            CAP_Comprehensive_WouldHaveSymbol8 = False 'updated 7/23/2018 from private variable to public property
            CAP_Collision_WouldHaveSymbol8 = False 'updated 7/23/2018 from private variable to public property

            If VersionAndLobInfo.Vehicles IsNot Nothing AndAlso VersionAndLobInfo.Vehicles.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic

                'updated 12/12/2012 for CAP auto symbols
                Dim hasLiability As Boolean = False
                Dim hasComprehensiveCoverage As Boolean = False
                Dim hasCollisionCoverage As Boolean = False

                'added 4/24/2014 - goes w/ logic to convert vehicle.DriverNum props to QQ sequential driver #s when needed (when rated xml is used or quote xml was created from Diamond image)
                Dim driverCount As Integer = 0
                Dim diamondDriverNumList As New List(Of Integer) 'may need to change to string so it can handle for integer or guid; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                'updated to handle for integer or guid
                'Dim diamondDriverNumList As New List(Of String)
                If VersionAndLobInfo.Drivers IsNot Nothing Then
                    driverCount = VersionAndLobInfo.Drivers.Count 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    If driverCount > 0 AndAlso CanUseDriverNumForDriverReconciliation = True Then 'updated 4/25/2014 to also check reconciliation flag since that's the only time the driverNumberList will be used; updated 7/23/2018 from private variable to public property
                        For Each d As QuickQuoteDriver In VersionAndLobInfo.Drivers 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            If d.HasValidDriverNum = True Then 'may need to change to look for non-empty string if handling for integer or guid; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                                diamondDriverNumList.Add(CInt(d.DriverNum))
                            Else
                                diamondDriverNumList.Add(0)
                            End If
                            'updated to handle for integer or guid; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                            'If d.DriverNum <> "" Then
                            '    diamondDriverNumList.Add(d.DriverNum)
                            'Else
                            '    diamondDriverNumList.Add("0")
                            'End If
                        Next
                    End If
                End If

                'added 10/18/2018 for getting diamondNums for packageParts; could also include None at the front of list and remove normal call below
                Dim packagePartTypes As New List(Of QuickQuoteXML.QuickQuotePackagePartType)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Package)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Crime)
                packagePartTypes.Add(QuickQuoteXML.QuickQuotePackagePartType.Garage)

                For Each v As QuickQuoteVehicle In VersionAndLobInfo.Vehicles 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    v.HasConvertedCoverages = False 'added 2/20/2014 so this is also reset on the 1st rate; was previously only being done in FinalizeQuickQuoteLight
                    v.ParseThruCoverages()
                    'updated 10/3/2012 to sum premiums
                    VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium = qqHelper.getSum(VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium, v.Liability_UM_UIM_QuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_MedicalPaymentsQuotedPremium = qqHelper.getSum(VehiclesTotal_MedicalPaymentsQuotedPremium, v.MedicalPaymentsQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium, v.UninsuredMotoristLiabilityQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium, v.UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    'VehiclesTotal_UM_UIM_CovsQuotedPremium = ""'*finish 10/4/2012
                    VehiclesTotal_ComprehensiveCoverageQuotedPremium = qqHelper.getSum(VehiclesTotal_ComprehensiveCoverageQuotedPremium, v.ComprehensiveQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_CollisionCoverageQuotedPremium = qqHelper.getSum(VehiclesTotal_CollisionCoverageQuotedPremium, v.CollisionQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_TowingAndLaborQuotedPremium = qqHelper.getSum(VehiclesTotal_TowingAndLaborQuotedPremium, v.TowingAndLaborQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_RentalReimbursementQuotedPremium = qqHelper.getSum(VehiclesTotal_RentalReimbursementQuotedPremium, v.RentalReimbursementQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    'Dec_CAP_OptCovs_Premium = ""'*finish 10/4/2012

                    'added 5/22/2014 for PPA
                    VehiclesTotal_BodilyInjuryLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_BodilyInjuryLiabilityQuotedPremium, v.BodilyInjuryLiabilityQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_PropertyDamageQuotedPremium = qqHelper.getSum(VehiclesTotal_PropertyDamageQuotedPremium, v.PropertyDamageQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_UninsuredCombinedSingleQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredCombinedSingleQuotedPremium, v.UninsuredCombinedSingleQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium, v.UninsuredMotoristPropertyDamageQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium, v.UninsuredMotoristPropertyDamageDeductibleQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium = qqHelper.getSum(VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium, v.PollutionLiabilityBroadenedCoverageQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_TransportationExpenseQuotedPremium = qqHelper.getSum(VehiclesTotal_TransportationExpenseQuotedPremium, v.TransportationExpenseQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_AutoLoanOrLeaseQuotedPremium = qqHelper.getSum(VehiclesTotal_AutoLoanOrLeaseQuotedPremium, v.AutoLoanOrLeaseQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_TapesAndRecordsQuotedPremium = qqHelper.getSum(VehiclesTotal_TapesAndRecordsQuotedPremium, v.TapesAndRecordsQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_SoundEquipmentQuotedPremium = qqHelper.getSum(VehiclesTotal_SoundEquipmentQuotedPremium, v.SoundEquipmentQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_ElectronicEquipmentQuotedPremium = qqHelper.getSum(VehiclesTotal_ElectronicEquipmentQuotedPremium, v.ElectronicEquipmentQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_TripInterruptionQuotedPremium = qqHelper.getSum(VehiclesTotal_TripInterruptionQuotedPremium, v.TripInterruptionQuotedPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                    'added 10/12/2018
                    VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium = qqHelper.getSum(VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium, v.UnderinsuredCombinedSingleLimitQuotedPremium) 'covCodeId 296 (PPA IL only)
                    VehiclesTotal_UninsuredBodilyInjuryQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredBodilyInjuryQuotedPremium, v.UninsuredBodilyInjuryQuotedPremium) 'covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL)
                    VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium = qqHelper.getSum(VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium, v.UnderinsuredBodilyInjuryQuotedPremium) 'covCodeId 295 (PPA IL only)

                    'added 4/2/2014
                    VehiclesTotal_PremiumFullTerm = qqHelper.getSum(VehiclesTotal_PremiumFullTerm, v.PremiumFullTerm) 'might want to initialize at top of Finalize method; updated 7/23/2018 from private variable to public property (GetSum param)

                    'added 5/10/2017 for GAR (also CAP)
                    AutoLiabilityTotalPremium = qqHelper.getSum(AutoLiabilityTotalPremium, v.Liability_UM_UIM_QuotedPremium) 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs; updated 7/23/2018 from private variable to public property (GetSum param)
                    AutoMedicalPaymentsTotalPremium = qqHelper.getSum(AutoMedicalPaymentsTotalPremium, v.MedicalPaymentsQuotedPremium) 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs; updated 7/23/2018 from private variable to public property (GetSum param)
                    Auto_UM_UIM_TotalPremium = qqHelper.getSum(Auto_UM_UIM_TotalPremium, v.UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs; updated 7/23/2018 from private variable to public property (GetSum param)
                    Auto_UM_UIM_TotalPremium = qqHelper.getSum(Auto_UM_UIM_TotalPremium, v.UninsuredMotoristLiabilityQuotedPremium) 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs; updated 7/23/2018 from private variable to public property (GetSum param)
                    AutoComprehensiveTotalPremium = qqHelper.getSum(AutoComprehensiveTotalPremium, v.ComprehensiveQuotedPremium) 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs; updated 7/23/2018 from private variable to public property (GetSum param)
                    AutoCollisionTotalPremium = qqHelper.getSum(AutoCollisionTotalPremium, v.CollisionQuotedPremium) 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs; updated 7/23/2018 from private variable to public property (GetSum param)

                    'added 5/26/2017
                    VehiclesTotal_CAP_GAR_TotalCoveragesPremium = qqHelper.getSum(VehiclesTotal_CAP_GAR_TotalCoveragesPremium, v.CAP_GAR_TotalCoveragesPremium) 'should essentially match CAP_GAR_VehicleLevelCovs_Premium; updated 7/23/2018 from private variable to public property (GetSum param)
                    VehiclesTotal_TotalCoveragesPremium = qqHelper.getSum(VehiclesTotal_TotalCoveragesPremium, v.TotalCoveragesPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)

                    'updated 12/12/2012 for CAP auto symbols
                    If hasLiability = False AndAlso v.HasLiability_UM_UIM = True Then
                        hasLiability = True
                    End If
                    If hasComprehensiveCoverage = False AndAlso v.HasComprehensive = True Then
                        hasComprehensiveCoverage = True
                    End If
                    If hasCollisionCoverage = False AndAlso v.HasCollision = True Then
                        hasCollisionCoverage = True
                    End If
                    'v.MoveUpVehicleDrivers() 'added 1/20/2014 for PPA; may not use; may also need to verify that vehicle drivers exist

                    'added 4/22/2014; should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseVehicleNumForVehicleReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If v.HasValidVehicleNum = True Then
                            CanUseVehicleNumForVehicleReconciliation = True
                        End If
                    End If
                    'added 10/18/2018; shouldn't do anything since the other diamondNums aren't set yet; will need to remove code above if None is added to PackagePartTypes list
                    If packagePartTypes IsNot Nothing AndAlso packagePartTypes.Count > 0 Then
                        For Each ppt As QuickQuoteXML.QuickQuotePackagePartType In packagePartTypes
                            If CanUseVehicleNumFlagForPackagePartType(ppt) = False Then
                                If v.HasValidVehicleNum(ppt) = True Then
                                    SetCanUseVehicleNumFlagForPackagePartType(True, ppt)
                                End If
                            End If
                        Next
                    End If
                    v.ParseThruVehicleSymbols() 'added 4/24/2014 for reconciliation
                    v.ParseThruAdditionalInterests() 'added 4/29/2014 for reconciliation
                    v.ParseThruScheduledItems() 'added 4/29/2014 for reconciliation

                    'added 4/24/2014 - convert vehicle.DriverNum props to QQ sequential driver #s when needed (when rated xml is used or quote xml was created from Diamond image)
                    '1st clear out anything that's not valid (non-numeric or 0 or driverCount = 0); may need to be updated to handle for integer or string (guid)
                    'If v.PrincipalDriverNum <> "" AndAlso (driverCount = 0 OrElse IsNumeric(v.PrincipalDriverNum) = False OrElse CInt(v.PrincipalDriverNum) = 0) Then
                    '    v.PrincipalDriverNum = ""
                    'End If
                    'If v.OccasionalDriver1Num <> "" AndAlso (driverCount = 0 OrElse IsNumeric(v.OccasionalDriver1Num) = False OrElse CInt(v.OccasionalDriver1Num) = 0) Then
                    '    v.OccasionalDriver1Num = ""
                    'End If
                    'If v.OccasionalDriver2Num <> "" AndAlso (driverCount = 0 OrElse IsNumeric(v.OccasionalDriver2Num) = False OrElse CInt(v.OccasionalDriver2Num) = 0) Then
                    '    v.OccasionalDriver2Num = ""
                    'End If
                    'If v.OccasionalDriver3Num <> "" AndAlso (driverCount = 0 OrElse IsNumeric(v.OccasionalDriver3Num) = False OrElse CInt(v.OccasionalDriver3Num) = 0) Then
                    '    v.OccasionalDriver3Num = ""
                    'End If
                    'updated 5/17/2019 to better handle for invalid nums (i.e. -5)
                    If String.IsNullOrWhiteSpace(v.PrincipalDriverNum) = False AndAlso (driverCount = 0 OrElse qqHelper.IsPositiveIntegerString(v.PrincipalDriverNum) = False) Then
                        v.PrincipalDriverNum = ""
                    End If
                    If String.IsNullOrWhiteSpace(v.OccasionalDriver1Num) = False AndAlso (driverCount = 0 OrElse qqHelper.IsPositiveIntegerString(v.OccasionalDriver1Num) = False) Then
                        v.OccasionalDriver1Num = ""
                    End If
                    If String.IsNullOrWhiteSpace(v.OccasionalDriver2Num) = False AndAlso (driverCount = 0 OrElse qqHelper.IsPositiveIntegerString(v.OccasionalDriver2Num) = False) Then
                        v.OccasionalDriver2Num = ""
                    End If
                    If String.IsNullOrWhiteSpace(v.OccasionalDriver3Num) = False AndAlso (driverCount = 0 OrElse qqHelper.IsPositiveIntegerString(v.OccasionalDriver3Num) = False) Then
                        v.OccasionalDriver3Num = ""
                    End If
                    'updated to handle for integer or guid; no longer validating that it's numeric since it could be guid... still can't be 0; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                    'If v.PrincipalDriverNum <> "" AndAlso (driverCount = 0 OrElse (IsNumeric(v.PrincipalDriverNum) = True AndAlso CInt(v.PrincipalDriverNum) = 0)) Then
                    '    v.PrincipalDriverNum = ""
                    'End If
                    'If v.OccasionalDriver1Num <> "" AndAlso (driverCount = 0 OrElse (IsNumeric(v.OccasionalDriver1Num) = True AndAlso CInt(v.OccasionalDriver1Num) = 0)) Then
                    '    v.OccasionalDriver1Num = ""
                    'End If
                    'If v.OccasionalDriver2Num <> "" AndAlso (driverCount = 0 OrElse (IsNumeric(v.OccasionalDriver2Num) = True AndAlso CInt(v.OccasionalDriver2Num) = 0)) Then
                    '    v.OccasionalDriver2Num = ""
                    'End If
                    'If v.OccasionalDriver3Num <> "" AndAlso (driverCount = 0 OrElse (IsNumeric(v.OccasionalDriver3Num) = True AndAlso CInt(v.OccasionalDriver3Num) = 0)) Then
                    '    v.OccasionalDriver3Num = ""
                    'End If

                    'If (_XmlType = QuickQuoteXmlType.Response OrElse _TotalQuotedPremium <> "") AndAlso CanUseDriverNumForDriverReconciliation = True Then 'updated 7/23/2018 from private variable to public property
                    'updated 7/27/2018
                    'If (XmlType = QuickQuoteXmlType.Response OrElse qqHelper.IsPositiveDecimalString(TotalQuotedPremium) = True) AndAlso CanUseDriverNumForDriverReconciliation = True Then 'updated 7/23/2018 from private variable to public property
                    'updated 5/17/2019 to better handle Endorsements/ReadOnly or other scenarios where we're storing the actual image (or converted image) without ResponseData around it; we don't current write entire Agency info (just agencyId, code, producers), but we'll have to come up with something else if we eventually do
                    'If (XmlType = QuickQuoteXmlType.Response OrElse qqHelper.IsPositiveDecimalString(TotalQuotedPremium) = True OrElse (Agency IsNot Nothing AndAlso ((Agency.Name IsNot Nothing AndAlso String.IsNullOrWhiteSpace(Agency.Name.DisplayName) = False) OrElse (Agency.Address IsNot Nothing AndAlso String.IsNullOrWhiteSpace(Agency.Address.DisplayAddress) = False)))) AndAlso CanUseDriverNumForDriverReconciliation = True Then
                    'updated again 5/17/2019 to use new Helper method (to centralize logic)
                    If helper.QuickQuoteObjectAppearsToBeFromDiamondImage(Me) = True AndAlso CanUseDriverNumForDriverReconciliation = True Then
                        'rated xml (response) or quote xml created from image (non-empty string premium) will have Diamond vehicle.DriverNum values; can use non-empty string premium since BuildXml method will never write FullTermPremium; 7/7/2017 note: _TotalQuotedPremium could come back as formatted $0.00 since property has formatting... may need to update to look for positiveDecimalString; done 7/27/2018
                        'numeric and <> 0 can be implied if not empty string since it would've been reset to empty string above if not; driverCount will also be > 0 and diamondDriverNumList will have values if logic gets here; may need to be updated to handle for integer or string (guid)
                        Dim diamondDriverNumListIndex As Integer = 0
                        If v.PrincipalDriverNum <> "" Then
                            diamondDriverNumListIndex = diamondDriverNumList.IndexOf(CInt(v.PrincipalDriverNum))
                            '4/24/2014 note: 0 integer does evaluate as nothing; IndexOf w/ no hit returns -1
                            If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex) <> 0 Then
                                'value was found in list and the value isn't 0
                                v.PrincipalDriverNum = CInt(diamondDriverNumListIndex + 1).ToString
                            Else
                                v.PrincipalDriverNum = ""
                            End If
                        End If
                        If v.OccasionalDriver1Num <> "" Then
                            diamondDriverNumListIndex = diamondDriverNumList.IndexOf(CInt(v.OccasionalDriver1Num))
                            If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex) <> 0 Then
                                'value was found in list and the value isn't 0
                                v.OccasionalDriver1Num = CInt(diamondDriverNumListIndex + 1).ToString
                            Else
                                v.OccasionalDriver1Num = ""
                            End If
                        End If
                        If v.OccasionalDriver2Num <> "" Then
                            diamondDriverNumListIndex = diamondDriverNumList.IndexOf(CInt(v.OccasionalDriver2Num))
                            If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex) <> 0 Then
                                'value was found in list and the value isn't 0
                                v.OccasionalDriver2Num = CInt(diamondDriverNumListIndex + 1).ToString
                            Else
                                v.OccasionalDriver2Num = ""
                            End If
                        End If
                        If v.OccasionalDriver3Num <> "" Then
                            diamondDriverNumListIndex = diamondDriverNumList.IndexOf(CInt(v.OccasionalDriver3Num))
                            If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex) <> 0 Then
                                'value was found in list and the value isn't 0
                                v.OccasionalDriver3Num = CInt(diamondDriverNumListIndex + 1).ToString
                            Else
                                v.OccasionalDriver3Num = ""
                            End If
                        End If
                        'updated to handle for integer or guid; no longer validating that it's numeric since it could be guid... still can't be 0; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                        'If v.PrincipalDriverNum <> "" Then
                        '    diamondDriverNumListIndex = diamondDriverNumList.IndexOf(v.PrincipalDriverNum)
                        '    If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex).ToString <> "0" Then
                        '        'value was found in list and the value isn't "0"
                        '        v.PrincipalDriverNum = CInt(diamondDriverNumListIndex + 1).ToString
                        '    Else
                        '        v.PrincipalDriverNum = ""
                        '    End If
                        'End If
                        'If v.OccasionalDriver1Num <> "" Then
                        '    diamondDriverNumListIndex = diamondDriverNumList.IndexOf(v.OccasionalDriver1Num)
                        '    If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex).ToString <> "0" Then
                        '        'value was found in list and the value isn't "0"
                        '        v.OccasionalDriver1Num = CInt(diamondDriverNumListIndex + 1).ToString
                        '    Else
                        '        v.OccasionalDriver1Num = ""
                        '    End If
                        'End If
                        'If v.OccasionalDriver2Num <> "" Then
                        '    diamondDriverNumListIndex = diamondDriverNumList.IndexOf(v.OccasionalDriver2Num)
                        '    If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex).ToString <> "0" Then
                        '        'value was found in list and the value isn't "0"
                        '        v.OccasionalDriver2Num = CInt(diamondDriverNumListIndex + 1).ToString
                        '    Else
                        '        v.OccasionalDriver2Num = ""
                        '    End If
                        'End If
                        'If v.OccasionalDriver3Num <> "" Then
                        '    diamondDriverNumListIndex = diamondDriverNumList.IndexOf(v.OccasionalDriver3Num)
                        '    If diamondDriverNumListIndex >= 0 AndAlso diamondDriverNumList(diamondDriverNumListIndex).ToString <> "0" Then
                        '        'value was found in list and the value isn't "0"
                        '        v.OccasionalDriver3Num = CInt(diamondDriverNumListIndex + 1).ToString
                        '    Else
                        '        v.OccasionalDriver3Num = ""
                        '    End If
                        'End If
                    Else
                        'just clear out anything higher than driver count; numeric can be implied if not empty string since it would've been reset to empty string above if not
                        If v.PrincipalDriverNum <> "" AndAlso CInt(v.PrincipalDriverNum) > driverCount Then
                            v.PrincipalDriverNum = ""
                        End If
                        If v.OccasionalDriver1Num <> "" AndAlso CInt(v.OccasionalDriver1Num) > driverCount Then
                            v.OccasionalDriver1Num = ""
                        End If
                        If v.OccasionalDriver2Num <> "" AndAlso CInt(v.OccasionalDriver2Num) > driverCount Then
                            v.OccasionalDriver2Num = ""
                        End If
                        If v.OccasionalDriver3Num <> "" AndAlso CInt(v.OccasionalDriver3Num) > driverCount Then
                            v.OccasionalDriver3Num = ""
                        End If
                        'updated to handle for integer or guid; no longer validating that it's numeric above since it could be guid... still can't be 0; shouldn't handle for guid since it won't be able to reconcile it if it's not already saved on Diamond image
                        'If v.PrincipalDriverNum <> "" AndAlso (IsNumeric(v.PrincipalDriverNum) = False OrElse CInt(v.PrincipalDriverNum) > driverCount) Then
                        '    v.PrincipalDriverNum = ""
                        'End If
                        'If v.OccasionalDriver1Num <> "" AndAlso (IsNumeric(v.OccasionalDriver1Num) = False OrElse CInt(v.OccasionalDriver1Num) > driverCount) Then
                        '    v.OccasionalDriver1Num = ""
                        'End If
                        'If v.OccasionalDriver2Num <> "" AndAlso (IsNumeric(v.OccasionalDriver2Num) = False OrElse CInt(v.OccasionalDriver2Num) > driverCount) Then
                        '    v.OccasionalDriver2Num = ""
                        'End If
                        'If v.OccasionalDriver3Num <> "" AndAlso (IsNumeric(v.OccasionalDriver3Num) = False OrElse CInt(v.OccasionalDriver3Num) > driverCount) Then
                        '    v.OccasionalDriver3Num = ""
                        'End If
                    End If
                Next

                'added 10/12/2018
                VehiclesTotal_UM_UIM_CombinedSingleLimitQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredCombinedSingleQuotedPremium, VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium) 'VehiclesTotal_UninsuredCombinedSingleQuotedPremium: covCodeId 10007 (PPA IN only) or covCodeId 7 (PPA IL only) + VehiclesTotal_UnderinsuredCombinedSingleLimitQuotedPremium: covCodeId 296 (PPA IL only)
                VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium, VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium) 'VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium: covCodeId 8 (PPA IN/IL, CAP IN/IL, GAR IN) + VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium: covCodeId 30013 (CAP IN/IL, GAR IN) + VehiclesTotal_UninsuredBodilyInjuryQuotedPremium: covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL) + VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium: covCodeId 295 (PPA IL only)
                VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium, VehiclesTotal_UninsuredBodilyInjuryQuotedPremium) 'VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium: covCodeId 8 (PPA IN/IL, CAP IN/IL, GAR IN) + VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium: covCodeId 30013 (CAP IN/IL, GAR IN) + VehiclesTotal_UninsuredBodilyInjuryQuotedPremium: covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL) + VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium: covCodeId 295 (PPA IL only)
                VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium = qqHelper.getSum(VehiclesTotal_UM_UIM_BodilyInjuryLiabilityQuotedPremium, VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium) 'VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium: covCodeId 8 (PPA IN/IL, CAP IN/IL, GAR IN) + VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium: covCodeId 30013 (CAP IN/IL, GAR IN) + VehiclesTotal_UninsuredBodilyInjuryQuotedPremium: covCodeId 294 (PPA IL, HOM IN, DFR IN, FAR IN/IL) + VehiclesTotal_UnderinsuredBodilyInjuryQuotedPremium: covCodeId 295 (PPA IL only)

                'added 12/12/2012 for CAP auto symbols
                If hasLiability = True Then
                    If HasHiredBorrowedLiability = True Then 'updated 7/23/2018 from private variable to public property
                        CAP_Liability_WouldHaveSymbol8 = True 'updated 7/23/2018 from private variable to public property
                    End If
                    If HasNonOwnershipLiability = True Then 'updated 7/23/2018 from private variable to public property
                        CAP_Liability_WouldHaveSymbol9 = True 'updated 7/23/2018 from private variable to public property
                    End If
                End If
                If HasHiredCarPhysicalDamage = True Then 'updated 7/23/2018 from private variable to public property
                    If hasComprehensiveCoverage = True Then
                        CAP_Comprehensive_WouldHaveSymbol8 = True 'updated 7/23/2018 from private variable to public property
                    End If
                    If hasCollisionCoverage = True Then
                        CAP_Collision_WouldHaveSymbol8 = True 'updated 7/23/2018 from private variable to public property
                    End If
                End If
            End If
        End Sub
        'added 4/22/2014 for driver reconciliation
        Private Sub ParseThruDrivers()
            If VersionAndLobInfo.Drivers IsNot Nothing AndAlso VersionAndLobInfo.Drivers.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each d As QuickQuoteDriver In VersionAndLobInfo.Drivers
                    'added 4/22/2014; should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseDriverNumForDriverReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If d.HasValidDriverNum = True Then
                            CanUseDriverNumForDriverReconciliation = True
                            'Exit For 'updated 4/23/2014 since it needs to keep going so ParseThruAccidentViolations and ParseThruLossHistories can be called for each one
                        End If
                    End If
                    d.ParseThruAccidentViolations() 'added 4/23/2014 for accidentViolation reconciliation
                    d.ParseThruLossHistories() 'added 4/23/2014 for lossHistory reconciliation

                    'added 5/27/2017 for GAR (may be used for other LOBs too)
                    d.ParseThruCoverages()
                    DriversTotal_TotalCoveragesPremium = qqHelper.getSum(DriversTotal_TotalCoveragesPremium, d.TotalCoveragesPremium) 'updated 7/23/2018 from private variable to public property (GetSum param)
                Next
            End If
        End Sub
        'added 4/23/2014 for exclusion reconciliation
        Private Sub ParseThruExclusions()
            If VersionAndLobInfo.Exclusions IsNot Nothing AndAlso VersionAndLobInfo.Exclusions.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each e As QuickQuoteExclusion In VersionAndLobInfo.Exclusions
                    '4/23/2014 note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseExclusionNumForExclusionReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If e.HasValidExclusionNum = True Then
                            CanUseExclusionNumForExclusionReconciliation = True
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        'added 4/23/2014 for lossHistory reconciliation
        Public Sub ParseThruLossHistories()
            If VersionAndLobInfo.LossHistoryRecords IsNot Nothing AndAlso VersionAndLobInfo.LossHistoryRecords.Count > 0 Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                For Each lh As QuickQuoteLossHistoryRecord In VersionAndLobInfo.LossHistoryRecords
                    '4/23/2014 note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseLossHistoryNumForLossHistoryReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If lh.HasValidLossHistoryNum = True Then
                            CanUseLossHistoryNumForLossHistoryReconciliation = True
                            'Exit For 'removed 7/3/2014; needs to keep going so ParseThruLossHistoryDetails can be called for each one
                        End If
                    End If
                    lh.ParseThruLossHistoryDetails() 'added 7/3/2014
                Next
            End If
        End Sub
        'added 4/23/2014 for applicant reconciliation
        Private Sub ParseThruApplicants()
            If VersionAndLobInfo.Applicants IsNot Nothing AndAlso VersionAndLobInfo.Applicants.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each a As QuickQuoteApplicant In VersionAndLobInfo.Applicants
                    '4/23/2014 note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseApplicantNumForApplicantReconciliation = False Then 'added 4/24/2014; updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If a.HasValidApplicantNum = True Then
                            CanUseApplicantNumForApplicantReconciliation = True
                            'Exit For 'needs to keep going so ParseThruLossHistories can be called for each one
                        End If
                    End If
                    a.ParseThruLossHistories() 'added 4/23/2014 for lossHistory reconciliation
                Next
            End If
        End Sub
        'added 4/29/2014 for reconciliation
        Private Sub ParseThruContractorsEquipmentScheduledItems(Optional ByVal resetCanUseFlag As Boolean = False) 'optional resetFlag since this can be called from multiple spots
            If VersionAndLobInfo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso VersionAndLobInfo.ContractorsEquipmentScheduledItems.Count > 0 Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                For Each si As QuickQuoteContractorsEquipmentScheduledItem In VersionAndLobInfo.ContractorsEquipmentScheduledItems
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If resetCanUseFlag = True Then 'optional resetFlag since this can be called from multiple spots
                        si.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
                    End If
                    si.ParseThruAdditionalInterests()
                Next
            End If
        End Sub
        'added 10/15/2014 for reconciliation
        Public Sub ParseThruPolicyUnderwritings()
            If VersionAndLobInfo.PolicyUnderwritings IsNot Nothing AndAlso VersionAndLobInfo.PolicyUnderwritings.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each pu As QuickQuotePolicyUnderwriting In VersionAndLobInfo.PolicyUnderwritings
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If pu.HasValidPolicyUnderwritingNum = True Then
                            CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = True
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        'added 10/29/2014 for reconciliation
        Public Sub ParseThruOperators()
            If VersionAndLobInfo.Operators IsNot Nothing AndAlso VersionAndLobInfo.Operators.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each opp As QuickQuoteOperator In VersionAndLobInfo.Operators
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseOperatorNumForOperatorReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If opp.HasValidOperatorNum = True Then
                            CanUseOperatorNumForOperatorReconciliation = True
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub
        'added 2/27/2015 for reconciliation
        Public Sub ParseThruAdditionalInterests()
            If VersionAndLobInfo.AdditionalInterests IsNot Nothing AndAlso VersionAndLobInfo.AdditionalInterests.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each ai As QuickQuoteAdditionalInterest In VersionAndLobInfo.AdditionalInterests
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False Then 'updated 7/23/2018 from private variable to public property; updated 9/14/2018 to use VersionAndLobInfo Prop instead of local one
                        If ai.HasValidAdditionalInterestNum = True Then
                            CanUseAdditionalInterestNumForAdditionalInterestReconciliation = True
                            Exit For
                        End If
                    End If
                Next
            End If
        End Sub

        'added 4/23/2020 for underlying policy reconciliation
        Private Sub ParseThruUnderlyingPolicies()
            If VersionAndLobInfo.UnderlyingPolicies IsNot Nothing AndAlso VersionAndLobInfo.UnderlyingPolicies.Count > 0 Then 'note: could use QQO's Prop but don't need to go through Parent logic
                For Each p As QuickQuoteUnderlyingPolicy In VersionAndLobInfo.UnderlyingPolicies
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    If VersionAndLobInfo.CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation = False Then 'uses VersionAndLobInfo Prop instead of local one (since local one looks through all subquotes)
                        If p.HasValidUnderlyingPolicyNum = True Then
                            CanUseUnderlyingPolicyNumForUnderlyingPolicyReconciliation = True
                            'Exit For 'needs to keep going so child Parse routines can be called
                        End If
                    End If
                    p.RunParseMethods()
                Next
            End If
        End Sub

        ''' <summary>
        ''' used to parse thru modifiers and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruModifiers() 'added 9/4/2012
            If VersionAndLobInfo.Modifiers IsNot Nothing AndAlso VersionAndLobInfo.Modifiers.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each m As QuickQuoteModifier In VersionAndLobInfo.Modifiers
                    If m.ModifierTypeId <> "" Then '10/16/2014 note: could now use ModifierType and ParentModifierType props instead of hard-coded ids
                        Select Case m.ModifierTypeId
                            Case "60" 'Are there any losses?; added for reference 4/23/2014... automatically set based off of LossHistories

                            Case "61" 'Quote option
                                If m.CheckboxSelected = True Then
                                    QuoteOrIssueBound = QuickQuoteQuoteOrIssueBound.Quote 'updated 7/23/2018 from private variable to public property
                                End If
                            Case "62" 'Issue/Bound option
                                If m.CheckboxSelected = True Then
                                    QuoteOrIssueBound = QuickQuoteQuoteOrIssueBound.IssueBound 'updated 7/23/2018 from private variable to public property
                                End If
                            Case "63" 'Issue/Bound effective date
                                IssueBoundEffectiveDate = m.ModifierOptionDate
                            Case "69" 'Multi Line - Parachute; updated 8/6/2018 from private variables to public properties (previously _LobType and _MultiLineDiscountValue)
                                If LobType = QuickQuoteLobType.AutoPersonal Then
                                    MultiLineDiscount = m.ModifierOptionId
                                End If
                            Case "70" 'Advanced Quote Discount
                                Dim advancedQuoteDiscountStartDate As Date
                                If Date.TryParse(QuickQuoteHelperClass.configAppSettingValueAsString("QuickQuote_AdvancedQuoteDiscount_StartDate"), advancedQuoteDiscountStartDate) = False Then
                                    advancedQuoteDiscountStartDate = "05/01/2019"
                                End If
                                If EffectiveDate >= advancedQuoteDiscountStartDate Then
                                    HasAdvancedQuoteDiscount = m.CheckboxSelected
                                End If
                            Case "85"
                                If String.IsNullOrWhiteSpace(m.ModifierOptionId) Then
                                    CPP_TargetMarketID = "0"
                                Else
                                    CPP_TargetMarketID = m.ModifierOptionId
                                End If
                            Case "116"
                                    HasFarmIndicator = m.CheckboxSelected
                        End Select
                    End If
                Next
                If QuoteOrIssueBound <> Nothing AndAlso QuoteOrIssueBound <> QuickQuoteQuoteOrIssueBound.IssueBound AndAlso IssueBoundEffectiveDate <> "" Then 'updated 7/23/2018 from private variables to public properties
                    'reset issue/bound effective date if type isn't issue/bound
                    IssueBoundEffectiveDate = ""
                End If
            End If
        End Sub
        ''' <summary>
        ''' used to parse thru auto symbols and set different properties
        ''' </summary>
        ''' <remarks>always executed when xml is parsed; doesn't specifically needed to be called by developer code</remarks>
        Private Sub ParseThruAutoSymbols() 'added 10/1/2012 for CAP
            If VersionAndLobInfo.AutoSymbols IsNot Nothing AndAlso VersionAndLobInfo.AutoSymbols.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each s As QuickQuoteAutoSymbol In VersionAndLobInfo.AutoSymbols
                    If s.CoverageType <> Nothing AndAlso s.CoverageType <> QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.None Then
                        Select Case s.CoverageType
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.CombinedSingleLimitLiability
                                SetAutoSymbolNumber(LiabilityAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.MedicalPayments
                                SetAutoSymbolNumber(MedicalPaymentsAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.UninsuredMotoristLiability
                                SetAutoSymbolNumber(UninsuredMotoristAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.UnderinsuredMotoristBodilyInjuryLiability
                                SetAutoSymbolNumber(UnderinsuredMotoristAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.ComprehensiveCoverage
                                SetAutoSymbolNumber(ComprehensiveCoverageAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.CollisionCoverage
                                SetAutoSymbolNumber(CollisionCoverageAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.NonOwnershipLiability
                                SetAutoSymbolNumber(NonOwnershipAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.HiredBorrowedLiability
                                SetAutoSymbolNumber(HiredBorrowedAutoSymbolObject, s.AutoSymbolTypeId)'updated 7/23/2018 from private variable to public property
                            Case QuickQuoteAutoSymbol.QuickQuoteAutoSymbolCoverageType.TowingAndLabor 'added 4/16/2013 for CAP
                                SetAutoSymbolNumber(TowingAndLaborAutoSymbolObject, s.AutoSymbolTypeId) 'updated 7/23/2018 from private variable to public property
                        End Select
                    End If
                Next
            End If
        End Sub
        Private Sub SetAutoSymbolNumber(ByRef developerSymbol As QuickQuoteDeveloperAutoSymbol, ByVal symbolNum As String) 'added 10/1/2012 for CAP
            If developerSymbol IsNot Nothing AndAlso symbolNum <> "" AndAlso IsNumeric(symbolNum) = True Then
                Select Case symbolNum
                    Case "1"
                        developerSymbol.HasSymbol1 = True
                    Case "2"
                        developerSymbol.HasSymbol2 = True
                    Case "3"
                        developerSymbol.HasSymbol3 = True
                    Case "4"
                        developerSymbol.HasSymbol4 = True
                    Case "7"
                        developerSymbol.HasSymbol7 = True
                    Case "8"
                        'commented 11/29/2012 since we can only send 1 symbol per cov; commented for good 12/12/2012
                        'developerSymbol.HasSymbol8 = True
                    Case "9"
                        'commented 11/29/2012 since we can only send 1 symbol per cov; commented for good 12/12/2012
                        'developerSymbol.HasSymbol9 = True
                End Select
            End If
        End Sub
        Private Sub AddAdditionalInsuredFromCoverage(ByVal cov As QuickQuoteCoverage)
            'If _AdditionalInsureds Is Nothing Then
            '    _AdditionalInsureds = New Generic.List(Of QuickQuoteAdditionalInsured)
            'End If
            'updated 7/19/2018
            If VersionAndLobInfo.AdditionalInsureds Is Nothing Then
                VersionAndLobInfo.AdditionalInsureds = New Generic.List(Of QuickQuoteAdditionalInsured)
            End If
            Dim ai As New QuickQuoteAdditionalInsured
            ai.CoverageCodeId = cov.CoverageCodeId
            ai.Description = cov.Description
            'added 7/19/2012 for App Gap
            'ai.DesignationOfPremises = cov.Comments
            'fixed 9/12/2012
            ai.DesignationOfPremises = cov.AddressInformation
            ai.HasWaiverOfSubrogation = cov.HasWaiverOfSubrogation
            ai.NameOfPersonOrOrganization = cov.NameInformation
            ai.ProductDescription = cov.ProductDescription 'added 10/19/2012 for GL
            'added 8/6/2012
            If cov.ManuallyRated = True AndAlso cov.ManualPremium <> "" Then
                ai.ManualPremiumAmount = cov.ManualPremium
            End If
            VersionAndLobInfo.AdditionalInsureds.Add(ai) 'updated 7/19/2018 from _AdditionalInsureds; could have used QuickQuoteObject's AdditionalInsureds property, but we shouldn't need to go through Parent logic
        End Sub
        Private Sub AddContractorsEquipmentScheduledItemFromCov(ByVal cov As QuickQuoteCoverage)
            If VersionAndLobInfo.ContractorsEquipmentScheduledItems Is Nothing Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                VersionAndLobInfo.ContractorsEquipmentScheduledItems = New Generic.List(Of QuickQuoteContractorsEquipmentScheduledItem)
            End If
            Dim si As New QuickQuoteContractorsEquipmentScheduledItem
            si.Description = cov.Description
            si.Limit = cov.ManualLimitAmount
            si.ValuationMethodId = cov.ValuationMethodTypeId
            VersionAndLobInfo.ContractorsEquipmentScheduledItems.Add(si)
        End Sub
        ''' <summary>
        ''' developer workaround to copy professional liability coverages from policy level to building level
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code after getting QuickQuoteObject</remarks>
        Public Sub CopyProfessionalLiabilityCoveragesFromPolicyToBuildings() 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
            'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then
            '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
            '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
            '            For Each b As QuickQuoteBuilding In l.Buildings
            '                b.HasResidentialCleaning = False
            '                b.HasBarbersProfessionalLiability = False
            '                b.BarbersProfessionalLiabilityFullTimeEmpNum = ""
            '                b.BarbersProfessionalLiabilityPartTimeEmpNum = ""
            '                b.HasBeauticiansProfessionalLiability = False
            '                b.BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
            '                b.BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
            '                b.HasFuneralDirectorsProfessionalLiability = False
            '                b.FuneralDirectorsProfessionalLiabilityEmpNum = ""
            '                b.HasPrintersProfessionalLiability = False
            '                b.PrintersProfessionalLiabilityLocNum = ""
            '                b.HasSelfStorageFacility = False
            '                b.SelfStorageFacilityLimit = ""
            '                b.HasVeterinariansProfessionalLiability = False
            '                b.VeterinariansProfessionalLiabilityEmpNum = ""
            '                b.HasPharmacistProfessionalLiability = False '3/9/2017 - BOP stuff
            '                b.PharmacistAnnualGrossSales = "" '3/9/2017 - BOP stuff
            '                b.HasOpticalAndHearingAidProfessionalLiability = False
            '                b.OpticalAndHearingAidProfessionalLiabilityEmpNum = ""

            '                '3/9/2017 - BOP stuff
            '                b.HasMotelCoverage = False
            '                b.MotelCoveragePerGuestLimitId = ""
            '                b.MotelCoverageSafeDepositDeductibleId = ""
            '                b.MotelCoverageSafeDepositLimitId = ""
            '                b.HasPhotographyCoverage = False
            '                b.HasPhotographyMakeupAndHair = False
            '                b.HasPhotographyCoverageScheduledCoverages = False
            '                b.PhotographyScheduledCoverages = Nothing
            '                b.HasApartmentBuildings = False
            '                b.NumberOfLocationsWithApartments = ""
            '                b.HasTenantAutoLegalLiability = False
            '                b.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
            '                b.TenantAutoLegalLiabilityDeductibleId = ""
            '                b.HasRestaurantEndorsement = False
            '                b.HasCustomerAutoLegalLiability = False
            '                b.CustomerAutoLegalLiabilityDeductibleId = ""
            '                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
            '                b.HasFineArts = False
            '                b.HasLiquorLiability = False
            '                b.LiquorLiabilityClassCodeTypeId = ""
            '                b.LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
            '                b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
            '                b.LiquorLiabilityAggregateLimit = ""

            '                Select Case b.ClassificationTypeId
            '                    Case "4875"     ' Barber shops (SERVICE)
            '                        If HasBarbersProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasBarbersProfessionalLiability = True
            '                            b.BarbersProfessionalLiabilityFullTimeEmpNum = BarbersProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                            b.BarbersProfessionalLiabilityPartTimeEmpNum = BarbersProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4876"     ' Beauticians (SERVICE)
            '                        If HasBeauticiansProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasBeauticiansProfessionalLiability = True
            '                            b.BeauticiansProfessionalLiabilityFullTimeEmpNum = BeauticiansProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                            b.BeauticiansProfessionalLiabilityPartTimeEmpNum = BeauticiansProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4961"     ' Funeral homes or chapels (SERVICE)
            '                        If HasFuneralDirectorsProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasFuneralDirectorsProfessionalLiability = True
            '                            b.FuneralDirectorsProfessionalLiabilityEmpNum = FuneralDirectorsProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5086"     ' Self-storage (SERVICE)
            '                        If HasSelfStorageFacility = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasSelfStorageFacility = True
            '                            b.SelfStorageFacilityLimit = SelfStorageFacilityLimit 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5066" 'PhotographicEquipment; 3/9/2017 - BOP stuff
            '                        If HasPhotographyCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasPhotographyCoverage = True
            '                            If HasPhotographyCoverageScheduledCoverages = True AndAlso PhotographyScheduledCoverages IsNot Nothing AndAlso PhotographyScheduledCoverages.Count > 0 Then 'updated 7/23/2018 from private variables to public properties
            '                                b.HasPhotographyCoverageScheduledCoverages = True
            '                                b.PhotographyScheduledCoverages = PhotographyScheduledCoverages 'updated 7/23/2018 from private variable to public property
            '                            End If
            '                            If HasPhotographyMakeupAndHair = True Then 'updated 7/23/2018 from private variable to public property
            '                                b.HasPhotographyMakeupAndHair = True
            '                            End If
            '                        End If
            '                        Exit Select
            '                    Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
            '                        If HasPrintersProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasPrintersProfessionalLiability = True
            '                            b.PrintersProfessionalLiabilityLocNum = PrintersProfessionalLiabilityLocNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                        'Case "5127", "5125" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        '3/9/2017 - BOP stuff
            '                    Case "5127", "5125", "5372", "5374", "5373", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        If HasVeterinariansProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasVeterinariansProfessionalLiability = True
            '                            b.VeterinariansProfessionalLiabilityEmpNum = VeterinariansProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                        'Case "4891", "5052", "4890", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        'had to changed 8/30/2012 because Martin transposed 2 codes
            '                    Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        If HasOpticalAndHearingAidProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasOpticalAndHearingAidProfessionalLiability = True
            '                            b.OpticalAndHearingAidProfessionalLiabilityEmpNum = OpticalAndHearingAidProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select

            '                        '3/9/2017 - BOP stuff
            '                    Case "5264"
            '                        If HasMotelCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasMotelCoverage = True
            '                            b.MotelCoveragePerGuestLimitId = MotelCoveragePerGuestLimitId
            '                            If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositDeductibleId) Then
            '                                b.MotelCoverageSafeDepositDeductibleId = MotelCoverageSafeDepositDeductibleId
            '                            End If
            '                            If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositLimitId) Then
            '                                b.MotelCoverageSafeDepositLimitId = MotelCoverageSafeDepositLimitId
            '                            End If
            '                        End If
            '                        Exit Select
            '                    Case "5265", "5266"
            '                        If HasMotelCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasMotelCoverage = True
            '                            b.MotelCoveragePerGuestLimitId = MotelCoveragePerGuestLimitId
            '                            If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositDeductibleId) Then
            '                                b.MotelCoverageSafeDepositDeductibleId = MotelCoverageSafeDepositDeductibleId
            '                            End If
            '                            If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositLimitId) Then
            '                                b.MotelCoverageSafeDepositLimitId = MotelCoverageSafeDepositLimitId
            '                            End If
            '                        End If
            '                        If HasLiquorLiability Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasLiquorLiability = True
            '                            b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                            b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If

            '                        'added 7/13/2017
            '                        If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasRestaurantEndorsement = True
            '                            If l.HasCustomerAutoLegalLiability = True Then
            '                                b.HasCustomerAutoLegalLiability = True
            '                                b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If

            '                        Exit Select
            '                    Case "4934"
            '                        If HasPharmacistProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasPharmacistProfessionalLiability = True
            '                            b.PharmacistAnnualGrossSales = PharmacistAnnualGrossSales
            '                        End If
            '                        Exit Select
            '                    Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
            '                        If HasApartmentBuildings = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasApartmentBuildings = True
            '                            b.NumberOfLocationsWithApartments = NumberOfLocationsWithApartments 'updated 7/23/2018 from private variable to public property
            '                            If l.HasTenantAutoLegalLiability = True Then
            '                                b.HasTenantAutoLegalLiability = True
            '                                b.TenantAutoLegalLiabilityDeductibleId = l.TenantAutoLegalLiabilityDeductibleId
            '                                b.TenantAutoLegalLiabilityLimitOfLiabilityId = l.TenantAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If l.HasFineArts = True Then
            '                            b.HasFineArts = True
            '                        End If
            '                        Exit Select
            '                    Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
            '                        If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasRestaurantEndorsement = True
            '                            If l.HasCustomerAutoLegalLiability = True Then
            '                                b.HasCustomerAutoLegalLiability = True
            '                                b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If l.HasFineArts = True Then
            '                            b.HasFineArts = True
            '                        End If
            '                        If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasLiquorLiability = True
            '                            b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                            b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4920", "5179", "5180", "5181"
            '                        If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasRestaurantEndorsement = True
            '                            If l.HasCustomerAutoLegalLiability = True Then
            '                                b.HasCustomerAutoLegalLiability = True
            '                                b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If l.HasFineArts = True Then
            '                            b.HasFineArts = True
            '                        End If
            '                        If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasLiquorLiability = True
            '                            b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                            b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
            '                        If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasLiquorLiability = True
            '                            b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                            b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5222", "5223"
            '                        If HasResidentialCleaning = True Then 'updated 7/23/2018 from private variable to public property
            '                            b.HasResidentialCleaning = True
            '                        End If
            '                        Exit Select
            '                End Select
            '            Next
            '        End If
            '    Next
            'End If

            'updated 9/5/2018 for multi-state; now uses common functionality
            'qqHelper.CopyProfessionalLiabilityCoveragesFromPolicyToBuildings(Me)
            'updated 12/5/2018 to use StateByState method
            qqHelper.CopyProfessionalLiabilityCoveragesFromPolicyToBuildings_StateByState(Me)
        End Sub
        Public Sub CopyProfessionalLiabilityCoveragesFromPolicyToBuildings_UseBuildingClassificationList() 'added 2/22/2017 for Comm Upgrade (and ability to add multiple classfications instead of just one)
            'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
            '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
            '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
            '            For Each b As QuickQuoteBuilding In l.Buildings
            '                b.HasResidentialCleaning = False
            '                b.HasBarbersProfessionalLiability = False
            '                b.BarbersProfessionalLiabilityFullTimeEmpNum = ""
            '                b.BarbersProfessionalLiabilityPartTimeEmpNum = ""
            '                b.HasBeauticiansProfessionalLiability = False
            '                b.BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
            '                b.BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
            '                b.HasFuneralDirectorsProfessionalLiability = False
            '                b.FuneralDirectorsProfessionalLiabilityEmpNum = ""
            '                b.HasPrintersProfessionalLiability = False
            '                b.PrintersProfessionalLiabilityLocNum = ""
            '                b.HasSelfStorageFacility = False
            '                b.SelfStorageFacilityLimit = ""
            '                b.HasVeterinariansProfessionalLiability = False
            '                b.VeterinariansProfessionalLiabilityEmpNum = ""
            '                b.HasPharmacistProfessionalLiability = False '3/9/2017 - BOP stuff
            '                b.PharmacistAnnualGrossSales = "" '3/9/2017 - BOP stuff
            '                b.HasOpticalAndHearingAidProfessionalLiability = False
            '                b.OpticalAndHearingAidProfessionalLiabilityEmpNum = ""

            '                '3/9/2017 - BOP stuff
            '                b.HasMotelCoverage = False
            '                b.MotelCoveragePerGuestLimitId = ""
            '                b.MotelCoverageSafeDepositDeductibleId = ""
            '                b.MotelCoverageSafeDepositLimitId = ""
            '                b.HasPhotographyCoverage = False
            '                b.HasPhotographyMakeupAndHair = False
            '                b.HasPhotographyCoverageScheduledCoverages = False
            '                b.PhotographyScheduledCoverages = Nothing
            '                b.HasApartmentBuildings = False
            '                b.NumberOfLocationsWithApartments = ""
            '                b.HasTenantAutoLegalLiability = False
            '                b.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
            '                b.TenantAutoLegalLiabilityDeductibleId = ""
            '                b.HasRestaurantEndorsement = False
            '                b.HasCustomerAutoLegalLiability = False
            '                b.CustomerAutoLegalLiabilityDeductibleId = ""
            '                b.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
            '                b.HasFineArts = False
            '                b.HasLiquorLiability = False
            '                b.LiquorLiabilityClassCodeTypeId = ""
            '                b.LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
            '                b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
            '                b.LiquorLiabilityAggregateLimit = ""

            '                If b.BuildingClassifications IsNot Nothing AndAlso b.BuildingClassifications.Count > 0 Then
            '                    For Each c As QuickQuoteClassification In b.BuildingClassifications
            '                        Select Case c.ClassificationTypeId
            '                            Case "4875"     ' Barber shops (SERVICE)
            '                                If HasBarbersProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasBarbersProfessionalLiability = True
            '                                    b.BarbersProfessionalLiabilityFullTimeEmpNum = BarbersProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                    b.BarbersProfessionalLiabilityPartTimeEmpNum = BarbersProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4876"     ' Beauticians (SERVICE)
            '                                If HasBeauticiansProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasBeauticiansProfessionalLiability = True
            '                                    b.BeauticiansProfessionalLiabilityFullTimeEmpNum = BeauticiansProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                    b.BeauticiansProfessionalLiabilityPartTimeEmpNum = BeauticiansProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4961"     ' Funeral homes or chapels (SERVICE)
            '                                If HasFuneralDirectorsProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasFuneralDirectorsProfessionalLiability = True
            '                                    b.FuneralDirectorsProfessionalLiabilityEmpNum = FuneralDirectorsProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5086"     ' Self-storage (SERVICE)
            '                                If HasSelfStorageFacility = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasSelfStorageFacility = True
            '                                    b.SelfStorageFacilityLimit = SelfStorageFacilityLimit 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5066" 'PhotographicEquipment; 3/9/2017 - BOP stuff
            '                                If HasPhotographyCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasPhotographyCoverage = True
            '                                    If HasPhotographyCoverageScheduledCoverages = True AndAlso PhotographyScheduledCoverages IsNot Nothing AndAlso PhotographyScheduledCoverages.Count > 0 Then 'updated 7/23/2018 from private variables to public properties
            '                                        b.HasPhotographyCoverageScheduledCoverages = True
            '                                        b.PhotographyScheduledCoverages = PhotographyScheduledCoverages 'updated 7/23/2018 from private variable to public property
            '                                    End If
            '                                    If HasPhotographyMakeupAndHair = True Then 'updated 7/23/2018 from private variable to public property
            '                                        b.HasPhotographyMakeupAndHair = True
            '                                    End If
            '                                End If
            '                                Exit Select
            '                            Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
            '                                If HasPrintersProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasPrintersProfessionalLiability = True
            '                                    b.PrintersProfessionalLiabilityLocNum = PrintersProfessionalLiabilityLocNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            'Case "5127", "5125" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        '3/9/2017 - BOP stuff
            '                            Case "5127", "5125", "5372", "5374", "5373", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                                If HasVeterinariansProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasVeterinariansProfessionalLiability = True
            '                                    b.VeterinariansProfessionalLiabilityEmpNum = VeterinariansProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                        'Case "4891", "5052", "4890", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        'had to changed 8/30/2012 because Martin transposed 2 codes
            '                            Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                                If HasOpticalAndHearingAidProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasOpticalAndHearingAidProfessionalLiability = True
            '                                    b.OpticalAndHearingAidProfessionalLiabilityEmpNum = OpticalAndHearingAidProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select

            '                        '3/9/2017 - BOP stuff
            '                            Case "5264"
            '                                If HasMotelCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasMotelCoverage = True
            '                                    b.MotelCoveragePerGuestLimitId = MotelCoveragePerGuestLimitId
            '                                    If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositDeductibleId) Then
            '                                        b.MotelCoverageSafeDepositDeductibleId = MotelCoverageSafeDepositDeductibleId
            '                                    End If
            '                                    If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositLimitId) Then
            '                                        b.MotelCoverageSafeDepositLimitId = MotelCoverageSafeDepositLimitId
            '                                    End If
            '                                End If
            '                                Exit Select
            '                            Case "5265", "5266"
            '                                If HasMotelCoverage = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasMotelCoverage = True
            '                                    b.MotelCoveragePerGuestLimitId = MotelCoveragePerGuestLimitId
            '                                    If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositDeductibleId) Then
            '                                        b.MotelCoverageSafeDepositDeductibleId = MotelCoverageSafeDepositDeductibleId
            '                                    End If
            '                                    If Not String.IsNullOrWhiteSpace(MotelCoverageSafeDepositLimitId) Then
            '                                        b.MotelCoverageSafeDepositLimitId = MotelCoverageSafeDepositLimitId
            '                                    End If
            '                                End If
            '                                If HasLiquorLiability Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasLiquorLiability = True
            '                                    b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                                    b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If

            '                                'added 7/13/2017
            '                                If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasRestaurantEndorsement = True
            '                                    If l.HasCustomerAutoLegalLiability = True Then
            '                                        b.HasCustomerAutoLegalLiability = True
            '                                        b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                        b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If

            '                                Exit Select
            '                            Case "4934"
            '                                If HasPharmacistProfessionalLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasPharmacistProfessionalLiability = True
            '                                    b.PharmacistAnnualGrossSales = PharmacistAnnualGrossSales
            '                                End If
            '                                Exit Select
            '                            Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
            '                                If HasApartmentBuildings = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasApartmentBuildings = True
            '                                    b.NumberOfLocationsWithApartments = NumberOfLocationsWithApartments 'updated 7/23/2018 from private variable to public property
            '                                    If l.HasTenantAutoLegalLiability = True Then
            '                                        b.HasTenantAutoLegalLiability = True
            '                                        b.TenantAutoLegalLiabilityDeductibleId = l.TenantAutoLegalLiabilityDeductibleId
            '                                        b.TenantAutoLegalLiabilityLimitOfLiabilityId = l.TenantAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If l.HasFineArts = True Then
            '                                    b.HasFineArts = True
            '                                End If
            '                                Exit Select
            '                            Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
            '                                If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasRestaurantEndorsement = True
            '                                    If l.HasCustomerAutoLegalLiability = True Then
            '                                        b.HasCustomerAutoLegalLiability = True
            '                                        b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                        b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If l.HasFineArts = True Then
            '                                    b.HasFineArts = True
            '                                End If
            '                                If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasLiquorLiability = True
            '                                    b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                                    b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4920", "5179", "5180", "5181"
            '                                If HasRestaurantEndorsement = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasRestaurantEndorsement = True
            '                                    If l.HasCustomerAutoLegalLiability = True Then
            '                                        b.HasCustomerAutoLegalLiability = True
            '                                        b.CustomerAutoLegalLiabilityDeductibleId = l.CustomerAutoLegalLiabilityDeductibleId
            '                                        b.CustomerAutoLegalLiabilityLimitOfLiabilityId = l.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If l.HasFineArts = True Then
            '                                    b.HasFineArts = True
            '                                End If
            '                                If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasLiquorLiability = True
            '                                    b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                                    b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
            '                                If HasLiquorLiability = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasLiquorLiability = True
            '                                    b.LiquorLiabilityAggregateLimit = LiquorLiabilityAggregateLimit
            '                                    b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts = LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    b.LiquorLiabilityAnnualGrossPackageSalesReceipts = LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    b.LiquorLiabilityClassCodeTypeId = LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5222", "5223"
            '                                If HasResidentialCleaning = True Then 'updated 7/23/2018 from private variable to public property
            '                                    b.HasResidentialCleaning = True
            '                                End If
            '                                Exit Select
            '                        End Select
            '                    Next
            '                End If
            '            Next
            '        End If
            '    Next
            'End If

            'updated 9/5/2018 for multi-state; now uses common functionality
            'qqHelper.CopyProfessionalLiabilityCoveragesFromPolicyToBuildings(Me, useBuildingClassificationList:=True)
            'updated 12/5/2018 to use StateByState method
            qqHelper.CopyProfessionalLiabilityCoveragesFromPolicyToBuildings_StateByState(Me, useBuildingClassificationList:=True)
        End Sub
        ''' <summary>
        ''' developer workaround to copy professional liability coverages from building level to policy level
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code before saving/rating QuickQuoteObject</remarks>
        Public Sub CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy()
            ''updated 7/23/2018 from private variables to public properties
            'HasResidentialCleaning = False
            'HasBarbersProfessionalLiability = False
            'BarbersProfessionalLiabilityFullTimeEmpNum = ""
            'BarbersProfessionalLiabilityPartTimeEmpNum = ""
            'HasBeauticiansProfessionalLiability = False
            'BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
            'BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
            'HasFuneralDirectorsProfessionalLiability = False
            'FuneralDirectorsProfessionalLiabilityEmpNum = ""
            'HasPrintersProfessionalLiability = False
            'PrintersProfessionalLiabilityLocNum = ""
            'HasSelfStorageFacility = False
            'SelfStorageFacilityLimit = ""
            'HasVeterinariansProfessionalLiability = False
            'VeterinariansProfessionalLiabilityEmpNum = ""
            'HasPharmacistProfessionalLiability = False '3/9/2017 - BOP stuff
            'PharmacistAnnualGrossSales = "" '3/9/2017 - BOP stuff
            'HasOpticalAndHearingAidProfessionalLiability = False
            'OpticalAndHearingAidProfessionalLiabilityEmpNum = ""

            ''3/9/2017 - BOP stuff; updated 7/23/2018 from private variable to public property
            'HasMotelCoverage = False
            'MotelCoveragePerGuestLimitId = ""
            'MotelCoverageSafeDepositDeductibleId = ""
            'MotelCoverageSafeDepositLimitId = ""
            'HasPhotographyCoverage = False
            'HasPhotographyCoverageScheduledCoverages = False
            'HasPhotographyMakeupAndHair = False
            'PhotographyScheduledCoverages = Nothing
            'LiquorLiabilityClassCodeTypeId = ""
            'LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
            'LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
            'HasLiquorLiability = False
            'HasRestaurantEndorsement = False
            'HasApartmentBuildings = False
            'NumberOfLocationsWithApartments = ""

            'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
            '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
            '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
            '            '3/9/2017 - BOP stuff
            '            l.HasTenantAutoLegalLiability = False
            '            l.TenantAutoLegalLiabilityDeductibleId = ""
            '            l.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
            '            l.HasCustomerAutoLegalLiability = False
            '            l.CustomerAutoLegalLiabilityDeductibleId = ""
            '            l.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
            '            l.HasFineArts = False

            '            For Each b As QuickQuoteBuilding In l.Buildings
            '                Select Case b.ClassificationTypeId
            '                    Case "4875"     ' Barber shops (SERVICE)
            '                        If b.HasBarbersProfessionalLiability = True Then
            '                            HasBarbersProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            BarbersProfessionalLiabilityFullTimeEmpNum = b.BarbersProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                            BarbersProfessionalLiabilityPartTimeEmpNum = b.BarbersProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4876"     ' Beauticians (SERVICE)
            '                        If b.HasBeauticiansProfessionalLiability = True Then
            '                            HasBeauticiansProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            BeauticiansProfessionalLiabilityFullTimeEmpNum = b.BeauticiansProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                            BeauticiansProfessionalLiabilityPartTimeEmpNum = b.BeauticiansProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4961"     ' Funeral homes or chapels (SERVICE)
            '                        If b.HasFuneralDirectorsProfessionalLiability = True Then
            '                            HasFuneralDirectorsProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            FuneralDirectorsProfessionalLiabilityEmpNum = b.FuneralDirectorsProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5086"     ' Self-storage (SERVICE)
            '                        If b.HasSelfStorageFacility = True Then
            '                            HasSelfStorageFacility = True 'updated 7/23/2018 from private variable to public property
            '                            SelfStorageFacilityLimit = b.SelfStorageFacilityLimit 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
            '                        If b.HasPrintersProfessionalLiability = True Then
            '                            HasPrintersProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            PrintersProfessionalLiabilityLocNum = b.PrintersProfessionalLiabilityLocNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                        'Case "5127", "5125" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        '3/9/2017 - BOP stuff
            '                    Case "5127", "5125", "5372", "5373", "5374", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        If b.HasVeterinariansProfessionalLiability = True Then
            '                            HasVeterinariansProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            VeterinariansProfessionalLiabilityEmpNum = b.VeterinariansProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                        'Case "4891", "5052", "4890", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        'had to changed 8/30/2012 because Martin transposed 2 codes
            '                    Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        If b.HasOpticalAndHearingAidProfessionalLiability = True Then
            '                            HasOpticalAndHearingAidProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            OpticalAndHearingAidProfessionalLiabilityEmpNum = b.OpticalAndHearingAidProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select

            '                        '3/9/2017 - BOP stuff
            '                    Case "4934" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        If b.HasPharmacistProfessionalLiability = True Then
            '                            HasPharmacistProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                            PharmacistAnnualGrossSales = b.PharmacistAnnualGrossSales
            '                        End If
            '                        Exit Select
            '                    Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
            '                        If b.HasApartmentBuildings = True Then
            '                            HasApartmentBuildings = True 'updated 7/23/2018 from private variable to public property
            '                            NumberOfLocationsWithApartments = b.NumberOfLocationsWithApartments 'updated 7/23/2018 from private variable to public property
            '                            If b.HasTenantAutoLegalLiability = True Then
            '                                l.HasTenantAutoLegalLiability = True
            '                                l.TenantAutoLegalLiabilityDeductibleId = b.TenantAutoLegalLiabilityDeductibleId
            '                                l.TenantAutoLegalLiabilityLimitOfLiabilityId = b.TenantAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If b.HasFineArts = True Then
            '                            l.HasFineArts = True
            '                        End If
            '                        Exit Select
            '                    Case "5264"
            '                        If b.HasMotelCoverage = True Then
            '                            HasMotelCoverage = True 'updated 7/23/2018 from private variable to public property
            '                            MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
            '                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
            '                                MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
            '                            End If
            '                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
            '                                MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
            '                            End If
            '                        End If
            '                        Exit Select
            '                    Case "5265", "5266"
            '                        If b.HasMotelCoverage = True Then
            '                            HasMotelCoverage = True 'updated 7/23/2018 from private variable to public property
            '                            MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
            '                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
            '                                MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
            '                            End If
            '                            If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
            '                                MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
            '                            End If
            '                        End If
            '                        If b.HasLiquorLiability = True Then
            '                            HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                            LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If

            '                        'added 7/13/2017
            '                        If b.HasRestaurantEndorsement = True Then
            '                            HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                            If b.HasCustomerAutoLegalLiability = True Then
            '                                l.HasCustomerAutoLegalLiability = True
            '                                l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If

            '                        Exit Select
            '                    Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
            '                        If b.HasRestaurantEndorsement = True Then
            '                            HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                            If b.HasCustomerAutoLegalLiability = True Then
            '                                l.HasCustomerAutoLegalLiability = True
            '                                l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If b.HasFineArts = True Then
            '                            l.HasFineArts = True
            '                        End If
            '                        If b.HasLiquorLiability = True Then
            '                            HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                            LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "4920", "5179", "5180", "5181"
            '                        If b.HasRestaurantEndorsement = True Then
            '                            HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                            If b.HasCustomerAutoLegalLiability = True Then
            '                                l.HasCustomerAutoLegalLiability = True
            '                                l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                            End If
            '                        End If
            '                        If b.HasFineArts = True Then
            '                            l.HasFineArts = True
            '                        End If
            '                        If b.HasLiquorLiability = True Then
            '                            HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                            LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5066"
            '                        If b.HasPhotographyCoverage = True Then
            '                            HasPhotographyCoverage = True 'updated 7/23/2018 from private variable to public property
            '                            If b.HasPhotographyCoverageScheduledCoverages = True AndAlso b.PhotographyScheduledCoverages IsNot Nothing AndAlso b.PhotographyScheduledCoverages.Count > 0 Then
            '                                HasPhotographyCoverageScheduledCoverages = True 'updated 7/23/2018 from private variable to public property
            '                                PhotographyScheduledCoverages = b.PhotographyScheduledCoverages 'updated 7/23/2018 from private variable to public property
            '                            End If
            '                            If b.HasPhotographyMakeupAndHair = True Then 'updated 7/23/2018 from private variable to public property
            '                                HasPhotographyMakeupAndHair = True
            '                            End If
            '                        End If
            '                        Exit Select
            '                    Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
            '                        If b.HasLiquorLiability = True Then
            '                            HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                            LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                            LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                            LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                    Case "5222", "5223"
            '                        If b.HasResidentialCleaning = True Then
            '                            HasResidentialCleaning = True 'updated 7/23/2018 from private variable to public property
            '                        End If
            '                        Exit Select
            '                End Select
            '            Next
            '        End If
            '    Next
            'End If

            'updated 9/5/2018 for multi-state; now uses common functionality
            'qqHelper.CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy(Me)
            'updated 12/5/2018 to use StateByState method
            qqHelper.CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy_StateByState(Me)
        End Sub
        Public Sub CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy_UseBuildingClassificationList() 'added 2/22/2017 for Comm Upgrade (and ability to add multiple classfications instead of just one)
            ''updated 7/23/2018 from private variables to public properties
            'HasResidentialCleaning = False
            'HasBarbersProfessionalLiability = False
            'BarbersProfessionalLiabilityFullTimeEmpNum = ""
            'BarbersProfessionalLiabilityPartTimeEmpNum = ""
            'HasBeauticiansProfessionalLiability = False
            'BeauticiansProfessionalLiabilityFullTimeEmpNum = ""
            'BeauticiansProfessionalLiabilityPartTimeEmpNum = ""
            'HasFuneralDirectorsProfessionalLiability = False
            'FuneralDirectorsProfessionalLiabilityEmpNum = ""
            'HasPrintersProfessionalLiability = False
            'PrintersProfessionalLiabilityLocNum = ""
            'HasSelfStorageFacility = False
            'SelfStorageFacilityLimit = ""
            'HasVeterinariansProfessionalLiability = False
            'VeterinariansProfessionalLiabilityEmpNum = ""
            'HasPharmacistProfessionalLiability = False '3/9/2017 - BOP stuff
            'PharmacistAnnualGrossSales = "" '3/9/2017 - BOP stuff
            'HasOpticalAndHearingAidProfessionalLiability = False
            'OpticalAndHearingAidProfessionalLiabilityEmpNum = ""

            ''3/9/2017 - BOP stuff; updated 7/23/2018 from private variable to public property
            'HasMotelCoverage = False
            'MotelCoveragePerGuestLimitId = ""
            'MotelCoverageSafeDepositDeductibleId = ""
            'MotelCoverageSafeDepositLimitId = ""
            'HasPhotographyCoverage = False
            'HasPhotographyCoverageScheduledCoverages = False
            'HasPhotographyMakeupAndHair = False
            'PhotographyScheduledCoverages = Nothing
            'LiquorLiabilityClassCodeTypeId = ""
            'LiquorLiabilityAnnualGrossAlcoholSalesReceipts = ""
            'LiquorLiabilityAnnualGrossPackageSalesReceipts = ""
            'HasLiquorLiability = False
            'HasRestaurantEndorsement = False
            'HasApartmentBuildings = False
            'NumberOfLocationsWithApartments = ""

            'If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
            '    For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
            '        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
            '            '3/9/2017 - BOP stuff
            '            l.HasTenantAutoLegalLiability = False
            '            l.TenantAutoLegalLiabilityDeductibleId = ""
            '            l.TenantAutoLegalLiabilityLimitOfLiabilityId = ""
            '            l.HasCustomerAutoLegalLiability = False
            '            l.CustomerAutoLegalLiabilityDeductibleId = ""
            '            l.CustomerAutoLegalLiabilityLimitOfLiabilityId = ""
            '            l.HasFineArts = False

            '            For Each b As QuickQuoteBuilding In l.Buildings
            '                If b.BuildingClassifications IsNot Nothing AndAlso b.BuildingClassifications.Count > 0 Then
            '                    For Each c As QuickQuoteClassification In b.BuildingClassifications
            '                        Select Case c.ClassificationTypeId
            '                            Case "4875"     ' Barber shops (SERVICE)
            '                                If b.HasBarbersProfessionalLiability = True Then
            '                                    HasBarbersProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    BarbersProfessionalLiabilityFullTimeEmpNum = b.BarbersProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                    BarbersProfessionalLiabilityPartTimeEmpNum = b.BarbersProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4876"     ' Beauticians (SERVICE)
            '                                If b.HasBeauticiansProfessionalLiability = True Then
            '                                    HasBeauticiansProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    BeauticiansProfessionalLiabilityFullTimeEmpNum = b.BeauticiansProfessionalLiabilityFullTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                    BeauticiansProfessionalLiabilityPartTimeEmpNum = b.BeauticiansProfessionalLiabilityPartTimeEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4961"     ' Funeral homes or chapels (SERVICE)
            '                                If b.HasFuneralDirectorsProfessionalLiability = True Then
            '                                    HasFuneralDirectorsProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    FuneralDirectorsProfessionalLiabilityEmpNum = b.FuneralDirectorsProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5086"     ' Self-storage (SERVICE)
            '                                If b.HasSelfStorageFacility = True Then
            '                                    HasSelfStorageFacility = True 'updated 7/23/2018 from private variable to public property
            '                                    SelfStorageFacilityLimit = b.SelfStorageFacilityLimit 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "2025", "2022", "2049", "2052", "4923"    ' printing, lithographing, photoengraving, engraving (SERVICE); added 4923 (Copying and Duplicating Stores) on 8/30/2012
            '                                If b.HasPrintersProfessionalLiability = True Then
            '                                    HasPrintersProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    PrintersProfessionalLiabilityLocNum = b.PrintersProfessionalLiabilityLocNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            'Case "5127", "5125" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                        '3/9/2017 - BOP stuff
            '                            Case "5127", "5125", "5372", "5373", "5374", "5375" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                                If b.HasVeterinariansProfessionalLiability = True Then
            '                                    HasVeterinariansProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    VeterinariansProfessionalLiabilityEmpNum = b.VeterinariansProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                        'Case "4891", "5052", "4890", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                        'had to changed 8/30/2012 because Martin transposed 2 codes
            '                            Case "4981", "5052", "4980", "5051" ' Hearing Aid retail, Optical Goods retail (RETAIL), Hearing Aid Distributors, Optical Goods Distributors (WHOLESALE)
            '                                If b.HasOpticalAndHearingAidProfessionalLiability = True Then
            '                                    HasOpticalAndHearingAidProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    OpticalAndHearingAidProfessionalLiabilityEmpNum = b.OpticalAndHearingAidProfessionalLiabilityEmpNum 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select

            '                                '3/9/2017 - BOP stuff
            '                            Case "4934" ' Veterinarians office, veterinarians confo office (OFFICE)
            '                                If b.HasPharmacistProfessionalLiability = True Then
            '                                    HasPharmacistProfessionalLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    PharmacistAnnualGrossSales = b.PharmacistAnnualGrossSales
            '                                End If
            '                                Exit Select
            '                            Case "5440", "5441", "5438", "5439", "5155", "5156", "5177"
            '                                If b.HasApartmentBuildings = True Then
            '                                    HasApartmentBuildings = True 'updated 7/23/2018 from private variable to public property
            '                                    NumberOfLocationsWithApartments = b.NumberOfLocationsWithApartments 'updated 7/23/2018 from private variable to public property
            '                                    If b.HasTenantAutoLegalLiability = True Then
            '                                        l.HasTenantAutoLegalLiability = True
            '                                        l.TenantAutoLegalLiabilityDeductibleId = b.TenantAutoLegalLiabilityDeductibleId
            '                                        l.TenantAutoLegalLiabilityLimitOfLiabilityId = b.TenantAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If b.HasFineArts = True Then
            '                                    l.HasFineArts = True
            '                                End If
            '                                Exit Select
            '                            Case "5264"
            '                                If b.HasMotelCoverage = True Then
            '                                    HasMotelCoverage = True 'updated 7/23/2018 from private variable to public property
            '                                    MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
            '                                    If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
            '                                        MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
            '                                    End If
            '                                    If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
            '                                        MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
            '                                    End If
            '                                End If
            '                                Exit Select
            '                            Case "5265", "5266"
            '                                If b.HasMotelCoverage = True Then
            '                                    HasMotelCoverage = True 'updated 7/23/2018 from private variable to public property
            '                                    MotelCoveragePerGuestLimitId = b.MotelCoveragePerGuestLimitId
            '                                    If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositLimitId) Then
            '                                        MotelCoverageSafeDepositLimitId = b.MotelCoverageSafeDepositLimitId
            '                                    End If
            '                                    If Not String.IsNullOrWhiteSpace(b.MotelCoverageSafeDepositDeductibleId) Then
            '                                        MotelCoverageSafeDepositDeductibleId = b.MotelCoverageSafeDepositDeductibleId
            '                                    End If
            '                                End If
            '                                If b.HasLiquorLiability = True Then
            '                                    HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If

            '                                'added 7/13/2017
            '                                If b.HasRestaurantEndorsement = True Then
            '                                    HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                                    If b.HasCustomerAutoLegalLiability = True Then
            '                                        l.HasCustomerAutoLegalLiability = True
            '                                        l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                        l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If

            '                                Exit Select
            '                            Case "5392", "5412", "5393", "5394", "5413", "5395", "5414", "5396", "5415", "5397", "5416", "5398", "5417", "5399", "5418", "5400", "5401", "5419", "5402", "5403", "5404", "5420", "5405", "5421", "5406", "5407", "5422", "5408", "5410", "5411", "5383", "5385", "5386", "5388", "5389", "5391"
            '                                If b.HasRestaurantEndorsement = True Then
            '                                    HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                                    If b.HasCustomerAutoLegalLiability = True Then
            '                                        l.HasCustomerAutoLegalLiability = True
            '                                        l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                        l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If b.HasFineArts = True Then
            '                                    l.HasFineArts = True
            '                                End If
            '                                If b.HasLiquorLiability = True Then
            '                                    HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "4920", "5179", "5180", "5181"
            '                                If b.HasRestaurantEndorsement = True Then
            '                                    HasRestaurantEndorsement = True 'updated 7/23/2018 from private variable to public property
            '                                    If b.HasCustomerAutoLegalLiability = True Then
            '                                        l.HasCustomerAutoLegalLiability = True
            '                                        l.CustomerAutoLegalLiabilityDeductibleId = b.CustomerAutoLegalLiabilityDeductibleId
            '                                        l.CustomerAutoLegalLiabilityLimitOfLiabilityId = b.CustomerAutoLegalLiabilityLimitOfLiabilityId
            '                                    End If
            '                                End If
            '                                If b.HasFineArts = True Then
            '                                    l.HasFineArts = True
            '                                End If
            '                                If b.HasLiquorLiability = True Then
            '                                    HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5066"
            '                                If b.HasPhotographyCoverage = True Then
            '                                    HasPhotographyCoverage = True 'updated 7/23/2018 from private variable to public property
            '                                    If b.HasPhotographyCoverageScheduledCoverages = True AndAlso b.PhotographyScheduledCoverages IsNot Nothing AndAlso b.PhotographyScheduledCoverages.Count > 0 Then
            '                                        HasPhotographyCoverageScheduledCoverages = True 'updated 7/23/2018 from private variable to public property
            '                                        PhotographyScheduledCoverages = b.PhotographyScheduledCoverages 'updated 7/23/2018 from private variable to public property
            '                                    End If
            '                                    If b.HasPhotographyMakeupAndHair = True Then
            '                                        HasPhotographyMakeupAndHair = True 'updated 7/23/2018 from private variable to public property
            '                                    End If
            '                                End If
            '                                Exit Select
            '                            Case "4919", "5178", "5429", "5430", "5431", "5432", "5241", "5242", "5243", "5244"
            '                                If b.HasLiquorLiability = True Then
            '                                    HasLiquorLiability = True 'updated 7/23/2018 from private variable to public property
            '                                    LiquorLiabilityAnnualGrossAlcoholSalesReceipts = b.LiquorLiabilityAnnualGrossAlcoholSalesReceipts
            '                                    LiquorLiabilityAnnualGrossPackageSalesReceipts = b.LiquorLiabilityAnnualGrossPackageSalesReceipts
            '                                    LiquorLiabilityClassCodeTypeId = b.LiquorLiabilityClassCodeTypeId 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                            Case "5222", "5223"
            '                                If b.HasResidentialCleaning = True Then
            '                                    HasResidentialCleaning = True 'updated 7/23/2018 from private variable to public property
            '                                End If
            '                                Exit Select
            '                        End Select
            '                    Next
            '                End If
            '            Next
            '        End If
            '    Next
            'End If

            'updated 9/5/2018 for multi-state; now uses common functionality
            'qqHelper.CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy(Me, useBuildingClassificationList:=True)
            'updated 12/5/2018 to use StateByState method
            qqHelper.CopyProfessionalLiabilityCoveragesFromBuildingsToPolicy_StateByState(Me, useBuildingClassificationList:=True)
        End Sub
        ''' <summary>
        ''' developer workaround to copy additional interests from buildings to contractor's equipment and buildings
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code after getting QuickQuoteObject</remarks>
        Public Sub CopyAdditionalInterestsFromBuildingsToContractorsEquipmentItemsAndBuildings()
            VersionAndLobInfo.AdditionalInterestNamesAndAddresses = Nothing 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
            Dim naNum As Integer = 0

            If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                    If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                        For Each b As QuickQuoteBuilding In l.Buildings
                            If b.AdditionalInterests IsNot Nothing AndAlso b.AdditionalInterests.Count > 0 Then
                                'building has AIs (not sure if there are CE scheduled items yet)
                                If VersionAndLobInfo.AdditionalInterestNamesAndAddresses Is Nothing Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
                                    VersionAndLobInfo.AdditionalInterestNamesAndAddresses = New Generic.List(Of QuickQuoteGenericNameAddress)
                                End If
                                Dim aiHoldList As Generic.List(Of QuickQuoteAdditionalInterest) = Nothing 'initialized 3/14/2017
                                For Each ai As QuickQuoteAdditionalInterest In b.AdditionalInterests
                                    naNum += 1
                                    ai.NameAddressNum = naNum
                                    Dim na As New QuickQuoteGenericNameAddress
                                    na.Name = qqHelper.CloneObject(ai.Name) 'updated 10/15/2014 to clone
                                    na.Address = qqHelper.CloneObject(ai.Address) 'updated 10/15/2014 to clone
                                    VersionAndLobInfo.AdditionalInterestNamesAndAddresses.Add(na) 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
                                    If ai.Other <> "" AndAlso UCase(ai.Other).Contains("CE") = True AndAlso IsNumeric(Right(ai.Other, Len(ai.Other) - 2)) = True AndAlso VersionAndLobInfo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso VersionAndLobInfo.ContractorsEquipmentScheduledItems.Count >= CInt(Right(ai.Other, Len(ai.Other) - 2)) Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                                        'appears to be CE AI and the CE count is okay for the #
                                        Dim si As QuickQuoteContractorsEquipmentScheduledItem = VersionAndLobInfo.ContractorsEquipmentScheduledItems.Item(CInt(Right(ai.Other, Len(ai.Other) - 2)) - 1) 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                                        If si IsNot Nothing Then
                                            If si.AdditionalInterests Is Nothing Then
                                                si.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                                            End If
                                            si.AdditionalInterests.Add(ai)
                                            'b.AdditionalInterests.Remove(ai)'remove once out of loop
                                            If aiHoldList Is Nothing Then
                                                aiHoldList = New Generic.List(Of QuickQuoteAdditionalInterest)
                                            End If
                                            aiHoldList.Add(ai)
                                        End If
                                    End If
                                Next
                                If aiHoldList IsNot Nothing AndAlso aiHoldList.Count > 0 Then
                                    For Each ai As QuickQuoteAdditionalInterest In aiHoldList
                                        b.AdditionalInterests.Remove(ai)
                                    Next
                                End If
                                'updated 4/29/2014 for reconciliation; shouldn't be needed here since AI's would've originally came from building and that's where they'll eventually end up
                                'b.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
                                'b.ParseThruAdditionalInterests()
                            End If
                        Next
                        'updated 4/29/2014 for reconciliation; shouldn't be needed here since AI's would've originally came from building and that's where they'll eventually end up
                        'ParseThruContractorsEquipmentScheduledItems(True) 'uses optional reset flag
                    End If
                Next
            End If
        End Sub
        ''' <summary>
        ''' developer workaround to copy additional interests from contractor's equipment and buildings to buildings
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code before saving/rating QuickQuoteObject</remarks>
        Public Sub CopyAdditionalInterestsFromContractorsEquipmentItemsAndBuildingsToBuildings()
            Dim b1 As QuickQuoteBuilding = Nothing 'added initialization 4/29/2014

            If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                For Each l As QuickQuoteLocation In VersionAndLobInfo.Locations
                    If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
                        For Each b As QuickQuoteBuilding In l.Buildings
                            If b1 Is Nothing Then
                                b1 = b
                            End If
                            If b.AdditionalInterests IsNot Nothing AndAlso b.AdditionalInterests.Count > 0 Then
                                For Each ai As QuickQuoteAdditionalInterest In b.AdditionalInterests
                                    SetAdditionalInterestNameAndAddress(ai)
                                Next
                            End If
                        Next
                    End If
                Next
            End If

            If VersionAndLobInfo.ContractorsEquipmentScheduledItems IsNot Nothing AndAlso VersionAndLobInfo.ContractorsEquipmentScheduledItems.Count > 0 AndAlso b1 IsNot Nothing Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                Dim siCount As Integer = 0
                For Each si As QuickQuoteContractorsEquipmentScheduledItem In VersionAndLobInfo.ContractorsEquipmentScheduledItems
                    siCount += 1
                    If si.AdditionalInterests IsNot Nothing AndAlso si.AdditionalInterests.Count > 0 Then
                        Dim aiHoldList As Generic.List(Of QuickQuoteAdditionalInterest) = Nothing 'initialized 3/14/2017
                        For Each ai As QuickQuoteAdditionalInterest In si.AdditionalInterests
                            ai.Other = "CE" & siCount.ToString
                            ai.Description = si.Description
                            SetAdditionalInterestNameAndAddress(ai)
                            If b1.AdditionalInterests Is Nothing Then
                                b1.AdditionalInterests = New Generic.List(Of QuickQuoteAdditionalInterest)
                            End If
                            b1.AdditionalInterests.Add(ai)
                            'si.AdditionalInterests.Remove(ai)'remove once out of loop
                            If aiHoldList Is Nothing Then
                                aiHoldList = New Generic.List(Of QuickQuoteAdditionalInterest)
                            End If
                            aiHoldList.Add(ai)
                        Next
                        If aiHoldList IsNot Nothing AndAlso aiHoldList.Count > 0 Then
                            For Each ai As QuickQuoteAdditionalInterest In aiHoldList
                                si.AdditionalInterests.Remove(ai)
                            Next
                        End If
                        'updated 4/29/2014 for reconciliation; shouldn't be needed here since AI's would've originally came from building and that's where they'll eventually end up
                        'si.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
                        'si.ParseThruAdditionalInterests()
                    End If
                Next
                'updated 4/29/2014 for reconciliation; shouldn't be needed here since AI's would've originally came from building and that's where they'll eventually end up; also don't want to overwrite if building canUse flag was originally True
                'b1.CanUseAdditionalInterestNumForAdditionalInterestReconciliation = False
                'b1.ParseThruAdditionalInterests()
            End If
        End Sub
        Private Sub SetAdditionalInterestNameAndAddress(ByRef ai As QuickQuoteAdditionalInterest)
            If ai IsNot Nothing AndAlso ai.NameAddressNum <> Nothing AndAlso ai.NameAddressNum > 0 AndAlso VersionAndLobInfo.AdditionalInterestNamesAndAddresses IsNot Nothing AndAlso VersionAndLobInfo.AdditionalInterestNamesAndAddresses.Count >= ai.NameAddressNum Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
                Dim na As QuickQuoteGenericNameAddress = VersionAndLobInfo.AdditionalInterestNamesAndAddresses.Item(ai.NameAddressNum - 1)
                If na IsNot Nothing Then
                    ai.Name = qqHelper.CloneObject(na.Name) 'updated 10/15/2014 to clone
                    ai.Address = qqHelper.CloneObject(na.Address) 'updated 10/15/2014 to clone
                End If
            End If
        End Sub
        ''' <summary>
        ''' developer workaround to get names/addresses for all vehicle additional interests
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code after getting QuickQuoteObject</remarks>
        Public Sub BuildAdditionalInterestListFromAllVehicleAdditionalInterests() 'added 9/27/2012 for CAP app gap
            VersionAndLobInfo.AdditionalInterestNamesAndAddresses = Nothing 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
            Dim naNum As Integer = 0

            If VersionAndLobInfo.Vehicles IsNot Nothing AndAlso VersionAndLobInfo.Vehicles.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each v As QuickQuoteVehicle In VersionAndLobInfo.Vehicles
                    If v.AdditionalInterests IsNot Nothing AndAlso v.AdditionalInterests.Count > 0 Then
                        If VersionAndLobInfo.AdditionalInterestNamesAndAddresses Is Nothing Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
                            VersionAndLobInfo.AdditionalInterestNamesAndAddresses = New Generic.List(Of QuickQuoteGenericNameAddress)
                        End If
                        For Each ai As QuickQuoteAdditionalInterest In v.AdditionalInterests
                            naNum += 1
                            ai.NameAddressNum = naNum
                            Dim na As New QuickQuoteGenericNameAddress
                            na.Name = qqHelper.CloneObject(ai.Name) 'updated 10/15/2014 to clone
                            na.Address = qqHelper.CloneObject(ai.Address) 'updated 10/15/2014 to clone
                            VersionAndLobInfo.AdditionalInterestNamesAndAddresses.Add(na) 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through the Parent logic if that's ever put in place
                        Next
                    End If
                Next
            End If

        End Sub
        ''' <summary>
        ''' developer workaround to set names/addresses for all vehicle additional interests
        ''' </summary>
        ''' <remarks>when applicable, needs to be explicitly called by developer code before saving/rating QuickQuoteObject</remarks>
        Public Sub SetNameAndAddressForEachVehicleAdditionalInterest() 'added 9/27/2012 for CAP app gap

            If VersionAndLobInfo.Vehicles IsNot Nothing AndAlso VersionAndLobInfo.Vehicles.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                For Each v As QuickQuoteVehicle In VersionAndLobInfo.Vehicles
                    If v.AdditionalInterests IsNot Nothing AndAlso v.AdditionalInterests.Count > 0 Then
                        For Each ai As QuickQuoteAdditionalInterest In v.AdditionalInterests
                            SetAdditionalInterestNameAndAddress(ai)
                        Next
                    End If
                Next
            End If

        End Sub

        'added 8/13/2012
        Private Sub AddInclusionOfSoleProprietorFromScheduledItem(ByVal si As QuickQuoteInclusionExclusionScheduledItem)
            If VersionAndLobInfo.InclusionOfSoleProprietorRecords Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                VersionAndLobInfo.InclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteInclusionOfSoleProprietorRecord)
            End If

            Dim sp As New QuickQuoteInclusionOfSoleProprietorRecord
            sp.Name = qqHelper.CloneObject(si.Name) 'updated 10/15/2014 to clone
            sp.Address = qqHelper.CloneObject(si.Address) 'updated 10/15/2014 to clone
            sp.Emails = qqHelper.CloneObject(si.Emails) 'updated 10/15/2014 to clone
            sp.Phones = qqHelper.CloneObject(si.Phones) 'updated 10/15/2014 to clone
            sp.PositionTitleTypeId = si.PositionTitleTypeId

            VersionAndLobInfo.InclusionOfSoleProprietorRecords.Add(sp) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
        End Sub
        Private Sub AddExclusionOfSoleProprietorFromScheduledItem(ByVal si As QuickQuoteInclusionExclusionScheduledItem)
            If VersionAndLobInfo.ExclusionOfSoleProprietorRecords Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                VersionAndLobInfo.ExclusionOfSoleProprietorRecords = New Generic.List(Of QuickQuoteExclusionOfSoleProprietorRecord)
            End If

            Dim sp As New QuickQuoteExclusionOfSoleProprietorRecord
            sp.Name = qqHelper.CloneObject(si.Name) 'updated 10/15/2014 to clone
            sp.Address = qqHelper.CloneObject(si.Address) 'updated 10/15/2014 to clone
            sp.Emails = qqHelper.CloneObject(si.Emails) 'updated 10/15/2014 to clone
            sp.Phones = qqHelper.CloneObject(si.Phones) 'updated 10/15/2014 to clone
            sp.PositionTitleTypeId = si.PositionTitleTypeId

            VersionAndLobInfo.ExclusionOfSoleProprietorRecords.Add(sp) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
        End Sub
        Private Sub AddExclusionOfSoleProprietorFromScheduledItem_IL(ByVal si As QuickQuoteInclusionExclusionScheduledItem) 'added 10/15/2018 for IL
            If VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL Is Nothing Then
                VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL = New List(Of QuickQuoteExclusionOfSoleProprietorRecord_IL)
            End If

            Dim sp As New QuickQuoteExclusionOfSoleProprietorRecord_IL
            sp.Name = qqHelper.CloneObject(si.Name)
            sp.Address = qqHelper.CloneObject(si.Address)
            sp.Emails = qqHelper.CloneObject(si.Emails)
            sp.Phones = qqHelper.CloneObject(si.Phones)
            sp.PositionTitleTypeId = si.PositionTitleTypeId

            VersionAndLobInfo.ExclusionOfSoleProprietorRecords_IL.Add(sp)
        End Sub
        Private Sub AddExclusionOfAmishWorkerFromScheduledItem(ByVal si As QuickQuoteInclusionExclusionScheduledItem)
            If VersionAndLobInfo.ExclusionOfAmishWorkerRecords Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                VersionAndLobInfo.ExclusionOfAmishWorkerRecords = New Generic.List(Of QuickQuoteExclusionOfAmishWorkerRecord)
            End If

            Dim am As New QuickQuoteExclusionOfAmishWorkerRecord
            am.Name = qqHelper.CloneObject(si.Name) 'updated 10/15/2014 to clone
            am.Address = qqHelper.CloneObject(si.Address) 'updated 10/15/2014 to clone
            am.Emails = qqHelper.CloneObject(si.Emails) 'updated 10/15/2014 to clone
            am.Phones = qqHelper.CloneObject(si.Phones) 'updated 10/15/2014 to clone
            am.PositionTitleTypeId = si.PositionTitleTypeId

            VersionAndLobInfo.ExclusionOfAmishWorkerRecords.Add(am) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
        End Sub
        Private Sub AddWaiverOfSubrogationFromScheduledItem(ByVal si As QuickQuoteInclusionExclusionScheduledItem)
            If VersionAndLobInfo.WaiverOfSubrogationRecords Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                VersionAndLobInfo.WaiverOfSubrogationRecords = New Generic.List(Of QuickQuoteWaiverOfSubrogationRecord)
            End If

            Dim w As New QuickQuoteWaiverOfSubrogationRecord
            w.Name = qqHelper.CloneObject(si.Name) 'updated 10/15/2014 to clone
            w.Address = qqHelper.CloneObject(si.Address) 'updated 10/15/2014 to clone
            w.Emails = qqHelper.CloneObject(si.Emails) 'updated 10/15/2014 to clone
            w.Phones = qqHelper.CloneObject(si.Phones) 'updated 10/15/2014 to clone
            w.PremiumId = si.WaiverOfSubrogationAmountTypeId

            VersionAndLobInfo.WaiverOfSubrogationRecords.Add(w) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
        End Sub
        'added 4/26/2019
        Private Sub AddKentuckyRejectionOfCoverageEndorsementFromScheduledItem(ByVal si As QuickQuoteInclusionExclusionScheduledItem)
            If VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords Is Nothing Then
                VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords = New List(Of QuickQuoteKentuckyRejectionOfCoverageEndorsement)
            End If

            Dim krce As New QuickQuoteKentuckyRejectionOfCoverageEndorsement
            krce.Name = qqHelper.CloneObject(si.Name)
            krce.Address = qqHelper.CloneObject(si.Address)
            krce.Emails = qqHelper.CloneObject(si.Emails)
            krce.Phones = qqHelper.CloneObject(si.Phones)
            krce.PositionTitleTypeId = si.PositionTitleTypeId

            VersionAndLobInfo.KentuckyRejectionOfCoverageEndorsementRecords.Add(krce)
        End Sub

        'Private Sub ParseThruPackageParts() 'added 10/30/2012 for CPP
        'updated 4/9/2015 w/ optional byref params; added hasParsedScheduledCoverages and hasProcessedLocations 4/13/2015
        Private Sub ParseThruPackageParts(Optional ByRef hasParsedCoverages As Boolean = False, Optional ByRef hasParsedScheduledCoverages As Boolean = False, Optional ByRef hasProcessedLocations As Boolean = False)
            '4/13/2015 note: for any change specific to one of the CPP lobs, verify normal and packagePart PolicyLevel and RiskLevel parsing methods... also verify Location/Building packagePart logic
            '4/13/2015 note cont: coverages and scheduled coverages are currently being handled w/ Location/Building count matching logic... may need additional logic for other objects (i.e. GLClassifications should only be on CGL packagePart; CPR is providing primary location and building properties)
            '4/14/2015 note: will also need to verify Location and Building reconciliation when it comes to CPP and using the Diamond services... not sure if all packageParts will reference the same location (i.e. locationNum 1 is the same location on all PPs) or if all PPs get their own unique location/building nums
            '4/14/2015 note: besides covs and schCovs (at policy, loc, and build levels), there are a few other props that are specific to packageParts (policy and loc level GLClassifications [CGL], build CoverageFormTypeId [CPR], build NumberOfStories [CPR])... should possibly do the same for loc/build Additional Interests, loc classificationCode and classifications and maybe build classification(s)
            If TopLevelQuoteInfo.PackageParts IsNot Nothing AndAlso TopLevelQuoteInfo.PackageParts.Count > 0 Then 'updated 7/27/2018; could have used Property on QuickQuoteObject but wouldn't need to go through the Parent logic

                'added 4/13/2015
                Dim packagePartLocations_CPP As List(Of QuickQuoteLocation) = Nothing
                Dim packagePartLocations_CPR As List(Of QuickQuoteLocation) = Nothing
                Dim packagePartLocations_CGL As List(Of QuickQuoteLocation) = Nothing
                Dim packagePartLocations_CIM As List(Of QuickQuoteLocation) = Nothing
                Dim packagePartLocations_CRM As List(Of QuickQuoteLocation) = Nothing
                Dim packagePartLocations_GAR As List(Of QuickQuoteLocation) = Nothing 'added 5/11/2017

                For Each pp As QuickQuotePackagePart In TopLevelQuoteInfo.PackageParts 'updated 7/27/2018; could have used Property on QuickQuoteObject but wouldn't need to go through the Parent logic
                    If pp.PackagePartTypeId <> "" AndAlso IsNumeric(pp.PackagePartTypeId) = True Then
                        Select Case pp.PackagePartTypeId
                            Case "6" 'Package
                                'If PolicyId = "" Then 'updated 7/27/2018 from private variable to public property
                                '    PolicyId = pp.PolicyId
                                'End If
                                'If PolicyImageNum = "" Then 'updated 7/27/2018 from private variable to public property
                                '    PolicyImageNum = pp.PolicyImageNum
                                'End If
                                'AnniversaryRatingEffectiveDate = pp.AnniversaryRatingEffectiveDate
                                'AnniversaryRatingExpirationDate = pp.AnniversaryRatingExpirationDate
                                'updated 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=True)
                                If pp.AutoSymbols IsNot Nothing Then
                                    VersionAndLobInfo.AutoSymbols = qqHelper.CloneObject(pp.AutoSymbols) 'updated 10/16/2014 to clone; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                'BlanketRatingOptionId = pp.BlanketRatingOptionId
                                'updated 12/19/2018
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                'AddPackagePartCoveragesToPolicy(QuickQuotePackagePartType.Package, pp.Coverages)
                                'updated 4/9/2015
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    'ParseThruCoverages(pp.Coverages, QuickQuotePackagePartType.Package)
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.Package) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    hasParsedCoverages = True
                                End If
                                'added 4/13/2015
                                If pp.ScheduledCoverages IsNot Nothing AndAlso pp.ScheduledCoverages.Count > 0 Then
                                    ParseThruScheduledCoverages(pp.ScheduledCoverages, QuickQuoteXML.QuickQuotePackagePartType.Package)
                                    hasParsedScheduledCoverages = True
                                End If
                                'PropertyDamageLiabilityDeductibleOptionId = pp.DeductiblePerTypeId
                                'updated 12/19/2018
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                'If pp.GLClassifications IsNot Nothing Then 'General Liability
                                '    _GLClassifications = pp.GLClassifications
                                'End If
                                AddPackagePartInclusionsExclusionsToPolicy(pp.InclusionsExclusions)
                                If pp.LossHistoryRecords IsNot Nothing Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords) 'updated 10/16/2014 to clone; updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                                End If
                                If pp.Modifiers IsNot Nothing Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers) 'updated 10/16/2014 to clone; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    TopLevelQuoteInfo.Set_MasterPackageModifiers(qqHelper.CloneObject(pp.Modifiers)) 'added 10/19/2018
                                End If
                                'PackageModificationAssignmentTypeId = pp.PackageModificationAssignmentTypeId
                                'PackageTypeId = pp.PackageTypeId
                                'PolicyTypeId = pp.PolicyTypeId
                                'updated 12/19/2018
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                AddPackagePartPolicyUnderwritingsToPolicy(pp.PolicyUnderwritings)
                                VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier) 'updated 10/16/2014 to clone; updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
                                If LobType = QuickQuoteLobType.CommercialBOP AndAlso qqHelper.IsPositiveDecimalString(pp.ProgramTypeId) Then '08/20/2020 - DJG - BOP Ohio
                                    ProgramTypeId = pp.ProgramTypeId
                                End If
                                'ProgramTypeId = pp.ProgramTypeId 'General Liability
                                'RiskGrade = pp.RiskGrade 'updated 7/19/2018 to use public property instead of private variable
                                'RiskGradeLookupId = pp.RiskGradeLookupId 'updated 7/19/2018 to use public property instead of private variable
                                'updated 12/19/2018
                                qqHelper.SetValueIfNotSet(RiskGrade, pp.RiskGrade, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                                qqHelper.SetValueIfNotSet(RiskGradeLookupId, pp.RiskGradeLookupId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)

                                ' 05/06/2022 CAH - None of the Master PackageParts get pulled into the things we parse
                                'AddPackagePartScheduledRatingsToPolicy(pp.ScheduledRatings)

                                'pp.Applicants
                                If Me.LobType = QuickQuoteLobType.UmbrellaPersonal Then
                                    If pp.Applicants IsNot Nothing Then
                                        VersionAndLobInfo.Applicants = qqHelper.CloneObject(pp.Applicants)
                                    ElseIf VersionAndLobInfo.Applicants IsNot Nothing Then
                                        pp.Applicants = qqHelper.CloneObject(VersionAndLobInfo.Applicants)
                                    End If
                                End If
                                If pp.Drivers IsNot Nothing Then
                                    VersionAndLobInfo.Drivers = qqHelper.CloneObject(pp.Drivers) 'updated 10/16/2014 to clone; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                End If
                                'If pp.Locations IsNot Nothing Then
                                '    _Locations = qqHelper.CloneObject(pp.Locations) 'updated 10/16/2014 to clone; was already commented though
                                'End If
                                packagePartLocations_CPP = pp.Locations 'added 4/13/2015
                                If pp.Locations IsNot Nothing Then 'added 9/18/2018
                                    TopLevelQuoteInfo.Set_MasterPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then
                                    'VersionAndLobInfo.Vehicles = qqHelper.CloneObject(pp.Vehicles) 'updated 10/16/2014 to clone; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    'updated 9/18/2018; note: we would not have been using Vehicles for CPP previously
                                    TopLevelQuoteInfo.Set_MasterPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                'pp.Operators 'added placeholder 4/9/2015

                                'added 11/4/2014; won't use here since it should get set by normal QuickQuoteXML.ParseImage method
                                '_AddFormsVersionId = pp.AddFormsVersionId
                                '_RatingVersionId = pp.RatingVersionId
                                '_UnderwritingVersionId = pp.UnderwritingVersionId
                                '_VersionId = pp.VersionId
                                'added 11/5/2014; updated 7/19/2018 to use public property instead of private variable
                                CPP_Main_PackagePart_AddFormsVersionId = pp.AddFormsVersionId
                                CPP_Main_PackagePart_RatingVersionId = pp.RatingVersionId
                                CPP_Main_PackagePart_UnderwritingVersionId = pp.UnderwritingVersionId
                                CPP_Main_PackagePart_VersionId = pp.VersionId

                                'added 6/12/2018; Diamond doesn't have a spot in the UI to see CPP AIs at the policy level, but this is our workaround to have a central list that other spots can pull from
                                If pp.AdditionalInterests IsNot Nothing Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests) 'updated 8/6/2018 from _AdditionalInterests; could have used public property on QuickQuoteObject, but no need to go through Parent logic
                                End If
                            Case "1" 'Property
                                CPP_Has_Property_PackagePart = True 'added 5/11/2017; will likely always be on CPP; updated 7/23/2018 from private variable to public property
                                CPP_CPR_PackagePart_QuotedPremium = pp.FullTermPremium 'added 11/19/2012 for CPP
                                'AddPackagePartCoveragesToPolicy(QuickQuotePackagePartType.CommercialProperty, pp.Coverages)
                                'updated 4/9/2015
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    'ParseThruCoverages(pp.Coverages, QuickQuotePackagePartType.Package)
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    hasParsedCoverages = True
                                End If
                                'added 4/13/2015
                                If pp.ScheduledCoverages IsNot Nothing AndAlso pp.ScheduledCoverages.Count > 0 Then
                                    ParseThruScheduledCoverages(pp.ScheduledCoverages, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                                    hasParsedScheduledCoverages = True
                                End If
                                AddPackagePartInclusionsExclusionsToPolicy(pp.InclusionsExclusions)
                                AddPackagePartPolicyUnderwritingsToPolicy(pp.PolicyUnderwritings)
                                AddPackagePartScheduledRatingsToPolicy(pp.ScheduledRatings)
                                'If pp.Locations IsNot Nothing Then 'most location/building covs will come from here; 4/7/2015 note: this won't work for the IM Building coverages as they won't come back on this package part... will need a way to look at all package parts and just pull back the unique items w/o duplicating (since all locations/buildings are written to all parts, but the coverages at those levels aren't always written to all parts)
                                '    _Locations = qqHelper.CloneObject(pp.Locations) 'updated 10/16/2014 to clone
                                'End If 'removed 4/13/2015 to go w/ latest logic
                                packagePartLocations_CPR = pp.Locations 'added 4/13/2015
                                If pp.Locations IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CPRPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CPRPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                If pp.Modifiers IsNot Nothing Then 'added 10/19/2018
                                    TopLevelQuoteInfo.Set_CPRPackageModifiers(qqHelper.CloneObject(pp.Modifiers))
                                End If
                                'updated 12/3/2012; updated 7/19/2018 to use public property instead of private variable
                                CPP_CPR_RiskGrade = pp.RiskGrade
                                CPP_CPR_RiskGradeLookupId = pp.RiskGradeLookupId

                                'added 11/4/2014 for CPP; updated 7/18/2018 to use public properties instead of private variables
                                CPP_CPR_PackagePart_AddFormsVersionId = pp.AddFormsVersionId
                                CPP_CPR_PackagePart_RatingVersionId = pp.RatingVersionId
                                CPP_CPR_PackagePart_UnderwritingVersionId = pp.UnderwritingVersionId
                                CPP_CPR_PackagePart_VersionId = pp.VersionId

                                'added 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)

                                'added 12/20/2018
                                If pp.LossHistoryRecords IsNot Nothing AndAlso pp.LossHistoryRecords.Count > 0 AndAlso (VersionAndLobInfo.LossHistoryRecords Is Nothing OrElse VersionAndLobInfo.LossHistoryRecords.Count = 0) Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords)
                                End If
                                If pp.Modifiers IsNot Nothing AndAlso pp.Modifiers.Count > 0 AndAlso (VersionAndLobInfo.Modifiers Is Nothing OrElse VersionAndLobInfo.Modifiers.Count = 0) Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers)
                                End If
                                If pp.PriorCarrier IsNot Nothing AndAlso pp.PriorCarrier.HasData = True AndAlso (VersionAndLobInfo.PriorCarrier Is Nothing OrElse VersionAndLobInfo.PriorCarrier.HasData = False) Then
                                    VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier)
                                End If
                                If pp.AdditionalInterests IsNot Nothing AndAlso pp.AdditionalInterests.Count > 0 AndAlso (VersionAndLobInfo.AdditionalInterests Is Nothing OrElse VersionAndLobInfo.AdditionalInterests.Count = 0) Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests)
                                End If
                            Case "2" 'General Liability
                                CPP_Has_GeneralLiability_PackagePart = True 'added 5/11/2017; typically on CPP but shouldn't be when Garage PackagePart is there; updated 7/23/2018 from private variable to public property
                                CPP_GL_PackagePart_QuotedPremium = pp.FullTermPremium 'added 11/19/2012 for CPP
                                'AddPackagePartCoveragesToPolicy(QuickQuotePackagePartType.GeneralLiability, pp.Coverages)
                                'updated 4/9/2015
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    'ParseThruCoverages(pp.Coverages, QuickQuotePackagePartType.Package)
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    hasParsedCoverages = True
                                End If
                                'updated 4/13/2015
                                If pp.ScheduledCoverages IsNot Nothing AndAlso pp.ScheduledCoverages.Count > 0 Then
                                    ParseThruScheduledCoverages(pp.ScheduledCoverages, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                                    hasParsedScheduledCoverages = True
                                End If
                                If pp.GLClassifications IsNot Nothing Then
                                    VersionAndLobInfo.GLClassifications = qqHelper.CloneObject(pp.GLClassifications) 'updated 10/16/2014 to clone; updated 7/18/2018 from _GLClassifications; could have used QuickQuoteObject's GLClassifications property, but we shouldn't need to go through Parent logic
                                End If
                                AddPackagePartInclusionsExclusionsToPolicy(pp.InclusionsExclusions)
                                AddPackagePartPolicyUnderwritingsToPolicy(pp.PolicyUnderwritings)
                                ProgramTypeId = pp.ProgramTypeId '4/2/2015 note: added separate variable/property for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
                                AddPackagePartScheduledRatingsToPolicy(pp.ScheduledRatings)
                                'If pp.Locations IsNot Nothing AndAlso pp.Locations.Count > 0 AndAlso _Locations IsNot Nothing AndAlso _Locations.Count > 0 Then 'just need loc GLClassifications
                                '    For i As Integer = 0 To pp.Locations.Count - 1
                                '        If pp.Locations(i).GLClassifications IsNot Nothing AndAlso _Locations(i) IsNot Nothing Then
                                '            _Locations(i).GLClassifications = qqHelper.CloneObject(pp.Locations(i).GLClassifications) 'updated 10/16/2014 to clone
                                '        End If
                                '    Next
                                'End If 'removed 4/13/2015 to go w/ latest logic
                                packagePartLocations_CGL = pp.Locations 'added 4/13/2015
                                If pp.Locations IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CGLPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CGLPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                If pp.Modifiers IsNot Nothing Then 'added 10/19/2018
                                    TopLevelQuoteInfo.Set_CGLPackageModifiers(qqHelper.CloneObject(pp.Modifiers))
                                End If
                                'updated 12/3/2012; updated 7/19/2018 to use public property instead of private variable
                                CPP_CGL_RiskGrade = pp.RiskGrade
                                CPP_CGL_RiskGradeLookupId = pp.RiskGradeLookupId

                                'added 11/4/2014 for CPP; updated 7/18/2018 to use public properties instead of private variables
                                CPP_CGL_PackagePart_AddFormsVersionId = pp.AddFormsVersionId
                                CPP_CGL_PackagePart_RatingVersionId = pp.RatingVersionId
                                CPP_CGL_PackagePart_UnderwritingVersionId = pp.UnderwritingVersionId
                                CPP_CGL_PackagePart_VersionId = pp.VersionId

                                'added 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)

                                'added 12/20/2018
                                If pp.LossHistoryRecords IsNot Nothing AndAlso pp.LossHistoryRecords.Count > 0 AndAlso (VersionAndLobInfo.LossHistoryRecords Is Nothing OrElse VersionAndLobInfo.LossHistoryRecords.Count = 0) Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords)
                                End If
                                If pp.Modifiers IsNot Nothing AndAlso pp.Modifiers.Count > 0 AndAlso (VersionAndLobInfo.Modifiers Is Nothing OrElse VersionAndLobInfo.Modifiers.Count = 0) Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers)
                                End If
                                If pp.PriorCarrier IsNot Nothing AndAlso pp.PriorCarrier.HasData = True AndAlso (VersionAndLobInfo.PriorCarrier Is Nothing OrElse VersionAndLobInfo.PriorCarrier.HasData = False) Then
                                    VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier)
                                End If
                                If pp.AdditionalInterests IsNot Nothing AndAlso pp.AdditionalInterests.Count > 0 AndAlso (VersionAndLobInfo.AdditionalInterests Is Nothing OrElse VersionAndLobInfo.AdditionalInterests.Count = 0) Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests)
                                End If
                            Case "3" 'Inland Marine; added 1/19/2015
                                CPP_Has_InlandMarine_PackagePart = True 'added 3/3/2015 for new CPP package parts; updated 7/23/2018 from private variable to public property
                                'added 1/26/2015
                                CPP_CIM_PackagePart_QuotedPremium = pp.FullTermPremium
                                'AddPackagePartCoveragesToPolicy(QuickQuotePackagePartType.InlandMarine, pp.Coverages)
                                'updated 4/9/2015
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    'ParseThruCoverages(pp.Coverages, QuickQuotePackagePartType.Package)
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    hasParsedCoverages = True
                                End If
                                'AddPackagePartScheduledCoveragesToPolicy(QuickQuotePackagePartType.InlandMarine, pp.ScheduledCoverages)
                                'AddPackagePartScheduledCoveragesToPolicy(QuickQuoteXML.QuickQuotePackagePartType.InlandMarine, pp.ScheduledCoverages) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                'updated 4/13/2015
                                If pp.ScheduledCoverages IsNot Nothing AndAlso pp.ScheduledCoverages.Count > 0 Then
                                    ParseThruScheduledCoverages(pp.ScheduledCoverages, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                                    hasParsedScheduledCoverages = True
                                End If
                                AddPackagePartPolicyUnderwritingsToPolicy(pp.PolicyUnderwritings)
                                ' 05/06/2022 CAH - None of the CIM PackageParts get pulled into the things we parse
                                ' These Scheduled Ratings will not overwrite properties intended for other package parts.
                                'AddPackagePartScheduledRatingsToPolicy(pp.ScheduledRatings)
                                packagePartLocations_CIM = pp.Locations 'added 4/13/2015
                                If pp.Locations IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CIMPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CIMPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                If pp.Modifiers IsNot Nothing Then 'added 10/19/2018
                                    TopLevelQuoteInfo.Set_CIMPackageModifiers(qqHelper.CloneObject(pp.Modifiers))
                                End If
                                CPP_CIM_RiskGrade = pp.RiskGrade 'updated 7/19/2018 to use public property instead of private variable
                                CPP_CIM_RiskGradeLookupId = pp.RiskGradeLookupId 'updated 7/19/2018 to use public property instead of private variable

                                'updated 1/21/2015; updated 7/18/2018 to use public properties instead of private variables
                                CPP_CIM_PackagePart_AddFormsVersionId = pp.AddFormsVersionId
                                CPP_CIM_PackagePart_RatingVersionId = pp.RatingVersionId
                                CPP_CIM_PackagePart_UnderwritingVersionId = pp.UnderwritingVersionId
                                CPP_CIM_PackagePart_VersionId = pp.VersionId

                                'added 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)

                                'added 12/20/2018
                                If pp.LossHistoryRecords IsNot Nothing AndAlso pp.LossHistoryRecords.Count > 0 AndAlso (VersionAndLobInfo.LossHistoryRecords Is Nothing OrElse VersionAndLobInfo.LossHistoryRecords.Count = 0) Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords)
                                End If
                                If pp.Modifiers IsNot Nothing AndAlso pp.Modifiers.Count > 0 AndAlso (VersionAndLobInfo.Modifiers Is Nothing OrElse VersionAndLobInfo.Modifiers.Count = 0) Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers)
                                End If
                                If pp.PriorCarrier IsNot Nothing AndAlso pp.PriorCarrier.HasData = True AndAlso (VersionAndLobInfo.PriorCarrier Is Nothing OrElse VersionAndLobInfo.PriorCarrier.HasData = False) Then
                                    VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier)
                                End If
                                If pp.AdditionalInterests IsNot Nothing AndAlso pp.AdditionalInterests.Count > 0 AndAlso (VersionAndLobInfo.AdditionalInterests Is Nothing OrElse VersionAndLobInfo.AdditionalInterests.Count = 0) Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests)
                                End If
                            Case "4" 'Crime; added 1/19/2015
                                CPP_Has_Crime_PackagePart = True 'added 3/3/2015 for new CPP package parts; updated 7/23/2018 from private variable to public property
                                'added 1/26/2015
                                CPP_CRM_PackagePart_QuotedPremium = pp.FullTermPremium
                                'AddPackagePartCoveragesToPolicy(QuickQuotePackagePartType.Crime, pp.Coverages)
                                'updated 4/9/2015
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    'ParseThruCoverages(pp.Coverages, QuickQuotePackagePartType.Package)
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.Crime) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    hasParsedCoverages = True
                                End If
                                'added 4/13/2015
                                If pp.ScheduledCoverages IsNot Nothing AndAlso pp.ScheduledCoverages.Count > 0 Then
                                    ParseThruScheduledCoverages(pp.ScheduledCoverages, QuickQuoteXML.QuickQuotePackagePartType.Crime)
                                    hasParsedScheduledCoverages = True
                                End If
                                AddPackagePartPolicyUnderwritingsToPolicy(pp.PolicyUnderwritings)
                                ' 05/06/2022 CAH - None of the CRM PackageParts get pulled into the things we parse
                                ' These Scheduled Ratings will not overwrite properties intended for other package parts.
                                'AddPackagePartScheduledRatingsToPolicy(pp.ScheduledRatings)
                                packagePartLocations_CRM = pp.Locations 'added 4/13/2015
                                If pp.Locations IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CRMPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_CRMPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                If pp.Modifiers IsNot Nothing Then 'added 10/19/2018
                                    TopLevelQuoteInfo.Set_CRMPackageModifiers(qqHelper.CloneObject(pp.Modifiers))
                                End If
                                CPP_CRM_RiskGrade = pp.RiskGrade 'updated 7/19/2018 to use public property instead of private variable
                                CPP_CRM_RiskGradeLookupId = pp.RiskGradeLookupId 'updated 7/19/2018 to use public property instead of private variable

                                'updated 1/21/2015; updated 7/18/2018 to use public properties instead of private variables
                                CPP_CRM_PackagePart_AddFormsVersionId = pp.AddFormsVersionId
                                CPP_CRM_PackagePart_RatingVersionId = pp.RatingVersionId
                                CPP_CRM_PackagePart_UnderwritingVersionId = pp.UnderwritingVersionId
                                CPP_CRM_PackagePart_VersionId = pp.VersionId

                                'added 4/2/2015 for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
                                CPP_CRM_ProgramTypeId = pp.ProgramTypeId
                                'added 4/9/2015
                                AggregateLimit = pp.AggregateLimit
                                ClassificationCodes = qqHelper.CloneObject(pp.ClassificationCodes) 'could see if there's something there before cloning
                                NumberOfEmployees = pp.NumberOfEmployees

                                'added 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)

                                'added 12/20/2018
                                If pp.LossHistoryRecords IsNot Nothing AndAlso pp.LossHistoryRecords.Count > 0 AndAlso (VersionAndLobInfo.LossHistoryRecords Is Nothing OrElse VersionAndLobInfo.LossHistoryRecords.Count = 0) Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords)
                                End If
                                If pp.Modifiers IsNot Nothing AndAlso pp.Modifiers.Count > 0 AndAlso (VersionAndLobInfo.Modifiers Is Nothing OrElse VersionAndLobInfo.Modifiers.Count = 0) Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers)
                                End If
                                If pp.PriorCarrier IsNot Nothing AndAlso pp.PriorCarrier.HasData = True AndAlso (VersionAndLobInfo.PriorCarrier Is Nothing OrElse VersionAndLobInfo.PriorCarrier.HasData = False) Then
                                    VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier)
                                End If
                                If pp.AdditionalInterests IsNot Nothing AndAlso pp.AdditionalInterests.Count > 0 AndAlso (VersionAndLobInfo.AdditionalInterests Is Nothing OrElse VersionAndLobInfo.AdditionalInterests.Count = 0) Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests)
                                End If
                            Case "5" 'Garage; added 1/19/2015
                                'added 4/22/2017
                                CPP_Has_Garage_PackagePart = True 'updated 7/23/2018 from private variable to public property
                                CPP_GAR_PackagePart_QuotedPremium = pp.FullTermPremium 'updated 7/23/2018 from private variable to public property
                                'updated 5/4/2017
                                If pp.Coverages IsNot Nothing AndAlso pp.Coverages.Count > 0 Then
                                    ParseThruCoverages(pp.Coverages, QuickQuoteXML.QuickQuotePackagePartType.Garage)
                                    hasParsedCoverages = True
                                End If
                                CPP_GAR_ProgramTypeId = pp.ProgramTypeId 'added 5/8/2017

                                'added 5/11/2017
                                packagePartLocations_GAR = pp.Locations
                                If pp.Vehicles IsNot Nothing AndAlso (VersionAndLobInfo.Vehicles Is Nothing OrElse VersionAndLobInfo.Vehicles.Count = 0) Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.Vehicles = qqHelper.CloneObject(pp.Vehicles)
                                End If
                                If pp.Drivers IsNot Nothing AndAlso (VersionAndLobInfo.Drivers Is Nothing OrElse VersionAndLobInfo.Drivers.Count = 0) Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                                    VersionAndLobInfo.Drivers = qqHelper.CloneObject(pp.Drivers)
                                End If
                                If pp.Locations IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_GARPackageLocations(qqHelper.CloneObject(pp.Locations))
                                End If
                                If pp.Vehicles IsNot Nothing Then 'added 10/18/2018
                                    TopLevelQuoteInfo.Set_GARPackageVehicles(qqHelper.CloneObject(pp.Vehicles))
                                End If
                                If pp.Modifiers IsNot Nothing Then 'added 10/19/2018
                                    TopLevelQuoteInfo.Set_GARPackageModifiers(qqHelper.CloneObject(pp.Modifiers))
                                End If

                                'added 12/19/2018
                                qqHelper.SetValueIfNotSet(PolicyId, pp.PolicyId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyImageNum, pp.PolicyImageNum, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingEffectiveDate, pp.AnniversaryRatingEffectiveDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(AnniversaryRatingExpirationDate, pp.AnniversaryRatingExpirationDate, onlyValidIfSpecifiedType:=helper.TypeToVerify.DateType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(BlanketRatingOptionId, pp.BlanketRatingOptionId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PropertyDamageLiabilityDeductibleOptionId, pp.DeductiblePerTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageModificationAssignmentTypeId, pp.PackageModificationAssignmentTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PackageTypeId, pp.PackageTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)
                                qqHelper.SetValueIfNotSet(PolicyTypeId, pp.PolicyTypeId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=False)

                                'added 12/20/2018
                                If pp.AutoSymbols IsNot Nothing AndAlso pp.AutoSymbols.Count > 0 AndAlso (VersionAndLobInfo.AutoSymbols Is Nothing OrElse VersionAndLobInfo.AutoSymbols.Count = 0) Then
                                    VersionAndLobInfo.AutoSymbols = qqHelper.CloneObject(pp.AutoSymbols)
                                End If
                                If pp.LossHistoryRecords IsNot Nothing AndAlso pp.LossHistoryRecords.Count > 0 AndAlso (VersionAndLobInfo.LossHistoryRecords Is Nothing OrElse VersionAndLobInfo.LossHistoryRecords.Count = 0) Then
                                    VersionAndLobInfo.LossHistoryRecords = qqHelper.CloneObject(pp.LossHistoryRecords)
                                End If
                                If pp.Modifiers IsNot Nothing AndAlso pp.Modifiers.Count > 0 AndAlso (VersionAndLobInfo.Modifiers Is Nothing OrElse VersionAndLobInfo.Modifiers.Count = 0) Then
                                    VersionAndLobInfo.Modifiers = qqHelper.CloneObject(pp.Modifiers)
                                End If
                                If pp.PriorCarrier IsNot Nothing AndAlso pp.PriorCarrier.HasData = True AndAlso (VersionAndLobInfo.PriorCarrier Is Nothing OrElse VersionAndLobInfo.PriorCarrier.HasData = False) Then
                                    VersionAndLobInfo.PriorCarrier = qqHelper.CloneObject(pp.PriorCarrier)
                                End If
                                If pp.AdditionalInterests IsNot Nothing AndAlso pp.AdditionalInterests.Count > 0 AndAlso (VersionAndLobInfo.AdditionalInterests Is Nothing OrElse VersionAndLobInfo.AdditionalInterests.Count = 0) Then
                                    VersionAndLobInfo.AdditionalInterests = qqHelper.CloneObject(pp.AdditionalInterests)
                                End If
                        End Select
                    End If
                Next

                'added 12/21/2018 for multiState; copy stuff that is only retrieved from masterPart at top level to all state quotes
                If LobType = QuickQuoteLobType.CommercialPackage AndAlso QuoteLevel = helper.QuoteLevel.TopLevel AndAlso TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        If msq IsNot Nothing Then
                            qqHelper.SetValueIfNotSet(msq.RiskGrade, RiskGrade, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                            qqHelper.SetValueIfNotSet(msq.RiskGradeLookupId, RiskGradeLookupId, onlyValidIfSpecifiedType:=helper.TypeToVerify.NumericType, okayToOverwrite:=True)
                        End If
                    Next
                End If

                'added 4/13/2015
                'If packagePartLocations_CPR IsNot Nothing AndAlso packagePartLocations_CPR.Count > 0 Then
                'updated 5/15/2017 to handle for any combination of packageParts (since CPR may not be there)
                If qqHelper.LocationCount(packagePartLocations_CPR) > 0 OrElse qqHelper.LocationCount(packagePartLocations_CGL) > 0 OrElse qqHelper.LocationCount(packagePartLocations_CIM) > 0 OrElse qqHelper.LocationCount(packagePartLocations_CRM) > 0 OrElse qqHelper.LocationCount(packagePartLocations_GAR) > 0 Then
                    '_Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_CPR)
                    'updated 5/15/2017 to handle for any combination of packageParts (since CPR may not be there)
                    'updated 7/18/2018 from _Locations; could have used QuickQuoteObject's Locations property, but we shouldn't need to go through Parent logic
                    If qqHelper.LocationCount(packagePartLocations_CPR) > 0 Then
                        VersionAndLobInfo.Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_CPR)
                    ElseIf qqHelper.LocationCount(packagePartLocations_CGL) > 0 Then
                        VersionAndLobInfo.Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_CGL)
                    ElseIf qqHelper.LocationCount(packagePartLocations_CIM) > 0 Then
                        VersionAndLobInfo.Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_CIM)
                    ElseIf qqHelper.LocationCount(packagePartLocations_CRM) > 0 Then
                        VersionAndLobInfo.Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_CRM)
                    Else 'qqHelper.LocationCount(packagePartLocations_GAR) > 0
                        VersionAndLobInfo.Locations = qqHelper.ClonedLocationsListForCPP(packagePartLocations_GAR)
                    End If
                    If VersionAndLobInfo.Locations IsNot Nothing AndAlso VersionAndLobInfo.Locations.Count > 0 Then 'should be okay unless clone failed
                        If qqHelper.LocationAndChildBuildingCountsMatch(VersionAndLobInfo.Locations, packagePartLocations_CPR) = True Then 'should always match since _Locations was created from packagePartLocations_CPR
                            hasProcessedLocations = True
                            qqHelper.ApplyLocationsFromOneListToAnother(packagePartLocations_CPR, VersionAndLobInfo.Locations, QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty)
                        End If
                        If qqHelper.LocationAndChildBuildingCountsMatch(VersionAndLobInfo.Locations, packagePartLocations_CGL) = True Then
                            hasProcessedLocations = True
                            qqHelper.ApplyLocationsFromOneListToAnother(packagePartLocations_CGL, VersionAndLobInfo.Locations, QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability)
                        End If
                        If qqHelper.LocationAndChildBuildingCountsMatch(VersionAndLobInfo.Locations, packagePartLocations_CIM) = True Then
                            hasProcessedLocations = True
                            qqHelper.ApplyLocationsFromOneListToAnother(packagePartLocations_CIM, VersionAndLobInfo.Locations, QuickQuoteXML.QuickQuotePackagePartType.InlandMarine)
                        End If
                        If qqHelper.LocationAndChildBuildingCountsMatch(VersionAndLobInfo.Locations, packagePartLocations_CRM) = True Then
                            hasProcessedLocations = True
                            qqHelper.ApplyLocationsFromOneListToAnother(packagePartLocations_CRM, VersionAndLobInfo.Locations, QuickQuoteXML.QuickQuotePackagePartType.Crime)
                        End If
                        'added 5/11/2017
                        If qqHelper.LocationAndChildBuildingCountsMatch(VersionAndLobInfo.Locations, packagePartLocations_GAR) = True Then
                            hasProcessedLocations = True
                            qqHelper.ApplyLocationsFromOneListToAnother(packagePartLocations_GAR, VersionAndLobInfo.Locations, QuickQuoteXML.QuickQuotePackagePartType.Garage)
                        End If
                    End If
                End If

            End If
        End Sub
        'Private Sub AddPackagePartCoveragesToPolicy(ByVal packagePartType As QuickQuotePackagePartType, ByVal covs As Generic.List(Of QuickQuoteCoverage)) 'added 10/30/2012 for CPP; updated 11/14/2012 w/ packagePartType (for separate CGL/CPR enhancement endorsements); 4/9/2015 note: no longer being used now that Coverages are being parsed directly from ParseThruPackageParts
        Private Sub AddPackagePartCoveragesToPolicy(ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, ByVal covs As Generic.List(Of QuickQuoteCoverage)) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            If covs IsNot Nothing AndAlso covs.Count > 0 Then
                For Each cov As QuickQuoteCoverage In covs
                    'If packagePartType <> Nothing AndAlso packagePartType <> QuickQuotePackagePartType.None AndAlso cov.CoverageCodeId = "286" Then
                    If packagePartType <> Nothing AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None AndAlso cov.CoverageCodeId = "286" Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                        'If packagePartType = QuickQuotePackagePartType.CommercialProperty Then
                        If packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                            Has_PackageCPR_EnhancementEndorsement = cov.Checkbox 'updated 7/23/2018 from private variable to public property
                            PackageCPR_EnhancementEndorsementQuotedPremium = cov.FullTermPremium
                            'ElseIf packagePartType = QuickQuotePackagePartType.GeneralLiability Then
                        ElseIf packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                            Has_PackageGL_EnhancementEndorsement = cov.Checkbox 'updated 7/23/2018 from private variable to public property
                            PackageGL_EnhancementEndorsementQuotedPremium = cov.FullTermPremium
                        End If
                    Else
                        '11/27/2012 - updated logic for additional insureds (since CPP would send them in CPR and CGL packagePart sections)
                        Dim okayToAdd As Boolean = False
                        Select Case cov.CoverageCodeId
                            Case "926", "21018", "501", "21022", "21019", "21023", "21020", "21053", "21054", "21055", "21024", "21025", "21026", "21016", "21017", "21021"
                                'additional insured (only add for GL)
                                'If packagePartType <> Nothing AndAlso packagePartType = QuickQuotePackagePartType.GeneralLiability Then
                                If packagePartType <> Nothing AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                                    okayToAdd = True
                                End If
                            Case Else
                                okayToAdd = True
                        End Select
                        If okayToAdd = True Then 'added IF 11/27/2012
                            'updated 7/18/2018 from _PolicyCoverages; could have used QuickQuoteObject's PolicyCoverages property, but we shouldn't need to go through Parent logic
                            If VersionAndLobInfo.Coverages Is Nothing Then
                                VersionAndLobInfo.Coverages = New Generic.List(Of QuickQuoteCoverage)
                            End If
                            VersionAndLobInfo.Coverages.Add(qqHelper.CloneObject(cov)) 'updated 10/16/2014 to clone
                        End If
                    End If
                    'Removing 6/29/2022 as this method is not used
                    ''Added 6/27/2022 for task 75780 MLW
                    'If packagePartType <> Nothing AndAlso packagePartType <> QuickQuoteXML.QuickQuotePackagePartType.None AndAlso cov.CoverageCodeId = "100009" AndAlso packagePartType = QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty Then
                    '    Has_PackageCPR_PlusEnhancementEndorsement = cov.Checkbox
                    '    PackageCPR_PlusEnhancementEndorsementQuotedPremium = cov.FullTermPremium               
                    'End If
                Next
            End If
        End Sub
        'added 1/26/2015 for CIM
        'Private Sub AddPackagePartScheduledCoveragesToPolicy(ByVal packagePartType As QuickQuotePackagePartType, ByVal schCovs As List(Of QuickQuoteScheduledCoverage))
        Private Sub AddPackagePartScheduledCoveragesToPolicy(ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType, ByVal schCovs As List(Of QuickQuoteScheduledCoverage)) '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
            If schCovs IsNot Nothing AndAlso schCovs.Count > 0 Then
                For Each sc As QuickQuoteScheduledCoverage In schCovs
                    Dim okayToAdd As Boolean = False

                    'If packagePartType = QuickQuotePackagePartType.InlandMarine Then 'will need to update if necessary
                    If packagePartType = QuickQuoteXML.QuickQuotePackagePartType.InlandMarine Then '4/10/2015 - changed packagePartType param to use Enum from QuickQuoteXML
                        okayToAdd = True
                    End If

                    If okayToAdd = True Then
                        If VersionAndLobInfo.ScheduledCoverages Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                            VersionAndLobInfo.ScheduledCoverages = New List(Of QuickQuoteScheduledCoverage)
                        End If
                        VersionAndLobInfo.ScheduledCoverages.Add(qqHelper.CloneObject(sc))
                    End If
                Next
            End If
        End Sub
        Private Sub AddPackagePartInclusionsExclusionsToPolicy(ByVal ies As Generic.List(Of QuickQuoteInclusionExclusion)) 'added 10/30/2012 for CPP
            If ies IsNot Nothing AndAlso ies.Count > 0 Then
                For Each ie As QuickQuoteInclusionExclusion In ies
                    If VersionAndLobInfo.InclusionsExclusions Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                        VersionAndLobInfo.InclusionsExclusions = New Generic.List(Of QuickQuoteInclusionExclusion)
                    End If
                    VersionAndLobInfo.InclusionsExclusions.Add(qqHelper.CloneObject(ie)) 'updated 10/16/2014 to clone
                Next
            End If
        End Sub
        Private Sub AddPackagePartPolicyUnderwritingsToPolicy(ByVal pus As Generic.List(Of QuickQuotePolicyUnderwriting)) 'added 10/30/2012 for CPP
            If pus IsNot Nothing AndAlso pus.Count > 0 Then
                For Each pu As QuickQuotePolicyUnderwriting In pus
                    If VersionAndLobInfo.PolicyUnderwritings Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                        VersionAndLobInfo.PolicyUnderwritings = New Generic.List(Of QuickQuotePolicyUnderwriting)
                        VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds = New Generic.List(Of String)
                    End If
                    'updated 11/26/2012 to prevent duplicates
                    'If _PolicyUnderwritingCodeIds.Count = 0 OrElse (_PolicyUnderwritingCodeIds.Count > 0 AndAlso _PolicyUnderwritingCodeIds.Contains(pu.PolicyUnderwritingCodeId) = False) Then
                    'updated 12/24/2012 for code and level and tab
                    If VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds.Count = 0 OrElse (VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds.Count > 0 AndAlso VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds.Contains(pu.PolicyUnderwritingCodeId & "|" & pu.PolicyUnderwritingLevelId & "|" & pu.PolicyUnderwritingTabId) = False) Then 'updated 7/23/2018 from private variables; could use QQO's Props but don't need to go through Parent logic
                        '_PolicyUnderwritingCodeIds.Add(pu.PolicyUnderwritingCodeId)
                        'updated 12/24/2012 for code and level and tab
                        VersionAndLobInfo.PolicyUnderwritingCodeAndLevelAndTabIds.Add(pu.PolicyUnderwritingCodeId & "|" & pu.PolicyUnderwritingLevelId & "|" & pu.PolicyUnderwritingTabId)
                        VersionAndLobInfo.PolicyUnderwritings.Add(qqHelper.CloneObject(pu)) 'updated 10/16/2014 to clone
                    Else
                        'already been added
                    End If
                Next
            End If
        End Sub
        Private Sub AddPackagePartScheduledRatingsToPolicy(ByVal srs As Generic.List(Of QuickQuoteScheduledRating)) 'added 10/30/2012 for CPP
            If srs IsNot Nothing AndAlso srs.Count > 0 Then
                For Each sr As QuickQuoteScheduledRating In srs
                    If VersionAndLobInfo.ScheduledRatings Is Nothing Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                        VersionAndLobInfo.ScheduledRatings = New Generic.List(Of QuickQuoteScheduledRating)
                    End If
                    VersionAndLobInfo.ScheduledRatings.Add(qqHelper.CloneObject(sr)) 'updated 10/16/2014 to clone
                Next
            End If
        End Sub

        'Public Sub CalculateDecPremiums()'commented out 8/16/2012
        '    If _LobType <> Nothing AndAlso _LobType <> QuickQuoteLobType.None Then
        '        Select Case _LobType
        '            Case QuickQuoteLobType.CommercialBOP
        '                Dec_BuildingLimit_All_Premium = ""
        '                Dec_BuildingPersPropLimit_All_Premium = ""
        '                Dec_BOP_OptCovs_Premium = ""

        '                If _Locations IsNot Nothing AndAlso _Locations.Count > 0 Then
        '                    For Each l As QuickQuoteLocation In _Locations
        '                        If l.Buildings IsNot Nothing AndAlso l.Buildings.Count > 0 Then
        '                            For Each b As QuickQuoteBuilding In l.Buildings
        '                                Dec_BuildingLimit_All_Premium = qqHelper.getSum(_Dec_BuildingLimit_All_Premium, b.LimitQuotedPremium)
        '                                Dec_BuildingPersPropLimit_All_Premium = qqHelper.getSum(Dec_BuildingPersPropLimit_All_Premium, b.PersonalPropertyLimitQuotedPremium)
        '                            Next
        '                        End If
        '                    Next
        '                End If

        '                'If _HasBusinessMasterEnhancement = True Then
        '                '    Dec_BOP_EnhEnd_Premium = "100"
        '                'Else
        '                '    Dec_BOP_EnhEnd_Premium = "0"
        '                'End If

        '                'subtract everything else from totalPrem to get OptCovs prem
        '                Dec_BOP_OptCovs_Premium = qqHelper.getDiff(_TotalQuotedPremium, _Dec_BuildingLimit_All_Premium)
        '                Dec_BOP_OptCovs_Premium = qqHelper.getDiff(_Dec_BOP_OptCovs_Premium, _Dec_BuildingPersPropLimit_All_Premium)
        '                Dec_BOP_OptCovs_Premium = qqHelper.getDiff(_Dec_BOP_OptCovs_Premium, _OccurrencyLiabilityQuotedPremium)
        '                Dec_BOP_OptCovs_Premium = qqHelper.getDiff(_Dec_BOP_OptCovs_Premium, _BusinessMasterEnhancementQuotedPremium)
        '            Case QuickQuoteLobType.WorkersCompensation
        '                '_EmployersLiabilityQuotedPremium = increased limit

        '        End Select
        '    End If
        'End Sub
        'added 3/3/2014 once LossHistories property was added to Driver and Applicant objects
        Public Function HasLossHistories() As Boolean
            Dim hasLH As Boolean = False

            'If QuoteLevel = helper.QuoteLevel.TopLevel AndAlso HasMultipleQuoteStates = True Then 'added IF 8/14/2018; original logic in ELSE
            '    Dim multiStateQuotes As List(Of QuickQuote.CommonObjects.QuickQuoteObject) = qqHelper.MultiStateQuickQuoteObjects(Me) 'should always return at least Me in the list, but should be state-level quotes in this instance since we already checked for HasMultipleQuoteStates
            '    If multiStateQuotes IsNot Nothing AndAlso multiStateQuotes.Count > 0 Then
            '        For Each msq As QuickQuoteObject In multiStateQuotes
            '            If msq.QuoteLevel = helper.QuoteLevel.StateLevel AndAlso msq.HasLossHistories = True Then
            '                hasLH = True
            '                Exit For
            '            End If
            '        Next
            '    End If
            'Else
            '    If VersionAndLobInfo.LossHistoryRecords IsNot Nothing AndAlso VersionAndLobInfo.LossHistoryRecords.Count > 0 Then 'updated 7/19/2018 from private variable; could have used QuickQuoteObject's property, but we shouldn't need to go through Parent logic
            '        hasLH = True
            '    End If

            '    If hasLH = False AndAlso VersionAndLobInfo.Drivers IsNot Nothing AndAlso VersionAndLobInfo.Drivers.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
            '        For Each d As QuickQuoteDriver In VersionAndLobInfo.Drivers
            '            If d.LossHistoryRecords IsNot Nothing AndAlso d.LossHistoryRecords.Count > 0 Then
            '                hasLH = True
            '                Exit For
            '            End If
            '        Next
            '    End If

            '    If hasLH = False AndAlso VersionAndLobInfo.Applicants IsNot Nothing AndAlso VersionAndLobInfo.Applicants.Count > 0 Then 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
            '        For Each a As QuickQuoteApplicant In VersionAndLobInfo.Applicants
            '            If a.LossHistoryRecords IsNot Nothing AndAlso a.LossHistoryRecords.Count > 0 Then
            '                hasLH = True
            '                Exit For
            '            End If
            '        Next
            '    End If
            'End If

            'updated 6/10/2020 to use new method
            Dim lossHists As List(Of QuickQuoteLossHistoryRecord) = qqHelper.QuickQuoteLossHistoriesFromAllLevels(Me, stopOnceAnyAreFound:=True)
            If lossHists IsNot Nothing AndAlso lossHists.Count > 0 Then
                hasLH = True
            End If

            Return hasLH
        End Function
        'added 4/26/2014
        Public Sub CopyPolicyholder1NameAddressEmailsAndPhonesToClient(Optional ByVal resetClientInfoIfNecessary As Boolean = False, Optional ByVal maintainClientId As Boolean = True, Optional ByVal maintainClientName2 As Boolean = True) '12/24/2014 - added optional params for wiping out if necessary and maintaining clientId and clientName2
            qqHelper.CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToClient(TopLevelQuoteInfo.Policyholder, TopLevelQuoteInfo.Client, resetClientInfoIfNecessary, maintainClientId, maintainClientName2) 'updated 12/24/2014 to use new optional param
            'updated 7/27/2018; could have used QuickQuoteObject Properties but wouldn't need to go through Parent logic

        End Sub
        Public Sub CopyClientNameAddressEmailsAndPhonesToPolicyholder1()
            qqHelper.CopyQuickQuoteClientNameAddressEmailsAndPhonesToPolicyholder1(TopLevelQuoteInfo.Client, TopLevelQuoteInfo.Policyholder)
            'updated 7/27/2018; could have used QuickQuoteObject Properties but wouldn't need to go through Parent logic

        End Sub
        Public Sub CopyPolicyholder2NameToClientName2(Optional ByVal resetClientName2IfNecessary As Boolean = False) '12/24/2014 - added optional param for wiping out if necessary
            qqHelper.CopyQuickQuotePolicyholder2NameToClientName2(TopLevelQuoteInfo.Policyholder2, TopLevelQuoteInfo.Client, resetClientName2IfNecessary) 'updated 12/24/2014 to use new optional param
            'updated 7/27/2018; could have used QuickQuoteObject Properties but wouldn't need to go through Parent logic

        End Sub
        Public Sub CopyClientName2ToPolicyholder2Name()
            qqHelper.CopyQuickQuoteClientName2ToPolicyholder2(TopLevelQuoteInfo.Client, Policyholder2)
            'updated 7/27/2018; could have used QuickQuoteObject Properties but wouldn't need to go through Parent logic

        End Sub
        Public Sub CopyPolicyholder1AddressToPolicyholder2Address()
            qqHelper.CopyQuickQuotePolicyholder1AddressToPolicyholder2(TopLevelQuoteInfo.Policyholder, TopLevelQuoteInfo.Policyholder2)
            'updated 7/27/2018; could have used QuickQuoteObject Properties but wouldn't need to go through Parent logic

        End Sub
        'added 7/15/2014
        Public Sub CopyPolicyholdersToClients() 'not being used yet
            'CopyPolicyholder1NameAddressEmailsAndPhonesToClient()
            'CopyPolicyholder2NameToClientName2()

            'updated 12/24/2014 to call new overload method
            CopyPolicyholdersToClients(True)
        End Sub
        Public Sub CopyPolicyholdersToClients(ByVal resetClientInfoIfNecessary As Boolean, Optional ByVal maintainClientId As Boolean = True, Optional ByVal maintainClientName2WhenProcessingPolicyholder1 As Boolean = True) 'not being used yet; created overload 12/24/2014
            CopyPolicyholder1NameAddressEmailsAndPhonesToClient(resetClientInfoIfNecessary, maintainClientId, maintainClientName2WhenProcessingPolicyholder1)
            CopyPolicyholder2NameToClientName2(resetClientInfoIfNecessary)
        End Sub
        Public Sub CopyPolicyholdersToApplicants() 'for HOM
            'If _Policyholder IsNot Nothing AndAlso _Policyholder.HasData = True Then
            '    Dim app1 As QuickQuoteApplicant = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Applicants IsNot Nothing AndAlso _Applicants.Count > 0 Then
            '        For Each a As QuickQuoteApplicant In _Applicants
            '            If a.RelationshipTypeId <> "" AndAlso IsNumeric(a.RelationshipTypeId) = True AndAlso CInt(a.RelationshipTypeId) = 8 Then 'Policyholder 'could use static data list
            '                app1 = a
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToApplicant(_Policyholder, app1)
            '    If app1 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Applicants Is Nothing Then
            '            _Applicants = New List(Of QuickQuoteApplicant)
            '        End If
            '        _Applicants.Add(app1)
            '    End If

            'Else '10/13/2014 note: might need to wipe out applicant if one already exists

            'End If
            'If _Policyholder2 IsNot Nothing AndAlso _Policyholder2.HasData = True Then
            '    Dim app2 As QuickQuoteApplicant = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Applicants IsNot Nothing AndAlso _Applicants.Count > 0 Then
            '        For Each a As QuickQuoteApplicant In _Applicants
            '            If a.RelationshipTypeId <> "" AndAlso IsNumeric(a.RelationshipTypeId) = True AndAlso CInt(a.RelationshipTypeId) = 5 Then 'Policyholder #2 'could use static data list
            '                app2 = a
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToApplicant(_Policyholder2, app2)
            '    If app2 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Applicants Is Nothing Then
            '            _Applicants = New List(Of QuickQuoteApplicant)
            '        End If
            '        _Applicants.Add(app2)
            '    End If

            'Else '10/13/2014 note: might need to wipe out applicant if one already exists

            'End If

            'updated 12/24/2014 to call new overload method
            CopyPolicyholdersToApplicants(True)
        End Sub
        Public Sub CopyPolicyholdersToApplicants(ByVal removeApplicantsIfNecessary As Boolean) 'for HOM; created overload 12/24/2014
            Dim govStateQuote As QuickQuoteObject = Nothing 'added 9/14/2018
            If TopLevelQuoteInfo.Policyholder IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder1Applicants(TopLevelQuoteInfo.Policyholder, govStateQuote.VersionAndLobInfo.Applicants, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder1Applicants(TopLevelQuoteInfo.Policyholder, VersionAndLobInfo.Applicants, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeApplicantsIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder1Applicants(govStateQuote.VersionAndLobInfo.Applicants)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder1Applicants(VersionAndLobInfo.Applicants) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
            If TopLevelQuoteInfo.Policyholder2 IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder2.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder2Applicants(TopLevelQuoteInfo.Policyholder2, govStateQuote.VersionAndLobInfo.Applicants, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder2Applicants(TopLevelQuoteInfo.Policyholder2, VersionAndLobInfo.Applicants, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeApplicantsIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder2Applicants(govStateQuote.VersionAndLobInfo.Applicants)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder2Applicants(VersionAndLobInfo.Applicants) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
        End Sub
        Public Sub CopyPolicyholdersToDrivers() 'for PPA (not being used yet)
            'If _Policyholder IsNot Nothing AndAlso _Policyholder.HasData = True Then
            '    Dim drv1 As QuickQuoteDriver = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Drivers IsNot Nothing AndAlso _Drivers.Count > 0 Then
            '        For Each d As QuickQuoteDriver In _Drivers
            '            If d.RelationshipTypeId <> "" AndAlso IsNumeric(d.RelationshipTypeId) = True AndAlso CInt(d.RelationshipTypeId) = 8 Then 'Policyholder 'could use static data list
            '                drv1 = d
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToDriver(_Policyholder, drv1)
            '    If drv1 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Drivers Is Nothing Then
            '            _Drivers = New List(Of QuickQuoteDriver)
            '        End If
            '        _Drivers.Add(drv1)
            '    End If

            'Else '10/29/2014 note: might need to wipe out driver if one already exists

            'End If
            'If _Policyholder2 IsNot Nothing AndAlso _Policyholder2.HasData = True Then
            '    Dim drv2 As QuickQuoteDriver = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Drivers IsNot Nothing AndAlso _Drivers.Count > 0 Then
            '        For Each d As QuickQuoteDriver In _Drivers
            '            If d.RelationshipTypeId <> "" AndAlso IsNumeric(d.RelationshipTypeId) = True AndAlso CInt(d.RelationshipTypeId) = 5 Then 'Policyholder #2 'could use static data list
            '                drv2 = d
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToDriver(_Policyholder2, drv2)
            '    If drv2 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Drivers Is Nothing Then
            '            _Drivers = New List(Of QuickQuoteDriver)
            '        End If
            '        _Drivers.Add(drv2)
            '    End If

            'Else '10/29/2014 note: might need to wipe out driver if one already exists

            'End If

            'updated 12/24/2014 to call new overload method
            CopyPolicyholdersToDrivers(True)
        End Sub
        Public Sub CopyPolicyholdersToDrivers(ByVal removeDriversIfNecessary As Boolean) 'for PPA (not being used yet); created overload 12/24/2014
            Dim govStateQuote As QuickQuoteObject = Nothing 'added 9/14/2018
            If TopLevelQuoteInfo.Policyholder IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder1Drivers(TopLevelQuoteInfo.Policyholder, govStateQuote.VersionAndLobInfo.Drivers, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder1Drivers(TopLevelQuoteInfo.Policyholder, VersionAndLobInfo.Drivers, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeDriversIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder1Drivers(govStateQuote.VersionAndLobInfo.Drivers)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder1Drivers(VersionAndLobInfo.Drivers) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
            If TopLevelQuoteInfo.Policyholder2 IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder2.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder2Drivers(TopLevelQuoteInfo.Policyholder2, govStateQuote.VersionAndLobInfo.Drivers, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder2Drivers(TopLevelQuoteInfo.Policyholder2, VersionAndLobInfo.Drivers, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeDriversIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder2Drivers(govStateQuote.VersionAndLobInfo.Drivers)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder2Drivers(VersionAndLobInfo.Drivers) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
        End Sub
        'added 10/29/2014 for HOM and RvWatercraft
        Public Sub CopyPolicyholdersToOperators()
            'If _Policyholder IsNot Nothing AndAlso _Policyholder.HasData = True Then
            '    Dim opp1 As QuickQuoteOperator = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Operators IsNot Nothing AndAlso _Operators.Count > 0 Then
            '        For Each o As QuickQuoteOperator In _Operators
            '            If o.RelationshipTypeId <> "" AndAlso IsNumeric(o.RelationshipTypeId) = True AndAlso CInt(o.RelationshipTypeId) = 8 Then 'Policyholder 'could use static data list
            '                opp1 = o
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder1NameAddressEmailsAndPhonesToOperator(_Policyholder, opp1)
            '    If opp1 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Operators Is Nothing Then
            '            _Operators = New List(Of QuickQuoteOperator)
            '        End If
            '        _Operators.Add(opp1)
            '    End If

            'Else '10/29/2014 note: might need to wipe out operator if one already exists

            'End If
            'If _Policyholder2 IsNot Nothing AndAlso _Policyholder2.HasData = True Then
            '    Dim opp2 As QuickQuoteOperator = Nothing
            '    Dim needsAddedToList As Boolean = True

            '    If _Operators IsNot Nothing AndAlso _Operators.Count > 0 Then
            '        For Each o As QuickQuoteOperator In _Operators
            '            If o.RelationshipTypeId <> "" AndAlso IsNumeric(o.RelationshipTypeId) = True AndAlso CInt(o.RelationshipTypeId) = 5 Then 'Policyholder #2 'could use static data list
            '                opp2 = o
            '                needsAddedToList = False
            '            End If
            '        Next
            '    End If

            '    qqHelper.CopyQuickQuotePolicyholder2NameAddressEmailsAndPhonesToOperator(_Policyholder2, opp2)
            '    If opp2 IsNot Nothing AndAlso needsAddedToList = True Then
            '        If _Operators Is Nothing Then
            '            _Operators = New List(Of QuickQuoteOperator)
            '        End If
            '        _Operators.Add(opp2)
            '    End If

            'Else '10/29/2014 note: might need to wipe out operator if one already exists

            'End If

            'updated 12/24/2014 to call new overload method
            CopyPolicyholdersToOperators(True)
        End Sub
        Public Sub CopyPolicyholdersToOperators(ByVal removeOperatorsIfNecessary As Boolean) 'created overload 12/24/2014
            Dim govStateQuote As QuickQuoteObject = Nothing 'added 9/14/2018
            If TopLevelQuoteInfo.Policyholder IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder1Operators(TopLevelQuoteInfo.Policyholder, govStateQuote.VersionAndLobInfo.Operators, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder1Operators(TopLevelQuoteInfo.Policyholder, VersionAndLobInfo.Operators, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeOperatorsIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder1Operators(govStateQuote.VersionAndLobInfo.Operators)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder1Operators(VersionAndLobInfo.Operators) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
            If TopLevelQuoteInfo.Policyholder2 IsNot Nothing AndAlso TopLevelQuoteInfo.Policyholder2.HasData = True Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                If govStateQuote Is Nothing Then 'added 9/14/2018
                    govStateQuote = qqHelper.GoverningStateQuote(Me)
                End If
                If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                    qqHelper.UpdateQuickQuotePolicyholder2Operators(TopLevelQuoteInfo.Policyholder2, govStateQuote.VersionAndLobInfo.Operators, True)
                Else
                    qqHelper.UpdateQuickQuotePolicyholder2Operators(TopLevelQuoteInfo.Policyholder2, VersionAndLobInfo.Operators, True) 'doesn't currently need True since it's optional and that's the default... there just in case default changes; updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                End If
            Else
                If removeOperatorsIfNecessary = True Then
                    If govStateQuote Is Nothing Then 'added 9/14/2018
                        govStateQuote = qqHelper.GoverningStateQuote(Me)
                    End If
                    If govStateQuote IsNot Nothing Then 'added IF 9/14/2018; original logic in ELSE
                        qqHelper.RemoveQuickQuotePolicyholder2Operators(govStateQuote.VersionAndLobInfo.Operators)
                    Else
                        qqHelper.RemoveQuickQuotePolicyholder2Operators(VersionAndLobInfo.Operators) 'updated 7/23/2018 from private variable; could use QQO's Prop but don't need to go through Parent logic
                    End If
                End If
            End If
        End Sub

        'added 9/18/2017
        Private Sub ParseThruExperienceModifications()
            If TopLevelQuoteInfo.ExperienceModifications IsNot Nothing AndAlso TopLevelQuoteInfo.ExperienceModifications.Count > 0 Then 'updated 7/27/2018 from private variable; could have used QuickQuoteObject Property but wouldn't need to go through Parent logic
                For Each expMod As QuickQuoteExperienceModification In TopLevelQuoteInfo.ExperienceModifications
                    'note: should only happen when parsing xml (FinalizeQuickQuote method)... shouldn't happen in FinalizeQuickQuoteLight method
                    'If expMod IsNot Nothing AndAlso QuickQuoteHelperClass.IsDiamondDetailStatusCodeDeleted(expMod.DetailStatusCode) = False Then 'also checking DetailStatusCode in case we decide not to when parsing
                    '    If _CanUseExperienceModificationNumForExperienceModificationReconciliation = False Then
                    '        If expMod.HasValidExperienceModificationNum = True Then
                    '            _CanUseExperienceModificationNumForExperienceModificationReconciliation = True
                    '            'Exit For 'needs to keep going
                    '        End If
                    '    End If
                    '    If _ExperienceModificationBureauTypeId = "" OrElse (qqHelper.IsNumericString(_ExperienceModificationBureauTypeId) = False AndAlso qqHelper.IsNumericString(expMod.BureauTypeId) = True) OrElse (qqHelper.IsPositiveIntegerString(_ExperienceModificationBureauTypeId) = False AndAlso qqHelper.IsPositiveIntegerString(expMod.BureauTypeId) = True) Then
                    '        _ExperienceModificationBureauTypeId = expMod.BureauTypeId
                    '    End If
                    '    If _ExperienceModificationFactor = "" OrElse (qqHelper.IsNumericString(_ExperienceModificationFactor) = False AndAlso qqHelper.IsNumericString(expMod.Factor) = True) OrElse (qqHelper.IsPositiveDecimalString(_ExperienceModificationFactor) = False AndAlso qqHelper.IsPositiveDecimalString(expMod.Factor) = True) Then
                    '        _ExperienceModificationFactor = expMod.Factor
                    '    End If
                    '    If _ModificationProductionDate = "" OrElse (qqHelper.IsDateString(_ModificationProductionDate) = False AndAlso qqHelper.IsDateString(expMod.ModificationProductionDate) = True) Then
                    '        _ModificationProductionDate = expMod.ModificationProductionDate
                    '    End If
                    '    If _RatingEffectiveDate = "" OrElse (qqHelper.IsDateString(_RatingEffectiveDate) = False AndAlso qqHelper.IsDateString(expMod.RatingEffectiveDate) = True) Then
                    '        _RatingEffectiveDate = expMod.RatingEffectiveDate
                    '    End If
                    '    If _ExperienceModificationRiskIdentifier = "" Then
                    '        _ExperienceModificationRiskIdentifier = expMod.RiskIdentifier
                    '    End If
                    'End If
                    'updated 9/23/2017 to 1st check expMod and then check values if not deleted... so we can still call Copy method for all
                    If expMod IsNot Nothing Then 'also checking DetailStatusCode in case we decide not to when parsing
                        expMod.SetOriginalProperties()
                        If QuickQuoteHelperClass.IsDiamondDetailStatusCodeDeleted(expMod.DetailStatusCode) = False Then
                            If CanUseExperienceModificationNumForExperienceModificationReconciliation = False Then 'could put this IF outside of deleted IF check; updated 7/27/2018 from private variable to public property
                                If expMod.HasValidExperienceModificationNum = True Then
                                    CanUseExperienceModificationNumForExperienceModificationReconciliation = True 'updated 7/27/2018 from private variable to public property
                                    'Exit For 'needs to keep going
                                End If
                            End If
                            If ExperienceModificationBureauTypeId = "" OrElse (qqHelper.IsNumericString(ExperienceModificationBureauTypeId) = False AndAlso qqHelper.IsNumericString(expMod.BureauTypeId) = True) OrElse (qqHelper.IsPositiveIntegerString(ExperienceModificationBureauTypeId) = False AndAlso qqHelper.IsPositiveIntegerString(expMod.BureauTypeId) = True) Then 'updated 7/27/2018 from private variable to public property
                                '_ExperienceModificationBureauTypeId = expMod.BureauTypeId
                                'updated 9/28/2017 to set property for consistency
                                ExperienceModificationBureauTypeId = expMod.BureauTypeId
                            End If
                            If ExperienceModificationFactor = "" OrElse (qqHelper.IsNumericString(ExperienceModificationFactor) = False AndAlso qqHelper.IsNumericString(expMod.Factor) = True) OrElse (qqHelper.IsPositiveDecimalString(ExperienceModificationFactor) = False AndAlso qqHelper.IsPositiveDecimalString(expMod.Factor) = True) Then 'updated 7/27/2018 from private variable to public property
                                '_ExperienceModificationFactor = expMod.Factor
                                'updated 9/28/2017 to set property for consistency
                                ExperienceModificationFactor = expMod.Factor
                            End If
                            If ModificationProductionDate = "" OrElse (qqHelper.IsDateString(ModificationProductionDate) = False AndAlso qqHelper.IsDateString(expMod.ModificationProductionDate) = True) Then 'updated 7/27/2018 from private variable to public property
                                '_ModificationProductionDate = expMod.ModificationProductionDate
                                'updated 9/28/2017 to set property for consistency
                                ModificationProductionDate = expMod.ModificationProductionDate
                            End If
                            If RatingEffectiveDate = "" OrElse (qqHelper.IsDateString(RatingEffectiveDate) = False AndAlso qqHelper.IsDateString(expMod.RatingEffectiveDate) = True) Then 'updated 7/27/2018 from private variable to public property
                                '_RatingEffectiveDate = expMod.RatingEffectiveDate
                                'updated 9/28/2017 to set property for consistency
                                RatingEffectiveDate = expMod.RatingEffectiveDate
                            End If
                            If ExperienceModificationRiskIdentifier = "" Then 'updated 7/27/2018 from private variable to public property
                                '_ExperienceModificationRiskIdentifier = expMod.RiskIdentifier
                                'updated 9/28/2017 to set property for consistency
                                ExperienceModificationRiskIdentifier = expMod.RiskIdentifier
                            End If
                        End If
                    End If
                Next
            End If
        End Sub

        'added 10/18/2018
        Public Function CanUseLocationNumFlagForPackagePartType(ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType) As Boolean
            Select Case packagePartType
                Case QuickQuoteXML.QuickQuotePackagePartType.Package
                    Return CanUseLocationNumForMasterPartLocationReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                    Return CanUseLocationNumForCGLPartLocationReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                    Return CanUseLocationNumForCPRPartLocationReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                    Return CanUseLocationNumForCIMPartLocationReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.Crime
                    Return CanUseLocationNumForCRMPartLocationReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.Garage
                    Return CanUseLocationNumForGARPartLocationReconciliation
                Case Else
                    Return CanUseLocationNumForLocationReconciliation
            End Select
        End Function
        Public Sub SetCanUseLocationNumFlagForPackagePartType(ByVal canUse As Boolean, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType)
            Select Case packagePartType
                Case QuickQuoteXML.QuickQuotePackagePartType.Package
                    CanUseLocationNumForMasterPartLocationReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                    CanUseLocationNumForCGLPartLocationReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                    CanUseLocationNumForCPRPartLocationReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                    CanUseLocationNumForCIMPartLocationReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.Crime
                    CanUseLocationNumForCRMPartLocationReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.Garage
                    CanUseLocationNumForGARPartLocationReconciliation = canUse
                Case Else
                    CanUseLocationNumForLocationReconciliation = canUse
            End Select
        End Sub
        Public Function CanUseVehicleNumFlagForPackagePartType(ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType) As Boolean
            Select Case packagePartType
                Case QuickQuoteXML.QuickQuotePackagePartType.Package
                    Return CanUseVehicleNumForMasterPartVehicleReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                    Return CanUseVehicleNumForCGLPartVehicleReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                    Return CanUseVehicleNumForCPRPartVehicleReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                    Return CanUseVehicleNumForCIMPartVehicleReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.Crime
                    Return CanUseVehicleNumForCRMPartVehicleReconciliation
                Case QuickQuoteXML.QuickQuotePackagePartType.Garage
                    Return CanUseVehicleNumForGARPartVehicleReconciliation
                Case Else
                    Return CanUseVehicleNumForVehicleReconciliation
            End Select
        End Function
        Public Sub SetCanUseVehicleNumFlagForPackagePartType(ByVal canUse As Boolean, ByVal packagePartType As QuickQuoteXML.QuickQuotePackagePartType)
            Select Case packagePartType
                Case QuickQuoteXML.QuickQuotePackagePartType.Package
                    CanUseVehicleNumForMasterPartVehicleReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.GeneralLiability
                    CanUseVehicleNumForCGLPartVehicleReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.CommercialProperty
                    CanUseVehicleNumForCPRPartVehicleReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.InlandMarine
                    CanUseVehicleNumForCIMPartVehicleReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.Crime
                    CanUseVehicleNumForCRMPartVehicleReconciliation = canUse
                Case QuickQuoteXML.QuickQuotePackagePartType.Garage
                    CanUseVehicleNumForGARPartVehicleReconciliation = canUse
                Case Else
                    CanUseVehicleNumForVehicleReconciliation = canUse
            End Select
        End Sub

        'added 7/2/2019
        Public Function IsBillingEndorsement() As Boolean
            If QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote AndAlso Database_IsBillingUpdate = True Then
                Return True
            Else
                Return False
            End If
        End Function
        Public Function IsNonBillingEndorsement() As Boolean
            If QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote AndAlso Database_IsBillingUpdate = False Then
                Return True
            Else
                Return False
            End If
        End Function

        Public Overrides Function ToString() As String 'added 6/29/2015
            Dim str As String = ""
            If Me IsNot Nothing Then
                'If Me.LobId <> "" Then 'added 6/30/2015
                '    Dim l As String = "LobId: " & Me.LobId
                '    If Me.LobType <> QuickQuoteLobType.None Then
                '        l &= " (" & System.Enum.GetName(GetType(QuickQuoteLobType), Me.LobType)
                '        If Me.VersionId <> "" Then
                '            l &= "; VersionId: " & Me.VersionId
                '        End If
                '        l &= ")"
                '    End If
                '    str = qqHelper.appendText(str, l, vbCrLf)
                'End If
                'updated 9/6/2018
                Dim strVersionInfo As String = "VersionId: " & Me.VersionId
                strVersionInfo &= "; LobId: " & Me.LobId
                If Me.LobType <> QuickQuoteObject.QuickQuoteLobType.None Then
                    strVersionInfo &= " (" & System.Enum.GetName(GetType(QuickQuoteObject.QuickQuoteLobType), Me.LobType) & ")"
                End If
                If String.IsNullOrWhiteSpace(Me.VersionAndLobInfo.ActualLobId) = False AndAlso QuickQuoteHelperClass.isTextMatch(Me.LobId, Me.VersionAndLobInfo.ActualLobId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = False Then
                    strVersionInfo &= "; ActualLobId: " & Me.VersionAndLobInfo.ActualLobId
                End If
                strVersionInfo &= "; StateId: " & Me.StateId
                If Me.QuickQuoteState <> QuickQuoteHelperClass.QuickQuoteState.None Then
                    strVersionInfo &= " (" & System.Enum.GetName(GetType(QuickQuoteHelperClass.QuickQuoteState), Me.QuickQuoteState) & ")"
                End If

                'added 11/26/2022
                strVersionInfo &= "; CompanyId: " & Me.CompanyId
                If Me.Company <> QuickQuoteHelperClass.QuickQuoteCompany.None Then
                    strVersionInfo &= " (" & System.Enum.GetName(GetType(QuickQuoteHelperClass.QuickQuoteCompany), Me.Company) & ")"
                End If

                str = qqHelper.appendText(str, strVersionInfo, vbCrLf)

                If Me.Database_QuoteId <> "" Then
                    str = qqHelper.appendText(str, "QuoteId: " & Me.Database_QuoteId, vbCrLf)
                End If
                If Me.Database_QuoteXmlId <> "" Then
                    str = qqHelper.appendText(str, "QuoteXmlId: " & Me.Database_QuoteXmlId, vbCrLf)
                End If
                'If Me.QuoteNumber <> "" Then
                '    str = qqHelper.appendText(str, "QuoteNumber: " & Me.QuoteNumber, vbCrLf)
                'End If
                'updated 10/30/2016
                Dim qNumToUse As String = Me.QuoteNumber
                Dim pNumToUse As String = Me.PolicyNumber
                If qNumToUse <> "" OrElse pNumToUse <> "" Then
                    'write quoteNumber and/or policyNumber
                    If qNumToUse <> "" AndAlso pNumToUse <> "" Then
                        If qNumToUse = pNumToUse Then
                            If UCase(Left(pNumToUse, 1)) = "Q" Then
                                str = qqHelper.appendText(str, "QuoteNumber: " & qNumToUse, vbCrLf)
                            Else
                                str = qqHelper.appendText(str, "PolicyNumber: " & pNumToUse, vbCrLf)
                            End If
                        Else
                            str = qqHelper.appendText(str, "PolicyNumber: " & pNumToUse, vbCrLf)
                            str = qqHelper.appendText(str, "QuoteNumber: " & qNumToUse, vbCrLf)
                        End If
                    ElseIf qNumToUse <> "" Then
                        str = qqHelper.appendText(str, "QuoteNumber: " & qNumToUse, vbCrLf)
                    ElseIf pNumToUse <> "" Then 'could just use ELSE since it shouldn't get here unless pNumToUse is something
                        str = qqHelper.appendText(str, "PolicyNumber: " & pNumToUse, vbCrLf)
                    End If
                End If
                If Me.QuoteLevel <> helper.QuoteLevel.None Then 'added 12/30/2018
                    str = qqHelper.appendText(str, "QuoteLevel: " & System.Enum.GetName(GetType(helper.QuoteLevel), Me.QuoteLevel), vbCrLf)
                End If
                If Me.QuoteTransactionType <> QuickQuoteTransactionType.None Then 'added 10/28/2016
                    str = qqHelper.appendText(str, "QuoteTransactionType: " & System.Enum.GetName(GetType(QuickQuoteTransactionType), Me.QuoteTransactionType), vbCrLf)
                End If
                If Me.TotalQuotedPremium <> "" Then 'added 6/30/2015
                    str = qqHelper.appendText(str, "TotalQuotedPremium: " & Me.TotalQuotedPremium, vbCrLf)
                End If
                If Me.LobType = QuickQuoteLobType.CommercialPackage Then 'added 6/30/2015
                    If Me.CPP_CPR_PackagePart_QuotedPremium <> "" Then '5/11/2017 note: can now also check CPP_Has_Property_PackagePart property
                        str = qqHelper.appendText(str, "CPP_CPR_PackagePart_QuotedPremium: " & Me.CPP_CPR_PackagePart_QuotedPremium, vbCrLf)
                    End If
                    If Me.CPP_GL_PackagePart_QuotedPremium <> "" Then '5/11/2017 note: can now also check CPP_Has_GeneralLiability_PackagePart property
                        str = qqHelper.appendText(str, "CPP_GL_PackagePart_QuotedPremium: " & Me.CPP_GL_PackagePart_QuotedPremium, vbCrLf)
                    End If
                    If Me.CPP_Has_Crime_PackagePart AndAlso Me.CPP_CRM_PackagePart_QuotedPremium <> "" Then
                        str = qqHelper.appendText(str, "CPP_CRM_PackagePart_QuotedPremium: " & Me.CPP_CRM_PackagePart_QuotedPremium, vbCrLf)
                    End If
                    If Me.CPP_Has_InlandMarine_PackagePart AndAlso Me.CPP_CIM_PackagePart_QuotedPremium <> "" Then
                        str = qqHelper.appendText(str, "CPP_CIM_PackagePart_QuotedPremium: " & Me.CPP_CIM_PackagePart_QuotedPremium, vbCrLf)
                    End If
                    If Me.CPP_Has_Garage_PackagePart AndAlso Me.CPP_GAR_PackagePart_QuotedPremium <> "" Then 'added 4/22/2017
                        str = qqHelper.appendText(str, "CPP_GAR_PackagePart_QuotedPremium: " & Me.CPP_GAR_PackagePart_QuotedPremium, vbCrLf)
                    End If
                End If
                If Me.QuoteDescription <> "" Then
                    str = qqHelper.appendText(str, "QuoteDescription: " & Me.QuoteDescription, vbCrLf)
                End If
                If Me.Applicants IsNot Nothing AndAlso Me.Applicants.Count > 0 Then
                    str = qqHelper.appendText(str, Me.Applicants.Count.ToString & " Applicants", vbCrLf)
                End If
                If Me.Drivers IsNot Nothing AndAlso Me.Drivers.Count > 0 Then
                    str = qqHelper.appendText(str, Me.Drivers.Count.ToString & " Drivers", vbCrLf)
                End If
                If Me.Locations IsNot Nothing AndAlso Me.Locations.Count > 0 Then
                    str = qqHelper.appendText(str, Me.Locations.Count.ToString & " Locations", vbCrLf)
                End If
                If Me.Vehicles IsNot Nothing AndAlso Me.Vehicles.Count > 0 Then
                    str = qqHelper.appendText(str, Me.Vehicles.Count.ToString & " Vehicles", vbCrLf)
                End If
                If Me.Operators IsNot Nothing AndAlso Me.Operators.Count > 0 Then
                    str = qqHelper.appendText(str, Me.Operators.Count.ToString & " Operators", vbCrLf)
                End If
                If Me.PolicyCoverages IsNot Nothing AndAlso Me.PolicyCoverages.Count > 0 Then
                    str = qqHelper.appendText(str, Me.PolicyCoverages.Count.ToString & " Coverages", vbCrLf)
                End If
                If Me.Modifiers IsNot Nothing AndAlso Me.Modifiers.Count > 0 Then 'added 6/30/2015
                    str = qqHelper.appendText(str, Me.Modifiers.Count.ToString & " Modifiers", vbCrLf)
                End If
            Else
                str = "Nothing"
            End If
            Return str
        End Function

        'added 10/28/2016 - will be used to determine if QuickQuoteObject should be used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes
        Protected Friend Sub Set_QuoteTransactionType(ByVal qqTranType As QuickQuoteTransactionType, Optional ByVal setTransactionTypeIdForNewBusinessQuoteAndEndorsement As Boolean = False)
            '_QuoteTransactionType = qqTranType
            'VersionAndLobInfo.Set_QuoteTransactionType(_QuoteTransactionType) 'added 7/17/2018
            'If setTransactionTypeIdForNewBusinessQuoteAndEndorsement = True Then
            '    'note: ReadOnlyImage should not reset anything
            '    If _QuoteTransactionType = QuickQuoteTransactionType.NewBusinessQuote Then
            '        _TransactionTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.TransactionTypeId, "New Business") '2 for Diamond
            '    ElseIf _QuoteTransactionType = QuickQuoteTransactionType.EndorsementQuote Then
            '        _TransactionTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.TransactionTypeId, "Endorsement") '3 for Diamond
            '    End If
            'End If
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_QuoteTransactionType(qqTranType, setTransactionTypeIdForNewBusinessQuoteAndEndorsement:=setTransactionTypeIdForNewBusinessQuoteAndEndorsement)
            VersionAndLobInfo.Set_QuoteTransactionType(TopLevelQuoteInfo.QuoteTransactionType)
        End Sub
        Protected Friend Sub Set_OriginalEffectiveDate(ByVal origEffDate As String)
            '_OriginalEffectiveDate = origEffDate
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OriginalEffectiveDate(origEffDate)
        End Sub
        Protected Friend Sub Set_OriginalExpirationDate(ByVal origExpDate As String)
            '_OriginalExpirationDate = origExpDate
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OriginalExpirationDate(origExpDate)
        End Sub
        Protected Friend Sub Set_OriginalTransactionEffectiveDate(ByVal origTEffDate As String)
            '_OriginalTransactionEffectiveDate = origTEffDate
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OriginalTransactionEffectiveDate(origTEffDate)
        End Sub
        Protected Friend Sub Set_OriginalTransactionExpirationDate(ByVal origTExpDate As String)
            '_OriginalTransactionExpirationDate = origTExpDate
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OriginalTransactionExpirationDate(origTExpDate)
        End Sub
        'added 10/28/2016 so it can be called from multiple spots... needed w/ additional of new values in Diamond... 0=Diamond, 1=Comparative Rating (used to be Web), 2=VelociRater (new), 3=Consumer Quoting (new)
        Protected Friend Sub Default_PolicyOriginTypeId()
            '_PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "VelociRater")
            'If qqHelper.IsNumericString(_PolicyOriginTypeId) = False Then 'added just in case static data file isn't updated in environment
            '    _PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "Comparative Rating")
            '    If qqHelper.IsNumericString(_PolicyOriginTypeId) = False Then 'added just in case static data file hasn't been updated w/ change from Web to Comparative Rating
            '        _PolicyOriginTypeId = qqHelper.GetStaticDataValueForText(QuickQuoteHelperClass.QuickQuoteClassName.QuickQuoteObject, QuickQuoteHelperClass.QuickQuotePropertyName.PolicyOriginTypeId, "Web")
            '    End If
            'End If
            'updated 7/27/2018
            TopLevelQuoteInfo.Default_PolicyOriginTypeId()
        End Sub



        'added 11/10/2016 for Endorsements
        Protected Friend Sub Set_AnnualPremium(ByVal prem As String) 'PolicyImage.premium_annual
            '_AnnualPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_AnnualPremium(prem)
        End Sub
        Protected Friend Sub Set_ChangeInFullTermPremium(ByVal prem As String) 'PolicyImage.premium_chg_fullterm
            '_ChangeInFullTermPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_ChangeInFullTermPremium(prem)
        End Sub
        Protected Friend Sub Set_ChangeInWrittenPremium(ByVal prem As String) 'PolicyImage.premium_chg_written
            '_ChangeInWrittenPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_ChangeInWrittenPremium(prem)
        End Sub
        Protected Friend Sub Set_DifferenceChangeInFullTermPremium(ByVal prem As String) 'PolicyImage.premium_diff_chg_fullterm
            '_DifferenceChangeInFullTermPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_DifferenceChangeInFullTermPremium(prem)
        End Sub
        Protected Friend Sub Set_DifferenceChangeInWrittenPremium(ByVal prem As String) 'PolicyImage.premium_diff_chg_written
            '_DifferenceChangeInWrittenPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_DifferenceChangeInWrittenPremium(prem)
        End Sub
        Protected Friend Sub Set_FullTermPremium(ByVal prem As String) 'PolicyImage.premium_fullterm
            '_FullTermPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_FullTermPremium(prem)
        End Sub
        'removed 11/10/2016 to make original property work w/ serialization; then added back once Protected Friend setter on property didn't work; that didn't build since compiler saw 2 setters... will now try renaming this "Setter"
        'Protected Friend Sub Set_FullTermPremiumSpecial(ByVal prem As String) 'PolicyImage.premium_fullterm
        '    _FullTermPremium = prem
        'End Sub
        Protected Friend Sub Set_FullTermPremiumOffsetForPreviousImage(ByVal prem As String) 'PolicyImage.ftp_offset_for_prev_image
            '_FullTermPremiumOffsetForPreviousImage = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_FullTermPremiumOffsetForPreviousImage(prem)
        End Sub
        Protected Friend Sub Set_FullTermPremiumOnsetForCurrent(ByVal prem As String) 'PolicyImage.ftp_onset_for_current
            '_FullTermPremiumOnsetForCurrent = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_FullTermPremiumOnsetForCurrent(prem)
        End Sub
        Protected Friend Sub Set_OffsetPremiumForPreviousImage(ByVal prem As String) 'PolicyImage.offset_for_prev_image
            '_OffsetPremiumForPreviousImage = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OffsetPremiumForPreviousImage(prem)
        End Sub
        Protected Friend Sub Set_OnsetPremiumForCurrentImage(ByVal prem As String) 'PolicyImage.onset_for_current
            '_OnsetPremiumForCurrentImage = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_OnsetPremiumForCurrentImage(prem)
        End Sub
        Protected Friend Sub Set_PreviousWrittenPremium(ByVal prem As String) 'PolicyImage.premium_previous_written
            '_PreviousWrittenPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_PreviousWrittenPremium(prem)
        End Sub
        Protected Friend Sub Set_WrittenPremium(ByVal prem As String) 'PolicyImage.premium_written
            '_WrittenPremium = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_WrittenPremium(prem)
        End Sub
        Protected Friend Sub Set_PriorTermAnnual(ByVal prem As String) 'PolicyImage.prior_term_annual_premium
            '_PriorTermAnnual = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_PriorTermAnnual(prem)
        End Sub
        Protected Friend Sub Set_PriorTermFullterm(ByVal prem As String) 'PolicyImage.prior_term_fullterm
            '_PriorTermFullterm = prem
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_PriorTermFullterm(prem)
        End Sub

        'added 8/24/2017
        Protected Friend Sub Set_QuoteStatus(ByVal status As QuickQuoteXML.QuickQuoteStatusType)
            '_Database_QuoteStatusId = CInt(status)
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_QuoteStatus(status)
        End Sub

        Protected Friend Sub Set_CurrentlyParsingPaymentOptions(ByVal currentlyParsing As Boolean) 'added 9/8/2017
            '_CurrentlyParsingPaymentOptions = currentlyParsing
            'updated 7/27/2018
            TopLevelQuoteInfo.Set_CurrentlyParsingPaymentOptions(currentlyParsing)
        End Sub

        'added 7/28/2018
        Public Sub Set_QuoteStates(ByVal states As List(Of QuickQuoteHelperClass.QuickQuoteState), Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As helper.QuickQuoteState = helper.QuickQuoteState.None)
            If helper.OkayToLogStateChangesInSession = True Then 'added 12/21/2018
                Dim strChangeInfo As String = Me.ToString
                strChangeInfo &= vbCrLf & "--------------QuickQuoteObject.Set_QuoteStates--------------"
                Dim beforeStates As List(Of helper.QuickQuoteState) = helper.QuickQuoteStatesForQuote(Me)
                Dim strBeforeStates As String = helper.StringOfQuickQuoteStates(beforeStates)
                If String.IsNullOrWhiteSpace(strBeforeStates) = True Then
                    strBeforeStates = "None"
                End If
                Dim strAfterStates As String = helper.StringOfQuickQuoteStates(states)
                If String.IsNullOrWhiteSpace(strAfterStates) = True Then
                    strAfterStates = "None"
                End If
                strChangeInfo &= vbCrLf & "Before: " & strBeforeStates & "; After: " & strAfterStates
                helper.LogStateChangeInSession(strChangeInfo)
            End If
            qqHelper.UpdateQuickQuoteStatesForQuote(Me, states, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom)
        End Sub
        Public Sub Set_QuoteStateIds(ByVal stateIds As List(Of Integer), Optional ByVal copyQuoteInformationFromOneStateToAnotherWhenAdding As Boolean = True, Optional ByVal quoteStateToCopyInformationFrom As helper.QuickQuoteState = helper.QuickQuoteState.None)
            Dim sts As List(Of helper.QuickQuoteState) = Nothing

            If stateIds IsNot Nothing AndAlso stateIds.Count > 0 Then
                For Each sId As Integer In stateIds
                    Dim qState As helper.QuickQuoteState = helper.QuickQuoteStateForDiamondStateId(sId, defaultToIndiana:=False)
                    If System.Enum.IsDefined(GetType(helper.QuickQuoteState), qState) = True AndAlso qState <> helper.QuickQuoteState.None Then
                        If sts Is Nothing Then
                            sts = New List(Of helper.QuickQuoteState)
                        End If
                        sts.Add(qState)
                    End If
                Next
            End If

            Set_QuoteStates(sts, copyQuoteInformationFromOneStateToAnotherWhenAdding:=copyQuoteInformationFromOneStateToAnotherWhenAdding, quoteStateToCopyInformationFrom:=quoteStateToCopyInformationFrom)
        End Sub
        Protected Friend Sub Set_QuoteLevel(ByVal level As QuickQuoteHelperClass.QuoteLevel)
            TopLevelQuoteInfo.Set_QuoteLevel(level)
            SetPropertiesBasedOnQuoteLevel()
        End Sub
        Public Sub SetPropertiesBasedOnQuoteLevel()
            Select Case QuoteLevel
                Case helper.QuoteLevel.TopLevel
                    TopLevelQuoteInfo.Set_TotalQuotedPremiumType(helper.PremiumType.EntireQuote)
                Case helper.QuoteLevel.StateLevel
                    TopLevelQuoteInfo.Set_TotalQuotedPremiumType(helper.PremiumType.StateOnly)
                Case Else
                    TopLevelQuoteInfo.Set_TotalQuotedPremiumType(helper.PremiumType.None)
            End Select
        End Sub

        'added 6/16/2019
        Public Function PolicyCurrentStatus() As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus
            Dim polStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.None

            System.Enum.TryParse(Of QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus)(PolicyCurrentStatusId, polStatus)

            Return polStatus
        End Function
        Public Function PolicyStatusCode() As QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode
            Dim imgStatus As QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode = QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode.None

            System.Enum.TryParse(Of QuickQuotePolicyLookupInfo.DiamondPolicyStatusCode)(PolicyStatusCodeId, imgStatus)

            Return imgStatus
        End Function
        Public Function IsPolicyInforce(Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Return qqHelper.IsPolicyInforce(qqo:=Me, polLookupInfo:=polLookupInfo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
        End Function
        Public Function IsPolicyCancelled(Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Return qqHelper.IsPolicyCancelled(qqo:=Me, polLookupInfo:=polLookupInfo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled)
        End Function
        Public Function IsPolicyExpired(Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe) As Boolean
            Return qqHelper.IsPolicyExpired(qqo:=Me, polLookupInfo:=polLookupInfo, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
        End Function
        Public Function IsPolicyInforceOrFuture(Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe, Optional ByRef polStatus As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus = QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus.None) As Boolean
            Return qqHelper.IsPolicyInforceOrFuture(qqo:=Me, polLookupInfo:=polLookupInfo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce, polStatus:=polStatus)
        End Function
        Public Function ActualPolicyStatus(Optional ByRef polLookupInfo As QuickQuotePolicyLookupInfo = Nothing, Optional ByVal useCancelDateToSeeIfReallyCancelled As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe, Optional ByVal useExpirationDateToSeeIfReallyInforce As QuickQuoteHelperClass.QuickQuoteYesNoMaybeType = QuickQuoteHelperClass.QuickQuoteYesNoMaybeType.Maybe) As QuickQuotePolicyLookupInfo.DiamondPolicyCurrentStatus
            Return qqHelper.ActualPolicyStatus(qqo:=Me, polLookupInfo:=polLookupInfo, useCancelDateToSeeIfReallyCancelled:=useCancelDateToSeeIfReallyCancelled, useExpirationDateToSeeIfReallyInforce:=useExpirationDateToSeeIfReallyInforce)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String) As String
            Return GetDevDictionaryItem(page, key, -1, helper.QuickQuoteState.None)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String, stateAbbreviation As String) As String
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            Return GetDevDictionaryItem(page, key, -1, state)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String, state As QuickQuoteHelperClass.QuickQuoteState) As String
            Return GetDevDictionaryItem(page, key, -1, state)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String, listControlIndex As Integer) As String
            Return GetDevDictionaryItem(page, key, listControlIndex, helper.QuickQuoteState.None)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String, listControlIndex As Integer, stateAbbreviation As String) As String
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            Return GetDevDictionaryItem(page, key, listControlIndex, state)
        End Function

        Public Function GetDevDictionaryItem(page As String, key As String, listControlIndex As Integer, state As QuickQuoteHelperClass.QuickQuoteState) As String
            Return Me.InternalDevDictionary.GetDevDictionaryValue(page, key, listControlIndex, state)
        End Function

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String)
            SetDevDictionaryItem(page, key, value, -1, QuickQuoteHelperClass.QuickQuoteState.None)
        End Sub

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String, stateAbbreviation As String)
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            SetDevDictionaryItem(page, key, value, -1, state)
        End Sub

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String, state As QuickQuoteHelperClass.QuickQuoteState)
            SetDevDictionaryItem(page, key, value, -1, state)
        End Sub

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String, listControlIndex As Integer)
            SetDevDictionaryItem(page, key, value, listControlIndex, QuickQuoteHelperClass.QuickQuoteState.None)
        End Sub

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String, listControlIndex As Integer, stateAbbreviation As String)
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            SetDevDictionaryItem(page, key, value, listControlIndex, state)
        End Sub

        Public Sub SetDevDictionaryItem(page As String, key As String, value As String, listControlIndex As Integer, state As QuickQuoteHelperClass.QuickQuoteState)
            Dim devDictionaryItem As QuickQuoteDevDictionaryItem = Nothing
            If Me.InternalDevDictionary.HasDevDictionaryItem(page, key, listControlIndex, state, devDictionaryItem) Then
                Me.InternalDevDictionary.SetDevDictionaryItem(devDictionaryItem, value)
            Else
                Me.InternalDevDictionary.AddDevDictionaryItem(page, key, value, listControlIndex, state)
            End If
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String)
            RemoveDevDictionaryItem(page, key, -1, helper.QuickQuoteState.None)
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String, stateAbbreviation As String)
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            RemoveDevDictionaryItem(page, key, -1, state)
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String, state As QuickQuoteHelperClass.QuickQuoteState)
            RemoveDevDictionaryItem(page, key, -1, state)
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String, listControlIndex As Integer)
            RemoveDevDictionaryItem(page, key, listControlIndex, helper.QuickQuoteState.None)
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String, listControlIndex As Integer, stateAbbreviation As String)
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            RemoveDevDictionaryItem(page, key, listControlIndex, state)
        End Sub

        Public Sub RemoveDevDictionaryItem(page As String, key As String, listControlIndex As Integer, state As QuickQuoteHelperClass.QuickQuoteState)
            Me.InternalDevDictionary.RemoveDevDictionaryItem(page, key, listControlIndex, state)
        End Sub

        Public Sub ClearListControlDevDictionaryItems(page As String, key As String)
            ClearListControlDevDictionaryItems(page, key, QuickQuoteHelperClass.QuickQuoteState.None)
        End Sub

        Public Sub ClearListControlDevDictionaryItems(page As String, key As String, stateAbbreviation As String)
            Dim state As QuickQuoteHelperClass.QuickQuoteState = DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation)
            ClearListControlDevDictionaryItems(page, key, state)
        End Sub

        Public Sub ClearListControlDevDictionaryItems(page As String, key As String, state As QuickQuoteHelperClass.QuickQuoteState)
            Me.InternalDevDictionary.ClearListControlDevDictionaryItems(page, key, state)
        End Sub

        Private Function DevDictionary_ConvertStateAbbreviationToQuickQuoteState(stateAbbreviation As String) As QuickQuoteHelperClass.QuickQuoteState
            Dim state As QuickQuoteHelperClass.QuickQuoteState = helper.QuickQuoteState.None
            If String.IsNullOrWhiteSpace(stateAbbreviation) = False AndAlso stateAbbreviation.Equals("ALL", StringComparison.OrdinalIgnoreCase) = False Then
                state = QuickQuoteHelperClass.QuickQuoteStateForStateAbbreviation(stateAbbreviation)
            End If
            Return state
        End Function

        'added 1/4/2021 (Interoperability)
        Public Function HasRuleOverride() As Boolean
            Return qqHelper.IsValidDateString(Me.Database_LastRulesOverrideRecordModifiedDate, mustBeGreaterThanDefaultDate:=True)
        End Function

        'added 5/14/2021
        Protected Friend Sub CheckForCopyingSourceAdditionalInterestsToTopLevel()
            '_CopiedAnySourceAIsToTopLevelOnLastCheck = False
            'If helper.OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True Then
            '    Dim numberOfAIsCopied As Integer = 0
            '    qqHelper.CopySourceAdditionalInterestsToTopLevel(Me, numberOfAIsCopied:=numberOfAIsCopied)
            '    If numberOfAIsCopied > 0 Then
            '        _CopiedAnySourceAIsToTopLevelOnLastCheck = True
            '    End If
            'End If
            'updated 5/19/2021
            Set_CopiedAnySourceAIsToTopLevelOnLastCheck(False)
            If helper.OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True Then
                Dim numberOfAIsCopied As Integer = 0
                qqHelper.CopySourceAdditionalInterestsToTopLevel(Me, numberOfAIsCopied:=numberOfAIsCopied)
                If numberOfAIsCopied > 0 Then
                    Set_CopiedAnySourceAIsToTopLevelOnLastCheck(True)
                End If
            End If
        End Sub
        'Protected Friend Function CopiedAnySourceAIsToTopLevelOnLastCheck() As Boolean 'removed 5/19/2021; see below
        '    Return _CopiedAnySourceAIsToTopLevelOnLastCheck
        'End Function
        Protected Friend Sub CheckForRemovingSourceAdditionalInterestsFromTopLevel()
            '_RemovedAnySourceAIsFromTopLevelOnLastCheck = False
            'If helper.OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True AndAlso helper.OkayToRemoveSourceAdditionalInterestsFromTopLevelOnSave_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True Then '1st checks to see if we would've copied any over
            '    Dim numberOfAIsRemoved As Integer = 0
            '    qqHelper.RemoveSourceAdditionalInterestsFromTopLevel(Me, numberOfAIsRemoved:=numberOfAIsRemoved)
            '    If numberOfAIsRemoved > 0 Then
            '        _RemovedAnySourceAIsFromTopLevelOnLastCheck = True
            '    End If
            'End If
            'updated 5/19/2021
            Set_RemovedAnySourceAIsFromTopLevelOnLastCheck(False)
            If helper.OkayToCopySourceAdditionalInterestsToTopLevelOnRetrieval_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True AndAlso helper.OkayToRemoveSourceAdditionalInterestsFromTopLevelOnSave_With_Optional_TransactionTypeText_And_Or_ThreeLetterLobAppreviation(tranType:=QuoteTransactionType, lobType:=LobType) = True Then '1st checks to see if we would've copied any over
                Dim numberOfAIsRemoved As Integer = 0
                qqHelper.RemoveSourceAdditionalInterestsFromTopLevel(Me, numberOfAIsRemoved:=numberOfAIsRemoved)
                If numberOfAIsRemoved > 0 Then
                    Set_RemovedAnySourceAIsFromTopLevelOnLastCheck(True)
                End If
            End If
        End Sub
        'Protected Friend Function RemovedAnySourceAIsFromTopLevelOnLastCheck() As Boolean 'removed 5/19/2021; see below
        '    Return _RemovedAnySourceAIsFromTopLevelOnLastCheck
        'End Function

        'added 5/19/2021; moved from QuickQuoteObject
        Protected Friend Function CopiedAnySourceAIsToTopLevelOnLastCheck() As Boolean
            Return VersionAndLobInfo.CopiedAnySourceAIsToTopLevelOnLastCheck()
        End Function
        Protected Friend Function RemovedAnySourceAIsFromTopLevelOnLastCheck() As Boolean
            Return VersionAndLobInfo.RemovedAnySourceAIsFromTopLevelOnLastCheck()
        End Function
        'new 5/19/2021
        Protected Friend Sub Set_CopiedAnySourceAIsToTopLevelOnLastCheck(ByVal val As Boolean)
            VersionAndLobInfo.Set_CopiedAnySourceAIsToTopLevelOnLastCheck(val)
        End Sub
        Protected Friend Sub Set_RemovedAnySourceAIsFromTopLevelOnLastCheck(ByVal val As Boolean)
            VersionAndLobInfo.Set_RemovedAnySourceAIsFromTopLevelOnLastCheck(val)
        End Sub

        'added 10/21/2021; note: this should only include the objects that would not be cloned (i.e. Locations, Vehicles, etc.; SourceAIs are clones, so they should not be included)
        Protected Friend Sub CopyApplicableStateLevelObjectsToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                CopyApplicableLocationsFromStateLevelToTopLevel()

                CopyApplicableVehiclesFromStateLevelToTopLevel()

                CopyApplicableGLClassificationsFromStateLevelToTopLevel()

                CopyApplicableAdditionalInsuredsFromStateLevelToTopLevel()

                CopyApplicableAdditionalInterestsFromStateLevelToTopLevel()
            End If
        End Sub
        Protected Friend Sub CopyApplicableLocationsFromStateLevelToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If helper.CopyLocationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                    qqHelper.CopyLocationsFromStateLevelToTopLevel(Me)
                End If
            End If
        End Sub
        Protected Friend Sub CopyApplicableVehiclesFromStateLevelToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If helper.CopyVehiclesBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then
                    qqHelper.CopyVehiclesFromStateLevelToTopLevel(Me)
                End If
            End If
        End Sub
        Protected Friend Sub CopyApplicableGLClassificationsFromStateLevelToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If helper.CopyGLClassificationsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/19/2018
                    qqHelper.CopyGLClassificationsFromStateLevelToTopLevel(Me)
                End If
            End If
        End Sub
        Protected Friend Sub CopyApplicableAdditionalInsuredsFromStateLevelToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If helper.CopyAdditionalInsuredsBetweenStateLevelAndTopLevelForMultiState(LobType) = True Then 'added 8/24/2018
                    qqHelper.CopyAdditionalInsuredsFromStateLevelToTopLevel(Me)
                End If
            End If
        End Sub
        Protected Friend Sub CopyApplicableAdditionalInterestsFromStateLevelToTopLevel()
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If helper.CopyAdditionalInterestsBetweenGoverningStateAndTopLevelAsNeededForMultiState(LobType) = True Then 'added 9/19/2018
                    qqHelper.CopyAdditionalInterestsFromStateLevelToTopLevel(Me)
                End If
            End If
        End Sub

        'added 11/28/2022 to make sure that lower-level companyId props are updated w/ top-level; note: won't do anything if LobType is invalid
        Private Sub _VersionAndLobInfo_CompanyChanged(prevCompanyId As String, newCompanyId As String) Handles _VersionAndLobInfo.CompanyChanged
            If QuoteLevel = helper.QuoteLevel.TopLevel Then
                If TopLevelQuoteInfo.MultiStateQuotes IsNot Nothing AndAlso TopLevelQuoteInfo.MultiStateQuotes.Count > 0 Then
                    For Each msq As QuickQuoteObject In TopLevelQuoteInfo.MultiStateQuotes
                        'If msq IsNot Nothing AndAlso msq.CompanyId = prevCompanyId Then
                        If msq IsNot Nothing AndAlso helper.isTextMatch(msq.CompanyId, prevCompanyId, matchType:=helper.TextMatchType.IntegerOrText_IgnoreCasing) = True Then
                            msq.CompanyId = newCompanyId
                        End If
                    Next
                End If
            End If
        End Sub

#Region "IDisposable Support"
        '1/14/2014 - hit enter after previous line which correctly indented everything below; got out of whack when adding Namespace
        Private disposedValue As Boolean ' To detect redundant calls

        ' IDisposable
        'Protected Overridable Sub Dispose(disposing As Boolean)
        'updated 8/4/2014 w/ QuickQuoteBaseObject inheritance
        Protected Overloads Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    ' TODO: dispose managed state (managed objects).

                    ''testing 5/31/2012
                    'Dim info() As PropertyInfo = Me.GetType().GetProperties()
                    'Dim n As String = ""
                    'Dim v As String = ""
                    'For Each p As PropertyInfo In info
                    '    If p.CanRead = True Then
                    '        n = p.Name
                    '        'v = p.GetValue(Me, Nothing)'does not work when not standard type
                    '        'p.SetValue(Me, Nothing, Nothing)
                    '    End If
                    '    Dim t As String = p.PropertyType.FullName
                    '    Dim t2 As String = p.PropertyType.ToString
                    '    Dim t3 As String = p.PropertyType.BaseType.FullName
                    '    Dim t4 As String = p.PropertyType.BaseType.ToString
                    '    Select Case UCase(p.PropertyType.BaseType.FullName)
                    '        Case "STRING", "SYSTEM.STRING"
                    '            If p.GetValue(Me, Nothing) IsNot Nothing Then
                    '                p.SetValue(Me, Nothing, Nothing)
                    '            End If
                    '        Case "INTEGER", "BOOLEAN", "ENUM", "SYSTEM.INTEGER", "SYSTEM.BOOLEAN", "SYSTEM.ENUM", "SYSTEM.INT32"
                    '            If p.GetValue(Me, Nothing) <> Nothing Then
                    '                p.SetValue(Me, Nothing, Nothing)
                    '            End If
                    '        Case Else
                    '            Select Case UCase(p.PropertyType.FullName)
                    '                Case "STRING", "SYSTEM.STRING"
                    '                    If p.GetValue(Me, Nothing) IsNot Nothing Then
                    '                        p.SetValue(Me, Nothing, Nothing)
                    '                    End If
                    '                Case "INTEGER", "BOOLEAN", "ENUM", "SYSTEM.INTEGER", "SYSTEM.BOOLEAN", "SYSTEM.ENUM", "SYSTEM.INT32"
                    '                    If p.GetValue(Me, Nothing) <> Nothing Then
                    '                        p.SetValue(Me, Nothing, Nothing)
                    '                    End If
                    '                Case Else
                    '                    If p.PropertyType.FullName <> "" Then
                    '                        If UCase(p.PropertyType.FullName).Contains("GENERIC.LIST") = True Then
                    '                            If UCase(p.PropertyType.FullName).Contains("STRING") = True OrElse UCase(p.PropertyType.FullName).Contains("SYSTEM.STRING") = True Then

                    '                                For Each s As String In p.GetValue(Me, Nothing)
                    '                                    If s IsNot Nothing Then
                    '                                        s = Nothing

                    '                                    End If
                    '                                Next
                    '                            End If
                    '                        End If
                    '                    End If
                    '            End Select
                    '    End Select

                    'Next

                    'If _XmlType <> Nothing Then 'removed 7/27/2018
                    '    _XmlType = Nothing
                    'End If
                    'If _LobType <> Nothing Then 'removed 7/16/2018
                    '    _LobType = Nothing
                    'End If

                    'If _LobId IsNot Nothing Then 'removed 7/16/2018
                    '    _LobId = Nothing
                    'End If
                    'If _CompanyId IsNot Nothing Then 'removed 7/27/2018
                    '    _CompanyId = Nothing
                    'End If

                    'If _Success <> Nothing Then 'removed 7/27/2018
                    '    _Success = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _AgencyCode IsNot Nothing Then
                    '    _AgencyCode = Nothing
                    'End If
                    'If _AgencyId IsNot Nothing Then
                    '    _AgencyId = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _AgencyProducerId IsNot Nothing Then
                    '    _AgencyProducerId = Nothing
                    'End If
                    'If _AgencyProducerCode IsNot Nothing Then
                    '    _AgencyProducerCode = Nothing
                    'End If
                    'If _AgencyProducerName IsNot Nothing Then
                    '    _AgencyProducerName.Dispose()
                    '    _AgencyProducerName = Nothing
                    'End If

                    'If _QuoteNumber IsNot Nothing Then 'removed 7/27/2018
                    '    _QuoteNumber = Nothing
                    'End If
                    'qqHelper.DisposeString(_PolicyNumber) 'added 10/30/2016; removed 7/27/2018
                    'If _QuoteDescription IsNot Nothing Then 'removed 7/27/2018
                    '    _QuoteDescription = Nothing
                    'End If
                    'If _State IsNot Nothing Then 'removed 7/16/2018
                    '    _State = Nothing
                    'End If
                    'If _StateId IsNot Nothing Then 'removed 7/16/2018
                    '    _StateId = Nothing
                    'End If
                    'If _EffectiveDate IsNot Nothing Then 'removed 7/27/2018
                    '    _EffectiveDate = Nothing
                    'End If
                    'If _ExpirationDate IsNot Nothing Then 'removed 7/27/2018
                    '    _ExpirationDate = Nothing
                    'End If
                    'If _TotalQuotedPremium IsNot Nothing Then 'removed 7/27/2018
                    '    _TotalQuotedPremium = Nothing
                    'End If
                    'removed 7/17/2018
                    'If _OccurrenceLiabilityLimit IsNot Nothing Then
                    '    _OccurrenceLiabilityLimit = Nothing
                    'End If
                    'If _OccurrenceLiabilityLimitId IsNot Nothing Then
                    '    _OccurrenceLiabilityLimitId = Nothing
                    'End If
                    'If _OccurrencyLiabilityQuotedPremium IsNot Nothing Then
                    '    _OccurrencyLiabilityQuotedPremium = Nothing
                    'End If
                    'If _TenantsFireLiability IsNot Nothing Then
                    '    _TenantsFireLiability = Nothing
                    'End If
                    'If _TenantsFireLiabilityId IsNot Nothing Then
                    '    _TenantsFireLiabilityId = Nothing
                    'End If
                    'If _TenantsFireLiabilityQuotedPremium IsNot Nothing Then
                    '    _TenantsFireLiabilityQuotedPremium = Nothing
                    'End If
                    'If _PropertyDamageLiabilityDeductible IsNot Nothing Then
                    '    _PropertyDamageLiabilityDeductible = Nothing
                    'End If
                    'If _PropertyDamageLiabilityDeductibleId IsNot Nothing Then
                    '    _PropertyDamageLiabilityDeductibleId = Nothing
                    'End If
                    'If _PropertyDamageLiabilityDeductibleOption IsNot Nothing Then
                    '    _PropertyDamageLiabilityDeductibleOption = Nothing
                    'End If
                    'If _PropertyDamageLiabilityDeductibleOptionId IsNot Nothing Then
                    '    _PropertyDamageLiabilityDeductibleOptionId = Nothing
                    'End If
                    'If _HasBusinessMasterEnhancement <> Nothing Then
                    '    _HasBusinessMasterEnhancement = Nothing
                    'End If
                    'If _BusinessMasterEnhancementQuotedPremium IsNot Nothing Then
                    '    _BusinessMasterEnhancementQuotedPremium = Nothing
                    'End If
                    'If _BlanketRatingOption IsNot Nothing Then
                    '    _BlanketRatingOption = Nothing
                    'End If
                    'If _BlanketRatingOptionId IsNot Nothing Then
                    '    _BlanketRatingOptionId = Nothing
                    'End If
                    'If _BlanketRatingQuotedPremium IsNot Nothing Then
                    '    _BlanketRatingQuotedPremium = Nothing
                    'End If

                    'If _AdditionalInsuredsText IsNot Nothing Then
                    '    _AdditionalInsuredsText = Nothing
                    'End If
                    'removed 7/17/2018
                    'If _AdditionalInsuredsCount <> Nothing Then
                    '    _AdditionalInsuredsCount = Nothing
                    'End If
                    'If AdditionalInsuredsCheckboxBOP IsNot Nothing Then '3/9/2017 - BOP stuff
                    '    _AdditionalInsuredsCheckboxBOP.Clear()
                    '    _AdditionalInsuredsCheckboxBOP = Nothing
                    'End If
                    'If _HasAdditionalInsuredsCheckboxBOP <> Nothing Then '3/9/2017 - BOP stuff
                    '    _HasAdditionalInsuredsCheckboxBOP = Nothing
                    'End If
                    'If _AdditionalInsuredsManualCharge IsNot Nothing Then
                    '    _AdditionalInsuredsManualCharge = Nothing
                    'End If
                    'If _AdditionalInsuredsQuotedPremium IsNot Nothing Then
                    '    _AdditionalInsuredsQuotedPremium = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityText IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityText = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityOccurrenceLimit IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityOccurrenceLimit = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityOccurrenceLimitId IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityOccurrenceLimitId = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityQuotedPremium IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityQuotedPremium = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityRetroactiveDate IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityRetroactiveDate = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityAggregateLimit IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityAggregateLimit = Nothing
                    'End If
                    'If _EmployeeBenefitsLiabilityDeductible IsNot Nothing Then
                    '    _EmployeeBenefitsLiabilityDeductible = Nothing
                    'End If
                    'If _ContractorsEquipmentInstallationLimit IsNot Nothing Then
                    '    _ContractorsEquipmentInstallationLimit = Nothing
                    'End If
                    'If _ContractorsEquipmentInstallationLimitId IsNot Nothing Then
                    '    _ContractorsEquipmentInstallationLimitId = Nothing
                    'End If
                    'If _ContractorsEquipmentInstallationLimitQuotedPremium IsNot Nothing Then
                    '    _ContractorsEquipmentInstallationLimitQuotedPremium = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentBlanket IsNot Nothing Then
                    '    _ContractorsToolsEquipmentBlanket = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentBlanketSubLimitId IsNot Nothing Then '3/9/2017 - BOP stuff
                    '    _ContractorsToolsEquipmentBlanketSubLimitId = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentBlanketQuotedPremium IsNot Nothing Then
                    '    _ContractorsToolsEquipmentBlanketQuotedPremium = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentScheduled IsNot Nothing Then
                    '    _ContractorsToolsEquipmentScheduled = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentScheduledQuotedPremium IsNot Nothing Then
                    '    _ContractorsToolsEquipmentScheduledQuotedPremium = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentRented IsNot Nothing Then
                    '    _ContractorsToolsEquipmentRented = Nothing
                    'End If
                    'If _ContractorsToolsEquipmentRentedQuotedPremium IsNot Nothing Then
                    '    _ContractorsToolsEquipmentRentedQuotedPremium = Nothing
                    'End If
                    'If _ContractorsEmployeeTools IsNot Nothing Then
                    '    _ContractorsEmployeeTools = Nothing
                    'End If
                    'If _ContractorsEmployeeToolsQuotedPremium IsNot Nothing Then
                    '    _ContractorsEmployeeToolsQuotedPremium = Nothing
                    'End If
                    'If _CrimeEmpDisEmployeeText IsNot Nothing Then
                    '    _CrimeEmpDisEmployeeText = Nothing
                    'End If
                    'If _CrimeEmpDisLocationText IsNot Nothing Then
                    '    _CrimeEmpDisLocationText = Nothing
                    'End If
                    'If _CrimeEmpDisLimit IsNot Nothing Then
                    '    _CrimeEmpDisLimit = Nothing
                    'End If
                    'If _CrimeEmpDisLimitId IsNot Nothing Then
                    '    _CrimeEmpDisLimitId = Nothing
                    'End If
                    'If _CrimeEmpDisQuotedPremium IsNot Nothing Then
                    '    _CrimeEmpDisQuotedPremium = Nothing
                    'End If
                    'If _CrimeForgeryLimit IsNot Nothing Then
                    '    _CrimeForgeryLimit = Nothing
                    'End If
                    'If _CrimeForgeryLimitId IsNot Nothing Then
                    '    _CrimeForgeryLimitId = Nothing
                    'End If
                    'If _CrimeForgeryQuotedPremium IsNot Nothing Then
                    '    _CrimeForgeryQuotedPremium = Nothing
                    'End If
                    'If _HasEarthquake <> Nothing Then
                    '    _HasEarthquake = Nothing
                    'End If
                    'If _EarthquakeQuotedPremium IsNot Nothing Then
                    '    _EarthquakeQuotedPremium = Nothing
                    'End If
                    'If _HasHiredAuto <> Nothing Then
                    '    _HasHiredAuto = Nothing
                    'End If
                    'If _HiredAutoQuotedPremium IsNot Nothing Then
                    '    _HiredAutoQuotedPremium = Nothing
                    'End If
                    'If _HasNonOwnedAuto <> Nothing Then
                    '    _HasNonOwnedAuto = Nothing
                    'End If
                    'If _NonOwnedAutoQuotedPremium IsNot Nothing Then
                    '    _NonOwnedAutoQuotedPremium = Nothing
                    'End If

                    'removed 7/18/2018
                    'If _Locations IsNot Nothing Then
                    '    If _Locations.Count > 0 Then
                    '        For Each Loc As QuickQuoteLocation In _Locations
                    '            Loc.Dispose()
                    '            Loc = Nothing
                    '        Next
                    '        _Locations.Clear()
                    '    End If
                    '    _Locations = Nothing
                    'End If
                    'If _PolicyCoverages IsNot Nothing Then
                    '    If _PolicyCoverages.Count > 0 Then
                    '        For Each cov As QuickQuoteCoverage In _PolicyCoverages
                    '            cov.Dispose()
                    '            cov = Nothing
                    '        Next
                    '        _PolicyCoverages.Clear()
                    '    End If
                    '    _PolicyCoverages = Nothing
                    'End If
                    'If _ValidationItems IsNot Nothing Then 'removed 7/27/2018
                    '    If _ValidationItems.Count > 0 Then
                    '        For Each val As QuickQuoteValidationItem In _ValidationItems
                    '            val.Dispose()
                    '            val = Nothing
                    '        Next
                    '        _ValidationItems.Clear()
                    '    End If
                    '    _ValidationItems = Nothing
                    'End If

                    'If _PropertyDeductibleId IsNot Nothing Then 'removed 7/18/2018
                    '    _PropertyDeductibleId = Nothing
                    'End If

                    'If _Client IsNot Nothing Then 'removed 7/27/2018
                    '    _Client.Dispose()
                    '    _Client = Nothing
                    'End If

                    'If _IsNew <> Nothing Then 'removed 7/27/2018
                    '    _IsNew = Nothing
                    'End If
                    'If _BillToId IsNot Nothing Then 'removed 7/27/2018
                    '    _BillToId = Nothing
                    'End If
                    'If _CurrentBilltoId IsNot Nothing Then 'removed 7/27/2018
                    '    _CurrentBilltoId = Nothing
                    'End If
                    'If _CurrentPayplanId IsNot Nothing Then 'removed 7/27/2018
                    '    _CurrentPayplanId = Nothing
                    'End If
                    'If _PolicyTermId IsNot Nothing Then 'removed 7/27/2018
                    '    _PolicyTermId = Nothing
                    'End If
                    'If _ReceivedDate IsNot Nothing Then 'removed 7/27/2018
                    '    _ReceivedDate = Nothing
                    'End If
                    'If _TransactionEffectiveDate IsNot Nothing Then 'removed 7/27/2018
                    '    _TransactionEffectiveDate = Nothing
                    'End If
                    'If _TransactionExpirationDate IsNot Nothing Then 'added 4/10/2014; removed 7/27/2018
                    '    _TransactionExpirationDate = Nothing
                    'End If
                    'If _TransactionTypeId IsNot Nothing Then 'removed 7/27/2018
                    '    _TransactionTypeId = Nothing
                    'End If
                    'If _TransactionUsersId IsNot Nothing Then 'removed 7/27/2018
                    '    _TransactionUsersId = Nothing
                    'End If
                    'If _VersionId IsNot Nothing Then 'removed 7/16/2018
                    '    _VersionId = Nothing
                    'End If
                    'If _AddFormsVersionId IsNot Nothing Then 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
                    '    _AddFormsVersionId = Nothing
                    'End If
                    'If _RatingVersionId IsNot Nothing Then 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
                    '    _RatingVersionId = Nothing
                    'End If
                    'If _UnderwritingVersionId IsNot Nothing Then 'added 11/4/2014; needs to be updated w/ versionId; removed 7/16/2018
                    '    _UnderwritingVersionId = Nothing
                    'End If
                    'removed 7/18/2018
                    'If _CPP_CPR_PackagePart_VersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CPR_PackagePart_VersionId = Nothing
                    'End If
                    'If _CPP_CPR_PackagePart_AddFormsVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CPR_PackagePart_AddFormsVersionId = Nothing
                    'End If
                    'If _CPP_CPR_PackagePart_RatingVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CPR_PackagePart_RatingVersionId = Nothing
                    'End If
                    'If _CPP_CPR_PackagePart_UnderwritingVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CPR_PackagePart_UnderwritingVersionId = Nothing
                    'End If
                    'If _CPP_CGL_PackagePart_VersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CGL_PackagePart_VersionId = Nothing
                    'End If
                    'If _CPP_CGL_PackagePart_AddFormsVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CGL_PackagePart_AddFormsVersionId = Nothing
                    'End If
                    'If _CPP_CGL_PackagePart_RatingVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CGL_PackagePart_RatingVersionId = Nothing
                    'End If
                    'If _CPP_CGL_PackagePart_UnderwritingVersionId IsNot Nothing Then 'added 11/4/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CGL_PackagePart_UnderwritingVersionId = Nothing
                    'End If
                    'If _CPP_Main_PackagePart_VersionId IsNot Nothing Then 'added 11/5/2014
                    '    _CPP_Main_PackagePart_VersionId = Nothing
                    'End If
                    'If _CPP_Main_PackagePart_AddFormsVersionId IsNot Nothing Then 'added 11/5/2014
                    '    _CPP_Main_PackagePart_AddFormsVersionId = Nothing
                    'End If
                    'If _CPP_Main_PackagePart_RatingVersionId IsNot Nothing Then 'added 11/5/2014
                    '    _CPP_Main_PackagePart_RatingVersionId = Nothing
                    'End If
                    'If _CPP_Main_PackagePart_UnderwritingVersionId IsNot Nothing Then 'added 11/5/2014
                    '    _CPP_Main_PackagePart_UnderwritingVersionId = Nothing
                    'End If
                    'If _CPP_CRM_PackagePart_VersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CRM_PackagePart_VersionId = Nothing
                    'End If
                    'If _CPP_CRM_PackagePart_AddFormsVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CRM_PackagePart_AddFormsVersionId = Nothing
                    'End If
                    'If _CPP_CRM_PackagePart_RatingVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CRM_PackagePart_RatingVersionId = Nothing
                    'End If
                    'If _CPP_CRM_PackagePart_UnderwritingVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CRM_PackagePart_UnderwritingVersionId = Nothing
                    'End If
                    'If _CPP_CIM_PackagePart_VersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CIM_PackagePart_VersionId = Nothing
                    'End If
                    'If _CPP_CIM_PackagePart_AddFormsVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CIM_PackagePart_AddFormsVersionId = Nothing
                    'End If
                    'If _CPP_CIM_PackagePart_RatingVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CIM_PackagePart_RatingVersionId = Nothing
                    'End If
                    'If _CPP_CIM_PackagePart_UnderwritingVersionId IsNot Nothing Then 'added 1/21/2014 for CPP; will work the same as the policy-level props above; policy-level props will be used for main Package Part
                    '    _CPP_CIM_PackagePart_UnderwritingVersionId = Nothing
                    'End If
                    'If _WorkflowQueueId IsNot Nothing Then 'removed 7/27/2018
                    '    _WorkflowQueueId = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _Policyholder IsNot Nothing Then
                    '    _Policyholder.Dispose()
                    '    _Policyholder = Nothing
                    'End If
                    'If _Policyholder2 IsNot Nothing Then
                    '    _Policyholder2.Dispose()
                    '    _Policyholder2 = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _BillMethodId IsNot Nothing Then
                    '    _BillMethodId = Nothing
                    'End If
                    'If _BillingPayPlanId IsNot Nothing Then
                    '    _BillingPayPlanId = Nothing
                    'End If

                    'If _PolicyOriginTypeId IsNot Nothing Then 'removed 7/27/2018
                    '    _PolicyOriginTypeId = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _RiskGrade IsNot Nothing Then
                    '    _RiskGrade = Nothing
                    'End If
                    'If _RiskGradeLookupId IsNot Nothing Then
                    '    _RiskGradeLookupId = Nothing
                    'End If
                    'qqHelper.DisposeString(_RiskGradeLookupId_Original) 'added 8/15/2017
                    'If _CPP_CGL_RiskGrade IsNot Nothing Then
                    '    _CPP_CGL_RiskGrade = Nothing
                    'End If
                    'If _CPP_CGL_RiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CGL_RiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CPR_RiskGrade IsNot Nothing Then
                    '    _CPP_CPR_RiskGrade = Nothing
                    'End If
                    'If _CPP_CPR_RiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CPR_RiskGradeLookupId = Nothing
                    'End If
                    'If _ErrorRiskGradeLookupId IsNot Nothing Then
                    '    _ErrorRiskGradeLookupId = Nothing
                    'End If
                    'If _ReplacementRiskGradeLookupId IsNot Nothing Then
                    '    _ReplacementRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CGL_ErrorRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CGL_ErrorRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CGL_ReplacementRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CGL_ReplacementRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CPR_ErrorRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CPR_ErrorRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CPR_ReplacementRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CPR_ReplacementRiskGradeLookupId = Nothing
                    'End If
                    'added 1/26/2015 for CIM and CRM
                    'removed 7/19/2018
                    'If _CPP_CIM_RiskGrade IsNot Nothing Then
                    '    _CPP_CIM_RiskGrade = Nothing
                    'End If
                    'If _CPP_CIM_RiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CIM_RiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CIM_ErrorRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CIM_ErrorRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CIM_ReplacementRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CIM_ReplacementRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CRM_RiskGrade IsNot Nothing Then
                    '    _CPP_CRM_RiskGrade = Nothing
                    'End If
                    'If _CPP_CRM_RiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CRM_RiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CRM_ErrorRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CRM_ErrorRiskGradeLookupId = Nothing
                    'End If
                    'If _CPP_CRM_ReplacementRiskGradeLookupId IsNot Nothing Then
                    '    _CPP_CRM_ReplacementRiskGradeLookupId = Nothing
                    'End If

                    'If _HasInitiatedFinalize <> Nothing Then 'removed 7/27/2018
                    '    _HasInitiatedFinalize = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _PolicyId IsNot Nothing Then
                    '    _PolicyId = Nothing
                    'End If
                    'If _PolicyImageNum IsNot Nothing Then
                    '    _PolicyImageNum = Nothing
                    'End If

                    'If _PolicyBridgingURL IsNot Nothing Then 'removed 7/27/2018
                    '    _PolicyBridgingURL = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _PaymentOptions IsNot Nothing Then
                    '    If _PaymentOptions.Count > 0 Then
                    '        For Each po As QuickQuotePaymentOption In _PaymentOptions
                    '            po.Dispose()
                    '            po = Nothing
                    '        Next
                    '        _PaymentOptions.Clear()
                    '    End If
                    '    _PaymentOptions = Nothing
                    'End If
                    '_CurrentlyParsingPaymentOptions = Nothing 'added 9/8/2017

                    'If _GLClassifications IsNot Nothing Then 'removed 7/19/2018
                    '    If _GLClassifications.Count > 0 Then
                    '        For Each gl As QuickQuoteGLClassification In _GLClassifications
                    '            gl.Dispose()
                    '            gl = Nothing
                    '        Next
                    '        _GLClassifications.Clear()
                    '    End If
                    '    _GLClassifications = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _EmployersLiability IsNot Nothing Then
                    '    _EmployersLiability = Nothing
                    'End If
                    'If _EmployersLiabilityId IsNot Nothing Then
                    '    _EmployersLiabilityId = Nothing
                    'End If
                    'If _EmployersLiabilityQuotedPremium IsNot Nothing Then
                    '    _EmployersLiabilityQuotedPremium = Nothing
                    'End If
                    'removed 7/27/2018
                    'If _ExperienceModificationFactor IsNot Nothing Then
                    '    _ExperienceModificationFactor = Nothing
                    'End If
                    'If _ExperienceModificationBureauTypeId IsNot Nothing Then
                    '    _ExperienceModificationBureauTypeId = Nothing
                    'End If
                    'If _ExperienceModificationRiskIdentifier IsNot Nothing Then
                    '    _ExperienceModificationRiskIdentifier = Nothing
                    'End If
                    'If _ExperienceModifications IsNot Nothing Then 'added 9/18/2017
                    '    If _ExperienceModifications.Count > 0 Then
                    '        For Each expMod As QuickQuoteExperienceModification In _ExperienceModifications
                    '            If expMod IsNot Nothing Then
                    '                expMod.Dispose()
                    '                expMod = Nothing
                    '            End If
                    '        Next
                    '        _ExperienceModifications.Clear()
                    '    End If
                    '    _ExperienceModifications = Nothing
                    'End If
                    '_CanUseExperienceModificationNumForExperienceModificationReconciliation = Nothing 'added 9/18/2017
                    '_HasConvertedExperienceModifications = Nothing 'added 9/21/2017
                    'qqHelper.DisposeIntegers(_DiamondExperienceModificationIndexesToUpdate) 'added 9/23/2017

                    'removed 7/19/2018
                    'If _ProgramType IsNot Nothing Then
                    '    _ProgramType = Nothing
                    'End If
                    'If _ProgramTypeId IsNot Nothing Then '4/2/2015 note: added separate variable/property for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
                    '    _ProgramTypeId = Nothing
                    'End If
                    'If _GeneralAggregateLimit IsNot Nothing Then
                    '    _GeneralAggregateLimit = Nothing
                    'End If
                    'If _GeneralAggregateLimitId IsNot Nothing Then
                    '    _GeneralAggregateLimitId = Nothing
                    'End If
                    'If _GeneralAggregateQuotedPremium IsNot Nothing Then
                    '    _GeneralAggregateQuotedPremium = Nothing
                    'End If
                    'If _ProductsCompletedOperationsAggregateLimit IsNot Nothing Then
                    '    _ProductsCompletedOperationsAggregateLimit = Nothing
                    'End If
                    'If _ProductsCompletedOperationsAggregateLimitId IsNot Nothing Then
                    '    _ProductsCompletedOperationsAggregateLimitId = Nothing
                    'End If
                    'If _ProductsCompletedOperationsAggregateQuotedPremium IsNot Nothing Then
                    '    _ProductsCompletedOperationsAggregateQuotedPremium = Nothing
                    'End If
                    'If _PersonalAndAdvertisingInjuryLimit IsNot Nothing Then
                    '    _PersonalAndAdvertisingInjuryLimit = Nothing
                    'End If
                    'If _PersonalAndAdvertisingInjuryLimitId IsNot Nothing Then
                    '    _PersonalAndAdvertisingInjuryLimitId = Nothing
                    'End If
                    'If _PersonalAndAdvertisingInjuryQuotedPremium IsNot Nothing Then
                    '    _PersonalAndAdvertisingInjuryQuotedPremium = Nothing
                    'End If
                    'If _DamageToPremisesRentedLimit IsNot Nothing Then
                    '    _DamageToPremisesRentedLimit = Nothing
                    'End If
                    'If _DamageToPremisesRentedLimitId IsNot Nothing Then
                    '    _DamageToPremisesRentedLimitId = Nothing
                    'End If
                    'If _DamageToPremisesRentedQuotedPremium IsNot Nothing Then
                    '    _DamageToPremisesRentedQuotedPremium = Nothing
                    'End If
                    'If _MedicalExpensesLimit IsNot Nothing Then
                    '    _MedicalExpensesLimit = Nothing
                    'End If
                    'If _MedicalExpensesLimitId IsNot Nothing Then
                    '    _MedicalExpensesLimitId = Nothing
                    'End If
                    'If _MedicalExpensesQuotedPremium IsNot Nothing Then
                    '    _MedicalExpensesQuotedPremium = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _AdditionalInsureds IsNot Nothing Then
                    '    If _AdditionalInsureds.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInsured In _AdditionalInsureds
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _AdditionalInsureds.Clear()
                    '    End If
                    '    _AdditionalInsureds = Nothing
                    'End If
                    'If _AdditionalInsuredsBackup IsNot Nothing Then 'added 6/5/2017
                    '    If _AdditionalInsuredsBackup.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInsured In _AdditionalInsuredsBackup
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _AdditionalInsuredsBackup.Clear()
                    '    End If
                    '    _AdditionalInsuredsBackup = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _HasExclusionOfAmishWorkers <> Nothing Then
                    '    _HasExclusionOfAmishWorkers = Nothing
                    'End If
                    'If _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers <> Nothing Then
                    '    _HasExclusionOfSoleProprietorsPartnersOfficersAndOthers = Nothing
                    'End If
                    'If _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers <> Nothing Then
                    '    _HasInclusionOfSoleProprietorsPartnersOfficersAndOthers = Nothing
                    'End If
                    'If _HasWaiverOfSubrogation <> Nothing Then
                    '    _HasWaiverOfSubrogation = Nothing
                    'End If
                    'If _WaiverOfSubrogationNumberOfWaivers <> Nothing Then
                    '    _WaiverOfSubrogationNumberOfWaivers = Nothing
                    'End If
                    'If _WaiverOfSubrogationPremium IsNot Nothing Then
                    '    _WaiverOfSubrogationPremium = Nothing
                    'End If
                    'If _WaiverOfSubrogationPremiumId IsNot Nothing Then
                    '    _WaiverOfSubrogationPremiumId = Nothing
                    'End If
                    '_NeedsToUpdateWaiverOfSubrogationPremiumId = Nothing 'added 10/13/2017

                    'If _InclusionsExclusions IsNot Nothing Then
                    '    If _InclusionsExclusions.Count > 0 Then
                    '        For Each ie As QuickQuoteInclusionExclusion In _InclusionsExclusions
                    '            ie.Dispose()
                    '            ie = Nothing
                    '        Next
                    '        _InclusionsExclusions.Clear()
                    '    End If
                    '    _InclusionsExclusions = Nothing
                    'End If

                    'If _AnniversaryRatingEffectiveDate IsNot Nothing Then 'removed 7/19/2018
                    '    _AnniversaryRatingEffectiveDate = Nothing
                    'End If
                    'If _AnniversaryRatingExpirationDate IsNot Nothing Then 'removed 7/19/2018
                    '    _AnniversaryRatingExpirationDate = Nothing
                    'End If
                    'removed 7/27/2018
                    'If _GuaranteedRatePeriodEffectiveDate IsNot Nothing Then
                    '    _GuaranteedRatePeriodEffectiveDate = Nothing
                    'End If
                    'If _GuaranteedRatePeriodExpirationDate IsNot Nothing Then
                    '    _GuaranteedRatePeriodExpirationDate = Nothing
                    'End If
                    'If _ModificationProductionDate IsNot Nothing Then
                    '    _ModificationProductionDate = Nothing
                    'End If
                    'If _RatingEffectiveDate IsNot Nothing Then
                    '    _RatingEffectiveDate = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _PhotographyScheduledCoverages IsNot Nothing Then '3/9/2017 - BOP stuff
                    '    If _PhotographyScheduledCoverages.Count > 0 Then
                    '        For Each qqc As QuickQuoteCoverage In _PhotographyScheduledCoverages
                    '            qqc.Dispose()
                    '            qqc = Nothing
                    '        Next
                    '        _PhotographyScheduledCoverages.Clear()
                    '    End If
                    '    _PhotographyScheduledCoverages = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _ContractorsEquipmentScheduledItems IsNot Nothing Then
                    '    If _ContractorsEquipmentScheduledItems.Count > 0 Then
                    '        For Each si As QuickQuoteContractorsEquipmentScheduledItem In _ContractorsEquipmentScheduledItems
                    '            si.Dispose()
                    '            si = Nothing
                    '        Next
                    '        _ContractorsEquipmentScheduledItems.Clear()
                    '    End If
                    '    _ContractorsEquipmentScheduledItems = Nothing
                    'End If
                    'If _ContractorsEquipmentScheduledItemsBackup IsNot Nothing Then 'added 6/5/2017
                    '    If _ContractorsEquipmentScheduledItemsBackup.Count > 0 Then
                    '        For Each si As QuickQuoteContractorsEquipmentScheduledItem In _ContractorsEquipmentScheduledItemsBackup
                    '            si.Dispose()
                    '            si = Nothing
                    '        Next
                    '        _ContractorsEquipmentScheduledItemsBackup.Clear()
                    '    End If
                    '    _ContractorsEquipmentScheduledItemsBackup = Nothing
                    'End If

                    'If _AdditionalPolicyholders IsNot Nothing Then 'removed 7/27/2018
                    '    If _AdditionalPolicyholders.Count > 0 Then
                    '        For Each ph As QuickQuoteAdditionalPolicyholder In _AdditionalPolicyholders
                    '            ph.Dispose()
                    '            ph = Nothing
                    '        Next
                    '        _AdditionalPolicyholders.Clear()
                    '    End If
                    '    _AdditionalPolicyholders = Nothing
                    'End If

                    'If _LossHistoryRecords IsNot Nothing Then 'removed 7/19/2018
                    '    If _LossHistoryRecords.Count > 0 Then
                    '        For Each lh As QuickQuoteLossHistoryRecord In _LossHistoryRecords
                    '            lh.Dispose()
                    '            lh = Nothing
                    '        Next
                    '        _LossHistoryRecords.Clear()
                    '    End If
                    '    _LossHistoryRecords = Nothing
                    'End If

                    'If _PriorCarrier IsNot Nothing Then 'removed 7/19/2018
                    '    _PriorCarrier.Dispose()
                    '    _PriorCarrier = Nothing
                    'End If

                    'removed 7/19/2018
                    'If _AdditionalInterestNamesAndAddresses IsNot Nothing Then
                    '    If _AdditionalInterestNamesAndAddresses.Count > 0 Then
                    '        For Each na As QuickQuoteGenericNameAddress In _AdditionalInterestNamesAndAddresses
                    '            na.Dispose()
                    '            na = Nothing
                    '        Next
                    '        _AdditionalInterestNamesAndAddresses.Clear()
                    '    End If
                    '    _AdditionalInterestNamesAndAddresses = Nothing
                    'End If

                    'If _HasBarbersProfessionalLiability <> Nothing Then
                    '    _HasBarbersProfessionalLiability = Nothing
                    'End If
                    'If _BarbersProfessionalLiabiltyQuotedPremium IsNot Nothing Then
                    '    _BarbersProfessionalLiabiltyQuotedPremium = Nothing
                    'End If
                    'If _BarbersProfessionalLiabilityFullTimeEmpNum IsNot Nothing Then
                    '    _BarbersProfessionalLiabilityFullTimeEmpNum = Nothing
                    'End If
                    'If _BarbersProfessionalLiabilityPartTimeEmpNum IsNot Nothing Then
                    '    _BarbersProfessionalLiabilityPartTimeEmpNum = Nothing
                    'End If
                    'If _HasBeauticiansProfessionalLiability <> Nothing Then
                    '    _HasBeauticiansProfessionalLiability = Nothing
                    'End If
                    'If _BeauticiansProfessionalLiabilityQuotedPremium IsNot Nothing Then
                    '    _BeauticiansProfessionalLiabilityQuotedPremium = Nothing
                    'End If
                    'If _BeauticiansProfessionalLiabilityFullTimeEmpNum IsNot Nothing Then
                    '    _BeauticiansProfessionalLiabilityFullTimeEmpNum = Nothing
                    'End If
                    'If _BeauticiansProfessionalLiabilityPartTimeEmpNum IsNot Nothing Then
                    '    _BeauticiansProfessionalLiabilityPartTimeEmpNum = Nothing
                    'End If
                    'If _HasFuneralDirectorsProfessionalLiability <> Nothing Then
                    '    _HasFuneralDirectorsProfessionalLiability = Nothing
                    'End If
                    'If _FuneralDirectorsProfessionalLiabilityQuotedPremium IsNot Nothing Then
                    '    _FuneralDirectorsProfessionalLiabilityQuotedPremium = Nothing
                    'End If
                    'If _FuneralDirectorsProfessionalLiabilityEmpNum IsNot Nothing Then
                    '    _FuneralDirectorsProfessionalLiabilityEmpNum = Nothing
                    'End If
                    'If _HasPrintersProfessionalLiability <> Nothing Then
                    '    _HasPrintersProfessionalLiability = Nothing
                    'End If
                    'If _PrintersProfessionalLiabilityQuotedPremium IsNot Nothing Then
                    '    _PrintersProfessionalLiabilityQuotedPremium = Nothing
                    'End If
                    'If _PrintersProfessionalLiabilityLocNum IsNot Nothing Then
                    '    _PrintersProfessionalLiabilityLocNum = Nothing
                    'End If
                    'If _HasSelfStorageFacility <> Nothing Then
                    '    _HasSelfStorageFacility = Nothing
                    'End If
                    'If _SelfStorageFacilityQuotedPremium IsNot Nothing Then
                    '    _SelfStorageFacilityQuotedPremium = Nothing
                    'End If
                    ''If _SelfStorageFacilityLocNum IsNot Nothing Then
                    ''    _SelfStorageFacilityLocNum = Nothing
                    ''End If
                    'If _SelfStorageFacilityLimit IsNot Nothing Then
                    '    _SelfStorageFacilityLimit = Nothing
                    'End If
                    'If _HasVeterinariansProfessionalLiability <> Nothing Then
                    '    _HasVeterinariansProfessionalLiability = Nothing
                    'End If
                    'If _VeterinariansProfessionalLiabilityEmpNum IsNot Nothing Then
                    '    _VeterinariansProfessionalLiabilityEmpNum = Nothing
                    'End If
                    'If _VeterinariansProfessionalLiabilityQuotedPremium IsNot Nothing Then
                    '    _VeterinariansProfessionalLiabilityQuotedPremium = Nothing
                    'End If

                    '3/9/2017 - BOP stuff; removed 7/19/2018
                    'If _HasElectronicData <> Nothing Then
                    '    _HasElectronicData = Nothing
                    'End If
                    'If _ElectronicDataLimit IsNot Nothing Then
                    '    _ElectronicDataLimit = Nothing
                    'End If
                    'If _ElectronicDataQuotedPremium IsNot Nothing Then
                    '    _ElectronicDataQuotedPremium = Nothing
                    'End If
                    'If _HasPharmacistProfessionalLiability <> Nothing Then
                    '    _HasPharmacistProfessionalLiability = Nothing
                    'End If
                    'If _PharmacistAnnualGrossSales IsNot Nothing Then
                    '    _PharmacistAnnualGrossSales = Nothing
                    'End If
                    'If _PharmacistQuotedPremium IsNot Nothing Then
                    '    _PharmacistQuotedPremium = Nothing
                    'End If
                    'If _HasResidentialCleaning <> Nothing Then
                    '    _HasResidentialCleaning = Nothing
                    'End If
                    'If _ResidentialCleaningQuotedPremium IsNot Nothing Then
                    '    _ResidentialCleaningQuotedPremium = Nothing
                    'End If
                    'If _HasOpticalAndHearingAidProfessionalLiability <> Nothing Then
                    '    _HasOpticalAndHearingAidProfessionalLiability = Nothing
                    'End If
                    'If _OpticalAndHearingAidProfessionalLiabilityEmpNum IsNot Nothing Then
                    '    _OpticalAndHearingAidProfessionalLiabilityEmpNum = Nothing
                    'End If
                    'If _OpticalAndHearingAidProfessionalLiabilityQuotedPremium IsNot Nothing Then
                    '    _OpticalAndHearingAidProfessionalLiabilityQuotedPremium = Nothing
                    'End If

                    '3/9/2017 - BOP stuff; removed 7/19/2018
                    'If _HasMotelCoverage <> Nothing Then
                    '    _HasMotelCoverage = Nothing
                    'End If
                    'If _MotelCoveragePerGuestLimitId IsNot Nothing Then
                    '    _MotelCoveragePerGuestLimitId = Nothing
                    'End If
                    'If _MotelCoverageSafeDepositDeductibleId IsNot Nothing Then
                    '    _MotelCoverageSafeDepositDeductibleId = Nothing
                    'End If
                    'If _MotelCoverageSafeDepositLimitId IsNot Nothing Then
                    '    _MotelCoverageSafeDepositLimitId = Nothing
                    'End If
                    'If _MotelCoverageSafeDepositQuotedPremium IsNot Nothing Then
                    '    _MotelCoverageSafeDepositQuotedPremium = Nothing
                    'End If
                    'If _MotelCoverageQuotedPremium IsNot Nothing Then
                    '    _MotelCoverageQuotedPremium = Nothing
                    'End If
                    'removed 7/21/2018
                    'If _ApartmentQuotedPremium IsNot Nothing Then
                    '    _ApartmentQuotedPremium = Nothing
                    'End If
                    'If _HasApartmentBuildings <> Nothing Then
                    '    _HasApartmentBuildings = Nothing
                    'End If
                    'If _RestaurantQuotedPremium IsNot Nothing Then
                    '    _RestaurantQuotedPremium = Nothing
                    'End If
                    'If _HasRestaurantEndorsement <> Nothing Then
                    '    _HasRestaurantEndorsement = Nothing
                    'End If
                    'If _NumberOfLocationsWithApartments IsNot Nothing Then
                    '    _NumberOfLocationsWithApartments = Nothing
                    'End If
                    'removed 7/19/2018
                    'If _PhotographyCoverageQuotedPremium IsNot Nothing Then
                    '    _PhotographyCoverageQuotedPremium = Nothing
                    'End If
                    'If _PhotographyMakeupAndHairQuotedPremium IsNot Nothing Then
                    '    _PhotographyMakeupAndHairQuotedPremium = Nothing
                    'End If
                    'If _HasPhotographyCoverage <> Nothing Then
                    '    _HasPhotographyCoverage = Nothing
                    'End If
                    'If _HasPhotographyMakeupAndHair <> Nothing Then
                    '    _HasPhotographyMakeupAndHair = Nothing
                    'End If
                    'If _HasPhotographyCoverageScheduledCoverages <> Nothing Then
                    '    _HasPhotographyCoverageScheduledCoverages = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _LiquorLiabilityOccurrenceLimit IsNot Nothing Then
                    '    _LiquorLiabilityOccurrenceLimit = Nothing
                    'End If
                    'If _LiquorLiabilityOccurrenceLimitId IsNot Nothing Then
                    '    _LiquorLiabilityOccurrenceLimitId = Nothing
                    'End If
                    'If _LiquorLiabilityClassification IsNot Nothing Then
                    '    _LiquorLiabilityClassification = Nothing
                    'End If
                    'If _LiquorLiabilityClassificationId IsNot Nothing Then
                    '    _LiquorLiabilityClassificationId = Nothing
                    'End If
                    'If _LiquorSales IsNot Nothing Then
                    '    _LiquorSales = Nothing
                    'End If
                    'If _LiquorLiabilityQuotedPremium IsNot Nothing Then
                    '    _LiquorLiabilityQuotedPremium = Nothing
                    'End If
                    ''If _LiquorRate IsNot Nothing Then
                    ''    _LiquorRate = Nothing
                    ''End If
                    ''If _LiquorMinimumPremium IsNot Nothing Then
                    ''    _LiquorMinimumPremium = Nothing
                    ''End If
                    'If _ProfessionalLiabilityCemetaryNumberOfBurials IsNot Nothing Then
                    '    _ProfessionalLiabilityCemetaryNumberOfBurials = Nothing
                    'End If
                    'If _ProfessionalLiabilityCemetaryQuotedPremium IsNot Nothing Then
                    '    _ProfessionalLiabilityCemetaryQuotedPremium = Nothing
                    'End If
                    'If _ProfessionalLiabilityFuneralDirectorsNumberOfBodies IsNot Nothing Then
                    '    _ProfessionalLiabilityFuneralDirectorsNumberOfBodies = Nothing
                    'End If
                    'If _ProfessionalLiabilityPastoralNumberOfClergy IsNot Nothing Then
                    '    _ProfessionalLiabilityPastoralNumberOfClergy = Nothing
                    'End If
                    'If _ProfessionalLiabilityPastoralQuotedPremium IsNot Nothing Then
                    '    _ProfessionalLiabilityPastoralQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _IRPM_ManagementCooperation IsNot Nothing Then
                    '    _IRPM_ManagementCooperation = Nothing
                    'End If
                    'If _IRPM_ManagementCooperationDesc IsNot Nothing Then
                    '    _IRPM_ManagementCooperationDesc = Nothing
                    'End If
                    'If _IRPM_Location IsNot Nothing Then
                    '    _IRPM_Location = Nothing
                    'End If
                    'If _IRPM_LocationDesc IsNot Nothing Then
                    '    _IRPM_LocationDesc = Nothing
                    'End If
                    'If _IRPM_BuildingFeatures IsNot Nothing Then
                    '    _IRPM_BuildingFeatures = Nothing
                    'End If
                    'If _IRPM_BuildingFeaturesDesc IsNot Nothing Then
                    '    _IRPM_BuildingFeaturesDesc = Nothing
                    'End If
                    'If _IRPM_Premises IsNot Nothing Then
                    '    _IRPM_Premises = Nothing
                    'End If
                    'If _IRPM_PremisesDesc IsNot Nothing Then
                    '    _IRPM_PremisesDesc = Nothing
                    'End If
                    'If _IRPM_Employees IsNot Nothing Then
                    '    _IRPM_Employees = Nothing
                    'End If
                    'If _IRPM_EmployeesDesc IsNot Nothing Then
                    '    _IRPM_EmployeesDesc = Nothing
                    'End If
                    'If _IRPM_Protection IsNot Nothing Then
                    '    _IRPM_Protection = Nothing
                    'End If
                    'If _IRPM_ProtectionDesc IsNot Nothing Then
                    '    _IRPM_ProtectionDesc = Nothing
                    'End If
                    'If _IRPM_CatostrophicHazards IsNot Nothing Then
                    '    _IRPM_CatostrophicHazards = Nothing
                    'End If
                    'If _IRPM_CatostrophicHazardsDesc IsNot Nothing Then
                    '    _IRPM_CatostrophicHazardsDesc = Nothing
                    'End If
                    'If _IRPM_ManagementExperience IsNot Nothing Then
                    '    _IRPM_ManagementExperience = Nothing
                    'End If
                    'If _IRPM_ManagementExperienceDesc IsNot Nothing Then
                    '    _IRPM_ManagementExperienceDesc = Nothing
                    'End If
                    'If _IRPM_Equipment IsNot Nothing Then
                    '    _IRPM_Equipment = Nothing
                    'End If
                    'If _IRPM_EquipmentDesc IsNot Nothing Then
                    '    _IRPM_EquipmentDesc = Nothing
                    'End If
                    'If _IRPM_MedicalFacilities IsNot Nothing Then
                    '    _IRPM_MedicalFacilities = Nothing
                    'End If
                    'If _IRPM_MedicalFacilitiesDesc IsNot Nothing Then
                    '    _IRPM_MedicalFacilitiesDesc = Nothing
                    'End If
                    'If _IRPM_ClassificationPeculiarities IsNot Nothing Then
                    '    _IRPM_ClassificationPeculiarities = Nothing
                    'End If
                    'If _IRPM_ClassificationPeculiaritiesDesc IsNot Nothing Then
                    '    _IRPM_ClassificationPeculiaritiesDesc = Nothing
                    'End If
                    'If _IRPM_GL_ManagementCooperation IsNot Nothing Then
                    '    _IRPM_GL_ManagementCooperation = Nothing
                    'End If
                    'If _IRPM_GL_ManagementCooperationDesc IsNot Nothing Then
                    '    _IRPM_GL_ManagementCooperationDesc = Nothing
                    'End If
                    'If _IRPM_GL_Location IsNot Nothing Then
                    '    _IRPM_GL_Location = Nothing
                    'End If
                    'If _IRPM_GL_LocationDesc IsNot Nothing Then
                    '    _IRPM_GL_LocationDesc = Nothing
                    'End If
                    'If _IRPM_GL_Premises IsNot Nothing Then
                    '    _IRPM_GL_Premises = Nothing
                    'End If
                    'If _IRPM_GL_PremisesDesc IsNot Nothing Then
                    '    _IRPM_GL_PremisesDesc = Nothing
                    'End If
                    'If _IRPM_GL_Equipment IsNot Nothing Then
                    '    _IRPM_GL_Equipment = Nothing
                    'End If
                    'If _IRPM_GL_EquipmentDesc IsNot Nothing Then
                    '    _IRPM_GL_EquipmentDesc = Nothing
                    'End If
                    'If _IRPM_GL_Employees IsNot Nothing Then
                    '    _IRPM_GL_Employees = Nothing
                    'End If
                    'If _IRPM_GL_EmployeesDesc IsNot Nothing Then
                    '    _IRPM_GL_EmployeesDesc = Nothing
                    'End If
                    'If _IRPM_GL_ClassificationPeculiarities IsNot Nothing Then
                    '    _IRPM_GL_ClassificationPeculiarities = Nothing
                    'End If
                    'If _IRPM_GL_ClassificationPeculiaritiesDesc IsNot Nothing Then
                    '    _IRPM_GL_ClassificationPeculiaritiesDesc = Nothing
                    'End If
                    'If _IRPM_CAP_Management IsNot Nothing Then
                    '    _IRPM_CAP_Management = Nothing
                    'End If
                    'If _IRPM_CAP_ManagementDesc IsNot Nothing Then
                    '    _IRPM_CAP_ManagementDesc = Nothing
                    'End If
                    'If _IRPM_CAP_Employees IsNot Nothing Then
                    '    _IRPM_CAP_Employees = Nothing
                    'End If
                    'If _IRPM_CAP_EmployeesDesc IsNot Nothing Then
                    '    _IRPM_CAP_EmployeesDesc = Nothing
                    'End If
                    'If _IRPM_CAP_Equipment IsNot Nothing Then
                    '    _IRPM_CAP_Equipment = Nothing
                    'End If
                    'If _IRPM_CAP_EquipmentDesc IsNot Nothing Then
                    '    _IRPM_CAP_EquipmentDesc = Nothing
                    'End If
                    'If _IRPM_CAP_SafetyOrganization IsNot Nothing Then
                    '    _IRPM_CAP_SafetyOrganization = Nothing
                    'End If
                    'If _IRPM_CAP_SafetyOrganizationDesc IsNot Nothing Then
                    '    _IRPM_CAP_SafetyOrganizationDesc = Nothing
                    'End If
                    'If _IRPM_CPR_Management IsNot Nothing Then
                    '    _IRPM_CPR_Management = Nothing
                    'End If
                    'If _IRPM_CPR_ManagementDesc IsNot Nothing Then
                    '    _IRPM_CPR_ManagementDesc = Nothing
                    'End If
                    'If _IRPM_CPR_PremisesAndEquipment IsNot Nothing Then
                    '    _IRPM_CPR_PremisesAndEquipment = Nothing
                    'End If
                    'If _IRPM_CPR_PremisesAndEquipmentDesc IsNot Nothing Then
                    '    _IRPM_CPR_PremisesAndEquipmentDesc = Nothing
                    'End If
                    ''added 6/11/2015 for FAR IRPM
                    'qqHelper.DisposeString(_IRPM_FAR_CareConditionOfEquipPremises)
                    'qqHelper.DisposeString(_IRPM_FAR_CareConditionOfEquipPremisesDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_Cooperation)
                    'qqHelper.DisposeString(_IRPM_FAR_CooperationDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_DamageSusceptibility)
                    'qqHelper.DisposeString(_IRPM_FAR_DamageSusceptibilityDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_DispersionOrConcentration)
                    'qqHelper.DisposeString(_IRPM_FAR_DispersionOrConcentrationDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_SuperiorOrInferiorStructureFeatures)
                    'qqHelper.DisposeString(_IRPM_FAR_SuperiorOrInferiorStructureFeaturesDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBedding)
                    'qqHelper.DisposeString(_IRPM_FAR_UseOfRiceHullsOrFlameRetardantBeddingDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_Location)
                    'qqHelper.DisposeString(_IRPM_FAR_LocationDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_MiscProtectFeaturesOrHazards)
                    'qqHelper.DisposeString(_IRPM_FAR_MiscProtectFeaturesOrHazardsDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_RoofCondition)
                    'qqHelper.DisposeString(_IRPM_FAR_RoofConditionDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_StoragePracticesAndHazardousOperations)
                    'qqHelper.DisposeString(_IRPM_FAR_StoragePracticesAndHazardousOperationsDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_PastLosses)
                    'qqHelper.DisposeString(_IRPM_FAR_PastLossesDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_SupportingBusiness)
                    'qqHelper.DisposeString(_IRPM_FAR_SupportingBusinessDesc)
                    'qqHelper.DisposeString(_IRPM_FAR_RegularOnsiteInspections)
                    'qqHelper.DisposeString(_IRPM_FAR_RegularOnsiteInspectionsDesc)

                    'removed 7/21/2018
                    'If _ScheduledRatings IsNot Nothing Then
                    '    If _ScheduledRatings.Count > 0 Then
                    '        For Each sr As QuickQuoteScheduledRating In _ScheduledRatings
                    '            sr.Dispose()
                    '            sr = Nothing
                    '        Next
                    '        _ScheduledRatings.Clear()
                    '    End If
                    '    _ScheduledRatings = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _ExclusionOfAmishWorkerRecords IsNot Nothing Then
                    '    If _ExclusionOfAmishWorkerRecords.Count > 0 Then
                    '        For Each aw As QuickQuoteExclusionOfAmishWorkerRecord In _ExclusionOfAmishWorkerRecords
                    '            aw.Dispose()
                    '            aw = Nothing
                    '        Next
                    '        _ExclusionOfAmishWorkerRecords.Clear()
                    '    End If
                    '    _ExclusionOfAmishWorkerRecords = Nothing
                    'End If
                    'If _ExclusionOfSoleProprietorRecords IsNot Nothing Then
                    '    If _ExclusionOfSoleProprietorRecords.Count > 0 Then
                    '        For Each sp As QuickQuoteExclusionOfSoleProprietorRecord In _ExclusionOfSoleProprietorRecords
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _ExclusionOfSoleProprietorRecords.Clear()
                    '    End If
                    '    _ExclusionOfSoleProprietorRecords = Nothing
                    'End If
                    'If _InclusionOfSoleProprietorRecords IsNot Nothing Then
                    '    If _InclusionOfSoleProprietorRecords.Count > 0 Then
                    '        For Each sp As QuickQuoteInclusionOfSoleProprietorRecord In _InclusionOfSoleProprietorRecords
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _InclusionOfSoleProprietorRecords.Clear()
                    '    End If
                    '    _InclusionOfSoleProprietorRecords = Nothing
                    'End If
                    'If _WaiverOfSubrogationRecords IsNot Nothing Then
                    '    If _WaiverOfSubrogationRecords.Count > 0 Then
                    '        For Each w As QuickQuoteWaiverOfSubrogationRecord In _WaiverOfSubrogationRecords
                    '            w.Dispose()
                    '            w = Nothing
                    '        Next
                    '        _WaiverOfSubrogationRecords.Clear()
                    '    End If
                    '    _WaiverOfSubrogationRecords = Nothing
                    'End If
                    ''added 10/10/2017
                    'If _ExclusionOfAmishWorkerRecordsBackup IsNot Nothing Then
                    '    If _ExclusionOfAmishWorkerRecordsBackup.Count > 0 Then
                    '        For Each aw As QuickQuoteExclusionOfAmishWorkerRecord In _ExclusionOfAmishWorkerRecordsBackup
                    '            aw.Dispose()
                    '            aw = Nothing
                    '        Next
                    '        _ExclusionOfAmishWorkerRecordsBackup.Clear()
                    '    End If
                    '    _ExclusionOfAmishWorkerRecordsBackup = Nothing
                    'End If
                    'If _ExclusionOfSoleProprietorRecordsBackup IsNot Nothing Then
                    '    If _ExclusionOfSoleProprietorRecordsBackup.Count > 0 Then
                    '        For Each sp As QuickQuoteExclusionOfSoleProprietorRecord In _ExclusionOfSoleProprietorRecordsBackup
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _ExclusionOfSoleProprietorRecordsBackup.Clear()
                    '    End If
                    '    _ExclusionOfSoleProprietorRecordsBackup = Nothing
                    'End If
                    'If _InclusionOfSoleProprietorRecordsBackup IsNot Nothing Then
                    '    If _InclusionOfSoleProprietorRecordsBackup.Count > 0 Then
                    '        For Each sp As QuickQuoteInclusionOfSoleProprietorRecord In _InclusionOfSoleProprietorRecordsBackup
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _InclusionOfSoleProprietorRecordsBackup.Clear()
                    '    End If
                    '    _InclusionOfSoleProprietorRecordsBackup = Nothing
                    'End If
                    'If _WaiverOfSubrogationRecordsBackup IsNot Nothing Then
                    '    If _WaiverOfSubrogationRecordsBackup.Count > 0 Then
                    '        For Each w As QuickQuoteWaiverOfSubrogationRecord In _WaiverOfSubrogationRecordsBackup
                    '            w.Dispose()
                    '            w = Nothing
                    '        Next
                    '        _WaiverOfSubrogationRecordsBackup.Clear()
                    '    End If
                    '    _WaiverOfSubrogationRecordsBackup = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _Dec_BuildingLimit_All_Premium IsNot Nothing Then
                    '    _Dec_BuildingLimit_All_Premium = Nothing
                    'End If
                    'If _Dec_BuildingPersPropLimit_All_Premium IsNot Nothing Then
                    '    _Dec_BuildingPersPropLimit_All_Premium = Nothing
                    'End If
                    'If _Dec_BOP_OptCovs_Premium IsNot Nothing Then
                    '    _Dec_BOP_OptCovs_Premium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _ExpModQuotedPremium IsNot Nothing Then
                    '    _ExpModQuotedPremium = Nothing
                    'End If
                    'If _ScheduleModQuotedPremium IsNot Nothing Then
                    '    _ScheduleModQuotedPremium = Nothing
                    'End If
                    'If _TerrorismQuotedPremium IsNot Nothing Then
                    '    _TerrorismQuotedPremium = Nothing
                    'End If
                    'If _PremDiscountQuotedPremium IsNot Nothing Then
                    '    _PremDiscountQuotedPremium = Nothing
                    'End If
                    'If _MinimumQuotedPremium IsNot Nothing Then
                    '    _MinimumQuotedPremium = Nothing
                    'End If
                    'If _MinimumPremiumAdjustment IsNot Nothing Then
                    '    _MinimumPremiumAdjustment = Nothing
                    'End If
                    'If _TotalEstimatedPlanPremium IsNot Nothing Then
                    '    _TotalEstimatedPlanPremium = Nothing
                    'End If
                    'If _SecondInjuryFundQuotedPremium IsNot Nothing Then
                    '    _SecondInjuryFundQuotedPremium = Nothing
                    'End If
                    'If _Dec_LossConstantPremium IsNot Nothing Then
                    '    _Dec_LossConstantPremium = Nothing
                    'End If
                    'If _Dec_ExpenseConstantPremium IsNot Nothing Then
                    '    _Dec_ExpenseConstantPremium = Nothing
                    'End If
                    'If _Dec_WC_TotalPremiumDue IsNot Nothing Then
                    '    _Dec_WC_TotalPremiumDue = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _PolicyUnderwritings IsNot Nothing Then
                    '    If _PolicyUnderwritings.Count > 0 Then
                    '        For Each uw As QuickQuotePolicyUnderwriting In _PolicyUnderwritings
                    '            uw.Dispose()
                    '            uw = Nothing
                    '        Next
                    '        _PolicyUnderwritings.Clear()
                    '    End If
                    '    _PolicyUnderwritings = Nothing
                    'End If
                    'If _PolicyUnderwritingCodeAndLevelAndTabIds IsNot Nothing Then
                    '    If _PolicyUnderwritingCodeAndLevelAndTabIds.Count > 0 Then
                    '        For Each codeId As String In _PolicyUnderwritingCodeAndLevelAndTabIds
                    '            codeId = Nothing
                    '        Next
                    '        _PolicyUnderwritingCodeAndLevelAndTabIds.Clear()
                    '    End If
                    '    _PolicyUnderwritingCodeAndLevelAndTabIds = Nothing
                    'End If

                    'If _QuoteTypeId IsNot Nothing Then 'removed 7/27/2018
                    '    _QuoteTypeId = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _GL_PremisesAndProducts_Deductible IsNot Nothing Then
                    '    _GL_PremisesAndProducts_Deductible = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_DeductibleId IsNot Nothing Then
                    '    _GL_PremisesAndProducts_DeductibleId = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_Description IsNot Nothing Then
                    '    _GL_PremisesAndProducts_Description = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_DeductibleCategoryType IsNot Nothing Then
                    '    _GL_PremisesAndProducts_DeductibleCategoryType = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_DeductibleCategoryTypeId IsNot Nothing Then
                    '    _GL_PremisesAndProducts_DeductibleCategoryTypeId = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_DeductiblePerType IsNot Nothing Then
                    '    _GL_PremisesAndProducts_DeductiblePerType = Nothing
                    'End If
                    'If _GL_PremisesAndProducts_DeductiblePerTypeId IsNot Nothing Then
                    '    _GL_PremisesAndProducts_DeductiblePerTypeId = Nothing
                    'End If
                    'If _Has_GL_PremisesAndProducts <> Nothing Then
                    '    _Has_GL_PremisesAndProducts = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _GL_PremisesTotalQuotedPremium IsNot Nothing Then
                    '    _GL_PremisesTotalQuotedPremium = Nothing
                    'End If
                    'If _GL_ProductsTotalQuotedPremium IsNot Nothing Then
                    '    _GL_ProductsTotalQuotedPremium = Nothing
                    'End If
                    'If _GL_PremisesPolicyLevelQuotedPremium IsNot Nothing Then
                    '    _GL_PremisesPolicyLevelQuotedPremium = Nothing
                    'End If
                    'If _GL_ProductsPolicyLevelQuotedPremium IsNot Nothing Then
                    '    _GL_ProductsPolicyLevelQuotedPremium = Nothing
                    'End If
                    'If _GL_PremisesMinimumQuotedPremium IsNot Nothing Then
                    '    _GL_PremisesMinimumQuotedPremium = Nothing
                    'End If
                    'If _GL_PremisesMinimumPremiumAdjustment IsNot Nothing Then
                    '    _GL_PremisesMinimumPremiumAdjustment = Nothing
                    'End If
                    'If _GL_ProductsMinimumQuotedPremium IsNot Nothing Then
                    '    _GL_ProductsMinimumQuotedPremium = Nothing
                    'End If
                    'If _GL_ProductsMinimumPremiumAdjustment IsNot Nothing Then
                    '    _GL_ProductsMinimumPremiumAdjustment = Nothing
                    'End If
                    'If _Dec_GL_OptCovs_Premium IsNot Nothing Then
                    '    _Dec_GL_OptCovs_Premium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _Drivers IsNot Nothing Then
                    '    If _Drivers.Count > 0 Then
                    '        For Each d As QuickQuoteDriver In _Drivers
                    '            d.Dispose()
                    '            d = Nothing
                    '        Next
                    '        _Drivers.Clear()
                    '    End If
                    '    _Drivers = Nothing
                    'End If
                    'If _Vehicles IsNot Nothing Then
                    '    If _Vehicles.Count > 0 Then
                    '        For Each v As QuickQuoteVehicle In _Vehicles
                    '            v.Dispose()
                    '            v = Nothing
                    '        Next
                    '        _Vehicles.Clear()
                    '    End If
                    '    _Vehicles = Nothing
                    'End If
                    'If _HasFarmPollutionLiability <> Nothing Then
                    '    _HasFarmPollutionLiability = Nothing
                    'End If
                    'If _FarmPollutionLiabilityQuotedPremium IsNot Nothing Then
                    '    _FarmPollutionLiabilityQuotedPremium = Nothing
                    'End If
                    'If _HasHiredBorrowedNonOwned <> Nothing Then
                    '    _HasHiredBorrowedNonOwned = Nothing
                    'End If
                    'If _HasNonOwnershipLiability <> Nothing Then
                    '    _HasNonOwnershipLiability = Nothing
                    'End If
                    'If _NonOwnershipLiabilityNumberOfEmployees IsNot Nothing Then
                    '    _NonOwnershipLiabilityNumberOfEmployees = Nothing
                    'End If
                    'If _NonOwnership_ENO_RatingTypeId IsNot Nothing Then
                    '    _NonOwnership_ENO_RatingTypeId = Nothing
                    'End If
                    'If _NonOwnership_ENO_RatingType IsNot Nothing Then
                    '    _NonOwnership_ENO_RatingType = Nothing
                    'End If
                    'If _NonOwnershipLiabilityQuotedPremium IsNot Nothing Then
                    '    _NonOwnershipLiabilityQuotedPremium = Nothing
                    'End If
                    'If _HasHiredBorrowedLiability <> Nothing Then
                    '    _HasHiredBorrowedLiability = Nothing
                    'End If
                    'qqHelper.DisposeString(_HiredBorrowedLiabilityQuotedPremium) 'added 6/19/2017
                    'If _HasHiredCarPhysicalDamage <> Nothing Then
                    '    _HasHiredCarPhysicalDamage = Nothing
                    'End If
                    'If _HiredBorrowedLossOfUseQuotedPremium IsNot Nothing Then
                    '    _HiredBorrowedLossOfUseQuotedPremium = Nothing
                    'End If
                    'If _ComprehensiveDeductible IsNot Nothing Then
                    '    _ComprehensiveDeductible = Nothing
                    'End If
                    'If _ComprehensiveDeductibleId IsNot Nothing Then
                    '    _ComprehensiveDeductibleId = Nothing
                    'End If
                    'If _ComprehensiveQuotedPremium IsNot Nothing Then
                    '    _ComprehensiveQuotedPremium = Nothing
                    'End If
                    'If _CollisionDeductible IsNot Nothing Then
                    '    _CollisionDeductible = Nothing
                    'End If
                    'If _CollisionDeductibleId IsNot Nothing Then
                    '    _CollisionDeductibleId = Nothing
                    'End If
                    'If _CollisionQuotedPremium IsNot Nothing Then
                    '    _CollisionQuotedPremium = Nothing
                    'End If
                    'If _Liability_UM_UIM_Limit IsNot Nothing Then
                    '    _Liability_UM_UIM_Limit = Nothing
                    'End If
                    'If _Liability_UM_UIM_LimitId IsNot Nothing Then
                    '    _Liability_UM_UIM_LimitId = Nothing
                    'End If
                    'If _Liability_UM_UIM_QuotedPremium IsNot Nothing Then
                    '    _Liability_UM_UIM_QuotedPremium = Nothing
                    'End If
                    'If _MedicalPaymentsLimit IsNot Nothing Then
                    '    _MedicalPaymentsLimit = Nothing
                    'End If
                    'If _MedicalPaymentsLimitId IsNot Nothing Then
                    '    _MedicalPaymentsLimitId = Nothing
                    'End If
                    'If _MedicalPaymentsQuotedPremium IsNot Nothing Then
                    '    _MedicalPaymentsQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _QuoteOrIssueBound <> Nothing Then
                    '    _QuoteOrIssueBound = Nothing
                    'End If
                    'If _IssueBoundEffectiveDate IsNot Nothing Then
                    '    _IssueBoundEffectiveDate = Nothing
                    'End If
                    'If _Modifiers IsNot Nothing Then
                    '    If _Modifiers.Count > 0 Then
                    '        For Each m As QuickQuoteModifier In _Modifiers
                    '            m.Dispose()
                    '            m = Nothing
                    '        Next
                    '        _Modifiers.Clear()
                    '    End If
                    '    _Modifiers = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _HasLocation <> Nothing Then
                    '    _HasLocation = Nothing
                    'End If
                    'If _HasLocationWithBuilding <> Nothing Then
                    '    _HasLocationWithBuilding = Nothing
                    'End If
                    'If _HasLocationWithClassification <> Nothing Then
                    '    _HasLocationWithClassification = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _AutoSymbols IsNot Nothing Then
                    '    If _AutoSymbols.Count > 0 Then
                    '        For Each s As QuickQuoteAutoSymbol In _AutoSymbols
                    '            s.Dispose()
                    '            s = Nothing
                    '        Next
                    '        _AutoSymbols.Clear()
                    '    End If
                    '    _AutoSymbols = Nothing
                    'End If
                    ''If _LiabilityAutoSymbols IsNot Nothing Then
                    ''    If _LiabilityAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _LiabilityAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _LiabilityAutoSymbols.Clear()
                    ''    End If
                    ''    _LiabilityAutoSymbols = Nothing
                    ''End If
                    ''If _MedicalPaymentsAutoSymbols IsNot Nothing Then
                    ''    If _MedicalPaymentsAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _MedicalPaymentsAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _MedicalPaymentsAutoSymbols.Clear()
                    ''    End If
                    ''    _MedicalPaymentsAutoSymbols = Nothing
                    ''End If
                    ''If _UninsuredMotoristAutoSymbols IsNot Nothing Then
                    ''    If _UninsuredMotoristAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _UninsuredMotoristAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _UninsuredMotoristAutoSymbols.Clear()
                    ''    End If
                    ''    _UninsuredMotoristAutoSymbols = Nothing
                    ''End If
                    ''If _UnderinsuredMotoristAutoSymbols IsNot Nothing Then
                    ''    If _UnderinsuredMotoristAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _UnderinsuredMotoristAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _UnderinsuredMotoristAutoSymbols.Clear()
                    ''    End If
                    ''    _UnderinsuredMotoristAutoSymbols = Nothing
                    ''End If
                    ''If _ComprehensiveCoverageAutoSymbols IsNot Nothing Then
                    ''    If _ComprehensiveCoverageAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _ComprehensiveCoverageAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _ComprehensiveCoverageAutoSymbols.Clear()
                    ''    End If
                    ''    _ComprehensiveCoverageAutoSymbols = Nothing
                    ''End If
                    ''If _CollisionCoverageAutoSymbols IsNot Nothing Then
                    ''    If _CollisionCoverageAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _CollisionCoverageAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _CollisionCoverageAutoSymbols.Clear()
                    ''    End If
                    ''    _CollisionCoverageAutoSymbols = Nothing
                    ''End If
                    ''If _NonOwnershipAutoSymbols IsNot Nothing Then
                    ''    If _NonOwnershipAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _NonOwnershipAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _NonOwnershipAutoSymbols.Clear()
                    ''    End If
                    ''    _NonOwnershipAutoSymbols = Nothing
                    ''End If
                    ''If _HiredBorrowedAutoSymbols IsNot Nothing Then
                    ''    If _HiredBorrowedAutoSymbols.Count > 0 Then
                    ''        For Each i As Integer In _HiredBorrowedAutoSymbols
                    ''            i = Nothing
                    ''        Next
                    ''        _HiredBorrowedAutoSymbols.Clear()
                    ''    End If
                    ''    _HiredBorrowedAutoSymbols = Nothing
                    ''End If
                    'If _LiabilityAutoSymbolObject IsNot Nothing Then
                    '    _LiabilityAutoSymbolObject.Dispose()
                    '    _LiabilityAutoSymbolObject = Nothing
                    'End If
                    'If _MedicalPaymentsAutoSymbolObject IsNot Nothing Then
                    '    _MedicalPaymentsAutoSymbolObject.Dispose()
                    '    _MedicalPaymentsAutoSymbolObject = Nothing
                    'End If
                    'If _UninsuredMotoristAutoSymbolObject IsNot Nothing Then
                    '    _UninsuredMotoristAutoSymbolObject.Dispose()
                    '    _UninsuredMotoristAutoSymbolObject = Nothing
                    'End If
                    'If _UnderinsuredMotoristAutoSymbolObject IsNot Nothing Then
                    '    _UnderinsuredMotoristAutoSymbolObject.Dispose()
                    '    _UnderinsuredMotoristAutoSymbolObject = Nothing
                    'End If
                    'If _ComprehensiveCoverageAutoSymbolObject IsNot Nothing Then
                    '    _ComprehensiveCoverageAutoSymbolObject.Dispose()
                    '    _ComprehensiveCoverageAutoSymbolObject = Nothing
                    'End If
                    'If _CollisionCoverageAutoSymbolObject IsNot Nothing Then
                    '    _CollisionCoverageAutoSymbolObject.Dispose()
                    '    _CollisionCoverageAutoSymbolObject = Nothing
                    'End If
                    'If _NonOwnershipAutoSymbolObject IsNot Nothing Then
                    '    _NonOwnershipAutoSymbolObject.Dispose()
                    '    _NonOwnershipAutoSymbolObject = Nothing
                    'End If
                    'If _HiredBorrowedAutoSymbolObject IsNot Nothing Then
                    '    _HiredBorrowedAutoSymbolObject.Dispose()
                    '    _HiredBorrowedAutoSymbolObject = Nothing
                    'End If
                    'If _TowingAndLaborAutoSymbolObject IsNot Nothing Then 'added 4/16/2013 for CAP
                    '    _TowingAndLaborAutoSymbolObject.Dispose()
                    '    _TowingAndLaborAutoSymbolObject = Nothing
                    'End If
                    'If _UseDeveloperAutoSymbols <> Nothing Then
                    '    _UseDeveloperAutoSymbols = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _PolicyTypeId IsNot Nothing Then
                    '    _PolicyTypeId = Nothing
                    'End If
                    'If _PolicyType IsNot Nothing Then
                    '    _PolicyType = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_CombinedSingleLimitLiablityQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_MedicalPaymentsQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_MedicalPaymentsQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UninsuredMotoristLiabilityQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UM_UIM_CovsQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UM_UIM_CovsQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_ComprehensiveCoverageQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_ComprehensiveCoverageQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_CollisionCoverageQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_CollisionCoverageQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_TowingAndLaborQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_TowingAndLaborQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_RentalReimbursementQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_RentalReimbursementQuotedPremium = Nothing
                    'End If
                    'If _Dec_CAP_OptCovs_Premium IsNot Nothing Then
                    '    _Dec_CAP_OptCovs_Premium = Nothing
                    'End If
                    'qqHelper.DisposeString(_Dec_CAP_OptCovs_Premium_Without_GarageKeepers) 'added 5/10/2017 for CAP/GAR

                    'If _PackageParts IsNot Nothing Then 'removed 7/27/2018
                    '    If _PackageParts.Count > 0 Then
                    '        For Each pp As QuickQuotePackagePart In _PackageParts
                    '            pp.Dispose()
                    '            pp = Nothing
                    '        Next
                    '        _PackageParts.Clear()
                    '    End If
                    '    _PackageParts = Nothing
                    'End If
                    'removed 7/21/2018
                    'If _PackageTypeId IsNot Nothing Then
                    '    _PackageTypeId = Nothing
                    'End If
                    'If _PackageType IsNot Nothing Then
                    '    _PackageType = Nothing
                    'End If
                    'If _PackageModificationAssignmentTypeId IsNot Nothing Then
                    '    _PackageModificationAssignmentTypeId = Nothing
                    'End If
                    'If _PackageModificationAssignmentType IsNot Nothing Then
                    '    _PackageModificationAssignmentType = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _Has_PackageGL_EnhancementEndorsement <> Nothing Then
                    '    _Has_PackageGL_EnhancementEndorsement = Nothing
                    'End If
                    'If _PackageGL_EnhancementEndorsementQuotedPremium IsNot Nothing Then
                    '    _PackageGL_EnhancementEndorsementQuotedPremium = Nothing
                    'End If
                    'If _Has_PackageCPR_EnhancementEndorsement <> Nothing Then
                    '    _Has_PackageCPR_EnhancementEndorsement = Nothing
                    'End If
                    'If _PackageCPR_EnhancementEndorsementQuotedPremium IsNot Nothing Then
                    '    _PackageCPR_EnhancementEndorsementQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _CPR_BuildingsTotal_BuildingCovQuotedPremium IsNot Nothing Then
                    '    _CPR_BuildingsTotal_BuildingCovQuotedPremium = Nothing
                    'End If
                    'If _CPR_BuildingsTotal_PersPropCoverageQuotedPremium IsNot Nothing Then
                    '    _CPR_BuildingsTotal_PersPropCoverageQuotedPremium = Nothing
                    'End If
                    'If _CPR_BuildingsTotal_PersPropOfOthersQuotedPremium IsNot Nothing Then
                    '    _CPR_BuildingsTotal_PersPropOfOthersQuotedPremium = Nothing
                    'End If
                    'If _CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium IsNot Nothing Then
                    '    _CPR_BuildingsTotal_BusinessIncomeCovQuotedPremium = Nothing
                    'End If
                    'If _CPR_BuildingsTotal_EQ_QuotedPremium IsNot Nothing Then
                    '    _CPR_BuildingsTotal_EQ_QuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _LocationsTotal_EquipmentBreakdownQuotedPremium IsNot Nothing Then
                    '    _LocationsTotal_EquipmentBreakdownQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _CPP_GL_PackagePart_QuotedPremium IsNot Nothing Then
                    '    _CPP_GL_PackagePart_QuotedPremium = Nothing
                    'End If
                    'If _CPP_CPR_PackagePart_QuotedPremium IsNot Nothing Then
                    '    _CPP_CPR_PackagePart_QuotedPremium = Nothing
                    'End If
                    ''added 1/26/2015 for CIM and CRM
                    'If _CPP_CIM_PackagePart_QuotedPremium IsNot Nothing Then
                    '    _CPP_CIM_PackagePart_QuotedPremium = Nothing
                    'End If
                    'If _CPP_CRM_PackagePart_QuotedPremium IsNot Nothing Then
                    '    _CPP_CRM_PackagePart_QuotedPremium = Nothing
                    'End If
                    'qqHelper.DisposeString(_CPP_GAR_PackagePart_QuotedPremium) 'added 4/22/2017

                    'removed 7/21/2018
                    'If _CAP_Liability_WouldHaveSymbol8 <> Nothing Then
                    '    _CAP_Liability_WouldHaveSymbol8 = Nothing
                    'End If
                    'If _CAP_Liability_WouldHaveSymbol9 <> Nothing Then
                    '    _CAP_Liability_WouldHaveSymbol9 = Nothing
                    'End If
                    'If _CAP_Comprehensive_WouldHaveSymbol8 <> Nothing Then
                    '    _CAP_Comprehensive_WouldHaveSymbol8 = Nothing
                    'End If
                    'If _CAP_Collision_WouldHaveSymbol8 <> Nothing Then
                    '    _CAP_Collision_WouldHaveSymbol8 = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _EFT_BankRoutingNumber IsNot Nothing Then
                    '    _EFT_BankRoutingNumber = Nothing
                    'End If
                    'If _EFT_BankAccountNumber IsNot Nothing Then
                    '    _EFT_BankAccountNumber = Nothing
                    'End If
                    'If _EFT_BankAccountTypeId IsNot Nothing Then
                    '    _EFT_BankAccountTypeId = Nothing
                    'End If
                    'If _EFT_DeductionDay IsNot Nothing Then
                    '    _EFT_DeductionDay = Nothing
                    'End If

                    'If _OnlyUsePropertyToSetFieldWithSameName <> Nothing Then 'removed 7/27/2018
                    '    _OnlyUsePropertyToSetFieldWithSameName = Nothing
                    'End If

                    'removed 7/27/2018
                    'If _Database_QuoteId IsNot Nothing Then
                    '    _Database_QuoteId = Nothing
                    'End If
                    'If _Database_QuoteXmlId IsNot Nothing Then
                    '    _Database_QuoteXmlId = Nothing
                    'End If
                    'If _Database_QuoteNumber IsNot Nothing Then
                    '    _Database_QuoteNumber = Nothing
                    'End If
                    'If _Database_LobId IsNot Nothing Then
                    '    _Database_LobId = Nothing
                    'End If
                    'If _Database_CurrentQuoteXmlId IsNot Nothing Then
                    '    _Database_CurrentQuoteXmlId = Nothing
                    'End If
                    'If _Database_XmlQuoteId IsNot Nothing Then
                    '    _Database_XmlQuoteId = Nothing
                    'End If
                    'If _Database_LastAvailableQuoteNumber IsNot Nothing Then
                    '    _Database_LastAvailableQuoteNumber = Nothing
                    'End If
                    ''added more 1/8/2016
                    'qqHelper.DisposeString(_Database_QuoteStatusId)
                    'qqHelper.DisposeString(_Database_XmlStatusId)
                    '_Database_IsPolicy = Nothing
                    'qqHelper.DisposeString(_Database_DiamondPolicyNumber)
                    '_Database_OriginatedInVR = Nothing

                    'If _Database_EffectiveDate IsNot Nothing Then 'removed 7/27/2018
                    '    _Database_EffectiveDate = Nothing
                    'End If

                    'If _TestObjects IsNot Nothing Then
                    '    If _TestObjects.Count > 0 Then
                    '        For Each t As TestObject In _TestObjects
                    '            t.Dispose()
                    '            t = Nothing
                    '        Next
                    '        _TestObjects.Clear()
                    '    End If
                    '    _TestObjects = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _HasBlanketBuilding <> Nothing Then
                    '    _HasBlanketBuilding = Nothing
                    'End If
                    'If _HasBlanketContents <> Nothing Then
                    '    _HasBlanketContents = Nothing
                    'End If
                    'If _HasBlanketBuildingAndContents <> Nothing Then
                    '    _HasBlanketBuildingAndContents = Nothing
                    'End If
                    'If _HasBlanketBusinessIncome <> Nothing Then
                    '    _HasBlanketBusinessIncome = Nothing
                    'End If
                    'If _BlanketBuildingQuotedPremium IsNot Nothing Then
                    '    _BlanketBuildingQuotedPremium = Nothing
                    'End If
                    'If _BlanketContentsQuotedPremium IsNot Nothing Then
                    '    _BlanketContentsQuotedPremium = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsQuotedPremium IsNot Nothing Then
                    '    _BlanketBuildingAndContentsQuotedPremium = Nothing
                    'End If
                    'If _BlanketBusinessIncomeQuotedPremium IsNot Nothing Then
                    '    _BlanketBusinessIncomeQuotedPremium = Nothing
                    'End If
                    'If _BlanketBuildingCauseOfLossTypeId IsNot Nothing Then
                    '    _BlanketBuildingCauseOfLossTypeId = Nothing
                    'End If
                    'If _BlanketBuildingCauseOfLossType IsNot Nothing Then
                    '    _BlanketBuildingCauseOfLossType = Nothing
                    'End If
                    'If _BlanketContentsCauseOfLossTypeId IsNot Nothing Then
                    '    _BlanketContentsCauseOfLossTypeId = Nothing
                    'End If
                    'If _BlanketContentsCauseOfLossType IsNot Nothing Then
                    '    _BlanketContentsCauseOfLossType = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsCauseOfLossTypeId IsNot Nothing Then
                    '    _BlanketBuildingAndContentsCauseOfLossTypeId = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsCauseOfLossType IsNot Nothing Then
                    '    _BlanketBuildingAndContentsCauseOfLossType = Nothing
                    'End If
                    'If _BlanketBusinessIncomeCauseOfLossTypeId IsNot Nothing Then
                    '    _BlanketBusinessIncomeCauseOfLossTypeId = Nothing
                    'End If
                    'If _BlanketBusinessIncomeCauseOfLossType IsNot Nothing Then
                    '    _BlanketBusinessIncomeCauseOfLossType = Nothing
                    'End If
                    ''added more blanket stuff 4/16/2013
                    'If _BlanketBuildingLimit IsNot Nothing Then
                    '    _BlanketBuildingLimit = Nothing
                    'End If
                    'If _BlanketBuildingCoinsuranceTypeId IsNot Nothing Then
                    '    _BlanketBuildingCoinsuranceTypeId = Nothing
                    'End If
                    'If _BlanketBuildingCoinsuranceType IsNot Nothing Then
                    '    _BlanketBuildingCoinsuranceType = Nothing
                    'End If
                    'If _BlanketBuildingValuationId IsNot Nothing Then
                    '    _BlanketBuildingValuationId = Nothing
                    'End If
                    'If _BlanketBuildingValuation IsNot Nothing Then
                    '    _BlanketBuildingValuation = Nothing
                    'End If
                    'If _BlanketContentsLimit IsNot Nothing Then
                    '    _BlanketContentsLimit = Nothing
                    'End If
                    'If _BlanketContentsCoinsuranceTypeId IsNot Nothing Then
                    '    _BlanketContentsCoinsuranceTypeId = Nothing
                    'End If
                    'If _BlanketContentsCoinsuranceType IsNot Nothing Then
                    '    _BlanketContentsCoinsuranceType = Nothing
                    'End If
                    'If _BlanketContentsValuationId IsNot Nothing Then
                    '    _BlanketContentsValuationId = Nothing
                    'End If
                    'If _BlanketContentsValuation IsNot Nothing Then
                    '    _BlanketContentsValuation = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsLimit IsNot Nothing Then
                    '    _BlanketBuildingAndContentsLimit = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsCoinsuranceTypeId IsNot Nothing Then
                    '    _BlanketBuildingAndContentsCoinsuranceTypeId = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsCoinsuranceType IsNot Nothing Then
                    '    _BlanketBuildingAndContentsCoinsuranceType = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsValuationId IsNot Nothing Then
                    '    _BlanketBuildingAndContentsValuationId = Nothing
                    'End If
                    'If _BlanketBuildingAndContentsValuation IsNot Nothing Then
                    '    _BlanketBuildingAndContentsValuation = Nothing
                    'End If
                    'If _BlanketBusinessIncomeLimit IsNot Nothing Then
                    '    _BlanketBusinessIncomeLimit = Nothing
                    'End If
                    'If _BlanketBusinessIncomeCoinsuranceTypeId IsNot Nothing Then
                    '    _BlanketBusinessIncomeCoinsuranceTypeId = Nothing
                    'End If
                    'If _BlanketBusinessIncomeCoinsuranceType IsNot Nothing Then
                    '    _BlanketBusinessIncomeCoinsuranceType = Nothing
                    'End If
                    'If _BlanketBusinessIncomeValuationId IsNot Nothing Then
                    '    _BlanketBusinessIncomeValuationId = Nothing
                    'End If
                    'If _BlanketBusinessIncomeValuation IsNot Nothing Then
                    '    _BlanketBusinessIncomeValuation = Nothing
                    'End If
                    'If _CPR_BlanketCoverages_TotalPremium IsNot Nothing Then
                    '    _CPR_BlanketCoverages_TotalPremium = Nothing
                    'End If
                    'If _BlanketCombinedEarthquake_QuotedPremium IsNot Nothing Then
                    '    _BlanketCombinedEarthquake_QuotedPremium = Nothing
                    'End If
                    ''added 5/3/2018 for CPR
                    '_BlanketBuildingIsAgreedValue = Nothing
                    '_BlanketContentsIsAgreedValue = Nothing
                    '_BlanketBuildingAndContentsIsAgreedValue = Nothing
                    '_BlanketBusinessIncomeIsAgreedValue = Nothing

                    'removed 7/21/2018
                    ''added 4/17/2013 for CPR to total up Property in the Open coverage premiums
                    'If _LocationsTotal_PropertyInTheOpenRecords_QuotedPremium IsNot Nothing Then
                    '    _LocationsTotal_PropertyInTheOpenRecords_QuotedPremium = Nothing
                    'End If
                    'If _LocationsTotal_PropertyInTheOpenRecords_EQ_Premium IsNot Nothing Then
                    '    _LocationsTotal_PropertyInTheOpenRecords_EQ_Premium = Nothing
                    'End If
                    'If _LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium IsNot Nothing Then
                    '    _LocationsTotal_PitoRecords_And_BuildingsTotal_Combined_EQ_Premium = Nothing
                    'End If

                    'If _Agency IsNot Nothing Then 'removed 7/27/2018
                    '    _Agency.Dispose()
                    '    _Agency = Nothing
                    'End If

                    'If _PolicyImageId IsNot Nothing Then 'testing 7/2/2013; removed 7/27/2018
                    '    _PolicyImageId = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _TierTypeId IsNot Nothing Then
                    '    _TierTypeId = Nothing
                    'End If
                    'If _UseTierOverride <> Nothing Then
                    '    _UseTierOverride = Nothing
                    'End If
                    'If _TierAdjustmentTypeId IsNot Nothing Then
                    '    _TierAdjustmentTypeId = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _PersonalLiabilityLimitId IsNot Nothing Then
                    '    _PersonalLiabilityLimitId = Nothing
                    'End If
                    'If _PersonalLiabilityQuotedPremium IsNot Nothing Then
                    '    _PersonalLiabilityQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _Applicants IsNot Nothing Then
                    '    If _Applicants.Count > 0 Then
                    '        For Each a As QuickQuoteApplicant In _Applicants
                    '            a.Dispose()
                    '            a = Nothing
                    '        Next
                    '        _Applicants.Clear()
                    '    End If
                    '    _Applicants = Nothing
                    'End If
                    'If _Operators IsNot Nothing Then
                    '    If _Operators.Count > 0 Then
                    '        For Each o As QuickQuoteOperator In _Operators
                    '            o.Dispose()
                    '            o = Nothing
                    '        Next
                    '        _Operators.Clear()
                    '    End If
                    '    _Operators = Nothing
                    'End If
                    'If _Exclusions IsNot Nothing Then
                    '    If _Exclusions.Count > 0 Then
                    '        For Each ex As QuickQuoteExclusion In _Exclusions
                    '            ex.Dispose()
                    '            ex = Nothing
                    '        Next
                    '        _Exclusions.Clear()
                    '    End If
                    '    _Exclusions = Nothing
                    'End If
                    'If _HouseholdMembers IsNot Nothing Then
                    '    If _HouseholdMembers.Count > 0 Then
                    '        For Each m As QuickQuoteHouseholdMember In _HouseholdMembers
                    '            m.Dispose()
                    '            m = Nothing
                    '        Next
                    '        _HouseholdMembers.Clear()
                    '    End If
                    '    _HouseholdMembers = Nothing
                    'End If
                    'If _ResidenceInfo IsNot Nothing Then
                    '    _ResidenceInfo.Dispose()
                    '    _ResidenceInfo = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _ThirdPartyData IsNot Nothing Then
                    '    _ThirdPartyData.Dispose()
                    '    _ThirdPartyData = Nothing
                    'End If
                    ''added 1/14/2014 for PPA
                    'If _AutoHome <> Nothing Then
                    '    _AutoHome = Nothing
                    'End If
                    'If _EmployeeDiscount <> Nothing Then
                    '    _EmployeeDiscount = Nothing
                    'End If
                    'If _FacultativeReinsurance <> Nothing Then
                    '    _FacultativeReinsurance = Nothing
                    'End If
                    'If _SelectMarketCredit <> Nothing Then
                    '    _SelectMarketCredit = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 2/18/2014
                    'If _HasConvertedCoverages <> Nothing Then
                    '    _HasConvertedCoverages = Nothing
                    'End If
                    'If _HasConvertedInclusionsExclusions <> Nothing Then
                    '    _HasConvertedInclusionsExclusions = Nothing
                    'End If
                    'If _HasConvertedModifiers <> Nothing Then
                    '    _HasConvertedModifiers = Nothing
                    'End If
                    'If _HasConvertedScheduledRatings <> Nothing Then
                    '    _HasConvertedScheduledRatings = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 4/2/2014
                    'If _VehiclesTotal_PremiumFullTerm IsNot Nothing Then
                    '    _VehiclesTotal_PremiumFullTerm = Nothing
                    'End If
                    'If _LocationsTotal_PremiumFullTerm IsNot Nothing Then
                    '    _LocationsTotal_PremiumFullTerm = Nothing
                    'End If
                    'If _Locations_BuildingsTotal_PremiumFullTerm IsNot Nothing Then
                    '    _Locations_BuildingsTotal_PremiumFullTerm = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 4/22/2014
                    'If _CanUseDriverNumForDriverReconciliation <> Nothing Then
                    '    _CanUseDriverNumForDriverReconciliation = Nothing
                    'End If
                    'If _CanUseVehicleNumForVehicleReconciliation <> Nothing Then
                    '    _CanUseVehicleNumForVehicleReconciliation = Nothing
                    'End If
                    'If _CanUseExclusionNumForExclusionReconciliation <> Nothing Then 'added 4/23/2014
                    '    _CanUseExclusionNumForExclusionReconciliation = Nothing
                    'End If
                    'If _CanUseLossHistoryNumForLossHistoryReconciliation <> Nothing Then 'added 4/23/2014
                    '    _CanUseLossHistoryNumForLossHistoryReconciliation = Nothing
                    'End If
                    'If _CanUseLocationNumForLocationReconciliation <> Nothing Then 'added 4/23/2014
                    '    _CanUseLocationNumForLocationReconciliation = Nothing
                    'End If
                    'If _CanUseApplicantNumForApplicantReconciliation <> Nothing Then 'added 4/24/2014
                    '    _CanUseApplicantNumForApplicantReconciliation = Nothing
                    'End If
                    'If _BillingAddressee IsNot Nothing Then 'removed 7/27/2018
                    '    _BillingAddressee.Dispose()
                    '    _BillingAddressee = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 5/22/2014 for PPA
                    'If _VehiclesTotal_BodilyInjuryLiabilityQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_BodilyInjuryLiabilityQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_PropertyDamageQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_PropertyDamageQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UninsuredCombinedSingleQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UninsuredCombinedSingleQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UninsuredMotoristPropertyDamageQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_UninsuredMotoristPropertyDamageDeductibleQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_PollutionLiabilityBroadenedCoverageQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_TransportationExpenseQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_TransportationExpenseQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_AutoLoanOrLeaseQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_AutoLoanOrLeaseQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_TapesAndRecordsQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_TapesAndRecordsQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_SoundEquipmentQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_SoundEquipmentQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_ElectronicEquipmentQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_ElectronicEquipmentQuotedPremium = Nothing
                    'End If
                    'If _VehiclesTotal_TripInterruptionQuotedPremium IsNot Nothing Then
                    '    _VehiclesTotal_TripInterruptionQuotedPremium = Nothing
                    'End If

                    'removed 7/21/2018
                    'If _TieringInformation IsNot Nothing Then 'added 7/28/2014
                    '    _TieringInformation.Dispose()
                    '    _TieringInformation = Nothing
                    'End If

                    'removed 7/21/2018
                    ''9/23/2014 - added for EPLI logic brought over from DiamondQuickQuote
                    '_HasEPLI = Nothing
                    '_EPLI_Applied = Nothing 'added 10/7/2014 for new VR Commercial; not currently used from library
                    'If _EPLIPremium IsNot Nothing Then
                    '    _EPLIPremium = Nothing
                    'End If
                    'If _EPLICoverageLimitId IsNot Nothing Then
                    '    _EPLICoverageLimitId = Nothing
                    'End If
                    'If _EPLIDeductibleId IsNot Nothing Then
                    '    _EPLIDeductibleId = Nothing
                    'End If
                    'If _EPLICoverageTypeId IsNot Nothing Then
                    '    _EPLICoverageTypeId = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 3/5/2015
                    'qqHelper.DisposeString(_BlanketWaiverOfSubrogation)
                    'qqHelper.DisposeString(_BlanketWaiverOfSubrogationQuotedPremium)

                    'removed 7/21/2018
                    ''added 2/6/2017 for Condo D&O logic
                    '_HasCondoDandO = Nothing
                    'qqHelper.DisposeString(_CondoDandOAssociatedName)
                    'qqHelper.DisposeString(_CondoDandODeductibleId)
                    'qqHelper.DisposeString(_CondoDandOPremium)
                    'qqHelper.DisposeString(_CondoDandOManualLimit)

                    'removed 7/21/2018
                    '_CanUsePolicyUnderwritingNumForPolicyUnderwritingReconciliation = Nothing 'added 10/15/2014 for reconciliation

                    'removed 7/21/2018
                    '_CanUseOperatorNumForOperatorReconciliation = Nothing 'added 10/29/2014

                    'removed 7/21/2018
                    ''added 11/17/2014 for HOM
                    'If _Locations_InlandMarinesTotal_Premium IsNot Nothing Then
                    '    _Locations_InlandMarinesTotal_Premium = Nothing
                    'End If
                    'If _Locations_InlandMarinesTotal_CoveragePremium IsNot Nothing Then
                    '    _Locations_InlandMarinesTotal_CoveragePremium = Nothing
                    'End If
                    'If _Locations_RvWatercraftsTotal_Premium IsNot Nothing Then
                    '    _Locations_RvWatercraftsTotal_Premium = Nothing
                    'End If
                    'If _Locations_RvWatercraftsTotal_CoveragesPremium IsNot Nothing Then
                    '    _Locations_RvWatercraftsTotal_CoveragesPremium = Nothing
                    'End If

                    'If _FirstWrittenDate IsNot Nothing Then 'added 11/19/2014; will only be used if it's there... else will keep Diamond default; removed 7/27/2018
                    '    _FirstWrittenDate = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 1/19/2015 for CIM
                    'If _ScheduledCoverages IsNot Nothing Then
                    '    If _ScheduledCoverages.Count > 0 Then
                    '        For Each c As QuickQuoteScheduledCoverage In _ScheduledCoverages
                    '            c.Dispose()
                    '            c = Nothing
                    '        Next
                    '        _ScheduledCoverages.Clear()
                    '    End If
                    '    _ScheduledCoverages = Nothing
                    'End If
                    '_HasConvertedScheduledCoverages = Nothing
                    '_CanUseScheduledCoverageNumForScheduledCoverageReconciliation = Nothing 'added 1/22/2015
                    'If _ContractorsEquipmentScheduledCoverages IsNot Nothing Then 'added 1/22/2015
                    '    If _ContractorsEquipmentScheduledCoverages.Count > 0 Then
                    '        For Each c As QuickQuoteContractorsEquipmentScheduledCoverage In _ContractorsEquipmentScheduledCoverages
                    '            c.Dispose()
                    '            c = Nothing
                    '        Next
                    '        _ContractorsEquipmentScheduledCoverages.Clear()
                    '    End If
                    '    _ContractorsEquipmentScheduledCoverages = Nothing
                    'End If
                    ''added 1/23/2015
                    'If _ContractorsEquipmentScheduleCoinsuranceTypeId IsNot Nothing Then
                    '    _ContractorsEquipmentScheduleCoinsuranceTypeId = Nothing 'may need static data placeholder; may be defaulted as there's just one value in dropdown (1 = per 100)
                    'End If
                    'If _ContractorsEquipmentScheduleDeductibleId IsNot Nothing Then
                    '    _ContractorsEquipmentScheduleDeductibleId = Nothing 'may need static data placeholder
                    'End If
                    'If _ContractorsEquipmentScheduleRate IsNot Nothing Then
                    '    _ContractorsEquipmentScheduleRate = Nothing
                    'End If
                    ''If _ContractorsEquipmentScheduleCoverageBasisTypeId IsNot Nothing Then 'removed 4/2/2015... will default to 1
                    ''    _ContractorsEquipmentScheduleCoverageBasisTypeId = Nothing 'may need static data placeholder
                    ''End If
                    'If _ContractorsEquipmentScheduleQuotedPremium IsNot Nothing Then
                    '    _ContractorsEquipmentScheduleQuotedPremium = Nothing
                    'End If
                    ''If _ContractorsEquipmentScheduleDepositPremiumFactor IsNot Nothing Then
                    ''    _ContractorsEquipmentScheduleDepositPremiumFactor = Nothing 'may not need; appears to be defaulted to 0.500; would need to add DepositPremiumFactor prop to Coverage object (CoverageDetail)
                    ''End If
                    ''If _ContractorsEquipmentScheduleManualLimitAmount IsNot Nothing Then
                    ''    _ContractorsEquipmentScheduleManualLimitAmount = Nothing 'won't use private variable; just ReadOnly prop... should equal sum of Coverage.ManualLimitAmount for ContractorsEquipmentScheduledCoverages
                    ''End If

                    'removed 7/21/2018
                    ''added 1/27/2015
                    'If _ContractorsEquipmentLeasedRentedFromOthersLimit IsNot Nothing Then
                    '    _ContractorsEquipmentLeasedRentedFromOthersLimit = Nothing
                    'End If
                    ''If _ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId IsNot Nothing Then 'removed 4/2/2015... will default to 1
                    ''    _ContractorsEquipmentLeasedRentedFromOthersCoverageBasisTypeId = Nothing
                    ''End If
                    'If _ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId IsNot Nothing Then
                    '    _ContractorsEquipmentLeasedRentedFromOthersCoverageLimitId = Nothing
                    'End If
                    'If _ContractorsEquipmentLeasedRentedFromOthersRate IsNot Nothing Then
                    '    _ContractorsEquipmentLeasedRentedFromOthersRate = Nothing
                    'End If
                    'If _ContractorsEquipmentLeasedRentedFromOthersQuotedPremium IsNot Nothing Then
                    '    _ContractorsEquipmentLeasedRentedFromOthersQuotedPremium = Nothing
                    'End If
                    ''added 1/27/2015
                    'qqHelper.DisposeString(_ContractorsEquipmentRentalReimbursementLimit)
                    ''qqHelper.DisposeString(_ContractorsEquipmentRentalReimbursementCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_ContractorsEquipmentRentalReimbursementRate)
                    'qqHelper.DisposeString(_ContractorsEquipmentRentalReimbursementQuotedPremium)
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceLimit)
                    ''qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceRate)
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceDeductibleId)
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerOccurrenceQuotedPremium)
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerToolLimit)
                    ''qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerToolCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_ContractorsEquipmentSmallToolsEndorsementPerToolQuotedPremium)
                    'qqHelper.DisposeString(_SmallToolsLimit)
                    ''qqHelper.DisposeString(_SmallToolsCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_SmallToolsRate)
                    'qqHelper.DisposeString(_SmallToolsDeductibleId)
                    'If _SmallToolsAdditionalInterests IsNot Nothing Then
                    '    If _SmallToolsAdditionalInterests.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInterest In _SmallToolsAdditionalInterests
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _SmallToolsAdditionalInterests.Clear()
                    '    End If
                    '    _SmallToolsAdditionalInterests = Nothing
                    'End If
                    '_SmallToolsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_SmallToolsQuotedPremium)
                    '_SmallToolsIsEmployeeTools = Nothing 'added 7/15/2015 for missed CIM requirement (on small tools floater)
                    '_SmallToolsIsToolsLeasedOrRented = Nothing 'added 7/15/2015 for missed CIM requirement (on small tools floater)
                    'qqHelper.DisposeString(_SmallToolsAnyOneLossCatastropheLimit)
                    ''qqHelper.DisposeString(_SmallToolsAnyOneLossCatastropheCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_SmallToolsAnyOneLossCatastropheQuotedPremium)
                    ''added 1/28/2015
                    'If _InstallationScheduledLocations IsNot Nothing Then
                    '    If _InstallationScheduledLocations.Count > 0 Then
                    '        For Each isl As QuickQuoteInstallationScheduledLocation In _InstallationScheduledLocations
                    '            isl.Dispose()
                    '            isl = Nothing
                    '        Next
                    '        _InstallationScheduledLocations.Clear()
                    '    End If
                    '    _InstallationScheduledLocations = Nothing
                    'End If
                    'qqHelper.DisposeString(_InstallationQuotedPremium)
                    'If _InstallationAdditionalInterests IsNot Nothing Then
                    '    If _InstallationAdditionalInterests.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInterest In _InstallationAdditionalInterests
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _InstallationAdditionalInterests.Clear()
                    '    End If
                    '    _InstallationAdditionalInterests = Nothing
                    'End If
                    '_InstallationCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_InstallationBlanketLimit)
                    'qqHelper.DisposeString(_InstallationBlanketCoinsuranceTypeId)
                    'qqHelper.DisposeString(_InstallationBlanketDeductibleId)
                    'qqHelper.DisposeString(_InstallationBlanketRate)
                    ''qqHelper.DisposeString(_InstallationBlanketCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_InstallationBlanketQuotedPremium)
                    'qqHelper.DisposeString(_InstallationBlanketAnyOneLossCatastropheLimit)
                    ''qqHelper.DisposeString(_InstallationBlanketAnyOneLossCatastropheCoverageBasisTypeId) 'removed 4/2/2015... will default to 1
                    'qqHelper.DisposeString(_InstallationBlanketAnyOneLossCatastropheQuotedPremium)
                    ''added 2/2/2015
                    'qqHelper.DisposeString(_InstallationAdditionalDebrisRemovalExpenseLimit)
                    'qqHelper.DisposeString(_InstallationAdditionalDebrisRemovalExpenseQuotedPremium)
                    'qqHelper.DisposeString(_InstallationStorageLocationsLimit)
                    'qqHelper.DisposeString(_InstallationStorageLocationsQuotedPremium)
                    'qqHelper.DisposeString(_InstallationTransitLimit)
                    'qqHelper.DisposeString(_InstallationTransitQuotedPremium)
                    'qqHelper.DisposeString(_InstallationTestingLimit)
                    'qqHelper.DisposeString(_InstallationTestingQuotedPremium)
                    'qqHelper.DisposeString(_InstallationSewerBackupLimit)
                    'qqHelper.DisposeString(_InstallationSewerBackupDeductible)
                    'qqHelper.DisposeString(_InstallationSewerBackupQuotedPremium)
                    'qqHelper.DisposeString(_InstallationSewerBackupCatastropheLimit)
                    'qqHelper.DisposeString(_InstallationSewerBackupCatastropheQuotedPremium)
                    'qqHelper.DisposeString(_InstallationEarthquakeLimit)
                    'qqHelper.DisposeString(_InstallationEarthquakeDeductible)
                    'qqHelper.DisposeString(_InstallationEarthquakeQuotedPremium)
                    'qqHelper.DisposeString(_InstallationEarthquakeCatastropheLimit)
                    'qqHelper.DisposeString(_InstallationEarthquakeCatastropheQuotedPremium)
                    ''added 2/9/2015
                    'qqHelper.DisposeString(_BusinessPersonalPropertyLimit) 'shown in UI Installation Coverage Extensions section, but may not be specific to Installation
                    'qqHelper.DisposeString(_BusinessPersonalPropertyQuotedPremium)
                    'If _ScheduledPropertyItems IsNot Nothing Then
                    '    If _ScheduledPropertyItems.Count > 0 Then
                    '        For Each sp As QuickQuoteScheduledPropertyItem In _ScheduledPropertyItems
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _ScheduledPropertyItems.Clear()
                    '    End If
                    '    _ScheduledPropertyItems = Nothing
                    'End If
                    'If _ScheduledPropertyAdditionalInterests IsNot Nothing Then
                    '    If _ScheduledPropertyAdditionalInterests.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInterest In _ScheduledPropertyAdditionalInterests
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _ScheduledPropertyAdditionalInterests.Clear()
                    '    End If
                    '    _ScheduledPropertyAdditionalInterests = Nothing
                    'End If
                    '_ScheduledPropertyCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_ScheduledPropertyCoinsuranceTypeId)
                    'qqHelper.DisposeString(_ScheduledPropertyDeductibleId)
                    'qqHelper.DisposeString(_ScheduledPropertyRate)
                    '_ScheduledPropertyNamedPerils = Nothing
                    'qqHelper.DisposeString(_ScheduledPropertyQuotedPremium)
                    ''added 2/10/2015
                    'qqHelper.DisposeString(_ComputerCoinsuranceTypeId) 'cov also has CoverageBasisTypeId set to 1
                    '_ComputerExcludeEarthquake = Nothing
                    'qqHelper.DisposeString(_ComputerValuationMethodTypeId)
                    'If _ComputerAdditionalInterests IsNot Nothing Then
                    '    If _ComputerAdditionalInterests.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInterest In _ComputerAdditionalInterests
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _ComputerAdditionalInterests.Clear()
                    '    End If
                    '    _ComputerAdditionalInterests = Nothing
                    'End If
                    '_ComputerCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_ComputerQuotedPremium)
                    'qqHelper.DisposeString(_ComputerAllPerilsDeductibleId) 'cov also has CoverageBasisTypeId set to 1
                    'qqHelper.DisposeString(_ComputerAllPerilsQuotedPremium)
                    'qqHelper.DisposeString(_ComputerEarthquakeVolcanicEruptionDeductible) 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
                    'qqHelper.DisposeString(_ComputerEarthquakeVolcanicEruptionQuotedPremium)
                    'qqHelper.DisposeString(_ComputerMechanicalBreakdownDeductible) 'cov also has CoverageBasisTypeId set to 1; example also has ApplyToWrittenPremiuim set to true
                    'qqHelper.DisposeString(_ComputerMechanicalBreakdownQuotedPremium)
                    ''added 2/18/2015
                    'qqHelper.DisposeString(_BuildersRiskDeductibleId) 'cov also has CoverageBasisTypeId set to 1
                    'qqHelper.DisposeString(_BuildersRiskRate)
                    'If _BuildersRiskAdditionalInterests IsNot Nothing Then
                    '    If _BuildersRiskAdditionalInterests.Count > 0 Then
                    '        For Each ai As QuickQuoteAdditionalInterest In _BuildersRiskAdditionalInterests
                    '            ai.Dispose()
                    '            ai = Nothing
                    '        Next
                    '        _BuildersRiskAdditionalInterests.Clear()
                    '    End If
                    '    _BuildersRiskAdditionalInterests = Nothing
                    'End If
                    '_BuildersRiskCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_BuildersRiskQuotedPremium)
                    'If _BuildersRiskScheduledLocations IsNot Nothing Then
                    '    If _BuildersRiskScheduledLocations.Count > 0 Then
                    '        For Each sl As QuickQuoteBuildersRiskScheduledLocation In _BuildersRiskScheduledLocations
                    '            sl.Dispose()
                    '            sl = Nothing
                    '        Next
                    '        _BuildersRiskScheduledLocations.Clear()
                    '    End If
                    '    _BuildersRiskScheduledLocations = Nothing
                    'End If
                    ''added 6/17/2017 for Diamond Proposals
                    'qqHelper.DisposeString(_BuildersRiskScheduleStorageLocationsLimit)
                    'qqHelper.DisposeString(_BuildersRiskScheduleStorageLocationsQuotedPremium)
                    'qqHelper.DisposeString(_BuildersRiskScheduleTransitLimit)
                    'qqHelper.DisposeString(_BuildersRiskScheduleTransitQuotedPremium)
                    'qqHelper.DisposeString(_BuildersRiskScheduleTestingLimit)
                    'qqHelper.DisposeString(_BuildersRiskScheduleTestingQuotedPremium)
                    ''added 3/16/2015
                    'qqHelper.DisposeString(_FineArtsDeductibleCategoryTypeId)
                    'qqHelper.DisposeString(_FineArtsRate)
                    'qqHelper.DisposeString(_FineArtsDeductibleId)
                    'qqHelper.DisposeString(_FineArtsQuotedPremium)
                    'qqHelper.DisposeAdditionalInterests(_FineArtsAdditionalInterests)
                    '_FineArtsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    ''added 3/17/2015; forgot to include some fine arts stuff 3/16/2015
                    '_FineArtsBreakageMarringOrScratching = Nothing
                    'qqHelper.DisposeString(_FineArtsBreakageMarringOrScratchingQuotedPremium)
                    ''added 3/17/2015
                    'qqHelper.DisposeString(_OwnersCargoAnyOneOwnedVehicleLimit)
                    'qqHelper.DisposeString(_OwnersCargoAnyOneOwnedVehicleDeductibleId) 'static data
                    'qqHelper.DisposeString(_OwnersCargoAnyOneOwnedVehicleRate)
                    'qqHelper.DisposeString(_OwnersCargoAnyOneOwnedVehicleDescription)
                    'qqHelper.DisposeAdditionalInterests(_OwnersCargoAnyOneOwnedVehicleAdditionalInterests)
                    '_OwnersCargoAnyOneOwnedVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    '_OwnersCargoAnyOneOwnedVehicleLoadingUnloading = Nothing
                    '_OwnersCargoAnyOneOwnedVehicleNamedPerils = Nothing
                    'qqHelper.DisposeString(_OwnersCargoAnyOneOwnedVehicleQuotedPremium)
                    'qqHelper.DisposeString(_OwnersCargoCatastropheLimit)
                    'qqHelper.DisposeString(_OwnersCargoCatastropheQuotedPremium)
                    'qqHelper.DisposeString(_TransportationCatastropheLimit)
                    'qqHelper.DisposeString(_TransportationCatastropheDeductibleId) 'static data
                    'qqHelper.DisposeString(_TransportationCatastropheDescription)
                    'qqHelper.DisposeAdditionalInterests(_TransportationCatastropheAdditionalInterests)
                    '_TransportationCatastropheCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    '_TransportationCatastropheLoadingUnloading = Nothing
                    '_TransportationCatastropheNamedPerils = Nothing
                    'qqHelper.DisposeString(_TransportationCatastropheQuotedPremium)
                    'qqHelper.DisposeString(_TransportationAnyOneOwnedVehicleLimit) 'note: cov also has CoverageBasisTypeId set to 1
                    'qqHelper.DisposeString(_TransportationAnyOneOwnedVehicleNumberOfVehicles) 'CoverageDetail
                    'qqHelper.DisposeString(_TransportationAnyOneOwnedVehicleRate)
                    'qqHelper.DisposeString(_TransportationAnyOneOwnedVehicleQuotedPremium)
                    ''added 3/18/2015
                    'qqHelper.DisposeScheduledVehicles(_MotorTruckCargoScheduledVehicles)
                    ''added 3/23/2015
                    'qqHelper.DisposeAdditionalInterests(_MotorTruckCargoScheduledVehicleAdditionalInterests)
                    '_MotorTruckCargoScheduledVehicleCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    '_MotorTruckCargoScheduledVehicleLoadingUnloading = Nothing 'CoverageDetail
                    '_MotorTruckCargoScheduledVehicleNamedPerils = Nothing 'CoverageDetail
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleOperatingRadius) 'CoverageDetail
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleRate) 'CoverageDetail
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleDeductibleId) 'static data
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleDescription)
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleQuotedPremium)
                    ''added 3/24/2015
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleCatastropheLimit)
                    'qqHelper.DisposeString(_MotorTruckCargoScheduledVehicleCatastropheQuotedPremium)
                    ''added 3/25/2015
                    'qqHelper.DisposeAdditionalInterests(_SignsAdditionalInterests)
                    '_SignsCanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    'qqHelper.DisposeString(_SignsMaximumDeductible) 'CoverageDetail
                    'qqHelper.DisposeString(_SignsMinimumDeductible) 'CoverageDetail
                    'qqHelper.DisposeString(_SignsValuationMethodTypeId) 'CoverageDetail; static data
                    'qqHelper.DisposeString(_SignsDeductibleId) 'static data
                    'qqHelper.DisposeString(_SignsQuotedPremium)
                    'qqHelper.DisposeString(_SignsAnyOneLossCatastropheLimit) 'note: cov also has CoverageBasisTypeId set to 1
                    'qqHelper.DisposeString(_SignsAnyOneLossCatastropheQuotedPremium)
                    ''added 5/29/2015 for CIM
                    'qqHelper.DisposeString(_ContractorsEquipmentCatastropheLimit)
                    'qqHelper.DisposeString(_ContractorsEquipmentCatastropheQuotedPremium)

                    'removed 7/21/2018
                    ''added 1/20/2015 for Crime
                    'If _ClassificationCodes IsNot Nothing Then
                    '    If _ClassificationCodes.Count > 0 Then
                    '        For Each c As QuickQuoteClassificationCode In _ClassificationCodes
                    '            c.Dispose()
                    '            c = Nothing
                    '        Next
                    '        _ClassificationCodes.Clear()
                    '    End If
                    '    _ClassificationCodes = Nothing
                    'End If
                    ''added 3/26/2015 for CRM
                    '_CanUseClassificationCodeNumForClassificationCodeReconciliation = Nothing
                    'qqHelper.DisposeString(_AggregateLimit)
                    'qqHelper.DisposeString(_NumberOfEmployees)
                    ''added 3/31/2015
                    'qqHelper.DisposeString(_EmployeeTheftLimit) 'note: cov also has CoverageBasisTypeId 1
                    'qqHelper.DisposeString(_EmployeeTheftDeductibleId) 'static data
                    'qqHelper.DisposeString(_EmployeeTheftNumberOfRatableEmployees) 'CoverageDetail
                    'qqHelper.DisposeString(_EmployeeTheftNumberOfAdditionalPremises) 'CoverageDetail
                    'qqHelper.DisposeString(_EmployeeTheftFaithfulPerformanceOfDutyTypeId) 'CoverageDetail; static data
                    'qqHelper.DisposeStrings(_EmployeeTheftScheduledEmployeeBenefitPlans)
                    'qqHelper.DisposeStrings(_EmployeeTheftIncludedPersonsOrClasses)
                    'qqHelper.DisposeStrings(_EmployeeTheftIncludedChairpersonsAndSpecifiedCommitteeMembers)
                    'qqHelper.DisposeStrings(_EmployeeTheftScheduledPartners)
                    'qqHelper.DisposeStrings(_EmployeeTheftScheduledLLCMembers)
                    'qqHelper.DisposeStrings(_EmployeeTheftScheduledNonCompensatedOfficers)
                    'qqHelper.DisposeStrings(_EmployeeTheftExcludedPersonsOrClasses)
                    'qqHelper.DisposeString(_EmployeeTheftQuotedPremium)
                    'qqHelper.DisposeString(_InsidePremisesTheftOfMoneyAndSecuritiesLimit) 'note: cov also has CoverageBasisTypeId 1
                    'qqHelper.DisposeString(_InsidePremisesTheftOfMoneyAndSecuritiesDeductibleId) 'static data
                    'qqHelper.DisposeString(_InsidePremisesTheftOfMoneyAndSecuritiesNumberOfPremises) 'CoverageDetail
                    '_InsidePremisesTheftOfMoneyAndSecuritiesIncludeGuestsProperty = Nothing 'CoverageDetail
                    '_InsidePremisesTheftOfMoneyAndSecuritiesRequireRecordOfChecks = Nothing 'CoverageDetail
                    'qqHelper.DisposeString(_InsidePremisesTheftOfMoneyAndSecuritiesQuotedPremium)
                    'qqHelper.DisposeString(_OutsideThePremisesLimit) 'note: cov also has CoverageBasisTypeId 1
                    'qqHelper.DisposeString(_OutsideThePremisesDeductibleId) 'static data
                    'qqHelper.DisposeString(_OutsideThePremisesNumberOfPremises) 'CoverageDetail
                    '_OutsideThePremisesIncludeSellingPrice = Nothing 'CoverageDetail
                    '_OutsideThePremisesLimitToRobberyOnly = Nothing 'CoverageDetail
                    '_OutsideThePremisesRequireRecordOfChecks = Nothing 'CoverageDetail
                    'qqHelper.DisposeString(_OutsideThePremisesQuotedPremium)

                    'removed 7/21/2018
                    ''added 2/19/2015 for Farm
                    'If _FarmIncidentalLimitCoverages IsNot Nothing Then
                    '    If _FarmIncidentalLimitCoverages.Count > 0 Then
                    '        For Each c As QuickQuoteCoverage In _FarmIncidentalLimitCoverages
                    '            c.Dispose()
                    '            c = Nothing
                    '        Next
                    '        _FarmIncidentalLimitCoverages.Clear()
                    '    End If
                    '    _FarmIncidentalLimitCoverages = Nothing
                    'End If
                    '_HasConvertedFarmIncidentalLimitCoverages = Nothing
                    ''added 2/21/2015
                    'If _ScheduledPersonalPropertyCoverages IsNot Nothing Then
                    '    If _ScheduledPersonalPropertyCoverages.Count > 0 Then
                    '        For Each sp As QuickQuoteScheduledPersonalPropertyCoverage In _ScheduledPersonalPropertyCoverages
                    '            sp.Dispose()
                    '            sp = Nothing
                    '        Next
                    '        _ScheduledPersonalPropertyCoverages.Clear()
                    '    End If
                    '    _ScheduledPersonalPropertyCoverages = Nothing
                    'End If
                    '_HasConvertedScheduledPersonalPropertyCoverages = Nothing
                    'If _UnscheduledPersonalPropertyCoverage IsNot Nothing Then
                    '    _UnscheduledPersonalPropertyCoverage.Dispose()
                    '    _UnscheduledPersonalPropertyCoverage = Nothing
                    'End If
                    '_HasConvertedUnscheduledPersonalPropertyCoverages = Nothing
                    ''added 2/21/2015
                    '_CanUseScheduledFarmPersonalPropertyNumForScheduledPersonalPropertyReconciliation = Nothing
                    '_CanUseUnscheduledFarmPersonalPropertyNumForUnscheduledPersonalPropertyReconciliation = Nothing
                    ''added 2/25/2015
                    'If _OptionalCoverages IsNot Nothing Then
                    '    If _OptionalCoverages.Count > 0 Then
                    '        For Each oc As QuickQuoteOptionalCoverage In _OptionalCoverages
                    '            oc.Dispose()
                    '            oc = Nothing
                    '        Next
                    '        _OptionalCoverages.Clear()
                    '    End If
                    '    _OptionalCoverages = Nothing
                    'End If
                    '_HasConvertedOptionalCoverages = Nothing
                    '_CanUseOptionalCoveragesNumForOptionalCoverageReconciliation = Nothing 'added 5/12/2015 for reconciliation
                    ''added 2/27/2015
                    'qqHelper.DisposeAdditionalInterests(_AdditionalInterests)
                    '_CanUseAdditionalInterestNumForAdditionalInterestReconciliation = Nothing
                    ''added 3/3/2015
                    'qqHelper.DisposeString(_AggregateLiabilityIncrementTypeId) 'static data; dropdown at top of Detail screen for Farm (id 1 = 2; from example)
                    'qqHelper.DisposeString(_DrivecamContractEffectiveDate) '/DateTime; may not be needed... identified in xml but not UI
                    'qqHelper.DisposeString(_EmployeesFullTime) 'under Detail/Optional Liability for Farm
                    'qqHelper.DisposeString(_EmployeesPartTime1To40Days) 'under Detail/Optional Liability for Farm
                    'qqHelper.DisposeString(_EmployeesPartTime41To179Days) 'under Detail/Optional Liability for Farm
                    'qqHelper.DisposeString(_EntityTypeId) 'static data; dropdown at top of Detail screen for Farm (id 2 = Partnership; from example)
                    'qqHelper.DisposeString(_LiabilityOptionId) 'static data; dropdown at top of Detail screen for Farm (id 1 = Farm Personal; from example)
                    'qqHelper.DisposeString(_LimitedPerilsCategoryTypeId) 'static data; dropdown at top of Detail screen for Farm (id 3 = Both; from example)
                    ''added 4/30/2015
                    'qqHelper.DisposeString(_Farm_F_and_G_DeductibleLimitId) 'static data
                    'qqHelper.DisposeString(_Farm_F_and_G_DeductibleQuotedPremium)
                    '_HasFarmEquipmentBreakdown = Nothing
                    'qqHelper.DisposeString(_FarmEquipmentBreakdownQuotedPremium)
                    '_HasFarmExtender = Nothing
                    'qqHelper.DisposeString(_FarmExtenderQuotedPremium)
                    'qqHelper.DisposeString(_FarmAllStarLimitId)
                    'qqHelper.DisposeString(_FarmAllStarQuotedPremium)
                    ''added 5/5/2015
                    '_HasFarmEmployersLiability = Nothing
                    'qqHelper.DisposeString(_FarmEmployersLiabilityQuotedPremium)
                    'qqHelper.DisposeString(_FarmFireLegalLiabilityLimitId)
                    'qqHelper.DisposeString(_FarmFireLegalLiabilityQuotedPremium)
                    '_HasFarmPersonalAndAdvertisingInjury = Nothing
                    'qqHelper.DisposeString(_FarmPersonalAndAdvertisingInjuryQuotedPremium)
                    'qqHelper.DisposeString(_FarmContractGrowersCareCustodyControlLimitId)
                    'qqHelper.DisposeString(_FarmContractGrowersCareCustodyControlDescription)
                    'qqHelper.DisposeString(_FarmContractGrowersCareCustodyControlQuotedPremium)
                    '_HasFarmExclusionOfProductsCompletedWork = Nothing
                    'qqHelper.DisposeString(_FarmExclusionOfProductsCompletedWorkQuotedPremium)
                    ''added 5/12/2015; goes w/ FarmIncidentalLimitCoverages
                    'If _FarmIncidentalLimits IsNot Nothing Then
                    '    If _FarmIncidentalLimits.Count > 0 Then
                    '        For Each fil As QuickQuoteFarmIncidentalLimit In _FarmIncidentalLimits
                    '            fil.Dispose()
                    '            fil = Nothing
                    '        Next
                    '        _FarmIncidentalLimits.Clear()
                    '    End If
                    '    _FarmIncidentalLimits = Nothing
                    'End If
                    ''added 9/23/2015
                    'qqHelper.DisposeString(_Locations_Farm_L_Liability_QuotedPremium)
                    'qqHelper.DisposeString(_Locations_Farm_M_Medical_Payments_QuotedPremium)

                    'removed 7/21/2018
                    ''added 3/3/2015 for new CPP package parts
                    '_CPP_Has_InlandMarine_PackagePart = Nothing
                    '_CPP_Has_Crime_PackagePart = Nothing
                    '_CPP_Has_Garage_PackagePart = Nothing 'added 4/22/2017
                    '_CPP_Has_Property_PackagePart = Nothing 'added 5/11/2017; will likely always be on CPP
                    '_CPP_Has_GeneralLiability_PackagePart = Nothing 'added 5/11/2017; typically on CPP but shouldn't be when Garage PackagePart is there
                    ''added 4/2/2015 for Crime package part; may also eventually make a separate variable/prop to hold CPP_CGL_ProgramTypeId... currently just uses same ProgramTypeId variable/property that monoline quotes use
                    'qqHelper.DisposeString(_CPP_CRM_ProgramTypeId)
                    'qqHelper.DisposeString(_CPP_GAR_ProgramTypeId) 'added 5/8/2017

                    'removed 7/21/2018
                    ''added 3/6/2015 for CPR/CPP Business Income ALS (eff 4/1/2015)
                    '_HasBusinessIncomeALS = Nothing
                    'qqHelper.DisposeString(_BusinessIncomeALSLimit)
                    'qqHelper.DisposeString(_BusinessIncomeALSQuotedPremium)

                    'removed 7/21/2018
                    ''added 5/29/2015 for CPP Contractors Enhancement Endorsement (CPR, CGL, CIM; eff 5/12/2015)
                    '_HasContractorsEnhancement = Nothing
                    'qqHelper.DisposeString(_ContractorsEnhancementQuotedPremium)
                    'qqHelper.DisposeString(_CPP_CPR_ContractorsEnhancementQuotedPremium)
                    'qqHelper.DisposeString(_CPP_CGL_ContractorsEnhancementQuotedPremium)
                    'qqHelper.DisposeString(_CPP_CIM_ContractorsEnhancementQuotedPremium)
                    ''added 5/29/2015 for CPP Manufacturers Enhancement (CPR, CGL; eff 6/30/2015)
                    '_HasManufacturersEnhancement = Nothing
                    'qqHelper.DisposeString(_ManufacturersEnhancementQuotedPremium)
                    'qqHelper.DisposeString(_CPP_CPR_ManufacturersEnhancementQuotedPremium)
                    'qqHelper.DisposeString(_CPP_CGL_ManufacturersEnhancementQuotedPremium)

                    'removed 7/21/2018
                    ''added 5/11/2015
                    'qqHelper.DisposeString(_FarmMachinerySpecialCoverageG_QuotedPremium)

                    'removed 7/21/2018
                    ''added 8/10/2016 for new cov (PPA versionId 102; coverageCodeId 80443)
                    '_HasAutoPlusEnhancement = Nothing
                    'qqHelper.DisposeString(_AutoPlusEnhancement_QuotedPremium)

                    'removed 7/27/2018
                    ''added 10/28/2016 - will be used to determine if QuickQuoteObject should be used for New Business Quoting, Endorsement Transaction, or ReadOnly purposes
                    '_QuoteTransactionType = Nothing
                    'qqHelper.DisposeString(_OriginalEffectiveDate)
                    'qqHelper.DisposeString(_OriginalExpirationDate)
                    'qqHelper.DisposeString(_OriginalTransactionEffectiveDate)
                    'qqHelper.DisposeString(_OriginalTransactionExpirationDate)

                    'removed 7/27/2018
                    ''added 11/4/2016
                    'qqHelper.DisposeString(_TransactionRemark)
                    'qqHelper.DisposeString(_TransactionReasonId)

                    'removed 7/27/2018
                    ''added 11/10/2016 for Endorsements
                    'qqHelper.DisposeString(_AnnualPremium) 'PolicyImage.premium_annual
                    'qqHelper.DisposeString(_ChangeInFullTermPremium) 'PolicyImage.premium_chg_fullterm
                    'qqHelper.DisposeString(_ChangeInWrittenPremium) 'PolicyImage.premium_chg_written
                    'qqHelper.DisposeString(_DifferenceChangeInFullTermPremium) 'PolicyImage.premium_diff_chg_fullterm
                    'qqHelper.DisposeString(_DifferenceChangeInWrittenPremium) 'PolicyImage.premium_diff_chg_written
                    'qqHelper.DisposeString(_FullTermPremium) 'PolicyImage.premium_fullterm
                    'qqHelper.DisposeString(_FullTermPremiumOffsetForPreviousImage) 'PolicyImage.ftp_offset_for_prev_image
                    'qqHelper.DisposeString(_FullTermPremiumOnsetForCurrent) 'PolicyImage.ftp_onset_for_current
                    'qqHelper.DisposeString(_OffsetPremiumForPreviousImage) 'PolicyImage.offset_for_prev_image
                    'qqHelper.DisposeString(_OnsetPremiumForCurrentImage) 'PolicyImage.onset_for_current
                    'qqHelper.DisposeString(_PreviousWrittenPremium) 'PolicyImage.premium_previous_written
                    'qqHelper.DisposeString(_WrittenPremium) 'PolicyImage.premium_written
                    'qqHelper.DisposeString(_PriorTermAnnual) 'PolicyImage.prior_term_annual_premium
                    'qqHelper.DisposeString(_PriorTermFullterm) 'PolicyImage.prior_term_fullterm

                    'added 3/27/2017 for Diamond Proposals; removed 7/27/2018
                    'If _Comments IsNot Nothing Then
                    '    If _Comments.Count > 0 Then
                    '        For Each c As QuickQuoteComment In _Comments
                    '            If c IsNot Nothing Then
                    '                c.Dispose()
                    '                c = Nothing
                    '            End If
                    '        Next
                    '        _Comments.Clear()
                    '    End If
                    '    _Comments = Nothing
                    'End If

                    'removed 7/21/2018
                    ''added 5/4/2017 for CIM (Golf)
                    'If _ScheduledGolfCourses IsNot Nothing Then
                    '    If _ScheduledGolfCourses.Count > 0 Then
                    '        For Each c As QuickQuoteScheduledGolfCourse In _ScheduledGolfCourses
                    '            If c IsNot Nothing Then
                    '                c.Dispose()
                    '                c = Nothing
                    '            End If
                    '        Next
                    '        _ScheduledGolfCourses.Clear()
                    '    End If
                    '    _ScheduledGolfCourses = Nothing
                    'End If
                    'If _ScheduledGolfCartCourses IsNot Nothing Then
                    '    If _ScheduledGolfCartCourses.Count > 0 Then
                    '        For Each c As QuickQuoteScheduledGolfCartCourse In _ScheduledGolfCartCourses
                    '            If c IsNot Nothing Then
                    '                c.Dispose()
                    '                c = Nothing
                    '            End If
                    '        Next
                    '        _ScheduledGolfCartCourses.Clear()
                    '    End If
                    '    _ScheduledGolfCartCourses = Nothing
                    'End If
                    'qqHelper.DisposeString(_GolfCourseQuotedPremium) 'covCodeId 21341
                    'qqHelper.DisposeString(_GolfCourseCoverageLimitId) 'covCodeId 21341
                    'qqHelper.DisposeString(_GolfCourseDeductibleId) 'covCodeId 21341
                    'qqHelper.DisposeString(_GolfCourseCoinsuranceTypeId) 'covCodeId 21341
                    'qqHelper.DisposeString(_GolfCourseRate) 'covCodeId 21341
                    'qqHelper.DisposeString(_GolfCartQuotedPremium) 'covCodeId 50121
                    'qqHelper.DisposeString(_GolfCartManualLimitAmount) 'covCodeId 50121
                    'qqHelper.DisposeString(_GolfCartDeductibleId) 'covCodeId 50121
                    'qqHelper.DisposeString(_GolfCartCoinsuranceTypeId) 'covCodeId 50121
                    'qqHelper.DisposeString(_GolfCartRate) 'covCodeId 50121
                    'qqHelper.DisposeString(_GolfCartCatastropheManualLimitAmount) 'covCodeId 21343
                    'qqHelper.DisposeString(_GolfCartDebrisRemovalCoverageLimitId) 'covCodeId 80223

                    'removed 7/21/2018
                    ''added 5/8/2017 for GAR
                    'qqHelper.DisposeString(_Liability_UM_UIM_AggregateLiabilityIncrementTypeId) 'covDetail; covCodeId 21552
                    'qqHelper.DisposeString(_Liability_UM_UIM_DeductibleCategoryTypeId) 'covDetail; covCodeId 21552
                    'qqHelper.DisposeString(_LocationsTotal_LiabilityQuotedPremium) 'loc covCodeId 10111
                    '_HasUninsuredMotoristPropertyDamage = Nothing 'covCodeId 21539
                    'qqHelper.DisposeString(_UninsuredMotoristPropertyDamageQuotedPremium) 'covCodeId 21539; may not be populated
                    'qqHelper.DisposeString(_MedicalPaymentsTypeId) 'covDetail; covCodeId 21540
                    'qqHelper.DisposeString(_LocationsTotal_MedicalPaymentsQuotedPremium) 'loc covCodeId 10112
                    '_HasPhysicalDamageOtherThanCollision = Nothing 'covCodeId 21550
                    'qqHelper.DisposeString(_PhysicalDamageOtherThanCollisionQuotedPremium) 'covCodeId 21550; may not be populated
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium) 'loc covCodeId 10116
                    '_HasPhysicalDamageCollision = Nothing 'covCodeId 21551
                    'qqHelper.DisposeString(_PhysicalDamageCollisionQuotedPremium) 'covCodeId 21551; may not be populated
                    'qqHelper.DisposeString(_PhysicalDamageCollisionDeductibleId) 'covCodeId 21551
                    '_HasGarageKeepersOtherThanCollision = Nothing 'covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionQuotedPremium) 'covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionManualLimitAmount) 'covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionBasisTypeId) 'covDetail; covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionDeductibleCategoryTypeId) 'covDetail; covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionTypeId) 'covDetail; covCodeId 21541
                    'qqHelper.DisposeString(_GarageKeepersOtherThanCollisionDeductibleId) 'covCodeId 21541
                    '_HasGarageKeepersCollision = Nothing 'covCodeId 21542
                    'qqHelper.DisposeString(_GarageKeepersCollisionQuotedPremium) 'covCodeId 21542
                    'qqHelper.DisposeString(_GarageKeepersCollisionManualLimitAmount) 'covCodeId 21542
                    'qqHelper.DisposeString(_GarageKeepersCollisionBasisTypeId) 'covDetail; covCodeId 21542
                    'qqHelper.DisposeString(_GarageKeepersCollisionDeductibleId) 'covCodeId 21542
                    'qqHelper.DisposeString(_GarageKeepersTotalPremium) 'added 5/9/2017; SUM of prems for policy (covCodeIds 21541 and 21542 - has prem) and loc (covCodeIds 10086, 10087, and 10126 - no prem) covs
                    ''added 5/10/2017 for GAR (also CAP)
                    'qqHelper.DisposeString(_AutoLiabilityTotalPremium) 'SUM of prems for policy (covCodeId 21552 - CAP/GAR: Liability_UM_UIM_QuotedPremium), loc (covCodeId 10111 - GAR: LiabilityQuotedPremium), and veh (covCodeId 2 - PPA/CAP/GAR: Liability_UM_UIM_QuotedPremium) covs
                    'qqHelper.DisposeString(_AutoMedicalPaymentsTotalPremium) 'SUM of prems for policy (covCodeId 21540 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 70072 - HOM/DFR, 70018 - FAR), loc (covCodeId 10112 - GAR: MedicalPaymentsQuotedPremium), and veh (covCodeId 60006 - CAP/GAR: MedicalPaymentsQuotedPremium; could also be for 6 - PPA) covs
                    'qqHelper.DisposeString(_Auto_UM_UIM_TotalPremium) 'SUM of prems for policy (covCodeId 21539 - CAP/GAR: UninsuredMotoristPropertyDamageQuotedPremium), loc (covCodeId 10113 - GAR: UninsuredUnderinsuredMotoristBIandPDQuotedPremium), and veh (covCodeIds 30013 - CAP/GAR: UnderinsuredMotoristBodilyInjuryLiabilityQuotedPremium and 8 - PPA/CAP/GAR: UninsuredMotoristLiabilityQuotedPremium) covs
                    'qqHelper.DisposeString(_AutoComprehensiveTotalPremium) 'SUM of prems for policy (covCodeId 21550 - CAP/GAR: PhysicalDamageOtherThanCollisionQuotedPremium; 10063 - CAP/GAR: ComprehensiveQuotedPremium as-of 6/19/2017), loc (covCodeId 10116 - GAR: PhysicalDamageOtherThanCollisionStandardOpenLotsQuotedPremium), and veh (covCodeId 3 - PPA/CAP/GAR: ComprehensiveQuotedPremium) covs
                    'qqHelper.DisposeString(_AutoCollisionTotalPremium) 'SUM of prems for policy (covCodeId 21551 - CAP/GAR: PhysicalDamageCollisionQuotedPremium; 10064 - CAP/GAR: CollisionQuotedPremium as-of 6/19/2017), loc (covCodeId 10120 - GAR: DealersBlanketCollisionQuotedPremium), and veh (covCodeId 5 - PPA/CAP/GAR: CollisionQuotedPremium) covs
                    'qqHelper.DisposeString(_CAP_GAR_OptCovs_Premium) 'diff of CAP/GAR totalPremium minus above premiums, towingLabor, rental, and garageKeepers; note: will also exclude (subtract) EnhancementEndorsement as-of 6/20/2017
                    ''added 5/11/2017 for GAR
                    'qqHelper.DisposeString(_LocationsTotal_ClassIIEmployees25AndOlder)
                    'qqHelper.DisposeString(_LocationsTotal_ClassIIEmployeesUnderAge25)
                    'qqHelper.DisposeString(_LocationsTotal_ClassIOtherEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_ClassIRegularEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_NumberOfEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_Payroll)
                    'qqHelper.DisposeString(_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDNumberOfPlates) 'covCodeId 10113; covDetail
                    ''added 5/16/2017 for GAR
                    'qqHelper.DisposeString(_LocationsTotal_ClassIEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_ClassIIEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_ClassIandIIEmployees)
                    'qqHelper.DisposeString(_LocationsTotal_DealersBlanketCollisionQuotedPremium) 'loc covCodeId 10120
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingQuotedPremium) 'loc covCodeId 10115
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionBuildingManualLimitAmount) 'loc covCodeId 10115
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsQuotedPremium) 'loc covCodeId 10117
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionNonStandardOpenLotsManualLimitAmount) 'loc covCodeId 10117
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsQuotedPremium) 'loc covCodeId 10118
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousBuildingsManualLimitAmount) 'loc covCodeId 10118
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsQuotedPremium) 'loc covCodeId 10119
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionMiscellaneousOpenLotsManualLimitAmount) 'loc covCodeId 10119
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionTotalQuotedPremium) 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
                    'qqHelper.DisposeString(_LocationsTotal_PhysicalDamageOtherThanCollisionTotalManualLimitAmount) 'SUM of loc covCodeIds 10115, 10116, 10117, 10118, and 10119
                    'qqHelper.DisposeString(_Locations_PhysicalDamageOtherThanCollisionDeductibleCategoryTypeId) 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
                    'qqHelper.DisposeString(_Locations_PhysicalDamageOtherThanCollisionTypeId) 'covDetail; loc covCodeIds 10115, 10116, 10117, 10118, and 10119
                    'qqHelper.DisposeString(_Locations_PhysicalDamageOtherThanCollisionDeductibleId) 'loc covCodeIds 10115, 10116, 10117, 10118, and 10119
                    ''added 5/16/2017 for CPP
                    'qqHelper.DisposeString(_CPP_MinPremAdj_CPR) 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                    'qqHelper.DisposeString(_CPP_MinPremAdj_CGL) 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                    'qqHelper.DisposeString(_CPP_MinPremAdj_CIM) 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                    'qqHelper.DisposeString(_CPP_MinPremAdj_CRM) 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                    'qqHelper.DisposeString(_CPP_MinPremAdj_GAR) 'covCodeId 10121; note: covCodeId good for CGL, PIM (not in VR yet), FAR, CAP, WCP, GAR, BOP, CRM, CPR, CIM
                    ''added 5/25/2017 for GAR
                    'qqHelper.DisposeString(_CAP_GAR_PolicyLevelCovs_Premium)
                    'qqHelper.DisposeString(_CAP_GAR_LocationLevelCovs_Premium)
                    'qqHelper.DisposeString(_CAP_GAR_VehicleLevelCovs_Premium)
                    'qqHelper.DisposeString(_LocationsTotal_UninsuredUnderinsuredMotoristBIandPDQuotedPremium) 'loc covCodeId 10113
                    'qqHelper.DisposeString(_LocationsTotal_GarageKeepersOtherThanCollisionQuotedPremium) 'loc covCodeId 10086
                    'qqHelper.DisposeString(_LocationsTotal_GarageKeepersCollisionQuotedPremium) 'loc covCodeId 10087
                    'qqHelper.DisposeString(_LocationsTotal_GarageKeepersCoverageExtensionsQuotedPremium) 'loc covCodeId 10126
                    'qqHelper.DisposeString(_CAP_GAR_PolicyAndLocationLevelCovs_Premium) 'added 5/26/2017
                    'qqHelper.DisposeString(_VehiclesTotal_CAP_GAR_TotalCoveragesPremium) 'added 5/26/2017; should essentially match CAP_GAR_VehicleLevelCovs_Premium
                    'qqHelper.DisposeString(_VehiclesTotal_TotalCoveragesPremium) 'added 5/26/2017
                    'qqHelper.DisposeString(_DriversTotal_TotalCoveragesPremium) 'added 5/27/2017

                    'removed 7/21/2018
                    ''added 5/23/2017
                    'If _AdditionalInterestListLinks IsNot Nothing Then
                    '    If _AdditionalInterestListLinks.Count > 0 Then
                    '        For Each ll As QuickQuoteAdditionalInterestListLink In _AdditionalInterestListLinks
                    '            If ll Is Nothing Then
                    '                ll.Dispose()
                    '                ll = Nothing
                    '            End If
                    '        Next
                    '        _AdditionalInterestListLinks.Clear()
                    '    End If
                    '    _AdditionalInterestListLinks = Nothing
                    'End If

                    'added 8/19/2017 for WCP Risk Grade; could also be used for other warnings/stops/kills
                    'If _Messages IsNot Nothing Then
                    '    If _Messages.Count > 0 Then
                    '        For Each msg As QuickQuoteMessage In _Messages
                    '            If msg IsNot Nothing Then
                    '                msg.Dispose()
                    '                msg = Nothing
                    '            End If
                    '        Next
                    '        _Messages.Clear()
                    '    End If
                    '    _Messages = Nothing
                    'End If
                    'updated 8/23/2017 to use common method
                    'qqHelper.DisposeMessages(_Messages) 'removed 7/27/2018

                    'removed 7/21/2018
                    ''added 8/29/2017
                    'qqHelper.DisposeString(_WCP_WaiverPremium) 'covCodeId 10124 CovAddInfo w/ "Waiver Premium" in desc

                    'removed 7/21/2018
                    ''added 5/30/2018 for PARAchute stuff
                    'qqHelper.DisposeString(_MultiLineDiscountValue)
                    'qqHelper.DisposeString(_PriorBodilyInjuryLimitId)

                    'added 7/16/2018
                    If _VersionAndLobInfo IsNot Nothing Then
                        _VersionAndLobInfo.Dispose()
                        _VersionAndLobInfo = Nothing
                    End If
                    'added 7/27/2018
                    If _TopLevelQuoteInfo IsNot Nothing Then
                        _TopLevelQuoteInfo.Dispose()
                        _TopLevelQuoteInfo = Nothing
                    End If

                    'added 7/25/2018
                    'If _MultiStateQuotes IsNot Nothing Then
                    '    If _MultiStateQuotes.Count > 0 Then
                    '        For Each msq As QuickQuoteObject In _MultiStateQuotes
                    '            If msq IsNot Nothing Then
                    '                msq.Dispose()
                    '                msq = Nothing
                    '            End If
                    '        Next
                    '        _MultiStateQuotes.Clear()
                    '    End If
                    '    _MultiStateQuotes = Nothing
                    'End If
                    'qqHelper.DisposeQuickQuoteObjects(_MultiStateQuotes) 'removed 7/27/2018

                    'added 5/14/2021; removed 5/19/2021... private variables now live on lower-level object
                    '_CopiedAnySourceAIsToTopLevelOnLastCheck = Nothing
                    '_RemovedAnySourceAIsFromTopLevelOnLastCheck = Nothing


                    MyBase.Dispose() 'added 8/4/2014
                End If
                ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
                ' TODO: set large fields to null.
            End If
            Me.disposedValue = True
        End Sub

        ' TODO: override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
        'Protected Overrides Sub Finalize()
        '    ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        '    Dispose(False)
        '    MyBase.Finalize()
        'End Sub

        ' This code added by Visual Basic to correctly implement the disposable pattern.
        'Public Sub Dispose() Implements IDisposable.Dispose
        'updated 8/4/2014 w/ QuickQuoteBaseObject inheritance
        Public Overrides Sub Dispose() 'Implements IDisposable.Dispose
            ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace
